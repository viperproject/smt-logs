(get-info :version)
; (:version "4.12.1")
; Started: 2025-01-08 21:12:44
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<PyType> 0)
(declare-sort Seq<Measure$> 0)
(declare-sort Seq<$Ref> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<_Name> 0)
(declare-sort PyType 0)
(declare-sort _list_ce_helper 0)
(declare-sort _Name 0)
(declare-sort Measure$ 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<PyType>To$Snap (Seq<PyType>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<PyType> ($Snap) Seq<PyType>)
(assert (forall ((x Seq<PyType>)) (!
    (= x ($SortWrappers.$SnapToSeq<PyType>($SortWrappers.Seq<PyType>To$Snap x)))
    :pattern (($SortWrappers.Seq<PyType>To$Snap x))
    :qid |$Snap.$SnapToSeq<PyType>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<PyType>To$Snap($SortWrappers.$SnapToSeq<PyType> x)))
    :pattern (($SortWrappers.$SnapToSeq<PyType> x))
    :qid |$Snap.Seq<PyType>To$SnapToSeq<PyType>|
    )))
(declare-fun $SortWrappers.Seq<Measure$>To$Snap (Seq<Measure$>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Measure$> ($Snap) Seq<Measure$>)
(assert (forall ((x Seq<Measure$>)) (!
    (= x ($SortWrappers.$SnapToSeq<Measure$>($SortWrappers.Seq<Measure$>To$Snap x)))
    :pattern (($SortWrappers.Seq<Measure$>To$Snap x))
    :qid |$Snap.$SnapToSeq<Measure$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Measure$>To$Snap($SortWrappers.$SnapToSeq<Measure$> x)))
    :pattern (($SortWrappers.$SnapToSeq<Measure$> x))
    :qid |$Snap.Seq<Measure$>To$SnapToSeq<Measure$>|
    )))
(declare-fun $SortWrappers.Seq<$Ref>To$Snap (Seq<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<$Ref> ($Snap) Seq<$Ref>)
(assert (forall ((x Seq<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSeq<$Ref>($SortWrappers.Seq<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Seq<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSeq<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<$Ref>To$Snap($SortWrappers.$SnapToSeq<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSeq<$Ref> x))
    :qid |$Snap.Seq<$Ref>To$SnapToSeq<$Ref>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<_Name>To$Snap (Set<_Name>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<_Name> ($Snap) Set<_Name>)
(assert (forall ((x Set<_Name>)) (!
    (= x ($SortWrappers.$SnapToSet<_Name>($SortWrappers.Set<_Name>To$Snap x)))
    :pattern (($SortWrappers.Set<_Name>To$Snap x))
    :qid |$Snap.$SnapToSet<_Name>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<_Name>To$Snap($SortWrappers.$SnapToSet<_Name> x)))
    :pattern (($SortWrappers.$SnapToSet<_Name> x))
    :qid |$Snap.Set<_Name>To$SnapToSet<_Name>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.PyTypeTo$Snap (PyType) $Snap)
(declare-fun $SortWrappers.$SnapToPyType ($Snap) PyType)
(assert (forall ((x PyType)) (!
    (= x ($SortWrappers.$SnapToPyType($SortWrappers.PyTypeTo$Snap x)))
    :pattern (($SortWrappers.PyTypeTo$Snap x))
    :qid |$Snap.$SnapToPyTypeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.PyTypeTo$Snap($SortWrappers.$SnapToPyType x)))
    :pattern (($SortWrappers.$SnapToPyType x))
    :qid |$Snap.PyTypeTo$SnapToPyType|
    )))
(declare-fun $SortWrappers._list_ce_helperTo$Snap (_list_ce_helper) $Snap)
(declare-fun $SortWrappers.$SnapTo_list_ce_helper ($Snap) _list_ce_helper)
(assert (forall ((x _list_ce_helper)) (!
    (= x ($SortWrappers.$SnapTo_list_ce_helper($SortWrappers._list_ce_helperTo$Snap x)))
    :pattern (($SortWrappers._list_ce_helperTo$Snap x))
    :qid |$Snap.$SnapTo_list_ce_helperTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._list_ce_helperTo$Snap($SortWrappers.$SnapTo_list_ce_helper x)))
    :pattern (($SortWrappers.$SnapTo_list_ce_helper x))
    :qid |$Snap._list_ce_helperTo$SnapTo_list_ce_helper|
    )))
(declare-fun $SortWrappers._NameTo$Snap (_Name) $Snap)
(declare-fun $SortWrappers.$SnapTo_Name ($Snap) _Name)
(assert (forall ((x _Name)) (!
    (= x ($SortWrappers.$SnapTo_Name($SortWrappers._NameTo$Snap x)))
    :pattern (($SortWrappers._NameTo$Snap x))
    :qid |$Snap.$SnapTo_NameTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._NameTo$Snap($SortWrappers.$SnapTo_Name x)))
    :pattern (($SortWrappers.$SnapTo_Name x))
    :qid |$Snap._NameTo$SnapTo_Name|
    )))
(declare-fun $SortWrappers.Measure$To$Snap (Measure$) $Snap)
(declare-fun $SortWrappers.$SnapToMeasure$ ($Snap) Measure$)
(assert (forall ((x Measure$)) (!
    (= x ($SortWrappers.$SnapToMeasure$($SortWrappers.Measure$To$Snap x)))
    :pattern (($SortWrappers.Measure$To$Snap x))
    :qid |$Snap.$SnapToMeasure$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Measure$To$Snap($SortWrappers.$SnapToMeasure$ x)))
    :pattern (($SortWrappers.$SnapToMeasure$ x))
    :qid |$Snap.Measure$To$SnapToMeasure$|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<_Name>) Int)
(declare-const Set_empty Set<_Name>)
(declare-fun Set_in (_Name Set<_Name>) Bool)
(declare-fun Set_singleton (_Name) Set<_Name>)
(declare-fun Set_unionone (Set<_Name> _Name) Set<_Name>)
(declare-fun Set_union (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_intersection (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_difference (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_subset (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_equal (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_skolem_diff (Set<_Name> Set<_Name>) _Name)
(declare-fun Seq_length (Seq<PyType>) Int)
(declare-const Seq_empty Seq<PyType>)
(declare-fun Seq_singleton (PyType) Seq<PyType>)
(declare-fun Seq_append (Seq<PyType> Seq<PyType>) Seq<PyType>)
(declare-fun Seq_index (Seq<PyType> Int) PyType)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<PyType> Int PyType) Seq<PyType>)
(declare-fun Seq_take (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_drop (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_contains (Seq<PyType> PyType) Bool)
(declare-fun Seq_contains_trigger (Seq<PyType> PyType) Bool)
(declare-fun Seq_skolem (Seq<PyType> PyType) Int)
(declare-fun Seq_equal (Seq<PyType> Seq<PyType>) Bool)
(declare-fun Seq_skolem_diff (Seq<PyType> Seq<PyType>) Int)
(declare-fun Seq_length (Seq<Measure$>) Int)
(declare-const Seq_empty Seq<Measure$>)
(declare-fun Seq_singleton (Measure$) Seq<Measure$>)
(declare-fun Seq_append (Seq<Measure$> Seq<Measure$>) Seq<Measure$>)
(declare-fun Seq_index (Seq<Measure$> Int) Measure$)
(declare-fun Seq_update (Seq<Measure$> Int Measure$) Seq<Measure$>)
(declare-fun Seq_take (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_drop (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_contains (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_contains_trigger (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_skolem (Seq<Measure$> Measure$) Int)
(declare-fun Seq_equal (Seq<Measure$> Seq<Measure$>) Bool)
(declare-fun Seq_skolem_diff (Seq<Measure$> Seq<Measure$>) Int)
(declare-fun Seq_length (Seq<$Ref>) Int)
(declare-const Seq_empty Seq<$Ref>)
(declare-fun Seq_singleton ($Ref) Seq<$Ref>)
(declare-fun Seq_append (Seq<$Ref> Seq<$Ref>) Seq<$Ref>)
(declare-fun Seq_index (Seq<$Ref> Int) $Ref)
(declare-fun Seq_update (Seq<$Ref> Int $Ref) Seq<$Ref>)
(declare-fun Seq_take (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_drop (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_contains (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_contains_trigger (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_skolem (Seq<$Ref> $Ref) Int)
(declare-fun Seq_equal (Seq<$Ref> Seq<$Ref>) Bool)
(declare-fun Seq_skolem_diff (Seq<$Ref> Seq<$Ref>) Int)
(declare-fun Measure$create<Measure$> (Bool $Ref Int) Measure$)
(declare-fun Measure$guard<Bool> (Measure$) Bool)
(declare-fun Measure$key<Ref> (Measure$) $Ref)
(declare-fun Measure$value<Int> (Measure$) Int)
(declare-fun seq_ref_length<Int> (Seq<$Ref>) Int)
(declare-fun seq_ref_index<Ref> (Seq<$Ref> Int) $Ref)
(declare-fun _combine<_Name> (_Name _Name) _Name)
(declare-fun _single<_Name> (Int) _Name)
(declare-fun _get_combined_prefix<_Name> (_Name) _Name)
(declare-fun _get_combined_name<_Name> (_Name) _Name)
(declare-fun _get_value<Int> (_Name) Int)
(declare-fun _name_type<Bool> (_Name) Bool)
(declare-fun _is_single<Bool> (_Name) Bool)
(declare-fun _is_combined<Bool> (_Name) Bool)
(declare-fun extends_<Bool> (PyType PyType) Bool)
(declare-fun issubtype<Bool> (PyType PyType) Bool)
(declare-fun isnotsubtype<Bool> (PyType PyType) Bool)
(declare-fun tuple_args<Seq<PyType>> (PyType) Seq<PyType>)
(declare-fun typeof<PyType> ($Ref) PyType)
(declare-fun get_basic<PyType> (PyType) PyType)
(declare-fun union_type_1<PyType> (PyType) PyType)
(declare-fun union_type_2<PyType> (PyType PyType) PyType)
(declare-fun union_type_3<PyType> (PyType PyType PyType) PyType)
(declare-fun union_type_4<PyType> (PyType PyType PyType PyType) PyType)
(declare-const object<PyType> PyType)
(declare-const list_basic<PyType> PyType)
(declare-fun list<PyType> (PyType) PyType)
(declare-fun list_arg<PyType> (PyType Int) PyType)
(declare-const set_basic<PyType> PyType)
(declare-fun set<PyType> (PyType) PyType)
(declare-fun set_arg<PyType> (PyType Int) PyType)
(declare-const dict_basic<PyType> PyType)
(declare-fun dict<PyType> (PyType PyType) PyType)
(declare-fun dict_arg<PyType> (PyType Int) PyType)
(declare-const int<PyType> PyType)
(declare-const float<PyType> PyType)
(declare-const bool<PyType> PyType)
(declare-const NoneType<PyType> PyType)
(declare-const Exception<PyType> PyType)
(declare-const ConnectionRefusedError<PyType> PyType)
(declare-const traceback<PyType> PyType)
(declare-const str<PyType> PyType)
(declare-const bytes<PyType> PyType)
(declare-const tuple_basic<PyType> PyType)
(declare-fun tuple<PyType> (Seq<PyType>) PyType)
(declare-fun tuple_arg<PyType> (PyType Int) PyType)
(declare-const PSeq_basic<PyType> PyType)
(declare-fun PSeq<PyType> (PyType) PyType)
(declare-fun PSeq_arg<PyType> (PyType Int) PyType)
(declare-const PSet_basic<PyType> PyType)
(declare-fun PSet<PyType> (PyType) PyType)
(declare-fun PSet_arg<PyType> (PyType Int) PyType)
(declare-const PMultiset_basic<PyType> PyType)
(declare-fun PMultiset<PyType> (PyType) PyType)
(declare-fun PMultiset_arg<PyType> (PyType Int) PyType)
(declare-const slice<PyType> PyType)
(declare-const py_range<PyType> PyType)
(declare-const Iterator_basic<PyType> PyType)
(declare-fun Iterator<PyType> (PyType) PyType)
(declare-fun Iterator_arg<PyType> (PyType Int) PyType)
(declare-const Thread_0<PyType> PyType)
(declare-const LevelType<PyType> PyType)
(declare-const type<PyType> PyType)
(declare-const Place<PyType> PyType)
(declare-const __prim__Seq_type<PyType> PyType)
(declare-const Container<PyType> PyType)
; Declaring symbols related to program functions (from program analysis)
(declare-fun str___val__ ($Snap $Ref) Int)
(declare-fun str___val__%limited ($Snap $Ref) Int)
(declare-fun str___val__%stateless ($Ref) Bool)
(declare-fun str___val__%precondition ($Snap $Ref) Bool)
(declare-fun str___len__ ($Snap $Ref) Int)
(declare-fun str___len__%limited ($Snap $Ref) Int)
(declare-fun str___len__%stateless ($Ref) Bool)
(declare-fun str___len__%precondition ($Snap $Ref) Bool)
(declare-fun bool___unbox__ ($Snap $Ref) Bool)
(declare-fun bool___unbox__%limited ($Snap $Ref) Bool)
(declare-fun bool___unbox__%stateless ($Ref) Bool)
(declare-fun bool___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__bool___box__ ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%limited ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%stateless (Bool) Bool)
(declare-fun __prim__bool___box__%precondition ($Snap Bool) Bool)
(declare-fun int___unbox__ ($Snap $Ref) Int)
(declare-fun int___unbox__%limited ($Snap $Ref) Int)
(declare-fun int___unbox__%stateless ($Ref) Bool)
(declare-fun int___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__int___box__ ($Snap Int) $Ref)
(declare-fun __prim__int___box__%limited ($Snap Int) $Ref)
(declare-fun __prim__int___box__%stateless (Int) Bool)
(declare-fun __prim__int___box__%precondition ($Snap Int) Bool)
(declare-fun Level ($Snap $Ref) $Perm)
(declare-fun Level%limited ($Snap $Ref) $Perm)
(declare-fun Level%stateless ($Ref) Bool)
(declare-fun Level%precondition ($Snap $Ref) Bool)
(declare-fun str___create__ ($Snap Int Int) $Ref)
(declare-fun str___create__%limited ($Snap Int Int) $Ref)
(declare-fun str___create__%stateless (Int Int) Bool)
(declare-fun str___create__%precondition ($Snap Int Int) Bool)
(declare-fun str___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%stateless ($Ref $Ref) Bool)
(declare-fun str___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun __file__ ($Snap) $Ref)
(declare-fun __file__%limited ($Snap) $Ref)
(declare-const __file__%stateless Bool)
(declare-fun __file__%precondition ($Snap) Bool)
(declare-fun int___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%stateless ($Ref $Ref) Bool)
(declare-fun int___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun __name__ ($Snap) $Ref)
(declare-fun __name__%limited ($Snap) $Ref)
(declare-const __name__%stateless Bool)
(declare-fun __name__%precondition ($Snap) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun MustTerminate%trigger ($Snap $Ref) Bool)
(declare-fun MustTerminate_0%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeBounded%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeBounded_0%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeUnbounded%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeUnbounded_0%trigger ($Snap $Ref) Bool)
(declare-fun _MaySet%trigger ($Snap $Ref Int) Bool)
(declare-fun _MaySet_0%trigger ($Snap $Ref Int) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct bool<PyType> float<PyType> bytes<PyType> slice<PyType> list_basic<PyType> set_basic<PyType> ConnectionRefusedError<PyType> PMultiset_basic<PyType> PSet_basic<PyType> Iterator_basic<PyType> PSeq_basic<PyType> object<PyType> traceback<PyType> dict_basic<PyType> type<PyType> py_range<PyType> int<PyType> Container<PyType> Exception<PyType> __prim__Seq_type<PyType> tuple_basic<PyType> str<PyType> Thread_0<PyType> Place<PyType> LevelType<PyType> NoneType<PyType>))
; ////////// Axioms
(assert (forall ((s Seq<PyType>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<PyType>)) 0))
(assert (forall ((s Seq<PyType>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (not (= s1 (as Seq_empty  Seq<PyType>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (x PyType)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<PyType>) (x PyType) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<PyType>) (b Seq<PyType>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x PyType) (y PyType)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Measure$>)) 0))
(assert (forall ((s Seq<Measure$>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (not (= s1 (as Seq_empty  Seq<Measure$>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Measure$>) (b Seq<Measure$>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Measure$) (y Measure$)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<$Ref>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<$Ref>)) 0))
(assert (forall ((s Seq<$Ref>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (not (= s1 (as Seq_empty  Seq<$Ref>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<$Ref>) (b Seq<$Ref>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x $Ref) (y $Ref)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<_Name>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o _Name)) (!
  (not (Set_in o (as Set_empty  Set<_Name>)))
  :pattern ((Set_in o (as Set_empty  Set<_Name>)))
  )))
(assert (forall ((s Set<_Name>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<_Name>)))
    (=> (not (= (Set_card s) 0)) (exists ((x _Name))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r _Name)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r _Name) (o _Name)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r _Name)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (o _Name)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (Set_subset a b)
    (forall ((o _Name)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$guard<Bool> (Measure$create<Measure$> g k v)) g)
  :pattern ((Measure$guard<Bool> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A0|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$key<Ref> (Measure$create<Measure$> g k v)) k)
  :pattern ((Measure$key<Ref> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A1|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$value<Int> (Measure$create<Measure$> g k v)) v)
  :pattern ((Measure$value<Int> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A2|)))
(assert (forall ((___s Seq<$Ref>)) (!
  (= (Seq_length ___s) (seq_ref_length<Int> ___s))
  :pattern ((Seq_length ___s))
  :qid |prog.relate_length|)))
(assert (forall ((___s Seq<$Ref>) (___i Int)) (!
  (= (Seq_index ___s ___i) (seq_ref_index<Ref> ___s ___i))
  :pattern ((Seq_index ___s ___i))
  :qid |prog.relate_index|)))
(assert (forall ((i Int)) (!
  (= (_get_value<Int> (_single<_Name> i)) i)
  :pattern ((_single<_Name> i))
  :qid |prog.decompose_single|)))
(assert (forall ((n _Name)) (!
  (=> (_is_single<Bool> n) (= n (_single<_Name> (_get_value<Int> n))))
  :pattern ((_get_value<Int> n))
  :qid |prog.compose_single|)))
(assert (forall ((i Int)) (!
  (_name_type<Bool> (_single<_Name> i))
  :pattern ((_single<_Name> i))
  :qid |prog.type_of_single|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (and
    (= (_get_combined_prefix<_Name> (_combine<_Name> n1 n2)) n1)
    (= (_get_combined_name<_Name> (_combine<_Name> n1 n2)) n2))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.decompose_combined|)))
(assert (forall ((n _Name)) (!
  (=>
    (_is_combined<Bool> n)
    (=
      n
      (_combine<_Name> (_get_combined_prefix<_Name> n) (_get_combined_name<_Name> n))))
  :pattern ((_get_combined_prefix<_Name> n))
  :pattern ((_get_combined_name<_Name> n))
  :qid |prog.compose_combined|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (not (_name_type<Bool> (_combine<_Name> n1 n2)))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.type_of_composed|)))
(assert (forall ((n _Name)) (!
  (= (_name_type<Bool> n) (_is_single<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_single|)))
(assert (forall ((n _Name)) (!
  (= (not (_name_type<Bool> n)) (_is_combined<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_combined|)))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (issubtype<Bool> middle super))
    (issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> sub middle) (issubtype<Bool> middle super))
  :qid |prog.issubtype_transitivity|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ type_)
  :pattern ((issubtype<Bool> type_ type_))
  :qid |prog.issubtype_reflexivity|)))
(assert (forall ((sub PyType) (sub2 PyType)) (!
  (=> (extends_<Bool> sub sub2) (issubtype<Bool> sub sub2))
  :pattern ((extends_<Bool> sub sub2))
  :qid |prog.extends_implies_subtype|)))
(assert (forall ((r $Ref)) (!
  (=
    (issubtype<Bool> (typeof<PyType> r) (as NoneType<PyType>  PyType))
    (= r $Ref.null))
  :pattern ((typeof<PyType> r))
  :qid |prog.null_nonetype|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ (as object<PyType>  PyType))
  :pattern ((issubtype<Bool> type_ (as object<PyType>  PyType)))
  :qid |prog.issubtype_object|)))
(assert (forall ((sub PyType) (sub2 PyType) (super PyType)) (!
  (=>
    (and
      (extends_<Bool> sub super)
      (and (extends_<Bool> sub2 super) (not (= sub sub2))))
    (and (isnotsubtype<Bool> sub sub2) (isnotsubtype<Bool> sub2 sub)))
  :pattern ((extends_<Bool> sub super) (extends_<Bool> sub2 super))
  :qid |prog.issubtype_exclusion|)))
(assert (forall ((sub PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub super) (not (= sub super)))
    (not (issubtype<Bool> super sub)))
  :pattern ((issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> super sub))
  :qid |prog.issubtype_exclusion_2|)))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
    (not (issubtype<Bool> sub super)))
  :pattern ((issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
  :qid |prog.issubtype_exclusion_propagation|)))
(assert (forall ((seq Seq<PyType>) (i Int) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (issubtype<Bool> (tuple_arg<PyType> Z i) (Seq_index seq i)))
  :pattern ((tuple<PyType> seq) (tuple_arg<PyType> Z i))
  :qid |prog.tuple_arg_def|)))
(assert (forall ((seq Seq<PyType>) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (= (Seq_length (tuple_args<Seq<PyType>> Z)) (Seq_length seq)))
  :pattern ((issubtype<Bool> Z (tuple<PyType> seq)))
  :qid |prog.tuple_args_def|)))
(assert (forall ((seq1 Seq<PyType>) (seq2 Seq<PyType>)) (!
  (=>
    (and
      (not (Seq_equal seq1 seq2))
      (and
        (= (Seq_length seq1) (Seq_length seq2))
        (forall ((i Int)) (!
          (=>
            (and (>= i 0) (< i (Seq_length seq1)))
            (issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          :pattern ((issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          ))))
    (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq1) (Seq_length seq2))
  :pattern ((Seq_length seq1) (tuple<PyType> seq2))
  :pattern ((Seq_length seq1) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq2) (Seq_length seq1))
  :pattern ((Seq_length seq2) (tuple<PyType> seq1))
  :pattern ((Seq_length seq2) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :qid |prog.tuple_self_subtype|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> X (union_type_1<PyType> arg_1)) (issubtype<Bool> X arg_1))
  :pattern ((issubtype<Bool> X (union_type_1<PyType> arg_1)))
  :qid |prog.union_subtype_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2))
    (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2)))
  :pattern ((issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2)))
  :qid |prog.union_subtype_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3))
    (or
      (issubtype<Bool> X arg_1)
      (or (issubtype<Bool> X arg_2) (issubtype<Bool> X arg_3))))
  :pattern ((issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3)))
  :qid |prog.union_subtype_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4))
    (or
      (issubtype<Bool> X arg_1)
      (or
        (issubtype<Bool> X arg_2)
        (or (issubtype<Bool> X arg_3) (issubtype<Bool> X arg_4)))))
  :pattern ((issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4)))
  :qid |prog.union_subtype_4|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> (union_type_1<PyType> arg_1) X) (issubtype<Bool> arg_1 X))
  :pattern ((issubtype<Bool> (union_type_1<PyType> arg_1) X))
  :qid |prog.subtype_union_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X)
    (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X)))
  :pattern ((issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X))
  :qid |prog.subtype_union_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and (issubtype<Bool> arg_2 X) (issubtype<Bool> arg_3 X))))
  :pattern ((issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X))
  :qid |prog.subtype_union_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and
        (issubtype<Bool> arg_2 X)
        (and (issubtype<Bool> arg_3 X) (issubtype<Bool> arg_4 X)))))
  :pattern ((issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X))
  :qid |prog.subtype_union_4|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (list<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (list<PyType> var0)) (as list_basic<PyType>  PyType)))
  :pattern ((list<PyType> var0))
  :qid |prog.subtype_list|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (list<PyType> arg0)) (= (list_arg<PyType> Z 0) arg0))
  :pattern ((list<PyType> arg0) (list_arg<PyType> Z 0))
  :qid |prog.list_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (set<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (set<PyType> var0)) (as set_basic<PyType>  PyType)))
  :pattern ((set<PyType> var0))
  :qid |prog.subtype_set|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (set<PyType> arg0)) (= (set_arg<PyType> Z 0) arg0))
  :pattern ((set<PyType> arg0) (set_arg<PyType> Z 0))
  :qid |prog.set_args0|)))
(assert (forall ((var0 PyType) (var1 PyType)) (!
  (and
    (extends_<Bool> (dict<PyType> var0 var1) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (dict<PyType> var0 var1))
      (as dict_basic<PyType>  PyType)))
  :pattern ((dict<PyType> var0 var1))
  :qid |prog.subtype_dict|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 0) arg0))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 0))
  :qid |prog.dict_args0|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 1) arg1))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 1))
  :qid |prog.dict_args1|)))
(assert (and
  (extends_<Bool> (as int<PyType>  PyType) (as float<PyType>  PyType))
  (= (get_basic<PyType> (as int<PyType>  PyType)) (as int<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as float<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as float<PyType>  PyType)) (as float<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bool<PyType>  PyType) (as int<PyType>  PyType))
  (= (get_basic<PyType> (as bool<PyType>  PyType)) (as bool<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as NoneType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as NoneType<PyType>  PyType))
    (as NoneType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Exception<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Exception<PyType>  PyType))
    (as Exception<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as ConnectionRefusedError<PyType>  PyType) (as Exception<PyType>  PyType))
  (=
    (get_basic<PyType> (as ConnectionRefusedError<PyType>  PyType))
    (as ConnectionRefusedError<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as traceback<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as traceback<PyType>  PyType))
    (as traceback<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as str<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as str<PyType>  PyType)) (as str<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bytes<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as bytes<PyType>  PyType)) (as bytes<PyType>  PyType))))
(assert (forall ((args Seq<PyType>)) (!
  (and
    (=>
      (forall ((e PyType)) (!
        (=> (Seq_contains args e) (= e (as object<PyType>  PyType)))
        :pattern ((Seq_contains args e))
        :pattern ((Seq_contains_trigger args e))
        ))
      (extends_<Bool> (tuple<PyType> args) (as object<PyType>  PyType)))
    (= (get_basic<PyType> (tuple<PyType> args)) (as tuple_basic<PyType>  PyType)))
  :pattern ((tuple<PyType> args))
  :qid |prog.subtype_tuple|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSeq<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSeq<PyType> var0)) (as PSeq_basic<PyType>  PyType)))
  :pattern ((PSeq<PyType> var0))
  :qid |prog.subtype_PSeq|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSeq<PyType> arg0)) (= (PSeq_arg<PyType> Z 0) arg0))
  :pattern ((PSeq<PyType> arg0) (PSeq_arg<PyType> Z 0))
  :qid |prog.PSeq_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSet<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSet<PyType> var0)) (as PSet_basic<PyType>  PyType)))
  :pattern ((PSet<PyType> var0))
  :qid |prog.subtype_PSet|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSet<PyType> arg0)) (= (PSet_arg<PyType> Z 0) arg0))
  :pattern ((PSet<PyType> arg0) (PSet_arg<PyType> Z 0))
  :qid |prog.PSet_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PMultiset<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (PMultiset<PyType> var0))
      (as PMultiset_basic<PyType>  PyType)))
  :pattern ((PMultiset<PyType> var0))
  :qid |prog.subtype_PMultiset|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (PMultiset<PyType> arg0))
    (= (PMultiset_arg<PyType> Z 0) arg0))
  :pattern ((PMultiset<PyType> arg0) (PMultiset_arg<PyType> Z 0))
  :qid |prog.PMultiset_args0|)))
(assert (and
  (extends_<Bool> (as slice<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as slice<PyType>  PyType)) (as slice<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as py_range<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as py_range<PyType>  PyType))
    (as py_range<PyType>  PyType))))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (Iterator<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (Iterator<PyType> var0))
      (as Iterator_basic<PyType>  PyType)))
  :pattern ((Iterator<PyType> var0))
  :qid |prog.subtype_Iterator|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (Iterator<PyType> arg0))
    (= (Iterator_arg<PyType> Z 0) arg0))
  :pattern ((Iterator<PyType> arg0) (Iterator_arg<PyType> Z 0))
  :qid |prog.Iterator_args0|)))
(assert (and
  (extends_<Bool> (as Thread_0<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Thread_0<PyType>  PyType))
    (as Thread_0<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as LevelType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as LevelType<PyType>  PyType))
    (as LevelType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as type<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as type<PyType>  PyType)) (as type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Place<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as Place<PyType>  PyType)) (as Place<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as __prim__Seq_type<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as __prim__Seq_type<PyType>  PyType))
    (as __prim__Seq_type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Container<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Container<PyType>  PyType))
    (as Container<PyType>  PyType))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (= (str___val__%limited s@$ self@0@00) (str___val__ s@$ self@0@00))
  :pattern ((str___val__ s@$ self@0@00))
  :qid |quant-u-3074|)))
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (str___val__%stateless self@0@00)
  :pattern ((str___val__%limited s@$ self@0@00))
  :qid |quant-u-3075|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (= (str___len__%limited s@$ self@2@00) (str___len__ s@$ self@2@00))
  :pattern ((str___len__ s@$ self@2@00))
  :qid |quant-u-3076|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (str___len__%stateless self@2@00)
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-3077|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (str___len__%limited s@$ self@2@00))) (=>
    (str___len__%precondition s@$ self@2@00)
    (>= result@3@00 0)))
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-3098|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (str___len__%limited s@$ self@2@00))) true)
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-3099|)))
(assert (forall ((s@$ $Snap) (box@4@00 $Ref)) (!
  (= (bool___unbox__%limited s@$ box@4@00) (bool___unbox__ s@$ box@4@00))
  :pattern ((bool___unbox__ s@$ box@4@00))
  :qid |quant-u-3078|)))
(assert (forall ((s@$ $Snap) (box@4@00 $Ref)) (!
  (bool___unbox__%stateless box@4@00)
  :pattern ((bool___unbox__%limited s@$ box@4@00))
  :qid |quant-u-3079|)))
(assert (forall ((s@$ $Snap) (box@4@00 $Ref)) (!
  (let ((result@5@00 (bool___unbox__%limited s@$ box@4@00))) (=>
    (bool___unbox__%precondition s@$ box@4@00)
    (= (__prim__bool___box__%limited $Snap.unit result@5@00) box@4@00)))
  :pattern ((bool___unbox__%limited s@$ box@4@00))
  :qid |quant-u-3100|)))
(assert (forall ((s@$ $Snap) (box@4@00 $Ref)) (!
  (let ((result@5@00 (bool___unbox__%limited s@$ box@4@00))) (=>
    (bool___unbox__%precondition s@$ box@4@00)
    (__prim__bool___box__%precondition $Snap.unit result@5@00)))
  :pattern ((bool___unbox__%limited s@$ box@4@00))
  :qid |quant-u-3101|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (=
    (__prim__bool___box__%limited s@$ prim@6@00)
    (__prim__bool___box__ s@$ prim@6@00))
  :pattern ((__prim__bool___box__ s@$ prim@6@00))
  :qid |quant-u-3080|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (__prim__bool___box__%stateless prim@6@00)
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-3081|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (let ((result@7@00 (__prim__bool___box__%limited s@$ prim@6@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@6@00)
    (and
      (= (typeof<PyType> result@7@00) (as bool<PyType>  PyType))
      (= (bool___unbox__%limited $Snap.unit result@7@00) prim@6@00)
      (= (int___unbox__%limited $Snap.unit result@7@00) (ite prim@6@00 1 0)))))
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-3102|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (let ((result@7@00 (__prim__bool___box__%limited s@$ prim@6@00))) true)
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-3103|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (let ((result@7@00 (__prim__bool___box__%limited s@$ prim@6@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@6@00)
    (bool___unbox__%precondition $Snap.unit result@7@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-3104|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (let ((result@7@00 (__prim__bool___box__%limited s@$ prim@6@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@6@00)
    (int___unbox__%precondition $Snap.unit result@7@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-3105|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (= (int___unbox__%limited s@$ box@8@00) (int___unbox__ s@$ box@8@00))
  :pattern ((int___unbox__ s@$ box@8@00))
  :qid |quant-u-3082|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (int___unbox__%stateless box@8@00)
  :pattern ((int___unbox__%limited s@$ box@8@00))
  :qid |quant-u-3083|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (let ((result@9@00 (int___unbox__%limited s@$ box@8@00))) (=>
    (int___unbox__%precondition s@$ box@8@00)
    (and
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> box@8@00) (as bool<PyType>  PyType)))
        (= (__prim__int___box__%limited $Snap.unit result@9@00) box@8@00))
      (=>
        (issubtype<Bool> (typeof<PyType> box@8@00) (as bool<PyType>  PyType))
        (=
          (__prim__bool___box__%limited $Snap.unit (not (= result@9@00 0)))
          box@8@00)))))
  :pattern ((int___unbox__%limited s@$ box@8@00))
  :qid |quant-u-3106|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (let ((result@9@00 (int___unbox__%limited s@$ box@8@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@8@00)
      (not (issubtype<Bool> (typeof<PyType> box@8@00) (as bool<PyType>  PyType))))
    (__prim__int___box__%precondition $Snap.unit result@9@00)))
  :pattern ((int___unbox__%limited s@$ box@8@00))
  :qid |quant-u-3107|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (let ((result@9@00 (int___unbox__%limited s@$ box@8@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@8@00)
      (issubtype<Bool> (typeof<PyType> box@8@00) (as bool<PyType>  PyType)))
    (__prim__bool___box__%precondition $Snap.unit (not (= result@9@00 0)))))
  :pattern ((int___unbox__%limited s@$ box@8@00))
  :qid |quant-u-3108|)))
(assert (forall ((s@$ $Snap) (prim@10@00 Int)) (!
  (=
    (__prim__int___box__%limited s@$ prim@10@00)
    (__prim__int___box__ s@$ prim@10@00))
  :pattern ((__prim__int___box__ s@$ prim@10@00))
  :qid |quant-u-3084|)))
(assert (forall ((s@$ $Snap) (prim@10@00 Int)) (!
  (__prim__int___box__%stateless prim@10@00)
  :pattern ((__prim__int___box__%limited s@$ prim@10@00))
  :qid |quant-u-3085|)))
(assert (forall ((s@$ $Snap) (prim@10@00 Int)) (!
  (let ((result@11@00 (__prim__int___box__%limited s@$ prim@10@00))) (=>
    (__prim__int___box__%precondition s@$ prim@10@00)
    (and
      (= (typeof<PyType> result@11@00) (as int<PyType>  PyType))
      (= (int___unbox__%limited $Snap.unit result@11@00) prim@10@00))))
  :pattern ((__prim__int___box__%limited s@$ prim@10@00))
  :qid |quant-u-3109|)))
(assert (forall ((s@$ $Snap) (prim@10@00 Int)) (!
  (let ((result@11@00 (__prim__int___box__%limited s@$ prim@10@00))) true)
  :pattern ((__prim__int___box__%limited s@$ prim@10@00))
  :qid |quant-u-3110|)))
(assert (forall ((s@$ $Snap) (prim@10@00 Int)) (!
  (let ((result@11@00 (__prim__int___box__%limited s@$ prim@10@00))) (=>
    (__prim__int___box__%precondition s@$ prim@10@00)
    (int___unbox__%precondition $Snap.unit result@11@00)))
  :pattern ((__prim__int___box__%limited s@$ prim@10@00))
  :qid |quant-u-3111|)))
(assert (forall ((s@$ $Snap) (r@12@00 $Ref)) (!
  (= (Level%limited s@$ r@12@00) (Level s@$ r@12@00))
  :pattern ((Level s@$ r@12@00))
  :qid |quant-u-3086|)))
(assert (forall ((s@$ $Snap) (r@12@00 $Ref)) (!
  (Level%stateless r@12@00)
  :pattern ((Level%limited s@$ r@12@00))
  :qid |quant-u-3087|)))
(assert (forall ((s@$ $Snap) (len@14@00 Int) (value@15@00 Int)) (!
  (=
    (str___create__%limited s@$ len@14@00 value@15@00)
    (str___create__ s@$ len@14@00 value@15@00))
  :pattern ((str___create__ s@$ len@14@00 value@15@00))
  :qid |quant-u-3088|)))
(assert (forall ((s@$ $Snap) (len@14@00 Int) (value@15@00 Int)) (!
  (str___create__%stateless len@14@00 value@15@00)
  :pattern ((str___create__%limited s@$ len@14@00 value@15@00))
  :qid |quant-u-3089|)))
(assert (forall ((s@$ $Snap) (len@14@00 Int) (value@15@00 Int)) (!
  (let ((result@16@00 (str___create__%limited s@$ len@14@00 value@15@00))) (=>
    (str___create__%precondition s@$ len@14@00 value@15@00)
    (and
      (= (str___len__ $Snap.unit result@16@00) len@14@00)
      (= (str___val__ $Snap.unit result@16@00) value@15@00)
      (= (typeof<PyType> result@16@00) (as str<PyType>  PyType)))))
  :pattern ((str___create__%limited s@$ len@14@00 value@15@00))
  :qid |quant-u-3112|)))
(assert (forall ((s@$ $Snap) (len@14@00 Int) (value@15@00 Int)) (!
  (let ((result@16@00 (str___create__%limited s@$ len@14@00 value@15@00))) (=>
    (str___create__%precondition s@$ len@14@00 value@15@00)
    (str___len__%precondition $Snap.unit result@16@00)))
  :pattern ((str___create__%limited s@$ len@14@00 value@15@00))
  :qid |quant-u-3113|)))
(assert (forall ((s@$ $Snap) (len@14@00 Int) (value@15@00 Int)) (!
  (let ((result@16@00 (str___create__%limited s@$ len@14@00 value@15@00))) (=>
    (str___create__%precondition s@$ len@14@00 value@15@00)
    (str___val__%precondition $Snap.unit result@16@00)))
  :pattern ((str___create__%limited s@$ len@14@00 value@15@00))
  :qid |quant-u-3114|)))
(assert (forall ((s@$ $Snap) (len@14@00 Int) (value@15@00 Int)) (!
  (let ((result@16@00 (str___create__%limited s@$ len@14@00 value@15@00))) true)
  :pattern ((str___create__%limited s@$ len@14@00 value@15@00))
  :qid |quant-u-3115|)))
(assert (forall ((s@$ $Snap) (self@17@00 $Ref) (other@18@00 $Ref)) (!
  (=
    (str___eq__%limited s@$ self@17@00 other@18@00)
    (str___eq__ s@$ self@17@00 other@18@00))
  :pattern ((str___eq__ s@$ self@17@00 other@18@00))
  :qid |quant-u-3090|)))
(assert (forall ((s@$ $Snap) (self@17@00 $Ref) (other@18@00 $Ref)) (!
  (str___eq__%stateless self@17@00 other@18@00)
  :pattern ((str___eq__%limited s@$ self@17@00 other@18@00))
  :qid |quant-u-3091|)))
(assert (forall ((s@$ $Snap) (self@17@00 $Ref) (other@18@00 $Ref)) (!
  (let ((result@19@00 (str___eq__%limited s@$ self@17@00 other@18@00))) (=>
    (str___eq__%precondition s@$ self@17@00 other@18@00)
    (and
      (=
        (=
          (str___val__ $Snap.unit self@17@00)
          (str___val__ $Snap.unit other@18@00))
        result@19@00)
      (=>
        result@19@00
        (=
          (str___len__ $Snap.unit self@17@00)
          (str___len__ $Snap.unit other@18@00))))))
  :pattern ((str___eq__%limited s@$ self@17@00 other@18@00))
  :qid |quant-u-3116|)))
(assert (forall ((s@$ $Snap) (self@17@00 $Ref) (other@18@00 $Ref)) (!
  (let ((result@19@00 (str___eq__%limited s@$ self@17@00 other@18@00))) (=>
    (str___eq__%precondition s@$ self@17@00 other@18@00)
    (and
      (str___val__%precondition $Snap.unit self@17@00)
      (str___val__%precondition $Snap.unit other@18@00))))
  :pattern ((str___eq__%limited s@$ self@17@00 other@18@00))
  :qid |quant-u-3117|)))
(assert (forall ((s@$ $Snap) (self@17@00 $Ref) (other@18@00 $Ref)) (!
  (let ((result@19@00 (str___eq__%limited s@$ self@17@00 other@18@00))) (=>
    (and (str___eq__%precondition s@$ self@17@00 other@18@00) result@19@00)
    (and
      (str___len__%precondition $Snap.unit self@17@00)
      (str___len__%precondition $Snap.unit other@18@00))))
  :pattern ((str___eq__%limited s@$ self@17@00 other@18@00))
  :qid |quant-u-3118|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__file__%limited s@$) (__file__ s@$))
  :pattern ((__file__ s@$))
  :qid |quant-u-3092|)))
(assert (forall ((s@$ $Snap)) (!
  (as __file__%stateless  Bool)
  :pattern ((__file__%limited s@$))
  :qid |quant-u-3093|)))
(assert (forall ((s@$ $Snap) (self@21@00 $Ref) (other@22@00 $Ref)) (!
  (=
    (int___eq__%limited s@$ self@21@00 other@22@00)
    (int___eq__ s@$ self@21@00 other@22@00))
  :pattern ((int___eq__ s@$ self@21@00 other@22@00))
  :qid |quant-u-3094|)))
(assert (forall ((s@$ $Snap) (self@21@00 $Ref) (other@22@00 $Ref)) (!
  (int___eq__%stateless self@21@00 other@22@00)
  :pattern ((int___eq__%limited s@$ self@21@00 other@22@00))
  :qid |quant-u-3095|)))
(assert (forall ((s@$ $Snap) (self@21@00 $Ref) (other@22@00 $Ref)) (!
  (=>
    (int___eq__%precondition s@$ self@21@00 other@22@00)
    (=
      (int___eq__ s@$ self@21@00 other@22@00)
      (=
        (int___unbox__ $Snap.unit self@21@00)
        (int___unbox__ $Snap.unit other@22@00))))
  :pattern ((int___eq__ s@$ self@21@00 other@22@00))
  :qid |quant-u-3119|)))
(assert (forall ((s@$ $Snap) (self@21@00 $Ref) (other@22@00 $Ref)) (!
  (=>
    (int___eq__%precondition s@$ self@21@00 other@22@00)
    (and
      (int___unbox__%precondition $Snap.unit self@21@00)
      (int___unbox__%precondition $Snap.unit other@22@00)))
  :pattern ((int___eq__ s@$ self@21@00 other@22@00))
  :qid |quant-u-3120|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__name__%limited s@$) (__name__ s@$))
  :pattern ((__name__ s@$))
  :qid |quant-u-3096|)))
(assert (forall ((s@$ $Snap)) (!
  (as __name__%stateless  Bool)
  :pattern ((__name__%limited s@$))
  :qid |quant-u-3097|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- break_out_exception ----------
(declare-const p1@0@01 Bool)
(declare-const p2@1@01 Bool)
(declare-const _cthread_157@2@01 $Ref)
(declare-const _cthread_157_0@3@01 $Ref)
(declare-const _caller_measures_157@4@01 Seq<Measure$>)
(declare-const _caller_measures_157_0@5@01 Seq<Measure$>)
(declare-const _residue_157@6@01 $Perm)
(declare-const _residue_157_0@7@01 $Perm)
(declare-const c@8@01 $Ref)
(declare-const c_9@9@01 $Ref)
(declare-const b@10@01 $Ref)
(declare-const b_9@11@01 $Ref)
(declare-const _current_wait_level_157@12@01 $Perm)
(declare-const _current_wait_level_157_0@13@01 $Perm)
(declare-const _err@14@01 $Ref)
(declare-const _err_0@15@01 $Ref)
(declare-const p1@16@01 Bool)
(declare-const p2@17@01 Bool)
(declare-const _cthread_157@18@01 $Ref)
(declare-const _cthread_157_0@19@01 $Ref)
(declare-const _caller_measures_157@20@01 Seq<Measure$>)
(declare-const _caller_measures_157_0@21@01 Seq<Measure$>)
(declare-const _residue_157@22@01 $Perm)
(declare-const _residue_157_0@23@01 $Perm)
(declare-const c@24@01 $Ref)
(declare-const c_9@25@01 $Ref)
(declare-const b@26@01 $Ref)
(declare-const b_9@27@01 $Ref)
(declare-const _current_wait_level_157@28@01 $Perm)
(declare-const _current_wait_level_157_0@29@01 $Perm)
(declare-const _err@30@01 $Ref)
(declare-const _err_0@31@01 $Ref)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@32@01 $Snap)
(assert (= $t@32@01 ($Snap.combine ($Snap.first $t@32@01) ($Snap.second $t@32@01))))
(assert (= ($Snap.first $t@32@01) $Snap.unit))
; [eval] p1 ==> _cthread_157 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1@16@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 0 | p1@16@01 | live]
; [else-branch: 0 | !(p1@16@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 0 | p1@16@01]
(assert p1@16@01)
; [eval] _cthread_157 != null
(pop) ; 3
(push) ; 3
; [else-branch: 0 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1@16@01) p1@16@01))
(assert (=> p1@16@01 (not (= _cthread_157@18@01 $Ref.null))))
(assert (=
  ($Snap.second $t@32@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@32@01))
    ($Snap.second ($Snap.second $t@32@01)))))
(assert (= ($Snap.first ($Snap.second $t@32@01)) $Snap.unit))
; [eval] p2 ==> _cthread_157_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2@17@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1 | p2@17@01 | live]
; [else-branch: 1 | !(p2@17@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1 | p2@17@01]
(assert p2@17@01)
; [eval] _cthread_157_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 1 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2@17@01) p2@17@01))
(assert (=> p2@17@01 (not (= _cthread_157_0@19@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@32@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@32@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@32@01))) $Snap.unit))
; [eval] p1 ==> issubtype(typeof(_cthread_157), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1@16@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2 | p1@16@01 | live]
; [else-branch: 2 | !(p1@16@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2 | p1@16@01]
(assert p1@16@01)
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 2 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@16@01
  (issubtype<Bool> (typeof<PyType> _cthread_157@18@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@32@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@32@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@32@01))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(_cthread_157_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2@17@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3 | p2@17@01 | live]
; [else-branch: 3 | !(p2@17@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3 | p2@17@01]
(assert p2@17@01)
; [eval] issubtype(typeof(_cthread_157_0), Thread_0())
; [eval] typeof(_cthread_157_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 3 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@17@01
  (issubtype<Bool> (typeof<PyType> _cthread_157_0@19@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))
  $Snap.unit))
; [eval] p1 ==> issubtype(typeof(c), Container())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1@16@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4 | p1@16@01 | live]
; [else-branch: 4 | !(p1@16@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4 | p1@16@01]
(assert p1@16@01)
; [eval] issubtype(typeof(c), Container())
; [eval] typeof(c)
; [eval] Container()
(pop) ; 3
(push) ; 3
; [else-branch: 4 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@16@01
  (issubtype<Bool> (typeof<PyType> c@24@01) (as Container<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(c_9), Container())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2@17@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5 | p2@17@01 | live]
; [else-branch: 5 | !(p2@17@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 5 | p2@17@01]
(assert p2@17@01)
; [eval] issubtype(typeof(c_9), Container())
; [eval] typeof(c_9)
; [eval] Container()
(pop) ; 3
(push) ; 3
; [else-branch: 5 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@17@01
  (issubtype<Bool> (typeof<PyType> c_9@25@01) (as Container<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))
  $Snap.unit))
; [eval] p1 ==> issubtype(typeof(b), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1@16@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6 | p1@16@01 | live]
; [else-branch: 6 | !(p1@16@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 6 | p1@16@01]
(assert p1@16@01)
; [eval] issubtype(typeof(b), bool())
; [eval] typeof(b)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 6 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@16@01
  (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(b_9), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2@17@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7 | p2@17@01 | live]
; [else-branch: 7 | !(p2@17@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 7 | p2@17@01]
(assert p2@17@01)
; [eval] issubtype(typeof(b_9), bool())
; [eval] typeof(b_9)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 7 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@17@01
  (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))
(push) ; 2
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not p1@16@01))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [then-branch: 8 | p1@16@01 | live]
; [else-branch: 8 | !(p1@16@01) | live]
(set-option :timeout 0)
(push) ; 2
; [then-branch: 8 | p1@16@01]
(assert p1@16@01)
(assert (not (= c@24@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2@17@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 9 | p2@17@01 | live]
; [else-branch: 9 | !(p2@17@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 9 | p2@17@01]
(assert p2@17@01)
(assert (not (= c_9@25@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))
  $Snap.unit))
; [eval] p1 ==> issubtype(typeof(c.Container_value), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 10 | p1@16@01 | live]
; [else-branch: 10 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 10 | p1@16@01]
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p1@16@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(c_9.Container_valuep), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 11 | p2@17@01 | live]
; [else-branch: 11 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 11 | p2@17@01]
; [eval] issubtype(typeof(c_9.Container_valuep), int())
; [eval] typeof(c_9.Container_valuep)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p2@17@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 12 | p1@16@01 | live]
; [else-branch: 12 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 12 | p1@16@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 13 | p2@17@01 | live]
; [else-branch: 13 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 13 | p2@17@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@33@01 $Snap)
(assert (= $t@33@01 ($Snap.combine ($Snap.first $t@33@01) ($Snap.second $t@33@01))))
(assert (= ($Snap.first $t@33@01) $Snap.unit))
; [eval] p1 ==> (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_157) && ((forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 14 | p1@16@01 | live]
; [else-branch: 14 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 14 | p1@16@01]
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_157) && ((forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_157)
(push) ; 7
; [then-branch: 15 | False | live]
; [else-branch: 15 | True | live]
(push) ; 8
; [then-branch: 15 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 15 | True]
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_157)
(push) ; 9
; [then-branch: 16 | False | live]
; [else-branch: 16 | True | live]
(push) ; 10
; [then-branch: 16 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 16 | True]
; [eval] _residue_157 <= _current_wait_level_157
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p1@16@01 (<= _residue_157@22@01 _current_wait_level_157@28@01)))
(assert (=
  ($Snap.second $t@33@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@33@01))
    ($Snap.second ($Snap.second $t@33@01)))))
(assert (= ($Snap.first ($Snap.second $t@33@01)) $Snap.unit))
; [eval] p2 ==> (forperm _r_1: Ref [_r_1.MustReleaseBoundedp] :: Level(_r_1) <= _current_wait_level_157_0) && ((forperm _r_1: Ref [_r_1.MustReleaseUnboundedp] :: Level(_r_1) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 17 | p2@17@01 | live]
; [else-branch: 17 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 17 | p2@17@01]
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBoundedp] :: Level(_r_1) <= _current_wait_level_157_0) && ((forperm _r_1: Ref [_r_1.MustReleaseUnboundedp] :: Level(_r_1) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBoundedp] :: Level(_r_1) <= _current_wait_level_157_0)
(push) ; 7
; [then-branch: 18 | False | live]
; [else-branch: 18 | True | live]
(push) ; 8
; [then-branch: 18 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 18 | True]
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseUnboundedp] :: Level(_r_1) <= _current_wait_level_157_0)
(push) ; 9
; [then-branch: 19 | False | live]
; [else-branch: 19 | True | live]
(push) ; 10
; [then-branch: 19 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 19 | True]
; [eval] _residue_157_0 <= _current_wait_level_157_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p2@17@01 (<= _residue_157_0@23@01 _current_wait_level_157_0@29@01)))
(assert (=
  ($Snap.second ($Snap.second $t@33@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@33@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 20 | p1@16@01 | live]
; [else-branch: 20 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 20 | p1@16@01]
; [eval] _err == null
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@30@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@30@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 21 | _err@30@01 == Null | live]
; [else-branch: 21 | _err@30@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 21 | _err@30@01 == Null]
(assert (= _err@30@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second $t@33@01)))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@33@01))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@33@01)))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@33@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@33@01)))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@33@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@33@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@33@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@33@01)))))
  $Snap.unit))
; [eval] int___eq__(c.Container_value, __prim__int___box__(8))
; [eval] __prim__int___box__(8)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@33@01))))) (__prim__int___box__ $Snap.unit 8)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@33@01))))) (__prim__int___box__ $Snap.unit 8))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@33@01))))) (__prim__int___box__ $Snap.unit 8)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@33@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 22 | p2@17@01 | live]
; [else-branch: 22 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 22 | p2@17@01]
; [eval] _err_0 == null
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err_0@31@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err_0@31@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 23 | _err_0@31@01 == Null | live]
; [else-branch: 23 | _err_0@31@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 23 | _err_0@31@01 == Null]
(assert (= _err_0@31@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_9.Container_valuep), int())
; [eval] typeof(c_9.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  $Snap.unit))
; [eval] int___eq__(c_9.Container_valuep, __prim__int___box__(8))
; [eval] __prim__int___box__(8)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))) (__prim__int___box__ $Snap.unit 8)))
(pop) ; 9
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))) (__prim__int___box__ $Snap.unit 8)))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))) (__prim__int___box__ $Snap.unit 8)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 24 | p1@16@01 | live]
; [else-branch: 24 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 24 | p1@16@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 10
; [then-branch: 25 | _err@30@01 == Null | live]
; [else-branch: 25 | _err@30@01 != Null | live]
(push) ; 11
; [then-branch: 25 | _err@30@01 == Null]
(pop) ; 11
(push) ; 11
; [else-branch: 25 | _err@30@01 != Null]
(assert (not (= _err@30@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@30@01 $Ref.null)) (= _err@30@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@30@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 26 | _err@30@01 != Null && issubtype[Bool](typeof[PyType](_err@30@01), Exception[PyType]) | dead]
; [else-branch: 26 | !(_err@30@01 != Null && issubtype[Bool](typeof[PyType](_err@30@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 26 | !(_err@30@01 != Null && issubtype[Bool](typeof[PyType](_err@30@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err@30@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 27 | p2@17@01 | live]
; [else-branch: 27 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 27 | p2@17@01]
; [eval] _err_0 != null && issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 12
; [then-branch: 28 | _err_0@31@01 == Null | live]
; [else-branch: 28 | _err_0@31@01 != Null | live]
(push) ; 13
; [then-branch: 28 | _err_0@31@01 == Null]
(pop) ; 13
(push) ; 13
; [else-branch: 28 | _err_0@31@01 != Null]
(assert (not (= _err_0@31@01 $Ref.null)))
; [eval] issubtype(typeof(_err_0), Exception())
; [eval] typeof(_err_0)
; [eval] Exception()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_0@31@01 $Ref.null)) (= _err_0@31@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_0@31@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 29 | _err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType]) | dead]
; [else-branch: 29 | !(_err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 29 | !(_err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err_0@31@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 30 | p1@16@01 | live]
; [else-branch: 30 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 30 | p1@16@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
; [then-branch: 31 | _err@30@01 != Null | dead]
; [else-branch: 31 | _err@30@01 == Null | live]
(push) ; 16
; [else-branch: 31 | _err@30@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  $Snap.unit))
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 32 | p2@17@01 | live]
; [else-branch: 32 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 32 | p2@17@01]
; [eval] _err_0 != null ==> issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 15
; [then-branch: 33 | _err_0@31@01 != Null | dead]
; [else-branch: 33 | _err_0@31@01 == Null | live]
(push) ; 16
; [else-branch: 33 | _err_0@31@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 34 | p1@16@01 | live]
; [else-branch: 34 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 34 | p1@16@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 35 | p2@17@01 | live]
; [else-branch: 35 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 35 | p2@17@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 23 | _err_0@31@01 != Null]
(assert (not (= _err_0@31@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 36 | p1@16@01 | live]
; [else-branch: 36 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 36 | p1@16@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 10
; [then-branch: 37 | _err@30@01 == Null | live]
; [else-branch: 37 | _err@30@01 != Null | live]
(push) ; 11
; [then-branch: 37 | _err@30@01 == Null]
(pop) ; 11
(push) ; 11
; [else-branch: 37 | _err@30@01 != Null]
(assert (not (= _err@30@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@30@01 $Ref.null)) (= _err@30@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@30@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 38 | _err@30@01 != Null && issubtype[Bool](typeof[PyType](_err@30@01), Exception[PyType]) | dead]
; [else-branch: 38 | !(_err@30@01 != Null && issubtype[Bool](typeof[PyType](_err@30@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 38 | !(_err@30@01 != Null && issubtype[Bool](typeof[PyType](_err@30@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err@30@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 39 | p2@17@01 | live]
; [else-branch: 39 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 39 | p2@17@01]
; [eval] _err_0 != null && issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 12
; [then-branch: 40 | _err_0@31@01 == Null | live]
; [else-branch: 40 | _err_0@31@01 != Null | live]
(push) ; 13
; [then-branch: 40 | _err_0@31@01 == Null]
(assert (= _err_0@31@01 $Ref.null))
(pop) ; 13
(push) ; 13
; [else-branch: 40 | _err_0@31@01 != Null]
; [eval] issubtype(typeof(_err_0), Exception())
; [eval] typeof(_err_0)
; [eval] Exception()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_0@31@01 $Ref.null)) (= _err_0@31@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_0@31@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  (not (= _err_0@31@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 41 | _err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType]) | live]
; [else-branch: 41 | !(_err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 41 | _err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType])]
(assert (and
  (not (= _err_0@31@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_9.Container_valuep), int())
; [eval] typeof(c_9.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  $Snap.unit))
; [eval] int___eq__(c_9.Container_valuep, __prim__int___box__(7))
; [eval] __prim__int___box__(7)
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))) (__prim__int___box__ $Snap.unit 7)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))) (__prim__int___box__ $Snap.unit 7))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))) (__prim__int___box__ $Snap.unit 7)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 42 | p1@16@01 | live]
; [else-branch: 42 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 42 | p1@16@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
; [then-branch: 43 | _err@30@01 != Null | dead]
; [else-branch: 43 | _err@30@01 == Null | live]
(push) ; 16
; [else-branch: 43 | _err@30@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  $Snap.unit))
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 44 | p2@17@01 | live]
; [else-branch: 44 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 44 | p2@17@01]
; [eval] _err_0 != null ==> issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err_0@31@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 45 | _err_0@31@01 != Null | live]
; [else-branch: 45 | _err_0@31@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 45 | _err_0@31@01 != Null]
; [eval] issubtype(typeof(_err_0), Exception())
; [eval] typeof(_err_0)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p2@17@01 (not (= _err_0@31@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 46 | p1@16@01 | live]
; [else-branch: 46 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 46 | p1@16@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 47 | p2@17@01 | live]
; [else-branch: 47 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 47 | p2@17@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 41 | !(_err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err_0@31@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 48 | p1@16@01 | live]
; [else-branch: 48 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 48 | p1@16@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
; [then-branch: 49 | _err@30@01 != Null | dead]
; [else-branch: 49 | _err@30@01 == Null | live]
(push) ; 16
; [else-branch: 49 | _err@30@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  $Snap.unit))
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 50 | p2@17@01 | live]
; [else-branch: 50 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 50 | p2@17@01]
; [eval] _err_0 != null ==> issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err_0@31@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err_0@31@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 51 | _err_0@31@01 != Null | live]
; [else-branch: 51 | _err_0@31@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 51 | _err_0@31@01 != Null]
(assert (not (= _err_0@31@01 $Ref.null)))
; [eval] issubtype(typeof(_err_0), Exception())
; [eval] typeof(_err_0)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err_0@31@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p2@17@01 (not (= _err_0@31@01 $Ref.null))))
(assert (=>
  (and p2@17@01 (not (= _err_0@31@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 52 | p1@16@01 | dead]
; [else-branch: 52 | !(p1@16@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 52 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1@16@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 53 | p2@17@01 | dead]
; [else-branch: 53 | !(p2@17@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 53 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2@17@01))
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 21 | _err@30@01 != Null]
(assert (not (= _err@30@01 $Ref.null)))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@33@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@33@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 54 | p2@17@01 | live]
; [else-branch: 54 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 54 | p2@17@01]
; [eval] _err_0 == null
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err_0@31@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err_0@31@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 55 | _err_0@31@01 == Null | live]
; [else-branch: 55 | _err_0@31@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 55 | _err_0@31@01 == Null]
(assert (= _err_0@31@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_9.Container_valuep), int())
; [eval] typeof(c_9.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  $Snap.unit))
; [eval] int___eq__(c_9.Container_valuep, __prim__int___box__(8))
; [eval] __prim__int___box__(8)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))) (__prim__int___box__ $Snap.unit 8)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))) (__prim__int___box__ $Snap.unit 8))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))) (__prim__int___box__ $Snap.unit 8)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 56 | p1@16@01 | live]
; [else-branch: 56 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 56 | p1@16@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 10
; [then-branch: 57 | _err@30@01 == Null | live]
; [else-branch: 57 | _err@30@01 != Null | live]
(push) ; 11
; [then-branch: 57 | _err@30@01 == Null]
(assert (= _err@30@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 57 | _err@30@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@30@01 $Ref.null)) (= _err@30@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@30@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (not (= _err@30@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 58 | _err@30@01 != Null && issubtype[Bool](typeof[PyType](_err@30@01), Exception[PyType]) | live]
; [else-branch: 58 | !(_err@30@01 != Null && issubtype[Bool](typeof[PyType](_err@30@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 58 | _err@30@01 != Null && issubtype[Bool](typeof[PyType](_err@30@01), Exception[PyType])]
(assert (and
  (not (= _err@30@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] int___eq__(c.Container_value, __prim__int___box__(7))
; [eval] __prim__int___box__(7)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))) (__prim__int___box__ $Snap.unit 7)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))) (__prim__int___box__ $Snap.unit 7))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))) (__prim__int___box__ $Snap.unit 7)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 59 | p2@17@01 | live]
; [else-branch: 59 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 59 | p2@17@01]
; [eval] _err_0 != null && issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 12
; [then-branch: 60 | _err_0@31@01 == Null | live]
; [else-branch: 60 | _err_0@31@01 != Null | live]
(push) ; 13
; [then-branch: 60 | _err_0@31@01 == Null]
(pop) ; 13
(push) ; 13
; [else-branch: 60 | _err_0@31@01 != Null]
(assert (not (= _err_0@31@01 $Ref.null)))
; [eval] issubtype(typeof(_err_0), Exception())
; [eval] typeof(_err_0)
; [eval] Exception()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_0@31@01 $Ref.null)) (= _err_0@31@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_0@31@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 61 | _err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType]) | dead]
; [else-branch: 61 | !(_err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 61 | !(_err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err_0@31@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 62 | p1@16@01 | live]
; [else-branch: 62 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 62 | p1@16@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@30@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 63 | _err@30@01 != Null | live]
; [else-branch: 63 | _err@30@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 63 | _err@30@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p1@16@01 (not (= _err@30@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  $Snap.unit))
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 64 | p2@17@01 | live]
; [else-branch: 64 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 64 | p2@17@01]
; [eval] _err_0 != null ==> issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 15
; [then-branch: 65 | _err_0@31@01 != Null | dead]
; [else-branch: 65 | _err_0@31@01 == Null | live]
(push) ; 16
; [else-branch: 65 | _err_0@31@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 66 | p1@16@01 | live]
; [else-branch: 66 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 66 | p1@16@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 67 | p2@17@01 | live]
; [else-branch: 67 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 67 | p2@17@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 58 | !(_err@30@01 != Null && issubtype[Bool](typeof[PyType](_err@30@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err@30@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 68 | p2@17@01 | live]
; [else-branch: 68 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 68 | p2@17@01]
; [eval] _err_0 != null && issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 12
; [then-branch: 69 | _err_0@31@01 == Null | live]
; [else-branch: 69 | _err_0@31@01 != Null | live]
(push) ; 13
; [then-branch: 69 | _err_0@31@01 == Null]
(pop) ; 13
(push) ; 13
; [else-branch: 69 | _err_0@31@01 != Null]
(assert (not (= _err_0@31@01 $Ref.null)))
; [eval] issubtype(typeof(_err_0), Exception())
; [eval] typeof(_err_0)
; [eval] Exception()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_0@31@01 $Ref.null)) (= _err_0@31@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_0@31@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 70 | _err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType]) | dead]
; [else-branch: 70 | !(_err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 70 | !(_err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err_0@31@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 71 | p1@16@01 | live]
; [else-branch: 71 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 71 | p1@16@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@30@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err@30@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 72 | _err@30@01 != Null | live]
; [else-branch: 72 | _err@30@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 72 | _err@30@01 != Null]
(assert (not (= _err@30@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err@30@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p1@16@01 (not (= _err@30@01 $Ref.null))))
(assert (=>
  (and p1@16@01 (not (= _err@30@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  $Snap.unit))
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 73 | p2@17@01 | dead]
; [else-branch: 73 | !(p2@17@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 73 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2@17@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 74 | p1@16@01 | dead]
; [else-branch: 74 | !(p1@16@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 74 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1@16@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 13
; [then-branch: 75 | p2@17@01 | dead]
; [else-branch: 75 | !(p2@17@01) | live]
(push) ; 14
; [else-branch: 75 | !(p2@17@01)]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 55 | _err_0@31@01 != Null]
(assert (not (= _err_0@31@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 76 | p1@16@01 | live]
; [else-branch: 76 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 76 | p1@16@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 10
; [then-branch: 77 | _err@30@01 == Null | live]
; [else-branch: 77 | _err@30@01 != Null | live]
(push) ; 11
; [then-branch: 77 | _err@30@01 == Null]
(assert (= _err@30@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 77 | _err@30@01 != Null]
(assert (not (= _err@30@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@30@01 $Ref.null)) (= _err@30@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@30@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (not (= _err@30@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 78 | _err@30@01 != Null && issubtype[Bool](typeof[PyType](_err@30@01), Exception[PyType]) | live]
; [else-branch: 78 | !(_err@30@01 != Null && issubtype[Bool](typeof[PyType](_err@30@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 78 | _err@30@01 != Null && issubtype[Bool](typeof[PyType](_err@30@01), Exception[PyType])]
(assert (and
  (not (= _err@30@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] int___eq__(c.Container_value, __prim__int___box__(7))
; [eval] __prim__int___box__(7)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))) (__prim__int___box__ $Snap.unit 7)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))) (__prim__int___box__ $Snap.unit 7))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))) (__prim__int___box__ $Snap.unit 7)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 79 | p2@17@01 | live]
; [else-branch: 79 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 79 | p2@17@01]
; [eval] _err_0 != null && issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 12
; [then-branch: 80 | _err_0@31@01 == Null | live]
; [else-branch: 80 | _err_0@31@01 != Null | live]
(push) ; 13
; [then-branch: 80 | _err_0@31@01 == Null]
(assert (= _err_0@31@01 $Ref.null))
(pop) ; 13
(push) ; 13
; [else-branch: 80 | _err_0@31@01 != Null]
; [eval] issubtype(typeof(_err_0), Exception())
; [eval] typeof(_err_0)
; [eval] Exception()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_0@31@01 $Ref.null)) (= _err_0@31@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_0@31@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  (not (= _err_0@31@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 81 | _err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType]) | live]
; [else-branch: 81 | !(_err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 81 | _err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType])]
(assert (and
  (not (= _err_0@31@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_9.Container_valuep), int())
; [eval] typeof(c_9.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  $Snap.unit))
; [eval] int___eq__(c_9.Container_valuep, __prim__int___box__(7))
; [eval] __prim__int___box__(7)
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))) (__prim__int___box__ $Snap.unit 7)))
(pop) ; 13
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))) (__prim__int___box__ $Snap.unit 7)))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))) (__prim__int___box__ $Snap.unit 7)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 82 | p1@16@01 | live]
; [else-branch: 82 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 82 | p1@16@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@30@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 83 | _err@30@01 != Null | live]
; [else-branch: 83 | _err@30@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 83 | _err@30@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p1@16@01 (not (= _err@30@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  $Snap.unit))
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 84 | p2@17@01 | live]
; [else-branch: 84 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 84 | p2@17@01]
; [eval] _err_0 != null ==> issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err_0@31@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 85 | _err_0@31@01 != Null | live]
; [else-branch: 85 | _err_0@31@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 85 | _err_0@31@01 != Null]
; [eval] issubtype(typeof(_err_0), Exception())
; [eval] typeof(_err_0)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p2@17@01 (not (= _err_0@31@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 86 | p1@16@01 | live]
; [else-branch: 86 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 86 | p1@16@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 87 | p2@17@01 | live]
; [else-branch: 87 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 87 | p2@17@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 81 | !(_err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err_0@31@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 88 | p1@16@01 | live]
; [else-branch: 88 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 88 | p1@16@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@30@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 89 | _err@30@01 != Null | live]
; [else-branch: 89 | _err@30@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 89 | _err@30@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p1@16@01 (not (= _err@30@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  $Snap.unit))
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 90 | p2@17@01 | live]
; [else-branch: 90 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 90 | p2@17@01]
; [eval] _err_0 != null ==> issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err_0@31@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err_0@31@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 91 | _err_0@31@01 != Null | live]
; [else-branch: 91 | _err_0@31@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 91 | _err_0@31@01 != Null]
(assert (not (= _err_0@31@01 $Ref.null)))
; [eval] issubtype(typeof(_err_0), Exception())
; [eval] typeof(_err_0)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err_0@31@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p2@17@01 (not (= _err_0@31@01 $Ref.null))))
(assert (=>
  (and p2@17@01 (not (= _err_0@31@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 92 | p1@16@01 | dead]
; [else-branch: 92 | !(p1@16@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 92 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1@16@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 93 | p2@17@01 | dead]
; [else-branch: 93 | !(p2@17@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 93 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2@17@01))
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 78 | !(_err@30@01 != Null && issubtype[Bool](typeof[PyType](_err@30@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err@30@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 94 | p2@17@01 | live]
; [else-branch: 94 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 94 | p2@17@01]
; [eval] _err_0 != null && issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 12
; [then-branch: 95 | _err_0@31@01 == Null | live]
; [else-branch: 95 | _err_0@31@01 != Null | live]
(push) ; 13
; [then-branch: 95 | _err_0@31@01 == Null]
(assert (= _err_0@31@01 $Ref.null))
(pop) ; 13
(push) ; 13
; [else-branch: 95 | _err_0@31@01 != Null]
(assert (not (= _err_0@31@01 $Ref.null)))
; [eval] issubtype(typeof(_err_0), Exception())
; [eval] typeof(_err_0)
; [eval] Exception()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_0@31@01 $Ref.null)) (= _err_0@31@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_0@31@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  (not (= _err_0@31@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 96 | _err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType]) | live]
; [else-branch: 96 | !(_err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 96 | _err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType])]
(assert (and
  (not (= _err_0@31@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_9.Container_valuep), int())
; [eval] typeof(c_9.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  $Snap.unit))
; [eval] int___eq__(c_9.Container_valuep, __prim__int___box__(7))
; [eval] __prim__int___box__(7)
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))) (__prim__int___box__ $Snap.unit 7)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))) (__prim__int___box__ $Snap.unit 7))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))) (__prim__int___box__ $Snap.unit 7)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 97 | p1@16@01 | live]
; [else-branch: 97 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 97 | p1@16@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@30@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err@30@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 98 | _err@30@01 != Null | live]
; [else-branch: 98 | _err@30@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 98 | _err@30@01 != Null]
(assert (not (= _err@30@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err@30@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p1@16@01 (not (= _err@30@01 $Ref.null))))
(assert (=>
  (and p1@16@01 (not (= _err@30@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  $Snap.unit))
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 99 | p2@17@01 | dead]
; [else-branch: 99 | !(p2@17@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 99 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2@17@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 100 | p1@16@01 | dead]
; [else-branch: 100 | !(p1@16@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 100 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1@16@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 13
; [then-branch: 101 | p2@17@01 | dead]
; [else-branch: 101 | !(p2@17@01) | live]
(push) ; 14
; [else-branch: 101 | !(p2@17@01)]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 96 | !(_err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err_0@31@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 102 | p1@16@01 | live]
; [else-branch: 102 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 102 | p1@16@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@30@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err@30@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 103 | _err@30@01 != Null | live]
; [else-branch: 103 | _err@30@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 103 | _err@30@01 != Null]
(assert (not (= _err@30@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err@30@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p1@16@01 (not (= _err@30@01 $Ref.null))))
(assert (=>
  (and p1@16@01 (not (= _err@30@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  $Snap.unit))
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 104 | p2@17@01 | dead]
; [else-branch: 104 | !(p2@17@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 104 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2@17@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 105 | p1@16@01 | dead]
; [else-branch: 105 | !(p1@16@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 105 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1@16@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 13
; [then-branch: 106 | p2@17@01 | dead]
; [else-branch: 106 | !(p2@17@01) | live]
(push) ; 14
; [else-branch: 106 | !(p2@17@01)]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var break1: Bool
(declare-const break1@34@01 Bool)
; [exec]
; var break2: Bool
(declare-const break2@35@01 Bool)
; [exec]
; var except1: Bool
(declare-const except1@36@01 Bool)
; [exec]
; var except2: Bool
(declare-const except2@37@01 Bool)
; [exec]
; var c_4: Ref
(declare-const c_4@38@01 $Ref)
; [exec]
; var c_4_0: Ref
(declare-const c_4_0@39@01 $Ref)
; [exec]
; var b_4: Ref
(declare-const b_4@40@01 $Ref)
; [exec]
; var b_4_0: Ref
(declare-const b_4_0@41@01 $Ref)
; [exec]
; var _loop_measures: Seq[Measure$]
(declare-const _loop_measures@42@01 Seq<Measure$>)
; [exec]
; var _loop_measures_4: Seq[Measure$]
(declare-const _loop_measures_4@43@01 Seq<Measure$>)
; [exec]
; var _loop_check_before: Bool
(declare-const _loop_check_before@44@01 Bool)
; [exec]
; var _loop_check_before_4: Bool
(declare-const _loop_check_before_4@45@01 Bool)
; [exec]
; var _loop_termination_flag: Bool
(declare-const _loop_termination_flag@46@01 Bool)
; [exec]
; var _loop_termination_flag_4: Bool
(declare-const _loop_termination_flag_4@47@01 Bool)
; [exec]
; var _loop_original_must_terminate: Perm
(declare-const _loop_original_must_terminate@48@01 $Perm)
; [exec]
; var _loop_original_must_terminate_4: Perm
(declare-const _loop_original_must_terminate_4@49@01 $Perm)
; [exec]
; var _residue_162: Perm
(declare-const _residue_162@50@01 $Perm)
; [exec]
; var _residue_162_0: Perm
(declare-const _residue_162_0@51@01 $Perm)
; [exec]
; var Exception_res: Ref
(declare-const Exception_res@52@01 $Ref)
; [exec]
; var Exception_res_2: Ref
(declare-const Exception_res_2@53@01 $Ref)
; [exec]
; var _cwl_157: Perm
(declare-const _cwl_157@54@01 $Perm)
; [exec]
; var _cwl_157_0: Perm
(declare-const _cwl_157_0@55@01 $Perm)
; [exec]
; var _method_measures_157: Seq[Measure$]
(declare-const _method_measures_157@56@01 Seq<Measure$>)
; [exec]
; var _method_measures_157_0: Seq[Measure$]
(declare-const _method_measures_157_0@57@01 Seq<Measure$>)
; [exec]
; var bypass1: Bool
(declare-const bypass1@58@01 Bool)
; [exec]
; var bypass2: Bool
(declare-const bypass2@59@01 Bool)
; [exec]
; var tmp1: Seq[Measure$]
(declare-const tmp1@60@01 Seq<Measure$>)
; [exec]
; var tmp2: Seq[Measure$]
(declare-const tmp2@61@01 Seq<Measure$>)
; [exec]
; var tmp1_0: Ref
(declare-const tmp1_0@62@01 $Ref)
; [exec]
; var tmp2_0: Ref
(declare-const tmp2_0@63@01 $Ref)
; [exec]
; var tmp1_1: Bool
(declare-const tmp1_1@64@01 Bool)
; [exec]
; var tmp2_1: Bool
(declare-const tmp2_1@65@01 Bool)
; [exec]
; var tmp1_2: Ref
(declare-const tmp1_2@66@01 $Ref)
; [exec]
; var tmp2_2: Ref
(declare-const tmp2_2@67@01 $Ref)
; [exec]
; var tmp1_3: Bool
(declare-const tmp1_3@68@01 Bool)
; [exec]
; var tmp2_3: Bool
(declare-const tmp2_3@69@01 Bool)
; [exec]
; var tmp1_4: Bool
(declare-const tmp1_4@70@01 Bool)
; [exec]
; var tmp2_4: Bool
(declare-const tmp2_4@71@01 Bool)
; [exec]
; var oldbreak1: Bool
(declare-const oldbreak1@72@01 Bool)
; [exec]
; var oldbreak2: Bool
(declare-const oldbreak2@73@01 Bool)
; [exec]
; var oldexcept1: Bool
(declare-const oldexcept1@74@01 Bool)
; [exec]
; var oldexcept2: Bool
(declare-const oldexcept2@75@01 Bool)
; [exec]
; var p1_0: Bool
(declare-const p1_0@76@01 Bool)
; [exec]
; var p2_0: Bool
(declare-const p2_0@77@01 Bool)
; [exec]
; var idle1: Bool
(declare-const idle1@78@01 Bool)
; [exec]
; var idle2: Bool
(declare-const idle2@79@01 Bool)
; [exec]
; inhale p1
(declare-const $t@80@01 $Snap)
(assert (= $t@80@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; break1 := false
; [exec]
; break2 := false
; [exec]
; except1 := false
; [exec]
; except2 := false
; [eval] p1 && (!break1 && !except1)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 107 | !(p1@16@01) | live]
; [else-branch: 107 | p1@16@01 | live]
(push) ; 6
; [then-branch: 107 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 6
(push) ; 6
; [else-branch: 107 | p1@16@01]
; [eval] !break1
(push) ; 7
; [then-branch: 108 | False | live]
; [else-branch: 108 | True | live]
(push) ; 8
; [then-branch: 108 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 108 | True]
; [eval] !except1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1@16@01 (not p1@16@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 109 | p1@16@01 | live]
; [else-branch: 109 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 109 | p1@16@01]
; [exec]
; _method_measures_157 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; c_4 := c
; [exec]
; b_4 := b
; [exec]
; _loop_original_must_terminate := perm(MustTerminate(_cthread_157))
; [eval] perm(MustTerminate(_cthread_157))
(declare-const _loop_original_must_terminate@81@01 $Perm)
(assert (= _loop_original_must_terminate@81@01 $Perm.No))
; [exec]
; _loop_termination_flag := false
; [exec]
; _loop_check_before := true
; [eval] p2 && (!break2 && !except2)
(push) ; 6
; [then-branch: 110 | !(p2@17@01) | live]
; [else-branch: 110 | p2@17@01 | live]
(push) ; 7
; [then-branch: 110 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 7
(push) ; 7
; [else-branch: 110 | p2@17@01]
; [eval] !break2
(push) ; 8
; [then-branch: 111 | False | live]
; [else-branch: 111 | True | live]
(push) ; 9
; [then-branch: 111 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 111 | True]
; [eval] !except2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2@17@01 (not p2@17@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 112 | p2@17@01 | live]
; [else-branch: 112 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 112 | p2@17@01]
; [exec]
; _method_measures_157_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err_0 := null
; [exec]
; c_4_0 := c_9
; [exec]
; b_4_0 := b_9
; [exec]
; _loop_original_must_terminate_4 := perm(MustTerminate_0(_cthread_157_0))
; [eval] perm(MustTerminate_0(_cthread_157_0))
(declare-const _loop_original_must_terminate_4@82@01 $Perm)
(assert (= _loop_original_must_terminate_4@82@01 $Perm.No))
; [exec]
; _loop_termination_flag_4 := false
; [exec]
; _loop_check_before_4 := true
; [exec]
; bypass1 := !(p1 && (!break1 && !except1))
; [eval] !(p1 && (!break1 && !except1))
; [eval] p1 && (!break1 && !except1)
(push) ; 7
; [then-branch: 113 | !(p1@16@01) | live]
; [else-branch: 113 | p1@16@01 | live]
(push) ; 8
; [then-branch: 113 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 8
(push) ; 8
; [else-branch: 113 | p1@16@01]
; [eval] !break1
(push) ; 9
; [then-branch: 114 | False | live]
; [else-branch: 114 | True | live]
(push) ; 10
; [then-branch: 114 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 114 | True]
; [eval] !except1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass1@83@01 Bool)
(assert (= bypass1@83@01 (not p1@16@01)))
; [exec]
; bypass2 := !(p2 && (!break2 && !except2))
; [eval] !(p2 && (!break2 && !except2))
; [eval] p2 && (!break2 && !except2)
(push) ; 7
; [then-branch: 115 | !(p2@17@01) | live]
; [else-branch: 115 | p2@17@01 | live]
(push) ; 8
; [then-branch: 115 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 8
(push) ; 8
; [else-branch: 115 | p2@17@01]
; [eval] !break2
(push) ; 9
; [then-branch: 116 | False | live]
; [else-branch: 116 | True | live]
(push) ; 10
; [then-branch: 116 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 116 | True]
; [eval] !except2
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass2@84@01 Bool)
(assert (= bypass2@84@01 (not p2@17@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (not bypass1@83@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 117 | bypass1@83@01 | dead]
; [else-branch: 117 | !(bypass1@83@01) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 117 | !(bypass1@83@01)]
(assert (not bypass1@83@01))
(pop) ; 7
; [eval] !bypass1
(push) ; 7
(set-option :timeout 10)
(assert (not bypass1@83@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not bypass1@83@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 118 | !(bypass1@83@01) | live]
; [else-branch: 118 | bypass1@83@01 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 118 | !(bypass1@83@01)]
(assert (not bypass1@83@01))
(push) ; 8
(set-option :timeout 10)
(assert (not (not bypass2@84@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 119 | bypass2@84@01 | dead]
; [else-branch: 119 | !(bypass2@84@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 119 | !(bypass2@84@01)]
(assert (not bypass2@84@01))
(pop) ; 8
; [eval] !bypass2
(push) ; 8
(set-option :timeout 10)
(assert (not bypass2@84@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not bypass2@84@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 120 | !(bypass2@84@01) | live]
; [else-branch: 120 | bypass2@84@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 120 | !(bypass2@84@01)]
(assert (not bypass2@84@01))
; [exec]
; oldbreak1 := break1
; [exec]
; oldbreak2 := break2
; [exec]
; oldexcept1 := except1
; [exec]
; oldexcept2 := except2
; [exec]
; idle1 := false
; [exec]
; idle2 := false
(declare-const p1_0@85@01 Bool)
(declare-const p2_0@86@01 Bool)
(declare-const idle1@87@01 Bool)
(declare-const idle2@88@01 Bool)
(declare-const _loop_measures@89@01 Seq<Measure$>)
(declare-const _loop_measures_4@90@01 Seq<Measure$>)
(declare-const p1_1@91@01 Bool)
(declare-const p2_1@92@01 Bool)
(declare-const p3@93@01 Bool)
(declare-const p4@94@01 Bool)
(declare-const p1_2@95@01 Bool)
(declare-const p2_2@96@01 Bool)
(declare-const p3_0@97@01 Bool)
(declare-const p4_0@98@01 Bool)
(declare-const tmp@99@01 $Ref)
(declare-const Exception_res@100@01 $Ref)
(declare-const Exception_res_2@101@01 $Ref)
(declare-const _err@102@01 $Ref)
(declare-const except1@103@01 Bool)
(declare-const _err_0@104@01 $Ref)
(declare-const except2@105@01 Bool)
(declare-const p1_3@106@01 Bool)
(declare-const p2_3@107@01 Bool)
(declare-const p3_1@108@01 Bool)
(declare-const p4_1@109@01 Bool)
(declare-const break1@110@01 Bool)
(declare-const break2@111@01 Bool)
(declare-const _loop_check_before@112@01 Bool)
(declare-const _loop_check_before_4@113@01 Bool)
(push) ; 9
; Loop head block: Check well-definedness of invariant
(declare-const $t@114@01 $Snap)
(assert (= $t@114@01 ($Snap.combine ($Snap.first $t@114@01) ($Snap.second $t@114@01))))
(assert (= ($Snap.first $t@114@01) $Snap.unit))
; [eval] p1 && !bypass1 ==> (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_162) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_162) && _residue_157 <= _residue_162)
; [eval] p1 && !bypass1
(push) ; 10
; [then-branch: 121 | !(p1@16@01) | live]
; [else-branch: 121 | p1@16@01 | live]
(push) ; 11
; [then-branch: 121 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 11
(push) ; 11
; [else-branch: 121 | p1@16@01]
; [eval] !bypass1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 122 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 122 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 122 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_162) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_162) && _residue_157 <= _residue_162)
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_162)
(push) ; 12
; [then-branch: 123 | False | live]
; [else-branch: 123 | True | live]
(push) ; 13
; [then-branch: 123 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 123 | True]
; [eval] (forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_162)
(push) ; 14
; [then-branch: 124 | False | live]
; [else-branch: 124 | True | live]
(push) ; 15
; [then-branch: 124 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 124 | True]
; [eval] _residue_157 <= _residue_162
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (<= _residue_157@22@01 _residue_162@50@01)))
(assert (=
  ($Snap.second $t@114@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@114@01))
    ($Snap.second ($Snap.second $t@114@01)))))
(assert (= ($Snap.first ($Snap.second $t@114@01)) $Snap.unit))
; [eval] p2 && !bypass2 ==> (forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _residue_162_0) && ((forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _residue_162_0) && _residue_157_0 <= _residue_162_0)
; [eval] p2 && !bypass2
(push) ; 10
; [then-branch: 125 | !(p2@17@01) | live]
; [else-branch: 125 | p2@17@01 | live]
(push) ; 11
; [then-branch: 125 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 11
(push) ; 11
; [else-branch: 125 | p2@17@01]
; [eval] !bypass2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 126 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 126 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 126 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] (forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _residue_162_0) && ((forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _residue_162_0) && _residue_157_0 <= _residue_162_0)
; [eval] (forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _residue_162_0)
(push) ; 12
; [then-branch: 127 | False | live]
; [else-branch: 127 | True | live]
(push) ; 13
; [then-branch: 127 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 127 | True]
; [eval] (forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _residue_162_0)
(push) ; 14
; [then-branch: 128 | False | live]
; [else-branch: 128 | True | live]
(push) ; 15
; [then-branch: 128 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 128 | True]
; [eval] _residue_157_0 <= _residue_162_0
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (<= _residue_157_0@23@01 _residue_162_0@51@01)))
(assert (=
  ($Snap.second ($Snap.second $t@114@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@114@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))
; [eval] p1 && !bypass1
(push) ; 10
; [then-branch: 129 | !(p1@16@01) | live]
; [else-branch: 129 | p1@16@01 | live]
(push) ; 11
; [then-branch: 129 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 11
(push) ; 11
; [else-branch: 129 | p1@16@01]
; [eval] !bypass1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 130 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 130 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 130 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@114@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))
; [eval] p2 && !bypass2
(push) ; 11
; [then-branch: 131 | !(p2@17@01) | live]
; [else-branch: 131 | p2@17@01 | live]
(push) ; 12
; [then-branch: 131 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 12
(push) ; 12
; [else-branch: 131 | p2@17@01]
; [eval] !bypass2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 132 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 132 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 132 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))
  $Snap.unit))
; [eval] p1 && !bypass1 ==> issubtype(typeof(c_4.Container_value), int())
; [eval] p1 && !bypass1
(push) ; 12
; [then-branch: 133 | !(p1@16@01) | live]
; [else-branch: 133 | p1@16@01 | live]
(push) ; 13
; [then-branch: 133 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 13
(push) ; 13
; [else-branch: 133 | p1@16@01]
; [eval] !bypass1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 134 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 134 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 134 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] issubtype(typeof(c_4.Container_value), int())
; [eval] typeof(c_4.Container_value)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@114@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))
  $Snap.unit))
; [eval] p2 && !bypass2 ==> issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] p2 && !bypass2
(push) ; 12
; [then-branch: 135 | !(p2@17@01) | live]
; [else-branch: 135 | p2@17@01 | live]
(push) ; 13
; [then-branch: 135 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 13
(push) ; 13
; [else-branch: 135 | p2@17@01]
; [eval] !bypass2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 136 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 136 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 136 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] typeof(c_4_0.Container_valuep)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))
  $Snap.unit))
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 12
; [then-branch: 137 | !(p1@16@01) | live]
; [else-branch: 137 | p1@16@01 | live]
(push) ; 13
; [then-branch: 137 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 13
(push) ; 13
; [else-branch: 137 | p1@16@01]
; [eval] !bypass1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 138 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 138 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 138 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
  $Snap.unit))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 12
; [then-branch: 139 | !(p2@17@01) | live]
; [else-branch: 139 | p2@17@01 | live]
(push) ; 13
; [then-branch: 139 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 13
(push) ; 13
; [else-branch: 139 | p2@17@01]
; [eval] !bypass2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 140 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 140 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 140 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))
  $Snap.unit))
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 12
; [then-branch: 141 | !(p1@16@01) | live]
; [else-branch: 141 | p1@16@01 | live]
(push) ; 13
; [then-branch: 141 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 13
(push) ; 13
; [else-branch: 141 | p1@16@01]
; [eval] !bypass1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 142 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 142 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 142 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))
  $Snap.unit))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 12
; [then-branch: 143 | !(p2@17@01) | live]
; [else-branch: 143 | p2@17@01 | live]
(push) ; 13
; [then-branch: 143 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 13
(push) ; 13
; [else-branch: 143 | p2@17@01]
; [eval] !bypass2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 144 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 144 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 144 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))
  $Snap.unit))
; [eval] bypass1 ==> tmp1_1 == except1
(push) ; 12
; [then-branch: 145 | bypass1@83@01 | dead]
; [else-branch: 145 | !(bypass1@83@01) | live]
(push) ; 13
; [else-branch: 145 | !(bypass1@83@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))
  $Snap.unit))
; [eval] bypass1 ==> tmp1_4 == break1
(push) ; 12
; [then-branch: 146 | bypass1@83@01 | dead]
; [else-branch: 146 | !(bypass1@83@01) | live]
(push) ; 13
; [else-branch: 146 | !(bypass1@83@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))
  $Snap.unit))
; [eval] bypass1 ==> tmp1_0 == Exception_res
(push) ; 12
; [then-branch: 147 | bypass1@83@01 | dead]
; [else-branch: 147 | !(bypass1@83@01) | live]
(push) ; 13
; [else-branch: 147 | !(bypass1@83@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))
  $Snap.unit))
; [eval] bypass1 ==> tmp1_2 == _err
(push) ; 12
; [then-branch: 148 | bypass1@83@01 | dead]
; [else-branch: 148 | !(bypass1@83@01) | live]
(push) ; 13
; [else-branch: 148 | !(bypass1@83@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))
  $Snap.unit))
; [eval] bypass1 ==> tmp1_3 == _loop_check_before
(push) ; 12
; [then-branch: 149 | bypass1@83@01 | dead]
; [else-branch: 149 | !(bypass1@83@01) | live]
(push) ; 13
; [else-branch: 149 | !(bypass1@83@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))
  $Snap.unit))
; [eval] bypass1 ==> tmp1 == _loop_measures
(push) ; 12
; [then-branch: 150 | bypass1@83@01 | dead]
; [else-branch: 150 | !(bypass1@83@01) | live]
(push) ; 13
; [else-branch: 150 | !(bypass1@83@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))
  $Snap.unit))
; [eval] bypass2 ==> tmp2 == _loop_measures_4
(push) ; 12
; [then-branch: 151 | bypass2@84@01 | dead]
; [else-branch: 151 | !(bypass2@84@01) | live]
(push) ; 13
; [else-branch: 151 | !(bypass2@84@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))))
  $Snap.unit))
; [eval] bypass2 ==> tmp2_1 == except2
(push) ; 12
; [then-branch: 152 | bypass2@84@01 | dead]
; [else-branch: 152 | !(bypass2@84@01) | live]
(push) ; 13
; [else-branch: 152 | !(bypass2@84@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))))
  $Snap.unit))
; [eval] bypass2 ==> tmp2_3 == _loop_check_before_4
(push) ; 12
; [then-branch: 153 | bypass2@84@01 | dead]
; [else-branch: 153 | !(bypass2@84@01) | live]
(push) ; 13
; [else-branch: 153 | !(bypass2@84@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2 ==> tmp2_4 == break2
(push) ; 12
; [then-branch: 154 | bypass2@84@01 | dead]
; [else-branch: 154 | !(bypass2@84@01) | live]
(push) ; 13
; [else-branch: 154 | !(bypass2@84@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2 ==> tmp2_2 == _err_0
(push) ; 12
; [then-branch: 155 | bypass2@84@01 | dead]
; [else-branch: 155 | !(bypass2@84@01) | live]
(push) ; 13
; [else-branch: 155 | !(bypass2@84@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2 ==> tmp2_0 == Exception_res_2
(push) ; 12
; [then-branch: 156 | bypass2@84@01 | dead]
; [else-branch: 156 | !(bypass2@84@01) | live]
(push) ; 13
; [else-branch: 156 | !(bypass2@84@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
(pop) ; 9
(push) ; 9
; Loop head block: Establish invariant
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 10
; [then-branch: 157 | !(p1@16@01) | live]
; [else-branch: 157 | p1@16@01 | live]
(push) ; 11
; [then-branch: 157 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 11
(push) ; 11
; [else-branch: 157 | p1@16@01]
(assert p1@16@01)
; [eval] !bypass1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 158 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 158 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 158 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 10
; [then-branch: 159 | !(p2@17@01) | live]
; [else-branch: 159 | p2@17@01 | live]
(push) ; 11
; [then-branch: 159 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 11
(push) ; 11
; [else-branch: 159 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 160 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 160 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 160 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1
(push) ; 10
; [then-branch: 161 | !(p1@16@01) | live]
; [else-branch: 161 | p1@16@01 | live]
(push) ; 11
; [then-branch: 161 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 11
(push) ; 11
; [else-branch: 161 | p1@16@01]
; [eval] !bypass1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 162 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 162 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 162 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2
(push) ; 11
; [then-branch: 163 | !(p2@17@01) | live]
; [else-branch: 163 | p2@17@01 | live]
(push) ; 12
; [then-branch: 163 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 12
(push) ; 12
; [else-branch: 163 | p2@17@01]
; [eval] !bypass2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 164 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 164 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 164 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1 ==> issubtype(typeof(c_4.Container_value), int())
; [eval] p1 && !bypass1
(push) ; 12
; [then-branch: 165 | !(p1@16@01) | live]
; [else-branch: 165 | p1@16@01 | live]
(push) ; 13
; [then-branch: 165 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 13
(push) ; 13
; [else-branch: 165 | p1@16@01]
; [eval] !bypass1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 166 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 166 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 166 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] issubtype(typeof(c_4.Container_value), int())
; [eval] typeof(c_4.Container_value)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
(push) ; 12
(assert (not (=>
  (and p1@16@01 (not bypass1@83@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) (as int<PyType>  PyType))))
; [eval] p2 && !bypass2 ==> issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] p2 && !bypass2
(push) ; 12
; [then-branch: 167 | !(p2@17@01) | live]
; [else-branch: 167 | p2@17@01 | live]
(push) ; 13
; [then-branch: 167 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 13
(push) ; 13
; [else-branch: 167 | p2@17@01]
; [eval] !bypass2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 168 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 168 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 168 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] typeof(c_4_0.Container_valuep)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
(push) ; 12
(assert (not (=>
  (and p2@17@01 (not bypass2@84@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) (as int<PyType>  PyType))))
; [eval] p1 && !bypass1 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] p1 && !bypass1
(push) ; 12
; [then-branch: 169 | !(p1@16@01) | live]
; [else-branch: 169 | p1@16@01 | live]
(push) ; 13
; [then-branch: 169 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 13
(push) ; 13
; [else-branch: 169 | p1@16@01]
; [eval] !bypass1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 170 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 170 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 170 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] !idle1
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 171 | True | live]
; [else-branch: 171 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 171 | True]
; [eval] _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 172 | True | live]
; [else-branch: 172 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 172 | True]
; [eval] _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 18
; [then-branch: 173 | False | live]
; [else-branch: 173 | True | live]
(push) ; 19
; [then-branch: 173 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 173 | True]
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 20
; [then-branch: 174 | False | live]
; [else-branch: 174 | True | live]
(push) ; 21
; [then-branch: 174 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 174 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 22
; [then-branch: 175 | False | live]
; [else-branch: 175 | True | live]
(push) ; 23
; [then-branch: 175 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 175 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 24
; [then-branch: 176 | False | live]
; [else-branch: 176 | True | live]
(push) ; 25
; [then-branch: 176 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 176 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 26
; [then-branch: 177 | False | live]
; [else-branch: 177 | True | live]
(push) ; 27
; [then-branch: 177 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 177 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] p2 && !bypass2
(push) ; 12
; [then-branch: 178 | !(p2@17@01) | live]
; [else-branch: 178 | p2@17@01 | live]
(push) ; 13
; [then-branch: 178 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 13
(push) ; 13
; [else-branch: 178 | p2@17@01]
; [eval] !bypass2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 179 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 179 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 179 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] !idle2
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 180 | True | live]
; [else-branch: 180 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 180 | True]
; [eval] _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 181 | True | live]
; [else-branch: 181 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 181 | True]
; [eval] _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
(push) ; 18
; [then-branch: 182 | False | live]
; [else-branch: 182 | True | live]
(push) ; 19
; [then-branch: 182 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 182 | True]
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none
; [eval] perm(MustTerminate_0(_cthread_157_0))
(push) ; 20
; [then-branch: 183 | False | live]
; [else-branch: 183 | True | live]
(push) ; 21
; [then-branch: 183 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 183 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 22
; [then-branch: 184 | False | live]
; [else-branch: 184 | True | live]
(push) ; 23
; [then-branch: 184 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 184 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 24
; [then-branch: 185 | False | live]
; [else-branch: 185 | True | live]
(push) ; 25
; [then-branch: 185 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 185 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 26
; [then-branch: 186 | False | live]
; [else-branch: 186 | True | live]
(push) ; 27
; [then-branch: 186 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 186 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] p1 && !bypass1
(push) ; 12
; [then-branch: 187 | !(p1@16@01) | live]
; [else-branch: 187 | p1@16@01 | live]
(push) ; 13
; [then-branch: 187 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 13
(push) ; 13
; [else-branch: 187 | p1@16@01]
; [eval] !bypass1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 188 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 188 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 188 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 189 | True | live]
; [else-branch: 189 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 189 | True]
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 16
; [then-branch: 190 | False | dead]
; [else-branch: 190 | True | live]
(push) ; 17
; [else-branch: 190 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] p2 && !bypass2
(push) ; 12
; [then-branch: 191 | !(p2@17@01) | live]
; [else-branch: 191 | p2@17@01 | live]
(push) ; 13
; [then-branch: 191 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 13
(push) ; 13
; [else-branch: 191 | p2@17@01]
; [eval] !bypass2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 192 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 192 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 192 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !idle2
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 193 | True | live]
; [else-branch: 193 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 193 | True]
; [eval] !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_4
(push) ; 16
; [then-branch: 194 | False | dead]
; [else-branch: 194 | True | live]
(push) ; 17
; [else-branch: 194 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] bypass1 ==> tmp1_1 == except1
(push) ; 12
; [then-branch: 195 | bypass1@83@01 | dead]
; [else-branch: 195 | !(bypass1@83@01) | live]
(push) ; 13
; [else-branch: 195 | !(bypass1@83@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1 ==> tmp1_4 == break1
(push) ; 12
; [then-branch: 196 | bypass1@83@01 | dead]
; [else-branch: 196 | !(bypass1@83@01) | live]
(push) ; 13
; [else-branch: 196 | !(bypass1@83@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1 ==> tmp1_0 == Exception_res
(push) ; 12
; [then-branch: 197 | bypass1@83@01 | dead]
; [else-branch: 197 | !(bypass1@83@01) | live]
(push) ; 13
; [else-branch: 197 | !(bypass1@83@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1 ==> tmp1_2 == _err
(push) ; 12
; [then-branch: 198 | bypass1@83@01 | dead]
; [else-branch: 198 | !(bypass1@83@01) | live]
(push) ; 13
; [else-branch: 198 | !(bypass1@83@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1 ==> tmp1_3 == _loop_check_before
(push) ; 12
; [then-branch: 199 | bypass1@83@01 | dead]
; [else-branch: 199 | !(bypass1@83@01) | live]
(push) ; 13
; [else-branch: 199 | !(bypass1@83@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1 ==> tmp1 == _loop_measures
(push) ; 12
; [then-branch: 200 | bypass1@83@01 | dead]
; [else-branch: 200 | !(bypass1@83@01) | live]
(push) ; 13
; [else-branch: 200 | !(bypass1@83@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2 ==> tmp2 == _loop_measures_4
(push) ; 12
; [then-branch: 201 | bypass2@84@01 | dead]
; [else-branch: 201 | !(bypass2@84@01) | live]
(push) ; 13
; [else-branch: 201 | !(bypass2@84@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2 ==> tmp2_1 == except2
(push) ; 12
; [then-branch: 202 | bypass2@84@01 | dead]
; [else-branch: 202 | !(bypass2@84@01) | live]
(push) ; 13
; [else-branch: 202 | !(bypass2@84@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2 ==> tmp2_3 == _loop_check_before_4
(push) ; 12
; [then-branch: 203 | bypass2@84@01 | dead]
; [else-branch: 203 | !(bypass2@84@01) | live]
(push) ; 13
; [else-branch: 203 | !(bypass2@84@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2 ==> tmp2_4 == break2
(push) ; 12
; [then-branch: 204 | bypass2@84@01 | dead]
; [else-branch: 204 | !(bypass2@84@01) | live]
(push) ; 13
; [else-branch: 204 | !(bypass2@84@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2 ==> tmp2_2 == _err_0
(push) ; 12
; [then-branch: 205 | bypass2@84@01 | dead]
; [else-branch: 205 | !(bypass2@84@01) | live]
(push) ; 13
; [else-branch: 205 | !(bypass2@84@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2 ==> tmp2_0 == Exception_res_2
(push) ; 12
; [then-branch: 206 | bypass2@84@01 | dead]
; [else-branch: 206 | !(bypass2@84@01) | live]
(push) ; 13
; [else-branch: 206 | !(bypass2@84@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 12
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))
  $Snap.unit))
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@114@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))
  $Snap.unit))
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@114@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))
(assert (= $t@114@01 ($Snap.combine ($Snap.first $t@114@01) ($Snap.second $t@114@01))))
(assert (= ($Snap.first $t@114@01) $Snap.unit))
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (<= _residue_157@22@01 _residue_162@50@01)))
(assert (=
  ($Snap.second $t@114@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@114@01))
    ($Snap.second ($Snap.second $t@114@01)))))
(assert (= ($Snap.first ($Snap.second $t@114@01)) $Snap.unit))
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (<= _residue_157_0@23@01 _residue_162_0@51@01)))
(assert (=
  ($Snap.second ($Snap.second $t@114@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@114@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 13
; [eval] p1 && (!break1 && !except1 && (!bypass1 && true)) || p2 && (!break2 && !except2 && (!bypass2 && true))
; [eval] p1 && (!break1 && !except1 && (!bypass1 && true))
(push) ; 14
; [then-branch: 207 | !(p1@16@01) | live]
; [else-branch: 207 | p1@16@01 | live]
(push) ; 15
; [then-branch: 207 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 15
(push) ; 15
; [else-branch: 207 | p1@16@01]
; [eval] !break1
(push) ; 16
; [then-branch: 208 | break1@110@01 | live]
; [else-branch: 208 | !(break1@110@01) | live]
(push) ; 17
; [then-branch: 208 | break1@110@01]
(assert break1@110@01)
(pop) ; 17
(push) ; 17
; [else-branch: 208 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 18
; [then-branch: 209 | except1@103@01 | live]
; [else-branch: 209 | !(except1@103@01) | live]
(push) ; 19
; [then-branch: 209 | except1@103@01]
(assert except1@103@01)
(pop) ; 19
(push) ; 19
; [else-branch: 209 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] !bypass1
(push) ; 20
; [then-branch: 210 | bypass1@83@01 | live]
; [else-branch: 210 | !(bypass1@83@01) | live]
(push) ; 21
; [then-branch: 210 | bypass1@83@01]
(assert bypass1@83@01)
(pop) ; 21
(push) ; 21
; [else-branch: 210 | !(bypass1@83@01)]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1@83@01) bypass1@83@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1@103@01)
  (and (not except1@103@01) (or (not bypass1@83@01) bypass1@83@01))))
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and
    (not break1@110@01)
    (=>
      (not except1@103@01)
      (and (not except1@103@01) (or (not bypass1@83@01) bypass1@83@01)))
    (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@16@01
  (and
    (=>
      (not break1@110@01)
      (and
        (not break1@110@01)
        (=>
          (not except1@103@01)
          (and (not except1@103@01) (or (not bypass1@83@01) bypass1@83@01)))
        (or (not except1@103@01) except1@103@01)))
    (or (not break1@110@01) break1@110@01))))
(push) ; 14
; [then-branch: 211 | p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01) | live]
; [else-branch: 211 | !(p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01)) | live]
(push) ; 15
; [then-branch: 211 | p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01)]
(assert (and
  p1@16@01
  (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01)))))
(pop) ; 15
(push) ; 15
; [else-branch: 211 | !(p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01))]
(assert (not
  (and
    p1@16@01
    (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01))))))
; [eval] p2 && (!break2 && !except2 && (!bypass2 && true))
(push) ; 16
; [then-branch: 212 | !(p2@17@01) | live]
; [else-branch: 212 | p2@17@01 | live]
(push) ; 17
; [then-branch: 212 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 17
(push) ; 17
; [else-branch: 212 | p2@17@01]
; [eval] !break2
(push) ; 18
; [then-branch: 213 | break2@111@01 | live]
; [else-branch: 213 | !(break2@111@01) | live]
(push) ; 19
; [then-branch: 213 | break2@111@01]
(assert break2@111@01)
(pop) ; 19
(push) ; 19
; [else-branch: 213 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(push) ; 20
; [then-branch: 214 | except2@105@01 | live]
; [else-branch: 214 | !(except2@105@01) | live]
(push) ; 21
; [then-branch: 214 | except2@105@01]
(assert except2@105@01)
(pop) ; 21
(push) ; 21
; [else-branch: 214 | !(except2@105@01)]
(assert (not except2@105@01))
; [eval] !bypass2
(push) ; 22
; [then-branch: 215 | bypass2@84@01 | live]
; [else-branch: 215 | !(bypass2@84@01) | live]
(push) ; 23
; [then-branch: 215 | bypass2@84@01]
(assert bypass2@84@01)
(pop) ; 23
(push) ; 23
; [else-branch: 215 | !(bypass2@84@01)]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2@84@01) bypass2@84@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2@105@01)
  (and (not except2@105@01) (or (not bypass2@84@01) bypass2@84@01))))
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and
    (not break2@111@01)
    (=>
      (not except2@105@01)
      (and (not except2@105@01) (or (not bypass2@84@01) bypass2@84@01)))
    (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@17@01
  (and
    (=>
      (not break2@111@01)
      (and
        (not break2@111@01)
        (=>
          (not except2@105@01)
          (and (not except2@105@01) (or (not bypass2@84@01) bypass2@84@01)))
        (or (not except2@105@01) except2@105@01)))
    (or (not break2@111@01) break2@111@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (and
    p1@16@01
    (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01))))
  (and p1@16@01 (not break1@110@01) (not except1@103@01) (not bypass1@83@01))))
; Joined path conditions
(assert (=>
  (not
    (and
      p1@16@01
      (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01)))))
  (and
    (not
      (and
        p1@16@01
        (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01)))))
    (=>
      p2@17@01
      (and
        (=>
          (not break2@111@01)
          (and
            (not break2@111@01)
            (=>
              (not except2@105@01)
              (and (not except2@105@01) (or (not bypass2@84@01) bypass2@84@01)))
            (or (not except2@105@01) except2@105@01)))
        (or (not break2@111@01) break2@111@01))))))
(assert (or
  (not
    (and
      p1@16@01
      (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01)))))
  (and
    p1@16@01
    (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01))))))
(pop) ; 13
(push) ; 13
; [eval] !(p1 && (!break1 && !except1 && (!bypass1 && true)) || p2 && (!break2 && !except2 && (!bypass2 && true)))
; [eval] p1 && (!break1 && !except1 && (!bypass1 && true)) || p2 && (!break2 && !except2 && (!bypass2 && true))
; [eval] p1 && (!break1 && !except1 && (!bypass1 && true))
(push) ; 14
; [then-branch: 216 | !(p1@16@01) | live]
; [else-branch: 216 | p1@16@01 | live]
(push) ; 15
; [then-branch: 216 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 15
(push) ; 15
; [else-branch: 216 | p1@16@01]
(assert p1@16@01)
; [eval] !break1
(push) ; 16
; [then-branch: 217 | break1@110@01 | live]
; [else-branch: 217 | !(break1@110@01) | live]
(push) ; 17
; [then-branch: 217 | break1@110@01]
(assert break1@110@01)
(pop) ; 17
(push) ; 17
; [else-branch: 217 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 18
; [then-branch: 218 | except1@103@01 | live]
; [else-branch: 218 | !(except1@103@01) | live]
(push) ; 19
; [then-branch: 218 | except1@103@01]
(assert except1@103@01)
(pop) ; 19
(push) ; 19
; [else-branch: 218 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] !bypass1
(push) ; 20
; [then-branch: 219 | bypass1@83@01 | live]
; [else-branch: 219 | !(bypass1@83@01) | live]
(push) ; 21
; [then-branch: 219 | bypass1@83@01]
(assert bypass1@83@01)
(pop) ; 21
(push) ; 21
; [else-branch: 219 | !(bypass1@83@01)]
(assert (not bypass1@83@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1@83@01) bypass1@83@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1@103@01)
  (and (not except1@103@01) (or (not bypass1@83@01) bypass1@83@01))))
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and
    (not break1@110@01)
    (=>
      (not except1@103@01)
      (and (not except1@103@01) (or (not bypass1@83@01) bypass1@83@01)))
    (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@16@01
  (and
    p1@16@01
    (=>
      (not break1@110@01)
      (and
        (not break1@110@01)
        (=>
          (not except1@103@01)
          (and (not except1@103@01) (or (not bypass1@83@01) bypass1@83@01)))
        (or (not except1@103@01) except1@103@01)))
    (or (not break1@110@01) break1@110@01))))
(push) ; 14
; [then-branch: 220 | p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01) | live]
; [else-branch: 220 | !(p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01)) | live]
(push) ; 15
; [then-branch: 220 | p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01)]
(assert (and
  p1@16@01
  (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01)))))
(pop) ; 15
(push) ; 15
; [else-branch: 220 | !(p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01))]
(assert (not
  (and
    p1@16@01
    (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01))))))
; [eval] p2 && (!break2 && !except2 && (!bypass2 && true))
(push) ; 16
; [then-branch: 221 | !(p2@17@01) | live]
; [else-branch: 221 | p2@17@01 | live]
(push) ; 17
; [then-branch: 221 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 17
(push) ; 17
; [else-branch: 221 | p2@17@01]
; [eval] !break2
(push) ; 18
; [then-branch: 222 | break2@111@01 | live]
; [else-branch: 222 | !(break2@111@01) | live]
(push) ; 19
; [then-branch: 222 | break2@111@01]
(assert break2@111@01)
(pop) ; 19
(push) ; 19
; [else-branch: 222 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(push) ; 20
; [then-branch: 223 | except2@105@01 | live]
; [else-branch: 223 | !(except2@105@01) | live]
(push) ; 21
; [then-branch: 223 | except2@105@01]
(assert except2@105@01)
(pop) ; 21
(push) ; 21
; [else-branch: 223 | !(except2@105@01)]
(assert (not except2@105@01))
; [eval] !bypass2
(push) ; 22
; [then-branch: 224 | bypass2@84@01 | live]
; [else-branch: 224 | !(bypass2@84@01) | live]
(push) ; 23
; [then-branch: 224 | bypass2@84@01]
(assert bypass2@84@01)
(pop) ; 23
(push) ; 23
; [else-branch: 224 | !(bypass2@84@01)]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2@84@01) bypass2@84@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2@105@01)
  (and (not except2@105@01) (or (not bypass2@84@01) bypass2@84@01))))
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and
    (not break2@111@01)
    (=>
      (not except2@105@01)
      (and (not except2@105@01) (or (not bypass2@84@01) bypass2@84@01)))
    (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@17@01
  (and
    (=>
      (not break2@111@01)
      (and
        (not break2@111@01)
        (=>
          (not except2@105@01)
          (and (not except2@105@01) (or (not bypass2@84@01) bypass2@84@01)))
        (or (not except2@105@01) except2@105@01)))
    (or (not break2@111@01) break2@111@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (and
    p1@16@01
    (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01))))
  (and p1@16@01 (not break1@110@01) (not except1@103@01) (not bypass1@83@01))))
; Joined path conditions
(assert (=>
  (not
    (and
      p1@16@01
      (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01)))))
  (and
    (not
      (and
        p1@16@01
        (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01)))))
    (=>
      p2@17@01
      (and
        (=>
          (not break2@111@01)
          (and
            (not break2@111@01)
            (=>
              (not except2@105@01)
              (and (not except2@105@01) (or (not bypass2@84@01) bypass2@84@01)))
            (or (not except2@105@01) except2@105@01)))
        (or (not break2@111@01) break2@111@01))))))
(assert (or
  (not
    (and
      p1@16@01
      (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01)))))
  (and
    p1@16@01
    (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01))))))
(pop) ; 13
; Loop head block: Follow loop-internal edges
; [eval] p1 && (!break1 && !except1 && (!bypass1 && true)) || p2 && (!break2 && !except2 && (!bypass2 && true))
; [eval] p1 && (!break1 && !except1 && (!bypass1 && true))
(push) ; 13
; [then-branch: 225 | !(p1@16@01) | live]
; [else-branch: 225 | p1@16@01 | live]
(push) ; 14
; [then-branch: 225 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 14
(push) ; 14
; [else-branch: 225 | p1@16@01]
(assert p1@16@01)
; [eval] !break1
(push) ; 15
; [then-branch: 226 | break1@110@01 | live]
; [else-branch: 226 | !(break1@110@01) | live]
(push) ; 16
; [then-branch: 226 | break1@110@01]
(assert break1@110@01)
(pop) ; 16
(push) ; 16
; [else-branch: 226 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 17
; [then-branch: 227 | except1@103@01 | live]
; [else-branch: 227 | !(except1@103@01) | live]
(push) ; 18
; [then-branch: 227 | except1@103@01]
(assert except1@103@01)
(pop) ; 18
(push) ; 18
; [else-branch: 227 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] !bypass1
(push) ; 19
; [then-branch: 228 | bypass1@83@01 | live]
; [else-branch: 228 | !(bypass1@83@01) | live]
(push) ; 20
; [then-branch: 228 | bypass1@83@01]
(assert bypass1@83@01)
(pop) ; 20
(push) ; 20
; [else-branch: 228 | !(bypass1@83@01)]
(assert (not bypass1@83@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1@83@01) bypass1@83@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1@103@01)
  (and (not except1@103@01) (or (not bypass1@83@01) bypass1@83@01))))
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and
    (not break1@110@01)
    (=>
      (not except1@103@01)
      (and (not except1@103@01) (or (not bypass1@83@01) bypass1@83@01)))
    (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@16@01
  (and
    p1@16@01
    (=>
      (not break1@110@01)
      (and
        (not break1@110@01)
        (=>
          (not except1@103@01)
          (and (not except1@103@01) (or (not bypass1@83@01) bypass1@83@01)))
        (or (not except1@103@01) except1@103@01)))
    (or (not break1@110@01) break1@110@01))))
(push) ; 13
; [then-branch: 229 | p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01) | live]
; [else-branch: 229 | !(p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01)) | live]
(push) ; 14
; [then-branch: 229 | p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01)]
(assert (and
  p1@16@01
  (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01)))))
(pop) ; 14
(push) ; 14
; [else-branch: 229 | !(p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01))]
(assert (not
  (and
    p1@16@01
    (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01))))))
; [eval] p2 && (!break2 && !except2 && (!bypass2 && true))
(push) ; 15
; [then-branch: 230 | !(p2@17@01) | live]
; [else-branch: 230 | p2@17@01 | live]
(push) ; 16
; [then-branch: 230 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 16
(push) ; 16
; [else-branch: 230 | p2@17@01]
; [eval] !break2
(push) ; 17
; [then-branch: 231 | break2@111@01 | live]
; [else-branch: 231 | !(break2@111@01) | live]
(push) ; 18
; [then-branch: 231 | break2@111@01]
(assert break2@111@01)
(pop) ; 18
(push) ; 18
; [else-branch: 231 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(push) ; 19
; [then-branch: 232 | except2@105@01 | live]
; [else-branch: 232 | !(except2@105@01) | live]
(push) ; 20
; [then-branch: 232 | except2@105@01]
(assert except2@105@01)
(pop) ; 20
(push) ; 20
; [else-branch: 232 | !(except2@105@01)]
(assert (not except2@105@01))
; [eval] !bypass2
(push) ; 21
; [then-branch: 233 | bypass2@84@01 | live]
; [else-branch: 233 | !(bypass2@84@01) | live]
(push) ; 22
; [then-branch: 233 | bypass2@84@01]
(assert bypass2@84@01)
(pop) ; 22
(push) ; 22
; [else-branch: 233 | !(bypass2@84@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2@84@01) bypass2@84@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2@105@01)
  (and (not except2@105@01) (or (not bypass2@84@01) bypass2@84@01))))
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and
    (not break2@111@01)
    (=>
      (not except2@105@01)
      (and (not except2@105@01) (or (not bypass2@84@01) bypass2@84@01)))
    (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@17@01
  (and
    (=>
      (not break2@111@01)
      (and
        (not break2@111@01)
        (=>
          (not except2@105@01)
          (and (not except2@105@01) (or (not bypass2@84@01) bypass2@84@01)))
        (or (not except2@105@01) except2@105@01)))
    (or (not break2@111@01) break2@111@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and
    p1@16@01
    (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01))))
  (and p1@16@01 (not break1@110@01) (not except1@103@01) (not bypass1@83@01))))
; Joined path conditions
(assert (=>
  (not
    (and
      p1@16@01
      (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01)))))
  (and
    (not
      (and
        p1@16@01
        (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01)))))
    (=>
      p2@17@01
      (and
        (=>
          (not break2@111@01)
          (and
            (not break2@111@01)
            (=>
              (not except2@105@01)
              (and (not except2@105@01) (or (not bypass2@84@01) bypass2@84@01)))
            (or (not except2@105@01) except2@105@01)))
        (or (not break2@111@01) break2@111@01))))))
(assert (or
  (not
    (and
      p1@16@01
      (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01)))))
  (and
    p1@16@01
    (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01))))))
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (or
    (and
      p1@16@01
      (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01))))
    (and
      p2@17@01
      (and (not break2@111@01) (and (not except2@105@01) (not bypass2@84@01))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (or
  (and
    p1@16@01
    (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01))))
  (and
    p2@17@01
    (and (not break2@111@01) (and (not except2@105@01) (not bypass2@84@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 234 | p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01) || p2@17@01 && !(break2@111@01) && !(except2@105@01) && !(bypass2@84@01) | live]
; [else-branch: 234 | !(p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01) || p2@17@01 && !(break2@111@01) && !(except2@105@01) && !(bypass2@84@01)) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 234 | p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01) || p2@17@01 && !(break2@111@01) && !(except2@105@01) && !(bypass2@84@01)]
(assert (or
  (and
    p1@16@01
    (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01))))
  (and
    p2@17@01
    (and (not break2@111@01) (and (not except2@105@01) (not bypass2@84@01))))))
; [exec]
; var p1_1: Bool
(declare-const p1_1@115@01 Bool)
; [exec]
; var p2_1: Bool
(declare-const p2_1@116@01 Bool)
; [exec]
; var p3: Bool
(declare-const p3@117@01 Bool)
; [exec]
; var p4: Bool
(declare-const p4@118@01 Bool)
; [exec]
; var p1_2: Bool
(declare-const p1_2@119@01 Bool)
; [exec]
; var p2_2: Bool
(declare-const p2_2@120@01 Bool)
; [exec]
; var p3_0: Bool
(declare-const p3_0@121@01 Bool)
; [exec]
; var p4_0: Bool
(declare-const p4_0@122@01 Bool)
; [exec]
; var tmp: Ref
(declare-const tmp@123@01 $Ref)
; [exec]
; var p1_3: Bool
(declare-const p1_3@124@01 Bool)
; [exec]
; var p2_3: Bool
(declare-const p2_3@125@01 Bool)
; [exec]
; var p3_1: Bool
(declare-const p3_1@126@01 Bool)
; [exec]
; var p4_1: Bool
(declare-const p4_1@127@01 Bool)
; [exec]
; p1_0 := p1 && (!break1 && !except1 && true)
; [eval] p1 && (!break1 && !except1 && true)
(push) ; 14
; [then-branch: 235 | !(p1@16@01) | live]
; [else-branch: 235 | p1@16@01 | live]
(push) ; 15
; [then-branch: 235 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 15
(push) ; 15
; [else-branch: 235 | p1@16@01]
(assert p1@16@01)
; [eval] !break1
(push) ; 16
; [then-branch: 236 | break1@110@01 | live]
; [else-branch: 236 | !(break1@110@01) | live]
(push) ; 17
; [then-branch: 236 | break1@110@01]
(assert break1@110@01)
(pop) ; 17
(push) ; 17
; [else-branch: 236 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 18
; [then-branch: 237 | except1@103@01 | live]
; [else-branch: 237 | !(except1@103@01) | live]
(push) ; 19
; [then-branch: 237 | except1@103@01]
(assert except1@103@01)
(pop) ; 19
(push) ; 19
; [else-branch: 237 | !(except1@103@01)]
(assert (not except1@103@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and (not break1@110@01) (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@16@01
  (and
    p1@16@01
    (=>
      (not break1@110@01)
      (and (not break1@110@01) (or (not except1@103@01) except1@103@01)))
    (or (not break1@110@01) break1@110@01))))
(declare-const p1_0@128@01 Bool)
(assert (= p1_0@128@01 (and p1@16@01 (and (not break1@110@01) (not except1@103@01)))))
; [exec]
; p2_0 := p2 && (!break2 && !except2 && true)
; [eval] p2 && (!break2 && !except2 && true)
(push) ; 14
; [then-branch: 238 | !(p2@17@01) | live]
; [else-branch: 238 | p2@17@01 | live]
(push) ; 15
; [then-branch: 238 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 15
(push) ; 15
; [else-branch: 238 | p2@17@01]
; [eval] !break2
(push) ; 16
; [then-branch: 239 | break2@111@01 | live]
; [else-branch: 239 | !(break2@111@01) | live]
(push) ; 17
; [then-branch: 239 | break2@111@01]
(assert break2@111@01)
(pop) ; 17
(push) ; 17
; [else-branch: 239 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(push) ; 18
; [then-branch: 240 | except2@105@01 | live]
; [else-branch: 240 | !(except2@105@01) | live]
(push) ; 19
; [then-branch: 240 | except2@105@01]
(assert except2@105@01)
(pop) ; 19
(push) ; 19
; [else-branch: 240 | !(except2@105@01)]
(assert (not except2@105@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and (not break2@111@01) (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@17@01
  (and
    (=>
      (not break2@111@01)
      (and (not break2@111@01) (or (not except2@105@01) except2@105@01)))
    (or (not break2@111@01) break2@111@01))))
(declare-const p2_0@129@01 Bool)
(assert (= p2_0@129@01 (and p2@17@01 (and (not break2@111@01) (not except2@105@01)))))
; [exec]
; idle1 := p1 && (!break1 && !except1 && !true)
; [eval] p1 && (!break1 && !except1 && !true)
(push) ; 14
; [then-branch: 241 | !(p1@16@01) | live]
; [else-branch: 241 | p1@16@01 | live]
(push) ; 15
; [then-branch: 241 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 15
(push) ; 15
; [else-branch: 241 | p1@16@01]
(assert p1@16@01)
; [eval] !break1
(push) ; 16
; [then-branch: 242 | break1@110@01 | live]
; [else-branch: 242 | !(break1@110@01) | live]
(push) ; 17
; [then-branch: 242 | break1@110@01]
(assert break1@110@01)
(pop) ; 17
(push) ; 17
; [else-branch: 242 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 18
; [then-branch: 243 | except1@103@01 | live]
; [else-branch: 243 | !(except1@103@01) | live]
(push) ; 19
; [then-branch: 243 | except1@103@01]
(assert except1@103@01)
(pop) ; 19
(push) ; 19
; [else-branch: 243 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] !true
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and (not break1@110@01) (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [exec]
; idle2 := p2 && (!break2 && !except2 && !true)
; [eval] p2 && (!break2 && !except2 && !true)
(push) ; 14
; [then-branch: 244 | !(p2@17@01) | live]
; [else-branch: 244 | p2@17@01 | live]
(push) ; 15
; [then-branch: 244 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 15
(push) ; 15
; [else-branch: 244 | p2@17@01]
; [eval] !break2
(push) ; 16
; [then-branch: 245 | break2@111@01 | live]
; [else-branch: 245 | !(break2@111@01) | live]
(push) ; 17
; [then-branch: 245 | break2@111@01]
(assert break2@111@01)
(pop) ; 17
(push) ; 17
; [else-branch: 245 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(push) ; 18
; [then-branch: 246 | except2@105@01 | live]
; [else-branch: 246 | !(except2@105@01) | live]
(push) ; 19
; [then-branch: 246 | except2@105@01]
(assert except2@105@01)
(pop) ; 19
(push) ; 19
; [else-branch: 246 | !(except2@105@01)]
(assert (not except2@105@01))
; [eval] !true
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and (not break2@111@01) (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [eval] p1_0 && (!break1 && !except1)
(push) ; 14
; [then-branch: 247 | !(p1_0@128@01) | live]
; [else-branch: 247 | p1_0@128@01 | live]
(push) ; 15
; [then-branch: 247 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 15
(push) ; 15
; [else-branch: 247 | p1_0@128@01]
(assert p1_0@128@01)
; [eval] !break1
(push) ; 16
; [then-branch: 248 | break1@110@01 | live]
; [else-branch: 248 | !(break1@110@01) | live]
(push) ; 17
; [then-branch: 248 | break1@110@01]
(assert break1@110@01)
(pop) ; 17
(push) ; 17
; [else-branch: 248 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=> p1_0@128@01 (and p1_0@128@01 (or (not break1@110@01) break1@110@01))))
(assert (or p1_0@128@01 (not p1_0@128@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (not (and p1_0@128@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and p1_0@128@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 249 | p1_0@128@01 && !(break1@110@01) && !(except1@103@01) | live]
; [else-branch: 249 | !(p1_0@128@01 && !(break1@110@01) && !(except1@103@01)) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 249 | p1_0@128@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_0@128@01 (and (not break1@110@01) (not except1@103@01))))
; [exec]
; _loop_measures := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [eval] p2_0 && (!break2 && !except2)
(push) ; 15
; [then-branch: 250 | !(p2_0@129@01) | live]
; [else-branch: 250 | p2_0@129@01 | live]
(push) ; 16
; [then-branch: 250 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 16
(push) ; 16
; [else-branch: 250 | p2_0@129@01]
(assert p2_0@129@01)
; [eval] !break2
(push) ; 17
; [then-branch: 251 | break2@111@01 | live]
; [else-branch: 251 | !(break2@111@01) | live]
(push) ; 18
; [then-branch: 251 | break2@111@01]
(assert break2@111@01)
(pop) ; 18
(push) ; 18
; [else-branch: 251 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=> p2_0@129@01 (and p2_0@129@01 (or (not break2@111@01) break2@111@01))))
(assert (or p2_0@129@01 (not p2_0@129@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and p2_0@129@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (and p2_0@129@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 252 | p2_0@129@01 && !(break2@111@01) && !(except2@105@01) | live]
; [else-branch: 252 | !(p2_0@129@01 && !(break2@111@01) && !(except2@105@01)) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 252 | p2_0@129@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_0@129@01 (and (not break2@111@01) (not except2@105@01))))
; [exec]
; _loop_measures_4 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; p1_1 := p1_0 && (!break1 && !except1 && bool___unbox__(b_4))
; [eval] p1_0 && (!break1 && !except1 && bool___unbox__(b_4))
(push) ; 16
; [then-branch: 253 | !(p1_0@128@01) | live]
; [else-branch: 253 | p1_0@128@01 | live]
(push) ; 17
; [then-branch: 253 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 17
(push) ; 17
; [else-branch: 253 | p1_0@128@01]
; [eval] !break1
(push) ; 18
; [then-branch: 254 | break1@110@01 | live]
; [else-branch: 254 | !(break1@110@01) | live]
(push) ; 19
; [then-branch: 254 | break1@110@01]
(assert break1@110@01)
(pop) ; 19
(push) ; 19
; [else-branch: 254 | !(break1@110@01)]
; [eval] !except1
(push) ; 20
; [then-branch: 255 | except1@103@01 | live]
; [else-branch: 255 | !(except1@103@01) | live]
(push) ; 21
; [then-branch: 255 | except1@103@01]
(assert except1@103@01)
(pop) ; 21
(push) ; 21
; [else-branch: 255 | !(except1@103@01)]
; [eval] bool___unbox__(b_4)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@26@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@26@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1@103@01)
  (and
    (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@26@01))))
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and
    (=>
      (not except1@103@01)
      (and
        (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b@26@01)))
    (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_0@128@01
  (and
    (=>
      (not break1@110@01)
      (and
        (=>
          (not except1@103@01)
          (and
            (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
            (bool___unbox__%precondition $Snap.unit b@26@01)))
        (or (not except1@103@01) except1@103@01)))
    (or (not break1@110@01) break1@110@01))))
(declare-const p1_1@130@01 Bool)
(assert (=
  p1_1@130@01
  (and
    p1_0@128@01
    (and
      (not break1@110@01)
      (and (not except1@103@01) (bool___unbox__ $Snap.unit b@26@01))))))
; [exec]
; p2_1 := p2_0 && (!break2 && !except2 && bool___unbox__(b_4_0))
; [eval] p2_0 && (!break2 && !except2 && bool___unbox__(b_4_0))
(push) ; 16
; [then-branch: 256 | !(p2_0@129@01) | live]
; [else-branch: 256 | p2_0@129@01 | live]
(push) ; 17
; [then-branch: 256 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 17
(push) ; 17
; [else-branch: 256 | p2_0@129@01]
; [eval] !break2
(push) ; 18
; [then-branch: 257 | break2@111@01 | live]
; [else-branch: 257 | !(break2@111@01) | live]
(push) ; 19
; [then-branch: 257 | break2@111@01]
(assert break2@111@01)
(pop) ; 19
(push) ; 19
; [else-branch: 257 | !(break2@111@01)]
; [eval] !except2
(push) ; 20
; [then-branch: 258 | except2@105@01 | live]
; [else-branch: 258 | !(except2@105@01) | live]
(push) ; 21
; [then-branch: 258 | except2@105@01]
(assert except2@105@01)
(pop) ; 21
(push) ; 21
; [else-branch: 258 | !(except2@105@01)]
; [eval] bool___unbox__(b_4_0)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_9@27@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@27@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2@105@01)
  (and
    (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_9@27@01))))
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and
    (=>
      (not except2@105@01)
      (and
        (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_9@27@01)))
    (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_0@129@01
  (and
    (=>
      (not break2@111@01)
      (and
        (=>
          (not except2@105@01)
          (and
            (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
            (bool___unbox__%precondition $Snap.unit b_9@27@01)))
        (or (not except2@105@01) except2@105@01)))
    (or (not break2@111@01) break2@111@01))))
(declare-const p2_1@131@01 Bool)
(assert (=
  p2_1@131@01
  (and
    p2_0@129@01
    (and
      (not break2@111@01)
      (and (not except2@105@01) (bool___unbox__ $Snap.unit b_9@27@01))))))
; [exec]
; p3 := p1_0 && (!break1 && !except1 && !bool___unbox__(b_4))
; [eval] p1_0 && (!break1 && !except1 && !bool___unbox__(b_4))
(push) ; 16
; [then-branch: 259 | !(p1_0@128@01) | live]
; [else-branch: 259 | p1_0@128@01 | live]
(push) ; 17
; [then-branch: 259 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 17
(push) ; 17
; [else-branch: 259 | p1_0@128@01]
; [eval] !break1
(push) ; 18
; [then-branch: 260 | break1@110@01 | live]
; [else-branch: 260 | !(break1@110@01) | live]
(push) ; 19
; [then-branch: 260 | break1@110@01]
(assert break1@110@01)
(pop) ; 19
(push) ; 19
; [else-branch: 260 | !(break1@110@01)]
; [eval] !except1
(push) ; 20
; [then-branch: 261 | except1@103@01 | live]
; [else-branch: 261 | !(except1@103@01) | live]
(push) ; 21
; [then-branch: 261 | except1@103@01]
(assert except1@103@01)
(pop) ; 21
(push) ; 21
; [else-branch: 261 | !(except1@103@01)]
; [eval] !bool___unbox__(b_4)
; [eval] bool___unbox__(b_4)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@26@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@26@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1@103@01)
  (and
    (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@26@01))))
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and
    (=>
      (not except1@103@01)
      (and
        (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b@26@01)))
    (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3@132@01 Bool)
(assert (=
  p3@132@01
  (and
    p1_0@128@01
    (and
      (not break1@110@01)
      (and (not except1@103@01) (not (bool___unbox__ $Snap.unit b@26@01)))))))
; [exec]
; p4 := p2_0 && (!break2 && !except2 && !bool___unbox__(b_4_0))
; [eval] p2_0 && (!break2 && !except2 && !bool___unbox__(b_4_0))
(push) ; 16
; [then-branch: 262 | !(p2_0@129@01) | live]
; [else-branch: 262 | p2_0@129@01 | live]
(push) ; 17
; [then-branch: 262 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 17
(push) ; 17
; [else-branch: 262 | p2_0@129@01]
; [eval] !break2
(push) ; 18
; [then-branch: 263 | break2@111@01 | live]
; [else-branch: 263 | !(break2@111@01) | live]
(push) ; 19
; [then-branch: 263 | break2@111@01]
(assert break2@111@01)
(pop) ; 19
(push) ; 19
; [else-branch: 263 | !(break2@111@01)]
; [eval] !except2
(push) ; 20
; [then-branch: 264 | except2@105@01 | live]
; [else-branch: 264 | !(except2@105@01) | live]
(push) ; 21
; [then-branch: 264 | except2@105@01]
(assert except2@105@01)
(pop) ; 21
(push) ; 21
; [else-branch: 264 | !(except2@105@01)]
; [eval] !bool___unbox__(b_4_0)
; [eval] bool___unbox__(b_4_0)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_9@27@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@27@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2@105@01)
  (and
    (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_9@27@01))))
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and
    (=>
      (not except2@105@01)
      (and
        (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_9@27@01)))
    (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4@133@01 Bool)
(assert (=
  p4@133@01
  (and
    p2_0@129@01
    (and
      (not break2@111@01)
      (and (not except2@105@01) (not (bool___unbox__ $Snap.unit b_9@27@01)))))))
; [exec]
; p1_2 := p1_1 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p1_1 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 265 | !(p1_1@130@01) | live]
; [else-branch: 265 | p1_1@130@01 | live]
(push) ; 17
; [then-branch: 265 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 17
(push) ; 17
; [else-branch: 265 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 18
; [then-branch: 266 | break1@110@01 | live]
; [else-branch: 266 | !(break1@110@01) | live]
(push) ; 19
; [then-branch: 266 | break1@110@01]
(assert break1@110@01)
(pop) ; 19
(push) ; 19
; [else-branch: 266 | !(break1@110@01)]
; [eval] !except1
(push) ; 20
; [then-branch: 267 | except1@103@01 | live]
; [else-branch: 267 | !(except1@103@01) | live]
(push) ; 21
; [then-branch: 267 | except1@103@01]
(assert except1@103@01)
(pop) ; 21
(push) ; 21
; [else-branch: 267 | !(except1@103@01)]
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> (not break1@110@01) (or (not except1@103@01) except1@103@01)))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_1@130@01
  (and
    p1_1@130@01
    (=> (not break1@110@01) (or (not except1@103@01) except1@103@01))
    (or (not break1@110@01) break1@110@01))))
(assert (or p1_1@130@01 (not p1_1@130@01)))
; [exec]
; p2_2 := p2_1 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_1 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 268 | !(p2_1@131@01) | live]
; [else-branch: 268 | p2_1@131@01 | live]
(push) ; 17
; [then-branch: 268 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 17
(push) ; 17
; [else-branch: 268 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 18
; [then-branch: 269 | break2@111@01 | live]
; [else-branch: 269 | !(break2@111@01) | live]
(push) ; 19
; [then-branch: 269 | break2@111@01]
(assert break2@111@01)
(pop) ; 19
(push) ; 19
; [else-branch: 269 | !(break2@111@01)]
; [eval] !except2
(push) ; 20
; [then-branch: 270 | except2@105@01 | live]
; [else-branch: 270 | !(except2@105@01) | live]
(push) ; 21
; [then-branch: 270 | except2@105@01]
(assert except2@105@01)
(pop) ; 21
(push) ; 21
; [else-branch: 270 | !(except2@105@01)]
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> (not break2@111@01) (or (not except2@105@01) except2@105@01)))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_1@131@01
  (and
    p2_1@131@01
    (=> (not break2@111@01) (or (not except2@105@01) except2@105@01))
    (or (not break2@111@01) break2@111@01))))
(assert (or p2_1@131@01 (not p2_1@131@01)))
; [exec]
; p3_0 := p1_1 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p1_1 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 271 | !(p1_1@130@01) | live]
; [else-branch: 271 | p1_1@130@01 | live]
(push) ; 17
; [then-branch: 271 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 17
(push) ; 17
; [else-branch: 271 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 18
; [then-branch: 272 | break1@110@01 | live]
; [else-branch: 272 | !(break1@110@01) | live]
(push) ; 19
; [then-branch: 272 | break1@110@01]
(assert break1@110@01)
(pop) ; 19
(push) ; 19
; [else-branch: 272 | !(break1@110@01)]
; [eval] !except1
(push) ; 20
; [then-branch: 273 | except1@103@01 | live]
; [else-branch: 273 | !(except1@103@01) | live]
(push) ; 21
; [then-branch: 273 | except1@103@01]
(assert except1@103@01)
(pop) ; 21
(push) ; 21
; [else-branch: 273 | !(except1@103@01)]
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> (not break1@110@01) (or (not except1@103@01) except1@103@01)))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3_0@134@01 Bool)
(assert (= p3_0@134@01 (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
; [exec]
; p4_0 := p2_1 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_1 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 274 | !(p2_1@131@01) | live]
; [else-branch: 274 | p2_1@131@01 | live]
(push) ; 17
; [then-branch: 274 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 17
(push) ; 17
; [else-branch: 274 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 18
; [then-branch: 275 | break2@111@01 | live]
; [else-branch: 275 | !(break2@111@01) | live]
(push) ; 19
; [then-branch: 275 | break2@111@01]
(assert break2@111@01)
(pop) ; 19
(push) ; 19
; [else-branch: 275 | !(break2@111@01)]
; [eval] !except2
(push) ; 20
; [then-branch: 276 | except2@105@01 | live]
; [else-branch: 276 | !(except2@105@01) | live]
(push) ; 21
; [then-branch: 276 | except2@105@01]
(assert except2@105@01)
(pop) ; 21
(push) ; 21
; [else-branch: 276 | !(except2@105@01)]
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> (not break2@111@01) (or (not except2@105@01) except2@105@01)))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4_0@135@01 Bool)
(assert (= p4_0@135@01 (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
; [eval] p1_2 && (!break1 && !except1)
; [then-branch: 277 | False | dead]
; [else-branch: 277 | True | live]
(push) ; 16
; [else-branch: 277 | True]
(pop) ; 16
; [eval] !(p1_2 && (!break1 && !except1))
; [eval] p1_2 && (!break1 && !except1)
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 278 | True | live]
; [else-branch: 278 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 278 | True]
; [eval] p2_2 && (!break2 && !except2)
; [then-branch: 279 | False | dead]
; [else-branch: 279 | True | live]
(push) ; 17
; [else-branch: 279 | True]
(pop) ; 17
; [eval] !(p2_2 && (!break2 && !except2))
; [eval] p2_2 && (!break2 && !except2)
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 280 | True | live]
; [else-branch: 280 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 280 | True]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 18
; [then-branch: 281 | !(p1_1@130@01) | live]
; [else-branch: 281 | p1_1@130@01 | live]
(push) ; 19
; [then-branch: 281 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 19
(push) ; 19
; [else-branch: 281 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 20
; [then-branch: 282 | break1@110@01 | live]
; [else-branch: 282 | !(break1@110@01) | live]
(push) ; 21
; [then-branch: 282 | break1@110@01]
(assert break1@110@01)
(pop) ; 21
(push) ; 21
; [else-branch: 282 | !(break1@110@01)]
; [eval] !except1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> p1_1@130@01 (and p1_1@130@01 (or (not break1@110@01) break1@110@01))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 283 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | live]
; [else-branch: 283 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | live]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 283 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))
; [exec]
; c_4.Container_value := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 19
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 19
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(declare-const Container_value@136@01 $Ref)
(assert (= Container_value@136@01 (__prim__int___box__ $Snap.unit 7)))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 19
; [then-branch: 284 | !(p2_1@131@01) | live]
; [else-branch: 284 | p2_1@131@01 | live]
(push) ; 20
; [then-branch: 284 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 20
(push) ; 20
; [else-branch: 284 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 21
; [then-branch: 285 | break2@111@01 | live]
; [else-branch: 285 | !(break2@111@01) | live]
(push) ; 22
; [then-branch: 285 | break2@111@01]
(assert break2@111@01)
(pop) ; 22
(push) ; 22
; [else-branch: 285 | !(break2@111@01)]
; [eval] !except2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=> p2_1@131@01 (and p2_1@131@01 (or (not break2@111@01) break2@111@01))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 286 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | live]
; [else-branch: 286 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 286 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))
; [exec]
; c_4_0.Container_valuep := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 20
(pop) ; 20
; Joined path conditions
(declare-const Container_valuep@137@01 $Ref)
(assert (= Container_valuep@137@01 (__prim__int___box__ $Snap.unit 7)))
; [exec]
; tmp := new()
(declare-const tmp@138@01 $Ref)
(assert (not (= tmp@138@01 $Ref.null)))
(assert (not (= tmp@138@01 tmp@123@01)))
(assert (not (= tmp@138@01 tmp1_2@66@01)))
(assert (not (= tmp@138@01 Exception_res@100@01)))
(assert (not (= tmp@138@01 Container_valuep@137@01)))
(assert (not (= tmp@138@01 c_9@25@01)))
(assert (not (= tmp@138@01 tmp2_0@63@01)))
(assert (not (= tmp@138@01 _cthread_157_0@19@01)))
(assert (not (= tmp@138@01 b_9@27@01)))
(assert (not (= tmp@138@01 Container_value@136@01)))
(assert (not (= tmp@138@01 tmp1_0@62@01)))
(assert (not (= tmp@138@01 Exception_res_2@101@01)))
(assert (not (= tmp@138@01 _err_0@104@01)))
(assert (not (= tmp@138@01 tmp2_2@67@01)))
(assert (not (= tmp@138@01 b@26@01)))
(assert (not (= tmp@138@01 _cthread_157@18@01)))
(assert (not (= tmp@138@01 _err@102@01)))
(assert (not (= tmp@138@01 c@24@01)))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 20
; [then-branch: 287 | !(p1_1@130@01) | live]
; [else-branch: 287 | p1_1@130@01 | live]
(push) ; 21
; [then-branch: 287 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 21
(push) ; 21
; [else-branch: 287 | p1_1@130@01]
; [eval] !break1
(push) ; 22
; [then-branch: 288 | break1@110@01 | live]
; [else-branch: 288 | !(break1@110@01) | live]
(push) ; 23
; [then-branch: 288 | break1@110@01]
(assert break1@110@01)
(pop) ; 23
(push) ; 23
; [else-branch: 288 | !(break1@110@01)]
; [eval] !except1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=> p1_1@130@01 (or (not break1@110@01) break1@110@01)))
(push) ; 20
(set-option :timeout 10)
(assert (not (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 289 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | live]
; [else-branch: 289 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 289 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))
; [exec]
; Exception_res := tmp
; [eval] p2_1 && (!break2 && !except2)
(push) ; 21
; [then-branch: 290 | !(p2_1@131@01) | live]
; [else-branch: 290 | p2_1@131@01 | live]
(push) ; 22
; [then-branch: 290 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 22
(push) ; 22
; [else-branch: 290 | p2_1@131@01]
; [eval] !break2
(push) ; 23
; [then-branch: 291 | break2@111@01 | live]
; [else-branch: 291 | !(break2@111@01) | live]
(push) ; 24
; [then-branch: 291 | break2@111@01]
(assert break2@111@01)
(pop) ; 24
(push) ; 24
; [else-branch: 291 | !(break2@111@01)]
; [eval] !except2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (=> p2_1@131@01 (or (not break2@111@01) break2@111@01)))
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 292 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | live]
; [else-branch: 292 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 292 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))
; [exec]
; Exception_res_2 := tmp
; [eval] p1_1 && (!break1 && !except1)
(push) ; 22
; [then-branch: 293 | !(p1_1@130@01) | live]
; [else-branch: 293 | p1_1@130@01 | live]
(push) ; 23
; [then-branch: 293 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 23
(push) ; 23
; [else-branch: 293 | p1_1@130@01]
; [eval] !break1
(push) ; 24
; [then-branch: 294 | break1@110@01 | live]
; [else-branch: 294 | !(break1@110@01) | live]
(push) ; 25
; [then-branch: 294 | break1@110@01]
(assert break1@110@01)
(pop) ; 25
(push) ; 25
; [else-branch: 294 | !(break1@110@01)]
; [eval] !except1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 295 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | live]
; [else-branch: 295 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 295 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))
; [exec]
; inhale typeof(Exception_res) == Exception()
(declare-const $t@139@01 $Snap)
(assert (= $t@139@01 $Snap.unit))
; [eval] typeof(Exception_res) == Exception()
; [eval] typeof(Exception_res)
; [eval] Exception()
(assert (= (typeof<PyType> tmp@138@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_1 && (!break2 && !except2)
(set-option :timeout 0)
(push) ; 23
; [then-branch: 296 | !(p2_1@131@01) | live]
; [else-branch: 296 | p2_1@131@01 | live]
(push) ; 24
; [then-branch: 296 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 24
(push) ; 24
; [else-branch: 296 | p2_1@131@01]
; [eval] !break2
(push) ; 25
; [then-branch: 297 | break2@111@01 | live]
; [else-branch: 297 | !(break2@111@01) | live]
(push) ; 26
; [then-branch: 297 | break2@111@01]
(assert break2@111@01)
(pop) ; 26
(push) ; 26
; [else-branch: 297 | !(break2@111@01)]
; [eval] !except2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 298 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | live]
; [else-branch: 298 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 298 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))
; [exec]
; inhale typeof(Exception_res_2) == Exception()
(declare-const $t@140@01 $Snap)
(assert (= $t@140@01 $Snap.unit))
; [eval] typeof(Exception_res_2) == Exception()
; [eval] typeof(Exception_res_2)
; [eval] Exception()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_1 && (!break1 && !except1)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 299 | !(p1_1@130@01) | live]
; [else-branch: 299 | p1_1@130@01 | live]
(push) ; 25
; [then-branch: 299 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 25
(push) ; 25
; [else-branch: 299 | p1_1@130@01]
; [eval] !break1
(push) ; 26
; [then-branch: 300 | break1@110@01 | live]
; [else-branch: 300 | !(break1@110@01) | live]
(push) ; 27
; [then-branch: 300 | break1@110@01]
(assert break1@110@01)
(pop) ; 27
(push) ; 27
; [else-branch: 300 | !(break1@110@01)]
; [eval] !except1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 301 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | live]
; [else-branch: 301 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 301 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))
; [exec]
; _err := Exception_res
; [exec]
; except1 := true
; [eval] p2_1 && (!break2 && !except2)
(push) ; 25
; [then-branch: 302 | !(p2_1@131@01) | live]
; [else-branch: 302 | p2_1@131@01 | live]
(push) ; 26
; [then-branch: 302 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 26
(push) ; 26
; [else-branch: 302 | p2_1@131@01]
; [eval] !break2
(push) ; 27
; [then-branch: 303 | break2@111@01 | live]
; [else-branch: 303 | !(break2@111@01) | live]
(push) ; 28
; [then-branch: 303 | break2@111@01]
(assert break2@111@01)
(pop) ; 28
(push) ; 28
; [else-branch: 303 | !(break2@111@01)]
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 304 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | live]
; [else-branch: 304 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 304 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))
; [exec]
; _err_0 := Exception_res_2
; [exec]
; except2 := true
; [exec]
; p1_3 := p3 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p3 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 305 | !(p3@132@01) | live]
; [else-branch: 305 | p3@132@01 | live]
(push) ; 27
; [then-branch: 305 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 27
(push) ; 27
; [else-branch: 305 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 28
; [then-branch: 306 | break1@110@01 | live]
; [else-branch: 306 | !(break1@110@01) | live]
(push) ; 29
; [then-branch: 306 | break1@110@01]
(assert break1@110@01)
(pop) ; 29
(push) ; 29
; [else-branch: 306 | !(break1@110@01)]
; [eval] !except1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=> p3@132@01 (and p3@132@01 (or (not break1@110@01) break1@110@01))))
(assert (or p3@132@01 (not p3@132@01)))
; [exec]
; p2_3 := p4 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p4 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 307 | !(p4@133@01) | live]
; [else-branch: 307 | p4@133@01 | live]
(push) ; 27
; [then-branch: 307 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 27
(push) ; 27
; [else-branch: 307 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 28
; [then-branch: 308 | break2@111@01 | live]
; [else-branch: 308 | !(break2@111@01) | live]
(push) ; 29
; [then-branch: 308 | break2@111@01]
(assert break2@111@01)
(pop) ; 29
(push) ; 29
; [else-branch: 308 | !(break2@111@01)]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=> p4@133@01 (and p4@133@01 (or (not break2@111@01) break2@111@01))))
(assert (or p4@133@01 (not p4@133@01)))
; [exec]
; p3_1 := p3 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p3 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 309 | !(p3@132@01) | live]
; [else-branch: 309 | p3@132@01 | live]
(push) ; 27
; [then-branch: 309 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 27
(push) ; 27
; [else-branch: 309 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 28
; [then-branch: 310 | break1@110@01 | live]
; [else-branch: 310 | !(break1@110@01) | live]
(push) ; 29
; [then-branch: 310 | break1@110@01]
(assert break1@110@01)
(pop) ; 29
(push) ; 29
; [else-branch: 310 | !(break1@110@01)]
; [eval] !except1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [exec]
; p4_1 := p4 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p4 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 311 | !(p4@133@01) | live]
; [else-branch: 311 | p4@133@01 | live]
(push) ; 27
; [then-branch: 311 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 27
(push) ; 27
; [else-branch: 311 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 28
; [then-branch: 312 | break2@111@01 | live]
; [else-branch: 312 | !(break2@111@01) | live]
(push) ; 29
; [then-branch: 312 | break2@111@01]
(assert break2@111@01)
(pop) ; 29
(push) ; 29
; [else-branch: 312 | !(break2@111@01)]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [eval] p1_3 && (!break1 && !except1)
; [then-branch: 313 | False | dead]
; [else-branch: 313 | True | live]
(push) ; 26
; [else-branch: 313 | True]
(pop) ; 26
; [eval] !(p1_3 && (!break1 && !except1))
; [eval] p1_3 && (!break1 && !except1)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 314 | True | live]
; [else-branch: 314 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 314 | True]
; [eval] p2_3 && (!break2 && !except2)
; [then-branch: 315 | False | dead]
; [else-branch: 315 | True | live]
(push) ; 27
; [else-branch: 315 | True]
(pop) ; 27
; [eval] !(p2_3 && (!break2 && !except2))
; [eval] p2_3 && (!break2 && !except2)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 316 | True | live]
; [else-branch: 316 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 316 | True]
; [eval] p3 && (!break1 && !except1)
(push) ; 28
; [then-branch: 317 | !(p3@132@01) | live]
; [else-branch: 317 | p3@132@01 | live]
(push) ; 29
; [then-branch: 317 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 29
(push) ; 29
; [else-branch: 317 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 30
; [then-branch: 318 | break1@110@01 | live]
; [else-branch: 318 | !(break1@110@01) | live]
(push) ; 31
; [then-branch: 318 | break1@110@01]
(assert break1@110@01)
(pop) ; 31
(push) ; 31
; [else-branch: 318 | !(break1@110@01)]
; [eval] !except1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 319 | False | dead]
; [else-branch: 319 | True | live]
(push) ; 28
; [else-branch: 319 | True]
(pop) ; 28
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 28
; [then-branch: 320 | !(p3@132@01) | live]
; [else-branch: 320 | p3@132@01 | live]
(push) ; 29
; [then-branch: 320 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 29
(push) ; 29
; [else-branch: 320 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 30
; [then-branch: 321 | break1@110@01 | live]
; [else-branch: 321 | !(break1@110@01) | live]
(push) ; 31
; [then-branch: 321 | break1@110@01]
(assert break1@110@01)
(pop) ; 31
(push) ; 31
; [else-branch: 321 | !(break1@110@01)]
; [eval] !except1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 322 | True | live]
; [else-branch: 322 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 322 | True]
; [eval] p4 && (!break2 && !except2)
(push) ; 29
; [then-branch: 323 | !(p4@133@01) | live]
; [else-branch: 323 | p4@133@01 | live]
(push) ; 30
; [then-branch: 323 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 30
(push) ; 30
; [else-branch: 323 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 31
; [then-branch: 324 | break2@111@01 | live]
; [else-branch: 324 | !(break2@111@01) | live]
(push) ; 32
; [then-branch: 324 | break2@111@01]
(assert break2@111@01)
(pop) ; 32
(push) ; 32
; [else-branch: 324 | !(break2@111@01)]
; [eval] !except2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 325 | False | dead]
; [else-branch: 325 | True | live]
(push) ; 29
; [else-branch: 325 | True]
(pop) ; 29
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 29
; [then-branch: 326 | !(p4@133@01) | live]
; [else-branch: 326 | p4@133@01 | live]
(push) ; 30
; [then-branch: 326 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 30
(push) ; 30
; [else-branch: 326 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 31
; [then-branch: 327 | break2@111@01 | live]
; [else-branch: 327 | !(break2@111@01) | live]
(push) ; 32
; [then-branch: 327 | break2@111@01]
(assert break2@111@01)
(pop) ; 32
(push) ; 32
; [else-branch: 327 | !(break2@111@01)]
; [eval] !except2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 328 | True | live]
; [else-branch: 328 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 328 | True]
; [eval] p3 && (!break1 && !except1)
(push) ; 30
; [then-branch: 329 | !(p3@132@01) | live]
; [else-branch: 329 | p3@132@01 | live]
(push) ; 31
; [then-branch: 329 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 31
(push) ; 31
; [else-branch: 329 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 32
; [then-branch: 330 | break1@110@01 | live]
; [else-branch: 330 | !(break1@110@01) | live]
(push) ; 33
; [then-branch: 330 | break1@110@01]
(assert break1@110@01)
(pop) ; 33
(push) ; 33
; [else-branch: 330 | !(break1@110@01)]
; [eval] !except1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 331 | False | dead]
; [else-branch: 331 | True | live]
(push) ; 30
; [else-branch: 331 | True]
(pop) ; 30
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 30
; [then-branch: 332 | !(p3@132@01) | live]
; [else-branch: 332 | p3@132@01 | live]
(push) ; 31
; [then-branch: 332 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 31
(push) ; 31
; [else-branch: 332 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 32
; [then-branch: 333 | break1@110@01 | live]
; [else-branch: 333 | !(break1@110@01) | live]
(push) ; 33
; [then-branch: 333 | break1@110@01]
(assert break1@110@01)
(pop) ; 33
(push) ; 33
; [else-branch: 333 | !(break1@110@01)]
; [eval] !except1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 334 | True | live]
; [else-branch: 334 | False | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 334 | True]
; [eval] p4 && (!break2 && !except2)
(push) ; 31
; [then-branch: 335 | !(p4@133@01) | live]
; [else-branch: 335 | p4@133@01 | live]
(push) ; 32
; [then-branch: 335 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 32
(push) ; 32
; [else-branch: 335 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 33
; [then-branch: 336 | break2@111@01 | live]
; [else-branch: 336 | !(break2@111@01) | live]
(push) ; 34
; [then-branch: 336 | break2@111@01]
(assert break2@111@01)
(pop) ; 34
(push) ; 34
; [else-branch: 336 | !(break2@111@01)]
; [eval] !except2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 337 | False | dead]
; [else-branch: 337 | True | live]
(push) ; 31
; [else-branch: 337 | True]
(pop) ; 31
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 31
; [then-branch: 338 | !(p4@133@01) | live]
; [else-branch: 338 | p4@133@01 | live]
(push) ; 32
; [then-branch: 338 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 32
(push) ; 32
; [else-branch: 338 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 33
; [then-branch: 339 | break2@111@01 | live]
; [else-branch: 339 | !(break2@111@01) | live]
(push) ; 34
; [then-branch: 339 | break2@111@01]
(assert break2@111@01)
(pop) ; 34
(push) ; 34
; [else-branch: 339 | !(break2@111@01)]
; [eval] !except2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 340 | True | live]
; [else-branch: 340 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 340 | True]
; [eval] p1_0 && (!break1 && !except1)
(push) ; 32
; [then-branch: 341 | !(p1_0@128@01) | live]
; [else-branch: 341 | p1_0@128@01 | live]
(push) ; 33
; [then-branch: 341 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 33
(push) ; 33
; [else-branch: 341 | p1_0@128@01]
; [eval] !break1
(push) ; 34
; [then-branch: 342 | break1@110@01 | live]
; [else-branch: 342 | !(break1@110@01) | live]
(push) ; 35
; [then-branch: 342 | break1@110@01]
(assert break1@110@01)
(pop) ; 35
(push) ; 35
; [else-branch: 342 | !(break1@110@01)]
; [eval] !except1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (=> p1_0@128@01 (or (not break1@110@01) break1@110@01)))
; [then-branch: 343 | False | dead]
; [else-branch: 343 | True | live]
(push) ; 32
; [else-branch: 343 | True]
(pop) ; 32
; [eval] !(p1_0 && (!break1 && !except1))
; [eval] p1_0 && (!break1 && !except1)
(push) ; 32
; [then-branch: 344 | !(p1_0@128@01) | live]
; [else-branch: 344 | p1_0@128@01 | live]
(push) ; 33
; [then-branch: 344 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 33
(push) ; 33
; [else-branch: 344 | p1_0@128@01]
; [eval] !break1
(push) ; 34
; [then-branch: 345 | break1@110@01 | live]
; [else-branch: 345 | !(break1@110@01) | live]
(push) ; 35
; [then-branch: 345 | break1@110@01]
(assert break1@110@01)
(pop) ; 35
(push) ; 35
; [else-branch: 345 | !(break1@110@01)]
; [eval] !except1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 346 | True | live]
; [else-branch: 346 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 346 | True]
; [eval] p2_0 && (!break2 && !except2)
(push) ; 33
; [then-branch: 347 | !(p2_0@129@01) | live]
; [else-branch: 347 | p2_0@129@01 | live]
(push) ; 34
; [then-branch: 347 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 34
(push) ; 34
; [else-branch: 347 | p2_0@129@01]
; [eval] !break2
(push) ; 35
; [then-branch: 348 | break2@111@01 | live]
; [else-branch: 348 | !(break2@111@01) | live]
(push) ; 36
; [then-branch: 348 | break2@111@01]
(assert break2@111@01)
(pop) ; 36
(push) ; 36
; [else-branch: 348 | !(break2@111@01)]
; [eval] !except2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (=> p2_0@129@01 (or (not break2@111@01) break2@111@01)))
; [then-branch: 349 | False | dead]
; [else-branch: 349 | True | live]
(push) ; 33
; [else-branch: 349 | True]
(pop) ; 33
; [eval] !(p2_0 && (!break2 && !except2))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 33
; [then-branch: 350 | !(p2_0@129@01) | live]
; [else-branch: 350 | p2_0@129@01 | live]
(push) ; 34
; [then-branch: 350 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 34
(push) ; 34
; [else-branch: 350 | p2_0@129@01]
; [eval] !break2
(push) ; 35
; [then-branch: 351 | break2@111@01 | live]
; [else-branch: 351 | !(break2@111@01) | live]
(push) ; 36
; [then-branch: 351 | break2@111@01]
(assert break2@111@01)
(pop) ; 36
(push) ; 36
; [else-branch: 351 | !(break2@111@01)]
; [eval] !except2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 352 | True | live]
; [else-branch: 352 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 352 | True]
; [exec]
; assert (p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true) &&
;   (p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true)
; [eval] p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true
; [eval] p1_0 && (!break1 && !except1)
(push) ; 34
; [then-branch: 353 | !(p1_0@128@01) | live]
; [else-branch: 353 | p1_0@128@01 | live]
(push) ; 35
; [then-branch: 353 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 35
(push) ; 35
; [else-branch: 353 | p1_0@128@01]
; [eval] !break1
(push) ; 36
; [then-branch: 354 | break1@110@01 | live]
; [else-branch: 354 | !(break1@110@01) | live]
(push) ; 37
; [then-branch: 354 | break1@110@01]
(assert break1@110@01)
(pop) ; 37
(push) ; 37
; [else-branch: 354 | !(break1@110@01)]
; [eval] !except1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 355 | False | dead]
; [else-branch: 355 | True | live]
(push) ; 35
; [else-branch: 355 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 356 | !(p2_0@129@01) | live]
; [else-branch: 356 | p2_0@129@01 | live]
(push) ; 35
; [then-branch: 356 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 35
(push) ; 35
; [else-branch: 356 | p2_0@129@01]
; [eval] !break2
(push) ; 36
; [then-branch: 357 | break2@111@01 | live]
; [else-branch: 357 | !(break2@111@01) | live]
(push) ; 37
; [then-branch: 357 | break2@111@01]
(assert break2@111@01)
(pop) ; 37
(push) ; 37
; [else-branch: 357 | !(break2@111@01)]
; [eval] !except2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 358 | False | dead]
; [else-branch: 358 | True | live]
(push) ; 35
; [else-branch: 358 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 34
; [then-branch: 359 | !(p1@16@01) | live]
; [else-branch: 359 | p1@16@01 | live]
(push) ; 35
; [then-branch: 359 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 35
(push) ; 35
; [else-branch: 359 | p1@16@01]
(assert p1@16@01)
; [eval] !bypass1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 360 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 360 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 360 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 34
; [then-branch: 361 | !(p2@17@01) | live]
; [else-branch: 361 | p2@17@01 | live]
(push) ; 35
; [then-branch: 361 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 35
(push) ; 35
; [else-branch: 361 | p2@17@01]
; [eval] !bypass2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 362 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 362 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 362 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1
(push) ; 34
; [then-branch: 363 | !(p1@16@01) | live]
; [else-branch: 363 | p1@16@01 | live]
(push) ; 35
; [then-branch: 363 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 35
(push) ; 35
; [else-branch: 363 | p1@16@01]
; [eval] !bypass1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 364 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 364 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 364 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2
(push) ; 35
; [then-branch: 365 | !(p2@17@01) | live]
; [else-branch: 365 | p2@17@01 | live]
(push) ; 36
; [then-branch: 365 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 36
(push) ; 36
; [else-branch: 365 | p2@17@01]
; [eval] !bypass2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 366 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 366 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 366 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1 ==> issubtype(typeof(c_4.Container_value), int())
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 367 | !(p1@16@01) | live]
; [else-branch: 367 | p1@16@01 | live]
(push) ; 37
; [then-branch: 367 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 367 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 368 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 368 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 368 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] issubtype(typeof(c_4.Container_value), int())
; [eval] typeof(c_4.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
(push) ; 36
(assert (not (=>
  (and p1@16@01 (not bypass1@83@01))
  (issubtype<Bool> (typeof<PyType> Container_value@136@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (issubtype<Bool> (typeof<PyType> Container_value@136@01) (as int<PyType>  PyType))))
; [eval] p2 && !bypass2 ==> issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 369 | !(p2@17@01) | live]
; [else-branch: 369 | p2@17@01 | live]
(push) ; 37
; [then-branch: 369 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 369 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 370 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 370 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 370 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] typeof(c_4_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
(push) ; 36
(assert (not (=>
  (and p2@17@01 (not bypass2@84@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@137@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@137@01) (as int<PyType>  PyType))))
; [eval] p1 && !bypass1 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 371 | !(p1@16@01) | live]
; [else-branch: 371 | p1@16@01 | live]
(push) ; 37
; [then-branch: 371 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 371 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 372 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 372 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 372 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] !idle1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 373 | True | live]
; [else-branch: 373 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 373 | True]
; [eval] _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before@112@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before@112@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 374 | _loop_check_before@112@01 | live]
; [else-branch: 374 | !(_loop_check_before@112@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 374 | _loop_check_before@112@01]
(assert _loop_check_before@112@01)
; [eval] _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 375 | False | live]
; [else-branch: 375 | True | live]
(push) ; 43
; [then-branch: 375 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 375 | True]
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 44
; [then-branch: 376 | False | live]
; [else-branch: 376 | True | live]
(push) ; 45
; [then-branch: 376 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 376 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 46
; [then-branch: 377 | False | live]
; [else-branch: 377 | True | live]
(push) ; 47
; [then-branch: 377 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 377 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 48
; [then-branch: 378 | False | live]
; [else-branch: 378 | True | live]
(push) ; 49
; [then-branch: 378 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 378 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 379 | False | live]
; [else-branch: 379 | True | live]
(push) ; 51
; [then-branch: 379 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 379 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 374 | !(_loop_check_before@112@01)]
(assert (not _loop_check_before@112@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before@112@01) _loop_check_before@112@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before@112@01) _loop_check_before@112@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (and
    p1@16@01
    (not bypass1@83@01)
    (or (not _loop_check_before@112@01) _loop_check_before@112@01))))
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 380 | !(p2@17@01) | live]
; [else-branch: 380 | p2@17@01 | live]
(push) ; 37
; [then-branch: 380 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 380 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 381 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 381 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 381 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] !idle2
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 382 | True | live]
; [else-branch: 382 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 382 | True]
; [eval] _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_4@113@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_4@113@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 383 | _loop_check_before_4@113@01 | live]
; [else-branch: 383 | !(_loop_check_before_4@113@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 383 | _loop_check_before_4@113@01]
(assert _loop_check_before_4@113@01)
; [eval] _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 384 | False | live]
; [else-branch: 384 | True | live]
(push) ; 43
; [then-branch: 384 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 384 | True]
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none
; [eval] perm(MustTerminate_0(_cthread_157_0))
(push) ; 44
; [then-branch: 385 | False | live]
; [else-branch: 385 | True | live]
(push) ; 45
; [then-branch: 385 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 385 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 46
; [then-branch: 386 | False | live]
; [else-branch: 386 | True | live]
(push) ; 47
; [then-branch: 386 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 386 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 48
; [then-branch: 387 | False | live]
; [else-branch: 387 | True | live]
(push) ; 49
; [then-branch: 387 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 387 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 388 | False | live]
; [else-branch: 388 | True | live]
(push) ; 51
; [then-branch: 388 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 388 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 383 | !(_loop_check_before_4@113@01)]
(assert (not _loop_check_before_4@113@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (and
    p2@17@01
    (not bypass2@84@01)
    (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))))
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 389 | !(p1@16@01) | live]
; [else-branch: 389 | p1@16@01 | live]
(push) ; 37
; [then-branch: 389 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 389 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 390 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 390 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 390 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 391 | True | live]
; [else-branch: 391 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 391 | True]
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before@112@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before@112@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 392 | !(_loop_check_before@112@01) | live]
; [else-branch: 392 | _loop_check_before@112@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 392 | !(_loop_check_before@112@01)]
(assert (not _loop_check_before@112@01))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 42
; [then-branch: 393 | False | live]
; [else-branch: 393 | True | live]
(push) ; 43
; [then-branch: 393 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 393 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 44
; [then-branch: 394 | False | live]
; [else-branch: 394 | True | live]
(push) ; 45
; [then-branch: 394 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 394 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 395 | False | live]
; [else-branch: 395 | True | live]
(push) ; 47
; [then-branch: 395 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 395 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 392 | _loop_check_before@112@01]
(assert _loop_check_before@112@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before@112@01 (not _loop_check_before@112@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before@112@01 (not _loop_check_before@112@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (and
    p1@16@01
    (not bypass1@83@01)
    (or _loop_check_before@112@01 (not _loop_check_before@112@01)))))
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 396 | !(p2@17@01) | live]
; [else-branch: 396 | p2@17@01 | live]
(push) ; 37
; [then-branch: 396 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 396 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 397 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 397 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 397 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !idle2
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 398 | True | live]
; [else-branch: 398 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 398 | True]
; [eval] !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_4
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_4@113@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_4@113@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 399 | !(_loop_check_before_4@113@01) | live]
; [else-branch: 399 | _loop_check_before_4@113@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 399 | !(_loop_check_before_4@113@01)]
(assert (not _loop_check_before_4@113@01))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 42
; [then-branch: 400 | False | live]
; [else-branch: 400 | True | live]
(push) ; 43
; [then-branch: 400 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 400 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 44
; [then-branch: 401 | False | live]
; [else-branch: 401 | True | live]
(push) ; 45
; [then-branch: 401 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 401 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 402 | False | live]
; [else-branch: 402 | True | live]
(push) ; 47
; [then-branch: 402 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 402 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 399 | _loop_check_before_4@113@01]
(assert _loop_check_before_4@113@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (and
    p2@17@01
    (not bypass2@84@01)
    (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))))
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] bypass1 ==> tmp1_1 == except1
(push) ; 36
; [then-branch: 403 | bypass1@83@01 | dead]
; [else-branch: 403 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 403 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_4 == break1
(push) ; 36
; [then-branch: 404 | bypass1@83@01 | dead]
; [else-branch: 404 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 404 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_0 == Exception_res
(push) ; 36
; [then-branch: 405 | bypass1@83@01 | dead]
; [else-branch: 405 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 405 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_2 == _err
(push) ; 36
; [then-branch: 406 | bypass1@83@01 | dead]
; [else-branch: 406 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 406 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_3 == _loop_check_before
(push) ; 36
; [then-branch: 407 | bypass1@83@01 | dead]
; [else-branch: 407 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 407 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1 == _loop_measures
(push) ; 36
; [then-branch: 408 | bypass1@83@01 | dead]
; [else-branch: 408 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 408 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2 == _loop_measures_4
(push) ; 36
; [then-branch: 409 | bypass2@84@01 | dead]
; [else-branch: 409 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 409 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_1 == except2
(push) ; 36
; [then-branch: 410 | bypass2@84@01 | dead]
; [else-branch: 410 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 410 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_3 == _loop_check_before_4
(push) ; 36
; [then-branch: 411 | bypass2@84@01 | dead]
; [else-branch: 411 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 411 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_4 == break2
(push) ; 36
; [then-branch: 412 | bypass2@84@01 | dead]
; [else-branch: 412 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 412 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_2 == _err_0
(push) ; 36
; [then-branch: 413 | bypass2@84@01 | dead]
; [else-branch: 413 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 413 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_0 == Exception_res_2
(push) ; 36
; [then-branch: 414 | bypass2@84@01 | dead]
; [else-branch: 414 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 414 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 25
; [then-branch: 415 | !(p2_1@131@01) | live]
; [else-branch: 415 | p2_1@131@01 | live]
(push) ; 26
; [then-branch: 415 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 26
(push) ; 26
; [else-branch: 415 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 27
; [then-branch: 416 | break2@111@01 | live]
; [else-branch: 416 | !(break2@111@01) | live]
(push) ; 28
; [then-branch: 416 | break2@111@01]
(assert break2@111@01)
(pop) ; 28
(push) ; 28
; [else-branch: 416 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 417 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | dead]
; [else-branch: 417 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 417 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))
(pop) ; 25
(pop) ; 24
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 24
; [then-branch: 418 | !(p1_1@130@01) | live]
; [else-branch: 418 | p1_1@130@01 | live]
(push) ; 25
; [then-branch: 418 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 25
(push) ; 25
; [else-branch: 418 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 26
; [then-branch: 419 | break1@110@01 | live]
; [else-branch: 419 | !(break1@110@01) | live]
(push) ; 27
; [then-branch: 419 | break1@110@01]
(assert break1@110@01)
(pop) ; 27
(push) ; 27
; [else-branch: 419 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 420 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | dead]
; [else-branch: 420 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 420 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))
(pop) ; 24
(pop) ; 23
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 23
; [then-branch: 421 | !(p2_1@131@01) | live]
; [else-branch: 421 | p2_1@131@01 | live]
(push) ; 24
; [then-branch: 421 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 24
(push) ; 24
; [else-branch: 421 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 25
; [then-branch: 422 | break2@111@01 | live]
; [else-branch: 422 | !(break2@111@01) | live]
(push) ; 26
; [then-branch: 422 | break2@111@01]
(assert break2@111@01)
(pop) ; 26
(push) ; 26
; [else-branch: 422 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 423 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | dead]
; [else-branch: 423 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 423 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))
(pop) ; 23
(pop) ; 22
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 22
; [then-branch: 424 | !(p1_1@130@01) | live]
; [else-branch: 424 | p1_1@130@01 | live]
(push) ; 23
; [then-branch: 424 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 23
(push) ; 23
; [else-branch: 424 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 24
; [then-branch: 425 | break1@110@01 | live]
; [else-branch: 425 | !(break1@110@01) | live]
(push) ; 25
; [then-branch: 425 | break1@110@01]
(assert break1@110@01)
(pop) ; 25
(push) ; 25
; [else-branch: 425 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 426 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | dead]
; [else-branch: 426 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 426 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))
(pop) ; 22
(pop) ; 21
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 21
; [then-branch: 427 | !(p2_1@131@01) | live]
; [else-branch: 427 | p2_1@131@01 | live]
(push) ; 22
; [then-branch: 427 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 22
(push) ; 22
; [else-branch: 427 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 23
; [then-branch: 428 | break2@111@01 | live]
; [else-branch: 428 | !(break2@111@01) | live]
(push) ; 24
; [then-branch: 428 | break2@111@01]
(assert break2@111@01)
(pop) ; 24
(push) ; 24
; [else-branch: 428 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 429 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | dead]
; [else-branch: 429 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | live]
(set-option :timeout 0)
(push) ; 21
; [else-branch: 429 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))
(pop) ; 21
(pop) ; 20
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 20
; [then-branch: 430 | !(p1_1@130@01) | live]
; [else-branch: 430 | p1_1@130@01 | live]
(push) ; 21
; [then-branch: 430 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 21
(push) ; 21
; [else-branch: 430 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 22
; [then-branch: 431 | break1@110@01 | live]
; [else-branch: 431 | !(break1@110@01) | live]
(push) ; 23
; [then-branch: 431 | break1@110@01]
(assert break1@110@01)
(pop) ; 23
(push) ; 23
; [else-branch: 431 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 432 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | dead]
; [else-branch: 432 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 432 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 286 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01))]
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(pop) ; 19
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 19
; [then-branch: 433 | !(p2_1@131@01) | live]
; [else-branch: 433 | p2_1@131@01 | live]
(push) ; 20
; [then-branch: 433 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 20
(push) ; 20
; [else-branch: 433 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 21
; [then-branch: 434 | break2@111@01 | live]
; [else-branch: 434 | !(break2@111@01) | live]
(push) ; 22
; [then-branch: 434 | break2@111@01]
(assert break2@111@01)
(pop) ; 22
(push) ; 22
; [else-branch: 434 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 435 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 435 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 435 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01))]
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
; [exec]
; tmp := new()
(declare-const tmp@141@01 $Ref)
(assert (not (= tmp@141@01 $Ref.null)))
(assert (not (= tmp@141@01 tmp@123@01)))
(assert (not (= tmp@141@01 tmp1_2@66@01)))
(assert (not (= tmp@141@01 Exception_res@100@01)))
(assert (not (= tmp@141@01 c_9@25@01)))
(assert (not (= tmp@141@01 tmp2_0@63@01)))
(assert (not (= tmp@141@01 _cthread_157_0@19@01)))
(assert (not (= tmp@141@01 b_9@27@01)))
(assert (not (= tmp@141@01 Container_value@136@01)))
(assert (not (= tmp@141@01 tmp1_0@62@01)))
(assert (not (= tmp@141@01 Exception_res_2@101@01)))
(assert (not (= tmp@141@01 _err_0@104@01)))
(assert (not (= tmp@141@01 tmp2_2@67@01)))
(assert (not (= tmp@141@01 b@26@01)))
(assert (not (= tmp@141@01 _cthread_157@18@01)))
(assert (not (= tmp@141@01 _err@102@01)))
(assert (not (= tmp@141@01 c@24@01)))
(assert (not
  (=
    tmp@141@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 20
; [then-branch: 436 | !(p1_1@130@01) | live]
; [else-branch: 436 | p1_1@130@01 | live]
(push) ; 21
; [then-branch: 436 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 21
(push) ; 21
; [else-branch: 436 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 22
; [then-branch: 437 | break1@110@01 | live]
; [else-branch: 437 | !(break1@110@01) | live]
(push) ; 23
; [then-branch: 437 | break1@110@01]
(assert break1@110@01)
(pop) ; 23
(push) ; 23
; [else-branch: 437 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 438 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | live]
; [else-branch: 438 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 438 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))
; [exec]
; Exception_res := tmp
; [eval] p2_1 && (!break2 && !except2)
(push) ; 21
; [then-branch: 439 | !(p2_1@131@01) | live]
; [else-branch: 439 | p2_1@131@01 | live]
(push) ; 22
; [then-branch: 439 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 22
(push) ; 22
; [else-branch: 439 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 23
; [then-branch: 440 | break2@111@01 | live]
; [else-branch: 440 | !(break2@111@01) | live]
(push) ; 24
; [then-branch: 440 | break2@111@01]
(assert break2@111@01)
(pop) ; 24
(push) ; 24
; [else-branch: 440 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 441 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 441 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | live]
(push) ; 21
; [else-branch: 441 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01))]
(pop) ; 21
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 21
; [then-branch: 442 | !(p2_1@131@01) | live]
; [else-branch: 442 | p2_1@131@01 | live]
(push) ; 22
; [then-branch: 442 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 22
(push) ; 22
; [else-branch: 442 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 23
; [then-branch: 443 | break2@111@01 | live]
; [else-branch: 443 | !(break2@111@01) | live]
(push) ; 24
; [then-branch: 443 | break2@111@01]
(assert break2@111@01)
(pop) ; 24
(push) ; 24
; [else-branch: 443 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 444 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 444 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 444 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01))]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 22
; [then-branch: 445 | !(p1_1@130@01) | live]
; [else-branch: 445 | p1_1@130@01 | live]
(push) ; 23
; [then-branch: 445 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 23
(push) ; 23
; [else-branch: 445 | p1_1@130@01]
; [eval] !break1
(push) ; 24
; [then-branch: 446 | break1@110@01 | live]
; [else-branch: 446 | !(break1@110@01) | live]
(push) ; 25
; [then-branch: 446 | break1@110@01]
(assert break1@110@01)
(pop) ; 25
(push) ; 25
; [else-branch: 446 | !(break1@110@01)]
; [eval] !except1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (=> p1_1@130@01 (or (not break1@110@01) break1@110@01)))
(push) ; 22
(set-option :timeout 10)
(assert (not (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 447 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | live]
; [else-branch: 447 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 447 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))
; [exec]
; inhale typeof(Exception_res) == Exception()
(declare-const $t@142@01 $Snap)
(assert (= $t@142@01 $Snap.unit))
; [eval] typeof(Exception_res) == Exception()
; [eval] typeof(Exception_res)
; [eval] Exception()
(assert (= (typeof<PyType> tmp@141@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_1 && (!break2 && !except2)
(set-option :timeout 0)
(push) ; 23
; [then-branch: 448 | !(p2_1@131@01) | live]
; [else-branch: 448 | p2_1@131@01 | live]
(push) ; 24
; [then-branch: 448 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 24
(push) ; 24
; [else-branch: 448 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 25
; [then-branch: 449 | break2@111@01 | live]
; [else-branch: 449 | !(break2@111@01) | live]
(push) ; 26
; [then-branch: 449 | break2@111@01]
(assert break2@111@01)
(pop) ; 26
(push) ; 26
; [else-branch: 449 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 450 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 450 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | live]
(push) ; 23
; [else-branch: 450 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01))]
(pop) ; 23
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 23
; [then-branch: 451 | !(p2_1@131@01) | live]
; [else-branch: 451 | p2_1@131@01 | live]
(push) ; 24
; [then-branch: 451 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 24
(push) ; 24
; [else-branch: 451 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 25
; [then-branch: 452 | break2@111@01 | live]
; [else-branch: 452 | !(break2@111@01) | live]
(push) ; 26
; [then-branch: 452 | break2@111@01]
(assert break2@111@01)
(pop) ; 26
(push) ; 26
; [else-branch: 452 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 453 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 453 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 453 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01))]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 24
; [then-branch: 454 | !(p1_1@130@01) | live]
; [else-branch: 454 | p1_1@130@01 | live]
(push) ; 25
; [then-branch: 454 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 25
(push) ; 25
; [else-branch: 454 | p1_1@130@01]
; [eval] !break1
(push) ; 26
; [then-branch: 455 | break1@110@01 | live]
; [else-branch: 455 | !(break1@110@01) | live]
(push) ; 27
; [then-branch: 455 | break1@110@01]
(assert break1@110@01)
(pop) ; 27
(push) ; 27
; [else-branch: 455 | !(break1@110@01)]
; [eval] !except1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 456 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | live]
; [else-branch: 456 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 456 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))
; [exec]
; _err := Exception_res
; [exec]
; except1 := true
; [eval] p2_1 && (!break2 && !except2)
(push) ; 25
; [then-branch: 457 | !(p2_1@131@01) | live]
; [else-branch: 457 | p2_1@131@01 | live]
(push) ; 26
; [then-branch: 457 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 26
(push) ; 26
; [else-branch: 457 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 27
; [then-branch: 458 | break2@111@01 | live]
; [else-branch: 458 | !(break2@111@01) | live]
(push) ; 28
; [then-branch: 458 | break2@111@01]
(assert break2@111@01)
(pop) ; 28
(push) ; 28
; [else-branch: 458 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 459 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 459 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | live]
(push) ; 25
; [else-branch: 459 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01))]
(pop) ; 25
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 25
; [then-branch: 460 | !(p2_1@131@01) | live]
; [else-branch: 460 | p2_1@131@01 | live]
(push) ; 26
; [then-branch: 460 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 26
(push) ; 26
; [else-branch: 460 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 27
; [then-branch: 461 | break2@111@01 | live]
; [else-branch: 461 | !(break2@111@01) | live]
(push) ; 28
; [then-branch: 461 | break2@111@01]
(assert break2@111@01)
(pop) ; 28
(push) ; 28
; [else-branch: 461 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 462 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 462 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 462 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01))]
; [exec]
; p1_3 := p3 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p3 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 463 | !(p3@132@01) | live]
; [else-branch: 463 | p3@132@01 | live]
(push) ; 27
; [then-branch: 463 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 27
(push) ; 27
; [else-branch: 463 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 28
; [then-branch: 464 | break1@110@01 | live]
; [else-branch: 464 | !(break1@110@01) | live]
(push) ; 29
; [then-branch: 464 | break1@110@01]
(assert break1@110@01)
(pop) ; 29
(push) ; 29
; [else-branch: 464 | !(break1@110@01)]
; [eval] !except1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=> p3@132@01 (and p3@132@01 (or (not break1@110@01) break1@110@01))))
(assert (or p3@132@01 (not p3@132@01)))
; [exec]
; p2_3 := p4 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p4 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 465 | !(p4@133@01) | live]
; [else-branch: 465 | p4@133@01 | live]
(push) ; 27
; [then-branch: 465 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 27
(push) ; 27
; [else-branch: 465 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 28
; [then-branch: 466 | break2@111@01 | live]
; [else-branch: 466 | !(break2@111@01) | live]
(push) ; 29
; [then-branch: 466 | break2@111@01]
(assert break2@111@01)
(pop) ; 29
(push) ; 29
; [else-branch: 466 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(push) ; 30
; [then-branch: 467 | except2@105@01 | live]
; [else-branch: 467 | !(except2@105@01) | live]
(push) ; 31
; [then-branch: 467 | except2@105@01]
(assert except2@105@01)
(pop) ; 31
(push) ; 31
; [else-branch: 467 | !(except2@105@01)]
(assert (not except2@105@01))
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and (not break2@111@01) (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p4@133@01
  (and
    p4@133@01
    (=>
      (not break2@111@01)
      (and (not break2@111@01) (or (not except2@105@01) except2@105@01)))
    (or (not break2@111@01) break2@111@01))))
(assert (or p4@133@01 (not p4@133@01)))
; [exec]
; p3_1 := p3 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p3 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 468 | !(p3@132@01) | live]
; [else-branch: 468 | p3@132@01 | live]
(push) ; 27
; [then-branch: 468 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 27
(push) ; 27
; [else-branch: 468 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 28
; [then-branch: 469 | break1@110@01 | live]
; [else-branch: 469 | !(break1@110@01) | live]
(push) ; 29
; [then-branch: 469 | break1@110@01]
(assert break1@110@01)
(pop) ; 29
(push) ; 29
; [else-branch: 469 | !(break1@110@01)]
; [eval] !except1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [exec]
; p4_1 := p4 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p4 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 470 | !(p4@133@01) | live]
; [else-branch: 470 | p4@133@01 | live]
(push) ; 27
; [then-branch: 470 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 27
(push) ; 27
; [else-branch: 470 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 28
; [then-branch: 471 | break2@111@01 | live]
; [else-branch: 471 | !(break2@111@01) | live]
(push) ; 29
; [then-branch: 471 | break2@111@01]
(assert break2@111@01)
(pop) ; 29
(push) ; 29
; [else-branch: 471 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(push) ; 30
; [then-branch: 472 | except2@105@01 | live]
; [else-branch: 472 | !(except2@105@01) | live]
(push) ; 31
; [then-branch: 472 | except2@105@01]
(assert except2@105@01)
(pop) ; 31
(push) ; 31
; [else-branch: 472 | !(except2@105@01)]
(assert (not except2@105@01))
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and (not break2@111@01) (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p4_1@143@01 Bool)
(assert (= p4_1@143@01 (and p4@133@01 (and (not break2@111@01) (not except2@105@01)))))
; [eval] p1_3 && (!break1 && !except1)
; [then-branch: 473 | False | dead]
; [else-branch: 473 | True | live]
(push) ; 26
; [else-branch: 473 | True]
(pop) ; 26
; [eval] !(p1_3 && (!break1 && !except1))
; [eval] p1_3 && (!break1 && !except1)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 474 | True | live]
; [else-branch: 474 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 474 | True]
; [eval] p2_3 && (!break2 && !except2)
; [then-branch: 475 | False | dead]
; [else-branch: 475 | True | live]
(push) ; 27
; [else-branch: 475 | True]
(pop) ; 27
; [eval] !(p2_3 && (!break2 && !except2))
; [eval] p2_3 && (!break2 && !except2)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 476 | True | live]
; [else-branch: 476 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 476 | True]
; [eval] p3 && (!break1 && !except1)
(push) ; 28
; [then-branch: 477 | !(p3@132@01) | live]
; [else-branch: 477 | p3@132@01 | live]
(push) ; 29
; [then-branch: 477 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 29
(push) ; 29
; [else-branch: 477 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 30
; [then-branch: 478 | break1@110@01 | live]
; [else-branch: 478 | !(break1@110@01) | live]
(push) ; 31
; [then-branch: 478 | break1@110@01]
(assert break1@110@01)
(pop) ; 31
(push) ; 31
; [else-branch: 478 | !(break1@110@01)]
; [eval] !except1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 479 | False | dead]
; [else-branch: 479 | True | live]
(push) ; 28
; [else-branch: 479 | True]
(pop) ; 28
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 28
; [then-branch: 480 | !(p3@132@01) | live]
; [else-branch: 480 | p3@132@01 | live]
(push) ; 29
; [then-branch: 480 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 29
(push) ; 29
; [else-branch: 480 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 30
; [then-branch: 481 | break1@110@01 | live]
; [else-branch: 481 | !(break1@110@01) | live]
(push) ; 31
; [then-branch: 481 | break1@110@01]
(assert break1@110@01)
(pop) ; 31
(push) ; 31
; [else-branch: 481 | !(break1@110@01)]
; [eval] !except1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 482 | True | live]
; [else-branch: 482 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 482 | True]
; [eval] p4 && (!break2 && !except2)
(push) ; 29
; [then-branch: 483 | !(p4@133@01) | live]
; [else-branch: 483 | p4@133@01 | live]
(push) ; 30
; [then-branch: 483 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 30
(push) ; 30
; [else-branch: 483 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 31
; [then-branch: 484 | break2@111@01 | live]
; [else-branch: 484 | !(break2@111@01) | live]
(push) ; 32
; [then-branch: 484 | break2@111@01]
(assert break2@111@01)
(pop) ; 32
(push) ; 32
; [else-branch: 484 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p4@133@01 (and p4@133@01 (or (not break2@111@01) break2@111@01))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4@133@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4@133@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 485 | p4@133@01 && !(break2@111@01) && !(except2@105@01) | live]
; [else-branch: 485 | !(p4@133@01 && !(break2@111@01) && !(except2@105@01)) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 485 | p4@133@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p4@133@01 (and (not break2@111@01) (not except2@105@01))))
; [exec]
; c_4_0.Container_valuep := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 30
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 30
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_valuep@144@01 $Ref)
(assert (= Container_valuep@144@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p3 && (!break1 && !except1)
(push) ; 30
; [then-branch: 486 | !(p3@132@01) | live]
; [else-branch: 486 | p3@132@01 | live]
(push) ; 31
; [then-branch: 486 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 31
(push) ; 31
; [else-branch: 486 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 32
; [then-branch: 487 | break1@110@01 | live]
; [else-branch: 487 | !(break1@110@01) | live]
(push) ; 33
; [then-branch: 487 | break1@110@01]
(assert break1@110@01)
(pop) ; 33
(push) ; 33
; [else-branch: 487 | !(break1@110@01)]
; [eval] !except1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 488 | False | dead]
; [else-branch: 488 | True | live]
(push) ; 30
; [else-branch: 488 | True]
(pop) ; 30
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 30
; [then-branch: 489 | !(p3@132@01) | live]
; [else-branch: 489 | p3@132@01 | live]
(push) ; 31
; [then-branch: 489 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 31
(push) ; 31
; [else-branch: 489 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 32
; [then-branch: 490 | break1@110@01 | live]
; [else-branch: 490 | !(break1@110@01) | live]
(push) ; 33
; [then-branch: 490 | break1@110@01]
(assert break1@110@01)
(pop) ; 33
(push) ; 33
; [else-branch: 490 | !(break1@110@01)]
; [eval] !except1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 491 | True | live]
; [else-branch: 491 | False | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 491 | True]
; [eval] p4 && (!break2 && !except2)
(push) ; 31
; [then-branch: 492 | !(p4@133@01) | live]
; [else-branch: 492 | p4@133@01 | live]
(push) ; 32
; [then-branch: 492 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 32
(push) ; 32
; [else-branch: 492 | p4@133@01]
; [eval] !break2
(push) ; 33
; [then-branch: 493 | break2@111@01 | live]
; [else-branch: 493 | !(break2@111@01) | live]
(push) ; 34
; [then-branch: 493 | break2@111@01]
(assert break2@111@01)
(pop) ; 34
(push) ; 34
; [else-branch: 493 | !(break2@111@01)]
; [eval] !except2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (=> p4@133@01 (or (not break2@111@01) break2@111@01)))
(push) ; 31
(set-option :timeout 10)
(assert (not (not (and p4@133@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4@133@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 494 | p4@133@01 && !(break2@111@01) && !(except2@105@01) | live]
; [else-branch: 494 | !(p4@133@01 && !(break2@111@01) && !(except2@105@01)) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 494 | p4@133@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p4@133@01 (and (not break2@111@01) (not except2@105@01))))
; [exec]
; break2 := true
; [eval] p1_0 && (!break1 && !except1)
(push) ; 32
; [then-branch: 495 | !(p1_0@128@01) | live]
; [else-branch: 495 | p1_0@128@01 | live]
(push) ; 33
; [then-branch: 495 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 33
(push) ; 33
; [else-branch: 495 | p1_0@128@01]
; [eval] !break1
(push) ; 34
; [then-branch: 496 | break1@110@01 | live]
; [else-branch: 496 | !(break1@110@01) | live]
(push) ; 35
; [then-branch: 496 | break1@110@01]
(assert break1@110@01)
(pop) ; 35
(push) ; 35
; [else-branch: 496 | !(break1@110@01)]
; [eval] !except1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (=> p1_0@128@01 (or (not break1@110@01) break1@110@01)))
; [then-branch: 497 | False | dead]
; [else-branch: 497 | True | live]
(push) ; 32
; [else-branch: 497 | True]
(pop) ; 32
; [eval] !(p1_0 && (!break1 && !except1))
; [eval] p1_0 && (!break1 && !except1)
(push) ; 32
; [then-branch: 498 | !(p1_0@128@01) | live]
; [else-branch: 498 | p1_0@128@01 | live]
(push) ; 33
; [then-branch: 498 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 33
(push) ; 33
; [else-branch: 498 | p1_0@128@01]
; [eval] !break1
(push) ; 34
; [then-branch: 499 | break1@110@01 | live]
; [else-branch: 499 | !(break1@110@01) | live]
(push) ; 35
; [then-branch: 499 | break1@110@01]
(assert break1@110@01)
(pop) ; 35
(push) ; 35
; [else-branch: 499 | !(break1@110@01)]
; [eval] !except1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 500 | True | live]
; [else-branch: 500 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 500 | True]
; [eval] p2_0 && (!break2 && !except2)
(push) ; 33
; [then-branch: 501 | !(p2_0@129@01) | live]
; [else-branch: 501 | p2_0@129@01 | live]
(push) ; 34
; [then-branch: 501 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 34
(push) ; 34
; [else-branch: 501 | p2_0@129@01]
; [eval] !break2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 502 | False | dead]
; [else-branch: 502 | True | live]
(push) ; 33
; [else-branch: 502 | True]
(pop) ; 33
; [eval] !(p2_0 && (!break2 && !except2))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 33
; [then-branch: 503 | !(p2_0@129@01) | live]
; [else-branch: 503 | p2_0@129@01 | live]
(push) ; 34
; [then-branch: 503 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 34
(push) ; 34
; [else-branch: 503 | p2_0@129@01]
; [eval] !break2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 504 | True | live]
; [else-branch: 504 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 504 | True]
; [exec]
; assert (p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true) &&
;   (p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true)
; [eval] p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true
; [eval] p1_0 && (!break1 && !except1)
(push) ; 34
; [then-branch: 505 | !(p1_0@128@01) | live]
; [else-branch: 505 | p1_0@128@01 | live]
(push) ; 35
; [then-branch: 505 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 35
(push) ; 35
; [else-branch: 505 | p1_0@128@01]
; [eval] !break1
(push) ; 36
; [then-branch: 506 | break1@110@01 | live]
; [else-branch: 506 | !(break1@110@01) | live]
(push) ; 37
; [then-branch: 506 | break1@110@01]
(assert break1@110@01)
(pop) ; 37
(push) ; 37
; [else-branch: 506 | !(break1@110@01)]
; [eval] !except1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 507 | False | dead]
; [else-branch: 507 | True | live]
(push) ; 35
; [else-branch: 507 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 508 | !(p2_0@129@01) | live]
; [else-branch: 508 | p2_0@129@01 | live]
(push) ; 35
; [then-branch: 508 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 35
(push) ; 35
; [else-branch: 508 | p2_0@129@01]
; [eval] !break2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 509 | False | dead]
; [else-branch: 509 | True | live]
(push) ; 35
; [else-branch: 509 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 34
; [then-branch: 510 | !(p1@16@01) | live]
; [else-branch: 510 | p1@16@01 | live]
(push) ; 35
; [then-branch: 510 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 35
(push) ; 35
; [else-branch: 510 | p1@16@01]
(assert p1@16@01)
; [eval] !bypass1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 511 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 511 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 511 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 34
; [then-branch: 512 | !(p2@17@01) | live]
; [else-branch: 512 | p2@17@01 | live]
(push) ; 35
; [then-branch: 512 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 35
(push) ; 35
; [else-branch: 512 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 513 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 513 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 513 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1
(push) ; 34
; [then-branch: 514 | !(p1@16@01) | live]
; [else-branch: 514 | p1@16@01 | live]
(push) ; 35
; [then-branch: 514 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 35
(push) ; 35
; [else-branch: 514 | p1@16@01]
; [eval] !bypass1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 515 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 515 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 515 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2
(push) ; 35
; [then-branch: 516 | !(p2@17@01) | live]
; [else-branch: 516 | p2@17@01 | live]
(push) ; 36
; [then-branch: 516 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 36
(push) ; 36
; [else-branch: 516 | p2@17@01]
; [eval] !bypass2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 517 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 517 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 517 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1 ==> issubtype(typeof(c_4.Container_value), int())
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 518 | !(p1@16@01) | live]
; [else-branch: 518 | p1@16@01 | live]
(push) ; 37
; [then-branch: 518 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 518 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 519 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 519 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 519 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] issubtype(typeof(c_4.Container_value), int())
; [eval] typeof(c_4.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
(push) ; 36
(assert (not (=>
  (and p1@16@01 (not bypass1@83@01))
  (issubtype<Bool> (typeof<PyType> Container_value@136@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (issubtype<Bool> (typeof<PyType> Container_value@136@01) (as int<PyType>  PyType))))
; [eval] p2 && !bypass2 ==> issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 520 | !(p2@17@01) | live]
; [else-branch: 520 | p2@17@01 | live]
(push) ; 37
; [then-branch: 520 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 520 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 521 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 521 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 521 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] typeof(c_4_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
(push) ; 36
(assert (not (=>
  (and p2@17@01 (not bypass2@84@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@144@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@144@01) (as int<PyType>  PyType))))
; [eval] p1 && !bypass1 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 522 | !(p1@16@01) | live]
; [else-branch: 522 | p1@16@01 | live]
(push) ; 37
; [then-branch: 522 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 522 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 523 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 523 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 523 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] !idle1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 524 | True | live]
; [else-branch: 524 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 524 | True]
; [eval] _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before@112@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before@112@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 525 | _loop_check_before@112@01 | live]
; [else-branch: 525 | !(_loop_check_before@112@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 525 | _loop_check_before@112@01]
(assert _loop_check_before@112@01)
; [eval] _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 526 | False | live]
; [else-branch: 526 | True | live]
(push) ; 43
; [then-branch: 526 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 526 | True]
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 44
; [then-branch: 527 | False | live]
; [else-branch: 527 | True | live]
(push) ; 45
; [then-branch: 527 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 527 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 46
; [then-branch: 528 | False | live]
; [else-branch: 528 | True | live]
(push) ; 47
; [then-branch: 528 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 528 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 48
; [then-branch: 529 | False | live]
; [else-branch: 529 | True | live]
(push) ; 49
; [then-branch: 529 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 529 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 530 | False | live]
; [else-branch: 530 | True | live]
(push) ; 51
; [then-branch: 530 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 530 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 525 | !(_loop_check_before@112@01)]
(assert (not _loop_check_before@112@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before@112@01) _loop_check_before@112@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before@112@01) _loop_check_before@112@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (and
    p1@16@01
    (not bypass1@83@01)
    (or (not _loop_check_before@112@01) _loop_check_before@112@01))))
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 531 | !(p2@17@01) | live]
; [else-branch: 531 | p2@17@01 | live]
(push) ; 37
; [then-branch: 531 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 531 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 532 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 532 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 532 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] !idle2
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 533 | True | live]
; [else-branch: 533 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 533 | True]
; [eval] _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_4@113@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_4@113@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 534 | _loop_check_before_4@113@01 | live]
; [else-branch: 534 | !(_loop_check_before_4@113@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 534 | _loop_check_before_4@113@01]
(assert _loop_check_before_4@113@01)
; [eval] _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 535 | False | live]
; [else-branch: 535 | True | live]
(push) ; 43
; [then-branch: 535 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 535 | True]
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none
; [eval] perm(MustTerminate_0(_cthread_157_0))
(push) ; 44
; [then-branch: 536 | False | live]
; [else-branch: 536 | True | live]
(push) ; 45
; [then-branch: 536 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 536 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 46
; [then-branch: 537 | False | live]
; [else-branch: 537 | True | live]
(push) ; 47
; [then-branch: 537 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 537 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 48
; [then-branch: 538 | False | live]
; [else-branch: 538 | True | live]
(push) ; 49
; [then-branch: 538 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 538 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 539 | False | live]
; [else-branch: 539 | True | live]
(push) ; 51
; [then-branch: 539 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 539 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 534 | !(_loop_check_before_4@113@01)]
(assert (not _loop_check_before_4@113@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (and
    p2@17@01
    (not bypass2@84@01)
    (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))))
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 540 | !(p1@16@01) | live]
; [else-branch: 540 | p1@16@01 | live]
(push) ; 37
; [then-branch: 540 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 540 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 541 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 541 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 541 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 542 | True | live]
; [else-branch: 542 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 542 | True]
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before@112@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before@112@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 543 | !(_loop_check_before@112@01) | live]
; [else-branch: 543 | _loop_check_before@112@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 543 | !(_loop_check_before@112@01)]
(assert (not _loop_check_before@112@01))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 42
; [then-branch: 544 | False | live]
; [else-branch: 544 | True | live]
(push) ; 43
; [then-branch: 544 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 544 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 44
; [then-branch: 545 | False | live]
; [else-branch: 545 | True | live]
(push) ; 45
; [then-branch: 545 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 545 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 546 | False | live]
; [else-branch: 546 | True | live]
(push) ; 47
; [then-branch: 546 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 546 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 543 | _loop_check_before@112@01]
(assert _loop_check_before@112@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before@112@01 (not _loop_check_before@112@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before@112@01 (not _loop_check_before@112@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (and
    p1@16@01
    (not bypass1@83@01)
    (or _loop_check_before@112@01 (not _loop_check_before@112@01)))))
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 547 | !(p2@17@01) | live]
; [else-branch: 547 | p2@17@01 | live]
(push) ; 37
; [then-branch: 547 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 547 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 548 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 548 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 548 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !idle2
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 549 | True | live]
; [else-branch: 549 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 549 | True]
; [eval] !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_4
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_4@113@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_4@113@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 550 | !(_loop_check_before_4@113@01) | live]
; [else-branch: 550 | _loop_check_before_4@113@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 550 | !(_loop_check_before_4@113@01)]
(assert (not _loop_check_before_4@113@01))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 42
; [then-branch: 551 | False | live]
; [else-branch: 551 | True | live]
(push) ; 43
; [then-branch: 551 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 551 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 44
; [then-branch: 552 | False | live]
; [else-branch: 552 | True | live]
(push) ; 45
; [then-branch: 552 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 552 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 553 | False | live]
; [else-branch: 553 | True | live]
(push) ; 47
; [then-branch: 553 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 553 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 550 | _loop_check_before_4@113@01]
(assert _loop_check_before_4@113@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (and
    p2@17@01
    (not bypass2@84@01)
    (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))))
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] bypass1 ==> tmp1_1 == except1
(push) ; 36
; [then-branch: 554 | bypass1@83@01 | dead]
; [else-branch: 554 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 554 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_4 == break1
(push) ; 36
; [then-branch: 555 | bypass1@83@01 | dead]
; [else-branch: 555 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 555 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_0 == Exception_res
(push) ; 36
; [then-branch: 556 | bypass1@83@01 | dead]
; [else-branch: 556 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 556 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_2 == _err
(push) ; 36
; [then-branch: 557 | bypass1@83@01 | dead]
; [else-branch: 557 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 557 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_3 == _loop_check_before
(push) ; 36
; [then-branch: 558 | bypass1@83@01 | dead]
; [else-branch: 558 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 558 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1 == _loop_measures
(push) ; 36
; [then-branch: 559 | bypass1@83@01 | dead]
; [else-branch: 559 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 559 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2 == _loop_measures_4
(push) ; 36
; [then-branch: 560 | bypass2@84@01 | dead]
; [else-branch: 560 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 560 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_1 == except2
(push) ; 36
; [then-branch: 561 | bypass2@84@01 | dead]
; [else-branch: 561 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 561 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_3 == _loop_check_before_4
(push) ; 36
; [then-branch: 562 | bypass2@84@01 | dead]
; [else-branch: 562 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 562 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_4 == break2
(push) ; 36
; [then-branch: 563 | bypass2@84@01 | dead]
; [else-branch: 563 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 563 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_2 == _err_0
(push) ; 36
; [then-branch: 564 | bypass2@84@01 | dead]
; [else-branch: 564 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 564 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_0 == Exception_res_2
(push) ; 36
; [then-branch: 565 | bypass2@84@01 | dead]
; [else-branch: 565 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 565 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 31
; [then-branch: 566 | !(p4@133@01) | live]
; [else-branch: 566 | p4@133@01 | live]
(push) ; 32
; [then-branch: 566 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 32
(push) ; 32
; [else-branch: 566 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 33
; [then-branch: 567 | break2@111@01 | live]
; [else-branch: 567 | !(break2@111@01) | live]
(push) ; 34
; [then-branch: 567 | break2@111@01]
(assert break2@111@01)
(pop) ; 34
(push) ; 34
; [else-branch: 567 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4@133@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 568 | !(p4@133@01 && !(break2@111@01) && !(except2@105@01)) | dead]
; [else-branch: 568 | p4@133@01 && !(break2@111@01) && !(except2@105@01) | live]
(set-option :timeout 0)
(push) ; 31
; [else-branch: 568 | p4@133@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p4@133@01 (and (not break2@111@01) (not except2@105@01))))
(pop) ; 31
(pop) ; 30
(pop) ; 29
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 29
; [then-branch: 569 | !(p4@133@01) | live]
; [else-branch: 569 | p4@133@01 | live]
(push) ; 30
; [then-branch: 569 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 30
(push) ; 30
; [else-branch: 569 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 31
; [then-branch: 570 | break2@111@01 | live]
; [else-branch: 570 | !(break2@111@01) | live]
(push) ; 32
; [then-branch: 570 | break2@111@01]
(assert break2@111@01)
(pop) ; 32
(push) ; 32
; [else-branch: 570 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4@133@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 571 | !(p4@133@01 && !(break2@111@01) && !(except2@105@01)) | dead]
; [else-branch: 571 | p4@133@01 && !(break2@111@01) && !(except2@105@01) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 571 | p4@133@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p4@133@01 (and (not break2@111@01) (not except2@105@01))))
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 24
; [then-branch: 572 | !(p1_1@130@01) | live]
; [else-branch: 572 | p1_1@130@01 | live]
(push) ; 25
; [then-branch: 572 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 25
(push) ; 25
; [else-branch: 572 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 26
; [then-branch: 573 | break1@110@01 | live]
; [else-branch: 573 | !(break1@110@01) | live]
(push) ; 27
; [then-branch: 573 | break1@110@01]
(assert break1@110@01)
(pop) ; 27
(push) ; 27
; [else-branch: 573 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 574 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | dead]
; [else-branch: 574 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 574 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))
(pop) ; 24
(pop) ; 23
(pop) ; 22
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 22
; [then-branch: 575 | !(p1_1@130@01) | live]
; [else-branch: 575 | p1_1@130@01 | live]
(push) ; 23
; [then-branch: 575 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 23
(push) ; 23
; [else-branch: 575 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 24
; [then-branch: 576 | break1@110@01 | live]
; [else-branch: 576 | !(break1@110@01) | live]
(push) ; 25
; [then-branch: 576 | break1@110@01]
(assert break1@110@01)
(pop) ; 25
(push) ; 25
; [else-branch: 576 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 577 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | dead]
; [else-branch: 577 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 577 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))
(pop) ; 22
(pop) ; 21
(pop) ; 20
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 20
; [then-branch: 578 | !(p1_1@130@01) | live]
; [else-branch: 578 | p1_1@130@01 | live]
(push) ; 21
; [then-branch: 578 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 21
(push) ; 21
; [else-branch: 578 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 22
; [then-branch: 579 | break1@110@01 | live]
; [else-branch: 579 | !(break1@110@01) | live]
(push) ; 23
; [then-branch: 579 | break1@110@01]
(assert break1@110@01)
(pop) ; 23
(push) ; 23
; [else-branch: 579 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 580 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | dead]
; [else-branch: 580 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 580 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 435 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))
(pop) ; 19
(pop) ; 18
(push) ; 18
; [else-branch: 283 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01))]
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
(pop) ; 18
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 18
; [then-branch: 581 | !(p1_1@130@01) | live]
; [else-branch: 581 | p1_1@130@01 | live]
(push) ; 19
; [then-branch: 581 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 19
(push) ; 19
; [else-branch: 581 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 20
; [then-branch: 582 | break1@110@01 | live]
; [else-branch: 582 | !(break1@110@01) | live]
(push) ; 21
; [then-branch: 582 | break1@110@01]
(assert break1@110@01)
(pop) ; 21
(push) ; 21
; [else-branch: 582 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 583 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 583 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | live]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 583 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01))]
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 19
; [then-branch: 584 | !(p2_1@131@01) | live]
; [else-branch: 584 | p2_1@131@01 | live]
(push) ; 20
; [then-branch: 584 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 20
(push) ; 20
; [else-branch: 584 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 21
; [then-branch: 585 | break2@111@01 | live]
; [else-branch: 585 | !(break2@111@01) | live]
(push) ; 22
; [then-branch: 585 | break2@111@01]
(assert break2@111@01)
(pop) ; 22
(push) ; 22
; [else-branch: 585 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=> p2_1@131@01 (and p2_1@131@01 (or (not break2@111@01) break2@111@01))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 586 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | live]
; [else-branch: 586 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 586 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))
; [exec]
; c_4_0.Container_valuep := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(declare-const Container_valuep@145@01 $Ref)
(assert (= Container_valuep@145@01 (__prim__int___box__ $Snap.unit 7)))
; [exec]
; tmp := new()
(declare-const tmp@146@01 $Ref)
(assert (not (= tmp@146@01 $Ref.null)))
(assert (not (= tmp@146@01 tmp@123@01)))
(assert (not (= tmp@146@01 tmp1_2@66@01)))
(assert (not (= tmp@146@01 Exception_res@100@01)))
(assert (not (= tmp@146@01 c_9@25@01)))
(assert (not (= tmp@146@01 tmp2_0@63@01)))
(assert (not (= tmp@146@01 _cthread_157_0@19@01)))
(assert (not (= tmp@146@01 b_9@27@01)))
(assert (not (= tmp@146@01 Container_valuep@145@01)))
(assert (not (= tmp@146@01 tmp1_0@62@01)))
(assert (not (= tmp@146@01 Exception_res_2@101@01)))
(assert (not (= tmp@146@01 _err_0@104@01)))
(assert (not (= tmp@146@01 tmp2_2@67@01)))
(assert (not (= tmp@146@01 b@26@01)))
(assert (not (= tmp@146@01 _cthread_157@18@01)))
(assert (not (= tmp@146@01 _err@102@01)))
(assert (not (= tmp@146@01 c@24@01)))
(assert (not
  (=
    tmp@146@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@114@01)))))))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 20
; [then-branch: 587 | !(p1_1@130@01) | live]
; [else-branch: 587 | p1_1@130@01 | live]
(push) ; 21
; [then-branch: 587 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 21
(push) ; 21
; [else-branch: 587 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 22
; [then-branch: 588 | break1@110@01 | live]
; [else-branch: 588 | !(break1@110@01) | live]
(push) ; 23
; [then-branch: 588 | break1@110@01]
(assert break1@110@01)
(pop) ; 23
(push) ; 23
; [else-branch: 588 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 589 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 589 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | live]
(push) ; 20
; [else-branch: 589 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01))]
(pop) ; 20
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 20
; [then-branch: 590 | !(p1_1@130@01) | live]
; [else-branch: 590 | p1_1@130@01 | live]
(push) ; 21
; [then-branch: 590 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 21
(push) ; 21
; [else-branch: 590 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 22
; [then-branch: 591 | break1@110@01 | live]
; [else-branch: 591 | !(break1@110@01) | live]
(push) ; 23
; [then-branch: 591 | break1@110@01]
(assert break1@110@01)
(pop) ; 23
(push) ; 23
; [else-branch: 591 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 592 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 592 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 592 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01))]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 21
; [then-branch: 593 | !(p2_1@131@01) | live]
; [else-branch: 593 | p2_1@131@01 | live]
(push) ; 22
; [then-branch: 593 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 22
(push) ; 22
; [else-branch: 593 | p2_1@131@01]
; [eval] !break2
(push) ; 23
; [then-branch: 594 | break2@111@01 | live]
; [else-branch: 594 | !(break2@111@01) | live]
(push) ; 24
; [then-branch: 594 | break2@111@01]
(assert break2@111@01)
(pop) ; 24
(push) ; 24
; [else-branch: 594 | !(break2@111@01)]
; [eval] !except2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (=> p2_1@131@01 (or (not break2@111@01) break2@111@01)))
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 595 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | live]
; [else-branch: 595 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 595 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))
; [exec]
; Exception_res_2 := tmp
; [eval] p1_1 && (!break1 && !except1)
(push) ; 22
; [then-branch: 596 | !(p1_1@130@01) | live]
; [else-branch: 596 | p1_1@130@01 | live]
(push) ; 23
; [then-branch: 596 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 23
(push) ; 23
; [else-branch: 596 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 24
; [then-branch: 597 | break1@110@01 | live]
; [else-branch: 597 | !(break1@110@01) | live]
(push) ; 25
; [then-branch: 597 | break1@110@01]
(assert break1@110@01)
(pop) ; 25
(push) ; 25
; [else-branch: 597 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 598 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 598 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | live]
(push) ; 22
; [else-branch: 598 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01))]
(pop) ; 22
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 22
; [then-branch: 599 | !(p1_1@130@01) | live]
; [else-branch: 599 | p1_1@130@01 | live]
(push) ; 23
; [then-branch: 599 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 23
(push) ; 23
; [else-branch: 599 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 24
; [then-branch: 600 | break1@110@01 | live]
; [else-branch: 600 | !(break1@110@01) | live]
(push) ; 25
; [then-branch: 600 | break1@110@01]
(assert break1@110@01)
(pop) ; 25
(push) ; 25
; [else-branch: 600 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 601 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 601 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 601 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01))]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 23
; [then-branch: 602 | !(p2_1@131@01) | live]
; [else-branch: 602 | p2_1@131@01 | live]
(push) ; 24
; [then-branch: 602 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 24
(push) ; 24
; [else-branch: 602 | p2_1@131@01]
; [eval] !break2
(push) ; 25
; [then-branch: 603 | break2@111@01 | live]
; [else-branch: 603 | !(break2@111@01) | live]
(push) ; 26
; [then-branch: 603 | break2@111@01]
(assert break2@111@01)
(pop) ; 26
(push) ; 26
; [else-branch: 603 | !(break2@111@01)]
; [eval] !except2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 604 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | live]
; [else-branch: 604 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 604 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))
; [exec]
; inhale typeof(Exception_res_2) == Exception()
(declare-const $t@147@01 $Snap)
(assert (= $t@147@01 $Snap.unit))
; [eval] typeof(Exception_res_2) == Exception()
; [eval] typeof(Exception_res_2)
; [eval] Exception()
(assert (= (typeof<PyType> tmp@146@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_1 && (!break1 && !except1)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 605 | !(p1_1@130@01) | live]
; [else-branch: 605 | p1_1@130@01 | live]
(push) ; 25
; [then-branch: 605 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 25
(push) ; 25
; [else-branch: 605 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 26
; [then-branch: 606 | break1@110@01 | live]
; [else-branch: 606 | !(break1@110@01) | live]
(push) ; 27
; [then-branch: 606 | break1@110@01]
(assert break1@110@01)
(pop) ; 27
(push) ; 27
; [else-branch: 606 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 607 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 607 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | live]
(push) ; 24
; [else-branch: 607 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01))]
(pop) ; 24
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 24
; [then-branch: 608 | !(p1_1@130@01) | live]
; [else-branch: 608 | p1_1@130@01 | live]
(push) ; 25
; [then-branch: 608 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 25
(push) ; 25
; [else-branch: 608 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 26
; [then-branch: 609 | break1@110@01 | live]
; [else-branch: 609 | !(break1@110@01) | live]
(push) ; 27
; [then-branch: 609 | break1@110@01]
(assert break1@110@01)
(pop) ; 27
(push) ; 27
; [else-branch: 609 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 610 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 610 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 610 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01))]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 25
; [then-branch: 611 | !(p2_1@131@01) | live]
; [else-branch: 611 | p2_1@131@01 | live]
(push) ; 26
; [then-branch: 611 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 26
(push) ; 26
; [else-branch: 611 | p2_1@131@01]
; [eval] !break2
(push) ; 27
; [then-branch: 612 | break2@111@01 | live]
; [else-branch: 612 | !(break2@111@01) | live]
(push) ; 28
; [then-branch: 612 | break2@111@01]
(assert break2@111@01)
(pop) ; 28
(push) ; 28
; [else-branch: 612 | !(break2@111@01)]
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 613 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | live]
; [else-branch: 613 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 613 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))
; [exec]
; _err_0 := Exception_res_2
; [exec]
; except2 := true
; [exec]
; p1_3 := p3 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p3 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 614 | !(p3@132@01) | live]
; [else-branch: 614 | p3@132@01 | live]
(push) ; 27
; [then-branch: 614 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 27
(push) ; 27
; [else-branch: 614 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 28
; [then-branch: 615 | break1@110@01 | live]
; [else-branch: 615 | !(break1@110@01) | live]
(push) ; 29
; [then-branch: 615 | break1@110@01]
(assert break1@110@01)
(pop) ; 29
(push) ; 29
; [else-branch: 615 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 30
; [then-branch: 616 | except1@103@01 | live]
; [else-branch: 616 | !(except1@103@01) | live]
(push) ; 31
; [then-branch: 616 | except1@103@01]
(assert except1@103@01)
(pop) ; 31
(push) ; 31
; [else-branch: 616 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and (not break1@110@01) (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p3@132@01
  (and
    p3@132@01
    (=>
      (not break1@110@01)
      (and (not break1@110@01) (or (not except1@103@01) except1@103@01)))
    (or (not break1@110@01) break1@110@01))))
(assert (or p3@132@01 (not p3@132@01)))
; [exec]
; p2_3 := p4 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p4 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 617 | !(p4@133@01) | live]
; [else-branch: 617 | p4@133@01 | live]
(push) ; 27
; [then-branch: 617 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 27
(push) ; 27
; [else-branch: 617 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 28
; [then-branch: 618 | break2@111@01 | live]
; [else-branch: 618 | !(break2@111@01) | live]
(push) ; 29
; [then-branch: 618 | break2@111@01]
(assert break2@111@01)
(pop) ; 29
(push) ; 29
; [else-branch: 618 | !(break2@111@01)]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=> p4@133@01 (and p4@133@01 (or (not break2@111@01) break2@111@01))))
(assert (or p4@133@01 (not p4@133@01)))
; [exec]
; p3_1 := p3 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p3 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 619 | !(p3@132@01) | live]
; [else-branch: 619 | p3@132@01 | live]
(push) ; 27
; [then-branch: 619 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 27
(push) ; 27
; [else-branch: 619 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 28
; [then-branch: 620 | break1@110@01 | live]
; [else-branch: 620 | !(break1@110@01) | live]
(push) ; 29
; [then-branch: 620 | break1@110@01]
(assert break1@110@01)
(pop) ; 29
(push) ; 29
; [else-branch: 620 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 30
; [then-branch: 621 | except1@103@01 | live]
; [else-branch: 621 | !(except1@103@01) | live]
(push) ; 31
; [then-branch: 621 | except1@103@01]
(assert except1@103@01)
(pop) ; 31
(push) ; 31
; [else-branch: 621 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and (not break1@110@01) (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p3_1@148@01 Bool)
(assert (= p3_1@148@01 (and p3@132@01 (and (not break1@110@01) (not except1@103@01)))))
; [exec]
; p4_1 := p4 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p4 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 622 | !(p4@133@01) | live]
; [else-branch: 622 | p4@133@01 | live]
(push) ; 27
; [then-branch: 622 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 27
(push) ; 27
; [else-branch: 622 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 28
; [then-branch: 623 | break2@111@01 | live]
; [else-branch: 623 | !(break2@111@01) | live]
(push) ; 29
; [then-branch: 623 | break2@111@01]
(assert break2@111@01)
(pop) ; 29
(push) ; 29
; [else-branch: 623 | !(break2@111@01)]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [eval] p1_3 && (!break1 && !except1)
; [then-branch: 624 | False | dead]
; [else-branch: 624 | True | live]
(push) ; 26
; [else-branch: 624 | True]
(pop) ; 26
; [eval] !(p1_3 && (!break1 && !except1))
; [eval] p1_3 && (!break1 && !except1)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 625 | True | live]
; [else-branch: 625 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 625 | True]
; [eval] p2_3 && (!break2 && !except2)
; [then-branch: 626 | False | dead]
; [else-branch: 626 | True | live]
(push) ; 27
; [else-branch: 626 | True]
(pop) ; 27
; [eval] !(p2_3 && (!break2 && !except2))
; [eval] p2_3 && (!break2 && !except2)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 627 | True | live]
; [else-branch: 627 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 627 | True]
; [eval] p3 && (!break1 && !except1)
(push) ; 28
; [then-branch: 628 | !(p3@132@01) | live]
; [else-branch: 628 | p3@132@01 | live]
(push) ; 29
; [then-branch: 628 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 29
(push) ; 29
; [else-branch: 628 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 30
; [then-branch: 629 | break1@110@01 | live]
; [else-branch: 629 | !(break1@110@01) | live]
(push) ; 31
; [then-branch: 629 | break1@110@01]
(assert break1@110@01)
(pop) ; 31
(push) ; 31
; [else-branch: 629 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=> p3@132@01 (and p3@132@01 (or (not break1@110@01) break1@110@01))))
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3@132@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3@132@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 630 | p3@132@01 && !(break1@110@01) && !(except1@103@01) | live]
; [else-branch: 630 | !(p3@132@01 && !(break1@110@01) && !(except1@103@01)) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 630 | p3@132@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p3@132@01 (and (not break1@110@01) (not except1@103@01))))
; [exec]
; c_4.Container_value := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 29
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 29
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_value@149@01 $Ref)
(assert (= Container_value@149@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p4 && (!break2 && !except2)
(push) ; 29
; [then-branch: 631 | !(p4@133@01) | live]
; [else-branch: 631 | p4@133@01 | live]
(push) ; 30
; [then-branch: 631 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 30
(push) ; 30
; [else-branch: 631 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 31
; [then-branch: 632 | break2@111@01 | live]
; [else-branch: 632 | !(break2@111@01) | live]
(push) ; 32
; [then-branch: 632 | break2@111@01]
(assert break2@111@01)
(pop) ; 32
(push) ; 32
; [else-branch: 632 | !(break2@111@01)]
; [eval] !except2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 633 | False | dead]
; [else-branch: 633 | True | live]
(push) ; 29
; [else-branch: 633 | True]
(pop) ; 29
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 29
; [then-branch: 634 | !(p4@133@01) | live]
; [else-branch: 634 | p4@133@01 | live]
(push) ; 30
; [then-branch: 634 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 30
(push) ; 30
; [else-branch: 634 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 31
; [then-branch: 635 | break2@111@01 | live]
; [else-branch: 635 | !(break2@111@01) | live]
(push) ; 32
; [then-branch: 635 | break2@111@01]
(assert break2@111@01)
(pop) ; 32
(push) ; 32
; [else-branch: 635 | !(break2@111@01)]
; [eval] !except2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 636 | True | live]
; [else-branch: 636 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 636 | True]
; [eval] p3 && (!break1 && !except1)
(push) ; 30
; [then-branch: 637 | !(p3@132@01) | live]
; [else-branch: 637 | p3@132@01 | live]
(push) ; 31
; [then-branch: 637 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 31
(push) ; 31
; [else-branch: 637 | p3@132@01]
; [eval] !break1
(push) ; 32
; [then-branch: 638 | break1@110@01 | live]
; [else-branch: 638 | !(break1@110@01) | live]
(push) ; 33
; [then-branch: 638 | break1@110@01]
(assert break1@110@01)
(pop) ; 33
(push) ; 33
; [else-branch: 638 | !(break1@110@01)]
; [eval] !except1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (=> p3@132@01 (or (not break1@110@01) break1@110@01)))
(push) ; 30
(set-option :timeout 10)
(assert (not (not (and p3@132@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3@132@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 639 | p3@132@01 && !(break1@110@01) && !(except1@103@01) | live]
; [else-branch: 639 | !(p3@132@01 && !(break1@110@01) && !(except1@103@01)) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 639 | p3@132@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p3@132@01 (and (not break1@110@01) (not except1@103@01))))
; [exec]
; break1 := true
; [eval] p4 && (!break2 && !except2)
(push) ; 31
; [then-branch: 640 | !(p4@133@01) | live]
; [else-branch: 640 | p4@133@01 | live]
(push) ; 32
; [then-branch: 640 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 32
(push) ; 32
; [else-branch: 640 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 33
; [then-branch: 641 | break2@111@01 | live]
; [else-branch: 641 | !(break2@111@01) | live]
(push) ; 34
; [then-branch: 641 | break2@111@01]
(assert break2@111@01)
(pop) ; 34
(push) ; 34
; [else-branch: 641 | !(break2@111@01)]
; [eval] !except2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 642 | False | dead]
; [else-branch: 642 | True | live]
(push) ; 31
; [else-branch: 642 | True]
(pop) ; 31
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 31
; [then-branch: 643 | !(p4@133@01) | live]
; [else-branch: 643 | p4@133@01 | live]
(push) ; 32
; [then-branch: 643 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 32
(push) ; 32
; [else-branch: 643 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 33
; [then-branch: 644 | break2@111@01 | live]
; [else-branch: 644 | !(break2@111@01) | live]
(push) ; 34
; [then-branch: 644 | break2@111@01]
(assert break2@111@01)
(pop) ; 34
(push) ; 34
; [else-branch: 644 | !(break2@111@01)]
; [eval] !except2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 645 | True | live]
; [else-branch: 645 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 645 | True]
; [eval] p1_0 && (!break1 && !except1)
(push) ; 32
; [then-branch: 646 | !(p1_0@128@01) | live]
; [else-branch: 646 | p1_0@128@01 | live]
(push) ; 33
; [then-branch: 646 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 33
(push) ; 33
; [else-branch: 646 | p1_0@128@01]
; [eval] !break1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 647 | False | dead]
; [else-branch: 647 | True | live]
(push) ; 32
; [else-branch: 647 | True]
(pop) ; 32
; [eval] !(p1_0 && (!break1 && !except1))
; [eval] p1_0 && (!break1 && !except1)
(push) ; 32
; [then-branch: 648 | !(p1_0@128@01) | live]
; [else-branch: 648 | p1_0@128@01 | live]
(push) ; 33
; [then-branch: 648 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 33
(push) ; 33
; [else-branch: 648 | p1_0@128@01]
; [eval] !break1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 649 | True | live]
; [else-branch: 649 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 649 | True]
; [eval] p2_0 && (!break2 && !except2)
(push) ; 33
; [then-branch: 650 | !(p2_0@129@01) | live]
; [else-branch: 650 | p2_0@129@01 | live]
(push) ; 34
; [then-branch: 650 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 34
(push) ; 34
; [else-branch: 650 | p2_0@129@01]
; [eval] !break2
(push) ; 35
; [then-branch: 651 | break2@111@01 | live]
; [else-branch: 651 | !(break2@111@01) | live]
(push) ; 36
; [then-branch: 651 | break2@111@01]
(assert break2@111@01)
(pop) ; 36
(push) ; 36
; [else-branch: 651 | !(break2@111@01)]
; [eval] !except2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (=> p2_0@129@01 (or (not break2@111@01) break2@111@01)))
; [then-branch: 652 | False | dead]
; [else-branch: 652 | True | live]
(push) ; 33
; [else-branch: 652 | True]
(pop) ; 33
; [eval] !(p2_0 && (!break2 && !except2))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 33
; [then-branch: 653 | !(p2_0@129@01) | live]
; [else-branch: 653 | p2_0@129@01 | live]
(push) ; 34
; [then-branch: 653 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 34
(push) ; 34
; [else-branch: 653 | p2_0@129@01]
; [eval] !break2
(push) ; 35
; [then-branch: 654 | break2@111@01 | live]
; [else-branch: 654 | !(break2@111@01) | live]
(push) ; 36
; [then-branch: 654 | break2@111@01]
(assert break2@111@01)
(pop) ; 36
(push) ; 36
; [else-branch: 654 | !(break2@111@01)]
; [eval] !except2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 655 | True | live]
; [else-branch: 655 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 655 | True]
; [exec]
; assert (p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true) &&
;   (p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true)
; [eval] p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true
; [eval] p1_0 && (!break1 && !except1)
(push) ; 34
; [then-branch: 656 | !(p1_0@128@01) | live]
; [else-branch: 656 | p1_0@128@01 | live]
(push) ; 35
; [then-branch: 656 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 35
(push) ; 35
; [else-branch: 656 | p1_0@128@01]
; [eval] !break1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 657 | False | dead]
; [else-branch: 657 | True | live]
(push) ; 35
; [else-branch: 657 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 658 | !(p2_0@129@01) | live]
; [else-branch: 658 | p2_0@129@01 | live]
(push) ; 35
; [then-branch: 658 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 35
(push) ; 35
; [else-branch: 658 | p2_0@129@01]
; [eval] !break2
(push) ; 36
; [then-branch: 659 | break2@111@01 | live]
; [else-branch: 659 | !(break2@111@01) | live]
(push) ; 37
; [then-branch: 659 | break2@111@01]
(assert break2@111@01)
(pop) ; 37
(push) ; 37
; [else-branch: 659 | !(break2@111@01)]
; [eval] !except2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 660 | False | dead]
; [else-branch: 660 | True | live]
(push) ; 35
; [else-branch: 660 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 34
; [then-branch: 661 | !(p1@16@01) | live]
; [else-branch: 661 | p1@16@01 | live]
(push) ; 35
; [then-branch: 661 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 35
(push) ; 35
; [else-branch: 661 | p1@16@01]
(assert p1@16@01)
; [eval] !bypass1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 662 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 662 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 662 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 34
; [then-branch: 663 | !(p2@17@01) | live]
; [else-branch: 663 | p2@17@01 | live]
(push) ; 35
; [then-branch: 663 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 35
(push) ; 35
; [else-branch: 663 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 664 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 664 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 664 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1
(push) ; 34
; [then-branch: 665 | !(p1@16@01) | live]
; [else-branch: 665 | p1@16@01 | live]
(push) ; 35
; [then-branch: 665 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 35
(push) ; 35
; [else-branch: 665 | p1@16@01]
; [eval] !bypass1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 666 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 666 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 666 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2
(push) ; 35
; [then-branch: 667 | !(p2@17@01) | live]
; [else-branch: 667 | p2@17@01 | live]
(push) ; 36
; [then-branch: 667 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 36
(push) ; 36
; [else-branch: 667 | p2@17@01]
; [eval] !bypass2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 668 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 668 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 668 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1 ==> issubtype(typeof(c_4.Container_value), int())
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 669 | !(p1@16@01) | live]
; [else-branch: 669 | p1@16@01 | live]
(push) ; 37
; [then-branch: 669 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 669 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 670 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 670 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 670 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] issubtype(typeof(c_4.Container_value), int())
; [eval] typeof(c_4.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
(push) ; 36
(assert (not (=>
  (and p1@16@01 (not bypass1@83@01))
  (issubtype<Bool> (typeof<PyType> Container_value@149@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (issubtype<Bool> (typeof<PyType> Container_value@149@01) (as int<PyType>  PyType))))
; [eval] p2 && !bypass2 ==> issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 671 | !(p2@17@01) | live]
; [else-branch: 671 | p2@17@01 | live]
(push) ; 37
; [then-branch: 671 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 671 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 672 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 672 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 672 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] typeof(c_4_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
(push) ; 36
(assert (not (=>
  (and p2@17@01 (not bypass2@84@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@145@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@145@01) (as int<PyType>  PyType))))
; [eval] p1 && !bypass1 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 673 | !(p1@16@01) | live]
; [else-branch: 673 | p1@16@01 | live]
(push) ; 37
; [then-branch: 673 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 673 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 674 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 674 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 674 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] !idle1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 675 | True | live]
; [else-branch: 675 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 675 | True]
; [eval] _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before@112@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before@112@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 676 | _loop_check_before@112@01 | live]
; [else-branch: 676 | !(_loop_check_before@112@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 676 | _loop_check_before@112@01]
(assert _loop_check_before@112@01)
; [eval] _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 677 | False | live]
; [else-branch: 677 | True | live]
(push) ; 43
; [then-branch: 677 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 677 | True]
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 44
; [then-branch: 678 | False | live]
; [else-branch: 678 | True | live]
(push) ; 45
; [then-branch: 678 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 678 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 46
; [then-branch: 679 | False | live]
; [else-branch: 679 | True | live]
(push) ; 47
; [then-branch: 679 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 679 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 48
; [then-branch: 680 | False | live]
; [else-branch: 680 | True | live]
(push) ; 49
; [then-branch: 680 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 680 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 681 | False | live]
; [else-branch: 681 | True | live]
(push) ; 51
; [then-branch: 681 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 681 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 676 | !(_loop_check_before@112@01)]
(assert (not _loop_check_before@112@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before@112@01) _loop_check_before@112@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before@112@01) _loop_check_before@112@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (and
    p1@16@01
    (not bypass1@83@01)
    (or (not _loop_check_before@112@01) _loop_check_before@112@01))))
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 682 | !(p2@17@01) | live]
; [else-branch: 682 | p2@17@01 | live]
(push) ; 37
; [then-branch: 682 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 682 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 683 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 683 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 683 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] !idle2
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 684 | True | live]
; [else-branch: 684 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 684 | True]
; [eval] _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_4@113@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_4@113@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 685 | _loop_check_before_4@113@01 | live]
; [else-branch: 685 | !(_loop_check_before_4@113@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 685 | _loop_check_before_4@113@01]
(assert _loop_check_before_4@113@01)
; [eval] _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 686 | False | live]
; [else-branch: 686 | True | live]
(push) ; 43
; [then-branch: 686 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 686 | True]
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none
; [eval] perm(MustTerminate_0(_cthread_157_0))
(push) ; 44
; [then-branch: 687 | False | live]
; [else-branch: 687 | True | live]
(push) ; 45
; [then-branch: 687 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 687 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 46
; [then-branch: 688 | False | live]
; [else-branch: 688 | True | live]
(push) ; 47
; [then-branch: 688 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 688 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 48
; [then-branch: 689 | False | live]
; [else-branch: 689 | True | live]
(push) ; 49
; [then-branch: 689 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 689 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 690 | False | live]
; [else-branch: 690 | True | live]
(push) ; 51
; [then-branch: 690 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 690 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 685 | !(_loop_check_before_4@113@01)]
(assert (not _loop_check_before_4@113@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (and
    p2@17@01
    (not bypass2@84@01)
    (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))))
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 691 | !(p1@16@01) | live]
; [else-branch: 691 | p1@16@01 | live]
(push) ; 37
; [then-branch: 691 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 691 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 692 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 692 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 692 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 693 | True | live]
; [else-branch: 693 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 693 | True]
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before@112@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before@112@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 694 | !(_loop_check_before@112@01) | live]
; [else-branch: 694 | _loop_check_before@112@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 694 | !(_loop_check_before@112@01)]
(assert (not _loop_check_before@112@01))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 42
; [then-branch: 695 | False | live]
; [else-branch: 695 | True | live]
(push) ; 43
; [then-branch: 695 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 695 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 44
; [then-branch: 696 | False | live]
; [else-branch: 696 | True | live]
(push) ; 45
; [then-branch: 696 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 696 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 697 | False | live]
; [else-branch: 697 | True | live]
(push) ; 47
; [then-branch: 697 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 697 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 694 | _loop_check_before@112@01]
(assert _loop_check_before@112@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before@112@01 (not _loop_check_before@112@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before@112@01 (not _loop_check_before@112@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (and
    p1@16@01
    (not bypass1@83@01)
    (or _loop_check_before@112@01 (not _loop_check_before@112@01)))))
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 698 | !(p2@17@01) | live]
; [else-branch: 698 | p2@17@01 | live]
(push) ; 37
; [then-branch: 698 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 698 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 699 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 699 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 699 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !idle2
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 700 | True | live]
; [else-branch: 700 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 700 | True]
; [eval] !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_4
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_4@113@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_4@113@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 701 | !(_loop_check_before_4@113@01) | live]
; [else-branch: 701 | _loop_check_before_4@113@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 701 | !(_loop_check_before_4@113@01)]
(assert (not _loop_check_before_4@113@01))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 42
; [then-branch: 702 | False | live]
; [else-branch: 702 | True | live]
(push) ; 43
; [then-branch: 702 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 702 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 44
; [then-branch: 703 | False | live]
; [else-branch: 703 | True | live]
(push) ; 45
; [then-branch: 703 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 703 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 704 | False | live]
; [else-branch: 704 | True | live]
(push) ; 47
; [then-branch: 704 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 704 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 701 | _loop_check_before_4@113@01]
(assert _loop_check_before_4@113@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (and
    p2@17@01
    (not bypass2@84@01)
    (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))))
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] bypass1 ==> tmp1_1 == except1
(push) ; 36
; [then-branch: 705 | bypass1@83@01 | dead]
; [else-branch: 705 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 705 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_4 == break1
(push) ; 36
; [then-branch: 706 | bypass1@83@01 | dead]
; [else-branch: 706 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 706 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_0 == Exception_res
(push) ; 36
; [then-branch: 707 | bypass1@83@01 | dead]
; [else-branch: 707 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 707 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_2 == _err
(push) ; 36
; [then-branch: 708 | bypass1@83@01 | dead]
; [else-branch: 708 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 708 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_3 == _loop_check_before
(push) ; 36
; [then-branch: 709 | bypass1@83@01 | dead]
; [else-branch: 709 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 709 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1 == _loop_measures
(push) ; 36
; [then-branch: 710 | bypass1@83@01 | dead]
; [else-branch: 710 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 710 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2 == _loop_measures_4
(push) ; 36
; [then-branch: 711 | bypass2@84@01 | dead]
; [else-branch: 711 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 711 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_1 == except2
(push) ; 36
; [then-branch: 712 | bypass2@84@01 | dead]
; [else-branch: 712 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 712 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_3 == _loop_check_before_4
(push) ; 36
; [then-branch: 713 | bypass2@84@01 | dead]
; [else-branch: 713 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 713 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_4 == break2
(push) ; 36
; [then-branch: 714 | bypass2@84@01 | dead]
; [else-branch: 714 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 714 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_2 == _err_0
(push) ; 36
; [then-branch: 715 | bypass2@84@01 | dead]
; [else-branch: 715 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 715 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_0 == Exception_res_2
(push) ; 36
; [then-branch: 716 | bypass2@84@01 | dead]
; [else-branch: 716 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 716 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 30
; [then-branch: 717 | !(p3@132@01) | live]
; [else-branch: 717 | p3@132@01 | live]
(push) ; 31
; [then-branch: 717 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 31
(push) ; 31
; [else-branch: 717 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 32
; [then-branch: 718 | break1@110@01 | live]
; [else-branch: 718 | !(break1@110@01) | live]
(push) ; 33
; [then-branch: 718 | break1@110@01]
(assert break1@110@01)
(pop) ; 33
(push) ; 33
; [else-branch: 718 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3@132@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 719 | !(p3@132@01 && !(break1@110@01) && !(except1@103@01)) | dead]
; [else-branch: 719 | p3@132@01 && !(break1@110@01) && !(except1@103@01) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 719 | p3@132@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p3@132@01 (and (not break1@110@01) (not except1@103@01))))
(pop) ; 30
(pop) ; 29
(pop) ; 28
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 28
; [then-branch: 720 | !(p3@132@01) | live]
; [else-branch: 720 | p3@132@01 | live]
(push) ; 29
; [then-branch: 720 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 29
(push) ; 29
; [else-branch: 720 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 30
; [then-branch: 721 | break1@110@01 | live]
; [else-branch: 721 | !(break1@110@01) | live]
(push) ; 31
; [then-branch: 721 | break1@110@01]
(assert break1@110@01)
(pop) ; 31
(push) ; 31
; [else-branch: 721 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3@132@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 722 | !(p3@132@01 && !(break1@110@01) && !(except1@103@01)) | dead]
; [else-branch: 722 | p3@132@01 && !(break1@110@01) && !(except1@103@01) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 722 | p3@132@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p3@132@01 (and (not break1@110@01) (not except1@103@01))))
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 25
; [then-branch: 723 | !(p2_1@131@01) | live]
; [else-branch: 723 | p2_1@131@01 | live]
(push) ; 26
; [then-branch: 723 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 26
(push) ; 26
; [else-branch: 723 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 27
; [then-branch: 724 | break2@111@01 | live]
; [else-branch: 724 | !(break2@111@01) | live]
(push) ; 28
; [then-branch: 724 | break2@111@01]
(assert break2@111@01)
(pop) ; 28
(push) ; 28
; [else-branch: 724 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 725 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | dead]
; [else-branch: 725 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 725 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))
(pop) ; 25
(pop) ; 24
(pop) ; 23
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 23
; [then-branch: 726 | !(p2_1@131@01) | live]
; [else-branch: 726 | p2_1@131@01 | live]
(push) ; 24
; [then-branch: 726 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 24
(push) ; 24
; [else-branch: 726 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 25
; [then-branch: 727 | break2@111@01 | live]
; [else-branch: 727 | !(break2@111@01) | live]
(push) ; 26
; [then-branch: 727 | break2@111@01]
(assert break2@111@01)
(pop) ; 26
(push) ; 26
; [else-branch: 727 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 728 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | dead]
; [else-branch: 728 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 728 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))
(pop) ; 23
(pop) ; 22
(pop) ; 21
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 21
; [then-branch: 729 | !(p2_1@131@01) | live]
; [else-branch: 729 | p2_1@131@01 | live]
(push) ; 22
; [then-branch: 729 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 22
(push) ; 22
; [else-branch: 729 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 23
; [then-branch: 730 | break2@111@01 | live]
; [else-branch: 730 | !(break2@111@01) | live]
(push) ; 24
; [then-branch: 730 | break2@111@01]
(assert break2@111@01)
(pop) ; 24
(push) ; 24
; [else-branch: 730 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 731 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | dead]
; [else-branch: 731 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | live]
(set-option :timeout 0)
(push) ; 21
; [else-branch: 731 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))
(pop) ; 21
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 586 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01))]
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(pop) ; 19
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 19
; [then-branch: 732 | !(p2_1@131@01) | live]
; [else-branch: 732 | p2_1@131@01 | live]
(push) ; 20
; [then-branch: 732 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 20
(push) ; 20
; [else-branch: 732 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 21
; [then-branch: 733 | break2@111@01 | live]
; [else-branch: 733 | !(break2@111@01) | live]
(push) ; 22
; [then-branch: 733 | break2@111@01]
(assert break2@111@01)
(pop) ; 22
(push) ; 22
; [else-branch: 733 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 734 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 734 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 734 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01))]
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
; [exec]
; tmp := new()
(declare-const tmp@150@01 $Ref)
(assert (not (= tmp@150@01 $Ref.null)))
(assert (not (= tmp@150@01 tmp@123@01)))
(assert (not (= tmp@150@01 tmp1_2@66@01)))
(assert (not (= tmp@150@01 Exception_res@100@01)))
(assert (not (= tmp@150@01 c_9@25@01)))
(assert (not (= tmp@150@01 tmp2_0@63@01)))
(assert (not (= tmp@150@01 _cthread_157_0@19@01)))
(assert (not (= tmp@150@01 b_9@27@01)))
(assert (not (= tmp@150@01 tmp1_0@62@01)))
(assert (not (= tmp@150@01 Exception_res_2@101@01)))
(assert (not (= tmp@150@01 _err_0@104@01)))
(assert (not (= tmp@150@01 tmp2_2@67@01)))
(assert (not (= tmp@150@01 b@26@01)))
(assert (not (= tmp@150@01 _cthread_157@18@01)))
(assert (not (= tmp@150@01 _err@102@01)))
(assert (not (= tmp@150@01 c@24@01)))
(assert (not
  (=
    tmp@150@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
(assert (not
  (=
    tmp@150@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@114@01)))))))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 20
; [then-branch: 735 | !(p1_1@130@01) | live]
; [else-branch: 735 | p1_1@130@01 | live]
(push) ; 21
; [then-branch: 735 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 21
(push) ; 21
; [else-branch: 735 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 22
; [then-branch: 736 | break1@110@01 | live]
; [else-branch: 736 | !(break1@110@01) | live]
(push) ; 23
; [then-branch: 736 | break1@110@01]
(assert break1@110@01)
(pop) ; 23
(push) ; 23
; [else-branch: 736 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 737 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 737 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | live]
(push) ; 20
; [else-branch: 737 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01))]
(pop) ; 20
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 20
; [then-branch: 738 | !(p1_1@130@01) | live]
; [else-branch: 738 | p1_1@130@01 | live]
(push) ; 21
; [then-branch: 738 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 21
(push) ; 21
; [else-branch: 738 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 22
; [then-branch: 739 | break1@110@01 | live]
; [else-branch: 739 | !(break1@110@01) | live]
(push) ; 23
; [then-branch: 739 | break1@110@01]
(assert break1@110@01)
(pop) ; 23
(push) ; 23
; [else-branch: 739 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 740 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 740 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 740 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01))]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 21
; [then-branch: 741 | !(p2_1@131@01) | live]
; [else-branch: 741 | p2_1@131@01 | live]
(push) ; 22
; [then-branch: 741 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 22
(push) ; 22
; [else-branch: 741 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 23
; [then-branch: 742 | break2@111@01 | live]
; [else-branch: 742 | !(break2@111@01) | live]
(push) ; 24
; [then-branch: 742 | break2@111@01]
(assert break2@111@01)
(pop) ; 24
(push) ; 24
; [else-branch: 742 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 743 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 743 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | live]
(push) ; 21
; [else-branch: 743 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01))]
(pop) ; 21
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 21
; [then-branch: 744 | !(p2_1@131@01) | live]
; [else-branch: 744 | p2_1@131@01 | live]
(push) ; 22
; [then-branch: 744 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 22
(push) ; 22
; [else-branch: 744 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 23
; [then-branch: 745 | break2@111@01 | live]
; [else-branch: 745 | !(break2@111@01) | live]
(push) ; 24
; [then-branch: 745 | break2@111@01]
(assert break2@111@01)
(pop) ; 24
(push) ; 24
; [else-branch: 745 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 746 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 746 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 746 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01))]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 22
; [then-branch: 747 | !(p1_1@130@01) | live]
; [else-branch: 747 | p1_1@130@01 | live]
(push) ; 23
; [then-branch: 747 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 23
(push) ; 23
; [else-branch: 747 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 24
; [then-branch: 748 | break1@110@01 | live]
; [else-branch: 748 | !(break1@110@01) | live]
(push) ; 25
; [then-branch: 748 | break1@110@01]
(assert break1@110@01)
(pop) ; 25
(push) ; 25
; [else-branch: 748 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 749 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 749 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | live]
(push) ; 22
; [else-branch: 749 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01))]
(pop) ; 22
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 22
; [then-branch: 750 | !(p1_1@130@01) | live]
; [else-branch: 750 | p1_1@130@01 | live]
(push) ; 23
; [then-branch: 750 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 23
(push) ; 23
; [else-branch: 750 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 24
; [then-branch: 751 | break1@110@01 | live]
; [else-branch: 751 | !(break1@110@01) | live]
(push) ; 25
; [then-branch: 751 | break1@110@01]
(assert break1@110@01)
(pop) ; 25
(push) ; 25
; [else-branch: 751 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 752 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 752 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 752 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01))]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 23
; [then-branch: 753 | !(p2_1@131@01) | live]
; [else-branch: 753 | p2_1@131@01 | live]
(push) ; 24
; [then-branch: 753 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 24
(push) ; 24
; [else-branch: 753 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 25
; [then-branch: 754 | break2@111@01 | live]
; [else-branch: 754 | !(break2@111@01) | live]
(push) ; 26
; [then-branch: 754 | break2@111@01]
(assert break2@111@01)
(pop) ; 26
(push) ; 26
; [else-branch: 754 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 755 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 755 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | live]
(push) ; 23
; [else-branch: 755 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01))]
(pop) ; 23
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 23
; [then-branch: 756 | !(p2_1@131@01) | live]
; [else-branch: 756 | p2_1@131@01 | live]
(push) ; 24
; [then-branch: 756 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 24
(push) ; 24
; [else-branch: 756 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 25
; [then-branch: 757 | break2@111@01 | live]
; [else-branch: 757 | !(break2@111@01) | live]
(push) ; 26
; [then-branch: 757 | break2@111@01]
(assert break2@111@01)
(pop) ; 26
(push) ; 26
; [else-branch: 757 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 758 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 758 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 758 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01))]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 24
; [then-branch: 759 | !(p1_1@130@01) | live]
; [else-branch: 759 | p1_1@130@01 | live]
(push) ; 25
; [then-branch: 759 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 25
(push) ; 25
; [else-branch: 759 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 26
; [then-branch: 760 | break1@110@01 | live]
; [else-branch: 760 | !(break1@110@01) | live]
(push) ; 27
; [then-branch: 760 | break1@110@01]
(assert break1@110@01)
(pop) ; 27
(push) ; 27
; [else-branch: 760 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 761 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 761 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | live]
(push) ; 24
; [else-branch: 761 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01))]
(pop) ; 24
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 24
; [then-branch: 762 | !(p1_1@130@01) | live]
; [else-branch: 762 | p1_1@130@01 | live]
(push) ; 25
; [then-branch: 762 | !(p1_1@130@01)]
(assert (not p1_1@130@01))
(pop) ; 25
(push) ; 25
; [else-branch: 762 | p1_1@130@01]
(assert p1_1@130@01)
; [eval] !break1
(push) ; 26
; [then-branch: 763 | break1@110@01 | live]
; [else-branch: 763 | !(break1@110@01) | live]
(push) ; 27
; [then-branch: 763 | break1@110@01]
(assert break1@110@01)
(pop) ; 27
(push) ; 27
; [else-branch: 763 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 764 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 764 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 764 | !(p1_1@130@01 && !(break1@110@01) && !(except1@103@01))]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 25
; [then-branch: 765 | !(p2_1@131@01) | live]
; [else-branch: 765 | p2_1@131@01 | live]
(push) ; 26
; [then-branch: 765 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 26
(push) ; 26
; [else-branch: 765 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 27
; [then-branch: 766 | break2@111@01 | live]
; [else-branch: 766 | !(break2@111@01) | live]
(push) ; 28
; [then-branch: 766 | break2@111@01]
(assert break2@111@01)
(pop) ; 28
(push) ; 28
; [else-branch: 766 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 767 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 767 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | live]
(push) ; 25
; [else-branch: 767 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01))]
(pop) ; 25
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 25
; [then-branch: 768 | !(p2_1@131@01) | live]
; [else-branch: 768 | p2_1@131@01 | live]
(push) ; 26
; [then-branch: 768 | !(p2_1@131@01)]
(assert (not p2_1@131@01))
(pop) ; 26
(push) ; 26
; [else-branch: 768 | p2_1@131@01]
(assert p2_1@131@01)
; [eval] !break2
(push) ; 27
; [then-branch: 769 | break2@111@01 | live]
; [else-branch: 769 | !(break2@111@01) | live]
(push) ; 28
; [then-branch: 769 | break2@111@01]
(assert break2@111@01)
(pop) ; 28
(push) ; 28
; [else-branch: 769 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 770 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 770 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 770 | !(p2_1@131@01 && !(break2@111@01) && !(except2@105@01))]
; [exec]
; p1_3 := p3 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p3 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 771 | !(p3@132@01) | live]
; [else-branch: 771 | p3@132@01 | live]
(push) ; 27
; [then-branch: 771 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 27
(push) ; 27
; [else-branch: 771 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 28
; [then-branch: 772 | break1@110@01 | live]
; [else-branch: 772 | !(break1@110@01) | live]
(push) ; 29
; [then-branch: 772 | break1@110@01]
(assert break1@110@01)
(pop) ; 29
(push) ; 29
; [else-branch: 772 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 30
; [then-branch: 773 | except1@103@01 | live]
; [else-branch: 773 | !(except1@103@01) | live]
(push) ; 31
; [then-branch: 773 | except1@103@01]
(assert except1@103@01)
(pop) ; 31
(push) ; 31
; [else-branch: 773 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and (not break1@110@01) (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p3@132@01
  (and
    p3@132@01
    (=>
      (not break1@110@01)
      (and (not break1@110@01) (or (not except1@103@01) except1@103@01)))
    (or (not break1@110@01) break1@110@01))))
(assert (or p3@132@01 (not p3@132@01)))
; [exec]
; p2_3 := p4 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p4 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 774 | !(p4@133@01) | live]
; [else-branch: 774 | p4@133@01 | live]
(push) ; 27
; [then-branch: 774 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 27
(push) ; 27
; [else-branch: 774 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 28
; [then-branch: 775 | break2@111@01 | live]
; [else-branch: 775 | !(break2@111@01) | live]
(push) ; 29
; [then-branch: 775 | break2@111@01]
(assert break2@111@01)
(pop) ; 29
(push) ; 29
; [else-branch: 775 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(push) ; 30
; [then-branch: 776 | except2@105@01 | live]
; [else-branch: 776 | !(except2@105@01) | live]
(push) ; 31
; [then-branch: 776 | except2@105@01]
(assert except2@105@01)
(pop) ; 31
(push) ; 31
; [else-branch: 776 | !(except2@105@01)]
(assert (not except2@105@01))
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and (not break2@111@01) (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p4@133@01
  (and
    p4@133@01
    (=>
      (not break2@111@01)
      (and (not break2@111@01) (or (not except2@105@01) except2@105@01)))
    (or (not break2@111@01) break2@111@01))))
(assert (or p4@133@01 (not p4@133@01)))
; [exec]
; p3_1 := p3 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p3 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 777 | !(p3@132@01) | live]
; [else-branch: 777 | p3@132@01 | live]
(push) ; 27
; [then-branch: 777 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 27
(push) ; 27
; [else-branch: 777 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 28
; [then-branch: 778 | break1@110@01 | live]
; [else-branch: 778 | !(break1@110@01) | live]
(push) ; 29
; [then-branch: 778 | break1@110@01]
(assert break1@110@01)
(pop) ; 29
(push) ; 29
; [else-branch: 778 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 30
; [then-branch: 779 | except1@103@01 | live]
; [else-branch: 779 | !(except1@103@01) | live]
(push) ; 31
; [then-branch: 779 | except1@103@01]
(assert except1@103@01)
(pop) ; 31
(push) ; 31
; [else-branch: 779 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and (not break1@110@01) (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p3_1@151@01 Bool)
(assert (= p3_1@151@01 (and p3@132@01 (and (not break1@110@01) (not except1@103@01)))))
; [exec]
; p4_1 := p4 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p4 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 780 | !(p4@133@01) | live]
; [else-branch: 780 | p4@133@01 | live]
(push) ; 27
; [then-branch: 780 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 27
(push) ; 27
; [else-branch: 780 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 28
; [then-branch: 781 | break2@111@01 | live]
; [else-branch: 781 | !(break2@111@01) | live]
(push) ; 29
; [then-branch: 781 | break2@111@01]
(assert break2@111@01)
(pop) ; 29
(push) ; 29
; [else-branch: 781 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(push) ; 30
; [then-branch: 782 | except2@105@01 | live]
; [else-branch: 782 | !(except2@105@01) | live]
(push) ; 31
; [then-branch: 782 | except2@105@01]
(assert except2@105@01)
(pop) ; 31
(push) ; 31
; [else-branch: 782 | !(except2@105@01)]
(assert (not except2@105@01))
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and (not break2@111@01) (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p4_1@152@01 Bool)
(assert (= p4_1@152@01 (and p4@133@01 (and (not break2@111@01) (not except2@105@01)))))
; [eval] p1_3 && (!break1 && !except1)
; [then-branch: 783 | False | dead]
; [else-branch: 783 | True | live]
(push) ; 26
; [else-branch: 783 | True]
(pop) ; 26
; [eval] !(p1_3 && (!break1 && !except1))
; [eval] p1_3 && (!break1 && !except1)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 784 | True | live]
; [else-branch: 784 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 784 | True]
; [eval] p2_3 && (!break2 && !except2)
; [then-branch: 785 | False | dead]
; [else-branch: 785 | True | live]
(push) ; 27
; [else-branch: 785 | True]
(pop) ; 27
; [eval] !(p2_3 && (!break2 && !except2))
; [eval] p2_3 && (!break2 && !except2)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 786 | True | live]
; [else-branch: 786 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 786 | True]
; [eval] p3 && (!break1 && !except1)
(push) ; 28
; [then-branch: 787 | !(p3@132@01) | live]
; [else-branch: 787 | p3@132@01 | live]
(push) ; 29
; [then-branch: 787 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 29
(push) ; 29
; [else-branch: 787 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 30
; [then-branch: 788 | break1@110@01 | live]
; [else-branch: 788 | !(break1@110@01) | live]
(push) ; 31
; [then-branch: 788 | break1@110@01]
(assert break1@110@01)
(pop) ; 31
(push) ; 31
; [else-branch: 788 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=> p3@132@01 (and p3@132@01 (or (not break1@110@01) break1@110@01))))
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3@132@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3@132@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 789 | p3@132@01 && !(break1@110@01) && !(except1@103@01) | live]
; [else-branch: 789 | !(p3@132@01 && !(break1@110@01) && !(except1@103@01)) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 789 | p3@132@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p3@132@01 (and (not break1@110@01) (not except1@103@01))))
; [exec]
; c_4.Container_value := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 29
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 29
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_value@153@01 $Ref)
(assert (= Container_value@153@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p4 && (!break2 && !except2)
(push) ; 29
; [then-branch: 790 | !(p4@133@01) | live]
; [else-branch: 790 | p4@133@01 | live]
(push) ; 30
; [then-branch: 790 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 30
(push) ; 30
; [else-branch: 790 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 31
; [then-branch: 791 | break2@111@01 | live]
; [else-branch: 791 | !(break2@111@01) | live]
(push) ; 32
; [then-branch: 791 | break2@111@01]
(assert break2@111@01)
(pop) ; 32
(push) ; 32
; [else-branch: 791 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p4@133@01 (and p4@133@01 (or (not break2@111@01) break2@111@01))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4@133@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4@133@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 792 | p4@133@01 && !(break2@111@01) && !(except2@105@01) | live]
; [else-branch: 792 | !(p4@133@01 && !(break2@111@01) && !(except2@105@01)) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 792 | p4@133@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p4@133@01 (and (not break2@111@01) (not except2@105@01))))
; [exec]
; c_4_0.Container_valuep := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 30
(pop) ; 30
; Joined path conditions
(declare-const Container_valuep@154@01 $Ref)
(assert (= Container_valuep@154@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p3 && (!break1 && !except1)
(push) ; 30
; [then-branch: 793 | !(p3@132@01) | live]
; [else-branch: 793 | p3@132@01 | live]
(push) ; 31
; [then-branch: 793 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 31
(push) ; 31
; [else-branch: 793 | p3@132@01]
; [eval] !break1
(push) ; 32
; [then-branch: 794 | break1@110@01 | live]
; [else-branch: 794 | !(break1@110@01) | live]
(push) ; 33
; [then-branch: 794 | break1@110@01]
(assert break1@110@01)
(pop) ; 33
(push) ; 33
; [else-branch: 794 | !(break1@110@01)]
; [eval] !except1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (=> p3@132@01 (or (not break1@110@01) break1@110@01)))
(push) ; 30
(set-option :timeout 10)
(assert (not (not (and p3@132@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3@132@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 795 | p3@132@01 && !(break1@110@01) && !(except1@103@01) | live]
; [else-branch: 795 | !(p3@132@01 && !(break1@110@01) && !(except1@103@01)) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 795 | p3@132@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p3@132@01 (and (not break1@110@01) (not except1@103@01))))
; [exec]
; break1 := true
; [eval] p4 && (!break2 && !except2)
(push) ; 31
; [then-branch: 796 | !(p4@133@01) | live]
; [else-branch: 796 | p4@133@01 | live]
(push) ; 32
; [then-branch: 796 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 32
(push) ; 32
; [else-branch: 796 | p4@133@01]
; [eval] !break2
(push) ; 33
; [then-branch: 797 | break2@111@01 | live]
; [else-branch: 797 | !(break2@111@01) | live]
(push) ; 34
; [then-branch: 797 | break2@111@01]
(assert break2@111@01)
(pop) ; 34
(push) ; 34
; [else-branch: 797 | !(break2@111@01)]
; [eval] !except2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (=> p4@133@01 (or (not break2@111@01) break2@111@01)))
(push) ; 31
(set-option :timeout 10)
(assert (not (not (and p4@133@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4@133@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 798 | p4@133@01 && !(break2@111@01) && !(except2@105@01) | live]
; [else-branch: 798 | !(p4@133@01 && !(break2@111@01) && !(except2@105@01)) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 798 | p4@133@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p4@133@01 (and (not break2@111@01) (not except2@105@01))))
; [exec]
; break2 := true
; [eval] p1_0 && (!break1 && !except1)
(push) ; 32
; [then-branch: 799 | !(p1_0@128@01) | live]
; [else-branch: 799 | p1_0@128@01 | live]
(push) ; 33
; [then-branch: 799 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 33
(push) ; 33
; [else-branch: 799 | p1_0@128@01]
; [eval] !break1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 800 | False | dead]
; [else-branch: 800 | True | live]
(push) ; 32
; [else-branch: 800 | True]
(pop) ; 32
; [eval] !(p1_0 && (!break1 && !except1))
; [eval] p1_0 && (!break1 && !except1)
(push) ; 32
; [then-branch: 801 | !(p1_0@128@01) | live]
; [else-branch: 801 | p1_0@128@01 | live]
(push) ; 33
; [then-branch: 801 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 33
(push) ; 33
; [else-branch: 801 | p1_0@128@01]
; [eval] !break1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 802 | True | live]
; [else-branch: 802 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 802 | True]
; [eval] p2_0 && (!break2 && !except2)
(push) ; 33
; [then-branch: 803 | !(p2_0@129@01) | live]
; [else-branch: 803 | p2_0@129@01 | live]
(push) ; 34
; [then-branch: 803 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 34
(push) ; 34
; [else-branch: 803 | p2_0@129@01]
; [eval] !break2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 804 | False | dead]
; [else-branch: 804 | True | live]
(push) ; 33
; [else-branch: 804 | True]
(pop) ; 33
; [eval] !(p2_0 && (!break2 && !except2))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 33
; [then-branch: 805 | !(p2_0@129@01) | live]
; [else-branch: 805 | p2_0@129@01 | live]
(push) ; 34
; [then-branch: 805 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 34
(push) ; 34
; [else-branch: 805 | p2_0@129@01]
; [eval] !break2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 806 | True | live]
; [else-branch: 806 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 806 | True]
; [exec]
; assert (p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true) &&
;   (p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true)
; [eval] p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true
; [eval] p1_0 && (!break1 && !except1)
(push) ; 34
; [then-branch: 807 | !(p1_0@128@01) | live]
; [else-branch: 807 | p1_0@128@01 | live]
(push) ; 35
; [then-branch: 807 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 35
(push) ; 35
; [else-branch: 807 | p1_0@128@01]
; [eval] !break1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 808 | False | dead]
; [else-branch: 808 | True | live]
(push) ; 35
; [else-branch: 808 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 809 | !(p2_0@129@01) | live]
; [else-branch: 809 | p2_0@129@01 | live]
(push) ; 35
; [then-branch: 809 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 35
(push) ; 35
; [else-branch: 809 | p2_0@129@01]
; [eval] !break2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 810 | False | dead]
; [else-branch: 810 | True | live]
(push) ; 35
; [else-branch: 810 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 34
; [then-branch: 811 | !(p1@16@01) | live]
; [else-branch: 811 | p1@16@01 | live]
(push) ; 35
; [then-branch: 811 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 35
(push) ; 35
; [else-branch: 811 | p1@16@01]
(assert p1@16@01)
; [eval] !bypass1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 812 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 812 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 812 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 34
; [then-branch: 813 | !(p2@17@01) | live]
; [else-branch: 813 | p2@17@01 | live]
(push) ; 35
; [then-branch: 813 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 35
(push) ; 35
; [else-branch: 813 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 814 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 814 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 814 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1
(push) ; 34
; [then-branch: 815 | !(p1@16@01) | live]
; [else-branch: 815 | p1@16@01 | live]
(push) ; 35
; [then-branch: 815 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 35
(push) ; 35
; [else-branch: 815 | p1@16@01]
; [eval] !bypass1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 816 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 816 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 816 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2
(push) ; 35
; [then-branch: 817 | !(p2@17@01) | live]
; [else-branch: 817 | p2@17@01 | live]
(push) ; 36
; [then-branch: 817 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 36
(push) ; 36
; [else-branch: 817 | p2@17@01]
; [eval] !bypass2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 818 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 818 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 818 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1 ==> issubtype(typeof(c_4.Container_value), int())
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 819 | !(p1@16@01) | live]
; [else-branch: 819 | p1@16@01 | live]
(push) ; 37
; [then-branch: 819 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 819 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 820 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 820 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 820 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] issubtype(typeof(c_4.Container_value), int())
; [eval] typeof(c_4.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
(push) ; 36
(assert (not (=>
  (and p1@16@01 (not bypass1@83@01))
  (issubtype<Bool> (typeof<PyType> Container_value@153@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (issubtype<Bool> (typeof<PyType> Container_value@153@01) (as int<PyType>  PyType))))
; [eval] p2 && !bypass2 ==> issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 821 | !(p2@17@01) | live]
; [else-branch: 821 | p2@17@01 | live]
(push) ; 37
; [then-branch: 821 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 821 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 822 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 822 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 822 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] typeof(c_4_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
(push) ; 36
(assert (not (=>
  (and p2@17@01 (not bypass2@84@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@154@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@154@01) (as int<PyType>  PyType))))
; [eval] p1 && !bypass1 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 823 | !(p1@16@01) | live]
; [else-branch: 823 | p1@16@01 | live]
(push) ; 37
; [then-branch: 823 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 823 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 824 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 824 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 824 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] !idle1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 825 | True | live]
; [else-branch: 825 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 825 | True]
; [eval] _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before@112@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before@112@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 826 | _loop_check_before@112@01 | live]
; [else-branch: 826 | !(_loop_check_before@112@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 826 | _loop_check_before@112@01]
(assert _loop_check_before@112@01)
; [eval] _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 827 | False | live]
; [else-branch: 827 | True | live]
(push) ; 43
; [then-branch: 827 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 827 | True]
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 44
; [then-branch: 828 | False | live]
; [else-branch: 828 | True | live]
(push) ; 45
; [then-branch: 828 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 828 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 46
; [then-branch: 829 | False | live]
; [else-branch: 829 | True | live]
(push) ; 47
; [then-branch: 829 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 829 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 48
; [then-branch: 830 | False | live]
; [else-branch: 830 | True | live]
(push) ; 49
; [then-branch: 830 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 830 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 831 | False | live]
; [else-branch: 831 | True | live]
(push) ; 51
; [then-branch: 831 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 831 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 826 | !(_loop_check_before@112@01)]
(assert (not _loop_check_before@112@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before@112@01) _loop_check_before@112@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before@112@01) _loop_check_before@112@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (and
    p1@16@01
    (not bypass1@83@01)
    (or (not _loop_check_before@112@01) _loop_check_before@112@01))))
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 832 | !(p2@17@01) | live]
; [else-branch: 832 | p2@17@01 | live]
(push) ; 37
; [then-branch: 832 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 832 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 833 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 833 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 833 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] !idle2
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 834 | True | live]
; [else-branch: 834 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 834 | True]
; [eval] _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_4@113@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_4@113@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 835 | _loop_check_before_4@113@01 | live]
; [else-branch: 835 | !(_loop_check_before_4@113@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 835 | _loop_check_before_4@113@01]
(assert _loop_check_before_4@113@01)
; [eval] _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 836 | False | live]
; [else-branch: 836 | True | live]
(push) ; 43
; [then-branch: 836 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 836 | True]
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none
; [eval] perm(MustTerminate_0(_cthread_157_0))
(push) ; 44
; [then-branch: 837 | False | live]
; [else-branch: 837 | True | live]
(push) ; 45
; [then-branch: 837 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 837 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 46
; [then-branch: 838 | False | live]
; [else-branch: 838 | True | live]
(push) ; 47
; [then-branch: 838 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 838 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 48
; [then-branch: 839 | False | live]
; [else-branch: 839 | True | live]
(push) ; 49
; [then-branch: 839 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 839 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 840 | False | live]
; [else-branch: 840 | True | live]
(push) ; 51
; [then-branch: 840 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 840 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 835 | !(_loop_check_before_4@113@01)]
(assert (not _loop_check_before_4@113@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (and
    p2@17@01
    (not bypass2@84@01)
    (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))))
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 841 | !(p1@16@01) | live]
; [else-branch: 841 | p1@16@01 | live]
(push) ; 37
; [then-branch: 841 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 841 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 842 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 842 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 842 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 843 | True | live]
; [else-branch: 843 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 843 | True]
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before@112@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before@112@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 844 | !(_loop_check_before@112@01) | live]
; [else-branch: 844 | _loop_check_before@112@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 844 | !(_loop_check_before@112@01)]
(assert (not _loop_check_before@112@01))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 42
; [then-branch: 845 | False | live]
; [else-branch: 845 | True | live]
(push) ; 43
; [then-branch: 845 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 845 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 44
; [then-branch: 846 | False | live]
; [else-branch: 846 | True | live]
(push) ; 45
; [then-branch: 846 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 846 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 847 | False | live]
; [else-branch: 847 | True | live]
(push) ; 47
; [then-branch: 847 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 847 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 844 | _loop_check_before@112@01]
(assert _loop_check_before@112@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before@112@01 (not _loop_check_before@112@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before@112@01 (not _loop_check_before@112@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (and
    p1@16@01
    (not bypass1@83@01)
    (or _loop_check_before@112@01 (not _loop_check_before@112@01)))))
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 848 | !(p2@17@01) | live]
; [else-branch: 848 | p2@17@01 | live]
(push) ; 37
; [then-branch: 848 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 848 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 849 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 849 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 849 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !idle2
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 850 | True | live]
; [else-branch: 850 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 850 | True]
; [eval] !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_4
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_4@113@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_4@113@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 851 | !(_loop_check_before_4@113@01) | live]
; [else-branch: 851 | _loop_check_before_4@113@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 851 | !(_loop_check_before_4@113@01)]
(assert (not _loop_check_before_4@113@01))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 42
; [then-branch: 852 | False | live]
; [else-branch: 852 | True | live]
(push) ; 43
; [then-branch: 852 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 852 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 44
; [then-branch: 853 | False | live]
; [else-branch: 853 | True | live]
(push) ; 45
; [then-branch: 853 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 853 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 854 | False | live]
; [else-branch: 854 | True | live]
(push) ; 47
; [then-branch: 854 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 854 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 851 | _loop_check_before_4@113@01]
(assert _loop_check_before_4@113@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (and
    p2@17@01
    (not bypass2@84@01)
    (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))))
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] bypass1 ==> tmp1_1 == except1
(push) ; 36
; [then-branch: 855 | bypass1@83@01 | dead]
; [else-branch: 855 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 855 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_4 == break1
(push) ; 36
; [then-branch: 856 | bypass1@83@01 | dead]
; [else-branch: 856 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 856 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_0 == Exception_res
(push) ; 36
; [then-branch: 857 | bypass1@83@01 | dead]
; [else-branch: 857 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 857 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_2 == _err
(push) ; 36
; [then-branch: 858 | bypass1@83@01 | dead]
; [else-branch: 858 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 858 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_3 == _loop_check_before
(push) ; 36
; [then-branch: 859 | bypass1@83@01 | dead]
; [else-branch: 859 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 859 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1 == _loop_measures
(push) ; 36
; [then-branch: 860 | bypass1@83@01 | dead]
; [else-branch: 860 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 860 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2 == _loop_measures_4
(push) ; 36
; [then-branch: 861 | bypass2@84@01 | dead]
; [else-branch: 861 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 861 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_1 == except2
(push) ; 36
; [then-branch: 862 | bypass2@84@01 | dead]
; [else-branch: 862 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 862 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_3 == _loop_check_before_4
(push) ; 36
; [then-branch: 863 | bypass2@84@01 | dead]
; [else-branch: 863 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 863 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_4 == break2
(push) ; 36
; [then-branch: 864 | bypass2@84@01 | dead]
; [else-branch: 864 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 864 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_2 == _err_0
(push) ; 36
; [then-branch: 865 | bypass2@84@01 | dead]
; [else-branch: 865 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 865 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_0 == Exception_res_2
(push) ; 36
; [then-branch: 866 | bypass2@84@01 | dead]
; [else-branch: 866 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 866 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 31
; [then-branch: 867 | !(p4@133@01) | live]
; [else-branch: 867 | p4@133@01 | live]
(push) ; 32
; [then-branch: 867 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 32
(push) ; 32
; [else-branch: 867 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 33
; [then-branch: 868 | break2@111@01 | live]
; [else-branch: 868 | !(break2@111@01) | live]
(push) ; 34
; [then-branch: 868 | break2@111@01]
(assert break2@111@01)
(pop) ; 34
(push) ; 34
; [else-branch: 868 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4@133@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 869 | !(p4@133@01 && !(break2@111@01) && !(except2@105@01)) | dead]
; [else-branch: 869 | p4@133@01 && !(break2@111@01) && !(except2@105@01) | live]
(set-option :timeout 0)
(push) ; 31
; [else-branch: 869 | p4@133@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p4@133@01 (and (not break2@111@01) (not except2@105@01))))
(pop) ; 31
(pop) ; 30
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 30
; [then-branch: 870 | !(p3@132@01) | live]
; [else-branch: 870 | p3@132@01 | live]
(push) ; 31
; [then-branch: 870 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 31
(push) ; 31
; [else-branch: 870 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 32
; [then-branch: 871 | break1@110@01 | live]
; [else-branch: 871 | !(break1@110@01) | live]
(push) ; 33
; [then-branch: 871 | break1@110@01]
(assert break1@110@01)
(pop) ; 33
(push) ; 33
; [else-branch: 871 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3@132@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 872 | !(p3@132@01 && !(break1@110@01) && !(except1@103@01)) | dead]
; [else-branch: 872 | p3@132@01 && !(break1@110@01) && !(except1@103@01) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 872 | p3@132@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p3@132@01 (and (not break1@110@01) (not except1@103@01))))
(pop) ; 30
(pop) ; 29
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 29
; [then-branch: 873 | !(p4@133@01) | live]
; [else-branch: 873 | p4@133@01 | live]
(push) ; 30
; [then-branch: 873 | !(p4@133@01)]
(assert (not p4@133@01))
(pop) ; 30
(push) ; 30
; [else-branch: 873 | p4@133@01]
(assert p4@133@01)
; [eval] !break2
(push) ; 31
; [then-branch: 874 | break2@111@01 | live]
; [else-branch: 874 | !(break2@111@01) | live]
(push) ; 32
; [then-branch: 874 | break2@111@01]
(assert break2@111@01)
(pop) ; 32
(push) ; 32
; [else-branch: 874 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4@133@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 875 | !(p4@133@01 && !(break2@111@01) && !(except2@105@01)) | dead]
; [else-branch: 875 | p4@133@01 && !(break2@111@01) && !(except2@105@01) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 875 | p4@133@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p4@133@01 (and (not break2@111@01) (not except2@105@01))))
(pop) ; 29
(pop) ; 28
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 28
; [then-branch: 876 | !(p3@132@01) | live]
; [else-branch: 876 | p3@132@01 | live]
(push) ; 29
; [then-branch: 876 | !(p3@132@01)]
(assert (not p3@132@01))
(pop) ; 29
(push) ; 29
; [else-branch: 876 | p3@132@01]
(assert p3@132@01)
; [eval] !break1
(push) ; 30
; [then-branch: 877 | break1@110@01 | live]
; [else-branch: 877 | !(break1@110@01) | live]
(push) ; 31
; [then-branch: 877 | break1@110@01]
(assert break1@110@01)
(pop) ; 31
(push) ; 31
; [else-branch: 877 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3@132@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 878 | !(p3@132@01 && !(break1@110@01) && !(except1@103@01)) | dead]
; [else-branch: 878 | p3@132@01 && !(break1@110@01) && !(except1@103@01) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 878 | p3@132@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p3@132@01 (and (not break1@110@01) (not except1@103@01))))
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 734 | p2_1@131@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@131@01 (and (not break2@111@01) (not except2@105@01))))
(pop) ; 19
(pop) ; 18
(push) ; 18
; [else-branch: 583 | p1_1@130@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@130@01 (and (not break1@110@01) (not except1@103@01))))
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 252 | !(p2_0@129@01 && !(break2@111@01) && !(except2@105@01))]
(assert (not (and p2_0@129@01 (and (not break2@111@01) (not except2@105@01)))))
(pop) ; 15
; [eval] !(p2_0 && (!break2 && !except2))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 15
; [then-branch: 879 | !(p2_0@129@01) | live]
; [else-branch: 879 | p2_0@129@01 | live]
(push) ; 16
; [then-branch: 879 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 16
(push) ; 16
; [else-branch: 879 | p2_0@129@01]
(assert p2_0@129@01)
; [eval] !break2
(push) ; 17
; [then-branch: 880 | break2@111@01 | live]
; [else-branch: 880 | !(break2@111@01) | live]
(push) ; 18
; [then-branch: 880 | break2@111@01]
(assert break2@111@01)
(pop) ; 18
(push) ; 18
; [else-branch: 880 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (and p2_0@129@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and p2_0@129@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 881 | !(p2_0@129@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 881 | p2_0@129@01 && !(break2@111@01) && !(except2@105@01) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 881 | !(p2_0@129@01 && !(break2@111@01) && !(except2@105@01))]
(assert (not (and p2_0@129@01 (and (not break2@111@01) (not except2@105@01)))))
; [exec]
; p1_1 := p1_0 && (!break1 && !except1 && bool___unbox__(b_4))
; [eval] p1_0 && (!break1 && !except1 && bool___unbox__(b_4))
(push) ; 16
; [then-branch: 882 | !(p1_0@128@01) | live]
; [else-branch: 882 | p1_0@128@01 | live]
(push) ; 17
; [then-branch: 882 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 17
(push) ; 17
; [else-branch: 882 | p1_0@128@01]
; [eval] !break1
(push) ; 18
; [then-branch: 883 | break1@110@01 | live]
; [else-branch: 883 | !(break1@110@01) | live]
(push) ; 19
; [then-branch: 883 | break1@110@01]
(assert break1@110@01)
(pop) ; 19
(push) ; 19
; [else-branch: 883 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 20
; [then-branch: 884 | except1@103@01 | live]
; [else-branch: 884 | !(except1@103@01) | live]
(push) ; 21
; [then-branch: 884 | except1@103@01]
(assert except1@103@01)
(pop) ; 21
(push) ; 21
; [else-branch: 884 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] bool___unbox__(b_4)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@26@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@26@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1@103@01)
  (and
    (not except1@103@01)
    (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@26@01))))
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and
    (not break1@110@01)
    (=>
      (not except1@103@01)
      (and
        (not except1@103@01)
        (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b@26@01)))
    (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_0@128@01
  (and
    (=>
      (not break1@110@01)
      (and
        (not break1@110@01)
        (=>
          (not except1@103@01)
          (and
            (not except1@103@01)
            (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
            (bool___unbox__%precondition $Snap.unit b@26@01)))
        (or (not except1@103@01) except1@103@01)))
    (or (not break1@110@01) break1@110@01))))
(declare-const p1_1@155@01 Bool)
(assert (=
  p1_1@155@01
  (and
    p1_0@128@01
    (and
      (not break1@110@01)
      (and (not except1@103@01) (bool___unbox__ $Snap.unit b@26@01))))))
; [exec]
; p2_1 := p2_0 && (!break2 && !except2 && bool___unbox__(b_4_0))
; [eval] p2_0 && (!break2 && !except2 && bool___unbox__(b_4_0))
(push) ; 16
; [then-branch: 885 | !(p2_0@129@01) | live]
; [else-branch: 885 | p2_0@129@01 | live]
(push) ; 17
; [then-branch: 885 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 17
(push) ; 17
; [else-branch: 885 | p2_0@129@01]
(assert p2_0@129@01)
; [eval] !break2
(push) ; 18
; [then-branch: 886 | break2@111@01 | live]
; [else-branch: 886 | !(break2@111@01) | live]
(push) ; 19
; [then-branch: 886 | break2@111@01]
(assert break2@111@01)
(pop) ; 19
(push) ; 19
; [else-branch: 886 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(push) ; 20
; [then-branch: 887 | except2@105@01 | live]
; [else-branch: 887 | !(except2@105@01) | live]
(push) ; 21
; [then-branch: 887 | except2@105@01]
(assert except2@105@01)
(pop) ; 21
(push) ; 21
; [else-branch: 887 | !(except2@105@01)]
(assert (not except2@105@01))
; [eval] bool___unbox__(b_4_0)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_9@27@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@27@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2@105@01)
  (and
    (not except2@105@01)
    (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_9@27@01))))
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and
    (not break2@111@01)
    (=>
      (not except2@105@01)
      (and
        (not except2@105@01)
        (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_9@27@01)))
    (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_0@129@01
  (and
    p2_0@129@01
    (=>
      (not break2@111@01)
      (and
        (not break2@111@01)
        (=>
          (not except2@105@01)
          (and
            (not except2@105@01)
            (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
            (bool___unbox__%precondition $Snap.unit b_9@27@01)))
        (or (not except2@105@01) except2@105@01)))
    (or (not break2@111@01) break2@111@01))))
(declare-const p2_1@156@01 Bool)
(assert (=
  p2_1@156@01
  (and
    p2_0@129@01
    (and
      (not break2@111@01)
      (and (not except2@105@01) (bool___unbox__ $Snap.unit b_9@27@01))))))
; [exec]
; p3 := p1_0 && (!break1 && !except1 && !bool___unbox__(b_4))
; [eval] p1_0 && (!break1 && !except1 && !bool___unbox__(b_4))
(push) ; 16
; [then-branch: 888 | !(p1_0@128@01) | live]
; [else-branch: 888 | p1_0@128@01 | live]
(push) ; 17
; [then-branch: 888 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 17
(push) ; 17
; [else-branch: 888 | p1_0@128@01]
; [eval] !break1
(push) ; 18
; [then-branch: 889 | break1@110@01 | live]
; [else-branch: 889 | !(break1@110@01) | live]
(push) ; 19
; [then-branch: 889 | break1@110@01]
(assert break1@110@01)
(pop) ; 19
(push) ; 19
; [else-branch: 889 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 20
; [then-branch: 890 | except1@103@01 | live]
; [else-branch: 890 | !(except1@103@01) | live]
(push) ; 21
; [then-branch: 890 | except1@103@01]
(assert except1@103@01)
(pop) ; 21
(push) ; 21
; [else-branch: 890 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] !bool___unbox__(b_4)
; [eval] bool___unbox__(b_4)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@26@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@26@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1@103@01)
  (and
    (not except1@103@01)
    (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@26@01))))
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and
    (not break1@110@01)
    (=>
      (not except1@103@01)
      (and
        (not except1@103@01)
        (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b@26@01)))
    (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3@157@01 Bool)
(assert (=
  p3@157@01
  (and
    p1_0@128@01
    (and
      (not break1@110@01)
      (and (not except1@103@01) (not (bool___unbox__ $Snap.unit b@26@01)))))))
; [exec]
; p4 := p2_0 && (!break2 && !except2 && !bool___unbox__(b_4_0))
; [eval] p2_0 && (!break2 && !except2 && !bool___unbox__(b_4_0))
(push) ; 16
; [then-branch: 891 | !(p2_0@129@01) | live]
; [else-branch: 891 | p2_0@129@01 | live]
(push) ; 17
; [then-branch: 891 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 17
(push) ; 17
; [else-branch: 891 | p2_0@129@01]
(assert p2_0@129@01)
; [eval] !break2
(push) ; 18
; [then-branch: 892 | break2@111@01 | live]
; [else-branch: 892 | !(break2@111@01) | live]
(push) ; 19
; [then-branch: 892 | break2@111@01]
(assert break2@111@01)
(pop) ; 19
(push) ; 19
; [else-branch: 892 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(push) ; 20
; [then-branch: 893 | except2@105@01 | live]
; [else-branch: 893 | !(except2@105@01) | live]
(push) ; 21
; [then-branch: 893 | except2@105@01]
(assert except2@105@01)
(pop) ; 21
(push) ; 21
; [else-branch: 893 | !(except2@105@01)]
(assert (not except2@105@01))
; [eval] !bool___unbox__(b_4_0)
; [eval] bool___unbox__(b_4_0)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_9@27@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@27@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2@105@01)
  (and
    (not except2@105@01)
    (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_9@27@01))))
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and
    (not break2@111@01)
    (=>
      (not except2@105@01)
      (and
        (not except2@105@01)
        (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_9@27@01)))
    (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4@158@01 Bool)
(assert (=
  p4@158@01
  (and
    p2_0@129@01
    (and
      (not break2@111@01)
      (and (not except2@105@01) (not (bool___unbox__ $Snap.unit b_9@27@01)))))))
; [exec]
; p1_2 := p1_1 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p1_1 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 894 | !(p1_1@155@01) | live]
; [else-branch: 894 | p1_1@155@01 | live]
(push) ; 17
; [then-branch: 894 | !(p1_1@155@01)]
(assert (not p1_1@155@01))
(pop) ; 17
(push) ; 17
; [else-branch: 894 | p1_1@155@01]
(assert p1_1@155@01)
; [eval] !break1
(push) ; 18
; [then-branch: 895 | break1@110@01 | live]
; [else-branch: 895 | !(break1@110@01) | live]
(push) ; 19
; [then-branch: 895 | break1@110@01]
(assert break1@110@01)
(pop) ; 19
(push) ; 19
; [else-branch: 895 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 20
; [then-branch: 896 | except1@103@01 | live]
; [else-branch: 896 | !(except1@103@01) | live]
(push) ; 21
; [then-branch: 896 | except1@103@01]
(assert except1@103@01)
(pop) ; 21
(push) ; 21
; [else-branch: 896 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and (not break1@110@01) (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_1@155@01
  (and
    p1_1@155@01
    (=>
      (not break1@110@01)
      (and (not break1@110@01) (or (not except1@103@01) except1@103@01)))
    (or (not break1@110@01) break1@110@01))))
(assert (or p1_1@155@01 (not p1_1@155@01)))
; [exec]
; p2_2 := p2_1 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_1 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 897 | !(p2_1@156@01) | live]
; [else-branch: 897 | p2_1@156@01 | live]
(push) ; 17
; [then-branch: 897 | !(p2_1@156@01)]
(assert (not p2_1@156@01))
(pop) ; 17
(push) ; 17
; [else-branch: 897 | p2_1@156@01]
(assert p2_1@156@01)
; [eval] !break2
(push) ; 18
; [then-branch: 898 | break2@111@01 | live]
; [else-branch: 898 | !(break2@111@01) | live]
(push) ; 19
; [then-branch: 898 | break2@111@01]
(assert break2@111@01)
(pop) ; 19
(push) ; 19
; [else-branch: 898 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(push) ; 20
; [then-branch: 899 | except2@105@01 | live]
; [else-branch: 899 | !(except2@105@01) | live]
(push) ; 21
; [then-branch: 899 | except2@105@01]
(assert except2@105@01)
(pop) ; 21
(push) ; 21
; [else-branch: 899 | !(except2@105@01)]
(assert (not except2@105@01))
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and (not break2@111@01) (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_1@156@01
  (and
    p2_1@156@01
    (=>
      (not break2@111@01)
      (and (not break2@111@01) (or (not except2@105@01) except2@105@01)))
    (or (not break2@111@01) break2@111@01))))
(assert (or p2_1@156@01 (not p2_1@156@01)))
; [exec]
; p3_0 := p1_1 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p1_1 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 900 | !(p1_1@155@01) | live]
; [else-branch: 900 | p1_1@155@01 | live]
(push) ; 17
; [then-branch: 900 | !(p1_1@155@01)]
(assert (not p1_1@155@01))
(pop) ; 17
(push) ; 17
; [else-branch: 900 | p1_1@155@01]
(assert p1_1@155@01)
; [eval] !break1
(push) ; 18
; [then-branch: 901 | break1@110@01 | live]
; [else-branch: 901 | !(break1@110@01) | live]
(push) ; 19
; [then-branch: 901 | break1@110@01]
(assert break1@110@01)
(pop) ; 19
(push) ; 19
; [else-branch: 901 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 20
; [then-branch: 902 | except1@103@01 | live]
; [else-branch: 902 | !(except1@103@01) | live]
(push) ; 21
; [then-branch: 902 | except1@103@01]
(assert except1@103@01)
(pop) ; 21
(push) ; 21
; [else-branch: 902 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and (not break1@110@01) (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3_0@159@01 Bool)
(assert (= p3_0@159@01 (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01)))))
; [exec]
; p4_0 := p2_1 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_1 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 903 | !(p2_1@156@01) | live]
; [else-branch: 903 | p2_1@156@01 | live]
(push) ; 17
; [then-branch: 903 | !(p2_1@156@01)]
(assert (not p2_1@156@01))
(pop) ; 17
(push) ; 17
; [else-branch: 903 | p2_1@156@01]
(assert p2_1@156@01)
; [eval] !break2
(push) ; 18
; [then-branch: 904 | break2@111@01 | live]
; [else-branch: 904 | !(break2@111@01) | live]
(push) ; 19
; [then-branch: 904 | break2@111@01]
(assert break2@111@01)
(pop) ; 19
(push) ; 19
; [else-branch: 904 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(push) ; 20
; [then-branch: 905 | except2@105@01 | live]
; [else-branch: 905 | !(except2@105@01) | live]
(push) ; 21
; [then-branch: 905 | except2@105@01]
(assert except2@105@01)
(pop) ; 21
(push) ; 21
; [else-branch: 905 | !(except2@105@01)]
(assert (not except2@105@01))
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and (not break2@111@01) (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4_0@160@01 Bool)
(assert (= p4_0@160@01 (and p2_1@156@01 (and (not break2@111@01) (not except2@105@01)))))
; [eval] p1_2 && (!break1 && !except1)
; [then-branch: 906 | False | dead]
; [else-branch: 906 | True | live]
(push) ; 16
; [else-branch: 906 | True]
(pop) ; 16
; [eval] !(p1_2 && (!break1 && !except1))
; [eval] p1_2 && (!break1 && !except1)
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 907 | True | live]
; [else-branch: 907 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 907 | True]
; [eval] p2_2 && (!break2 && !except2)
; [then-branch: 908 | False | dead]
; [else-branch: 908 | True | live]
(push) ; 17
; [else-branch: 908 | True]
(pop) ; 17
; [eval] !(p2_2 && (!break2 && !except2))
; [eval] p2_2 && (!break2 && !except2)
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 909 | True | live]
; [else-branch: 909 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 909 | True]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 18
; [then-branch: 910 | !(p1_1@155@01) | live]
; [else-branch: 910 | p1_1@155@01 | live]
(push) ; 19
; [then-branch: 910 | !(p1_1@155@01)]
(assert (not p1_1@155@01))
(pop) ; 19
(push) ; 19
; [else-branch: 910 | p1_1@155@01]
(assert p1_1@155@01)
; [eval] !break1
(push) ; 20
; [then-branch: 911 | break1@110@01 | live]
; [else-branch: 911 | !(break1@110@01) | live]
(push) ; 21
; [then-branch: 911 | break1@110@01]
(assert break1@110@01)
(pop) ; 21
(push) ; 21
; [else-branch: 911 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> p1_1@155@01 (and p1_1@155@01 (or (not break1@110@01) break1@110@01))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 912 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01) | live]
; [else-branch: 912 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01)) | live]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 912 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01))))
; [exec]
; c_4.Container_value := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 19
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 19
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(declare-const Container_value@161@01 $Ref)
(assert (= Container_value@161@01 (__prim__int___box__ $Snap.unit 7)))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 19
; [then-branch: 913 | !(p2_1@156@01) | live]
; [else-branch: 913 | p2_1@156@01 | live]
(push) ; 20
; [then-branch: 913 | !(p2_1@156@01)]
(assert (not p2_1@156@01))
(pop) ; 20
(push) ; 20
; [else-branch: 913 | p2_1@156@01]
(assert p2_1@156@01)
; [eval] !break2
(push) ; 21
; [then-branch: 914 | break2@111@01 | live]
; [else-branch: 914 | !(break2@111@01) | live]
(push) ; 22
; [then-branch: 914 | break2@111@01]
(assert break2@111@01)
(pop) ; 22
(push) ; 22
; [else-branch: 914 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=> p2_1@156@01 (and p2_1@156@01 (or (not break2@111@01) break2@111@01))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_1@156@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 915 | p2_1@156@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 915 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01)) | live]
(set-option :timeout 0)
(push) ; 19
; [else-branch: 915 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01))]
(assert (not (and p2_1@156@01 (and (not break2@111@01) (not except2@105@01)))))
(pop) ; 19
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 19
; [then-branch: 916 | !(p2_1@156@01) | live]
; [else-branch: 916 | p2_1@156@01 | live]
(push) ; 20
; [then-branch: 916 | !(p2_1@156@01)]
(assert (not p2_1@156@01))
(pop) ; 20
(push) ; 20
; [else-branch: 916 | p2_1@156@01]
(assert p2_1@156@01)
; [eval] !break2
(push) ; 21
; [then-branch: 917 | break2@111@01 | live]
; [else-branch: 917 | !(break2@111@01) | live]
(push) ; 22
; [then-branch: 917 | break2@111@01]
(assert break2@111@01)
(pop) ; 22
(push) ; 22
; [else-branch: 917 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_1@156@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_1@156@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 918 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 918 | p2_1@156@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 918 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01))]
(assert (not (and p2_1@156@01 (and (not break2@111@01) (not except2@105@01)))))
; [exec]
; tmp := new()
(declare-const tmp@162@01 $Ref)
(assert (not (= tmp@162@01 $Ref.null)))
(assert (not (= tmp@162@01 tmp@123@01)))
(assert (not (= tmp@162@01 Container_value@161@01)))
(assert (not (= tmp@162@01 tmp1_2@66@01)))
(assert (not (= tmp@162@01 Exception_res@100@01)))
(assert (not (= tmp@162@01 c_9@25@01)))
(assert (not (= tmp@162@01 tmp2_0@63@01)))
(assert (not (= tmp@162@01 _cthread_157_0@19@01)))
(assert (not (= tmp@162@01 b_9@27@01)))
(assert (not (= tmp@162@01 tmp1_0@62@01)))
(assert (not (= tmp@162@01 Exception_res_2@101@01)))
(assert (not (= tmp@162@01 _err_0@104@01)))
(assert (not (= tmp@162@01 tmp2_2@67@01)))
(assert (not (= tmp@162@01 b@26@01)))
(assert (not (= tmp@162@01 _cthread_157@18@01)))
(assert (not (= tmp@162@01 _err@102@01)))
(assert (not (= tmp@162@01 c@24@01)))
(assert (not
  (=
    tmp@162@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 20
; [then-branch: 919 | !(p1_1@155@01) | live]
; [else-branch: 919 | p1_1@155@01 | live]
(push) ; 21
; [then-branch: 919 | !(p1_1@155@01)]
(assert (not p1_1@155@01))
(pop) ; 21
(push) ; 21
; [else-branch: 919 | p1_1@155@01]
; [eval] !break1
(push) ; 22
; [then-branch: 920 | break1@110@01 | live]
; [else-branch: 920 | !(break1@110@01) | live]
(push) ; 23
; [then-branch: 920 | break1@110@01]
(assert break1@110@01)
(pop) ; 23
(push) ; 23
; [else-branch: 920 | !(break1@110@01)]
; [eval] !except1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=> p1_1@155@01 (or (not break1@110@01) break1@110@01)))
(push) ; 20
(set-option :timeout 10)
(assert (not (not (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 921 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01) | live]
; [else-branch: 921 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01)) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 921 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01))))
; [exec]
; Exception_res := tmp
; [eval] p2_1 && (!break2 && !except2)
(push) ; 21
; [then-branch: 922 | !(p2_1@156@01) | live]
; [else-branch: 922 | p2_1@156@01 | live]
(push) ; 22
; [then-branch: 922 | !(p2_1@156@01)]
(assert (not p2_1@156@01))
(pop) ; 22
(push) ; 22
; [else-branch: 922 | p2_1@156@01]
(assert p2_1@156@01)
; [eval] !break2
(push) ; 23
; [then-branch: 923 | break2@111@01 | live]
; [else-branch: 923 | !(break2@111@01) | live]
(push) ; 24
; [then-branch: 923 | break2@111@01]
(assert break2@111@01)
(pop) ; 24
(push) ; 24
; [else-branch: 923 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 924 | p2_1@156@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 924 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01)) | live]
(push) ; 21
; [else-branch: 924 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01))]
(pop) ; 21
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 21
; [then-branch: 925 | !(p2_1@156@01) | live]
; [else-branch: 925 | p2_1@156@01 | live]
(push) ; 22
; [then-branch: 925 | !(p2_1@156@01)]
(assert (not p2_1@156@01))
(pop) ; 22
(push) ; 22
; [else-branch: 925 | p2_1@156@01]
(assert p2_1@156@01)
; [eval] !break2
(push) ; 23
; [then-branch: 926 | break2@111@01 | live]
; [else-branch: 926 | !(break2@111@01) | live]
(push) ; 24
; [then-branch: 926 | break2@111@01]
(assert break2@111@01)
(pop) ; 24
(push) ; 24
; [else-branch: 926 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@156@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 927 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 927 | p2_1@156@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 927 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01))]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 22
; [then-branch: 928 | !(p1_1@155@01) | live]
; [else-branch: 928 | p1_1@155@01 | live]
(push) ; 23
; [then-branch: 928 | !(p1_1@155@01)]
(assert (not p1_1@155@01))
(pop) ; 23
(push) ; 23
; [else-branch: 928 | p1_1@155@01]
; [eval] !break1
(push) ; 24
; [then-branch: 929 | break1@110@01 | live]
; [else-branch: 929 | !(break1@110@01) | live]
(push) ; 25
; [then-branch: 929 | break1@110@01]
(assert break1@110@01)
(pop) ; 25
(push) ; 25
; [else-branch: 929 | !(break1@110@01)]
; [eval] !except1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 930 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01) | live]
; [else-branch: 930 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01)) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 930 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01))))
; [exec]
; inhale typeof(Exception_res) == Exception()
(declare-const $t@163@01 $Snap)
(assert (= $t@163@01 $Snap.unit))
; [eval] typeof(Exception_res) == Exception()
; [eval] typeof(Exception_res)
; [eval] Exception()
(assert (= (typeof<PyType> tmp@162@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_1 && (!break2 && !except2)
(set-option :timeout 0)
(push) ; 23
; [then-branch: 931 | !(p2_1@156@01) | live]
; [else-branch: 931 | p2_1@156@01 | live]
(push) ; 24
; [then-branch: 931 | !(p2_1@156@01)]
(assert (not p2_1@156@01))
(pop) ; 24
(push) ; 24
; [else-branch: 931 | p2_1@156@01]
(assert p2_1@156@01)
; [eval] !break2
(push) ; 25
; [then-branch: 932 | break2@111@01 | live]
; [else-branch: 932 | !(break2@111@01) | live]
(push) ; 26
; [then-branch: 932 | break2@111@01]
(assert break2@111@01)
(pop) ; 26
(push) ; 26
; [else-branch: 932 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 933 | p2_1@156@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 933 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01)) | live]
(push) ; 23
; [else-branch: 933 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01))]
(pop) ; 23
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 23
; [then-branch: 934 | !(p2_1@156@01) | live]
; [else-branch: 934 | p2_1@156@01 | live]
(push) ; 24
; [then-branch: 934 | !(p2_1@156@01)]
(assert (not p2_1@156@01))
(pop) ; 24
(push) ; 24
; [else-branch: 934 | p2_1@156@01]
(assert p2_1@156@01)
; [eval] !break2
(push) ; 25
; [then-branch: 935 | break2@111@01 | live]
; [else-branch: 935 | !(break2@111@01) | live]
(push) ; 26
; [then-branch: 935 | break2@111@01]
(assert break2@111@01)
(pop) ; 26
(push) ; 26
; [else-branch: 935 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_1@156@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 936 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 936 | p2_1@156@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 936 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01))]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 24
; [then-branch: 937 | !(p1_1@155@01) | live]
; [else-branch: 937 | p1_1@155@01 | live]
(push) ; 25
; [then-branch: 937 | !(p1_1@155@01)]
(assert (not p1_1@155@01))
(pop) ; 25
(push) ; 25
; [else-branch: 937 | p1_1@155@01]
; [eval] !break1
(push) ; 26
; [then-branch: 938 | break1@110@01 | live]
; [else-branch: 938 | !(break1@110@01) | live]
(push) ; 27
; [then-branch: 938 | break1@110@01]
(assert break1@110@01)
(pop) ; 27
(push) ; 27
; [else-branch: 938 | !(break1@110@01)]
; [eval] !except1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 939 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01) | live]
; [else-branch: 939 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01)) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 939 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01))))
; [exec]
; _err := Exception_res
; [exec]
; except1 := true
; [eval] p2_1 && (!break2 && !except2)
(push) ; 25
; [then-branch: 940 | !(p2_1@156@01) | live]
; [else-branch: 940 | p2_1@156@01 | live]
(push) ; 26
; [then-branch: 940 | !(p2_1@156@01)]
(assert (not p2_1@156@01))
(pop) ; 26
(push) ; 26
; [else-branch: 940 | p2_1@156@01]
(assert p2_1@156@01)
; [eval] !break2
(push) ; 27
; [then-branch: 941 | break2@111@01 | live]
; [else-branch: 941 | !(break2@111@01) | live]
(push) ; 28
; [then-branch: 941 | break2@111@01]
(assert break2@111@01)
(pop) ; 28
(push) ; 28
; [else-branch: 941 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 942 | p2_1@156@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 942 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01)) | live]
(push) ; 25
; [else-branch: 942 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01))]
(pop) ; 25
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 25
; [then-branch: 943 | !(p2_1@156@01) | live]
; [else-branch: 943 | p2_1@156@01 | live]
(push) ; 26
; [then-branch: 943 | !(p2_1@156@01)]
(assert (not p2_1@156@01))
(pop) ; 26
(push) ; 26
; [else-branch: 943 | p2_1@156@01]
(assert p2_1@156@01)
; [eval] !break2
(push) ; 27
; [then-branch: 944 | break2@111@01 | live]
; [else-branch: 944 | !(break2@111@01) | live]
(push) ; 28
; [then-branch: 944 | break2@111@01]
(assert break2@111@01)
(pop) ; 28
(push) ; 28
; [else-branch: 944 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@156@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 945 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 945 | p2_1@156@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 945 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01))]
; [exec]
; p1_3 := p3 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p3 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 946 | !(p3@157@01) | live]
; [else-branch: 946 | p3@157@01 | live]
(push) ; 27
; [then-branch: 946 | !(p3@157@01)]
(assert (not p3@157@01))
(pop) ; 27
(push) ; 27
; [else-branch: 946 | p3@157@01]
(assert p3@157@01)
; [eval] !break1
(push) ; 28
; [then-branch: 947 | break1@110@01 | live]
; [else-branch: 947 | !(break1@110@01) | live]
(push) ; 29
; [then-branch: 947 | break1@110@01]
(assert break1@110@01)
(pop) ; 29
(push) ; 29
; [else-branch: 947 | !(break1@110@01)]
; [eval] !except1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=> p3@157@01 (and p3@157@01 (or (not break1@110@01) break1@110@01))))
(assert (or p3@157@01 (not p3@157@01)))
; [exec]
; p2_3 := p4 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p4 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 948 | !(p4@158@01) | live]
; [else-branch: 948 | p4@158@01 | live]
(push) ; 27
; [then-branch: 948 | !(p4@158@01)]
(assert (not p4@158@01))
(pop) ; 27
(push) ; 27
; [else-branch: 948 | p4@158@01]
(assert p4@158@01)
; [eval] !break2
(push) ; 28
; [then-branch: 949 | break2@111@01 | live]
; [else-branch: 949 | !(break2@111@01) | live]
(push) ; 29
; [then-branch: 949 | break2@111@01]
(assert break2@111@01)
(pop) ; 29
(push) ; 29
; [else-branch: 949 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(push) ; 30
; [then-branch: 950 | except2@105@01 | live]
; [else-branch: 950 | !(except2@105@01) | live]
(push) ; 31
; [then-branch: 950 | except2@105@01]
(assert except2@105@01)
(pop) ; 31
(push) ; 31
; [else-branch: 950 | !(except2@105@01)]
(assert (not except2@105@01))
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and (not break2@111@01) (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p4@158@01
  (and
    p4@158@01
    (=>
      (not break2@111@01)
      (and (not break2@111@01) (or (not except2@105@01) except2@105@01)))
    (or (not break2@111@01) break2@111@01))))
(assert (or p4@158@01 (not p4@158@01)))
; [exec]
; p3_1 := p3 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p3 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 951 | !(p3@157@01) | live]
; [else-branch: 951 | p3@157@01 | live]
(push) ; 27
; [then-branch: 951 | !(p3@157@01)]
(assert (not p3@157@01))
(pop) ; 27
(push) ; 27
; [else-branch: 951 | p3@157@01]
(assert p3@157@01)
; [eval] !break1
(push) ; 28
; [then-branch: 952 | break1@110@01 | live]
; [else-branch: 952 | !(break1@110@01) | live]
(push) ; 29
; [then-branch: 952 | break1@110@01]
(assert break1@110@01)
(pop) ; 29
(push) ; 29
; [else-branch: 952 | !(break1@110@01)]
; [eval] !except1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [exec]
; p4_1 := p4 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p4 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 953 | !(p4@158@01) | live]
; [else-branch: 953 | p4@158@01 | live]
(push) ; 27
; [then-branch: 953 | !(p4@158@01)]
(assert (not p4@158@01))
(pop) ; 27
(push) ; 27
; [else-branch: 953 | p4@158@01]
(assert p4@158@01)
; [eval] !break2
(push) ; 28
; [then-branch: 954 | break2@111@01 | live]
; [else-branch: 954 | !(break2@111@01) | live]
(push) ; 29
; [then-branch: 954 | break2@111@01]
(assert break2@111@01)
(pop) ; 29
(push) ; 29
; [else-branch: 954 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(push) ; 30
; [then-branch: 955 | except2@105@01 | live]
; [else-branch: 955 | !(except2@105@01) | live]
(push) ; 31
; [then-branch: 955 | except2@105@01]
(assert except2@105@01)
(pop) ; 31
(push) ; 31
; [else-branch: 955 | !(except2@105@01)]
(assert (not except2@105@01))
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and (not break2@111@01) (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p4_1@164@01 Bool)
(assert (= p4_1@164@01 (and p4@158@01 (and (not break2@111@01) (not except2@105@01)))))
; [eval] p1_3 && (!break1 && !except1)
; [then-branch: 956 | False | dead]
; [else-branch: 956 | True | live]
(push) ; 26
; [else-branch: 956 | True]
(pop) ; 26
; [eval] !(p1_3 && (!break1 && !except1))
; [eval] p1_3 && (!break1 && !except1)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 957 | True | live]
; [else-branch: 957 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 957 | True]
; [eval] p2_3 && (!break2 && !except2)
; [then-branch: 958 | False | dead]
; [else-branch: 958 | True | live]
(push) ; 27
; [else-branch: 958 | True]
(pop) ; 27
; [eval] !(p2_3 && (!break2 && !except2))
; [eval] p2_3 && (!break2 && !except2)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 959 | True | live]
; [else-branch: 959 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 959 | True]
; [eval] p3 && (!break1 && !except1)
(push) ; 28
; [then-branch: 960 | !(p3@157@01) | live]
; [else-branch: 960 | p3@157@01 | live]
(push) ; 29
; [then-branch: 960 | !(p3@157@01)]
(assert (not p3@157@01))
(pop) ; 29
(push) ; 29
; [else-branch: 960 | p3@157@01]
(assert p3@157@01)
; [eval] !break1
(push) ; 30
; [then-branch: 961 | break1@110@01 | live]
; [else-branch: 961 | !(break1@110@01) | live]
(push) ; 31
; [then-branch: 961 | break1@110@01]
(assert break1@110@01)
(pop) ; 31
(push) ; 31
; [else-branch: 961 | !(break1@110@01)]
; [eval] !except1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 962 | False | dead]
; [else-branch: 962 | True | live]
(push) ; 28
; [else-branch: 962 | True]
(pop) ; 28
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 28
; [then-branch: 963 | !(p3@157@01) | live]
; [else-branch: 963 | p3@157@01 | live]
(push) ; 29
; [then-branch: 963 | !(p3@157@01)]
(assert (not p3@157@01))
(pop) ; 29
(push) ; 29
; [else-branch: 963 | p3@157@01]
(assert p3@157@01)
; [eval] !break1
(push) ; 30
; [then-branch: 964 | break1@110@01 | live]
; [else-branch: 964 | !(break1@110@01) | live]
(push) ; 31
; [then-branch: 964 | break1@110@01]
(assert break1@110@01)
(pop) ; 31
(push) ; 31
; [else-branch: 964 | !(break1@110@01)]
; [eval] !except1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 965 | True | live]
; [else-branch: 965 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 965 | True]
; [eval] p4 && (!break2 && !except2)
(push) ; 29
; [then-branch: 966 | !(p4@158@01) | live]
; [else-branch: 966 | p4@158@01 | live]
(push) ; 30
; [then-branch: 966 | !(p4@158@01)]
(assert (not p4@158@01))
(pop) ; 30
(push) ; 30
; [else-branch: 966 | p4@158@01]
(assert p4@158@01)
; [eval] !break2
(push) ; 31
; [then-branch: 967 | break2@111@01 | live]
; [else-branch: 967 | !(break2@111@01) | live]
(push) ; 32
; [then-branch: 967 | break2@111@01]
(assert break2@111@01)
(pop) ; 32
(push) ; 32
; [else-branch: 967 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p4@158@01 (and p4@158@01 (or (not break2@111@01) break2@111@01))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4@158@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 968 | p4@158@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 968 | !(p4@158@01 && !(break2@111@01) && !(except2@105@01)) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 968 | !(p4@158@01 && !(break2@111@01) && !(except2@105@01))]
(assert (not (and p4@158@01 (and (not break2@111@01) (not except2@105@01)))))
(pop) ; 29
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 29
; [then-branch: 969 | !(p4@158@01) | live]
; [else-branch: 969 | p4@158@01 | live]
(push) ; 30
; [then-branch: 969 | !(p4@158@01)]
(assert (not p4@158@01))
(pop) ; 30
(push) ; 30
; [else-branch: 969 | p4@158@01]
(assert p4@158@01)
; [eval] !break2
(push) ; 31
; [then-branch: 970 | break2@111@01 | live]
; [else-branch: 970 | !(break2@111@01) | live]
(push) ; 32
; [then-branch: 970 | break2@111@01]
(assert break2@111@01)
(pop) ; 32
(push) ; 32
; [else-branch: 970 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4@158@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4@158@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 971 | !(p4@158@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 971 | p4@158@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 971 | !(p4@158@01 && !(break2@111@01) && !(except2@105@01))]
(assert (not (and p4@158@01 (and (not break2@111@01) (not except2@105@01)))))
; [eval] p3 && (!break1 && !except1)
(push) ; 30
; [then-branch: 972 | !(p3@157@01) | live]
; [else-branch: 972 | p3@157@01 | live]
(push) ; 31
; [then-branch: 972 | !(p3@157@01)]
(assert (not p3@157@01))
(pop) ; 31
(push) ; 31
; [else-branch: 972 | p3@157@01]
(assert p3@157@01)
; [eval] !break1
(push) ; 32
; [then-branch: 973 | break1@110@01 | live]
; [else-branch: 973 | !(break1@110@01) | live]
(push) ; 33
; [then-branch: 973 | break1@110@01]
(assert break1@110@01)
(pop) ; 33
(push) ; 33
; [else-branch: 973 | !(break1@110@01)]
; [eval] !except1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 974 | False | dead]
; [else-branch: 974 | True | live]
(push) ; 30
; [else-branch: 974 | True]
(pop) ; 30
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 30
; [then-branch: 975 | !(p3@157@01) | live]
; [else-branch: 975 | p3@157@01 | live]
(push) ; 31
; [then-branch: 975 | !(p3@157@01)]
(assert (not p3@157@01))
(pop) ; 31
(push) ; 31
; [else-branch: 975 | p3@157@01]
(assert p3@157@01)
; [eval] !break1
(push) ; 32
; [then-branch: 976 | break1@110@01 | live]
; [else-branch: 976 | !(break1@110@01) | live]
(push) ; 33
; [then-branch: 976 | break1@110@01]
(assert break1@110@01)
(pop) ; 33
(push) ; 33
; [else-branch: 976 | !(break1@110@01)]
; [eval] !except1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 977 | True | live]
; [else-branch: 977 | False | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 977 | True]
; [eval] p4 && (!break2 && !except2)
(push) ; 31
; [then-branch: 978 | !(p4@158@01) | live]
; [else-branch: 978 | p4@158@01 | live]
(push) ; 32
; [then-branch: 978 | !(p4@158@01)]
(assert (not p4@158@01))
(pop) ; 32
(push) ; 32
; [else-branch: 978 | p4@158@01]
(assert p4@158@01)
; [eval] !break2
(push) ; 33
; [then-branch: 979 | break2@111@01 | live]
; [else-branch: 979 | !(break2@111@01) | live]
(push) ; 34
; [then-branch: 979 | break2@111@01]
(assert break2@111@01)
(pop) ; 34
(push) ; 34
; [else-branch: 979 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 980 | p4@158@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 980 | !(p4@158@01 && !(break2@111@01) && !(except2@105@01)) | live]
(push) ; 31
; [else-branch: 980 | !(p4@158@01 && !(break2@111@01) && !(except2@105@01))]
(pop) ; 31
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 31
; [then-branch: 981 | !(p4@158@01) | live]
; [else-branch: 981 | p4@158@01 | live]
(push) ; 32
; [then-branch: 981 | !(p4@158@01)]
(assert (not p4@158@01))
(pop) ; 32
(push) ; 32
; [else-branch: 981 | p4@158@01]
(assert p4@158@01)
; [eval] !break2
(push) ; 33
; [then-branch: 982 | break2@111@01 | live]
; [else-branch: 982 | !(break2@111@01) | live]
(push) ; 34
; [then-branch: 982 | break2@111@01]
(assert break2@111@01)
(pop) ; 34
(push) ; 34
; [else-branch: 982 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4@158@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 983 | !(p4@158@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 983 | p4@158@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 983 | !(p4@158@01 && !(break2@111@01) && !(except2@105@01))]
; [eval] p1_0 && (!break1 && !except1)
(push) ; 32
; [then-branch: 984 | !(p1_0@128@01) | live]
; [else-branch: 984 | p1_0@128@01 | live]
(push) ; 33
; [then-branch: 984 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 33
(push) ; 33
; [else-branch: 984 | p1_0@128@01]
; [eval] !break1
(push) ; 34
; [then-branch: 985 | break1@110@01 | live]
; [else-branch: 985 | !(break1@110@01) | live]
(push) ; 35
; [then-branch: 985 | break1@110@01]
(assert break1@110@01)
(pop) ; 35
(push) ; 35
; [else-branch: 985 | !(break1@110@01)]
; [eval] !except1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (=> p1_0@128@01 (or (not break1@110@01) break1@110@01)))
; [then-branch: 986 | False | dead]
; [else-branch: 986 | True | live]
(push) ; 32
; [else-branch: 986 | True]
(pop) ; 32
; [eval] !(p1_0 && (!break1 && !except1))
; [eval] p1_0 && (!break1 && !except1)
(push) ; 32
; [then-branch: 987 | !(p1_0@128@01) | live]
; [else-branch: 987 | p1_0@128@01 | live]
(push) ; 33
; [then-branch: 987 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 33
(push) ; 33
; [else-branch: 987 | p1_0@128@01]
; [eval] !break1
(push) ; 34
; [then-branch: 988 | break1@110@01 | live]
; [else-branch: 988 | !(break1@110@01) | live]
(push) ; 35
; [then-branch: 988 | break1@110@01]
(assert break1@110@01)
(pop) ; 35
(push) ; 35
; [else-branch: 988 | !(break1@110@01)]
; [eval] !except1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 989 | True | live]
; [else-branch: 989 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 989 | True]
; [eval] p2_0 && (!break2 && !except2)
(push) ; 33
; [then-branch: 990 | !(p2_0@129@01) | live]
; [else-branch: 990 | p2_0@129@01 | live]
(push) ; 34
; [then-branch: 990 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 34
(push) ; 34
; [else-branch: 990 | p2_0@129@01]
(assert p2_0@129@01)
; [eval] !break2
(push) ; 35
; [then-branch: 991 | break2@111@01 | live]
; [else-branch: 991 | !(break2@111@01) | live]
(push) ; 36
; [then-branch: 991 | break2@111@01]
(assert break2@111@01)
(pop) ; 36
(push) ; 36
; [else-branch: 991 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 992 | p2_0@129@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 992 | !(p2_0@129@01 && !(break2@111@01) && !(except2@105@01)) | live]
(push) ; 33
; [else-branch: 992 | !(p2_0@129@01 && !(break2@111@01) && !(except2@105@01))]
(pop) ; 33
; [eval] !(p2_0 && (!break2 && !except2))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 33
; [then-branch: 993 | !(p2_0@129@01) | live]
; [else-branch: 993 | p2_0@129@01 | live]
(push) ; 34
; [then-branch: 993 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 34
(push) ; 34
; [else-branch: 993 | p2_0@129@01]
(assert p2_0@129@01)
; [eval] !break2
(push) ; 35
; [then-branch: 994 | break2@111@01 | live]
; [else-branch: 994 | !(break2@111@01) | live]
(push) ; 36
; [then-branch: 994 | break2@111@01]
(assert break2@111@01)
(pop) ; 36
(push) ; 36
; [else-branch: 994 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not (and p2_0@129@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 995 | !(p2_0@129@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 995 | p2_0@129@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 995 | !(p2_0@129@01 && !(break2@111@01) && !(except2@105@01))]
; [exec]
; assert (p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true) &&
;   (p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true)
; [eval] p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true
; [eval] p1_0 && (!break1 && !except1)
(push) ; 34
; [then-branch: 996 | !(p1_0@128@01) | live]
; [else-branch: 996 | p1_0@128@01 | live]
(push) ; 35
; [then-branch: 996 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 35
(push) ; 35
; [else-branch: 996 | p1_0@128@01]
; [eval] !break1
(push) ; 36
; [then-branch: 997 | break1@110@01 | live]
; [else-branch: 997 | !(break1@110@01) | live]
(push) ; 37
; [then-branch: 997 | break1@110@01]
(assert break1@110@01)
(pop) ; 37
(push) ; 37
; [else-branch: 997 | !(break1@110@01)]
; [eval] !except1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 998 | False | dead]
; [else-branch: 998 | True | live]
(push) ; 35
; [else-branch: 998 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 999 | !(p2_0@129@01) | live]
; [else-branch: 999 | p2_0@129@01 | live]
(push) ; 35
; [then-branch: 999 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 35
(push) ; 35
; [else-branch: 999 | p2_0@129@01]
(assert p2_0@129@01)
; [eval] !break2
(push) ; 36
; [then-branch: 1000 | break2@111@01 | live]
; [else-branch: 1000 | !(break2@111@01) | live]
(push) ; 37
; [then-branch: 1000 | break2@111@01]
(assert break2@111@01)
(pop) ; 37
(push) ; 37
; [else-branch: 1000 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 1001 | p2_0@129@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 1001 | !(p2_0@129@01 && !(break2@111@01) && !(except2@105@01)) | live]
(push) ; 35
; [else-branch: 1001 | !(p2_0@129@01 && !(break2@111@01) && !(except2@105@01))]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 34
; [then-branch: 1002 | !(p1@16@01) | live]
; [else-branch: 1002 | p1@16@01 | live]
(push) ; 35
; [then-branch: 1002 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1002 | p1@16@01]
(assert p1@16@01)
; [eval] !bypass1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1003 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 1003 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 1003 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 34
; [then-branch: 1004 | !(p2@17@01) | live]
; [else-branch: 1004 | p2@17@01 | live]
(push) ; 35
; [then-branch: 1004 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1004 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1005 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 1005 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 1005 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1
(push) ; 34
; [then-branch: 1006 | !(p1@16@01) | live]
; [else-branch: 1006 | p1@16@01 | live]
(push) ; 35
; [then-branch: 1006 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1006 | p1@16@01]
; [eval] !bypass1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1007 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 1007 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 1007 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2
(push) ; 35
; [then-branch: 1008 | !(p2@17@01) | live]
; [else-branch: 1008 | p2@17@01 | live]
(push) ; 36
; [then-branch: 1008 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 36
(push) ; 36
; [else-branch: 1008 | p2@17@01]
; [eval] !bypass2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1009 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 1009 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 1009 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1 ==> issubtype(typeof(c_4.Container_value), int())
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 1010 | !(p1@16@01) | live]
; [else-branch: 1010 | p1@16@01 | live]
(push) ; 37
; [then-branch: 1010 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1010 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1011 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 1011 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1011 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] issubtype(typeof(c_4.Container_value), int())
; [eval] typeof(c_4.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
(push) ; 36
(assert (not (=>
  (and p1@16@01 (not bypass1@83@01))
  (issubtype<Bool> (typeof<PyType> Container_value@161@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (issubtype<Bool> (typeof<PyType> Container_value@161@01) (as int<PyType>  PyType))))
; [eval] p2 && !bypass2 ==> issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 1012 | !(p2@17@01) | live]
; [else-branch: 1012 | p2@17@01 | live]
(push) ; 37
; [then-branch: 1012 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1012 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1013 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 1013 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1013 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] typeof(c_4_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 1014 | !(p1@16@01) | live]
; [else-branch: 1014 | p1@16@01 | live]
(push) ; 37
; [then-branch: 1014 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1014 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1015 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 1015 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1015 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] !idle1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1016 | True | live]
; [else-branch: 1016 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 1016 | True]
; [eval] _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before@112@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before@112@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1017 | _loop_check_before@112@01 | live]
; [else-branch: 1017 | !(_loop_check_before@112@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 1017 | _loop_check_before@112@01]
(assert _loop_check_before@112@01)
; [eval] _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 1018 | False | live]
; [else-branch: 1018 | True | live]
(push) ; 43
; [then-branch: 1018 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 1018 | True]
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 44
; [then-branch: 1019 | False | live]
; [else-branch: 1019 | True | live]
(push) ; 45
; [then-branch: 1019 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 1019 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 46
; [then-branch: 1020 | False | live]
; [else-branch: 1020 | True | live]
(push) ; 47
; [then-branch: 1020 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 1020 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 48
; [then-branch: 1021 | False | live]
; [else-branch: 1021 | True | live]
(push) ; 49
; [then-branch: 1021 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 1021 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 1022 | False | live]
; [else-branch: 1022 | True | live]
(push) ; 51
; [then-branch: 1022 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 1022 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 1017 | !(_loop_check_before@112@01)]
(assert (not _loop_check_before@112@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before@112@01) _loop_check_before@112@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before@112@01) _loop_check_before@112@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (and
    p1@16@01
    (not bypass1@83@01)
    (or (not _loop_check_before@112@01) _loop_check_before@112@01))))
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 1023 | !(p2@17@01) | live]
; [else-branch: 1023 | p2@17@01 | live]
(push) ; 37
; [then-branch: 1023 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1023 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1024 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 1024 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1024 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] !idle2
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1025 | True | live]
; [else-branch: 1025 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 1025 | True]
; [eval] _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_4@113@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_4@113@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1026 | _loop_check_before_4@113@01 | live]
; [else-branch: 1026 | !(_loop_check_before_4@113@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 1026 | _loop_check_before_4@113@01]
(assert _loop_check_before_4@113@01)
; [eval] _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 1027 | False | live]
; [else-branch: 1027 | True | live]
(push) ; 43
; [then-branch: 1027 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 1027 | True]
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none
; [eval] perm(MustTerminate_0(_cthread_157_0))
(push) ; 44
; [then-branch: 1028 | False | live]
; [else-branch: 1028 | True | live]
(push) ; 45
; [then-branch: 1028 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 1028 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 46
; [then-branch: 1029 | False | live]
; [else-branch: 1029 | True | live]
(push) ; 47
; [then-branch: 1029 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 1029 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 48
; [then-branch: 1030 | False | live]
; [else-branch: 1030 | True | live]
(push) ; 49
; [then-branch: 1030 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 1030 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 1031 | False | live]
; [else-branch: 1031 | True | live]
(push) ; 51
; [then-branch: 1031 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 1031 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 1026 | !(_loop_check_before_4@113@01)]
(assert (not _loop_check_before_4@113@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (and
    p2@17@01
    (not bypass2@84@01)
    (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))))
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 1032 | !(p1@16@01) | live]
; [else-branch: 1032 | p1@16@01 | live]
(push) ; 37
; [then-branch: 1032 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1032 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1033 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 1033 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1033 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1034 | True | live]
; [else-branch: 1034 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 1034 | True]
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before@112@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before@112@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1035 | !(_loop_check_before@112@01) | live]
; [else-branch: 1035 | _loop_check_before@112@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 1035 | !(_loop_check_before@112@01)]
(assert (not _loop_check_before@112@01))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 42
; [then-branch: 1036 | False | live]
; [else-branch: 1036 | True | live]
(push) ; 43
; [then-branch: 1036 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 1036 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 44
; [then-branch: 1037 | False | live]
; [else-branch: 1037 | True | live]
(push) ; 45
; [then-branch: 1037 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 1037 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 1038 | False | live]
; [else-branch: 1038 | True | live]
(push) ; 47
; [then-branch: 1038 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 1038 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 1035 | _loop_check_before@112@01]
(assert _loop_check_before@112@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before@112@01 (not _loop_check_before@112@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before@112@01 (not _loop_check_before@112@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (and
    p1@16@01
    (not bypass1@83@01)
    (or _loop_check_before@112@01 (not _loop_check_before@112@01)))))
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 1039 | !(p2@17@01) | live]
; [else-branch: 1039 | p2@17@01 | live]
(push) ; 37
; [then-branch: 1039 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1039 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1040 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 1040 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1040 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !idle2
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1041 | True | live]
; [else-branch: 1041 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 1041 | True]
; [eval] !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_4
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_4@113@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_4@113@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1042 | !(_loop_check_before_4@113@01) | live]
; [else-branch: 1042 | _loop_check_before_4@113@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 1042 | !(_loop_check_before_4@113@01)]
(assert (not _loop_check_before_4@113@01))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 42
; [then-branch: 1043 | False | live]
; [else-branch: 1043 | True | live]
(push) ; 43
; [then-branch: 1043 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 1043 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 44
; [then-branch: 1044 | False | live]
; [else-branch: 1044 | True | live]
(push) ; 45
; [then-branch: 1044 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 1044 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 1045 | False | live]
; [else-branch: 1045 | True | live]
(push) ; 47
; [then-branch: 1045 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 1045 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 1042 | _loop_check_before_4@113@01]
(assert _loop_check_before_4@113@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (and
    p2@17@01
    (not bypass2@84@01)
    (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))))
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] bypass1 ==> tmp1_1 == except1
(push) ; 36
; [then-branch: 1046 | bypass1@83@01 | dead]
; [else-branch: 1046 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1046 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_4 == break1
(push) ; 36
; [then-branch: 1047 | bypass1@83@01 | dead]
; [else-branch: 1047 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1047 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_0 == Exception_res
(push) ; 36
; [then-branch: 1048 | bypass1@83@01 | dead]
; [else-branch: 1048 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1048 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_2 == _err
(push) ; 36
; [then-branch: 1049 | bypass1@83@01 | dead]
; [else-branch: 1049 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1049 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_3 == _loop_check_before
(push) ; 36
; [then-branch: 1050 | bypass1@83@01 | dead]
; [else-branch: 1050 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1050 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1 == _loop_measures
(push) ; 36
; [then-branch: 1051 | bypass1@83@01 | dead]
; [else-branch: 1051 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1051 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2 == _loop_measures_4
(push) ; 36
; [then-branch: 1052 | bypass2@84@01 | dead]
; [else-branch: 1052 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1052 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_1 == except2
(push) ; 36
; [then-branch: 1053 | bypass2@84@01 | dead]
; [else-branch: 1053 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1053 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_3 == _loop_check_before_4
(push) ; 36
; [then-branch: 1054 | bypass2@84@01 | dead]
; [else-branch: 1054 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1054 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_4 == break2
(push) ; 36
; [then-branch: 1055 | bypass2@84@01 | dead]
; [else-branch: 1055 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1055 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_2 == _err_0
(push) ; 36
; [then-branch: 1056 | bypass2@84@01 | dead]
; [else-branch: 1056 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1056 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_0 == Exception_res_2
(push) ; 36
; [then-branch: 1057 | bypass2@84@01 | dead]
; [else-branch: 1057 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1057 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 24
; [then-branch: 1058 | !(p1_1@155@01) | live]
; [else-branch: 1058 | p1_1@155@01 | live]
(push) ; 25
; [then-branch: 1058 | !(p1_1@155@01)]
(assert (not p1_1@155@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1058 | p1_1@155@01]
(assert p1_1@155@01)
; [eval] !break1
(push) ; 26
; [then-branch: 1059 | break1@110@01 | live]
; [else-branch: 1059 | !(break1@110@01) | live]
(push) ; 27
; [then-branch: 1059 | break1@110@01]
(assert break1@110@01)
(pop) ; 27
(push) ; 27
; [else-branch: 1059 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1060 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01)) | dead]
; [else-branch: 1060 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 1060 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01))))
(pop) ; 24
(pop) ; 23
(pop) ; 22
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 22
; [then-branch: 1061 | !(p1_1@155@01) | live]
; [else-branch: 1061 | p1_1@155@01 | live]
(push) ; 23
; [then-branch: 1061 | !(p1_1@155@01)]
(assert (not p1_1@155@01))
(pop) ; 23
(push) ; 23
; [else-branch: 1061 | p1_1@155@01]
(assert p1_1@155@01)
; [eval] !break1
(push) ; 24
; [then-branch: 1062 | break1@110@01 | live]
; [else-branch: 1062 | !(break1@110@01) | live]
(push) ; 25
; [then-branch: 1062 | break1@110@01]
(assert break1@110@01)
(pop) ; 25
(push) ; 25
; [else-branch: 1062 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1063 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01)) | dead]
; [else-branch: 1063 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01) | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 1063 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01))))
(pop) ; 22
(pop) ; 21
(pop) ; 20
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 20
; [then-branch: 1064 | !(p1_1@155@01) | live]
; [else-branch: 1064 | p1_1@155@01 | live]
(push) ; 21
; [then-branch: 1064 | !(p1_1@155@01)]
(assert (not p1_1@155@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1064 | p1_1@155@01]
(assert p1_1@155@01)
; [eval] !break1
(push) ; 22
; [then-branch: 1065 | break1@110@01 | live]
; [else-branch: 1065 | !(break1@110@01) | live]
(push) ; 23
; [then-branch: 1065 | break1@110@01]
(assert break1@110@01)
(pop) ; 23
(push) ; 23
; [else-branch: 1065 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1066 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01)) | dead]
; [else-branch: 1066 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01) | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 1066 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01))))
(pop) ; 20
(pop) ; 19
(pop) ; 18
(push) ; 18
; [else-branch: 912 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01))]
(assert (not (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01)))))
(pop) ; 18
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 18
; [then-branch: 1067 | !(p1_1@155@01) | live]
; [else-branch: 1067 | p1_1@155@01 | live]
(push) ; 19
; [then-branch: 1067 | !(p1_1@155@01)]
(assert (not p1_1@155@01))
(pop) ; 19
(push) ; 19
; [else-branch: 1067 | p1_1@155@01]
(assert p1_1@155@01)
; [eval] !break1
(push) ; 20
; [then-branch: 1068 | break1@110@01 | live]
; [else-branch: 1068 | !(break1@110@01) | live]
(push) ; 21
; [then-branch: 1068 | break1@110@01]
(assert break1@110@01)
(pop) ; 21
(push) ; 21
; [else-branch: 1068 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1069 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 1069 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01) | live]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 1069 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01))]
(assert (not (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01)))))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 19
; [then-branch: 1070 | !(p2_1@156@01) | live]
; [else-branch: 1070 | p2_1@156@01 | live]
(push) ; 20
; [then-branch: 1070 | !(p2_1@156@01)]
(assert (not p2_1@156@01))
(pop) ; 20
(push) ; 20
; [else-branch: 1070 | p2_1@156@01]
(assert p2_1@156@01)
; [eval] !break2
(push) ; 21
; [then-branch: 1071 | break2@111@01 | live]
; [else-branch: 1071 | !(break2@111@01) | live]
(push) ; 22
; [then-branch: 1071 | break2@111@01]
(assert break2@111@01)
(pop) ; 22
(push) ; 22
; [else-branch: 1071 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=> p2_1@156@01 (and p2_1@156@01 (or (not break2@111@01) break2@111@01))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_1@156@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1072 | p2_1@156@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 1072 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01)) | live]
(set-option :timeout 0)
(push) ; 19
; [else-branch: 1072 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01))]
(assert (not (and p2_1@156@01 (and (not break2@111@01) (not except2@105@01)))))
(pop) ; 19
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 19
; [then-branch: 1073 | !(p2_1@156@01) | live]
; [else-branch: 1073 | p2_1@156@01 | live]
(push) ; 20
; [then-branch: 1073 | !(p2_1@156@01)]
(assert (not p2_1@156@01))
(pop) ; 20
(push) ; 20
; [else-branch: 1073 | p2_1@156@01]
(assert p2_1@156@01)
; [eval] !break2
(push) ; 21
; [then-branch: 1074 | break2@111@01 | live]
; [else-branch: 1074 | !(break2@111@01) | live]
(push) ; 22
; [then-branch: 1074 | break2@111@01]
(assert break2@111@01)
(pop) ; 22
(push) ; 22
; [else-branch: 1074 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_1@156@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_1@156@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1075 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 1075 | p2_1@156@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 1075 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01))]
(assert (not (and p2_1@156@01 (and (not break2@111@01) (not except2@105@01)))))
; [exec]
; tmp := new()
(declare-const tmp@165@01 $Ref)
(assert (not (= tmp@165@01 $Ref.null)))
(assert (not (= tmp@165@01 tmp@123@01)))
(assert (not (= tmp@165@01 tmp1_2@66@01)))
(assert (not (= tmp@165@01 Exception_res@100@01)))
(assert (not (= tmp@165@01 c_9@25@01)))
(assert (not (= tmp@165@01 tmp2_0@63@01)))
(assert (not (= tmp@165@01 _cthread_157_0@19@01)))
(assert (not (= tmp@165@01 b_9@27@01)))
(assert (not (= tmp@165@01 tmp1_0@62@01)))
(assert (not (= tmp@165@01 Exception_res_2@101@01)))
(assert (not (= tmp@165@01 _err_0@104@01)))
(assert (not (= tmp@165@01 tmp2_2@67@01)))
(assert (not (= tmp@165@01 b@26@01)))
(assert (not (= tmp@165@01 _cthread_157@18@01)))
(assert (not (= tmp@165@01 _err@102@01)))
(assert (not (= tmp@165@01 c@24@01)))
(assert (not
  (=
    tmp@165@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
(assert (not
  (=
    tmp@165@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@114@01)))))))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 20
; [then-branch: 1076 | !(p1_1@155@01) | live]
; [else-branch: 1076 | p1_1@155@01 | live]
(push) ; 21
; [then-branch: 1076 | !(p1_1@155@01)]
(assert (not p1_1@155@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1076 | p1_1@155@01]
(assert p1_1@155@01)
; [eval] !break1
(push) ; 22
; [then-branch: 1077 | break1@110@01 | live]
; [else-branch: 1077 | !(break1@110@01) | live]
(push) ; 23
; [then-branch: 1077 | break1@110@01]
(assert break1@110@01)
(pop) ; 23
(push) ; 23
; [else-branch: 1077 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 1078 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 1078 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01)) | live]
(push) ; 20
; [else-branch: 1078 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01))]
(pop) ; 20
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 20
; [then-branch: 1079 | !(p1_1@155@01) | live]
; [else-branch: 1079 | p1_1@155@01 | live]
(push) ; 21
; [then-branch: 1079 | !(p1_1@155@01)]
(assert (not p1_1@155@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1079 | p1_1@155@01]
(assert p1_1@155@01)
; [eval] !break1
(push) ; 22
; [then-branch: 1080 | break1@110@01 | live]
; [else-branch: 1080 | !(break1@110@01) | live]
(push) ; 23
; [then-branch: 1080 | break1@110@01]
(assert break1@110@01)
(pop) ; 23
(push) ; 23
; [else-branch: 1080 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1081 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 1081 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1081 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01))]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 21
; [then-branch: 1082 | !(p2_1@156@01) | live]
; [else-branch: 1082 | p2_1@156@01 | live]
(push) ; 22
; [then-branch: 1082 | !(p2_1@156@01)]
(assert (not p2_1@156@01))
(pop) ; 22
(push) ; 22
; [else-branch: 1082 | p2_1@156@01]
(assert p2_1@156@01)
; [eval] !break2
(push) ; 23
; [then-branch: 1083 | break2@111@01 | live]
; [else-branch: 1083 | !(break2@111@01) | live]
(push) ; 24
; [then-branch: 1083 | break2@111@01]
(assert break2@111@01)
(pop) ; 24
(push) ; 24
; [else-branch: 1083 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 1084 | p2_1@156@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 1084 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01)) | live]
(push) ; 21
; [else-branch: 1084 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01))]
(pop) ; 21
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 21
; [then-branch: 1085 | !(p2_1@156@01) | live]
; [else-branch: 1085 | p2_1@156@01 | live]
(push) ; 22
; [then-branch: 1085 | !(p2_1@156@01)]
(assert (not p2_1@156@01))
(pop) ; 22
(push) ; 22
; [else-branch: 1085 | p2_1@156@01]
(assert p2_1@156@01)
; [eval] !break2
(push) ; 23
; [then-branch: 1086 | break2@111@01 | live]
; [else-branch: 1086 | !(break2@111@01) | live]
(push) ; 24
; [then-branch: 1086 | break2@111@01]
(assert break2@111@01)
(pop) ; 24
(push) ; 24
; [else-branch: 1086 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@156@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1087 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 1087 | p2_1@156@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1087 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01))]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 22
; [then-branch: 1088 | !(p1_1@155@01) | live]
; [else-branch: 1088 | p1_1@155@01 | live]
(push) ; 23
; [then-branch: 1088 | !(p1_1@155@01)]
(assert (not p1_1@155@01))
(pop) ; 23
(push) ; 23
; [else-branch: 1088 | p1_1@155@01]
(assert p1_1@155@01)
; [eval] !break1
(push) ; 24
; [then-branch: 1089 | break1@110@01 | live]
; [else-branch: 1089 | !(break1@110@01) | live]
(push) ; 25
; [then-branch: 1089 | break1@110@01]
(assert break1@110@01)
(pop) ; 25
(push) ; 25
; [else-branch: 1089 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 1090 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 1090 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01)) | live]
(push) ; 22
; [else-branch: 1090 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01))]
(pop) ; 22
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 22
; [then-branch: 1091 | !(p1_1@155@01) | live]
; [else-branch: 1091 | p1_1@155@01 | live]
(push) ; 23
; [then-branch: 1091 | !(p1_1@155@01)]
(assert (not p1_1@155@01))
(pop) ; 23
(push) ; 23
; [else-branch: 1091 | p1_1@155@01]
(assert p1_1@155@01)
; [eval] !break1
(push) ; 24
; [then-branch: 1092 | break1@110@01 | live]
; [else-branch: 1092 | !(break1@110@01) | live]
(push) ; 25
; [then-branch: 1092 | break1@110@01]
(assert break1@110@01)
(pop) ; 25
(push) ; 25
; [else-branch: 1092 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1093 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 1093 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 1093 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01))]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 23
; [then-branch: 1094 | !(p2_1@156@01) | live]
; [else-branch: 1094 | p2_1@156@01 | live]
(push) ; 24
; [then-branch: 1094 | !(p2_1@156@01)]
(assert (not p2_1@156@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1094 | p2_1@156@01]
(assert p2_1@156@01)
; [eval] !break2
(push) ; 25
; [then-branch: 1095 | break2@111@01 | live]
; [else-branch: 1095 | !(break2@111@01) | live]
(push) ; 26
; [then-branch: 1095 | break2@111@01]
(assert break2@111@01)
(pop) ; 26
(push) ; 26
; [else-branch: 1095 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 1096 | p2_1@156@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 1096 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01)) | live]
(push) ; 23
; [else-branch: 1096 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01))]
(pop) ; 23
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 23
; [then-branch: 1097 | !(p2_1@156@01) | live]
; [else-branch: 1097 | p2_1@156@01 | live]
(push) ; 24
; [then-branch: 1097 | !(p2_1@156@01)]
(assert (not p2_1@156@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1097 | p2_1@156@01]
(assert p2_1@156@01)
; [eval] !break2
(push) ; 25
; [then-branch: 1098 | break2@111@01 | live]
; [else-branch: 1098 | !(break2@111@01) | live]
(push) ; 26
; [then-branch: 1098 | break2@111@01]
(assert break2@111@01)
(pop) ; 26
(push) ; 26
; [else-branch: 1098 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_1@156@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1099 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 1099 | p2_1@156@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 1099 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01))]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 24
; [then-branch: 1100 | !(p1_1@155@01) | live]
; [else-branch: 1100 | p1_1@155@01 | live]
(push) ; 25
; [then-branch: 1100 | !(p1_1@155@01)]
(assert (not p1_1@155@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1100 | p1_1@155@01]
(assert p1_1@155@01)
; [eval] !break1
(push) ; 26
; [then-branch: 1101 | break1@110@01 | live]
; [else-branch: 1101 | !(break1@110@01) | live]
(push) ; 27
; [then-branch: 1101 | break1@110@01]
(assert break1@110@01)
(pop) ; 27
(push) ; 27
; [else-branch: 1101 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 1102 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 1102 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01)) | live]
(push) ; 24
; [else-branch: 1102 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01))]
(pop) ; 24
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 24
; [then-branch: 1103 | !(p1_1@155@01) | live]
; [else-branch: 1103 | p1_1@155@01 | live]
(push) ; 25
; [then-branch: 1103 | !(p1_1@155@01)]
(assert (not p1_1@155@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1103 | p1_1@155@01]
(assert p1_1@155@01)
; [eval] !break1
(push) ; 26
; [then-branch: 1104 | break1@110@01 | live]
; [else-branch: 1104 | !(break1@110@01) | live]
(push) ; 27
; [then-branch: 1104 | break1@110@01]
(assert break1@110@01)
(pop) ; 27
(push) ; 27
; [else-branch: 1104 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1105 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 1105 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1105 | !(p1_1@155@01 && !(break1@110@01) && !(except1@103@01))]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 25
; [then-branch: 1106 | !(p2_1@156@01) | live]
; [else-branch: 1106 | p2_1@156@01 | live]
(push) ; 26
; [then-branch: 1106 | !(p2_1@156@01)]
(assert (not p2_1@156@01))
(pop) ; 26
(push) ; 26
; [else-branch: 1106 | p2_1@156@01]
(assert p2_1@156@01)
; [eval] !break2
(push) ; 27
; [then-branch: 1107 | break2@111@01 | live]
; [else-branch: 1107 | !(break2@111@01) | live]
(push) ; 28
; [then-branch: 1107 | break2@111@01]
(assert break2@111@01)
(pop) ; 28
(push) ; 28
; [else-branch: 1107 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 1108 | p2_1@156@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 1108 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01)) | live]
(push) ; 25
; [else-branch: 1108 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01))]
(pop) ; 25
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 25
; [then-branch: 1109 | !(p2_1@156@01) | live]
; [else-branch: 1109 | p2_1@156@01 | live]
(push) ; 26
; [then-branch: 1109 | !(p2_1@156@01)]
(assert (not p2_1@156@01))
(pop) ; 26
(push) ; 26
; [else-branch: 1109 | p2_1@156@01]
(assert p2_1@156@01)
; [eval] !break2
(push) ; 27
; [then-branch: 1110 | break2@111@01 | live]
; [else-branch: 1110 | !(break2@111@01) | live]
(push) ; 28
; [then-branch: 1110 | break2@111@01]
(assert break2@111@01)
(pop) ; 28
(push) ; 28
; [else-branch: 1110 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@156@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1111 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 1111 | p2_1@156@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1111 | !(p2_1@156@01 && !(break2@111@01) && !(except2@105@01))]
; [exec]
; p1_3 := p3 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p3 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 1112 | !(p3@157@01) | live]
; [else-branch: 1112 | p3@157@01 | live]
(push) ; 27
; [then-branch: 1112 | !(p3@157@01)]
(assert (not p3@157@01))
(pop) ; 27
(push) ; 27
; [else-branch: 1112 | p3@157@01]
(assert p3@157@01)
; [eval] !break1
(push) ; 28
; [then-branch: 1113 | break1@110@01 | live]
; [else-branch: 1113 | !(break1@110@01) | live]
(push) ; 29
; [then-branch: 1113 | break1@110@01]
(assert break1@110@01)
(pop) ; 29
(push) ; 29
; [else-branch: 1113 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 30
; [then-branch: 1114 | except1@103@01 | live]
; [else-branch: 1114 | !(except1@103@01) | live]
(push) ; 31
; [then-branch: 1114 | except1@103@01]
(assert except1@103@01)
(pop) ; 31
(push) ; 31
; [else-branch: 1114 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and (not break1@110@01) (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p3@157@01
  (and
    p3@157@01
    (=>
      (not break1@110@01)
      (and (not break1@110@01) (or (not except1@103@01) except1@103@01)))
    (or (not break1@110@01) break1@110@01))))
(assert (or p3@157@01 (not p3@157@01)))
; [exec]
; p2_3 := p4 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p4 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 1115 | !(p4@158@01) | live]
; [else-branch: 1115 | p4@158@01 | live]
(push) ; 27
; [then-branch: 1115 | !(p4@158@01)]
(assert (not p4@158@01))
(pop) ; 27
(push) ; 27
; [else-branch: 1115 | p4@158@01]
(assert p4@158@01)
; [eval] !break2
(push) ; 28
; [then-branch: 1116 | break2@111@01 | live]
; [else-branch: 1116 | !(break2@111@01) | live]
(push) ; 29
; [then-branch: 1116 | break2@111@01]
(assert break2@111@01)
(pop) ; 29
(push) ; 29
; [else-branch: 1116 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(push) ; 30
; [then-branch: 1117 | except2@105@01 | live]
; [else-branch: 1117 | !(except2@105@01) | live]
(push) ; 31
; [then-branch: 1117 | except2@105@01]
(assert except2@105@01)
(pop) ; 31
(push) ; 31
; [else-branch: 1117 | !(except2@105@01)]
(assert (not except2@105@01))
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and (not break2@111@01) (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p4@158@01
  (and
    p4@158@01
    (=>
      (not break2@111@01)
      (and (not break2@111@01) (or (not except2@105@01) except2@105@01)))
    (or (not break2@111@01) break2@111@01))))
(assert (or p4@158@01 (not p4@158@01)))
; [exec]
; p3_1 := p3 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p3 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 1118 | !(p3@157@01) | live]
; [else-branch: 1118 | p3@157@01 | live]
(push) ; 27
; [then-branch: 1118 | !(p3@157@01)]
(assert (not p3@157@01))
(pop) ; 27
(push) ; 27
; [else-branch: 1118 | p3@157@01]
(assert p3@157@01)
; [eval] !break1
(push) ; 28
; [then-branch: 1119 | break1@110@01 | live]
; [else-branch: 1119 | !(break1@110@01) | live]
(push) ; 29
; [then-branch: 1119 | break1@110@01]
(assert break1@110@01)
(pop) ; 29
(push) ; 29
; [else-branch: 1119 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 30
; [then-branch: 1120 | except1@103@01 | live]
; [else-branch: 1120 | !(except1@103@01) | live]
(push) ; 31
; [then-branch: 1120 | except1@103@01]
(assert except1@103@01)
(pop) ; 31
(push) ; 31
; [else-branch: 1120 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and (not break1@110@01) (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p3_1@166@01 Bool)
(assert (= p3_1@166@01 (and p3@157@01 (and (not break1@110@01) (not except1@103@01)))))
; [exec]
; p4_1 := p4 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p4 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 1121 | !(p4@158@01) | live]
; [else-branch: 1121 | p4@158@01 | live]
(push) ; 27
; [then-branch: 1121 | !(p4@158@01)]
(assert (not p4@158@01))
(pop) ; 27
(push) ; 27
; [else-branch: 1121 | p4@158@01]
(assert p4@158@01)
; [eval] !break2
(push) ; 28
; [then-branch: 1122 | break2@111@01 | live]
; [else-branch: 1122 | !(break2@111@01) | live]
(push) ; 29
; [then-branch: 1122 | break2@111@01]
(assert break2@111@01)
(pop) ; 29
(push) ; 29
; [else-branch: 1122 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(push) ; 30
; [then-branch: 1123 | except2@105@01 | live]
; [else-branch: 1123 | !(except2@105@01) | live]
(push) ; 31
; [then-branch: 1123 | except2@105@01]
(assert except2@105@01)
(pop) ; 31
(push) ; 31
; [else-branch: 1123 | !(except2@105@01)]
(assert (not except2@105@01))
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and (not break2@111@01) (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p4_1@167@01 Bool)
(assert (= p4_1@167@01 (and p4@158@01 (and (not break2@111@01) (not except2@105@01)))))
; [eval] p1_3 && (!break1 && !except1)
; [then-branch: 1124 | False | dead]
; [else-branch: 1124 | True | live]
(push) ; 26
; [else-branch: 1124 | True]
(pop) ; 26
; [eval] !(p1_3 && (!break1 && !except1))
; [eval] p1_3 && (!break1 && !except1)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1125 | True | live]
; [else-branch: 1125 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1125 | True]
; [eval] p2_3 && (!break2 && !except2)
; [then-branch: 1126 | False | dead]
; [else-branch: 1126 | True | live]
(push) ; 27
; [else-branch: 1126 | True]
(pop) ; 27
; [eval] !(p2_3 && (!break2 && !except2))
; [eval] p2_3 && (!break2 && !except2)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1127 | True | live]
; [else-branch: 1127 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 1127 | True]
; [eval] p3 && (!break1 && !except1)
(push) ; 28
; [then-branch: 1128 | !(p3@157@01) | live]
; [else-branch: 1128 | p3@157@01 | live]
(push) ; 29
; [then-branch: 1128 | !(p3@157@01)]
(assert (not p3@157@01))
(pop) ; 29
(push) ; 29
; [else-branch: 1128 | p3@157@01]
(assert p3@157@01)
; [eval] !break1
(push) ; 30
; [then-branch: 1129 | break1@110@01 | live]
; [else-branch: 1129 | !(break1@110@01) | live]
(push) ; 31
; [then-branch: 1129 | break1@110@01]
(assert break1@110@01)
(pop) ; 31
(push) ; 31
; [else-branch: 1129 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=> p3@157@01 (and p3@157@01 (or (not break1@110@01) break1@110@01))))
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3@157@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3@157@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1130 | p3@157@01 && !(break1@110@01) && !(except1@103@01) | live]
; [else-branch: 1130 | !(p3@157@01 && !(break1@110@01) && !(except1@103@01)) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 1130 | p3@157@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p3@157@01 (and (not break1@110@01) (not except1@103@01))))
; [exec]
; c_4.Container_value := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 29
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 29
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_value@168@01 $Ref)
(assert (= Container_value@168@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p4 && (!break2 && !except2)
(push) ; 29
; [then-branch: 1131 | !(p4@158@01) | live]
; [else-branch: 1131 | p4@158@01 | live]
(push) ; 30
; [then-branch: 1131 | !(p4@158@01)]
(assert (not p4@158@01))
(pop) ; 30
(push) ; 30
; [else-branch: 1131 | p4@158@01]
(assert p4@158@01)
; [eval] !break2
(push) ; 31
; [then-branch: 1132 | break2@111@01 | live]
; [else-branch: 1132 | !(break2@111@01) | live]
(push) ; 32
; [then-branch: 1132 | break2@111@01]
(assert break2@111@01)
(pop) ; 32
(push) ; 32
; [else-branch: 1132 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p4@158@01 (and p4@158@01 (or (not break2@111@01) break2@111@01))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4@158@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1133 | p4@158@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 1133 | !(p4@158@01 && !(break2@111@01) && !(except2@105@01)) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 1133 | !(p4@158@01 && !(break2@111@01) && !(except2@105@01))]
(assert (not (and p4@158@01 (and (not break2@111@01) (not except2@105@01)))))
(pop) ; 29
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 29
; [then-branch: 1134 | !(p4@158@01) | live]
; [else-branch: 1134 | p4@158@01 | live]
(push) ; 30
; [then-branch: 1134 | !(p4@158@01)]
(assert (not p4@158@01))
(pop) ; 30
(push) ; 30
; [else-branch: 1134 | p4@158@01]
(assert p4@158@01)
; [eval] !break2
(push) ; 31
; [then-branch: 1135 | break2@111@01 | live]
; [else-branch: 1135 | !(break2@111@01) | live]
(push) ; 32
; [then-branch: 1135 | break2@111@01]
(assert break2@111@01)
(pop) ; 32
(push) ; 32
; [else-branch: 1135 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4@158@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4@158@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1136 | !(p4@158@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 1136 | p4@158@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 1136 | !(p4@158@01 && !(break2@111@01) && !(except2@105@01))]
(assert (not (and p4@158@01 (and (not break2@111@01) (not except2@105@01)))))
; [eval] p3 && (!break1 && !except1)
(push) ; 30
; [then-branch: 1137 | !(p3@157@01) | live]
; [else-branch: 1137 | p3@157@01 | live]
(push) ; 31
; [then-branch: 1137 | !(p3@157@01)]
(assert (not p3@157@01))
(pop) ; 31
(push) ; 31
; [else-branch: 1137 | p3@157@01]
; [eval] !break1
(push) ; 32
; [then-branch: 1138 | break1@110@01 | live]
; [else-branch: 1138 | !(break1@110@01) | live]
(push) ; 33
; [then-branch: 1138 | break1@110@01]
(assert break1@110@01)
(pop) ; 33
(push) ; 33
; [else-branch: 1138 | !(break1@110@01)]
; [eval] !except1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (=> p3@157@01 (or (not break1@110@01) break1@110@01)))
(push) ; 30
(set-option :timeout 10)
(assert (not (not (and p3@157@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3@157@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1139 | p3@157@01 && !(break1@110@01) && !(except1@103@01) | live]
; [else-branch: 1139 | !(p3@157@01 && !(break1@110@01) && !(except1@103@01)) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 1139 | p3@157@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p3@157@01 (and (not break1@110@01) (not except1@103@01))))
; [exec]
; break1 := true
; [eval] p4 && (!break2 && !except2)
(push) ; 31
; [then-branch: 1140 | !(p4@158@01) | live]
; [else-branch: 1140 | p4@158@01 | live]
(push) ; 32
; [then-branch: 1140 | !(p4@158@01)]
(assert (not p4@158@01))
(pop) ; 32
(push) ; 32
; [else-branch: 1140 | p4@158@01]
(assert p4@158@01)
; [eval] !break2
(push) ; 33
; [then-branch: 1141 | break2@111@01 | live]
; [else-branch: 1141 | !(break2@111@01) | live]
(push) ; 34
; [then-branch: 1141 | break2@111@01]
(assert break2@111@01)
(pop) ; 34
(push) ; 34
; [else-branch: 1141 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 1142 | p4@158@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 1142 | !(p4@158@01 && !(break2@111@01) && !(except2@105@01)) | live]
(push) ; 31
; [else-branch: 1142 | !(p4@158@01 && !(break2@111@01) && !(except2@105@01))]
(pop) ; 31
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 31
; [then-branch: 1143 | !(p4@158@01) | live]
; [else-branch: 1143 | p4@158@01 | live]
(push) ; 32
; [then-branch: 1143 | !(p4@158@01)]
(assert (not p4@158@01))
(pop) ; 32
(push) ; 32
; [else-branch: 1143 | p4@158@01]
(assert p4@158@01)
; [eval] !break2
(push) ; 33
; [then-branch: 1144 | break2@111@01 | live]
; [else-branch: 1144 | !(break2@111@01) | live]
(push) ; 34
; [then-branch: 1144 | break2@111@01]
(assert break2@111@01)
(pop) ; 34
(push) ; 34
; [else-branch: 1144 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4@158@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1145 | !(p4@158@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 1145 | p4@158@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 1145 | !(p4@158@01 && !(break2@111@01) && !(except2@105@01))]
; [eval] p1_0 && (!break1 && !except1)
(push) ; 32
; [then-branch: 1146 | !(p1_0@128@01) | live]
; [else-branch: 1146 | p1_0@128@01 | live]
(push) ; 33
; [then-branch: 1146 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 33
(push) ; 33
; [else-branch: 1146 | p1_0@128@01]
; [eval] !break1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 1147 | False | dead]
; [else-branch: 1147 | True | live]
(push) ; 32
; [else-branch: 1147 | True]
(pop) ; 32
; [eval] !(p1_0 && (!break1 && !except1))
; [eval] p1_0 && (!break1 && !except1)
(push) ; 32
; [then-branch: 1148 | !(p1_0@128@01) | live]
; [else-branch: 1148 | p1_0@128@01 | live]
(push) ; 33
; [then-branch: 1148 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 33
(push) ; 33
; [else-branch: 1148 | p1_0@128@01]
; [eval] !break1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1149 | True | live]
; [else-branch: 1149 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 1149 | True]
; [eval] p2_0 && (!break2 && !except2)
(push) ; 33
; [then-branch: 1150 | !(p2_0@129@01) | live]
; [else-branch: 1150 | p2_0@129@01 | live]
(push) ; 34
; [then-branch: 1150 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 34
(push) ; 34
; [else-branch: 1150 | p2_0@129@01]
(assert p2_0@129@01)
; [eval] !break2
(push) ; 35
; [then-branch: 1151 | break2@111@01 | live]
; [else-branch: 1151 | !(break2@111@01) | live]
(push) ; 36
; [then-branch: 1151 | break2@111@01]
(assert break2@111@01)
(pop) ; 36
(push) ; 36
; [else-branch: 1151 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 1152 | p2_0@129@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 1152 | !(p2_0@129@01 && !(break2@111@01) && !(except2@105@01)) | live]
(push) ; 33
; [else-branch: 1152 | !(p2_0@129@01 && !(break2@111@01) && !(except2@105@01))]
(pop) ; 33
; [eval] !(p2_0 && (!break2 && !except2))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 33
; [then-branch: 1153 | !(p2_0@129@01) | live]
; [else-branch: 1153 | p2_0@129@01 | live]
(push) ; 34
; [then-branch: 1153 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 34
(push) ; 34
; [else-branch: 1153 | p2_0@129@01]
(assert p2_0@129@01)
; [eval] !break2
(push) ; 35
; [then-branch: 1154 | break2@111@01 | live]
; [else-branch: 1154 | !(break2@111@01) | live]
(push) ; 36
; [then-branch: 1154 | break2@111@01]
(assert break2@111@01)
(pop) ; 36
(push) ; 36
; [else-branch: 1154 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not (and p2_0@129@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1155 | !(p2_0@129@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 1155 | p2_0@129@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 1155 | !(p2_0@129@01 && !(break2@111@01) && !(except2@105@01))]
; [exec]
; assert (p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true) &&
;   (p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true)
; [eval] p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true
; [eval] p1_0 && (!break1 && !except1)
(push) ; 34
; [then-branch: 1156 | !(p1_0@128@01) | live]
; [else-branch: 1156 | p1_0@128@01 | live]
(push) ; 35
; [then-branch: 1156 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1156 | p1_0@128@01]
; [eval] !break1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 1157 | False | dead]
; [else-branch: 1157 | True | live]
(push) ; 35
; [else-branch: 1157 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 1158 | !(p2_0@129@01) | live]
; [else-branch: 1158 | p2_0@129@01 | live]
(push) ; 35
; [then-branch: 1158 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1158 | p2_0@129@01]
(assert p2_0@129@01)
; [eval] !break2
(push) ; 36
; [then-branch: 1159 | break2@111@01 | live]
; [else-branch: 1159 | !(break2@111@01) | live]
(push) ; 37
; [then-branch: 1159 | break2@111@01]
(assert break2@111@01)
(pop) ; 37
(push) ; 37
; [else-branch: 1159 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 1160 | p2_0@129@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 1160 | !(p2_0@129@01 && !(break2@111@01) && !(except2@105@01)) | live]
(push) ; 35
; [else-branch: 1160 | !(p2_0@129@01 && !(break2@111@01) && !(except2@105@01))]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 34
; [then-branch: 1161 | !(p1@16@01) | live]
; [else-branch: 1161 | p1@16@01 | live]
(push) ; 35
; [then-branch: 1161 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1161 | p1@16@01]
(assert p1@16@01)
; [eval] !bypass1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1162 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 1162 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 1162 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 34
; [then-branch: 1163 | !(p2@17@01) | live]
; [else-branch: 1163 | p2@17@01 | live]
(push) ; 35
; [then-branch: 1163 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1163 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1164 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 1164 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 1164 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1
(push) ; 34
; [then-branch: 1165 | !(p1@16@01) | live]
; [else-branch: 1165 | p1@16@01 | live]
(push) ; 35
; [then-branch: 1165 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1165 | p1@16@01]
; [eval] !bypass1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1166 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 1166 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 1166 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2
(push) ; 35
; [then-branch: 1167 | !(p2@17@01) | live]
; [else-branch: 1167 | p2@17@01 | live]
(push) ; 36
; [then-branch: 1167 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 36
(push) ; 36
; [else-branch: 1167 | p2@17@01]
; [eval] !bypass2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1168 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 1168 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 1168 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1 ==> issubtype(typeof(c_4.Container_value), int())
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 1169 | !(p1@16@01) | live]
; [else-branch: 1169 | p1@16@01 | live]
(push) ; 37
; [then-branch: 1169 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1169 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1170 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 1170 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1170 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] issubtype(typeof(c_4.Container_value), int())
; [eval] typeof(c_4.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
(push) ; 36
(assert (not (=>
  (and p1@16@01 (not bypass1@83@01))
  (issubtype<Bool> (typeof<PyType> Container_value@168@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (issubtype<Bool> (typeof<PyType> Container_value@168@01) (as int<PyType>  PyType))))
; [eval] p2 && !bypass2 ==> issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 1171 | !(p2@17@01) | live]
; [else-branch: 1171 | p2@17@01 | live]
(push) ; 37
; [then-branch: 1171 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1171 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1172 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 1172 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1172 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] typeof(c_4_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 1173 | !(p1@16@01) | live]
; [else-branch: 1173 | p1@16@01 | live]
(push) ; 37
; [then-branch: 1173 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1173 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1174 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 1174 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1174 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] !idle1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1175 | True | live]
; [else-branch: 1175 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 1175 | True]
; [eval] _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before@112@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before@112@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1176 | _loop_check_before@112@01 | live]
; [else-branch: 1176 | !(_loop_check_before@112@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 1176 | _loop_check_before@112@01]
(assert _loop_check_before@112@01)
; [eval] _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 1177 | False | live]
; [else-branch: 1177 | True | live]
(push) ; 43
; [then-branch: 1177 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 1177 | True]
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 44
; [then-branch: 1178 | False | live]
; [else-branch: 1178 | True | live]
(push) ; 45
; [then-branch: 1178 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 1178 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 46
; [then-branch: 1179 | False | live]
; [else-branch: 1179 | True | live]
(push) ; 47
; [then-branch: 1179 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 1179 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 48
; [then-branch: 1180 | False | live]
; [else-branch: 1180 | True | live]
(push) ; 49
; [then-branch: 1180 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 1180 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 1181 | False | live]
; [else-branch: 1181 | True | live]
(push) ; 51
; [then-branch: 1181 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 1181 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 1176 | !(_loop_check_before@112@01)]
(assert (not _loop_check_before@112@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before@112@01) _loop_check_before@112@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before@112@01) _loop_check_before@112@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (and
    p1@16@01
    (not bypass1@83@01)
    (or (not _loop_check_before@112@01) _loop_check_before@112@01))))
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 1182 | !(p2@17@01) | live]
; [else-branch: 1182 | p2@17@01 | live]
(push) ; 37
; [then-branch: 1182 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1182 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1183 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 1183 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1183 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] !idle2
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1184 | True | live]
; [else-branch: 1184 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 1184 | True]
; [eval] _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_4@113@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_4@113@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1185 | _loop_check_before_4@113@01 | live]
; [else-branch: 1185 | !(_loop_check_before_4@113@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 1185 | _loop_check_before_4@113@01]
(assert _loop_check_before_4@113@01)
; [eval] _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 1186 | False | live]
; [else-branch: 1186 | True | live]
(push) ; 43
; [then-branch: 1186 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 1186 | True]
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none
; [eval] perm(MustTerminate_0(_cthread_157_0))
(push) ; 44
; [then-branch: 1187 | False | live]
; [else-branch: 1187 | True | live]
(push) ; 45
; [then-branch: 1187 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 1187 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 46
; [then-branch: 1188 | False | live]
; [else-branch: 1188 | True | live]
(push) ; 47
; [then-branch: 1188 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 1188 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 48
; [then-branch: 1189 | False | live]
; [else-branch: 1189 | True | live]
(push) ; 49
; [then-branch: 1189 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 1189 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 1190 | False | live]
; [else-branch: 1190 | True | live]
(push) ; 51
; [then-branch: 1190 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 1190 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 1185 | !(_loop_check_before_4@113@01)]
(assert (not _loop_check_before_4@113@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (and
    p2@17@01
    (not bypass2@84@01)
    (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))))
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 1191 | !(p1@16@01) | live]
; [else-branch: 1191 | p1@16@01 | live]
(push) ; 37
; [then-branch: 1191 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1191 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1192 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 1192 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1192 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1193 | True | live]
; [else-branch: 1193 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 1193 | True]
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before@112@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before@112@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1194 | !(_loop_check_before@112@01) | live]
; [else-branch: 1194 | _loop_check_before@112@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 1194 | !(_loop_check_before@112@01)]
(assert (not _loop_check_before@112@01))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 42
; [then-branch: 1195 | False | live]
; [else-branch: 1195 | True | live]
(push) ; 43
; [then-branch: 1195 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 1195 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 44
; [then-branch: 1196 | False | live]
; [else-branch: 1196 | True | live]
(push) ; 45
; [then-branch: 1196 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 1196 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 1197 | False | live]
; [else-branch: 1197 | True | live]
(push) ; 47
; [then-branch: 1197 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 1197 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 1194 | _loop_check_before@112@01]
(assert _loop_check_before@112@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before@112@01 (not _loop_check_before@112@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before@112@01 (not _loop_check_before@112@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (and
    p1@16@01
    (not bypass1@83@01)
    (or _loop_check_before@112@01 (not _loop_check_before@112@01)))))
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 1198 | !(p2@17@01) | live]
; [else-branch: 1198 | p2@17@01 | live]
(push) ; 37
; [then-branch: 1198 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1198 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1199 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 1199 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1199 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !idle2
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1200 | True | live]
; [else-branch: 1200 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 1200 | True]
; [eval] !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_4
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_4@113@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_4@113@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1201 | !(_loop_check_before_4@113@01) | live]
; [else-branch: 1201 | _loop_check_before_4@113@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 1201 | !(_loop_check_before_4@113@01)]
(assert (not _loop_check_before_4@113@01))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 42
; [then-branch: 1202 | False | live]
; [else-branch: 1202 | True | live]
(push) ; 43
; [then-branch: 1202 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 1202 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 44
; [then-branch: 1203 | False | live]
; [else-branch: 1203 | True | live]
(push) ; 45
; [then-branch: 1203 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 1203 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 1204 | False | live]
; [else-branch: 1204 | True | live]
(push) ; 47
; [then-branch: 1204 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 1204 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 1201 | _loop_check_before_4@113@01]
(assert _loop_check_before_4@113@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (and
    p2@17@01
    (not bypass2@84@01)
    (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))))
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] bypass1 ==> tmp1_1 == except1
(push) ; 36
; [then-branch: 1205 | bypass1@83@01 | dead]
; [else-branch: 1205 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1205 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_4 == break1
(push) ; 36
; [then-branch: 1206 | bypass1@83@01 | dead]
; [else-branch: 1206 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1206 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_0 == Exception_res
(push) ; 36
; [then-branch: 1207 | bypass1@83@01 | dead]
; [else-branch: 1207 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1207 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_2 == _err
(push) ; 36
; [then-branch: 1208 | bypass1@83@01 | dead]
; [else-branch: 1208 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1208 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_3 == _loop_check_before
(push) ; 36
; [then-branch: 1209 | bypass1@83@01 | dead]
; [else-branch: 1209 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1209 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1 == _loop_measures
(push) ; 36
; [then-branch: 1210 | bypass1@83@01 | dead]
; [else-branch: 1210 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1210 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2 == _loop_measures_4
(push) ; 36
; [then-branch: 1211 | bypass2@84@01 | dead]
; [else-branch: 1211 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1211 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_1 == except2
(push) ; 36
; [then-branch: 1212 | bypass2@84@01 | dead]
; [else-branch: 1212 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1212 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_3 == _loop_check_before_4
(push) ; 36
; [then-branch: 1213 | bypass2@84@01 | dead]
; [else-branch: 1213 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1213 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_4 == break2
(push) ; 36
; [then-branch: 1214 | bypass2@84@01 | dead]
; [else-branch: 1214 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1214 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_2 == _err_0
(push) ; 36
; [then-branch: 1215 | bypass2@84@01 | dead]
; [else-branch: 1215 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1215 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_0 == Exception_res_2
(push) ; 36
; [then-branch: 1216 | bypass2@84@01 | dead]
; [else-branch: 1216 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1216 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 30
; [then-branch: 1217 | !(p3@157@01) | live]
; [else-branch: 1217 | p3@157@01 | live]
(push) ; 31
; [then-branch: 1217 | !(p3@157@01)]
(assert (not p3@157@01))
(pop) ; 31
(push) ; 31
; [else-branch: 1217 | p3@157@01]
(assert p3@157@01)
; [eval] !break1
(push) ; 32
; [then-branch: 1218 | break1@110@01 | live]
; [else-branch: 1218 | !(break1@110@01) | live]
(push) ; 33
; [then-branch: 1218 | break1@110@01]
(assert break1@110@01)
(pop) ; 33
(push) ; 33
; [else-branch: 1218 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3@157@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1219 | !(p3@157@01 && !(break1@110@01) && !(except1@103@01)) | dead]
; [else-branch: 1219 | p3@157@01 && !(break1@110@01) && !(except1@103@01) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 1219 | p3@157@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p3@157@01 (and (not break1@110@01) (not except1@103@01))))
(pop) ; 30
(pop) ; 29
(pop) ; 28
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 28
; [then-branch: 1220 | !(p3@157@01) | live]
; [else-branch: 1220 | p3@157@01 | live]
(push) ; 29
; [then-branch: 1220 | !(p3@157@01)]
(assert (not p3@157@01))
(pop) ; 29
(push) ; 29
; [else-branch: 1220 | p3@157@01]
(assert p3@157@01)
; [eval] !break1
(push) ; 30
; [then-branch: 1221 | break1@110@01 | live]
; [else-branch: 1221 | !(break1@110@01) | live]
(push) ; 31
; [then-branch: 1221 | break1@110@01]
(assert break1@110@01)
(pop) ; 31
(push) ; 31
; [else-branch: 1221 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3@157@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1222 | !(p3@157@01 && !(break1@110@01) && !(except1@103@01)) | dead]
; [else-branch: 1222 | p3@157@01 && !(break1@110@01) && !(except1@103@01) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 1222 | p3@157@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p3@157@01 (and (not break1@110@01) (not except1@103@01))))
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(push) ; 18
; [else-branch: 1069 | p1_1@155@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_1@155@01 (and (not break1@110@01) (not except1@103@01))))
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 881 | p2_0@129@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_0@129@01 (and (not break2@111@01) (not except2@105@01))))
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 249 | !(p1_0@128@01 && !(break1@110@01) && !(except1@103@01))]
(assert (not (and p1_0@128@01 (and (not break1@110@01) (not except1@103@01)))))
(pop) ; 14
; [eval] !(p1_0 && (!break1 && !except1))
; [eval] p1_0 && (!break1 && !except1)
(push) ; 14
; [then-branch: 1223 | !(p1_0@128@01) | live]
; [else-branch: 1223 | p1_0@128@01 | live]
(push) ; 15
; [then-branch: 1223 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 15
(push) ; 15
; [else-branch: 1223 | p1_0@128@01]
(assert p1_0@128@01)
; [eval] !break1
(push) ; 16
; [then-branch: 1224 | break1@110@01 | live]
; [else-branch: 1224 | !(break1@110@01) | live]
(push) ; 17
; [then-branch: 1224 | break1@110@01]
(assert break1@110@01)
(pop) ; 17
(push) ; 17
; [else-branch: 1224 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (and p1_0@128@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (and p1_0@128@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1225 | !(p1_0@128@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 1225 | p1_0@128@01 && !(break1@110@01) && !(except1@103@01) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1225 | !(p1_0@128@01 && !(break1@110@01) && !(except1@103@01))]
(assert (not (and p1_0@128@01 (and (not break1@110@01) (not except1@103@01)))))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 15
; [then-branch: 1226 | !(p2_0@129@01) | live]
; [else-branch: 1226 | p2_0@129@01 | live]
(push) ; 16
; [then-branch: 1226 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1226 | p2_0@129@01]
(assert p2_0@129@01)
; [eval] !break2
(push) ; 17
; [then-branch: 1227 | break2@111@01 | live]
; [else-branch: 1227 | !(break2@111@01) | live]
(push) ; 18
; [then-branch: 1227 | break2@111@01]
(assert break2@111@01)
(pop) ; 18
(push) ; 18
; [else-branch: 1227 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=> p2_0@129@01 (and p2_0@129@01 (or (not break2@111@01) break2@111@01))))
(assert (or p2_0@129@01 (not p2_0@129@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and p2_0@129@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (and p2_0@129@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1228 | p2_0@129@01 && !(break2@111@01) && !(except2@105@01) | live]
; [else-branch: 1228 | !(p2_0@129@01 && !(break2@111@01) && !(except2@105@01)) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 1228 | p2_0@129@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_0@129@01 (and (not break2@111@01) (not except2@105@01))))
; [exec]
; _loop_measures_4 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; p1_1 := p1_0 && (!break1 && !except1 && bool___unbox__(b_4))
; [eval] p1_0 && (!break1 && !except1 && bool___unbox__(b_4))
(push) ; 16
; [then-branch: 1229 | !(p1_0@128@01) | live]
; [else-branch: 1229 | p1_0@128@01 | live]
(push) ; 17
; [then-branch: 1229 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1229 | p1_0@128@01]
(assert p1_0@128@01)
; [eval] !break1
(push) ; 18
; [then-branch: 1230 | break1@110@01 | live]
; [else-branch: 1230 | !(break1@110@01) | live]
(push) ; 19
; [then-branch: 1230 | break1@110@01]
(assert break1@110@01)
(pop) ; 19
(push) ; 19
; [else-branch: 1230 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 20
; [then-branch: 1231 | except1@103@01 | live]
; [else-branch: 1231 | !(except1@103@01) | live]
(push) ; 21
; [then-branch: 1231 | except1@103@01]
(assert except1@103@01)
(pop) ; 21
(push) ; 21
; [else-branch: 1231 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] bool___unbox__(b_4)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@26@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@26@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1@103@01)
  (and
    (not except1@103@01)
    (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@26@01))))
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and
    (not break1@110@01)
    (=>
      (not except1@103@01)
      (and
        (not except1@103@01)
        (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b@26@01)))
    (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_0@128@01
  (and
    p1_0@128@01
    (=>
      (not break1@110@01)
      (and
        (not break1@110@01)
        (=>
          (not except1@103@01)
          (and
            (not except1@103@01)
            (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
            (bool___unbox__%precondition $Snap.unit b@26@01)))
        (or (not except1@103@01) except1@103@01)))
    (or (not break1@110@01) break1@110@01))))
(declare-const p1_1@169@01 Bool)
(assert (=
  p1_1@169@01
  (and
    p1_0@128@01
    (and
      (not break1@110@01)
      (and (not except1@103@01) (bool___unbox__ $Snap.unit b@26@01))))))
; [exec]
; p2_1 := p2_0 && (!break2 && !except2 && bool___unbox__(b_4_0))
; [eval] p2_0 && (!break2 && !except2 && bool___unbox__(b_4_0))
(push) ; 16
; [then-branch: 1232 | !(p2_0@129@01) | live]
; [else-branch: 1232 | p2_0@129@01 | live]
(push) ; 17
; [then-branch: 1232 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1232 | p2_0@129@01]
; [eval] !break2
(push) ; 18
; [then-branch: 1233 | break2@111@01 | live]
; [else-branch: 1233 | !(break2@111@01) | live]
(push) ; 19
; [then-branch: 1233 | break2@111@01]
(assert break2@111@01)
(pop) ; 19
(push) ; 19
; [else-branch: 1233 | !(break2@111@01)]
; [eval] !except2
(push) ; 20
; [then-branch: 1234 | except2@105@01 | live]
; [else-branch: 1234 | !(except2@105@01) | live]
(push) ; 21
; [then-branch: 1234 | except2@105@01]
(assert except2@105@01)
(pop) ; 21
(push) ; 21
; [else-branch: 1234 | !(except2@105@01)]
; [eval] bool___unbox__(b_4_0)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_9@27@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@27@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2@105@01)
  (and
    (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_9@27@01))))
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and
    (=>
      (not except2@105@01)
      (and
        (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_9@27@01)))
    (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_0@129@01
  (and
    (=>
      (not break2@111@01)
      (and
        (=>
          (not except2@105@01)
          (and
            (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
            (bool___unbox__%precondition $Snap.unit b_9@27@01)))
        (or (not except2@105@01) except2@105@01)))
    (or (not break2@111@01) break2@111@01))))
(declare-const p2_1@170@01 Bool)
(assert (=
  p2_1@170@01
  (and
    p2_0@129@01
    (and
      (not break2@111@01)
      (and (not except2@105@01) (bool___unbox__ $Snap.unit b_9@27@01))))))
; [exec]
; p3 := p1_0 && (!break1 && !except1 && !bool___unbox__(b_4))
; [eval] p1_0 && (!break1 && !except1 && !bool___unbox__(b_4))
(push) ; 16
; [then-branch: 1235 | !(p1_0@128@01) | live]
; [else-branch: 1235 | p1_0@128@01 | live]
(push) ; 17
; [then-branch: 1235 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1235 | p1_0@128@01]
(assert p1_0@128@01)
; [eval] !break1
(push) ; 18
; [then-branch: 1236 | break1@110@01 | live]
; [else-branch: 1236 | !(break1@110@01) | live]
(push) ; 19
; [then-branch: 1236 | break1@110@01]
(assert break1@110@01)
(pop) ; 19
(push) ; 19
; [else-branch: 1236 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 20
; [then-branch: 1237 | except1@103@01 | live]
; [else-branch: 1237 | !(except1@103@01) | live]
(push) ; 21
; [then-branch: 1237 | except1@103@01]
(assert except1@103@01)
(pop) ; 21
(push) ; 21
; [else-branch: 1237 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] !bool___unbox__(b_4)
; [eval] bool___unbox__(b_4)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@26@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@26@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1@103@01)
  (and
    (not except1@103@01)
    (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@26@01))))
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and
    (not break1@110@01)
    (=>
      (not except1@103@01)
      (and
        (not except1@103@01)
        (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b@26@01)))
    (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3@171@01 Bool)
(assert (=
  p3@171@01
  (and
    p1_0@128@01
    (and
      (not break1@110@01)
      (and (not except1@103@01) (not (bool___unbox__ $Snap.unit b@26@01)))))))
; [exec]
; p4 := p2_0 && (!break2 && !except2 && !bool___unbox__(b_4_0))
; [eval] p2_0 && (!break2 && !except2 && !bool___unbox__(b_4_0))
(push) ; 16
; [then-branch: 1238 | !(p2_0@129@01) | live]
; [else-branch: 1238 | p2_0@129@01 | live]
(push) ; 17
; [then-branch: 1238 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1238 | p2_0@129@01]
; [eval] !break2
(push) ; 18
; [then-branch: 1239 | break2@111@01 | live]
; [else-branch: 1239 | !(break2@111@01) | live]
(push) ; 19
; [then-branch: 1239 | break2@111@01]
(assert break2@111@01)
(pop) ; 19
(push) ; 19
; [else-branch: 1239 | !(break2@111@01)]
; [eval] !except2
(push) ; 20
; [then-branch: 1240 | except2@105@01 | live]
; [else-branch: 1240 | !(except2@105@01) | live]
(push) ; 21
; [then-branch: 1240 | except2@105@01]
(assert except2@105@01)
(pop) ; 21
(push) ; 21
; [else-branch: 1240 | !(except2@105@01)]
; [eval] !bool___unbox__(b_4_0)
; [eval] bool___unbox__(b_4_0)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_9@27@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@27@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2@105@01)
  (and
    (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_9@27@01))))
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and
    (=>
      (not except2@105@01)
      (and
        (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_9@27@01)))
    (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4@172@01 Bool)
(assert (=
  p4@172@01
  (and
    p2_0@129@01
    (and
      (not break2@111@01)
      (and (not except2@105@01) (not (bool___unbox__ $Snap.unit b_9@27@01)))))))
; [exec]
; p1_2 := p1_1 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p1_1 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 1241 | !(p1_1@169@01) | live]
; [else-branch: 1241 | p1_1@169@01 | live]
(push) ; 17
; [then-branch: 1241 | !(p1_1@169@01)]
(assert (not p1_1@169@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1241 | p1_1@169@01]
(assert p1_1@169@01)
; [eval] !break1
(push) ; 18
; [then-branch: 1242 | break1@110@01 | live]
; [else-branch: 1242 | !(break1@110@01) | live]
(push) ; 19
; [then-branch: 1242 | break1@110@01]
(assert break1@110@01)
(pop) ; 19
(push) ; 19
; [else-branch: 1242 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 20
; [then-branch: 1243 | except1@103@01 | live]
; [else-branch: 1243 | !(except1@103@01) | live]
(push) ; 21
; [then-branch: 1243 | except1@103@01]
(assert except1@103@01)
(pop) ; 21
(push) ; 21
; [else-branch: 1243 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and (not break1@110@01) (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_1@169@01
  (and
    p1_1@169@01
    (=>
      (not break1@110@01)
      (and (not break1@110@01) (or (not except1@103@01) except1@103@01)))
    (or (not break1@110@01) break1@110@01))))
(assert (or p1_1@169@01 (not p1_1@169@01)))
; [exec]
; p2_2 := p2_1 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_1 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 1244 | !(p2_1@170@01) | live]
; [else-branch: 1244 | p2_1@170@01 | live]
(push) ; 17
; [then-branch: 1244 | !(p2_1@170@01)]
(assert (not p2_1@170@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1244 | p2_1@170@01]
(assert p2_1@170@01)
; [eval] !break2
(push) ; 18
; [then-branch: 1245 | break2@111@01 | live]
; [else-branch: 1245 | !(break2@111@01) | live]
(push) ; 19
; [then-branch: 1245 | break2@111@01]
(assert break2@111@01)
(pop) ; 19
(push) ; 19
; [else-branch: 1245 | !(break2@111@01)]
; [eval] !except2
(push) ; 20
; [then-branch: 1246 | except2@105@01 | live]
; [else-branch: 1246 | !(except2@105@01) | live]
(push) ; 21
; [then-branch: 1246 | except2@105@01]
(assert except2@105@01)
(pop) ; 21
(push) ; 21
; [else-branch: 1246 | !(except2@105@01)]
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> (not break2@111@01) (or (not except2@105@01) except2@105@01)))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_1@170@01
  (and
    p2_1@170@01
    (=> (not break2@111@01) (or (not except2@105@01) except2@105@01))
    (or (not break2@111@01) break2@111@01))))
(assert (or p2_1@170@01 (not p2_1@170@01)))
; [exec]
; p3_0 := p1_1 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p1_1 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 1247 | !(p1_1@169@01) | live]
; [else-branch: 1247 | p1_1@169@01 | live]
(push) ; 17
; [then-branch: 1247 | !(p1_1@169@01)]
(assert (not p1_1@169@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1247 | p1_1@169@01]
(assert p1_1@169@01)
; [eval] !break1
(push) ; 18
; [then-branch: 1248 | break1@110@01 | live]
; [else-branch: 1248 | !(break1@110@01) | live]
(push) ; 19
; [then-branch: 1248 | break1@110@01]
(assert break1@110@01)
(pop) ; 19
(push) ; 19
; [else-branch: 1248 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 20
; [then-branch: 1249 | except1@103@01 | live]
; [else-branch: 1249 | !(except1@103@01) | live]
(push) ; 21
; [then-branch: 1249 | except1@103@01]
(assert except1@103@01)
(pop) ; 21
(push) ; 21
; [else-branch: 1249 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and (not break1@110@01) (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3_0@173@01 Bool)
(assert (= p3_0@173@01 (and p1_1@169@01 (and (not break1@110@01) (not except1@103@01)))))
; [exec]
; p4_0 := p2_1 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_1 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 1250 | !(p2_1@170@01) | live]
; [else-branch: 1250 | p2_1@170@01 | live]
(push) ; 17
; [then-branch: 1250 | !(p2_1@170@01)]
(assert (not p2_1@170@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1250 | p2_1@170@01]
(assert p2_1@170@01)
; [eval] !break2
(push) ; 18
; [then-branch: 1251 | break2@111@01 | live]
; [else-branch: 1251 | !(break2@111@01) | live]
(push) ; 19
; [then-branch: 1251 | break2@111@01]
(assert break2@111@01)
(pop) ; 19
(push) ; 19
; [else-branch: 1251 | !(break2@111@01)]
; [eval] !except2
(push) ; 20
; [then-branch: 1252 | except2@105@01 | live]
; [else-branch: 1252 | !(except2@105@01) | live]
(push) ; 21
; [then-branch: 1252 | except2@105@01]
(assert except2@105@01)
(pop) ; 21
(push) ; 21
; [else-branch: 1252 | !(except2@105@01)]
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> (not break2@111@01) (or (not except2@105@01) except2@105@01)))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4_0@174@01 Bool)
(assert (= p4_0@174@01 (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01)))))
; [eval] p1_2 && (!break1 && !except1)
; [then-branch: 1253 | False | dead]
; [else-branch: 1253 | True | live]
(push) ; 16
; [else-branch: 1253 | True]
(pop) ; 16
; [eval] !(p1_2 && (!break1 && !except1))
; [eval] p1_2 && (!break1 && !except1)
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1254 | True | live]
; [else-branch: 1254 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1254 | True]
; [eval] p2_2 && (!break2 && !except2)
; [then-branch: 1255 | False | dead]
; [else-branch: 1255 | True | live]
(push) ; 17
; [else-branch: 1255 | True]
(pop) ; 17
; [eval] !(p2_2 && (!break2 && !except2))
; [eval] p2_2 && (!break2 && !except2)
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1256 | True | live]
; [else-branch: 1256 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1256 | True]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 18
; [then-branch: 1257 | !(p1_1@169@01) | live]
; [else-branch: 1257 | p1_1@169@01 | live]
(push) ; 19
; [then-branch: 1257 | !(p1_1@169@01)]
(assert (not p1_1@169@01))
(pop) ; 19
(push) ; 19
; [else-branch: 1257 | p1_1@169@01]
(assert p1_1@169@01)
; [eval] !break1
(push) ; 20
; [then-branch: 1258 | break1@110@01 | live]
; [else-branch: 1258 | !(break1@110@01) | live]
(push) ; 21
; [then-branch: 1258 | break1@110@01]
(assert break1@110@01)
(pop) ; 21
(push) ; 21
; [else-branch: 1258 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> p1_1@169@01 (and p1_1@169@01 (or (not break1@110@01) break1@110@01))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_1@169@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1259 | p1_1@169@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 1259 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01)) | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 1259 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01))]
(assert (not (and p1_1@169@01 (and (not break1@110@01) (not except1@103@01)))))
(pop) ; 18
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 18
; [then-branch: 1260 | !(p1_1@169@01) | live]
; [else-branch: 1260 | p1_1@169@01 | live]
(push) ; 19
; [then-branch: 1260 | !(p1_1@169@01)]
(assert (not p1_1@169@01))
(pop) ; 19
(push) ; 19
; [else-branch: 1260 | p1_1@169@01]
(assert p1_1@169@01)
; [eval] !break1
(push) ; 20
; [then-branch: 1261 | break1@110@01 | live]
; [else-branch: 1261 | !(break1@110@01) | live]
(push) ; 21
; [then-branch: 1261 | break1@110@01]
(assert break1@110@01)
(pop) ; 21
(push) ; 21
; [else-branch: 1261 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_1@169@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_1@169@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1262 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 1262 | p1_1@169@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 1262 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01))]
(assert (not (and p1_1@169@01 (and (not break1@110@01) (not except1@103@01)))))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 19
; [then-branch: 1263 | !(p2_1@170@01) | live]
; [else-branch: 1263 | p2_1@170@01 | live]
(push) ; 20
; [then-branch: 1263 | !(p2_1@170@01)]
(assert (not p2_1@170@01))
(pop) ; 20
(push) ; 20
; [else-branch: 1263 | p2_1@170@01]
(assert p2_1@170@01)
; [eval] !break2
(push) ; 21
; [then-branch: 1264 | break2@111@01 | live]
; [else-branch: 1264 | !(break2@111@01) | live]
(push) ; 22
; [then-branch: 1264 | break2@111@01]
(assert break2@111@01)
(pop) ; 22
(push) ; 22
; [else-branch: 1264 | !(break2@111@01)]
; [eval] !except2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=> p2_1@170@01 (and p2_1@170@01 (or (not break2@111@01) break2@111@01))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1265 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01) | live]
; [else-branch: 1265 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01)) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 1265 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01))))
; [exec]
; c_4_0.Container_valuep := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(declare-const Container_valuep@175@01 $Ref)
(assert (= Container_valuep@175@01 (__prim__int___box__ $Snap.unit 7)))
; [exec]
; tmp := new()
(declare-const tmp@176@01 $Ref)
(assert (not (= tmp@176@01 $Ref.null)))
(assert (not (= tmp@176@01 tmp@123@01)))
(assert (not (= tmp@176@01 tmp1_2@66@01)))
(assert (not (= tmp@176@01 Exception_res@100@01)))
(assert (not (= tmp@176@01 c_9@25@01)))
(assert (not (= tmp@176@01 tmp2_0@63@01)))
(assert (not (= tmp@176@01 _cthread_157_0@19@01)))
(assert (not (= tmp@176@01 b_9@27@01)))
(assert (not (= tmp@176@01 tmp1_0@62@01)))
(assert (not (= tmp@176@01 Exception_res_2@101@01)))
(assert (not (= tmp@176@01 _err_0@104@01)))
(assert (not (= tmp@176@01 tmp2_2@67@01)))
(assert (not (= tmp@176@01 b@26@01)))
(assert (not (= tmp@176@01 _cthread_157@18@01)))
(assert (not (= tmp@176@01 _err@102@01)))
(assert (not (= tmp@176@01 c@24@01)))
(assert (not
  (=
    tmp@176@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@114@01)))))))
(assert (not (= tmp@176@01 Container_valuep@175@01)))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 20
; [then-branch: 1266 | !(p1_1@169@01) | live]
; [else-branch: 1266 | p1_1@169@01 | live]
(push) ; 21
; [then-branch: 1266 | !(p1_1@169@01)]
(assert (not p1_1@169@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1266 | p1_1@169@01]
(assert p1_1@169@01)
; [eval] !break1
(push) ; 22
; [then-branch: 1267 | break1@110@01 | live]
; [else-branch: 1267 | !(break1@110@01) | live]
(push) ; 23
; [then-branch: 1267 | break1@110@01]
(assert break1@110@01)
(pop) ; 23
(push) ; 23
; [else-branch: 1267 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 1268 | p1_1@169@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 1268 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01)) | live]
(push) ; 20
; [else-branch: 1268 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01))]
(pop) ; 20
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 20
; [then-branch: 1269 | !(p1_1@169@01) | live]
; [else-branch: 1269 | p1_1@169@01 | live]
(push) ; 21
; [then-branch: 1269 | !(p1_1@169@01)]
(assert (not p1_1@169@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1269 | p1_1@169@01]
(assert p1_1@169@01)
; [eval] !break1
(push) ; 22
; [then-branch: 1270 | break1@110@01 | live]
; [else-branch: 1270 | !(break1@110@01) | live]
(push) ; 23
; [then-branch: 1270 | break1@110@01]
(assert break1@110@01)
(pop) ; 23
(push) ; 23
; [else-branch: 1270 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_1@169@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1271 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 1271 | p1_1@169@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1271 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01))]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 21
; [then-branch: 1272 | !(p2_1@170@01) | live]
; [else-branch: 1272 | p2_1@170@01 | live]
(push) ; 22
; [then-branch: 1272 | !(p2_1@170@01)]
(assert (not p2_1@170@01))
(pop) ; 22
(push) ; 22
; [else-branch: 1272 | p2_1@170@01]
; [eval] !break2
(push) ; 23
; [then-branch: 1273 | break2@111@01 | live]
; [else-branch: 1273 | !(break2@111@01) | live]
(push) ; 24
; [then-branch: 1273 | break2@111@01]
(assert break2@111@01)
(pop) ; 24
(push) ; 24
; [else-branch: 1273 | !(break2@111@01)]
; [eval] !except2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (=> p2_1@170@01 (or (not break2@111@01) break2@111@01)))
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1274 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01) | live]
; [else-branch: 1274 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1274 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01))))
; [exec]
; Exception_res_2 := tmp
; [eval] p1_1 && (!break1 && !except1)
(push) ; 22
; [then-branch: 1275 | !(p1_1@169@01) | live]
; [else-branch: 1275 | p1_1@169@01 | live]
(push) ; 23
; [then-branch: 1275 | !(p1_1@169@01)]
(assert (not p1_1@169@01))
(pop) ; 23
(push) ; 23
; [else-branch: 1275 | p1_1@169@01]
(assert p1_1@169@01)
; [eval] !break1
(push) ; 24
; [then-branch: 1276 | break1@110@01 | live]
; [else-branch: 1276 | !(break1@110@01) | live]
(push) ; 25
; [then-branch: 1276 | break1@110@01]
(assert break1@110@01)
(pop) ; 25
(push) ; 25
; [else-branch: 1276 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 1277 | p1_1@169@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 1277 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01)) | live]
(push) ; 22
; [else-branch: 1277 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01))]
(pop) ; 22
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 22
; [then-branch: 1278 | !(p1_1@169@01) | live]
; [else-branch: 1278 | p1_1@169@01 | live]
(push) ; 23
; [then-branch: 1278 | !(p1_1@169@01)]
(assert (not p1_1@169@01))
(pop) ; 23
(push) ; 23
; [else-branch: 1278 | p1_1@169@01]
(assert p1_1@169@01)
; [eval] !break1
(push) ; 24
; [then-branch: 1279 | break1@110@01 | live]
; [else-branch: 1279 | !(break1@110@01) | live]
(push) ; 25
; [then-branch: 1279 | break1@110@01]
(assert break1@110@01)
(pop) ; 25
(push) ; 25
; [else-branch: 1279 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_1@169@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1280 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 1280 | p1_1@169@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 1280 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01))]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 23
; [then-branch: 1281 | !(p2_1@170@01) | live]
; [else-branch: 1281 | p2_1@170@01 | live]
(push) ; 24
; [then-branch: 1281 | !(p2_1@170@01)]
(assert (not p2_1@170@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1281 | p2_1@170@01]
; [eval] !break2
(push) ; 25
; [then-branch: 1282 | break2@111@01 | live]
; [else-branch: 1282 | !(break2@111@01) | live]
(push) ; 26
; [then-branch: 1282 | break2@111@01]
(assert break2@111@01)
(pop) ; 26
(push) ; 26
; [else-branch: 1282 | !(break2@111@01)]
; [eval] !except2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1283 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01) | live]
; [else-branch: 1283 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01)) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 1283 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01))))
; [exec]
; inhale typeof(Exception_res_2) == Exception()
(declare-const $t@177@01 $Snap)
(assert (= $t@177@01 $Snap.unit))
; [eval] typeof(Exception_res_2) == Exception()
; [eval] typeof(Exception_res_2)
; [eval] Exception()
(assert (= (typeof<PyType> tmp@176@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_1 && (!break1 && !except1)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1284 | !(p1_1@169@01) | live]
; [else-branch: 1284 | p1_1@169@01 | live]
(push) ; 25
; [then-branch: 1284 | !(p1_1@169@01)]
(assert (not p1_1@169@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1284 | p1_1@169@01]
(assert p1_1@169@01)
; [eval] !break1
(push) ; 26
; [then-branch: 1285 | break1@110@01 | live]
; [else-branch: 1285 | !(break1@110@01) | live]
(push) ; 27
; [then-branch: 1285 | break1@110@01]
(assert break1@110@01)
(pop) ; 27
(push) ; 27
; [else-branch: 1285 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 1286 | p1_1@169@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 1286 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01)) | live]
(push) ; 24
; [else-branch: 1286 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01))]
(pop) ; 24
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 24
; [then-branch: 1287 | !(p1_1@169@01) | live]
; [else-branch: 1287 | p1_1@169@01 | live]
(push) ; 25
; [then-branch: 1287 | !(p1_1@169@01)]
(assert (not p1_1@169@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1287 | p1_1@169@01]
(assert p1_1@169@01)
; [eval] !break1
(push) ; 26
; [then-branch: 1288 | break1@110@01 | live]
; [else-branch: 1288 | !(break1@110@01) | live]
(push) ; 27
; [then-branch: 1288 | break1@110@01]
(assert break1@110@01)
(pop) ; 27
(push) ; 27
; [else-branch: 1288 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_1@169@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1289 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 1289 | p1_1@169@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1289 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01))]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 25
; [then-branch: 1290 | !(p2_1@170@01) | live]
; [else-branch: 1290 | p2_1@170@01 | live]
(push) ; 26
; [then-branch: 1290 | !(p2_1@170@01)]
(assert (not p2_1@170@01))
(pop) ; 26
(push) ; 26
; [else-branch: 1290 | p2_1@170@01]
; [eval] !break2
(push) ; 27
; [then-branch: 1291 | break2@111@01 | live]
; [else-branch: 1291 | !(break2@111@01) | live]
(push) ; 28
; [then-branch: 1291 | break2@111@01]
(assert break2@111@01)
(pop) ; 28
(push) ; 28
; [else-branch: 1291 | !(break2@111@01)]
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1292 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01) | live]
; [else-branch: 1292 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1292 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01))))
; [exec]
; _err_0 := Exception_res_2
; [exec]
; except2 := true
; [exec]
; p1_3 := p3 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p3 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 1293 | !(p3@171@01) | live]
; [else-branch: 1293 | p3@171@01 | live]
(push) ; 27
; [then-branch: 1293 | !(p3@171@01)]
(assert (not p3@171@01))
(pop) ; 27
(push) ; 27
; [else-branch: 1293 | p3@171@01]
(assert p3@171@01)
; [eval] !break1
(push) ; 28
; [then-branch: 1294 | break1@110@01 | live]
; [else-branch: 1294 | !(break1@110@01) | live]
(push) ; 29
; [then-branch: 1294 | break1@110@01]
(assert break1@110@01)
(pop) ; 29
(push) ; 29
; [else-branch: 1294 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 30
; [then-branch: 1295 | except1@103@01 | live]
; [else-branch: 1295 | !(except1@103@01) | live]
(push) ; 31
; [then-branch: 1295 | except1@103@01]
(assert except1@103@01)
(pop) ; 31
(push) ; 31
; [else-branch: 1295 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and (not break1@110@01) (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p3@171@01
  (and
    p3@171@01
    (=>
      (not break1@110@01)
      (and (not break1@110@01) (or (not except1@103@01) except1@103@01)))
    (or (not break1@110@01) break1@110@01))))
(assert (or p3@171@01 (not p3@171@01)))
; [exec]
; p2_3 := p4 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p4 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 1296 | !(p4@172@01) | live]
; [else-branch: 1296 | p4@172@01 | live]
(push) ; 27
; [then-branch: 1296 | !(p4@172@01)]
(assert (not p4@172@01))
(pop) ; 27
(push) ; 27
; [else-branch: 1296 | p4@172@01]
(assert p4@172@01)
; [eval] !break2
(push) ; 28
; [then-branch: 1297 | break2@111@01 | live]
; [else-branch: 1297 | !(break2@111@01) | live]
(push) ; 29
; [then-branch: 1297 | break2@111@01]
(assert break2@111@01)
(pop) ; 29
(push) ; 29
; [else-branch: 1297 | !(break2@111@01)]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=> p4@172@01 (and p4@172@01 (or (not break2@111@01) break2@111@01))))
(assert (or p4@172@01 (not p4@172@01)))
; [exec]
; p3_1 := p3 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p3 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 1298 | !(p3@171@01) | live]
; [else-branch: 1298 | p3@171@01 | live]
(push) ; 27
; [then-branch: 1298 | !(p3@171@01)]
(assert (not p3@171@01))
(pop) ; 27
(push) ; 27
; [else-branch: 1298 | p3@171@01]
(assert p3@171@01)
; [eval] !break1
(push) ; 28
; [then-branch: 1299 | break1@110@01 | live]
; [else-branch: 1299 | !(break1@110@01) | live]
(push) ; 29
; [then-branch: 1299 | break1@110@01]
(assert break1@110@01)
(pop) ; 29
(push) ; 29
; [else-branch: 1299 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 30
; [then-branch: 1300 | except1@103@01 | live]
; [else-branch: 1300 | !(except1@103@01) | live]
(push) ; 31
; [then-branch: 1300 | except1@103@01]
(assert except1@103@01)
(pop) ; 31
(push) ; 31
; [else-branch: 1300 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and (not break1@110@01) (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p3_1@178@01 Bool)
(assert (= p3_1@178@01 (and p3@171@01 (and (not break1@110@01) (not except1@103@01)))))
; [exec]
; p4_1 := p4 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p4 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 1301 | !(p4@172@01) | live]
; [else-branch: 1301 | p4@172@01 | live]
(push) ; 27
; [then-branch: 1301 | !(p4@172@01)]
(assert (not p4@172@01))
(pop) ; 27
(push) ; 27
; [else-branch: 1301 | p4@172@01]
(assert p4@172@01)
; [eval] !break2
(push) ; 28
; [then-branch: 1302 | break2@111@01 | live]
; [else-branch: 1302 | !(break2@111@01) | live]
(push) ; 29
; [then-branch: 1302 | break2@111@01]
(assert break2@111@01)
(pop) ; 29
(push) ; 29
; [else-branch: 1302 | !(break2@111@01)]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [eval] p1_3 && (!break1 && !except1)
; [then-branch: 1303 | False | dead]
; [else-branch: 1303 | True | live]
(push) ; 26
; [else-branch: 1303 | True]
(pop) ; 26
; [eval] !(p1_3 && (!break1 && !except1))
; [eval] p1_3 && (!break1 && !except1)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1304 | True | live]
; [else-branch: 1304 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1304 | True]
; [eval] p2_3 && (!break2 && !except2)
; [then-branch: 1305 | False | dead]
; [else-branch: 1305 | True | live]
(push) ; 27
; [else-branch: 1305 | True]
(pop) ; 27
; [eval] !(p2_3 && (!break2 && !except2))
; [eval] p2_3 && (!break2 && !except2)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1306 | True | live]
; [else-branch: 1306 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 1306 | True]
; [eval] p3 && (!break1 && !except1)
(push) ; 28
; [then-branch: 1307 | !(p3@171@01) | live]
; [else-branch: 1307 | p3@171@01 | live]
(push) ; 29
; [then-branch: 1307 | !(p3@171@01)]
(assert (not p3@171@01))
(pop) ; 29
(push) ; 29
; [else-branch: 1307 | p3@171@01]
(assert p3@171@01)
; [eval] !break1
(push) ; 30
; [then-branch: 1308 | break1@110@01 | live]
; [else-branch: 1308 | !(break1@110@01) | live]
(push) ; 31
; [then-branch: 1308 | break1@110@01]
(assert break1@110@01)
(pop) ; 31
(push) ; 31
; [else-branch: 1308 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=> p3@171@01 (and p3@171@01 (or (not break1@110@01) break1@110@01))))
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3@171@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1309 | p3@171@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 1309 | !(p3@171@01 && !(break1@110@01) && !(except1@103@01)) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 1309 | !(p3@171@01 && !(break1@110@01) && !(except1@103@01))]
(assert (not (and p3@171@01 (and (not break1@110@01) (not except1@103@01)))))
(pop) ; 28
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 28
; [then-branch: 1310 | !(p3@171@01) | live]
; [else-branch: 1310 | p3@171@01 | live]
(push) ; 29
; [then-branch: 1310 | !(p3@171@01)]
(assert (not p3@171@01))
(pop) ; 29
(push) ; 29
; [else-branch: 1310 | p3@171@01]
(assert p3@171@01)
; [eval] !break1
(push) ; 30
; [then-branch: 1311 | break1@110@01 | live]
; [else-branch: 1311 | !(break1@110@01) | live]
(push) ; 31
; [then-branch: 1311 | break1@110@01]
(assert break1@110@01)
(pop) ; 31
(push) ; 31
; [else-branch: 1311 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3@171@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3@171@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1312 | !(p3@171@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 1312 | p3@171@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 1312 | !(p3@171@01 && !(break1@110@01) && !(except1@103@01))]
(assert (not (and p3@171@01 (and (not break1@110@01) (not except1@103@01)))))
; [eval] p4 && (!break2 && !except2)
(push) ; 29
; [then-branch: 1313 | !(p4@172@01) | live]
; [else-branch: 1313 | p4@172@01 | live]
(push) ; 30
; [then-branch: 1313 | !(p4@172@01)]
(assert (not p4@172@01))
(pop) ; 30
(push) ; 30
; [else-branch: 1313 | p4@172@01]
(assert p4@172@01)
; [eval] !break2
(push) ; 31
; [then-branch: 1314 | break2@111@01 | live]
; [else-branch: 1314 | !(break2@111@01) | live]
(push) ; 32
; [then-branch: 1314 | break2@111@01]
(assert break2@111@01)
(pop) ; 32
(push) ; 32
; [else-branch: 1314 | !(break2@111@01)]
; [eval] !except2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 1315 | False | dead]
; [else-branch: 1315 | True | live]
(push) ; 29
; [else-branch: 1315 | True]
(pop) ; 29
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 29
; [then-branch: 1316 | !(p4@172@01) | live]
; [else-branch: 1316 | p4@172@01 | live]
(push) ; 30
; [then-branch: 1316 | !(p4@172@01)]
(assert (not p4@172@01))
(pop) ; 30
(push) ; 30
; [else-branch: 1316 | p4@172@01]
(assert p4@172@01)
; [eval] !break2
(push) ; 31
; [then-branch: 1317 | break2@111@01 | live]
; [else-branch: 1317 | !(break2@111@01) | live]
(push) ; 32
; [then-branch: 1317 | break2@111@01]
(assert break2@111@01)
(pop) ; 32
(push) ; 32
; [else-branch: 1317 | !(break2@111@01)]
; [eval] !except2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1318 | True | live]
; [else-branch: 1318 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 1318 | True]
; [eval] p3 && (!break1 && !except1)
(push) ; 30
; [then-branch: 1319 | !(p3@171@01) | live]
; [else-branch: 1319 | p3@171@01 | live]
(push) ; 31
; [then-branch: 1319 | !(p3@171@01)]
(assert (not p3@171@01))
(pop) ; 31
(push) ; 31
; [else-branch: 1319 | p3@171@01]
(assert p3@171@01)
; [eval] !break1
(push) ; 32
; [then-branch: 1320 | break1@110@01 | live]
; [else-branch: 1320 | !(break1@110@01) | live]
(push) ; 33
; [then-branch: 1320 | break1@110@01]
(assert break1@110@01)
(pop) ; 33
(push) ; 33
; [else-branch: 1320 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 1321 | p3@171@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 1321 | !(p3@171@01 && !(break1@110@01) && !(except1@103@01)) | live]
(push) ; 30
; [else-branch: 1321 | !(p3@171@01 && !(break1@110@01) && !(except1@103@01))]
(pop) ; 30
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 30
; [then-branch: 1322 | !(p3@171@01) | live]
; [else-branch: 1322 | p3@171@01 | live]
(push) ; 31
; [then-branch: 1322 | !(p3@171@01)]
(assert (not p3@171@01))
(pop) ; 31
(push) ; 31
; [else-branch: 1322 | p3@171@01]
(assert p3@171@01)
; [eval] !break1
(push) ; 32
; [then-branch: 1323 | break1@110@01 | live]
; [else-branch: 1323 | !(break1@110@01) | live]
(push) ; 33
; [then-branch: 1323 | break1@110@01]
(assert break1@110@01)
(pop) ; 33
(push) ; 33
; [else-branch: 1323 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3@171@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1324 | !(p3@171@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 1324 | p3@171@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 1324 | !(p3@171@01 && !(break1@110@01) && !(except1@103@01))]
; [eval] p4 && (!break2 && !except2)
(push) ; 31
; [then-branch: 1325 | !(p4@172@01) | live]
; [else-branch: 1325 | p4@172@01 | live]
(push) ; 32
; [then-branch: 1325 | !(p4@172@01)]
(assert (not p4@172@01))
(pop) ; 32
(push) ; 32
; [else-branch: 1325 | p4@172@01]
(assert p4@172@01)
; [eval] !break2
(push) ; 33
; [then-branch: 1326 | break2@111@01 | live]
; [else-branch: 1326 | !(break2@111@01) | live]
(push) ; 34
; [then-branch: 1326 | break2@111@01]
(assert break2@111@01)
(pop) ; 34
(push) ; 34
; [else-branch: 1326 | !(break2@111@01)]
; [eval] !except2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 1327 | False | dead]
; [else-branch: 1327 | True | live]
(push) ; 31
; [else-branch: 1327 | True]
(pop) ; 31
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 31
; [then-branch: 1328 | !(p4@172@01) | live]
; [else-branch: 1328 | p4@172@01 | live]
(push) ; 32
; [then-branch: 1328 | !(p4@172@01)]
(assert (not p4@172@01))
(pop) ; 32
(push) ; 32
; [else-branch: 1328 | p4@172@01]
(assert p4@172@01)
; [eval] !break2
(push) ; 33
; [then-branch: 1329 | break2@111@01 | live]
; [else-branch: 1329 | !(break2@111@01) | live]
(push) ; 34
; [then-branch: 1329 | break2@111@01]
(assert break2@111@01)
(pop) ; 34
(push) ; 34
; [else-branch: 1329 | !(break2@111@01)]
; [eval] !except2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1330 | True | live]
; [else-branch: 1330 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 1330 | True]
; [eval] p1_0 && (!break1 && !except1)
(push) ; 32
; [then-branch: 1331 | !(p1_0@128@01) | live]
; [else-branch: 1331 | p1_0@128@01 | live]
(push) ; 33
; [then-branch: 1331 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 33
(push) ; 33
; [else-branch: 1331 | p1_0@128@01]
(assert p1_0@128@01)
; [eval] !break1
(push) ; 34
; [then-branch: 1332 | break1@110@01 | live]
; [else-branch: 1332 | !(break1@110@01) | live]
(push) ; 35
; [then-branch: 1332 | break1@110@01]
(assert break1@110@01)
(pop) ; 35
(push) ; 35
; [else-branch: 1332 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 1333 | p1_0@128@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 1333 | !(p1_0@128@01 && !(break1@110@01) && !(except1@103@01)) | live]
(push) ; 32
; [else-branch: 1333 | !(p1_0@128@01 && !(break1@110@01) && !(except1@103@01))]
(pop) ; 32
; [eval] !(p1_0 && (!break1 && !except1))
; [eval] p1_0 && (!break1 && !except1)
(push) ; 32
; [then-branch: 1334 | !(p1_0@128@01) | live]
; [else-branch: 1334 | p1_0@128@01 | live]
(push) ; 33
; [then-branch: 1334 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 33
(push) ; 33
; [else-branch: 1334 | p1_0@128@01]
(assert p1_0@128@01)
; [eval] !break1
(push) ; 34
; [then-branch: 1335 | break1@110@01 | live]
; [else-branch: 1335 | !(break1@110@01) | live]
(push) ; 35
; [then-branch: 1335 | break1@110@01]
(assert break1@110@01)
(pop) ; 35
(push) ; 35
; [else-branch: 1335 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not (and p1_0@128@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1336 | !(p1_0@128@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 1336 | p1_0@128@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 1336 | !(p1_0@128@01 && !(break1@110@01) && !(except1@103@01))]
; [eval] p2_0 && (!break2 && !except2)
(push) ; 33
; [then-branch: 1337 | !(p2_0@129@01) | live]
; [else-branch: 1337 | p2_0@129@01 | live]
(push) ; 34
; [then-branch: 1337 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 34
(push) ; 34
; [else-branch: 1337 | p2_0@129@01]
; [eval] !break2
(push) ; 35
; [then-branch: 1338 | break2@111@01 | live]
; [else-branch: 1338 | !(break2@111@01) | live]
(push) ; 36
; [then-branch: 1338 | break2@111@01]
(assert break2@111@01)
(pop) ; 36
(push) ; 36
; [else-branch: 1338 | !(break2@111@01)]
; [eval] !except2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (=> p2_0@129@01 (or (not break2@111@01) break2@111@01)))
; [then-branch: 1339 | False | dead]
; [else-branch: 1339 | True | live]
(push) ; 33
; [else-branch: 1339 | True]
(pop) ; 33
; [eval] !(p2_0 && (!break2 && !except2))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 33
; [then-branch: 1340 | !(p2_0@129@01) | live]
; [else-branch: 1340 | p2_0@129@01 | live]
(push) ; 34
; [then-branch: 1340 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 34
(push) ; 34
; [else-branch: 1340 | p2_0@129@01]
; [eval] !break2
(push) ; 35
; [then-branch: 1341 | break2@111@01 | live]
; [else-branch: 1341 | !(break2@111@01) | live]
(push) ; 36
; [then-branch: 1341 | break2@111@01]
(assert break2@111@01)
(pop) ; 36
(push) ; 36
; [else-branch: 1341 | !(break2@111@01)]
; [eval] !except2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1342 | True | live]
; [else-branch: 1342 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 1342 | True]
; [exec]
; assert (p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true) &&
;   (p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true)
; [eval] p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true
; [eval] p1_0 && (!break1 && !except1)
(push) ; 34
; [then-branch: 1343 | !(p1_0@128@01) | live]
; [else-branch: 1343 | p1_0@128@01 | live]
(push) ; 35
; [then-branch: 1343 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1343 | p1_0@128@01]
(assert p1_0@128@01)
; [eval] !break1
(push) ; 36
; [then-branch: 1344 | break1@110@01 | live]
; [else-branch: 1344 | !(break1@110@01) | live]
(push) ; 37
; [then-branch: 1344 | break1@110@01]
(assert break1@110@01)
(pop) ; 37
(push) ; 37
; [else-branch: 1344 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 1345 | p1_0@128@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 1345 | !(p1_0@128@01 && !(break1@110@01) && !(except1@103@01)) | live]
(push) ; 35
; [else-branch: 1345 | !(p1_0@128@01 && !(break1@110@01) && !(except1@103@01))]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 1346 | !(p2_0@129@01) | live]
; [else-branch: 1346 | p2_0@129@01 | live]
(push) ; 35
; [then-branch: 1346 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1346 | p2_0@129@01]
; [eval] !break2
(push) ; 36
; [then-branch: 1347 | break2@111@01 | live]
; [else-branch: 1347 | !(break2@111@01) | live]
(push) ; 37
; [then-branch: 1347 | break2@111@01]
(assert break2@111@01)
(pop) ; 37
(push) ; 37
; [else-branch: 1347 | !(break2@111@01)]
; [eval] !except2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 1348 | False | dead]
; [else-branch: 1348 | True | live]
(push) ; 35
; [else-branch: 1348 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 34
; [then-branch: 1349 | !(p1@16@01) | live]
; [else-branch: 1349 | p1@16@01 | live]
(push) ; 35
; [then-branch: 1349 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1349 | p1@16@01]
(assert p1@16@01)
; [eval] !bypass1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1350 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 1350 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 1350 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 34
; [then-branch: 1351 | !(p2@17@01) | live]
; [else-branch: 1351 | p2@17@01 | live]
(push) ; 35
; [then-branch: 1351 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1351 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1352 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 1352 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 1352 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1
(push) ; 34
; [then-branch: 1353 | !(p1@16@01) | live]
; [else-branch: 1353 | p1@16@01 | live]
(push) ; 35
; [then-branch: 1353 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1353 | p1@16@01]
; [eval] !bypass1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1354 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 1354 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 1354 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2
(push) ; 35
; [then-branch: 1355 | !(p2@17@01) | live]
; [else-branch: 1355 | p2@17@01 | live]
(push) ; 36
; [then-branch: 1355 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 36
(push) ; 36
; [else-branch: 1355 | p2@17@01]
; [eval] !bypass2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1356 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 1356 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 1356 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1 ==> issubtype(typeof(c_4.Container_value), int())
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 1357 | !(p1@16@01) | live]
; [else-branch: 1357 | p1@16@01 | live]
(push) ; 37
; [then-branch: 1357 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1357 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1358 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 1358 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1358 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] issubtype(typeof(c_4.Container_value), int())
; [eval] typeof(c_4.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 1359 | !(p2@17@01) | live]
; [else-branch: 1359 | p2@17@01 | live]
(push) ; 37
; [then-branch: 1359 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1359 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1360 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 1360 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1360 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] typeof(c_4_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
(push) ; 36
(assert (not (=>
  (and p2@17@01 (not bypass2@84@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@175@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@175@01) (as int<PyType>  PyType))))
; [eval] p1 && !bypass1 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 1361 | !(p1@16@01) | live]
; [else-branch: 1361 | p1@16@01 | live]
(push) ; 37
; [then-branch: 1361 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1361 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1362 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 1362 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1362 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] !idle1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1363 | True | live]
; [else-branch: 1363 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 1363 | True]
; [eval] _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before@112@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before@112@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1364 | _loop_check_before@112@01 | live]
; [else-branch: 1364 | !(_loop_check_before@112@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 1364 | _loop_check_before@112@01]
(assert _loop_check_before@112@01)
; [eval] _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 1365 | False | live]
; [else-branch: 1365 | True | live]
(push) ; 43
; [then-branch: 1365 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 1365 | True]
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 44
; [then-branch: 1366 | False | live]
; [else-branch: 1366 | True | live]
(push) ; 45
; [then-branch: 1366 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 1366 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 46
; [then-branch: 1367 | False | live]
; [else-branch: 1367 | True | live]
(push) ; 47
; [then-branch: 1367 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 1367 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 48
; [then-branch: 1368 | False | live]
; [else-branch: 1368 | True | live]
(push) ; 49
; [then-branch: 1368 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 1368 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 1369 | False | live]
; [else-branch: 1369 | True | live]
(push) ; 51
; [then-branch: 1369 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 1369 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 1364 | !(_loop_check_before@112@01)]
(assert (not _loop_check_before@112@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before@112@01) _loop_check_before@112@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before@112@01) _loop_check_before@112@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (and
    p1@16@01
    (not bypass1@83@01)
    (or (not _loop_check_before@112@01) _loop_check_before@112@01))))
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 1370 | !(p2@17@01) | live]
; [else-branch: 1370 | p2@17@01 | live]
(push) ; 37
; [then-branch: 1370 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1370 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1371 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 1371 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1371 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] !idle2
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1372 | True | live]
; [else-branch: 1372 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 1372 | True]
; [eval] _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_4@113@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_4@113@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1373 | _loop_check_before_4@113@01 | live]
; [else-branch: 1373 | !(_loop_check_before_4@113@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 1373 | _loop_check_before_4@113@01]
(assert _loop_check_before_4@113@01)
; [eval] _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 1374 | False | live]
; [else-branch: 1374 | True | live]
(push) ; 43
; [then-branch: 1374 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 1374 | True]
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none
; [eval] perm(MustTerminate_0(_cthread_157_0))
(push) ; 44
; [then-branch: 1375 | False | live]
; [else-branch: 1375 | True | live]
(push) ; 45
; [then-branch: 1375 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 1375 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 46
; [then-branch: 1376 | False | live]
; [else-branch: 1376 | True | live]
(push) ; 47
; [then-branch: 1376 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 1376 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 48
; [then-branch: 1377 | False | live]
; [else-branch: 1377 | True | live]
(push) ; 49
; [then-branch: 1377 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 1377 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 1378 | False | live]
; [else-branch: 1378 | True | live]
(push) ; 51
; [then-branch: 1378 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 1378 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 1373 | !(_loop_check_before_4@113@01)]
(assert (not _loop_check_before_4@113@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (and
    p2@17@01
    (not bypass2@84@01)
    (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))))
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 1379 | !(p1@16@01) | live]
; [else-branch: 1379 | p1@16@01 | live]
(push) ; 37
; [then-branch: 1379 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1379 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1380 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 1380 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1380 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1381 | True | live]
; [else-branch: 1381 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 1381 | True]
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before@112@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before@112@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1382 | !(_loop_check_before@112@01) | live]
; [else-branch: 1382 | _loop_check_before@112@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 1382 | !(_loop_check_before@112@01)]
(assert (not _loop_check_before@112@01))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 42
; [then-branch: 1383 | False | live]
; [else-branch: 1383 | True | live]
(push) ; 43
; [then-branch: 1383 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 1383 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 44
; [then-branch: 1384 | False | live]
; [else-branch: 1384 | True | live]
(push) ; 45
; [then-branch: 1384 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 1384 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 1385 | False | live]
; [else-branch: 1385 | True | live]
(push) ; 47
; [then-branch: 1385 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 1385 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 1382 | _loop_check_before@112@01]
(assert _loop_check_before@112@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before@112@01 (not _loop_check_before@112@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before@112@01 (not _loop_check_before@112@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (and
    p1@16@01
    (not bypass1@83@01)
    (or _loop_check_before@112@01 (not _loop_check_before@112@01)))))
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 1386 | !(p2@17@01) | live]
; [else-branch: 1386 | p2@17@01 | live]
(push) ; 37
; [then-branch: 1386 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1386 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1387 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 1387 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1387 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !idle2
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1388 | True | live]
; [else-branch: 1388 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 1388 | True]
; [eval] !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_4
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_4@113@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_4@113@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1389 | !(_loop_check_before_4@113@01) | live]
; [else-branch: 1389 | _loop_check_before_4@113@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 1389 | !(_loop_check_before_4@113@01)]
(assert (not _loop_check_before_4@113@01))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 42
; [then-branch: 1390 | False | live]
; [else-branch: 1390 | True | live]
(push) ; 43
; [then-branch: 1390 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 1390 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 44
; [then-branch: 1391 | False | live]
; [else-branch: 1391 | True | live]
(push) ; 45
; [then-branch: 1391 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 1391 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 1392 | False | live]
; [else-branch: 1392 | True | live]
(push) ; 47
; [then-branch: 1392 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 1392 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 1389 | _loop_check_before_4@113@01]
(assert _loop_check_before_4@113@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (and
    p2@17@01
    (not bypass2@84@01)
    (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))))
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] bypass1 ==> tmp1_1 == except1
(push) ; 36
; [then-branch: 1393 | bypass1@83@01 | dead]
; [else-branch: 1393 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1393 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_4 == break1
(push) ; 36
; [then-branch: 1394 | bypass1@83@01 | dead]
; [else-branch: 1394 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1394 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_0 == Exception_res
(push) ; 36
; [then-branch: 1395 | bypass1@83@01 | dead]
; [else-branch: 1395 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1395 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_2 == _err
(push) ; 36
; [then-branch: 1396 | bypass1@83@01 | dead]
; [else-branch: 1396 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1396 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_3 == _loop_check_before
(push) ; 36
; [then-branch: 1397 | bypass1@83@01 | dead]
; [else-branch: 1397 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1397 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1 == _loop_measures
(push) ; 36
; [then-branch: 1398 | bypass1@83@01 | dead]
; [else-branch: 1398 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1398 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2 == _loop_measures_4
(push) ; 36
; [then-branch: 1399 | bypass2@84@01 | dead]
; [else-branch: 1399 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1399 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_1 == except2
(push) ; 36
; [then-branch: 1400 | bypass2@84@01 | dead]
; [else-branch: 1400 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1400 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_3 == _loop_check_before_4
(push) ; 36
; [then-branch: 1401 | bypass2@84@01 | dead]
; [else-branch: 1401 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1401 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_4 == break2
(push) ; 36
; [then-branch: 1402 | bypass2@84@01 | dead]
; [else-branch: 1402 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1402 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_2 == _err_0
(push) ; 36
; [then-branch: 1403 | bypass2@84@01 | dead]
; [else-branch: 1403 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1403 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_0 == Exception_res_2
(push) ; 36
; [then-branch: 1404 | bypass2@84@01 | dead]
; [else-branch: 1404 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1404 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 25
; [then-branch: 1405 | !(p2_1@170@01) | live]
; [else-branch: 1405 | p2_1@170@01 | live]
(push) ; 26
; [then-branch: 1405 | !(p2_1@170@01)]
(assert (not p2_1@170@01))
(pop) ; 26
(push) ; 26
; [else-branch: 1405 | p2_1@170@01]
(assert p2_1@170@01)
; [eval] !break2
(push) ; 27
; [then-branch: 1406 | break2@111@01 | live]
; [else-branch: 1406 | !(break2@111@01) | live]
(push) ; 28
; [then-branch: 1406 | break2@111@01]
(assert break2@111@01)
(pop) ; 28
(push) ; 28
; [else-branch: 1406 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1407 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01)) | dead]
; [else-branch: 1407 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 1407 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01))))
(pop) ; 25
(pop) ; 24
(pop) ; 23
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 23
; [then-branch: 1408 | !(p2_1@170@01) | live]
; [else-branch: 1408 | p2_1@170@01 | live]
(push) ; 24
; [then-branch: 1408 | !(p2_1@170@01)]
(assert (not p2_1@170@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1408 | p2_1@170@01]
(assert p2_1@170@01)
; [eval] !break2
(push) ; 25
; [then-branch: 1409 | break2@111@01 | live]
; [else-branch: 1409 | !(break2@111@01) | live]
(push) ; 26
; [then-branch: 1409 | break2@111@01]
(assert break2@111@01)
(pop) ; 26
(push) ; 26
; [else-branch: 1409 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1410 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01)) | dead]
; [else-branch: 1410 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 1410 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01))))
(pop) ; 23
(pop) ; 22
(pop) ; 21
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 21
; [then-branch: 1411 | !(p2_1@170@01) | live]
; [else-branch: 1411 | p2_1@170@01 | live]
(push) ; 22
; [then-branch: 1411 | !(p2_1@170@01)]
(assert (not p2_1@170@01))
(pop) ; 22
(push) ; 22
; [else-branch: 1411 | p2_1@170@01]
(assert p2_1@170@01)
; [eval] !break2
(push) ; 23
; [then-branch: 1412 | break2@111@01 | live]
; [else-branch: 1412 | !(break2@111@01) | live]
(push) ; 24
; [then-branch: 1412 | break2@111@01]
(assert break2@111@01)
(pop) ; 24
(push) ; 24
; [else-branch: 1412 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1413 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01)) | dead]
; [else-branch: 1413 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01) | live]
(set-option :timeout 0)
(push) ; 21
; [else-branch: 1413 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01))))
(pop) ; 21
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 1265 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01))]
(assert (not (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01)))))
(pop) ; 19
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 19
; [then-branch: 1414 | !(p2_1@170@01) | live]
; [else-branch: 1414 | p2_1@170@01 | live]
(push) ; 20
; [then-branch: 1414 | !(p2_1@170@01)]
(assert (not p2_1@170@01))
(pop) ; 20
(push) ; 20
; [else-branch: 1414 | p2_1@170@01]
(assert p2_1@170@01)
; [eval] !break2
(push) ; 21
; [then-branch: 1415 | break2@111@01 | live]
; [else-branch: 1415 | !(break2@111@01) | live]
(push) ; 22
; [then-branch: 1415 | break2@111@01]
(assert break2@111@01)
(pop) ; 22
(push) ; 22
; [else-branch: 1415 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1416 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 1416 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 1416 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01))]
(assert (not (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01)))))
; [exec]
; tmp := new()
(declare-const tmp@179@01 $Ref)
(assert (not (= tmp@179@01 $Ref.null)))
(assert (not (= tmp@179@01 tmp@123@01)))
(assert (not (= tmp@179@01 tmp1_2@66@01)))
(assert (not (= tmp@179@01 Exception_res@100@01)))
(assert (not (= tmp@179@01 c_9@25@01)))
(assert (not (= tmp@179@01 tmp2_0@63@01)))
(assert (not (= tmp@179@01 _cthread_157_0@19@01)))
(assert (not (= tmp@179@01 b_9@27@01)))
(assert (not (= tmp@179@01 tmp1_0@62@01)))
(assert (not (= tmp@179@01 Exception_res_2@101@01)))
(assert (not (= tmp@179@01 _err_0@104@01)))
(assert (not (= tmp@179@01 tmp2_2@67@01)))
(assert (not (= tmp@179@01 b@26@01)))
(assert (not (= tmp@179@01 _cthread_157@18@01)))
(assert (not (= tmp@179@01 _err@102@01)))
(assert (not (= tmp@179@01 c@24@01)))
(assert (not
  (=
    tmp@179@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
(assert (not
  (=
    tmp@179@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@114@01)))))))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 20
; [then-branch: 1417 | !(p1_1@169@01) | live]
; [else-branch: 1417 | p1_1@169@01 | live]
(push) ; 21
; [then-branch: 1417 | !(p1_1@169@01)]
(assert (not p1_1@169@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1417 | p1_1@169@01]
(assert p1_1@169@01)
; [eval] !break1
(push) ; 22
; [then-branch: 1418 | break1@110@01 | live]
; [else-branch: 1418 | !(break1@110@01) | live]
(push) ; 23
; [then-branch: 1418 | break1@110@01]
(assert break1@110@01)
(pop) ; 23
(push) ; 23
; [else-branch: 1418 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 1419 | p1_1@169@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 1419 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01)) | live]
(push) ; 20
; [else-branch: 1419 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01))]
(pop) ; 20
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 20
; [then-branch: 1420 | !(p1_1@169@01) | live]
; [else-branch: 1420 | p1_1@169@01 | live]
(push) ; 21
; [then-branch: 1420 | !(p1_1@169@01)]
(assert (not p1_1@169@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1420 | p1_1@169@01]
(assert p1_1@169@01)
; [eval] !break1
(push) ; 22
; [then-branch: 1421 | break1@110@01 | live]
; [else-branch: 1421 | !(break1@110@01) | live]
(push) ; 23
; [then-branch: 1421 | break1@110@01]
(assert break1@110@01)
(pop) ; 23
(push) ; 23
; [else-branch: 1421 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_1@169@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1422 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 1422 | p1_1@169@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1422 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01))]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 21
; [then-branch: 1423 | !(p2_1@170@01) | live]
; [else-branch: 1423 | p2_1@170@01 | live]
(push) ; 22
; [then-branch: 1423 | !(p2_1@170@01)]
(assert (not p2_1@170@01))
(pop) ; 22
(push) ; 22
; [else-branch: 1423 | p2_1@170@01]
(assert p2_1@170@01)
; [eval] !break2
(push) ; 23
; [then-branch: 1424 | break2@111@01 | live]
; [else-branch: 1424 | !(break2@111@01) | live]
(push) ; 24
; [then-branch: 1424 | break2@111@01]
(assert break2@111@01)
(pop) ; 24
(push) ; 24
; [else-branch: 1424 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 1425 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 1425 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01)) | live]
(push) ; 21
; [else-branch: 1425 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01))]
(pop) ; 21
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 21
; [then-branch: 1426 | !(p2_1@170@01) | live]
; [else-branch: 1426 | p2_1@170@01 | live]
(push) ; 22
; [then-branch: 1426 | !(p2_1@170@01)]
(assert (not p2_1@170@01))
(pop) ; 22
(push) ; 22
; [else-branch: 1426 | p2_1@170@01]
(assert p2_1@170@01)
; [eval] !break2
(push) ; 23
; [then-branch: 1427 | break2@111@01 | live]
; [else-branch: 1427 | !(break2@111@01) | live]
(push) ; 24
; [then-branch: 1427 | break2@111@01]
(assert break2@111@01)
(pop) ; 24
(push) ; 24
; [else-branch: 1427 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1428 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 1428 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1428 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01))]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 22
; [then-branch: 1429 | !(p1_1@169@01) | live]
; [else-branch: 1429 | p1_1@169@01 | live]
(push) ; 23
; [then-branch: 1429 | !(p1_1@169@01)]
(assert (not p1_1@169@01))
(pop) ; 23
(push) ; 23
; [else-branch: 1429 | p1_1@169@01]
(assert p1_1@169@01)
; [eval] !break1
(push) ; 24
; [then-branch: 1430 | break1@110@01 | live]
; [else-branch: 1430 | !(break1@110@01) | live]
(push) ; 25
; [then-branch: 1430 | break1@110@01]
(assert break1@110@01)
(pop) ; 25
(push) ; 25
; [else-branch: 1430 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 1431 | p1_1@169@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 1431 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01)) | live]
(push) ; 22
; [else-branch: 1431 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01))]
(pop) ; 22
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 22
; [then-branch: 1432 | !(p1_1@169@01) | live]
; [else-branch: 1432 | p1_1@169@01 | live]
(push) ; 23
; [then-branch: 1432 | !(p1_1@169@01)]
(assert (not p1_1@169@01))
(pop) ; 23
(push) ; 23
; [else-branch: 1432 | p1_1@169@01]
(assert p1_1@169@01)
; [eval] !break1
(push) ; 24
; [then-branch: 1433 | break1@110@01 | live]
; [else-branch: 1433 | !(break1@110@01) | live]
(push) ; 25
; [then-branch: 1433 | break1@110@01]
(assert break1@110@01)
(pop) ; 25
(push) ; 25
; [else-branch: 1433 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_1@169@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1434 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 1434 | p1_1@169@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 1434 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01))]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 23
; [then-branch: 1435 | !(p2_1@170@01) | live]
; [else-branch: 1435 | p2_1@170@01 | live]
(push) ; 24
; [then-branch: 1435 | !(p2_1@170@01)]
(assert (not p2_1@170@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1435 | p2_1@170@01]
(assert p2_1@170@01)
; [eval] !break2
(push) ; 25
; [then-branch: 1436 | break2@111@01 | live]
; [else-branch: 1436 | !(break2@111@01) | live]
(push) ; 26
; [then-branch: 1436 | break2@111@01]
(assert break2@111@01)
(pop) ; 26
(push) ; 26
; [else-branch: 1436 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 1437 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 1437 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01)) | live]
(push) ; 23
; [else-branch: 1437 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01))]
(pop) ; 23
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 23
; [then-branch: 1438 | !(p2_1@170@01) | live]
; [else-branch: 1438 | p2_1@170@01 | live]
(push) ; 24
; [then-branch: 1438 | !(p2_1@170@01)]
(assert (not p2_1@170@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1438 | p2_1@170@01]
(assert p2_1@170@01)
; [eval] !break2
(push) ; 25
; [then-branch: 1439 | break2@111@01 | live]
; [else-branch: 1439 | !(break2@111@01) | live]
(push) ; 26
; [then-branch: 1439 | break2@111@01]
(assert break2@111@01)
(pop) ; 26
(push) ; 26
; [else-branch: 1439 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1440 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 1440 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 1440 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01))]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 24
; [then-branch: 1441 | !(p1_1@169@01) | live]
; [else-branch: 1441 | p1_1@169@01 | live]
(push) ; 25
; [then-branch: 1441 | !(p1_1@169@01)]
(assert (not p1_1@169@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1441 | p1_1@169@01]
(assert p1_1@169@01)
; [eval] !break1
(push) ; 26
; [then-branch: 1442 | break1@110@01 | live]
; [else-branch: 1442 | !(break1@110@01) | live]
(push) ; 27
; [then-branch: 1442 | break1@110@01]
(assert break1@110@01)
(pop) ; 27
(push) ; 27
; [else-branch: 1442 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 1443 | p1_1@169@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 1443 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01)) | live]
(push) ; 24
; [else-branch: 1443 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01))]
(pop) ; 24
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 24
; [then-branch: 1444 | !(p1_1@169@01) | live]
; [else-branch: 1444 | p1_1@169@01 | live]
(push) ; 25
; [then-branch: 1444 | !(p1_1@169@01)]
(assert (not p1_1@169@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1444 | p1_1@169@01]
(assert p1_1@169@01)
; [eval] !break1
(push) ; 26
; [then-branch: 1445 | break1@110@01 | live]
; [else-branch: 1445 | !(break1@110@01) | live]
(push) ; 27
; [then-branch: 1445 | break1@110@01]
(assert break1@110@01)
(pop) ; 27
(push) ; 27
; [else-branch: 1445 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_1@169@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1446 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 1446 | p1_1@169@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1446 | !(p1_1@169@01 && !(break1@110@01) && !(except1@103@01))]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 25
; [then-branch: 1447 | !(p2_1@170@01) | live]
; [else-branch: 1447 | p2_1@170@01 | live]
(push) ; 26
; [then-branch: 1447 | !(p2_1@170@01)]
(assert (not p2_1@170@01))
(pop) ; 26
(push) ; 26
; [else-branch: 1447 | p2_1@170@01]
(assert p2_1@170@01)
; [eval] !break2
(push) ; 27
; [then-branch: 1448 | break2@111@01 | live]
; [else-branch: 1448 | !(break2@111@01) | live]
(push) ; 28
; [then-branch: 1448 | break2@111@01]
(assert break2@111@01)
(pop) ; 28
(push) ; 28
; [else-branch: 1448 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 1449 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01) | dead]
; [else-branch: 1449 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01)) | live]
(push) ; 25
; [else-branch: 1449 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01))]
(pop) ; 25
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 25
; [then-branch: 1450 | !(p2_1@170@01) | live]
; [else-branch: 1450 | p2_1@170@01 | live]
(push) ; 26
; [then-branch: 1450 | !(p2_1@170@01)]
(assert (not p2_1@170@01))
(pop) ; 26
(push) ; 26
; [else-branch: 1450 | p2_1@170@01]
(assert p2_1@170@01)
; [eval] !break2
(push) ; 27
; [then-branch: 1451 | break2@111@01 | live]
; [else-branch: 1451 | !(break2@111@01) | live]
(push) ; 28
; [then-branch: 1451 | break2@111@01]
(assert break2@111@01)
(pop) ; 28
(push) ; 28
; [else-branch: 1451 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1452 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01)) | live]
; [else-branch: 1452 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1452 | !(p2_1@170@01 && !(break2@111@01) && !(except2@105@01))]
; [exec]
; p1_3 := p3 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p3 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 1453 | !(p3@171@01) | live]
; [else-branch: 1453 | p3@171@01 | live]
(push) ; 27
; [then-branch: 1453 | !(p3@171@01)]
(assert (not p3@171@01))
(pop) ; 27
(push) ; 27
; [else-branch: 1453 | p3@171@01]
(assert p3@171@01)
; [eval] !break1
(push) ; 28
; [then-branch: 1454 | break1@110@01 | live]
; [else-branch: 1454 | !(break1@110@01) | live]
(push) ; 29
; [then-branch: 1454 | break1@110@01]
(assert break1@110@01)
(pop) ; 29
(push) ; 29
; [else-branch: 1454 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 30
; [then-branch: 1455 | except1@103@01 | live]
; [else-branch: 1455 | !(except1@103@01) | live]
(push) ; 31
; [then-branch: 1455 | except1@103@01]
(assert except1@103@01)
(pop) ; 31
(push) ; 31
; [else-branch: 1455 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and (not break1@110@01) (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p3@171@01
  (and
    p3@171@01
    (=>
      (not break1@110@01)
      (and (not break1@110@01) (or (not except1@103@01) except1@103@01)))
    (or (not break1@110@01) break1@110@01))))
(assert (or p3@171@01 (not p3@171@01)))
; [exec]
; p2_3 := p4 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p4 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 1456 | !(p4@172@01) | live]
; [else-branch: 1456 | p4@172@01 | live]
(push) ; 27
; [then-branch: 1456 | !(p4@172@01)]
(assert (not p4@172@01))
(pop) ; 27
(push) ; 27
; [else-branch: 1456 | p4@172@01]
(assert p4@172@01)
; [eval] !break2
(push) ; 28
; [then-branch: 1457 | break2@111@01 | live]
; [else-branch: 1457 | !(break2@111@01) | live]
(push) ; 29
; [then-branch: 1457 | break2@111@01]
(assert break2@111@01)
(pop) ; 29
(push) ; 29
; [else-branch: 1457 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(push) ; 30
; [then-branch: 1458 | except2@105@01 | live]
; [else-branch: 1458 | !(except2@105@01) | live]
(push) ; 31
; [then-branch: 1458 | except2@105@01]
(assert except2@105@01)
(pop) ; 31
(push) ; 31
; [else-branch: 1458 | !(except2@105@01)]
(assert (not except2@105@01))
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and (not break2@111@01) (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p4@172@01
  (and
    p4@172@01
    (=>
      (not break2@111@01)
      (and (not break2@111@01) (or (not except2@105@01) except2@105@01)))
    (or (not break2@111@01) break2@111@01))))
(assert (or p4@172@01 (not p4@172@01)))
; [exec]
; p3_1 := p3 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p3 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 1459 | !(p3@171@01) | live]
; [else-branch: 1459 | p3@171@01 | live]
(push) ; 27
; [then-branch: 1459 | !(p3@171@01)]
(assert (not p3@171@01))
(pop) ; 27
(push) ; 27
; [else-branch: 1459 | p3@171@01]
(assert p3@171@01)
; [eval] !break1
(push) ; 28
; [then-branch: 1460 | break1@110@01 | live]
; [else-branch: 1460 | !(break1@110@01) | live]
(push) ; 29
; [then-branch: 1460 | break1@110@01]
(assert break1@110@01)
(pop) ; 29
(push) ; 29
; [else-branch: 1460 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 30
; [then-branch: 1461 | except1@103@01 | live]
; [else-branch: 1461 | !(except1@103@01) | live]
(push) ; 31
; [then-branch: 1461 | except1@103@01]
(assert except1@103@01)
(pop) ; 31
(push) ; 31
; [else-branch: 1461 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and (not break1@110@01) (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p3_1@180@01 Bool)
(assert (= p3_1@180@01 (and p3@171@01 (and (not break1@110@01) (not except1@103@01)))))
; [exec]
; p4_1 := p4 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p4 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 1462 | !(p4@172@01) | live]
; [else-branch: 1462 | p4@172@01 | live]
(push) ; 27
; [then-branch: 1462 | !(p4@172@01)]
(assert (not p4@172@01))
(pop) ; 27
(push) ; 27
; [else-branch: 1462 | p4@172@01]
(assert p4@172@01)
; [eval] !break2
(push) ; 28
; [then-branch: 1463 | break2@111@01 | live]
; [else-branch: 1463 | !(break2@111@01) | live]
(push) ; 29
; [then-branch: 1463 | break2@111@01]
(assert break2@111@01)
(pop) ; 29
(push) ; 29
; [else-branch: 1463 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(push) ; 30
; [then-branch: 1464 | except2@105@01 | live]
; [else-branch: 1464 | !(except2@105@01) | live]
(push) ; 31
; [then-branch: 1464 | except2@105@01]
(assert except2@105@01)
(pop) ; 31
(push) ; 31
; [else-branch: 1464 | !(except2@105@01)]
(assert (not except2@105@01))
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and (not break2@111@01) (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p4_1@181@01 Bool)
(assert (= p4_1@181@01 (and p4@172@01 (and (not break2@111@01) (not except2@105@01)))))
; [eval] p1_3 && (!break1 && !except1)
; [then-branch: 1465 | False | dead]
; [else-branch: 1465 | True | live]
(push) ; 26
; [else-branch: 1465 | True]
(pop) ; 26
; [eval] !(p1_3 && (!break1 && !except1))
; [eval] p1_3 && (!break1 && !except1)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1466 | True | live]
; [else-branch: 1466 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1466 | True]
; [eval] p2_3 && (!break2 && !except2)
; [then-branch: 1467 | False | dead]
; [else-branch: 1467 | True | live]
(push) ; 27
; [else-branch: 1467 | True]
(pop) ; 27
; [eval] !(p2_3 && (!break2 && !except2))
; [eval] p2_3 && (!break2 && !except2)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1468 | True | live]
; [else-branch: 1468 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 1468 | True]
; [eval] p3 && (!break1 && !except1)
(push) ; 28
; [then-branch: 1469 | !(p3@171@01) | live]
; [else-branch: 1469 | p3@171@01 | live]
(push) ; 29
; [then-branch: 1469 | !(p3@171@01)]
(assert (not p3@171@01))
(pop) ; 29
(push) ; 29
; [else-branch: 1469 | p3@171@01]
(assert p3@171@01)
; [eval] !break1
(push) ; 30
; [then-branch: 1470 | break1@110@01 | live]
; [else-branch: 1470 | !(break1@110@01) | live]
(push) ; 31
; [then-branch: 1470 | break1@110@01]
(assert break1@110@01)
(pop) ; 31
(push) ; 31
; [else-branch: 1470 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=> p3@171@01 (and p3@171@01 (or (not break1@110@01) break1@110@01))))
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3@171@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1471 | p3@171@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 1471 | !(p3@171@01 && !(break1@110@01) && !(except1@103@01)) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 1471 | !(p3@171@01 && !(break1@110@01) && !(except1@103@01))]
(assert (not (and p3@171@01 (and (not break1@110@01) (not except1@103@01)))))
(pop) ; 28
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 28
; [then-branch: 1472 | !(p3@171@01) | live]
; [else-branch: 1472 | p3@171@01 | live]
(push) ; 29
; [then-branch: 1472 | !(p3@171@01)]
(assert (not p3@171@01))
(pop) ; 29
(push) ; 29
; [else-branch: 1472 | p3@171@01]
(assert p3@171@01)
; [eval] !break1
(push) ; 30
; [then-branch: 1473 | break1@110@01 | live]
; [else-branch: 1473 | !(break1@110@01) | live]
(push) ; 31
; [then-branch: 1473 | break1@110@01]
(assert break1@110@01)
(pop) ; 31
(push) ; 31
; [else-branch: 1473 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3@171@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3@171@01 (and (not break1@110@01) (not except1@103@01))))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1474 | !(p3@171@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 1474 | p3@171@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 1474 | !(p3@171@01 && !(break1@110@01) && !(except1@103@01))]
(assert (not (and p3@171@01 (and (not break1@110@01) (not except1@103@01)))))
; [eval] p4 && (!break2 && !except2)
(push) ; 29
; [then-branch: 1475 | !(p4@172@01) | live]
; [else-branch: 1475 | p4@172@01 | live]
(push) ; 30
; [then-branch: 1475 | !(p4@172@01)]
(assert (not p4@172@01))
(pop) ; 30
(push) ; 30
; [else-branch: 1475 | p4@172@01]
(assert p4@172@01)
; [eval] !break2
(push) ; 31
; [then-branch: 1476 | break2@111@01 | live]
; [else-branch: 1476 | !(break2@111@01) | live]
(push) ; 32
; [then-branch: 1476 | break2@111@01]
(assert break2@111@01)
(pop) ; 32
(push) ; 32
; [else-branch: 1476 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p4@172@01 (and p4@172@01 (or (not break2@111@01) break2@111@01))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4@172@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4@172@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1477 | p4@172@01 && !(break2@111@01) && !(except2@105@01) | live]
; [else-branch: 1477 | !(p4@172@01 && !(break2@111@01) && !(except2@105@01)) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 1477 | p4@172@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p4@172@01 (and (not break2@111@01) (not except2@105@01))))
; [exec]
; c_4_0.Container_valuep := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 30
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 30
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_valuep@182@01 $Ref)
(assert (= Container_valuep@182@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p3 && (!break1 && !except1)
(push) ; 30
; [then-branch: 1478 | !(p3@171@01) | live]
; [else-branch: 1478 | p3@171@01 | live]
(push) ; 31
; [then-branch: 1478 | !(p3@171@01)]
(assert (not p3@171@01))
(pop) ; 31
(push) ; 31
; [else-branch: 1478 | p3@171@01]
(assert p3@171@01)
; [eval] !break1
(push) ; 32
; [then-branch: 1479 | break1@110@01 | live]
; [else-branch: 1479 | !(break1@110@01) | live]
(push) ; 33
; [then-branch: 1479 | break1@110@01]
(assert break1@110@01)
(pop) ; 33
(push) ; 33
; [else-branch: 1479 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 1480 | p3@171@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 1480 | !(p3@171@01 && !(break1@110@01) && !(except1@103@01)) | live]
(push) ; 30
; [else-branch: 1480 | !(p3@171@01 && !(break1@110@01) && !(except1@103@01))]
(pop) ; 30
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 30
; [then-branch: 1481 | !(p3@171@01) | live]
; [else-branch: 1481 | p3@171@01 | live]
(push) ; 31
; [then-branch: 1481 | !(p3@171@01)]
(assert (not p3@171@01))
(pop) ; 31
(push) ; 31
; [else-branch: 1481 | p3@171@01]
(assert p3@171@01)
; [eval] !break1
(push) ; 32
; [then-branch: 1482 | break1@110@01 | live]
; [else-branch: 1482 | !(break1@110@01) | live]
(push) ; 33
; [then-branch: 1482 | break1@110@01]
(assert break1@110@01)
(pop) ; 33
(push) ; 33
; [else-branch: 1482 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3@171@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1483 | !(p3@171@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 1483 | p3@171@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 1483 | !(p3@171@01 && !(break1@110@01) && !(except1@103@01))]
; [eval] p4 && (!break2 && !except2)
(push) ; 31
; [then-branch: 1484 | !(p4@172@01) | live]
; [else-branch: 1484 | p4@172@01 | live]
(push) ; 32
; [then-branch: 1484 | !(p4@172@01)]
(assert (not p4@172@01))
(pop) ; 32
(push) ; 32
; [else-branch: 1484 | p4@172@01]
; [eval] !break2
(push) ; 33
; [then-branch: 1485 | break2@111@01 | live]
; [else-branch: 1485 | !(break2@111@01) | live]
(push) ; 34
; [then-branch: 1485 | break2@111@01]
(assert break2@111@01)
(pop) ; 34
(push) ; 34
; [else-branch: 1485 | !(break2@111@01)]
; [eval] !except2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (=> p4@172@01 (or (not break2@111@01) break2@111@01)))
(push) ; 31
(set-option :timeout 10)
(assert (not (not (and p4@172@01 (and (not break2@111@01) (not except2@105@01))))))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4@172@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1486 | p4@172@01 && !(break2@111@01) && !(except2@105@01) | live]
; [else-branch: 1486 | !(p4@172@01 && !(break2@111@01) && !(except2@105@01)) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 1486 | p4@172@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p4@172@01 (and (not break2@111@01) (not except2@105@01))))
; [exec]
; break2 := true
; [eval] p1_0 && (!break1 && !except1)
(push) ; 32
; [then-branch: 1487 | !(p1_0@128@01) | live]
; [else-branch: 1487 | p1_0@128@01 | live]
(push) ; 33
; [then-branch: 1487 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 33
(push) ; 33
; [else-branch: 1487 | p1_0@128@01]
(assert p1_0@128@01)
; [eval] !break1
(push) ; 34
; [then-branch: 1488 | break1@110@01 | live]
; [else-branch: 1488 | !(break1@110@01) | live]
(push) ; 35
; [then-branch: 1488 | break1@110@01]
(assert break1@110@01)
(pop) ; 35
(push) ; 35
; [else-branch: 1488 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 1489 | p1_0@128@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 1489 | !(p1_0@128@01 && !(break1@110@01) && !(except1@103@01)) | live]
(push) ; 32
; [else-branch: 1489 | !(p1_0@128@01 && !(break1@110@01) && !(except1@103@01))]
(pop) ; 32
; [eval] !(p1_0 && (!break1 && !except1))
; [eval] p1_0 && (!break1 && !except1)
(push) ; 32
; [then-branch: 1490 | !(p1_0@128@01) | live]
; [else-branch: 1490 | p1_0@128@01 | live]
(push) ; 33
; [then-branch: 1490 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 33
(push) ; 33
; [else-branch: 1490 | p1_0@128@01]
(assert p1_0@128@01)
; [eval] !break1
(push) ; 34
; [then-branch: 1491 | break1@110@01 | live]
; [else-branch: 1491 | !(break1@110@01) | live]
(push) ; 35
; [then-branch: 1491 | break1@110@01]
(assert break1@110@01)
(pop) ; 35
(push) ; 35
; [else-branch: 1491 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not (and p1_0@128@01 (and (not break1@110@01) (not except1@103@01)))))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1492 | !(p1_0@128@01 && !(break1@110@01) && !(except1@103@01)) | live]
; [else-branch: 1492 | p1_0@128@01 && !(break1@110@01) && !(except1@103@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 1492 | !(p1_0@128@01 && !(break1@110@01) && !(except1@103@01))]
; [eval] p2_0 && (!break2 && !except2)
(push) ; 33
; [then-branch: 1493 | !(p2_0@129@01) | live]
; [else-branch: 1493 | p2_0@129@01 | live]
(push) ; 34
; [then-branch: 1493 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 34
(push) ; 34
; [else-branch: 1493 | p2_0@129@01]
; [eval] !break2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 1494 | False | dead]
; [else-branch: 1494 | True | live]
(push) ; 33
; [else-branch: 1494 | True]
(pop) ; 33
; [eval] !(p2_0 && (!break2 && !except2))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 33
; [then-branch: 1495 | !(p2_0@129@01) | live]
; [else-branch: 1495 | p2_0@129@01 | live]
(push) ; 34
; [then-branch: 1495 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 34
(push) ; 34
; [else-branch: 1495 | p2_0@129@01]
; [eval] !break2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1496 | True | live]
; [else-branch: 1496 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 1496 | True]
; [exec]
; assert (p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true) &&
;   (p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true)
; [eval] p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true
; [eval] p1_0 && (!break1 && !except1)
(push) ; 34
; [then-branch: 1497 | !(p1_0@128@01) | live]
; [else-branch: 1497 | p1_0@128@01 | live]
(push) ; 35
; [then-branch: 1497 | !(p1_0@128@01)]
(assert (not p1_0@128@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1497 | p1_0@128@01]
(assert p1_0@128@01)
; [eval] !break1
(push) ; 36
; [then-branch: 1498 | break1@110@01 | live]
; [else-branch: 1498 | !(break1@110@01) | live]
(push) ; 37
; [then-branch: 1498 | break1@110@01]
(assert break1@110@01)
(pop) ; 37
(push) ; 37
; [else-branch: 1498 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 1499 | p1_0@128@01 && !(break1@110@01) && !(except1@103@01) | dead]
; [else-branch: 1499 | !(p1_0@128@01 && !(break1@110@01) && !(except1@103@01)) | live]
(push) ; 35
; [else-branch: 1499 | !(p1_0@128@01 && !(break1@110@01) && !(except1@103@01))]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 1500 | !(p2_0@129@01) | live]
; [else-branch: 1500 | p2_0@129@01 | live]
(push) ; 35
; [then-branch: 1500 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1500 | p2_0@129@01]
; [eval] !break2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 1501 | False | dead]
; [else-branch: 1501 | True | live]
(push) ; 35
; [else-branch: 1501 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 34
; [then-branch: 1502 | !(p1@16@01) | live]
; [else-branch: 1502 | p1@16@01 | live]
(push) ; 35
; [then-branch: 1502 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1502 | p1@16@01]
(assert p1@16@01)
; [eval] !bypass1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1503 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 1503 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 1503 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 34
; [then-branch: 1504 | !(p2@17@01) | live]
; [else-branch: 1504 | p2@17@01 | live]
(push) ; 35
; [then-branch: 1504 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1504 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1505 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 1505 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 1505 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1
(push) ; 34
; [then-branch: 1506 | !(p1@16@01) | live]
; [else-branch: 1506 | p1@16@01 | live]
(push) ; 35
; [then-branch: 1506 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1506 | p1@16@01]
; [eval] !bypass1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1507 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 1507 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 1507 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2
(push) ; 35
; [then-branch: 1508 | !(p2@17@01) | live]
; [else-branch: 1508 | p2@17@01 | live]
(push) ; 36
; [then-branch: 1508 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 36
(push) ; 36
; [else-branch: 1508 | p2@17@01]
; [eval] !bypass2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1509 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 1509 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 1509 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1 ==> issubtype(typeof(c_4.Container_value), int())
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 1510 | !(p1@16@01) | live]
; [else-branch: 1510 | p1@16@01 | live]
(push) ; 37
; [then-branch: 1510 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1510 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1511 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 1511 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1511 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] issubtype(typeof(c_4.Container_value), int())
; [eval] typeof(c_4.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 1512 | !(p2@17@01) | live]
; [else-branch: 1512 | p2@17@01 | live]
(push) ; 37
; [then-branch: 1512 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1512 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1513 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 1513 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1513 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] typeof(c_4_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2@17@01 (not bypass2@84@01)))
(push) ; 36
(assert (not (=>
  (and p2@17@01 (not bypass2@84@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@182@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@182@01) (as int<PyType>  PyType))))
; [eval] p1 && !bypass1 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 1514 | !(p1@16@01) | live]
; [else-branch: 1514 | p1@16@01 | live]
(push) ; 37
; [then-branch: 1514 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1514 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1515 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 1515 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1515 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] !idle1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1516 | True | live]
; [else-branch: 1516 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 1516 | True]
; [eval] _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before@112@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before@112@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1517 | _loop_check_before@112@01 | live]
; [else-branch: 1517 | !(_loop_check_before@112@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 1517 | _loop_check_before@112@01]
(assert _loop_check_before@112@01)
; [eval] _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 1518 | False | live]
; [else-branch: 1518 | True | live]
(push) ; 43
; [then-branch: 1518 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 1518 | True]
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 44
; [then-branch: 1519 | False | live]
; [else-branch: 1519 | True | live]
(push) ; 45
; [then-branch: 1519 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 1519 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 46
; [then-branch: 1520 | False | live]
; [else-branch: 1520 | True | live]
(push) ; 47
; [then-branch: 1520 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 1520 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 48
; [then-branch: 1521 | False | live]
; [else-branch: 1521 | True | live]
(push) ; 49
; [then-branch: 1521 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 1521 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 1522 | False | live]
; [else-branch: 1522 | True | live]
(push) ; 51
; [then-branch: 1522 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 1522 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 1517 | !(_loop_check_before@112@01)]
(assert (not _loop_check_before@112@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before@112@01) _loop_check_before@112@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before@112@01) _loop_check_before@112@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (and
    p1@16@01
    (not bypass1@83@01)
    (or (not _loop_check_before@112@01) _loop_check_before@112@01))))
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 1523 | !(p2@17@01) | live]
; [else-branch: 1523 | p2@17@01 | live]
(push) ; 37
; [then-branch: 1523 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1523 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1524 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 1524 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1524 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] !idle2
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1525 | True | live]
; [else-branch: 1525 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 1525 | True]
; [eval] _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_4@113@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_4@113@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1526 | _loop_check_before_4@113@01 | live]
; [else-branch: 1526 | !(_loop_check_before_4@113@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 1526 | _loop_check_before_4@113@01]
(assert _loop_check_before_4@113@01)
; [eval] _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 1527 | False | live]
; [else-branch: 1527 | True | live]
(push) ; 43
; [then-branch: 1527 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 1527 | True]
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none
; [eval] perm(MustTerminate_0(_cthread_157_0))
(push) ; 44
; [then-branch: 1528 | False | live]
; [else-branch: 1528 | True | live]
(push) ; 45
; [then-branch: 1528 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 1528 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 46
; [then-branch: 1529 | False | live]
; [else-branch: 1529 | True | live]
(push) ; 47
; [then-branch: 1529 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 1529 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 48
; [then-branch: 1530 | False | live]
; [else-branch: 1530 | True | live]
(push) ; 49
; [then-branch: 1530 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 1530 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 1531 | False | live]
; [else-branch: 1531 | True | live]
(push) ; 51
; [then-branch: 1531 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 1531 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 1526 | !(_loop_check_before_4@113@01)]
(assert (not _loop_check_before_4@113@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (and
    p2@17@01
    (not bypass2@84@01)
    (or (not _loop_check_before_4@113@01) _loop_check_before_4@113@01))))
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] p1 && !bypass1 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 1532 | !(p1@16@01) | live]
; [else-branch: 1532 | p1@16@01 | live]
(push) ; 37
; [then-branch: 1532 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1532 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@83@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@83@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1533 | p1@16@01 && !(bypass1@83@01) | live]
; [else-branch: 1533 | !(p1@16@01 && !(bypass1@83@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1533 | p1@16@01 && !(bypass1@83@01)]
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1534 | True | live]
; [else-branch: 1534 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 1534 | True]
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before@112@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before@112@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1535 | !(_loop_check_before@112@01) | live]
; [else-branch: 1535 | _loop_check_before@112@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 1535 | !(_loop_check_before@112@01)]
(assert (not _loop_check_before@112@01))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 42
; [then-branch: 1536 | False | live]
; [else-branch: 1536 | True | live]
(push) ; 43
; [then-branch: 1536 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 1536 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 44
; [then-branch: 1537 | False | live]
; [else-branch: 1537 | True | live]
(push) ; 45
; [then-branch: 1537 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 1537 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 1538 | False | live]
; [else-branch: 1538 | True | live]
(push) ; 47
; [then-branch: 1538 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 1538 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 1535 | _loop_check_before@112@01]
(assert _loop_check_before@112@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before@112@01 (not _loop_check_before@112@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before@112@01 (not _loop_check_before@112@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@83@01))
  (and
    p1@16@01
    (not bypass1@83@01)
    (or _loop_check_before@112@01 (not _loop_check_before@112@01)))))
(assert (and p1@16@01 (not bypass1@83@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 1539 | !(p2@17@01) | live]
; [else-branch: 1539 | p2@17@01 | live]
(push) ; 37
; [then-branch: 1539 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 37
(push) ; 37
; [else-branch: 1539 | p2@17@01]
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@84@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@84@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1540 | p2@17@01 && !(bypass2@84@01) | live]
; [else-branch: 1540 | !(p2@17@01 && !(bypass2@84@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1540 | p2@17@01 && !(bypass2@84@01)]
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !idle2
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1541 | True | live]
; [else-branch: 1541 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 1541 | True]
; [eval] !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_4
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_4@113@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_4@113@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1542 | !(_loop_check_before_4@113@01) | live]
; [else-branch: 1542 | _loop_check_before_4@113@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 1542 | !(_loop_check_before_4@113@01)]
(assert (not _loop_check_before_4@113@01))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 42
; [then-branch: 1543 | False | live]
; [else-branch: 1543 | True | live]
(push) ; 43
; [then-branch: 1543 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 1543 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 44
; [then-branch: 1544 | False | live]
; [else-branch: 1544 | True | live]
(push) ; 45
; [then-branch: 1544 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 1544 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 1545 | False | live]
; [else-branch: 1545 | True | live]
(push) ; 47
; [then-branch: 1545 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 1545 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 1542 | _loop_check_before_4@113@01]
(assert _loop_check_before_4@113@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@84@01))
  (and
    p2@17@01
    (not bypass2@84@01)
    (or _loop_check_before_4@113@01 (not _loop_check_before_4@113@01)))))
(assert (and p2@17@01 (not bypass2@84@01)))
; [eval] bypass1 ==> tmp1_1 == except1
(push) ; 36
; [then-branch: 1546 | bypass1@83@01 | dead]
; [else-branch: 1546 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1546 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_4 == break1
(push) ; 36
; [then-branch: 1547 | bypass1@83@01 | dead]
; [else-branch: 1547 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1547 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_0 == Exception_res
(push) ; 36
; [then-branch: 1548 | bypass1@83@01 | dead]
; [else-branch: 1548 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1548 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_2 == _err
(push) ; 36
; [then-branch: 1549 | bypass1@83@01 | dead]
; [else-branch: 1549 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1549 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_3 == _loop_check_before
(push) ; 36
; [then-branch: 1550 | bypass1@83@01 | dead]
; [else-branch: 1550 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1550 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1 == _loop_measures
(push) ; 36
; [then-branch: 1551 | bypass1@83@01 | dead]
; [else-branch: 1551 | !(bypass1@83@01) | live]
(push) ; 37
; [else-branch: 1551 | !(bypass1@83@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2 == _loop_measures_4
(push) ; 36
; [then-branch: 1552 | bypass2@84@01 | dead]
; [else-branch: 1552 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1552 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_1 == except2
(push) ; 36
; [then-branch: 1553 | bypass2@84@01 | dead]
; [else-branch: 1553 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1553 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_3 == _loop_check_before_4
(push) ; 36
; [then-branch: 1554 | bypass2@84@01 | dead]
; [else-branch: 1554 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1554 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_4 == break2
(push) ; 36
; [then-branch: 1555 | bypass2@84@01 | dead]
; [else-branch: 1555 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1555 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_2 == _err_0
(push) ; 36
; [then-branch: 1556 | bypass2@84@01 | dead]
; [else-branch: 1556 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1556 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_0 == Exception_res_2
(push) ; 36
; [then-branch: 1557 | bypass2@84@01 | dead]
; [else-branch: 1557 | !(bypass2@84@01) | live]
(push) ; 37
; [else-branch: 1557 | !(bypass2@84@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 31
; [then-branch: 1558 | !(p4@172@01) | live]
; [else-branch: 1558 | p4@172@01 | live]
(push) ; 32
; [then-branch: 1558 | !(p4@172@01)]
(assert (not p4@172@01))
(pop) ; 32
(push) ; 32
; [else-branch: 1558 | p4@172@01]
(assert p4@172@01)
; [eval] !break2
(push) ; 33
; [then-branch: 1559 | break2@111@01 | live]
; [else-branch: 1559 | !(break2@111@01) | live]
(push) ; 34
; [then-branch: 1559 | break2@111@01]
(assert break2@111@01)
(pop) ; 34
(push) ; 34
; [else-branch: 1559 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4@172@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1560 | !(p4@172@01 && !(break2@111@01) && !(except2@105@01)) | dead]
; [else-branch: 1560 | p4@172@01 && !(break2@111@01) && !(except2@105@01) | live]
(set-option :timeout 0)
(push) ; 31
; [else-branch: 1560 | p4@172@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p4@172@01 (and (not break2@111@01) (not except2@105@01))))
(pop) ; 31
(pop) ; 30
(pop) ; 29
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 29
; [then-branch: 1561 | !(p4@172@01) | live]
; [else-branch: 1561 | p4@172@01 | live]
(push) ; 30
; [then-branch: 1561 | !(p4@172@01)]
(assert (not p4@172@01))
(pop) ; 30
(push) ; 30
; [else-branch: 1561 | p4@172@01]
(assert p4@172@01)
; [eval] !break2
(push) ; 31
; [then-branch: 1562 | break2@111@01 | live]
; [else-branch: 1562 | !(break2@111@01) | live]
(push) ; 32
; [then-branch: 1562 | break2@111@01]
(assert break2@111@01)
(pop) ; 32
(push) ; 32
; [else-branch: 1562 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4@172@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1563 | !(p4@172@01 && !(break2@111@01) && !(except2@105@01)) | dead]
; [else-branch: 1563 | p4@172@01 && !(break2@111@01) && !(except2@105@01) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 1563 | p4@172@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p4@172@01 (and (not break2@111@01) (not except2@105@01))))
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 1416 | p2_1@170@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_1@170@01 (and (not break2@111@01) (not except2@105@01))))
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [eval] !(p2_0 && (!break2 && !except2))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 15
; [then-branch: 1564 | !(p2_0@129@01) | live]
; [else-branch: 1564 | p2_0@129@01 | live]
(push) ; 16
; [then-branch: 1564 | !(p2_0@129@01)]
(assert (not p2_0@129@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1564 | p2_0@129@01]
(assert p2_0@129@01)
; [eval] !break2
(push) ; 17
; [then-branch: 1565 | break2@111@01 | live]
; [else-branch: 1565 | !(break2@111@01) | live]
(push) ; 18
; [then-branch: 1565 | break2@111@01]
(assert break2@111@01)
(pop) ; 18
(push) ; 18
; [else-branch: 1565 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (and p2_0@129@01 (and (not break2@111@01) (not except2@105@01)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1566 | !(p2_0@129@01 && !(break2@111@01) && !(except2@105@01)) | dead]
; [else-branch: 1566 | p2_0@129@01 && !(break2@111@01) && !(except2@105@01) | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 1566 | p2_0@129@01 && !(break2@111@01) && !(except2@105@01)]
(assert (and p2_0@129@01 (and (not break2@111@01) (not except2@105@01))))
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 1225 | p1_0@128@01 && !(break1@110@01) && !(except1@103@01)]
(assert (and p1_0@128@01 (and (not break1@110@01) (not except1@103@01))))
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 234 | !(p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01) || p2@17@01 && !(break2@111@01) && !(except2@105@01) && !(bypass2@84@01))]
(assert (not
  (or
    (and
      p1@16@01
      (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01))))
    (and
      p2@17@01
      (and (not break2@111@01) (and (not except2@105@01) (not bypass2@84@01)))))))
(pop) ; 13
; [eval] !(p1 && (!break1 && !except1 && (!bypass1 && true)) || p2 && (!break2 && !except2 && (!bypass2 && true)))
; [eval] p1 && (!break1 && !except1 && (!bypass1 && true)) || p2 && (!break2 && !except2 && (!bypass2 && true))
; [eval] p1 && (!break1 && !except1 && (!bypass1 && true))
(push) ; 13
; [then-branch: 1567 | !(p1@16@01) | live]
; [else-branch: 1567 | p1@16@01 | live]
(push) ; 14
; [then-branch: 1567 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 14
(push) ; 14
; [else-branch: 1567 | p1@16@01]
(assert p1@16@01)
; [eval] !break1
(push) ; 15
; [then-branch: 1568 | break1@110@01 | live]
; [else-branch: 1568 | !(break1@110@01) | live]
(push) ; 16
; [then-branch: 1568 | break1@110@01]
(assert break1@110@01)
(pop) ; 16
(push) ; 16
; [else-branch: 1568 | !(break1@110@01)]
(assert (not break1@110@01))
; [eval] !except1
(push) ; 17
; [then-branch: 1569 | except1@103@01 | live]
; [else-branch: 1569 | !(except1@103@01) | live]
(push) ; 18
; [then-branch: 1569 | except1@103@01]
(assert except1@103@01)
(pop) ; 18
(push) ; 18
; [else-branch: 1569 | !(except1@103@01)]
(assert (not except1@103@01))
; [eval] !bypass1
(push) ; 19
; [then-branch: 1570 | bypass1@83@01 | live]
; [else-branch: 1570 | !(bypass1@83@01) | live]
(push) ; 20
; [then-branch: 1570 | bypass1@83@01]
(assert bypass1@83@01)
(pop) ; 20
(push) ; 20
; [else-branch: 1570 | !(bypass1@83@01)]
(assert (not bypass1@83@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1@83@01) bypass1@83@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1@103@01)
  (and (not except1@103@01) (or (not bypass1@83@01) bypass1@83@01))))
(assert (or (not except1@103@01) except1@103@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@110@01)
  (and
    (not break1@110@01)
    (=>
      (not except1@103@01)
      (and (not except1@103@01) (or (not bypass1@83@01) bypass1@83@01)))
    (or (not except1@103@01) except1@103@01))))
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 1571 | p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01) | live]
; [else-branch: 1571 | !(p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01)) | live]
(push) ; 14
; [then-branch: 1571 | p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01)]
(assert (and
  p1@16@01
  (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01)))))
(pop) ; 14
(push) ; 14
; [else-branch: 1571 | !(p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01))]
(assert (not
  (and
    p1@16@01
    (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01))))))
; [eval] p2 && (!break2 && !except2 && (!bypass2 && true))
(push) ; 15
; [then-branch: 1572 | !(p2@17@01) | live]
; [else-branch: 1572 | p2@17@01 | live]
(push) ; 16
; [then-branch: 1572 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1572 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 17
; [then-branch: 1573 | break2@111@01 | live]
; [else-branch: 1573 | !(break2@111@01) | live]
(push) ; 18
; [then-branch: 1573 | break2@111@01]
(assert break2@111@01)
(pop) ; 18
(push) ; 18
; [else-branch: 1573 | !(break2@111@01)]
(assert (not break2@111@01))
; [eval] !except2
(push) ; 19
; [then-branch: 1574 | except2@105@01 | live]
; [else-branch: 1574 | !(except2@105@01) | live]
(push) ; 20
; [then-branch: 1574 | except2@105@01]
(assert except2@105@01)
(pop) ; 20
(push) ; 20
; [else-branch: 1574 | !(except2@105@01)]
(assert (not except2@105@01))
; [eval] !bypass2
(push) ; 21
; [then-branch: 1575 | bypass2@84@01 | live]
; [else-branch: 1575 | !(bypass2@84@01) | live]
(push) ; 22
; [then-branch: 1575 | bypass2@84@01]
(assert bypass2@84@01)
(pop) ; 22
(push) ; 22
; [else-branch: 1575 | !(bypass2@84@01)]
(assert (not bypass2@84@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2@84@01) bypass2@84@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2@105@01)
  (and (not except2@105@01) (or (not bypass2@84@01) bypass2@84@01))))
(assert (or (not except2@105@01) except2@105@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@111@01)
  (and
    (not break2@111@01)
    (=>
      (not except2@105@01)
      (and (not except2@105@01) (or (not bypass2@84@01) bypass2@84@01)))
    (or (not except2@105@01) except2@105@01))))
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@17@01
  (and
    p2@17@01
    (=>
      (not break2@111@01)
      (and
        (not break2@111@01)
        (=>
          (not except2@105@01)
          (and (not except2@105@01) (or (not bypass2@84@01) bypass2@84@01)))
        (or (not except2@105@01) except2@105@01)))
    (or (not break2@111@01) break2@111@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      p1@16@01
      (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01)))))
  (and
    (not
      (and
        p1@16@01
        (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01)))))
    (=>
      p2@17@01
      (and
        p2@17@01
        (=>
          (not break2@111@01)
          (and
            (not break2@111@01)
            (=>
              (not except2@105@01)
              (and (not except2@105@01) (or (not bypass2@84@01) bypass2@84@01)))
            (or (not except2@105@01) except2@105@01)))
        (or (not break2@111@01) break2@111@01))))))
(push) ; 13
(set-option :timeout 10)
(assert (not (or
  (and
    p1@16@01
    (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01))))
  (and
    p2@17@01
    (and (not break2@111@01) (and (not except2@105@01) (not bypass2@84@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (or
    (and
      p1@16@01
      (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01))))
    (and
      p2@17@01
      (and (not break2@111@01) (and (not except2@105@01) (not bypass2@84@01))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1576 | !(p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01) || p2@17@01 && !(break2@111@01) && !(except2@105@01) && !(bypass2@84@01)) | live]
; [else-branch: 1576 | p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01) || p2@17@01 && !(break2@111@01) && !(except2@105@01) && !(bypass2@84@01) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1576 | !(p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01) || p2@17@01 && !(break2@111@01) && !(except2@105@01) && !(bypass2@84@01))]
(assert (not
  (or
    (and
      p1@16@01
      (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01))))
    (and
      p2@17@01
      (and (not break2@111@01) (and (not except2@105@01) (not bypass2@84@01)))))))
; [eval] !bypass1 && (break1 || except1) || !bypass2 && (break2 || except2)
; [eval] !bypass1 && (break1 || except1)
; [eval] !bypass1
(push) ; 14
; [then-branch: 1577 | bypass1@83@01 | live]
; [else-branch: 1577 | !(bypass1@83@01) | live]
(push) ; 15
; [then-branch: 1577 | bypass1@83@01]
(assert bypass1@83@01)
(pop) ; 15
(push) ; 15
; [else-branch: 1577 | !(bypass1@83@01)]
(assert (not bypass1@83@01))
; [eval] break1 || except1
(push) ; 16
; [then-branch: 1578 | break1@110@01 | live]
; [else-branch: 1578 | !(break1@110@01) | live]
(push) ; 17
; [then-branch: 1578 | break1@110@01]
(assert break1@110@01)
(pop) ; 17
(push) ; 17
; [else-branch: 1578 | !(break1@110@01)]
(assert (not break1@110@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not bypass1@83@01)
  (and (not bypass1@83@01) (or (not break1@110@01) break1@110@01))))
(assert (or (not bypass1@83@01) bypass1@83@01))
(push) ; 14
; [then-branch: 1579 | !(bypass1@83@01) && break1@110@01 || except1@103@01 | live]
; [else-branch: 1579 | !(!(bypass1@83@01) && break1@110@01 || except1@103@01) | live]
(push) ; 15
; [then-branch: 1579 | !(bypass1@83@01) && break1@110@01 || except1@103@01]
(assert (and (not bypass1@83@01) (or break1@110@01 except1@103@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 1579 | !(!(bypass1@83@01) && break1@110@01 || except1@103@01)]
(assert (not (and (not bypass1@83@01) (or break1@110@01 except1@103@01))))
; [eval] !bypass2 && (break2 || except2)
; [eval] !bypass2
(push) ; 16
; [then-branch: 1580 | bypass2@84@01 | live]
; [else-branch: 1580 | !(bypass2@84@01) | live]
(push) ; 17
; [then-branch: 1580 | bypass2@84@01]
(assert bypass2@84@01)
(pop) ; 17
(push) ; 17
; [else-branch: 1580 | !(bypass2@84@01)]
(assert (not bypass2@84@01))
; [eval] break2 || except2
(push) ; 18
; [then-branch: 1581 | break2@111@01 | live]
; [else-branch: 1581 | !(break2@111@01) | live]
(push) ; 19
; [then-branch: 1581 | break2@111@01]
(assert break2@111@01)
(pop) ; 19
(push) ; 19
; [else-branch: 1581 | !(break2@111@01)]
(assert (not break2@111@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not bypass2@84@01)
  (and (not bypass2@84@01) (or (not break2@111@01) break2@111@01))))
(assert (or (not bypass2@84@01) bypass2@84@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (and (not bypass1@83@01) (or break1@110@01 except1@103@01)))
  (and
    (not (and (not bypass1@83@01) (or break1@110@01 except1@103@01)))
    (=>
      (not bypass2@84@01)
      (and (not bypass2@84@01) (or (not break2@111@01) break2@111@01)))
    (or (not bypass2@84@01) bypass2@84@01))))
(assert (or
  (not (and (not bypass1@83@01) (or break1@110@01 except1@103@01)))
  (and (not bypass1@83@01) (or break1@110@01 except1@103@01))))
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (or
    (and (not bypass1@83@01) (or break1@110@01 except1@103@01))
    (and (not bypass2@84@01) (or break2@111@01 except2@105@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (or
  (and (not bypass1@83@01) (or break1@110@01 except1@103@01))
  (and (not bypass2@84@01) (or break2@111@01 except2@105@01)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1582 | !(bypass1@83@01) && break1@110@01 || except1@103@01 || !(bypass2@84@01) && break2@111@01 || except2@105@01 | live]
; [else-branch: 1582 | !(!(bypass1@83@01) && break1@110@01 || except1@103@01 || !(bypass2@84@01) && break2@111@01 || except2@105@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1582 | !(bypass1@83@01) && break1@110@01 || except1@103@01 || !(bypass2@84@01) && break2@111@01 || except2@105@01]
(assert (or
  (and (not bypass1@83@01) (or break1@110@01 except1@103@01))
  (and (not bypass2@84@01) (or break2@111@01 except2@105@01))))
; [exec]
; var p1_1: Bool
(declare-const p1_1@183@01 Bool)
; [exec]
; var p2_1: Bool
(declare-const p2_1@184@01 Bool)
; [exec]
; var p3: Bool
(declare-const p3@185@01 Bool)
; [exec]
; var p4: Bool
(declare-const p4@186@01 Bool)
; [exec]
; var p1_2: Bool
(declare-const p1_2@187@01 Bool)
; [exec]
; var p2_2: Bool
(declare-const p2_2@188@01 Bool)
; [exec]
; var p3_0: Bool
(declare-const p3_0@189@01 Bool)
; [exec]
; var p4_0: Bool
(declare-const p4_0@190@01 Bool)
; [exec]
; var tmp: Ref
(declare-const tmp@191@01 $Ref)
; [exec]
; var p1_3: Bool
(declare-const p1_3@192@01 Bool)
; [exec]
; var p2_3: Bool
(declare-const p2_3@193@01 Bool)
; [exec]
; var p3_1: Bool
(declare-const p3_1@194@01 Bool)
; [exec]
; var p4_1: Bool
(declare-const p4_1@195@01 Bool)
; [exec]
; break1 := oldbreak1
; [exec]
; break2 := oldbreak2
; [exec]
; except1 := oldexcept1
; [exec]
; except2 := oldexcept2
; [exec]
; inhale p1 && (!break1 && !except1) ==> true
(declare-const $t@196@01 $Snap)
(assert (= $t@196@01 $Snap.unit))
; [eval] p1 && (!break1 && !except1) ==> true
; [eval] p1 && (!break1 && !except1)
(push) ; 15
; [then-branch: 1583 | !(p1@16@01) | live]
; [else-branch: 1583 | p1@16@01 | live]
(push) ; 16
; [then-branch: 1583 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1583 | p1@16@01]
(assert p1@16@01)
; [eval] !break1
(push) ; 17
; [then-branch: 1584 | False | live]
; [else-branch: 1584 | True | live]
(push) ; 18
; [then-branch: 1584 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1584 | True]
; [eval] !except1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not p1@16@01))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1585 | p1@16@01 | live]
; [else-branch: 1585 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1585 | p1@16@01]
(assert p1@16@01)
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert p1@16@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale p2 && (!break1 && !except1) ==> true
(declare-const $t@197@01 $Snap)
(assert (= $t@197@01 $Snap.unit))
; [eval] p2 && (!break1 && !except1) ==> true
; [eval] p2 && (!break1 && !except1)
(set-option :timeout 0)
(push) ; 15
; [then-branch: 1586 | !(p2@17@01) | live]
; [else-branch: 1586 | p2@17@01 | live]
(push) ; 16
; [then-branch: 1586 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1586 | p2@17@01]
(assert p2@17@01)
; [eval] !break1
(push) ; 17
; [then-branch: 1587 | False | live]
; [else-branch: 1587 | True | live]
(push) ; 18
; [then-branch: 1587 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1587 | True]
; [eval] !except1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not p2@17@01))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1588 | p2@17@01 | live]
; [else-branch: 1588 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1588 | p2@17@01]
(assert p2@17@01)
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert p2@17@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; p1_0 := p1 && (!break1 && !except1 && true)
; [eval] p1 && (!break1 && !except1 && true)
(set-option :timeout 0)
(push) ; 15
; [then-branch: 1589 | !(p1@16@01) | live]
; [else-branch: 1589 | p1@16@01 | live]
(push) ; 16
; [then-branch: 1589 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1589 | p1@16@01]
; [eval] !break1
(push) ; 17
; [then-branch: 1590 | False | live]
; [else-branch: 1590 | True | live]
(push) ; 18
; [then-branch: 1590 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1590 | True]
; [eval] !except1
(push) ; 19
; [then-branch: 1591 | False | live]
; [else-branch: 1591 | True | live]
(push) ; 20
; [then-branch: 1591 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 1591 | True]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; p2_0 := p2 && (!break2 && !except2 && true)
; [eval] p2 && (!break2 && !except2 && true)
(push) ; 15
; [then-branch: 1592 | !(p2@17@01) | live]
; [else-branch: 1592 | p2@17@01 | live]
(push) ; 16
; [then-branch: 1592 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1592 | p2@17@01]
; [eval] !break2
(push) ; 17
; [then-branch: 1593 | False | live]
; [else-branch: 1593 | True | live]
(push) ; 18
; [then-branch: 1593 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1593 | True]
; [eval] !except2
(push) ; 19
; [then-branch: 1594 | False | live]
; [else-branch: 1594 | True | live]
(push) ; 20
; [then-branch: 1594 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 1594 | True]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; idle1 := p1 && (!break1 && !except1 && !true)
; [eval] p1 && (!break1 && !except1 && !true)
(push) ; 15
; [then-branch: 1595 | !(p1@16@01) | live]
; [else-branch: 1595 | p1@16@01 | live]
(push) ; 16
; [then-branch: 1595 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1595 | p1@16@01]
; [eval] !break1
(push) ; 17
; [then-branch: 1596 | False | live]
; [else-branch: 1596 | True | live]
(push) ; 18
; [then-branch: 1596 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1596 | True]
; [eval] !except1
(push) ; 19
; [then-branch: 1597 | False | live]
; [else-branch: 1597 | True | live]
(push) ; 20
; [then-branch: 1597 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 1597 | True]
; [eval] !true
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; idle2 := p2 && (!break2 && !except2 && !true)
; [eval] p2 && (!break2 && !except2 && !true)
(push) ; 15
; [then-branch: 1598 | !(p2@17@01) | live]
; [else-branch: 1598 | p2@17@01 | live]
(push) ; 16
; [then-branch: 1598 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1598 | p2@17@01]
; [eval] !break2
(push) ; 17
; [then-branch: 1599 | False | live]
; [else-branch: 1599 | True | live]
(push) ; 18
; [then-branch: 1599 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1599 | True]
; [eval] !except2
(push) ; 19
; [then-branch: 1600 | False | live]
; [else-branch: 1600 | True | live]
(push) ; 20
; [then-branch: 1600 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 1600 | True]
; [eval] !true
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [eval] p1_0 && (!break1 && !except1)
(push) ; 15
; [then-branch: 1601 | !(p1@16@01) | live]
; [else-branch: 1601 | p1@16@01 | live]
(push) ; 16
; [then-branch: 1601 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 16
(push) ; 16
; [else-branch: 1601 | p1@16@01]
; [eval] !break1
(push) ; 17
; [then-branch: 1602 | False | live]
; [else-branch: 1602 | True | live]
(push) ; 18
; [then-branch: 1602 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 1602 | True]
; [eval] !except1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1603 | p1@16@01 | live]
; [else-branch: 1603 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 1603 | p1@16@01]
; [exec]
; _loop_measures := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [eval] p2_0 && (!break2 && !except2)
(push) ; 16
; [then-branch: 1604 | !(p2@17@01) | live]
; [else-branch: 1604 | p2@17@01 | live]
(push) ; 17
; [then-branch: 1604 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1604 | p2@17@01]
; [eval] !break2
(push) ; 18
; [then-branch: 1605 | False | live]
; [else-branch: 1605 | True | live]
(push) ; 19
; [then-branch: 1605 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 1605 | True]
; [eval] !except2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1606 | p2@17@01 | live]
; [else-branch: 1606 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1606 | p2@17@01]
; [exec]
; _loop_measures_4 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; p1_1 := p1_0 && (!break1 && !except1 && bool___unbox__(b_4))
; [eval] p1_0 && (!break1 && !except1 && bool___unbox__(b_4))
(push) ; 17
; [then-branch: 1607 | !(p1@16@01) | live]
; [else-branch: 1607 | p1@16@01 | live]
(push) ; 18
; [then-branch: 1607 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 18
(push) ; 18
; [else-branch: 1607 | p1@16@01]
; [eval] !break1
(push) ; 19
; [then-branch: 1608 | False | live]
; [else-branch: 1608 | True | live]
(push) ; 20
; [then-branch: 1608 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 1608 | True]
; [eval] !except1
(push) ; 21
; [then-branch: 1609 | False | live]
; [else-branch: 1609 | True | live]
(push) ; 22
; [then-branch: 1609 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1609 | True]
; [eval] bool___unbox__(b_4)
(push) ; 23
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@26@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@26@01)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@26@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@26@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@16@01
  (and
    (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@26@01))))
(declare-const p1_1@198@01 Bool)
(assert (= p1_1@198@01 (and p1@16@01 (bool___unbox__ $Snap.unit b@26@01))))
; [exec]
; p2_1 := p2_0 && (!break2 && !except2 && bool___unbox__(b_4_0))
; [eval] p2_0 && (!break2 && !except2 && bool___unbox__(b_4_0))
(push) ; 17
; [then-branch: 1610 | !(p2@17@01) | live]
; [else-branch: 1610 | p2@17@01 | live]
(push) ; 18
; [then-branch: 1610 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 18
(push) ; 18
; [else-branch: 1610 | p2@17@01]
; [eval] !break2
(push) ; 19
; [then-branch: 1611 | False | live]
; [else-branch: 1611 | True | live]
(push) ; 20
; [then-branch: 1611 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 1611 | True]
; [eval] !except2
(push) ; 21
; [then-branch: 1612 | False | live]
; [else-branch: 1612 | True | live]
(push) ; 22
; [then-branch: 1612 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1612 | True]
; [eval] bool___unbox__(b_4_0)
(push) ; 23
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_9@27@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@27@01)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@27@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@27@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@17@01
  (and
    (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_9@27@01))))
(declare-const p2_1@199@01 Bool)
(assert (= p2_1@199@01 (and p2@17@01 (bool___unbox__ $Snap.unit b_9@27@01))))
; [exec]
; p3 := p1_0 && (!break1 && !except1 && !bool___unbox__(b_4))
; [eval] p1_0 && (!break1 && !except1 && !bool___unbox__(b_4))
(push) ; 17
; [then-branch: 1613 | !(p1@16@01) | live]
; [else-branch: 1613 | p1@16@01 | live]
(push) ; 18
; [then-branch: 1613 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 18
(push) ; 18
; [else-branch: 1613 | p1@16@01]
; [eval] !break1
(push) ; 19
; [then-branch: 1614 | False | live]
; [else-branch: 1614 | True | live]
(push) ; 20
; [then-branch: 1614 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 1614 | True]
; [eval] !except1
(push) ; 21
; [then-branch: 1615 | False | live]
; [else-branch: 1615 | True | live]
(push) ; 22
; [then-branch: 1615 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1615 | True]
; [eval] !bool___unbox__(b_4)
; [eval] bool___unbox__(b_4)
(push) ; 23
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@26@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@26@01)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@26@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@26@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(declare-const p3@200@01 Bool)
(assert (= p3@200@01 (and p1@16@01 (not (bool___unbox__ $Snap.unit b@26@01)))))
; [exec]
; p4 := p2_0 && (!break2 && !except2 && !bool___unbox__(b_4_0))
; [eval] p2_0 && (!break2 && !except2 && !bool___unbox__(b_4_0))
(push) ; 17
; [then-branch: 1616 | !(p2@17@01) | live]
; [else-branch: 1616 | p2@17@01 | live]
(push) ; 18
; [then-branch: 1616 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 18
(push) ; 18
; [else-branch: 1616 | p2@17@01]
; [eval] !break2
(push) ; 19
; [then-branch: 1617 | False | live]
; [else-branch: 1617 | True | live]
(push) ; 20
; [then-branch: 1617 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 1617 | True]
; [eval] !except2
(push) ; 21
; [then-branch: 1618 | False | live]
; [else-branch: 1618 | True | live]
(push) ; 22
; [then-branch: 1618 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1618 | True]
; [eval] !bool___unbox__(b_4_0)
; [eval] bool___unbox__(b_4_0)
(push) ; 23
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_9@27@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@27@01)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@27@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_9@27@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_9@27@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(declare-const p4@201@01 Bool)
(assert (= p4@201@01 (and p2@17@01 (not (bool___unbox__ $Snap.unit b_9@27@01)))))
; [exec]
; p1_2 := p1_1 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p1_1 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 17
; [then-branch: 1619 | !(p1_1@198@01) | live]
; [else-branch: 1619 | p1_1@198@01 | live]
(push) ; 18
; [then-branch: 1619 | !(p1_1@198@01)]
(assert (not p1_1@198@01))
(pop) ; 18
(push) ; 18
; [else-branch: 1619 | p1_1@198@01]
(assert p1_1@198@01)
; [eval] !break1
(push) ; 19
; [then-branch: 1620 | False | live]
; [else-branch: 1620 | True | live]
(push) ; 20
; [then-branch: 1620 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 1620 | True]
; [eval] !except1
(push) ; 21
; [then-branch: 1621 | False | live]
; [else-branch: 1621 | True | live]
(push) ; 22
; [then-branch: 1621 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1621 | True]
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or p1_1@198@01 (not p1_1@198@01)))
; [exec]
; p2_2 := p2_1 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_1 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 17
; [then-branch: 1622 | !(p2_1@199@01) | live]
; [else-branch: 1622 | p2_1@199@01 | live]
(push) ; 18
; [then-branch: 1622 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
(pop) ; 18
(push) ; 18
; [else-branch: 1622 | p2_1@199@01]
(assert p2_1@199@01)
; [eval] !break2
(push) ; 19
; [then-branch: 1623 | False | live]
; [else-branch: 1623 | True | live]
(push) ; 20
; [then-branch: 1623 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 1623 | True]
; [eval] !except2
(push) ; 21
; [then-branch: 1624 | False | live]
; [else-branch: 1624 | True | live]
(push) ; 22
; [then-branch: 1624 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1624 | True]
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or p2_1@199@01 (not p2_1@199@01)))
; [exec]
; p3_0 := p1_1 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p1_1 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 17
; [then-branch: 1625 | !(p1_1@198@01) | live]
; [else-branch: 1625 | p1_1@198@01 | live]
(push) ; 18
; [then-branch: 1625 | !(p1_1@198@01)]
(assert (not p1_1@198@01))
(pop) ; 18
(push) ; 18
; [else-branch: 1625 | p1_1@198@01]
(assert p1_1@198@01)
; [eval] !break1
(push) ; 19
; [then-branch: 1626 | False | live]
; [else-branch: 1626 | True | live]
(push) ; 20
; [then-branch: 1626 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 1626 | True]
; [eval] !except1
(push) ; 21
; [then-branch: 1627 | False | live]
; [else-branch: 1627 | True | live]
(push) ; 22
; [then-branch: 1627 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1627 | True]
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [exec]
; p4_0 := p2_1 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_1 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 17
; [then-branch: 1628 | !(p2_1@199@01) | live]
; [else-branch: 1628 | p2_1@199@01 | live]
(push) ; 18
; [then-branch: 1628 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
(pop) ; 18
(push) ; 18
; [else-branch: 1628 | p2_1@199@01]
(assert p2_1@199@01)
; [eval] !break2
(push) ; 19
; [then-branch: 1629 | False | live]
; [else-branch: 1629 | True | live]
(push) ; 20
; [then-branch: 1629 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 1629 | True]
; [eval] !except2
(push) ; 21
; [then-branch: 1630 | False | live]
; [else-branch: 1630 | True | live]
(push) ; 22
; [then-branch: 1630 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1630 | True]
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [eval] p1_2 && (!break1 && !except1)
; [then-branch: 1631 | False | dead]
; [else-branch: 1631 | True | live]
(push) ; 17
; [else-branch: 1631 | True]
(pop) ; 17
; [eval] !(p1_2 && (!break1 && !except1))
; [eval] p1_2 && (!break1 && !except1)
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1632 | True | live]
; [else-branch: 1632 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1632 | True]
; [eval] p2_2 && (!break2 && !except2)
; [then-branch: 1633 | False | dead]
; [else-branch: 1633 | True | live]
(push) ; 18
; [else-branch: 1633 | True]
(pop) ; 18
; [eval] !(p2_2 && (!break2 && !except2))
; [eval] p2_2 && (!break2 && !except2)
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1634 | True | live]
; [else-branch: 1634 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 1634 | True]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 19
; [then-branch: 1635 | !(p1_1@198@01) | live]
; [else-branch: 1635 | p1_1@198@01 | live]
(push) ; 20
; [then-branch: 1635 | !(p1_1@198@01)]
(assert (not p1_1@198@01))
(pop) ; 20
(push) ; 20
; [else-branch: 1635 | p1_1@198@01]
(assert p1_1@198@01)
; [eval] !break1
(push) ; 21
; [then-branch: 1636 | False | live]
; [else-branch: 1636 | True | live]
(push) ; 22
; [then-branch: 1636 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1636 | True]
; [eval] !except1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_1@198@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not p1_1@198@01))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1637 | p1_1@198@01 | live]
; [else-branch: 1637 | !(p1_1@198@01) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 1637 | p1_1@198@01]
(assert p1_1@198@01)
; [exec]
; c_4.Container_value := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(declare-const Container_value@202@01 $Ref)
(assert (= Container_value@202@01 (__prim__int___box__ $Snap.unit 7)))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 20
; [then-branch: 1638 | !(p2_1@199@01) | live]
; [else-branch: 1638 | p2_1@199@01 | live]
(push) ; 21
; [then-branch: 1638 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1638 | p2_1@199@01]
(assert p2_1@199@01)
; [eval] !break2
(push) ; 22
; [then-branch: 1639 | False | live]
; [else-branch: 1639 | True | live]
(push) ; 23
; [then-branch: 1639 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1639 | True]
; [eval] !except2
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_1@199@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not p2_1@199@01))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1640 | p2_1@199@01 | live]
; [else-branch: 1640 | !(p2_1@199@01) | live]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1640 | p2_1@199@01]
(assert p2_1@199@01)
; [exec]
; c_4_0.Container_valuep := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 21
(pop) ; 21
; Joined path conditions
(declare-const Container_valuep@203@01 $Ref)
(assert (= Container_valuep@203@01 (__prim__int___box__ $Snap.unit 7)))
; [exec]
; tmp := new()
(declare-const tmp@204@01 $Ref)
(assert (not (= tmp@204@01 $Ref.null)))
(assert (not (= tmp@204@01 Container_valuep@203@01)))
(assert (not (= tmp@204@01 tmp1_2@66@01)))
(assert (not (= tmp@204@01 Exception_res@100@01)))
(assert (not (= tmp@204@01 c_9@25@01)))
(assert (not (= tmp@204@01 tmp@191@01)))
(assert (not (= tmp@204@01 tmp2_0@63@01)))
(assert (not (= tmp@204@01 _cthread_157_0@19@01)))
(assert (not (= tmp@204@01 b_9@27@01)))
(assert (not (= tmp@204@01 tmp1_0@62@01)))
(assert (not (= tmp@204@01 Exception_res_2@101@01)))
(assert (not (= tmp@204@01 _err_0@104@01)))
(assert (not (= tmp@204@01 tmp2_2@67@01)))
(assert (not (= tmp@204@01 Container_value@202@01)))
(assert (not (= tmp@204@01 b@26@01)))
(assert (not (= tmp@204@01 _cthread_157@18@01)))
(assert (not (= tmp@204@01 _err@102@01)))
(assert (not (= tmp@204@01 c@24@01)))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 21
; [then-branch: 1641 | !(p1_1@198@01) | live]
; [else-branch: 1641 | p1_1@198@01 | live]
(push) ; 22
; [then-branch: 1641 | !(p1_1@198@01)]
(assert (not p1_1@198@01))
(pop) ; 22
(push) ; 22
; [else-branch: 1641 | p1_1@198@01]
; [eval] !break1
(push) ; 23
; [then-branch: 1642 | False | live]
; [else-branch: 1642 | True | live]
(push) ; 24
; [then-branch: 1642 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 1642 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_1@198@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1643 | p1_1@198@01 | live]
; [else-branch: 1643 | !(p1_1@198@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1643 | p1_1@198@01]
; [exec]
; Exception_res := tmp
; [eval] p2_1 && (!break2 && !except2)
(push) ; 22
; [then-branch: 1644 | !(p2_1@199@01) | live]
; [else-branch: 1644 | p2_1@199@01 | live]
(push) ; 23
; [then-branch: 1644 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
(pop) ; 23
(push) ; 23
; [else-branch: 1644 | p2_1@199@01]
; [eval] !break2
(push) ; 24
; [then-branch: 1645 | False | live]
; [else-branch: 1645 | True | live]
(push) ; 25
; [then-branch: 1645 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 1645 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p2_1@199@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1646 | p2_1@199@01 | live]
; [else-branch: 1646 | !(p2_1@199@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 1646 | p2_1@199@01]
; [exec]
; Exception_res_2 := tmp
; [eval] p1_1 && (!break1 && !except1)
(push) ; 23
; [then-branch: 1647 | !(p1_1@198@01) | live]
; [else-branch: 1647 | p1_1@198@01 | live]
(push) ; 24
; [then-branch: 1647 | !(p1_1@198@01)]
(assert (not p1_1@198@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1647 | p1_1@198@01]
; [eval] !break1
(push) ; 25
; [then-branch: 1648 | False | live]
; [else-branch: 1648 | True | live]
(push) ; 26
; [then-branch: 1648 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 1648 | True]
; [eval] !except1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_1@198@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1649 | p1_1@198@01 | live]
; [else-branch: 1649 | !(p1_1@198@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 1649 | p1_1@198@01]
; [exec]
; inhale typeof(Exception_res) == Exception()
(declare-const $t@205@01 $Snap)
(assert (= $t@205@01 $Snap.unit))
; [eval] typeof(Exception_res) == Exception()
; [eval] typeof(Exception_res)
; [eval] Exception()
(assert (= (typeof<PyType> tmp@204@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_1 && (!break2 && !except2)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1650 | !(p2_1@199@01) | live]
; [else-branch: 1650 | p2_1@199@01 | live]
(push) ; 25
; [then-branch: 1650 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1650 | p2_1@199@01]
; [eval] !break2
(push) ; 26
; [then-branch: 1651 | False | live]
; [else-branch: 1651 | True | live]
(push) ; 27
; [then-branch: 1651 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 1651 | True]
; [eval] !except2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_1@199@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1652 | p2_1@199@01 | live]
; [else-branch: 1652 | !(p2_1@199@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1652 | p2_1@199@01]
; [exec]
; inhale typeof(Exception_res_2) == Exception()
(declare-const $t@206@01 $Snap)
(assert (= $t@206@01 $Snap.unit))
; [eval] typeof(Exception_res_2) == Exception()
; [eval] typeof(Exception_res_2)
; [eval] Exception()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_1 && (!break1 && !except1)
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1653 | !(p1_1@198@01) | live]
; [else-branch: 1653 | p1_1@198@01 | live]
(push) ; 26
; [then-branch: 1653 | !(p1_1@198@01)]
(assert (not p1_1@198@01))
(pop) ; 26
(push) ; 26
; [else-branch: 1653 | p1_1@198@01]
; [eval] !break1
(push) ; 27
; [then-branch: 1654 | False | live]
; [else-branch: 1654 | True | live]
(push) ; 28
; [then-branch: 1654 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 1654 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_1@198@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1655 | p1_1@198@01 | live]
; [else-branch: 1655 | !(p1_1@198@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1655 | p1_1@198@01]
; [exec]
; _err := Exception_res
; [exec]
; except1 := true
; [eval] p2_1 && (!break2 && !except2)
(push) ; 26
; [then-branch: 1656 | !(p2_1@199@01) | live]
; [else-branch: 1656 | p2_1@199@01 | live]
(push) ; 27
; [then-branch: 1656 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
(pop) ; 27
(push) ; 27
; [else-branch: 1656 | p2_1@199@01]
; [eval] !break2
(push) ; 28
; [then-branch: 1657 | False | live]
; [else-branch: 1657 | True | live]
(push) ; 29
; [then-branch: 1657 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 1657 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_1@199@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1658 | p2_1@199@01 | live]
; [else-branch: 1658 | !(p2_1@199@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1658 | p2_1@199@01]
; [exec]
; _err_0 := Exception_res_2
; [exec]
; except2 := true
; [exec]
; p1_3 := p3 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p3 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 1659 | !(p3@200@01) | live]
; [else-branch: 1659 | p3@200@01 | live]
(push) ; 28
; [then-branch: 1659 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 28
(push) ; 28
; [else-branch: 1659 | p3@200@01]
(assert p3@200@01)
; [eval] !break1
(push) ; 29
; [then-branch: 1660 | False | live]
; [else-branch: 1660 | True | live]
(push) ; 30
; [then-branch: 1660 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1660 | True]
; [eval] !except1
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or p3@200@01 (not p3@200@01)))
; [exec]
; p2_3 := p4 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p4 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 1661 | !(p4@201@01) | live]
; [else-branch: 1661 | p4@201@01 | live]
(push) ; 28
; [then-branch: 1661 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 28
(push) ; 28
; [else-branch: 1661 | p4@201@01]
(assert p4@201@01)
; [eval] !break2
(push) ; 29
; [then-branch: 1662 | False | live]
; [else-branch: 1662 | True | live]
(push) ; 30
; [then-branch: 1662 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1662 | True]
; [eval] !except2
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or p4@201@01 (not p4@201@01)))
; [exec]
; p3_1 := p3 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p3 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 1663 | !(p3@200@01) | live]
; [else-branch: 1663 | p3@200@01 | live]
(push) ; 28
; [then-branch: 1663 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 28
(push) ; 28
; [else-branch: 1663 | p3@200@01]
(assert p3@200@01)
; [eval] !break1
(push) ; 29
; [then-branch: 1664 | False | live]
; [else-branch: 1664 | True | live]
(push) ; 30
; [then-branch: 1664 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1664 | True]
; [eval] !except1
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p4_1 := p4 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p4 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 1665 | !(p4@201@01) | live]
; [else-branch: 1665 | p4@201@01 | live]
(push) ; 28
; [then-branch: 1665 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 28
(push) ; 28
; [else-branch: 1665 | p4@201@01]
(assert p4@201@01)
; [eval] !break2
(push) ; 29
; [then-branch: 1666 | False | live]
; [else-branch: 1666 | True | live]
(push) ; 30
; [then-branch: 1666 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1666 | True]
; [eval] !except2
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [eval] p1_3 && (!break1 && !except1)
; [then-branch: 1667 | False | dead]
; [else-branch: 1667 | True | live]
(push) ; 27
; [else-branch: 1667 | True]
(pop) ; 27
; [eval] !(p1_3 && (!break1 && !except1))
; [eval] p1_3 && (!break1 && !except1)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1668 | True | live]
; [else-branch: 1668 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 1668 | True]
; [eval] p2_3 && (!break2 && !except2)
; [then-branch: 1669 | False | dead]
; [else-branch: 1669 | True | live]
(push) ; 28
; [else-branch: 1669 | True]
(pop) ; 28
; [eval] !(p2_3 && (!break2 && !except2))
; [eval] p2_3 && (!break2 && !except2)
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1670 | True | live]
; [else-branch: 1670 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 1670 | True]
; [eval] p3 && (!break1 && !except1)
(push) ; 29
; [then-branch: 1671 | !(p3@200@01) | live]
; [else-branch: 1671 | p3@200@01 | live]
(push) ; 30
; [then-branch: 1671 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 30
(push) ; 30
; [else-branch: 1671 | p3@200@01]
(assert p3@200@01)
; [eval] !break1
(push) ; 31
; [then-branch: 1672 | False | live]
; [else-branch: 1672 | True | live]
(push) ; 32
; [then-branch: 1672 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 1672 | True]
; [eval] !except1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 1673 | False | dead]
; [else-branch: 1673 | True | live]
(push) ; 29
; [else-branch: 1673 | True]
(pop) ; 29
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 29
; [then-branch: 1674 | !(p3@200@01) | live]
; [else-branch: 1674 | p3@200@01 | live]
(push) ; 30
; [then-branch: 1674 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 30
(push) ; 30
; [else-branch: 1674 | p3@200@01]
(assert p3@200@01)
; [eval] !break1
(push) ; 31
; [then-branch: 1675 | False | live]
; [else-branch: 1675 | True | live]
(push) ; 32
; [then-branch: 1675 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 1675 | True]
; [eval] !except1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1676 | True | live]
; [else-branch: 1676 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 1676 | True]
; [eval] p4 && (!break2 && !except2)
(push) ; 30
; [then-branch: 1677 | !(p4@201@01) | live]
; [else-branch: 1677 | p4@201@01 | live]
(push) ; 31
; [then-branch: 1677 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 31
(push) ; 31
; [else-branch: 1677 | p4@201@01]
(assert p4@201@01)
; [eval] !break2
(push) ; 32
; [then-branch: 1678 | False | live]
; [else-branch: 1678 | True | live]
(push) ; 33
; [then-branch: 1678 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 1678 | True]
; [eval] !except2
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 1679 | False | dead]
; [else-branch: 1679 | True | live]
(push) ; 30
; [else-branch: 1679 | True]
(pop) ; 30
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 30
; [then-branch: 1680 | !(p4@201@01) | live]
; [else-branch: 1680 | p4@201@01 | live]
(push) ; 31
; [then-branch: 1680 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 31
(push) ; 31
; [else-branch: 1680 | p4@201@01]
(assert p4@201@01)
; [eval] !break2
(push) ; 32
; [then-branch: 1681 | False | live]
; [else-branch: 1681 | True | live]
(push) ; 33
; [then-branch: 1681 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 1681 | True]
; [eval] !except2
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1682 | True | live]
; [else-branch: 1682 | False | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 1682 | True]
; [eval] p3 && (!break1 && !except1)
(push) ; 31
; [then-branch: 1683 | !(p3@200@01) | live]
; [else-branch: 1683 | p3@200@01 | live]
(push) ; 32
; [then-branch: 1683 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 32
(push) ; 32
; [else-branch: 1683 | p3@200@01]
(assert p3@200@01)
; [eval] !break1
(push) ; 33
; [then-branch: 1684 | False | live]
; [else-branch: 1684 | True | live]
(push) ; 34
; [then-branch: 1684 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 1684 | True]
; [eval] !except1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 1685 | False | dead]
; [else-branch: 1685 | True | live]
(push) ; 31
; [else-branch: 1685 | True]
(pop) ; 31
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 31
; [then-branch: 1686 | !(p3@200@01) | live]
; [else-branch: 1686 | p3@200@01 | live]
(push) ; 32
; [then-branch: 1686 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 32
(push) ; 32
; [else-branch: 1686 | p3@200@01]
(assert p3@200@01)
; [eval] !break1
(push) ; 33
; [then-branch: 1687 | False | live]
; [else-branch: 1687 | True | live]
(push) ; 34
; [then-branch: 1687 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 1687 | True]
; [eval] !except1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1688 | True | live]
; [else-branch: 1688 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 1688 | True]
; [eval] p4 && (!break2 && !except2)
(push) ; 32
; [then-branch: 1689 | !(p4@201@01) | live]
; [else-branch: 1689 | p4@201@01 | live]
(push) ; 33
; [then-branch: 1689 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 33
(push) ; 33
; [else-branch: 1689 | p4@201@01]
(assert p4@201@01)
; [eval] !break2
(push) ; 34
; [then-branch: 1690 | False | live]
; [else-branch: 1690 | True | live]
(push) ; 35
; [then-branch: 1690 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 1690 | True]
; [eval] !except2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 1691 | False | dead]
; [else-branch: 1691 | True | live]
(push) ; 32
; [else-branch: 1691 | True]
(pop) ; 32
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 32
; [then-branch: 1692 | !(p4@201@01) | live]
; [else-branch: 1692 | p4@201@01 | live]
(push) ; 33
; [then-branch: 1692 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 33
(push) ; 33
; [else-branch: 1692 | p4@201@01]
(assert p4@201@01)
; [eval] !break2
(push) ; 34
; [then-branch: 1693 | False | live]
; [else-branch: 1693 | True | live]
(push) ; 35
; [then-branch: 1693 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 1693 | True]
; [eval] !except2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1694 | True | live]
; [else-branch: 1694 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 1694 | True]
; [eval] p1_0 && (!break1 && !except1)
(push) ; 33
; [then-branch: 1695 | !(p1@16@01) | live]
; [else-branch: 1695 | p1@16@01 | live]
(push) ; 34
; [then-branch: 1695 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 34
(push) ; 34
; [else-branch: 1695 | p1@16@01]
; [eval] !break1
(push) ; 35
; [then-branch: 1696 | False | live]
; [else-branch: 1696 | True | live]
(push) ; 36
; [then-branch: 1696 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 1696 | True]
; [eval] !except1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 1697 | False | dead]
; [else-branch: 1697 | True | live]
(push) ; 33
; [else-branch: 1697 | True]
(pop) ; 33
; [eval] !(p1_0 && (!break1 && !except1))
; [eval] p1_0 && (!break1 && !except1)
(push) ; 33
; [then-branch: 1698 | !(p1@16@01) | live]
; [else-branch: 1698 | p1@16@01 | live]
(push) ; 34
; [then-branch: 1698 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 34
(push) ; 34
; [else-branch: 1698 | p1@16@01]
; [eval] !break1
(push) ; 35
; [then-branch: 1699 | False | live]
; [else-branch: 1699 | True | live]
(push) ; 36
; [then-branch: 1699 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 1699 | True]
; [eval] !except1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1700 | True | live]
; [else-branch: 1700 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 1700 | True]
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 1701 | !(p2@17@01) | live]
; [else-branch: 1701 | p2@17@01 | live]
(push) ; 35
; [then-branch: 1701 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1701 | p2@17@01]
; [eval] !break2
(push) ; 36
; [then-branch: 1702 | False | live]
; [else-branch: 1702 | True | live]
(push) ; 37
; [then-branch: 1702 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 1702 | True]
; [eval] !except2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
; [then-branch: 1703 | False | dead]
; [else-branch: 1703 | True | live]
(push) ; 34
; [else-branch: 1703 | True]
(pop) ; 34
; [eval] !(p2_0 && (!break2 && !except2))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 1704 | !(p2@17@01) | live]
; [else-branch: 1704 | p2@17@01 | live]
(push) ; 35
; [then-branch: 1704 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1704 | p2@17@01]
; [eval] !break2
(push) ; 36
; [then-branch: 1705 | False | live]
; [else-branch: 1705 | True | live]
(push) ; 37
; [then-branch: 1705 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 1705 | True]
; [eval] !except2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1706 | True | live]
; [else-branch: 1706 | False | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 1706 | True]
; [exec]
; assert (p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true) &&
;   (p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true)
; [eval] p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true
; [eval] p1_0 && (!break1 && !except1)
(push) ; 35
; [then-branch: 1707 | !(p1@16@01) | live]
; [else-branch: 1707 | p1@16@01 | live]
(push) ; 36
; [then-branch: 1707 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 36
(push) ; 36
; [else-branch: 1707 | p1@16@01]
; [eval] !break1
(push) ; 37
; [then-branch: 1708 | False | live]
; [else-branch: 1708 | True | live]
(push) ; 38
; [then-branch: 1708 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 1708 | True]
; [eval] !except1
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
; [then-branch: 1709 | False | dead]
; [else-branch: 1709 | True | live]
(push) ; 36
; [else-branch: 1709 | True]
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true
; [eval] p2_0 && (!break2 && !except2)
(push) ; 35
; [then-branch: 1710 | !(p2@17@01) | live]
; [else-branch: 1710 | p2@17@01 | live]
(push) ; 36
; [then-branch: 1710 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 36
(push) ; 36
; [else-branch: 1710 | p2@17@01]
; [eval] !break2
(push) ; 37
; [then-branch: 1711 | False | live]
; [else-branch: 1711 | True | live]
(push) ; 38
; [then-branch: 1711 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 1711 | True]
; [eval] !except2
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
; [then-branch: 1712 | False | dead]
; [else-branch: 1712 | True | live]
(push) ; 36
; [else-branch: 1712 | True]
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [exec]
; inhale !p1_0 || !(!break1 && !except1)
(declare-const $t@207@01 $Snap)
(assert (= $t@207@01 $Snap.unit))
; [eval] !p1_0 || !(!break1 && !except1)
; [eval] !p1_0
(push) ; 35
; [then-branch: 1713 | !(p1@16@01) | live]
; [else-branch: 1713 | p1@16@01 | live]
(push) ; 36
; [then-branch: 1713 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 36
(push) ; 36
; [else-branch: 1713 | p1@16@01]
; [eval] !(!break1 && !except1)
; [eval] !break1 && !except1
; [eval] !break1
(push) ; 37
; [then-branch: 1714 | False | live]
; [else-branch: 1714 | True | live]
(push) ; 38
; [then-branch: 1714 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 1714 | True]
; [eval] !except1
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !p2_0 || !(!break2 && !except2)
(declare-const $t@208@01 $Snap)
(assert (= $t@208@01 $Snap.unit))
; [eval] !p2_0 || !(!break2 && !except2)
; [eval] !p2_0
(set-option :timeout 0)
(push) ; 35
; [then-branch: 1715 | !(p2@17@01) | live]
; [else-branch: 1715 | p2@17@01 | live]
(push) ; 36
; [then-branch: 1715 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 36
(push) ; 36
; [else-branch: 1715 | p2@17@01]
; [eval] !(!break2 && !except2)
; [eval] !break2 && !except2
; [eval] !break2
(push) ; 37
; [then-branch: 1716 | False | live]
; [else-branch: 1716 | True | live]
(push) ; 38
; [then-branch: 1716 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 1716 | True]
; [eval] !except2
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] !bypass1
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not bypass1@83@01))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (not bypass1@83@01)))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1717 | !(bypass1@83@01) | live]
; [else-branch: 1717 | bypass1@83@01 | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 1717 | !(bypass1@83@01)]
(assert (not bypass1@83@01))
; [exec]
; break1 := false
; [eval] !bypass2
(push) ; 36
(set-option :timeout 10)
(assert (not bypass2@84@01))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (not bypass2@84@01)))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1718 | !(bypass2@84@01) | live]
; [else-branch: 1718 | bypass2@84@01 | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 1718 | !(bypass2@84@01)]
(assert (not bypass2@84@01))
; [exec]
; break2 := false
; [eval] p1 && (!break1 && !except1)
(push) ; 37
; [then-branch: 1719 | !(p1@16@01) | live]
; [else-branch: 1719 | p1@16@01 | live]
(push) ; 38
; [then-branch: 1719 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 38
(push) ; 38
; [else-branch: 1719 | p1@16@01]
; [eval] !break1
(push) ; 39
; [then-branch: 1720 | False | live]
; [else-branch: 1720 | True | live]
(push) ; 40
; [then-branch: 1720 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 1720 | True]
; [eval] !except1
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
; [then-branch: 1721 | False | dead]
; [else-branch: 1721 | True | live]
(push) ; 37
; [else-branch: 1721 | True]
(pop) ; 37
; [eval] !(p1 && (!break1 && !except1))
; [eval] p1 && (!break1 && !except1)
(push) ; 37
; [then-branch: 1722 | !(p1@16@01) | live]
; [else-branch: 1722 | p1@16@01 | live]
(push) ; 38
; [then-branch: 1722 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 38
(push) ; 38
; [else-branch: 1722 | p1@16@01]
; [eval] !break1
(push) ; 39
; [then-branch: 1723 | False | live]
; [else-branch: 1723 | True | live]
(push) ; 40
; [then-branch: 1723 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 1723 | True]
; [eval] !except1
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1724 | True | live]
; [else-branch: 1724 | False | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1724 | True]
; [eval] p2 && (!break2 && !except2)
(push) ; 38
; [then-branch: 1725 | !(p2@17@01) | live]
; [else-branch: 1725 | p2@17@01 | live]
(push) ; 39
; [then-branch: 1725 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 39
(push) ; 39
; [else-branch: 1725 | p2@17@01]
; [eval] !break2
(push) ; 40
; [then-branch: 1726 | False | live]
; [else-branch: 1726 | True | live]
(push) ; 41
; [then-branch: 1726 | False]
(assert false)
(pop) ; 41
(push) ; 41
; [else-branch: 1726 | True]
; [eval] !except2
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
; [then-branch: 1727 | False | dead]
; [else-branch: 1727 | True | live]
(push) ; 38
; [else-branch: 1727 | True]
(pop) ; 38
; [eval] !(p2 && (!break2 && !except2))
; [eval] p2 && (!break2 && !except2)
(push) ; 38
; [then-branch: 1728 | !(p2@17@01) | live]
; [else-branch: 1728 | p2@17@01 | live]
(push) ; 39
; [then-branch: 1728 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 39
(push) ; 39
; [else-branch: 1728 | p2@17@01]
; [eval] !break2
(push) ; 40
; [then-branch: 1729 | False | live]
; [else-branch: 1729 | True | live]
(push) ; 41
; [then-branch: 1729 | False]
(assert false)
(pop) ; 41
(push) ; 41
; [else-branch: 1729 | True]
; [eval] !except2
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1730 | True | live]
; [else-branch: 1730 | False | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 1730 | True]
; [eval] p1 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1731 | p1@16@01 | live]
; [else-branch: 1731 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 1731 | p1@16@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1732 | p2@17@01 | live]
; [else-branch: 1732 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 1732 | p2@17@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1733 | p1@16@01 | live]
; [else-branch: 1733 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 1733 | p1@16@01]
; [eval] _err == null
; [then-branch: 1734 | tmp@204@01 == Null | dead]
; [else-branch: 1734 | tmp@204@01 != Null | live]
(push) ; 40
; [else-branch: 1734 | tmp@204@01 != Null]
(push) ; 41
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1735 | p2@17@01 | live]
; [else-branch: 1735 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 1735 | p2@17@01]
; [eval] _err_0 == null
; [then-branch: 1736 | tmp@204@01 == Null | dead]
; [else-branch: 1736 | tmp@204@01 != Null | live]
(push) ; 42
; [else-branch: 1736 | tmp@204@01 != Null]
(push) ; 43
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1737 | p1@16@01 | live]
; [else-branch: 1737 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 1737 | p1@16@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 44
; [then-branch: 1738 | tmp@204@01 == Null | live]
; [else-branch: 1738 | tmp@204@01 != Null | live]
(push) ; 45
; [then-branch: 1738 | tmp@204@01 == Null]
(assert (= tmp@204@01 $Ref.null))
(pop) ; 45
(push) ; 45
; [else-branch: 1738 | tmp@204@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(assert (or (not (= tmp@204@01 $Ref.null)) (= tmp@204@01 $Ref.null)))
(push) ; 44
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= tmp@204@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> tmp@204@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (and
  (not (= tmp@204@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp@204@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1739 | tmp@204@01 != Null && issubtype[Bool](typeof[PyType](tmp@204@01), Exception[PyType]) | live]
; [else-branch: 1739 | !(tmp@204@01 != Null && issubtype[Bool](typeof[PyType](tmp@204@01), Exception[PyType])) | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 1739 | tmp@204@01 != Null && issubtype[Bool](typeof[PyType](tmp@204@01), Exception[PyType])]
(assert (and
  (not (= tmp@204@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp@204@01) (as Exception<PyType>  PyType))))
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(push) ; 45
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@202@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@202@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c.Container_value, __prim__int___box__(7))
; [eval] __prim__int___box__(7)
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@202@01 (__prim__int___box__ $Snap.unit 7)))
(pop) ; 45
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@202@01 (__prim__int___box__ $Snap.unit 7))))
(push) ; 45
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@202@01 (__prim__int___box__ $Snap.unit 7))))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@202@01 (__prim__int___box__ $Snap.unit 7)))
(push) ; 45
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1740 | p2@17@01 | live]
; [else-branch: 1740 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 1740 | p2@17@01]
; [eval] _err_0 != null && issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 46
; [then-branch: 1741 | tmp@204@01 == Null | live]
; [else-branch: 1741 | tmp@204@01 != Null | live]
(push) ; 47
; [then-branch: 1741 | tmp@204@01 == Null]
(assert (= tmp@204@01 $Ref.null))
(pop) ; 47
(push) ; 47
; [else-branch: 1741 | tmp@204@01 != Null]
; [eval] issubtype(typeof(_err_0), Exception())
; [eval] typeof(_err_0)
; [eval] Exception()
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(push) ; 46
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= tmp@204@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> tmp@204@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 46
(set-option :timeout 10)
(assert (not (and
  (not (= tmp@204@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp@204@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1742 | tmp@204@01 != Null && issubtype[Bool](typeof[PyType](tmp@204@01), Exception[PyType]) | live]
; [else-branch: 1742 | !(tmp@204@01 != Null && issubtype[Bool](typeof[PyType](tmp@204@01), Exception[PyType])) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 1742 | tmp@204@01 != Null && issubtype[Bool](typeof[PyType](tmp@204@01), Exception[PyType])]
(assert (and
  (not (= tmp@204@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp@204@01) (as Exception<PyType>  PyType))))
; [eval] issubtype(typeof(c_9.Container_valuep), int())
; [eval] typeof(c_9.Container_valuep)
; [eval] int()
(push) ; 47
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@203@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@203@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_9.Container_valuep, __prim__int___box__(7))
; [eval] __prim__int___box__(7)
(push) ; 47
(pop) ; 47
; Joined path conditions
(push) ; 47
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@203@01 (__prim__int___box__ $Snap.unit 7)))
(pop) ; 47
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@203@01 (__prim__int___box__ $Snap.unit 7)))
(push) ; 47
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@203@01 (__prim__int___box__ $Snap.unit 7))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@203@01 (__prim__int___box__ $Snap.unit 7)))
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1743 | p1@16@01 | live]
; [else-branch: 1743 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1743 | p1@16@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp@204@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1744 | tmp@204@01 != Null | live]
; [else-branch: 1744 | tmp@204@01 == Null | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 1744 | tmp@204@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 50
(pop) ; 49
; Joined path conditions
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  (and p1@16@01 (not (= tmp@204@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp@204@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not (= tmp@204@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp@204@01) (as Exception<PyType>  PyType))))
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1745 | p2@17@01 | live]
; [else-branch: 1745 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1745 | p2@17@01]
; [eval] _err_0 != null ==> issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp@204@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1746 | tmp@204@01 != Null | live]
; [else-branch: 1746 | tmp@204@01 == Null | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 1746 | tmp@204@01 != Null]
; [eval] issubtype(typeof(_err_0), Exception())
; [eval] typeof(_err_0)
; [eval] Exception()
(pop) ; 50
(pop) ; 49
; Joined path conditions
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  (and p2@17@01 (not (= tmp@204@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp@204@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not (= tmp@204@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp@204@01) (as Exception<PyType>  PyType))))
; [eval] p1 ==> (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1747 | p1@16@01 | live]
; [else-branch: 1747 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1747 | p1@16@01]
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
(push) ; 49
; [then-branch: 1748 | False | live]
; [else-branch: 1748 | True | live]
(push) ; 50
; [then-branch: 1748 | False]
(assert false)
(pop) ; 50
(push) ; 50
; [else-branch: 1748 | True]
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
(push) ; 51
; [then-branch: 1749 | False | live]
; [else-branch: 1749 | True | live]
(push) ; 52
; [then-branch: 1749 | False]
(assert false)
(pop) ; 52
(push) ; 52
; [else-branch: 1749 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
(push) ; 53
; [then-branch: 1750 | False | live]
; [else-branch: 1750 | True | live]
(push) ; 54
; [then-branch: 1750 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 1750 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(pop) ; 50
(pop) ; 49
; Joined path conditions
; Joined path conditions
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p2 ==> (forperm _r_2: Ref [MustInvokeBounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: false)))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1751 | p2@17@01 | live]
; [else-branch: 1751 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1751 | p2@17@01]
; [eval] (forperm _r_2: Ref [MustInvokeBounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded_0(_r_2)] :: false)
(push) ; 49
; [then-branch: 1752 | False | live]
; [else-branch: 1752 | True | live]
(push) ; 50
; [then-branch: 1752 | False]
(assert false)
(pop) ; 50
(push) ; 50
; [else-branch: 1752 | True]
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded_0(_r_2)] :: false)
(push) ; 51
; [then-branch: 1753 | False | live]
; [else-branch: 1753 | True | live]
(push) ; 52
; [then-branch: 1753 | False]
(assert false)
(pop) ; 52
(push) ; 52
; [else-branch: 1753 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: false)
(push) ; 53
; [then-branch: 1754 | False | live]
; [else-branch: 1754 | True | live]
(push) ; 54
; [then-branch: 1754 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 1754 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: false)
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(pop) ; 50
(pop) ; 49
; Joined path conditions
; Joined path conditions
(pop) ; 48
(pop) ; 47
; Joined path conditions
(pop) ; 46
(pop) ; 45
(pop) ; 44
(pop) ; 43
(pop) ; 42
(pop) ; 41
(pop) ; 40
(pop) ; 39
(pop) ; 38
(pop) ; 37
(pop) ; 36
; [eval] !!bypass2
; [eval] !bypass2
(push) ; 36
(set-option :timeout 10)
(assert (not (not bypass2@84@01)))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1755 | bypass2@84@01 | dead]
; [else-branch: 1755 | !(bypass2@84@01) | live]
(set-option :timeout 0)
(push) ; 36
; [else-branch: 1755 | !(bypass2@84@01)]
(assert (not bypass2@84@01))
(pop) ; 36
(pop) ; 35
; [eval] !!bypass1
; [eval] !bypass1
(push) ; 35
(set-option :timeout 10)
(assert (not (not bypass1@83@01)))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1756 | bypass1@83@01 | dead]
; [else-branch: 1756 | !(bypass1@83@01) | live]
(set-option :timeout 0)
(push) ; 35
; [else-branch: 1756 | !(bypass1@83@01)]
(assert (not bypass1@83@01))
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 26
; [then-branch: 1757 | !(p2_1@199@01) | live]
; [else-branch: 1757 | p2_1@199@01 | live]
(push) ; 27
; [then-branch: 1757 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
(pop) ; 27
(push) ; 27
; [else-branch: 1757 | p2_1@199@01]
; [eval] !break2
(push) ; 28
; [then-branch: 1758 | False | live]
; [else-branch: 1758 | True | live]
(push) ; 29
; [then-branch: 1758 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 1758 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 1759 | !(p2_1@199@01) | dead]
; [else-branch: 1759 | p2_1@199@01 | live]
(push) ; 26
; [else-branch: 1759 | p2_1@199@01]
(pop) ; 26
(pop) ; 25
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 25
; [then-branch: 1760 | !(p1_1@198@01) | live]
; [else-branch: 1760 | p1_1@198@01 | live]
(push) ; 26
; [then-branch: 1760 | !(p1_1@198@01)]
(assert (not p1_1@198@01))
(pop) ; 26
(push) ; 26
; [else-branch: 1760 | p1_1@198@01]
; [eval] !break1
(push) ; 27
; [then-branch: 1761 | False | live]
; [else-branch: 1761 | True | live]
(push) ; 28
; [then-branch: 1761 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 1761 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 1762 | !(p1_1@198@01) | dead]
; [else-branch: 1762 | p1_1@198@01 | live]
(push) ; 25
; [else-branch: 1762 | p1_1@198@01]
(pop) ; 25
(pop) ; 24
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 24
; [then-branch: 1763 | !(p2_1@199@01) | live]
; [else-branch: 1763 | p2_1@199@01 | live]
(push) ; 25
; [then-branch: 1763 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1763 | p2_1@199@01]
; [eval] !break2
(push) ; 26
; [then-branch: 1764 | False | live]
; [else-branch: 1764 | True | live]
(push) ; 27
; [then-branch: 1764 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 1764 | True]
; [eval] !except2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 1765 | !(p2_1@199@01) | dead]
; [else-branch: 1765 | p2_1@199@01 | live]
(push) ; 24
; [else-branch: 1765 | p2_1@199@01]
(pop) ; 24
(pop) ; 23
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 23
; [then-branch: 1766 | !(p1_1@198@01) | live]
; [else-branch: 1766 | p1_1@198@01 | live]
(push) ; 24
; [then-branch: 1766 | !(p1_1@198@01)]
(assert (not p1_1@198@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1766 | p1_1@198@01]
; [eval] !break1
(push) ; 25
; [then-branch: 1767 | False | live]
; [else-branch: 1767 | True | live]
(push) ; 26
; [then-branch: 1767 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 1767 | True]
; [eval] !except1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 1768 | !(p1_1@198@01) | dead]
; [else-branch: 1768 | p1_1@198@01 | live]
(push) ; 23
; [else-branch: 1768 | p1_1@198@01]
(pop) ; 23
(pop) ; 22
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 22
; [then-branch: 1769 | !(p2_1@199@01) | live]
; [else-branch: 1769 | p2_1@199@01 | live]
(push) ; 23
; [then-branch: 1769 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
(pop) ; 23
(push) ; 23
; [else-branch: 1769 | p2_1@199@01]
; [eval] !break2
(push) ; 24
; [then-branch: 1770 | False | live]
; [else-branch: 1770 | True | live]
(push) ; 25
; [then-branch: 1770 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 1770 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 1771 | !(p2_1@199@01) | dead]
; [else-branch: 1771 | p2_1@199@01 | live]
(push) ; 22
; [else-branch: 1771 | p2_1@199@01]
(pop) ; 22
(pop) ; 21
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 21
; [then-branch: 1772 | !(p1_1@198@01) | live]
; [else-branch: 1772 | p1_1@198@01 | live]
(push) ; 22
; [then-branch: 1772 | !(p1_1@198@01)]
(assert (not p1_1@198@01))
(pop) ; 22
(push) ; 22
; [else-branch: 1772 | p1_1@198@01]
; [eval] !break1
(push) ; 23
; [then-branch: 1773 | False | live]
; [else-branch: 1773 | True | live]
(push) ; 24
; [then-branch: 1773 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 1773 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 1774 | !(p1_1@198@01) | dead]
; [else-branch: 1774 | p1_1@198@01 | live]
(push) ; 21
; [else-branch: 1774 | p1_1@198@01]
(pop) ; 21
(pop) ; 20
(push) ; 20
; [else-branch: 1640 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
(pop) ; 20
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 20
; [then-branch: 1775 | !(p2_1@199@01) | live]
; [else-branch: 1775 | p2_1@199@01 | live]
(push) ; 21
; [then-branch: 1775 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1775 | p2_1@199@01]
(assert p2_1@199@01)
; [eval] !break2
(push) ; 22
; [then-branch: 1776 | False | live]
; [else-branch: 1776 | True | live]
(push) ; 23
; [then-branch: 1776 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1776 | True]
; [eval] !except2
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not p2_1@199@01))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_1@199@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1777 | !(p2_1@199@01) | live]
; [else-branch: 1777 | p2_1@199@01 | live]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1777 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
; [exec]
; tmp := new()
(declare-const tmp@209@01 $Ref)
(assert (not (= tmp@209@01 $Ref.null)))
(assert (not (= tmp@209@01 tmp1_2@66@01)))
(assert (not (= tmp@209@01 Exception_res@100@01)))
(assert (not (= tmp@209@01 c_9@25@01)))
(assert (not (= tmp@209@01 tmp@191@01)))
(assert (not (= tmp@209@01 tmp2_0@63@01)))
(assert (not (= tmp@209@01 _cthread_157_0@19@01)))
(assert (not (= tmp@209@01 b_9@27@01)))
(assert (not (= tmp@209@01 tmp1_0@62@01)))
(assert (not (= tmp@209@01 Exception_res_2@101@01)))
(assert (not (= tmp@209@01 _err_0@104@01)))
(assert (not (= tmp@209@01 tmp2_2@67@01)))
(assert (not (= tmp@209@01 Container_value@202@01)))
(assert (not (= tmp@209@01 b@26@01)))
(assert (not (= tmp@209@01 _cthread_157@18@01)))
(assert (not (= tmp@209@01 _err@102@01)))
(assert (not (= tmp@209@01 c@24@01)))
(assert (not
  (=
    tmp@209@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 21
; [then-branch: 1778 | !(p1_1@198@01) | live]
; [else-branch: 1778 | p1_1@198@01 | live]
(push) ; 22
; [then-branch: 1778 | !(p1_1@198@01)]
(assert (not p1_1@198@01))
(pop) ; 22
(push) ; 22
; [else-branch: 1778 | p1_1@198@01]
; [eval] !break1
(push) ; 23
; [then-branch: 1779 | False | live]
; [else-branch: 1779 | True | live]
(push) ; 24
; [then-branch: 1779 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 1779 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_1@198@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1780 | p1_1@198@01 | live]
; [else-branch: 1780 | !(p1_1@198@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1780 | p1_1@198@01]
; [exec]
; Exception_res := tmp
; [eval] p2_1 && (!break2 && !except2)
(push) ; 22
; [then-branch: 1781 | !(p2_1@199@01) | live]
; [else-branch: 1781 | p2_1@199@01 | live]
(push) ; 23
; [then-branch: 1781 | !(p2_1@199@01)]
(pop) ; 23
(push) ; 23
; [else-branch: 1781 | p2_1@199@01]
(assert p2_1@199@01)
; [eval] !break2
(push) ; 24
; [then-branch: 1782 | False | live]
; [else-branch: 1782 | True | live]
(push) ; 25
; [then-branch: 1782 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 1782 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 1783 | p2_1@199@01 | dead]
; [else-branch: 1783 | !(p2_1@199@01) | live]
(push) ; 22
; [else-branch: 1783 | !(p2_1@199@01)]
(pop) ; 22
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 22
; [then-branch: 1784 | !(p2_1@199@01) | live]
; [else-branch: 1784 | p2_1@199@01 | live]
(push) ; 23
; [then-branch: 1784 | !(p2_1@199@01)]
(pop) ; 23
(push) ; 23
; [else-branch: 1784 | p2_1@199@01]
(assert p2_1@199@01)
; [eval] !break2
(push) ; 24
; [then-branch: 1785 | False | live]
; [else-branch: 1785 | True | live]
(push) ; 25
; [then-branch: 1785 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 1785 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not p2_1@199@01))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1786 | !(p2_1@199@01) | live]
; [else-branch: 1786 | p2_1@199@01 | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 1786 | !(p2_1@199@01)]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 23
; [then-branch: 1787 | !(p1_1@198@01) | live]
; [else-branch: 1787 | p1_1@198@01 | live]
(push) ; 24
; [then-branch: 1787 | !(p1_1@198@01)]
(assert (not p1_1@198@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1787 | p1_1@198@01]
; [eval] !break1
(push) ; 25
; [then-branch: 1788 | False | live]
; [else-branch: 1788 | True | live]
(push) ; 26
; [then-branch: 1788 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 1788 | True]
; [eval] !except1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_1@198@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1789 | p1_1@198@01 | live]
; [else-branch: 1789 | !(p1_1@198@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 1789 | p1_1@198@01]
; [exec]
; inhale typeof(Exception_res) == Exception()
(declare-const $t@210@01 $Snap)
(assert (= $t@210@01 $Snap.unit))
; [eval] typeof(Exception_res) == Exception()
; [eval] typeof(Exception_res)
; [eval] Exception()
(assert (= (typeof<PyType> tmp@209@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_1 && (!break2 && !except2)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1790 | !(p2_1@199@01) | live]
; [else-branch: 1790 | p2_1@199@01 | live]
(push) ; 25
; [then-branch: 1790 | !(p2_1@199@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 1790 | p2_1@199@01]
(assert p2_1@199@01)
; [eval] !break2
(push) ; 26
; [then-branch: 1791 | False | live]
; [else-branch: 1791 | True | live]
(push) ; 27
; [then-branch: 1791 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 1791 | True]
; [eval] !except2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 1792 | p2_1@199@01 | dead]
; [else-branch: 1792 | !(p2_1@199@01) | live]
(push) ; 24
; [else-branch: 1792 | !(p2_1@199@01)]
(pop) ; 24
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 24
; [then-branch: 1793 | !(p2_1@199@01) | live]
; [else-branch: 1793 | p2_1@199@01 | live]
(push) ; 25
; [then-branch: 1793 | !(p2_1@199@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 1793 | p2_1@199@01]
(assert p2_1@199@01)
; [eval] !break2
(push) ; 26
; [then-branch: 1794 | False | live]
; [else-branch: 1794 | True | live]
(push) ; 27
; [then-branch: 1794 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 1794 | True]
; [eval] !except2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not p2_1@199@01))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1795 | !(p2_1@199@01) | live]
; [else-branch: 1795 | p2_1@199@01 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1795 | !(p2_1@199@01)]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 25
; [then-branch: 1796 | !(p1_1@198@01) | live]
; [else-branch: 1796 | p1_1@198@01 | live]
(push) ; 26
; [then-branch: 1796 | !(p1_1@198@01)]
(assert (not p1_1@198@01))
(pop) ; 26
(push) ; 26
; [else-branch: 1796 | p1_1@198@01]
; [eval] !break1
(push) ; 27
; [then-branch: 1797 | False | live]
; [else-branch: 1797 | True | live]
(push) ; 28
; [then-branch: 1797 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 1797 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_1@198@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1798 | p1_1@198@01 | live]
; [else-branch: 1798 | !(p1_1@198@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1798 | p1_1@198@01]
; [exec]
; _err := Exception_res
; [exec]
; except1 := true
; [eval] p2_1 && (!break2 && !except2)
(push) ; 26
; [then-branch: 1799 | !(p2_1@199@01) | live]
; [else-branch: 1799 | p2_1@199@01 | live]
(push) ; 27
; [then-branch: 1799 | !(p2_1@199@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 1799 | p2_1@199@01]
(assert p2_1@199@01)
; [eval] !break2
(push) ; 28
; [then-branch: 1800 | False | live]
; [else-branch: 1800 | True | live]
(push) ; 29
; [then-branch: 1800 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 1800 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 1801 | p2_1@199@01 | dead]
; [else-branch: 1801 | !(p2_1@199@01) | live]
(push) ; 26
; [else-branch: 1801 | !(p2_1@199@01)]
(pop) ; 26
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 26
; [then-branch: 1802 | !(p2_1@199@01) | live]
; [else-branch: 1802 | p2_1@199@01 | live]
(push) ; 27
; [then-branch: 1802 | !(p2_1@199@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 1802 | p2_1@199@01]
(assert p2_1@199@01)
; [eval] !break2
(push) ; 28
; [then-branch: 1803 | False | live]
; [else-branch: 1803 | True | live]
(push) ; 29
; [then-branch: 1803 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 1803 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not p2_1@199@01))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1804 | !(p2_1@199@01) | live]
; [else-branch: 1804 | p2_1@199@01 | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1804 | !(p2_1@199@01)]
; [exec]
; p1_3 := p3 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p3 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 1805 | !(p3@200@01) | live]
; [else-branch: 1805 | p3@200@01 | live]
(push) ; 28
; [then-branch: 1805 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 28
(push) ; 28
; [else-branch: 1805 | p3@200@01]
(assert p3@200@01)
; [eval] !break1
(push) ; 29
; [then-branch: 1806 | False | live]
; [else-branch: 1806 | True | live]
(push) ; 30
; [then-branch: 1806 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1806 | True]
; [eval] !except1
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or p3@200@01 (not p3@200@01)))
; [exec]
; p2_3 := p4 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p4 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 1807 | !(p4@201@01) | live]
; [else-branch: 1807 | p4@201@01 | live]
(push) ; 28
; [then-branch: 1807 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 28
(push) ; 28
; [else-branch: 1807 | p4@201@01]
(assert p4@201@01)
; [eval] !break2
(push) ; 29
; [then-branch: 1808 | False | live]
; [else-branch: 1808 | True | live]
(push) ; 30
; [then-branch: 1808 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1808 | True]
; [eval] !except2
(push) ; 31
; [then-branch: 1809 | False | live]
; [else-branch: 1809 | True | live]
(push) ; 32
; [then-branch: 1809 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 1809 | True]
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or p4@201@01 (not p4@201@01)))
; [exec]
; p3_1 := p3 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p3 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 1810 | !(p3@200@01) | live]
; [else-branch: 1810 | p3@200@01 | live]
(push) ; 28
; [then-branch: 1810 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 28
(push) ; 28
; [else-branch: 1810 | p3@200@01]
(assert p3@200@01)
; [eval] !break1
(push) ; 29
; [then-branch: 1811 | False | live]
; [else-branch: 1811 | True | live]
(push) ; 30
; [then-branch: 1811 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1811 | True]
; [eval] !except1
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p4_1 := p4 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p4 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 1812 | !(p4@201@01) | live]
; [else-branch: 1812 | p4@201@01 | live]
(push) ; 28
; [then-branch: 1812 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 28
(push) ; 28
; [else-branch: 1812 | p4@201@01]
(assert p4@201@01)
; [eval] !break2
(push) ; 29
; [then-branch: 1813 | False | live]
; [else-branch: 1813 | True | live]
(push) ; 30
; [then-branch: 1813 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1813 | True]
; [eval] !except2
(push) ; 31
; [then-branch: 1814 | False | live]
; [else-branch: 1814 | True | live]
(push) ; 32
; [then-branch: 1814 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 1814 | True]
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [eval] p1_3 && (!break1 && !except1)
; [then-branch: 1815 | False | dead]
; [else-branch: 1815 | True | live]
(push) ; 27
; [else-branch: 1815 | True]
(pop) ; 27
; [eval] !(p1_3 && (!break1 && !except1))
; [eval] p1_3 && (!break1 && !except1)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1816 | True | live]
; [else-branch: 1816 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 1816 | True]
; [eval] p2_3 && (!break2 && !except2)
; [then-branch: 1817 | False | dead]
; [else-branch: 1817 | True | live]
(push) ; 28
; [else-branch: 1817 | True]
(pop) ; 28
; [eval] !(p2_3 && (!break2 && !except2))
; [eval] p2_3 && (!break2 && !except2)
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1818 | True | live]
; [else-branch: 1818 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 1818 | True]
; [eval] p3 && (!break1 && !except1)
(push) ; 29
; [then-branch: 1819 | !(p3@200@01) | live]
; [else-branch: 1819 | p3@200@01 | live]
(push) ; 30
; [then-branch: 1819 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 30
(push) ; 30
; [else-branch: 1819 | p3@200@01]
(assert p3@200@01)
; [eval] !break1
(push) ; 31
; [then-branch: 1820 | False | live]
; [else-branch: 1820 | True | live]
(push) ; 32
; [then-branch: 1820 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 1820 | True]
; [eval] !except1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 1821 | False | dead]
; [else-branch: 1821 | True | live]
(push) ; 29
; [else-branch: 1821 | True]
(pop) ; 29
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 29
; [then-branch: 1822 | !(p3@200@01) | live]
; [else-branch: 1822 | p3@200@01 | live]
(push) ; 30
; [then-branch: 1822 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 30
(push) ; 30
; [else-branch: 1822 | p3@200@01]
(assert p3@200@01)
; [eval] !break1
(push) ; 31
; [then-branch: 1823 | False | live]
; [else-branch: 1823 | True | live]
(push) ; 32
; [then-branch: 1823 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 1823 | True]
; [eval] !except1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1824 | True | live]
; [else-branch: 1824 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 1824 | True]
; [eval] p4 && (!break2 && !except2)
(push) ; 30
; [then-branch: 1825 | !(p4@201@01) | live]
; [else-branch: 1825 | p4@201@01 | live]
(push) ; 31
; [then-branch: 1825 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 31
(push) ; 31
; [else-branch: 1825 | p4@201@01]
(assert p4@201@01)
; [eval] !break2
(push) ; 32
; [then-branch: 1826 | False | live]
; [else-branch: 1826 | True | live]
(push) ; 33
; [then-branch: 1826 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 1826 | True]
; [eval] !except2
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (not p4@201@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not p4@201@01))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1827 | p4@201@01 | live]
; [else-branch: 1827 | !(p4@201@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 1827 | p4@201@01]
(assert p4@201@01)
; [exec]
; c_4_0.Container_valuep := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 31
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 31
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_valuep@211@01 $Ref)
(assert (= Container_valuep@211@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p3 && (!break1 && !except1)
(push) ; 31
; [then-branch: 1828 | !(p3@200@01) | live]
; [else-branch: 1828 | p3@200@01 | live]
(push) ; 32
; [then-branch: 1828 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 32
(push) ; 32
; [else-branch: 1828 | p3@200@01]
(assert p3@200@01)
; [eval] !break1
(push) ; 33
; [then-branch: 1829 | False | live]
; [else-branch: 1829 | True | live]
(push) ; 34
; [then-branch: 1829 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 1829 | True]
; [eval] !except1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 1830 | False | dead]
; [else-branch: 1830 | True | live]
(push) ; 31
; [else-branch: 1830 | True]
(pop) ; 31
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 31
; [then-branch: 1831 | !(p3@200@01) | live]
; [else-branch: 1831 | p3@200@01 | live]
(push) ; 32
; [then-branch: 1831 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 32
(push) ; 32
; [else-branch: 1831 | p3@200@01]
(assert p3@200@01)
; [eval] !break1
(push) ; 33
; [then-branch: 1832 | False | live]
; [else-branch: 1832 | True | live]
(push) ; 34
; [then-branch: 1832 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 1832 | True]
; [eval] !except1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1833 | True | live]
; [else-branch: 1833 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 1833 | True]
; [eval] p4 && (!break2 && !except2)
(push) ; 32
; [then-branch: 1834 | !(p4@201@01) | live]
; [else-branch: 1834 | p4@201@01 | live]
(push) ; 33
; [then-branch: 1834 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 33
(push) ; 33
; [else-branch: 1834 | p4@201@01]
; [eval] !break2
(push) ; 34
; [then-branch: 1835 | False | live]
; [else-branch: 1835 | True | live]
(push) ; 35
; [then-branch: 1835 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 1835 | True]
; [eval] !except2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not (not p4@201@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1836 | p4@201@01 | live]
; [else-branch: 1836 | !(p4@201@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 1836 | p4@201@01]
; [exec]
; break2 := true
; [eval] p1_0 && (!break1 && !except1)
(push) ; 33
; [then-branch: 1837 | !(p1@16@01) | live]
; [else-branch: 1837 | p1@16@01 | live]
(push) ; 34
; [then-branch: 1837 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 34
(push) ; 34
; [else-branch: 1837 | p1@16@01]
; [eval] !break1
(push) ; 35
; [then-branch: 1838 | False | live]
; [else-branch: 1838 | True | live]
(push) ; 36
; [then-branch: 1838 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 1838 | True]
; [eval] !except1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 1839 | False | dead]
; [else-branch: 1839 | True | live]
(push) ; 33
; [else-branch: 1839 | True]
(pop) ; 33
; [eval] !(p1_0 && (!break1 && !except1))
; [eval] p1_0 && (!break1 && !except1)
(push) ; 33
; [then-branch: 1840 | !(p1@16@01) | live]
; [else-branch: 1840 | p1@16@01 | live]
(push) ; 34
; [then-branch: 1840 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 34
(push) ; 34
; [else-branch: 1840 | p1@16@01]
; [eval] !break1
(push) ; 35
; [then-branch: 1841 | False | live]
; [else-branch: 1841 | True | live]
(push) ; 36
; [then-branch: 1841 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 1841 | True]
; [eval] !except1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1842 | True | live]
; [else-branch: 1842 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 1842 | True]
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 1843 | !(p2@17@01) | live]
; [else-branch: 1843 | p2@17@01 | live]
(push) ; 35
; [then-branch: 1843 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1843 | p2@17@01]
; [eval] !break2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
; [then-branch: 1844 | False | dead]
; [else-branch: 1844 | True | live]
(push) ; 34
; [else-branch: 1844 | True]
(pop) ; 34
; [eval] !(p2_0 && (!break2 && !except2))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 1845 | !(p2@17@01) | live]
; [else-branch: 1845 | p2@17@01 | live]
(push) ; 35
; [then-branch: 1845 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1845 | p2@17@01]
; [eval] !break2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1846 | True | live]
; [else-branch: 1846 | False | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 1846 | True]
; [exec]
; assert (p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true) &&
;   (p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true)
; [eval] p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true
; [eval] p1_0 && (!break1 && !except1)
(push) ; 35
; [then-branch: 1847 | !(p1@16@01) | live]
; [else-branch: 1847 | p1@16@01 | live]
(push) ; 36
; [then-branch: 1847 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 36
(push) ; 36
; [else-branch: 1847 | p1@16@01]
; [eval] !break1
(push) ; 37
; [then-branch: 1848 | False | live]
; [else-branch: 1848 | True | live]
(push) ; 38
; [then-branch: 1848 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 1848 | True]
; [eval] !except1
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
; [then-branch: 1849 | False | dead]
; [else-branch: 1849 | True | live]
(push) ; 36
; [else-branch: 1849 | True]
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true
; [eval] p2_0 && (!break2 && !except2)
(push) ; 35
; [then-branch: 1850 | !(p2@17@01) | live]
; [else-branch: 1850 | p2@17@01 | live]
(push) ; 36
; [then-branch: 1850 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 36
(push) ; 36
; [else-branch: 1850 | p2@17@01]
; [eval] !break2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
; [then-branch: 1851 | False | dead]
; [else-branch: 1851 | True | live]
(push) ; 36
; [else-branch: 1851 | True]
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [exec]
; inhale !p1_0 || !(!break1 && !except1)
(declare-const $t@212@01 $Snap)
(assert (= $t@212@01 $Snap.unit))
; [eval] !p1_0 || !(!break1 && !except1)
; [eval] !p1_0
(push) ; 35
; [then-branch: 1852 | !(p1@16@01) | live]
; [else-branch: 1852 | p1@16@01 | live]
(push) ; 36
; [then-branch: 1852 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 36
(push) ; 36
; [else-branch: 1852 | p1@16@01]
; [eval] !(!break1 && !except1)
; [eval] !break1 && !except1
; [eval] !break1
(push) ; 37
; [then-branch: 1853 | False | live]
; [else-branch: 1853 | True | live]
(push) ; 38
; [then-branch: 1853 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 1853 | True]
; [eval] !except1
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !p2_0 || !(!break2 && !except2)
(declare-const $t@213@01 $Snap)
(assert (= $t@213@01 $Snap.unit))
; [eval] !p2_0 || !(!break2 && !except2)
; [eval] !p2_0
(set-option :timeout 0)
(push) ; 35
; [then-branch: 1854 | !(p2@17@01) | live]
; [else-branch: 1854 | p2@17@01 | live]
(push) ; 36
; [then-branch: 1854 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 36
(push) ; 36
; [else-branch: 1854 | p2@17@01]
; [eval] !(!break2 && !except2)
; [eval] !break2 && !except2
; [eval] !break2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] !bypass1
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not bypass1@83@01))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (not bypass1@83@01)))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1855 | !(bypass1@83@01) | live]
; [else-branch: 1855 | bypass1@83@01 | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 1855 | !(bypass1@83@01)]
(assert (not bypass1@83@01))
; [exec]
; break1 := false
; [eval] !bypass2
(push) ; 36
(set-option :timeout 10)
(assert (not bypass2@84@01))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (not bypass2@84@01)))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1856 | !(bypass2@84@01) | live]
; [else-branch: 1856 | bypass2@84@01 | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 1856 | !(bypass2@84@01)]
(assert (not bypass2@84@01))
; [exec]
; break2 := false
; [eval] p1 && (!break1 && !except1)
(push) ; 37
; [then-branch: 1857 | !(p1@16@01) | live]
; [else-branch: 1857 | p1@16@01 | live]
(push) ; 38
; [then-branch: 1857 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 38
(push) ; 38
; [else-branch: 1857 | p1@16@01]
; [eval] !break1
(push) ; 39
; [then-branch: 1858 | False | live]
; [else-branch: 1858 | True | live]
(push) ; 40
; [then-branch: 1858 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 1858 | True]
; [eval] !except1
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
; [then-branch: 1859 | False | dead]
; [else-branch: 1859 | True | live]
(push) ; 37
; [else-branch: 1859 | True]
(pop) ; 37
; [eval] !(p1 && (!break1 && !except1))
; [eval] p1 && (!break1 && !except1)
(push) ; 37
; [then-branch: 1860 | !(p1@16@01) | live]
; [else-branch: 1860 | p1@16@01 | live]
(push) ; 38
; [then-branch: 1860 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 38
(push) ; 38
; [else-branch: 1860 | p1@16@01]
; [eval] !break1
(push) ; 39
; [then-branch: 1861 | False | live]
; [else-branch: 1861 | True | live]
(push) ; 40
; [then-branch: 1861 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 1861 | True]
; [eval] !except1
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1862 | True | live]
; [else-branch: 1862 | False | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1862 | True]
; [eval] p2 && (!break2 && !except2)
(push) ; 38
; [then-branch: 1863 | !(p2@17@01) | live]
; [else-branch: 1863 | p2@17@01 | live]
(push) ; 39
; [then-branch: 1863 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 39
(push) ; 39
; [else-branch: 1863 | p2@17@01]
; [eval] !break2
(push) ; 40
; [then-branch: 1864 | False | live]
; [else-branch: 1864 | True | live]
(push) ; 41
; [then-branch: 1864 | False]
(assert false)
(pop) ; 41
(push) ; 41
; [else-branch: 1864 | True]
; [eval] !except2
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1865 | p2@17@01 | live]
; [else-branch: 1865 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 1865 | p2@17@01]
; [exec]
; exhale perm(MustTerminate_0(_cthread_157_0)) > none ==>
;   acc(MustTerminate_0(_cthread_157_0), perm(MustTerminate_0(_cthread_157_0)) -
;   _loop_original_must_terminate_4)
; [eval] perm(MustTerminate_0(_cthread_157_0)) > none
; [eval] perm(MustTerminate_0(_cthread_157_0))
; [then-branch: 1866 | False | dead]
; [else-branch: 1866 | True | live]
(push) ; 39
; [else-branch: 1866 | True]
; [exec]
; _err_0 := null
; [eval] p1 ==> true
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1867 | p1@16@01 | live]
; [else-branch: 1867 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 1867 | p1@16@01]
(pop) ; 41
(pop) ; 40
; Joined path conditions
; [eval] p2 ==> true
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1868 | p2@17@01 | live]
; [else-branch: 1868 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 1868 | p2@17@01]
(pop) ; 41
(pop) ; 40
; Joined path conditions
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1869 | p1@16@01 | live]
; [else-branch: 1869 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 1869 | p1@16@01]
; [eval] _err == null
; [then-branch: 1870 | tmp@209@01 == Null | dead]
; [else-branch: 1870 | tmp@209@01 != Null | live]
(push) ; 41
; [else-branch: 1870 | tmp@209@01 != Null]
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1871 | p2@17@01 | live]
; [else-branch: 1871 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 1871 | p2@17@01]
; [eval] _err_0 == null
(push) ; 43
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1872 | True | live]
; [else-branch: 1872 | False | dead]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 1872 | True]
; [eval] issubtype(typeof(c_9.Container_valuep), int())
; [eval] typeof(c_9.Container_valuep)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@211@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@211@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_9.Container_valuep, __prim__int___box__(8))
; [eval] __prim__int___box__(8)
(push) ; 44
(pop) ; 44
; Joined path conditions
(push) ; 44
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 45
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@211@01 (__prim__int___box__ $Snap.unit 8)))
(pop) ; 44
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@211@01 (__prim__int___box__ $Snap.unit 8))))
(push) ; 44
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@211@01 (__prim__int___box__ $Snap.unit 8))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@211@01 (__prim__int___box__ $Snap.unit 8)))
(push) ; 44
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1873 | p1@16@01 | live]
; [else-branch: 1873 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 1873 | p1@16@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 45
; [then-branch: 1874 | tmp@209@01 == Null | live]
; [else-branch: 1874 | tmp@209@01 != Null | live]
(push) ; 46
; [then-branch: 1874 | tmp@209@01 == Null]
(assert (= tmp@209@01 $Ref.null))
(pop) ; 46
(push) ; 46
; [else-branch: 1874 | tmp@209@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (or (not (= tmp@209@01 $Ref.null)) (= tmp@209@01 $Ref.null)))
(push) ; 45
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= tmp@209@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> tmp@209@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 45
(set-option :timeout 10)
(assert (not (and
  (not (= tmp@209@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp@209@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1875 | tmp@209@01 != Null && issubtype[Bool](typeof[PyType](tmp@209@01), Exception[PyType]) | live]
; [else-branch: 1875 | !(tmp@209@01 != Null && issubtype[Bool](typeof[PyType](tmp@209@01), Exception[PyType])) | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 1875 | tmp@209@01 != Null && issubtype[Bool](typeof[PyType](tmp@209@01), Exception[PyType])]
(assert (and
  (not (= tmp@209@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp@209@01) (as Exception<PyType>  PyType))))
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@202@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@202@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c.Container_value, __prim__int___box__(7))
; [eval] __prim__int___box__(7)
(push) ; 46
(pop) ; 46
; Joined path conditions
(push) ; 46
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 47
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@202@01 (__prim__int___box__ $Snap.unit 7)))
(pop) ; 46
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@202@01 (__prim__int___box__ $Snap.unit 7))))
(push) ; 46
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@202@01 (__prim__int___box__ $Snap.unit 7))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@202@01 (__prim__int___box__ $Snap.unit 7)))
(push) ; 46
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1876 | p2@17@01 | live]
; [else-branch: 1876 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 1876 | p2@17@01]
; [eval] _err_0 != null && issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
; [then-branch: 1877 | False | dead]
; [else-branch: 1877 | True | live]
(push) ; 47
; [else-branch: 1877 | True]
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 48
(push) ; 49
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1878 | p1@16@01 | live]
; [else-branch: 1878 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 1878 | p1@16@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 50
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp@209@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1879 | tmp@209@01 != Null | live]
; [else-branch: 1879 | tmp@209@01 == Null | dead]
(set-option :timeout 0)
(push) ; 51
; [then-branch: 1879 | tmp@209@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 51
(pop) ; 50
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
(push) ; 48
(assert (not (=>
  (and p1@16@01 (not (= tmp@209@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp@209@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not (= tmp@209@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp@209@01) (as Exception<PyType>  PyType))))
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 48
(push) ; 49
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1880 | p2@17@01 | live]
; [else-branch: 1880 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 1880 | p2@17@01]
; [eval] _err_0 != null ==> issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 50
; [then-branch: 1881 | False | dead]
; [else-branch: 1881 | True | live]
(push) ; 51
; [else-branch: 1881 | True]
(pop) ; 51
(pop) ; 50
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; [eval] p1 ==> (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))
(push) ; 48
(push) ; 49
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1882 | p1@16@01 | live]
; [else-branch: 1882 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 1882 | p1@16@01]
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
(push) ; 50
; [then-branch: 1883 | False | live]
; [else-branch: 1883 | True | live]
(push) ; 51
; [then-branch: 1883 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 1883 | True]
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
(push) ; 52
; [then-branch: 1884 | False | live]
; [else-branch: 1884 | True | live]
(push) ; 53
; [then-branch: 1884 | False]
(assert false)
(pop) ; 53
(push) ; 53
; [else-branch: 1884 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
(push) ; 54
; [then-branch: 1885 | False | live]
; [else-branch: 1885 | True | live]
(push) ; 55
; [then-branch: 1885 | False]
(assert false)
(pop) ; 55
(push) ; 55
; [else-branch: 1885 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 55
(pop) ; 54
; Joined path conditions
; Joined path conditions
(pop) ; 53
(pop) ; 52
; Joined path conditions
; Joined path conditions
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; [eval] p2 ==> (forperm _r_2: Ref [MustInvokeBounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: false)))
(push) ; 48
(push) ; 49
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1886 | p2@17@01 | live]
; [else-branch: 1886 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 1886 | p2@17@01]
; [eval] (forperm _r_2: Ref [MustInvokeBounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded_0(_r_2)] :: false)
(push) ; 50
; [then-branch: 1887 | False | live]
; [else-branch: 1887 | True | live]
(push) ; 51
; [then-branch: 1887 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 1887 | True]
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded_0(_r_2)] :: false)
(push) ; 52
; [then-branch: 1888 | False | live]
; [else-branch: 1888 | True | live]
(push) ; 53
; [then-branch: 1888 | False]
(assert false)
(pop) ; 53
(push) ; 53
; [else-branch: 1888 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: false)
(push) ; 54
; [then-branch: 1889 | False | live]
; [else-branch: 1889 | True | live]
(push) ; 55
; [then-branch: 1889 | False]
(assert false)
(pop) ; 55
(push) ; 55
; [else-branch: 1889 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: false)
(pop) ; 55
(pop) ; 54
; Joined path conditions
; Joined path conditions
(pop) ; 53
(pop) ; 52
; Joined path conditions
; Joined path conditions
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
(pop) ; 47
(pop) ; 46
(pop) ; 45
(pop) ; 44
(pop) ; 43
(pop) ; 42
(pop) ; 41
(pop) ; 40
(pop) ; 39
(pop) ; 38
; [eval] !(p2 && (!break2 && !except2))
; [eval] p2 && (!break2 && !except2)
(push) ; 38
; [then-branch: 1890 | !(p2@17@01) | live]
; [else-branch: 1890 | p2@17@01 | live]
(push) ; 39
; [then-branch: 1890 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 39
(push) ; 39
; [else-branch: 1890 | p2@17@01]
; [eval] !break2
(push) ; 40
; [then-branch: 1891 | False | live]
; [else-branch: 1891 | True | live]
(push) ; 41
; [then-branch: 1891 | False]
(assert false)
(pop) ; 41
(push) ; 41
; [else-branch: 1891 | True]
; [eval] !except2
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
; [then-branch: 1892 | !(p2@17@01) | dead]
; [else-branch: 1892 | p2@17@01 | live]
(push) ; 38
; [else-branch: 1892 | p2@17@01]
(pop) ; 38
(pop) ; 37
(pop) ; 36
; [eval] !!bypass2
; [eval] !bypass2
(push) ; 36
(set-option :timeout 10)
(assert (not (not bypass2@84@01)))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1893 | bypass2@84@01 | dead]
; [else-branch: 1893 | !(bypass2@84@01) | live]
(set-option :timeout 0)
(push) ; 36
; [else-branch: 1893 | !(bypass2@84@01)]
(assert (not bypass2@84@01))
(pop) ; 36
(pop) ; 35
; [eval] !!bypass1
; [eval] !bypass1
(push) ; 35
(set-option :timeout 10)
(assert (not (not bypass1@83@01)))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1894 | bypass1@83@01 | dead]
; [else-branch: 1894 | !(bypass1@83@01) | live]
(set-option :timeout 0)
(push) ; 35
; [else-branch: 1894 | !(bypass1@83@01)]
(assert (not bypass1@83@01))
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 32
; [then-branch: 1895 | !(p4@201@01) | live]
; [else-branch: 1895 | p4@201@01 | live]
(push) ; 33
; [then-branch: 1895 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 33
(push) ; 33
; [else-branch: 1895 | p4@201@01]
; [eval] !break2
(push) ; 34
; [then-branch: 1896 | False | live]
; [else-branch: 1896 | True | live]
(push) ; 35
; [then-branch: 1896 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 1896 | True]
; [eval] !except2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 1897 | !(p4@201@01) | dead]
; [else-branch: 1897 | p4@201@01 | live]
(push) ; 32
; [else-branch: 1897 | p4@201@01]
(pop) ; 32
(pop) ; 31
(pop) ; 30
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 30
; [then-branch: 1898 | !(p4@201@01) | live]
; [else-branch: 1898 | p4@201@01 | live]
(push) ; 31
; [then-branch: 1898 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 31
(push) ; 31
; [else-branch: 1898 | p4@201@01]
(assert p4@201@01)
; [eval] !break2
(push) ; 32
; [then-branch: 1899 | False | live]
; [else-branch: 1899 | True | live]
(push) ; 33
; [then-branch: 1899 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 1899 | True]
; [eval] !except2
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not p4@201@01))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1900 | !(p4@201@01) | dead]
; [else-branch: 1900 | p4@201@01 | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 1900 | p4@201@01]
(assert p4@201@01)
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 25
; [then-branch: 1901 | !(p1_1@198@01) | live]
; [else-branch: 1901 | p1_1@198@01 | live]
(push) ; 26
; [then-branch: 1901 | !(p1_1@198@01)]
(assert (not p1_1@198@01))
(pop) ; 26
(push) ; 26
; [else-branch: 1901 | p1_1@198@01]
; [eval] !break1
(push) ; 27
; [then-branch: 1902 | False | live]
; [else-branch: 1902 | True | live]
(push) ; 28
; [then-branch: 1902 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 1902 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 1903 | !(p1_1@198@01) | dead]
; [else-branch: 1903 | p1_1@198@01 | live]
(push) ; 25
; [else-branch: 1903 | p1_1@198@01]
(pop) ; 25
(pop) ; 24
(pop) ; 23
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 23
; [then-branch: 1904 | !(p1_1@198@01) | live]
; [else-branch: 1904 | p1_1@198@01 | live]
(push) ; 24
; [then-branch: 1904 | !(p1_1@198@01)]
(assert (not p1_1@198@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1904 | p1_1@198@01]
; [eval] !break1
(push) ; 25
; [then-branch: 1905 | False | live]
; [else-branch: 1905 | True | live]
(push) ; 26
; [then-branch: 1905 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 1905 | True]
; [eval] !except1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 1906 | !(p1_1@198@01) | dead]
; [else-branch: 1906 | p1_1@198@01 | live]
(push) ; 23
; [else-branch: 1906 | p1_1@198@01]
(pop) ; 23
(pop) ; 22
(pop) ; 21
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 21
; [then-branch: 1907 | !(p1_1@198@01) | live]
; [else-branch: 1907 | p1_1@198@01 | live]
(push) ; 22
; [then-branch: 1907 | !(p1_1@198@01)]
(assert (not p1_1@198@01))
(pop) ; 22
(push) ; 22
; [else-branch: 1907 | p1_1@198@01]
; [eval] !break1
(push) ; 23
; [then-branch: 1908 | False | live]
; [else-branch: 1908 | True | live]
(push) ; 24
; [then-branch: 1908 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 1908 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 1909 | !(p1_1@198@01) | dead]
; [else-branch: 1909 | p1_1@198@01 | live]
(push) ; 21
; [else-branch: 1909 | p1_1@198@01]
(pop) ; 21
(pop) ; 20
(push) ; 20
; [else-branch: 1777 | p2_1@199@01]
(assert p2_1@199@01)
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 1637 | !(p1_1@198@01)]
(assert (not p1_1@198@01))
(pop) ; 19
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 19
; [then-branch: 1910 | !(p1_1@198@01) | live]
; [else-branch: 1910 | p1_1@198@01 | live]
(push) ; 20
; [then-branch: 1910 | !(p1_1@198@01)]
(assert (not p1_1@198@01))
(pop) ; 20
(push) ; 20
; [else-branch: 1910 | p1_1@198@01]
(assert p1_1@198@01)
; [eval] !break1
(push) ; 21
; [then-branch: 1911 | False | live]
; [else-branch: 1911 | True | live]
(push) ; 22
; [then-branch: 1911 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1911 | True]
; [eval] !except1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not p1_1@198@01))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_1@198@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1912 | !(p1_1@198@01) | live]
; [else-branch: 1912 | p1_1@198@01 | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 1912 | !(p1_1@198@01)]
(assert (not p1_1@198@01))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 20
; [then-branch: 1913 | !(p2_1@199@01) | live]
; [else-branch: 1913 | p2_1@199@01 | live]
(push) ; 21
; [then-branch: 1913 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1913 | p2_1@199@01]
(assert p2_1@199@01)
; [eval] !break2
(push) ; 22
; [then-branch: 1914 | False | live]
; [else-branch: 1914 | True | live]
(push) ; 23
; [then-branch: 1914 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1914 | True]
; [eval] !except2
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_1@199@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not p2_1@199@01))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1915 | p2_1@199@01 | live]
; [else-branch: 1915 | !(p2_1@199@01) | live]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1915 | p2_1@199@01]
(assert p2_1@199@01)
; [exec]
; c_4_0.Container_valuep := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 21
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 21
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(declare-const Container_valuep@214@01 $Ref)
(assert (= Container_valuep@214@01 (__prim__int___box__ $Snap.unit 7)))
; [exec]
; tmp := new()
(declare-const tmp@215@01 $Ref)
(assert (not (= tmp@215@01 $Ref.null)))
(assert (not (= tmp@215@01 Container_valuep@214@01)))
(assert (not (= tmp@215@01 tmp1_2@66@01)))
(assert (not (= tmp@215@01 Exception_res@100@01)))
(assert (not (= tmp@215@01 c_9@25@01)))
(assert (not (= tmp@215@01 tmp@191@01)))
(assert (not (= tmp@215@01 tmp2_0@63@01)))
(assert (not (= tmp@215@01 _cthread_157_0@19@01)))
(assert (not (= tmp@215@01 b_9@27@01)))
(assert (not (= tmp@215@01 tmp1_0@62@01)))
(assert (not (= tmp@215@01 Exception_res_2@101@01)))
(assert (not (= tmp@215@01 _err_0@104@01)))
(assert (not (= tmp@215@01 tmp2_2@67@01)))
(assert (not (= tmp@215@01 b@26@01)))
(assert (not (= tmp@215@01 _cthread_157@18@01)))
(assert (not (= tmp@215@01 _err@102@01)))
(assert (not (= tmp@215@01 c@24@01)))
(assert (not
  (=
    tmp@215@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@114@01)))))))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 21
; [then-branch: 1916 | !(p1_1@198@01) | live]
; [else-branch: 1916 | p1_1@198@01 | live]
(push) ; 22
; [then-branch: 1916 | !(p1_1@198@01)]
(pop) ; 22
(push) ; 22
; [else-branch: 1916 | p1_1@198@01]
(assert p1_1@198@01)
; [eval] !break1
(push) ; 23
; [then-branch: 1917 | False | live]
; [else-branch: 1917 | True | live]
(push) ; 24
; [then-branch: 1917 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 1917 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 1918 | p1_1@198@01 | dead]
; [else-branch: 1918 | !(p1_1@198@01) | live]
(push) ; 21
; [else-branch: 1918 | !(p1_1@198@01)]
(pop) ; 21
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 21
; [then-branch: 1919 | !(p1_1@198@01) | live]
; [else-branch: 1919 | p1_1@198@01 | live]
(push) ; 22
; [then-branch: 1919 | !(p1_1@198@01)]
(pop) ; 22
(push) ; 22
; [else-branch: 1919 | p1_1@198@01]
(assert p1_1@198@01)
; [eval] !break1
(push) ; 23
; [then-branch: 1920 | False | live]
; [else-branch: 1920 | True | live]
(push) ; 24
; [then-branch: 1920 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 1920 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not p1_1@198@01))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1921 | !(p1_1@198@01) | live]
; [else-branch: 1921 | p1_1@198@01 | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1921 | !(p1_1@198@01)]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 22
; [then-branch: 1922 | !(p2_1@199@01) | live]
; [else-branch: 1922 | p2_1@199@01 | live]
(push) ; 23
; [then-branch: 1922 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
(pop) ; 23
(push) ; 23
; [else-branch: 1922 | p2_1@199@01]
; [eval] !break2
(push) ; 24
; [then-branch: 1923 | False | live]
; [else-branch: 1923 | True | live]
(push) ; 25
; [then-branch: 1923 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 1923 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p2_1@199@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1924 | p2_1@199@01 | live]
; [else-branch: 1924 | !(p2_1@199@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 1924 | p2_1@199@01]
; [exec]
; Exception_res_2 := tmp
; [eval] p1_1 && (!break1 && !except1)
(push) ; 23
; [then-branch: 1925 | !(p1_1@198@01) | live]
; [else-branch: 1925 | p1_1@198@01 | live]
(push) ; 24
; [then-branch: 1925 | !(p1_1@198@01)]
(pop) ; 24
(push) ; 24
; [else-branch: 1925 | p1_1@198@01]
(assert p1_1@198@01)
; [eval] !break1
(push) ; 25
; [then-branch: 1926 | False | live]
; [else-branch: 1926 | True | live]
(push) ; 26
; [then-branch: 1926 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 1926 | True]
; [eval] !except1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 1927 | p1_1@198@01 | dead]
; [else-branch: 1927 | !(p1_1@198@01) | live]
(push) ; 23
; [else-branch: 1927 | !(p1_1@198@01)]
(pop) ; 23
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 23
; [then-branch: 1928 | !(p1_1@198@01) | live]
; [else-branch: 1928 | p1_1@198@01 | live]
(push) ; 24
; [then-branch: 1928 | !(p1_1@198@01)]
(pop) ; 24
(push) ; 24
; [else-branch: 1928 | p1_1@198@01]
(assert p1_1@198@01)
; [eval] !break1
(push) ; 25
; [then-branch: 1929 | False | live]
; [else-branch: 1929 | True | live]
(push) ; 26
; [then-branch: 1929 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 1929 | True]
; [eval] !except1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not p1_1@198@01))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1930 | !(p1_1@198@01) | live]
; [else-branch: 1930 | p1_1@198@01 | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 1930 | !(p1_1@198@01)]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 24
; [then-branch: 1931 | !(p2_1@199@01) | live]
; [else-branch: 1931 | p2_1@199@01 | live]
(push) ; 25
; [then-branch: 1931 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1931 | p2_1@199@01]
; [eval] !break2
(push) ; 26
; [then-branch: 1932 | False | live]
; [else-branch: 1932 | True | live]
(push) ; 27
; [then-branch: 1932 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 1932 | True]
; [eval] !except2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_1@199@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1933 | p2_1@199@01 | live]
; [else-branch: 1933 | !(p2_1@199@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1933 | p2_1@199@01]
; [exec]
; inhale typeof(Exception_res_2) == Exception()
(declare-const $t@216@01 $Snap)
(assert (= $t@216@01 $Snap.unit))
; [eval] typeof(Exception_res_2) == Exception()
; [eval] typeof(Exception_res_2)
; [eval] Exception()
(assert (= (typeof<PyType> tmp@215@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_1 && (!break1 && !except1)
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1934 | !(p1_1@198@01) | live]
; [else-branch: 1934 | p1_1@198@01 | live]
(push) ; 26
; [then-branch: 1934 | !(p1_1@198@01)]
(pop) ; 26
(push) ; 26
; [else-branch: 1934 | p1_1@198@01]
(assert p1_1@198@01)
; [eval] !break1
(push) ; 27
; [then-branch: 1935 | False | live]
; [else-branch: 1935 | True | live]
(push) ; 28
; [then-branch: 1935 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 1935 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 1936 | p1_1@198@01 | dead]
; [else-branch: 1936 | !(p1_1@198@01) | live]
(push) ; 25
; [else-branch: 1936 | !(p1_1@198@01)]
(pop) ; 25
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 25
; [then-branch: 1937 | !(p1_1@198@01) | live]
; [else-branch: 1937 | p1_1@198@01 | live]
(push) ; 26
; [then-branch: 1937 | !(p1_1@198@01)]
(pop) ; 26
(push) ; 26
; [else-branch: 1937 | p1_1@198@01]
(assert p1_1@198@01)
; [eval] !break1
(push) ; 27
; [then-branch: 1938 | False | live]
; [else-branch: 1938 | True | live]
(push) ; 28
; [then-branch: 1938 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 1938 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not p1_1@198@01))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1939 | !(p1_1@198@01) | live]
; [else-branch: 1939 | p1_1@198@01 | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1939 | !(p1_1@198@01)]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 26
; [then-branch: 1940 | !(p2_1@199@01) | live]
; [else-branch: 1940 | p2_1@199@01 | live]
(push) ; 27
; [then-branch: 1940 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
(pop) ; 27
(push) ; 27
; [else-branch: 1940 | p2_1@199@01]
; [eval] !break2
(push) ; 28
; [then-branch: 1941 | False | live]
; [else-branch: 1941 | True | live]
(push) ; 29
; [then-branch: 1941 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 1941 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_1@199@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1942 | p2_1@199@01 | live]
; [else-branch: 1942 | !(p2_1@199@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1942 | p2_1@199@01]
; [exec]
; _err_0 := Exception_res_2
; [exec]
; except2 := true
; [exec]
; p1_3 := p3 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p3 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 1943 | !(p3@200@01) | live]
; [else-branch: 1943 | p3@200@01 | live]
(push) ; 28
; [then-branch: 1943 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 28
(push) ; 28
; [else-branch: 1943 | p3@200@01]
(assert p3@200@01)
; [eval] !break1
(push) ; 29
; [then-branch: 1944 | False | live]
; [else-branch: 1944 | True | live]
(push) ; 30
; [then-branch: 1944 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1944 | True]
; [eval] !except1
(push) ; 31
; [then-branch: 1945 | False | live]
; [else-branch: 1945 | True | live]
(push) ; 32
; [then-branch: 1945 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 1945 | True]
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or p3@200@01 (not p3@200@01)))
; [exec]
; p2_3 := p4 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p4 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 1946 | !(p4@201@01) | live]
; [else-branch: 1946 | p4@201@01 | live]
(push) ; 28
; [then-branch: 1946 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 28
(push) ; 28
; [else-branch: 1946 | p4@201@01]
(assert p4@201@01)
; [eval] !break2
(push) ; 29
; [then-branch: 1947 | False | live]
; [else-branch: 1947 | True | live]
(push) ; 30
; [then-branch: 1947 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1947 | True]
; [eval] !except2
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or p4@201@01 (not p4@201@01)))
; [exec]
; p3_1 := p3 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p3 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 1948 | !(p3@200@01) | live]
; [else-branch: 1948 | p3@200@01 | live]
(push) ; 28
; [then-branch: 1948 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 28
(push) ; 28
; [else-branch: 1948 | p3@200@01]
(assert p3@200@01)
; [eval] !break1
(push) ; 29
; [then-branch: 1949 | False | live]
; [else-branch: 1949 | True | live]
(push) ; 30
; [then-branch: 1949 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1949 | True]
; [eval] !except1
(push) ; 31
; [then-branch: 1950 | False | live]
; [else-branch: 1950 | True | live]
(push) ; 32
; [then-branch: 1950 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 1950 | True]
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p4_1 := p4 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p4 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 1951 | !(p4@201@01) | live]
; [else-branch: 1951 | p4@201@01 | live]
(push) ; 28
; [then-branch: 1951 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 28
(push) ; 28
; [else-branch: 1951 | p4@201@01]
(assert p4@201@01)
; [eval] !break2
(push) ; 29
; [then-branch: 1952 | False | live]
; [else-branch: 1952 | True | live]
(push) ; 30
; [then-branch: 1952 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1952 | True]
; [eval] !except2
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [eval] p1_3 && (!break1 && !except1)
; [then-branch: 1953 | False | dead]
; [else-branch: 1953 | True | live]
(push) ; 27
; [else-branch: 1953 | True]
(pop) ; 27
; [eval] !(p1_3 && (!break1 && !except1))
; [eval] p1_3 && (!break1 && !except1)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1954 | True | live]
; [else-branch: 1954 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 1954 | True]
; [eval] p2_3 && (!break2 && !except2)
; [then-branch: 1955 | False | dead]
; [else-branch: 1955 | True | live]
(push) ; 28
; [else-branch: 1955 | True]
(pop) ; 28
; [eval] !(p2_3 && (!break2 && !except2))
; [eval] p2_3 && (!break2 && !except2)
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1956 | True | live]
; [else-branch: 1956 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 1956 | True]
; [eval] p3 && (!break1 && !except1)
(push) ; 29
; [then-branch: 1957 | !(p3@200@01) | live]
; [else-branch: 1957 | p3@200@01 | live]
(push) ; 30
; [then-branch: 1957 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 30
(push) ; 30
; [else-branch: 1957 | p3@200@01]
(assert p3@200@01)
; [eval] !break1
(push) ; 31
; [then-branch: 1958 | False | live]
; [else-branch: 1958 | True | live]
(push) ; 32
; [then-branch: 1958 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 1958 | True]
; [eval] !except1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p3@200@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not p3@200@01))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1959 | p3@200@01 | live]
; [else-branch: 1959 | !(p3@200@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 1959 | p3@200@01]
(assert p3@200@01)
; [exec]
; c_4.Container_value := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 30
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 30
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_value@217@01 $Ref)
(assert (= Container_value@217@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p4 && (!break2 && !except2)
(push) ; 30
; [then-branch: 1960 | !(p4@201@01) | live]
; [else-branch: 1960 | p4@201@01 | live]
(push) ; 31
; [then-branch: 1960 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 31
(push) ; 31
; [else-branch: 1960 | p4@201@01]
(assert p4@201@01)
; [eval] !break2
(push) ; 32
; [then-branch: 1961 | False | live]
; [else-branch: 1961 | True | live]
(push) ; 33
; [then-branch: 1961 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 1961 | True]
; [eval] !except2
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 1962 | False | dead]
; [else-branch: 1962 | True | live]
(push) ; 30
; [else-branch: 1962 | True]
(pop) ; 30
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 30
; [then-branch: 1963 | !(p4@201@01) | live]
; [else-branch: 1963 | p4@201@01 | live]
(push) ; 31
; [then-branch: 1963 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 31
(push) ; 31
; [else-branch: 1963 | p4@201@01]
(assert p4@201@01)
; [eval] !break2
(push) ; 32
; [then-branch: 1964 | False | live]
; [else-branch: 1964 | True | live]
(push) ; 33
; [then-branch: 1964 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 1964 | True]
; [eval] !except2
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1965 | True | live]
; [else-branch: 1965 | False | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 1965 | True]
; [eval] p3 && (!break1 && !except1)
(push) ; 31
; [then-branch: 1966 | !(p3@200@01) | live]
; [else-branch: 1966 | p3@200@01 | live]
(push) ; 32
; [then-branch: 1966 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 32
(push) ; 32
; [else-branch: 1966 | p3@200@01]
; [eval] !break1
(push) ; 33
; [then-branch: 1967 | False | live]
; [else-branch: 1967 | True | live]
(push) ; 34
; [then-branch: 1967 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 1967 | True]
; [eval] !except1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p3@200@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1968 | p3@200@01 | live]
; [else-branch: 1968 | !(p3@200@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 1968 | p3@200@01]
; [exec]
; break1 := true
; [eval] p4 && (!break2 && !except2)
(push) ; 32
; [then-branch: 1969 | !(p4@201@01) | live]
; [else-branch: 1969 | p4@201@01 | live]
(push) ; 33
; [then-branch: 1969 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 33
(push) ; 33
; [else-branch: 1969 | p4@201@01]
(assert p4@201@01)
; [eval] !break2
(push) ; 34
; [then-branch: 1970 | False | live]
; [else-branch: 1970 | True | live]
(push) ; 35
; [then-branch: 1970 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 1970 | True]
; [eval] !except2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 1971 | False | dead]
; [else-branch: 1971 | True | live]
(push) ; 32
; [else-branch: 1971 | True]
(pop) ; 32
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 32
; [then-branch: 1972 | !(p4@201@01) | live]
; [else-branch: 1972 | p4@201@01 | live]
(push) ; 33
; [then-branch: 1972 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 33
(push) ; 33
; [else-branch: 1972 | p4@201@01]
(assert p4@201@01)
; [eval] !break2
(push) ; 34
; [then-branch: 1973 | False | live]
; [else-branch: 1973 | True | live]
(push) ; 35
; [then-branch: 1973 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 1973 | True]
; [eval] !except2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1974 | True | live]
; [else-branch: 1974 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 1974 | True]
; [eval] p1_0 && (!break1 && !except1)
(push) ; 33
; [then-branch: 1975 | !(p1@16@01) | live]
; [else-branch: 1975 | p1@16@01 | live]
(push) ; 34
; [then-branch: 1975 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 34
(push) ; 34
; [else-branch: 1975 | p1@16@01]
; [eval] !break1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 1976 | False | dead]
; [else-branch: 1976 | True | live]
(push) ; 33
; [else-branch: 1976 | True]
(pop) ; 33
; [eval] !(p1_0 && (!break1 && !except1))
; [eval] p1_0 && (!break1 && !except1)
(push) ; 33
; [then-branch: 1977 | !(p1@16@01) | live]
; [else-branch: 1977 | p1@16@01 | live]
(push) ; 34
; [then-branch: 1977 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 34
(push) ; 34
; [else-branch: 1977 | p1@16@01]
; [eval] !break1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1978 | True | live]
; [else-branch: 1978 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 1978 | True]
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 1979 | !(p2@17@01) | live]
; [else-branch: 1979 | p2@17@01 | live]
(push) ; 35
; [then-branch: 1979 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1979 | p2@17@01]
; [eval] !break2
(push) ; 36
; [then-branch: 1980 | False | live]
; [else-branch: 1980 | True | live]
(push) ; 37
; [then-branch: 1980 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 1980 | True]
; [eval] !except2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
; [then-branch: 1981 | False | dead]
; [else-branch: 1981 | True | live]
(push) ; 34
; [else-branch: 1981 | True]
(pop) ; 34
; [eval] !(p2_0 && (!break2 && !except2))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 1982 | !(p2@17@01) | live]
; [else-branch: 1982 | p2@17@01 | live]
(push) ; 35
; [then-branch: 1982 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 35
(push) ; 35
; [else-branch: 1982 | p2@17@01]
; [eval] !break2
(push) ; 36
; [then-branch: 1983 | False | live]
; [else-branch: 1983 | True | live]
(push) ; 37
; [then-branch: 1983 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 1983 | True]
; [eval] !except2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1984 | True | live]
; [else-branch: 1984 | False | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 1984 | True]
; [exec]
; assert (p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true) &&
;   (p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true)
; [eval] p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true
; [eval] p1_0 && (!break1 && !except1)
(push) ; 35
; [then-branch: 1985 | !(p1@16@01) | live]
; [else-branch: 1985 | p1@16@01 | live]
(push) ; 36
; [then-branch: 1985 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 36
(push) ; 36
; [else-branch: 1985 | p1@16@01]
; [eval] !break1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
; [then-branch: 1986 | False | dead]
; [else-branch: 1986 | True | live]
(push) ; 36
; [else-branch: 1986 | True]
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true
; [eval] p2_0 && (!break2 && !except2)
(push) ; 35
; [then-branch: 1987 | !(p2@17@01) | live]
; [else-branch: 1987 | p2@17@01 | live]
(push) ; 36
; [then-branch: 1987 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 36
(push) ; 36
; [else-branch: 1987 | p2@17@01]
; [eval] !break2
(push) ; 37
; [then-branch: 1988 | False | live]
; [else-branch: 1988 | True | live]
(push) ; 38
; [then-branch: 1988 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 1988 | True]
; [eval] !except2
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
; [then-branch: 1989 | False | dead]
; [else-branch: 1989 | True | live]
(push) ; 36
; [else-branch: 1989 | True]
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [exec]
; inhale !p1_0 || !(!break1 && !except1)
(declare-const $t@218@01 $Snap)
(assert (= $t@218@01 $Snap.unit))
; [eval] !p1_0 || !(!break1 && !except1)
; [eval] !p1_0
(push) ; 35
; [then-branch: 1990 | !(p1@16@01) | live]
; [else-branch: 1990 | p1@16@01 | live]
(push) ; 36
; [then-branch: 1990 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 36
(push) ; 36
; [else-branch: 1990 | p1@16@01]
; [eval] !(!break1 && !except1)
; [eval] !break1 && !except1
; [eval] !break1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !p2_0 || !(!break2 && !except2)
(declare-const $t@219@01 $Snap)
(assert (= $t@219@01 $Snap.unit))
; [eval] !p2_0 || !(!break2 && !except2)
; [eval] !p2_0
(set-option :timeout 0)
(push) ; 35
; [then-branch: 1991 | !(p2@17@01) | live]
; [else-branch: 1991 | p2@17@01 | live]
(push) ; 36
; [then-branch: 1991 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 36
(push) ; 36
; [else-branch: 1991 | p2@17@01]
; [eval] !(!break2 && !except2)
; [eval] !break2 && !except2
; [eval] !break2
(push) ; 37
; [then-branch: 1992 | False | live]
; [else-branch: 1992 | True | live]
(push) ; 38
; [then-branch: 1992 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 1992 | True]
; [eval] !except2
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] !bypass1
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not bypass1@83@01))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (not bypass1@83@01)))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1993 | !(bypass1@83@01) | live]
; [else-branch: 1993 | bypass1@83@01 | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 1993 | !(bypass1@83@01)]
(assert (not bypass1@83@01))
; [exec]
; break1 := false
; [eval] !bypass2
(push) ; 36
(set-option :timeout 10)
(assert (not bypass2@84@01))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (not bypass2@84@01)))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1994 | !(bypass2@84@01) | live]
; [else-branch: 1994 | bypass2@84@01 | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 1994 | !(bypass2@84@01)]
(assert (not bypass2@84@01))
; [exec]
; break2 := false
; [eval] p1 && (!break1 && !except1)
(push) ; 37
; [then-branch: 1995 | !(p1@16@01) | live]
; [else-branch: 1995 | p1@16@01 | live]
(push) ; 38
; [then-branch: 1995 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 38
(push) ; 38
; [else-branch: 1995 | p1@16@01]
; [eval] !break1
(push) ; 39
; [then-branch: 1996 | False | live]
; [else-branch: 1996 | True | live]
(push) ; 40
; [then-branch: 1996 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 1996 | True]
; [eval] !except1
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1997 | p1@16@01 | live]
; [else-branch: 1997 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1997 | p1@16@01]
; [exec]
; exhale perm(MustTerminate(_cthread_157)) > none ==>
;   acc(MustTerminate(_cthread_157), perm(MustTerminate(_cthread_157)) -
;   _loop_original_must_terminate)
; [eval] perm(MustTerminate(_cthread_157)) > none
; [eval] perm(MustTerminate(_cthread_157))
; [then-branch: 1998 | False | dead]
; [else-branch: 1998 | True | live]
(push) ; 38
; [else-branch: 1998 | True]
; [exec]
; _err := null
; [eval] p2 && (!break2 && !except2)
(push) ; 39
; [then-branch: 1999 | !(p2@17@01) | live]
; [else-branch: 1999 | p2@17@01 | live]
(push) ; 40
; [then-branch: 1999 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 40
(push) ; 40
; [else-branch: 1999 | p2@17@01]
; [eval] !break2
(push) ; 41
; [then-branch: 2000 | False | live]
; [else-branch: 2000 | True | live]
(push) ; 42
; [then-branch: 2000 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2000 | True]
; [eval] !except2
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
; [then-branch: 2001 | False | dead]
; [else-branch: 2001 | True | live]
(push) ; 39
; [else-branch: 2001 | True]
(pop) ; 39
; [eval] !(p2 && (!break2 && !except2))
; [eval] p2 && (!break2 && !except2)
(push) ; 39
; [then-branch: 2002 | !(p2@17@01) | live]
; [else-branch: 2002 | p2@17@01 | live]
(push) ; 40
; [then-branch: 2002 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 40
(push) ; 40
; [else-branch: 2002 | p2@17@01]
; [eval] !break2
(push) ; 41
; [then-branch: 2003 | False | live]
; [else-branch: 2003 | True | live]
(push) ; 42
; [then-branch: 2003 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2003 | True]
; [eval] !except2
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2004 | True | live]
; [else-branch: 2004 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 2004 | True]
; [eval] p1 ==> true
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2005 | p1@16@01 | live]
; [else-branch: 2005 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 2005 | p1@16@01]
(pop) ; 41
(pop) ; 40
; Joined path conditions
; [eval] p2 ==> true
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2006 | p2@17@01 | live]
; [else-branch: 2006 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 2006 | p2@17@01]
(pop) ; 41
(pop) ; 40
; Joined path conditions
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2007 | p1@16@01 | live]
; [else-branch: 2007 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2007 | p1@16@01]
; [eval] _err == null
(push) ; 41
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2008 | True | live]
; [else-branch: 2008 | False | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 2008 | True]
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@217@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@217@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c.Container_value, __prim__int___box__(8))
; [eval] __prim__int___box__(8)
(push) ; 42
(pop) ; 42
; Joined path conditions
(push) ; 42
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 43
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@217@01 (__prim__int___box__ $Snap.unit 8)))
(pop) ; 42
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@217@01 (__prim__int___box__ $Snap.unit 8))))
(push) ; 42
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@217@01 (__prim__int___box__ $Snap.unit 8))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@217@01 (__prim__int___box__ $Snap.unit 8)))
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2009 | p2@17@01 | live]
; [else-branch: 2009 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 2009 | p2@17@01]
; [eval] _err_0 == null
; [then-branch: 2010 | tmp@215@01 == Null | dead]
; [else-branch: 2010 | tmp@215@01 != Null | live]
(push) ; 43
; [else-branch: 2010 | tmp@215@01 != Null]
(push) ; 44
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2011 | p1@16@01 | live]
; [else-branch: 2011 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 2011 | p1@16@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
; [then-branch: 2012 | False | dead]
; [else-branch: 2012 | True | live]
(push) ; 45
; [else-branch: 2012 | True]
(push) ; 46
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2013 | p2@17@01 | live]
; [else-branch: 2013 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 2013 | p2@17@01]
; [eval] _err_0 != null && issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 47
; [then-branch: 2014 | tmp@215@01 == Null | live]
; [else-branch: 2014 | tmp@215@01 != Null | live]
(push) ; 48
; [then-branch: 2014 | tmp@215@01 == Null]
(assert (= tmp@215@01 $Ref.null))
(pop) ; 48
(push) ; 48
; [else-branch: 2014 | tmp@215@01 != Null]
; [eval] issubtype(typeof(_err_0), Exception())
; [eval] typeof(_err_0)
; [eval] Exception()
(pop) ; 48
(pop) ; 47
; Joined path conditions
; Joined path conditions
(assert (or (not (= tmp@215@01 $Ref.null)) (= tmp@215@01 $Ref.null)))
(push) ; 47
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= tmp@215@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> tmp@215@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 47
(set-option :timeout 10)
(assert (not (and
  (not (= tmp@215@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp@215@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2015 | tmp@215@01 != Null && issubtype[Bool](typeof[PyType](tmp@215@01), Exception[PyType]) | live]
; [else-branch: 2015 | !(tmp@215@01 != Null && issubtype[Bool](typeof[PyType](tmp@215@01), Exception[PyType])) | dead]
(set-option :timeout 0)
(push) ; 47
; [then-branch: 2015 | tmp@215@01 != Null && issubtype[Bool](typeof[PyType](tmp@215@01), Exception[PyType])]
(assert (and
  (not (= tmp@215@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp@215@01) (as Exception<PyType>  PyType))))
; [eval] issubtype(typeof(c_9.Container_valuep), int())
; [eval] typeof(c_9.Container_valuep)
; [eval] int()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@214@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@214@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_9.Container_valuep, __prim__int___box__(7))
; [eval] __prim__int___box__(7)
(push) ; 48
(pop) ; 48
; Joined path conditions
(push) ; 48
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 49
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@214@01 (__prim__int___box__ $Snap.unit 7)))
(pop) ; 48
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@214@01 (__prim__int___box__ $Snap.unit 7))))
(push) ; 48
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@214@01 (__prim__int___box__ $Snap.unit 7))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@214@01 (__prim__int___box__ $Snap.unit 7)))
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 48
(push) ; 49
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2016 | p1@16@01 | live]
; [else-branch: 2016 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 2016 | p1@16@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 50
; [then-branch: 2017 | False | dead]
; [else-branch: 2017 | True | live]
(push) ; 51
; [else-branch: 2017 | True]
(pop) ; 51
(pop) ; 50
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 48
(push) ; 49
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2018 | p2@17@01 | live]
; [else-branch: 2018 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 2018 | p2@17@01]
; [eval] _err_0 != null ==> issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 50
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp@215@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2019 | tmp@215@01 != Null | live]
; [else-branch: 2019 | tmp@215@01 == Null | dead]
(set-option :timeout 0)
(push) ; 51
; [then-branch: 2019 | tmp@215@01 != Null]
; [eval] issubtype(typeof(_err_0), Exception())
; [eval] typeof(_err_0)
; [eval] Exception()
(pop) ; 51
(pop) ; 50
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
(push) ; 48
(assert (not (=>
  (and p2@17@01 (not (= tmp@215@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp@215@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not (= tmp@215@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp@215@01) (as Exception<PyType>  PyType))))
; [eval] p1 ==> (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))
(push) ; 48
(push) ; 49
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2020 | p1@16@01 | live]
; [else-branch: 2020 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 2020 | p1@16@01]
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
(push) ; 50
; [then-branch: 2021 | False | live]
; [else-branch: 2021 | True | live]
(push) ; 51
; [then-branch: 2021 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 2021 | True]
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
(push) ; 52
; [then-branch: 2022 | False | live]
; [else-branch: 2022 | True | live]
(push) ; 53
; [then-branch: 2022 | False]
(assert false)
(pop) ; 53
(push) ; 53
; [else-branch: 2022 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
(push) ; 54
; [then-branch: 2023 | False | live]
; [else-branch: 2023 | True | live]
(push) ; 55
; [then-branch: 2023 | False]
(assert false)
(pop) ; 55
(push) ; 55
; [else-branch: 2023 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 55
(pop) ; 54
; Joined path conditions
; Joined path conditions
(pop) ; 53
(pop) ; 52
; Joined path conditions
; Joined path conditions
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; [eval] p2 ==> (forperm _r_2: Ref [MustInvokeBounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: false)))
(push) ; 48
(push) ; 49
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2024 | p2@17@01 | live]
; [else-branch: 2024 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 2024 | p2@17@01]
; [eval] (forperm _r_2: Ref [MustInvokeBounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded_0(_r_2)] :: false)
(push) ; 50
; [then-branch: 2025 | False | live]
; [else-branch: 2025 | True | live]
(push) ; 51
; [then-branch: 2025 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 2025 | True]
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded_0(_r_2)] :: false)
(push) ; 52
; [then-branch: 2026 | False | live]
; [else-branch: 2026 | True | live]
(push) ; 53
; [then-branch: 2026 | False]
(assert false)
(pop) ; 53
(push) ; 53
; [else-branch: 2026 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: false)
(push) ; 54
; [then-branch: 2027 | False | live]
; [else-branch: 2027 | True | live]
(push) ; 55
; [then-branch: 2027 | False]
(assert false)
(pop) ; 55
(push) ; 55
; [else-branch: 2027 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: false)
(pop) ; 55
(pop) ; 54
; Joined path conditions
; Joined path conditions
(pop) ; 53
(pop) ; 52
; Joined path conditions
; Joined path conditions
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
(pop) ; 47
(pop) ; 46
(pop) ; 45
(pop) ; 44
(pop) ; 43
(pop) ; 42
(pop) ; 41
(pop) ; 40
(pop) ; 39
(pop) ; 38
(pop) ; 37
; [eval] !(p1 && (!break1 && !except1))
; [eval] p1 && (!break1 && !except1)
(push) ; 37
; [then-branch: 2028 | !(p1@16@01) | live]
; [else-branch: 2028 | p1@16@01 | live]
(push) ; 38
; [then-branch: 2028 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 38
(push) ; 38
; [else-branch: 2028 | p1@16@01]
; [eval] !break1
(push) ; 39
; [then-branch: 2029 | False | live]
; [else-branch: 2029 | True | live]
(push) ; 40
; [then-branch: 2029 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 2029 | True]
; [eval] !except1
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
; [then-branch: 2030 | !(p1@16@01) | dead]
; [else-branch: 2030 | p1@16@01 | live]
(push) ; 37
; [else-branch: 2030 | p1@16@01]
(pop) ; 37
(pop) ; 36
; [eval] !!bypass2
; [eval] !bypass2
(push) ; 36
(set-option :timeout 10)
(assert (not (not bypass2@84@01)))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2031 | bypass2@84@01 | dead]
; [else-branch: 2031 | !(bypass2@84@01) | live]
(set-option :timeout 0)
(push) ; 36
; [else-branch: 2031 | !(bypass2@84@01)]
(assert (not bypass2@84@01))
(pop) ; 36
(pop) ; 35
; [eval] !!bypass1
; [eval] !bypass1
(push) ; 35
(set-option :timeout 10)
(assert (not (not bypass1@83@01)))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2032 | bypass1@83@01 | dead]
; [else-branch: 2032 | !(bypass1@83@01) | live]
(set-option :timeout 0)
(push) ; 35
; [else-branch: 2032 | !(bypass1@83@01)]
(assert (not bypass1@83@01))
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 31
; [then-branch: 2033 | !(p3@200@01) | live]
; [else-branch: 2033 | p3@200@01 | live]
(push) ; 32
; [then-branch: 2033 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 32
(push) ; 32
; [else-branch: 2033 | p3@200@01]
; [eval] !break1
(push) ; 33
; [then-branch: 2034 | False | live]
; [else-branch: 2034 | True | live]
(push) ; 34
; [then-branch: 2034 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 2034 | True]
; [eval] !except1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 2035 | !(p3@200@01) | dead]
; [else-branch: 2035 | p3@200@01 | live]
(push) ; 31
; [else-branch: 2035 | p3@200@01]
(pop) ; 31
(pop) ; 30
(pop) ; 29
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 29
; [then-branch: 2036 | !(p3@200@01) | live]
; [else-branch: 2036 | p3@200@01 | live]
(push) ; 30
; [then-branch: 2036 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 30
(push) ; 30
; [else-branch: 2036 | p3@200@01]
(assert p3@200@01)
; [eval] !break1
(push) ; 31
; [then-branch: 2037 | False | live]
; [else-branch: 2037 | True | live]
(push) ; 32
; [then-branch: 2037 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2037 | True]
; [eval] !except1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not p3@200@01))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2038 | !(p3@200@01) | dead]
; [else-branch: 2038 | p3@200@01 | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 2038 | p3@200@01]
(assert p3@200@01)
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 26
; [then-branch: 2039 | !(p2_1@199@01) | live]
; [else-branch: 2039 | p2_1@199@01 | live]
(push) ; 27
; [then-branch: 2039 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2039 | p2_1@199@01]
; [eval] !break2
(push) ; 28
; [then-branch: 2040 | False | live]
; [else-branch: 2040 | True | live]
(push) ; 29
; [then-branch: 2040 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 2040 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 2041 | !(p2_1@199@01) | dead]
; [else-branch: 2041 | p2_1@199@01 | live]
(push) ; 26
; [else-branch: 2041 | p2_1@199@01]
(pop) ; 26
(pop) ; 25
(pop) ; 24
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 24
; [then-branch: 2042 | !(p2_1@199@01) | live]
; [else-branch: 2042 | p2_1@199@01 | live]
(push) ; 25
; [then-branch: 2042 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
(pop) ; 25
(push) ; 25
; [else-branch: 2042 | p2_1@199@01]
; [eval] !break2
(push) ; 26
; [then-branch: 2043 | False | live]
; [else-branch: 2043 | True | live]
(push) ; 27
; [then-branch: 2043 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 2043 | True]
; [eval] !except2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 2044 | !(p2_1@199@01) | dead]
; [else-branch: 2044 | p2_1@199@01 | live]
(push) ; 24
; [else-branch: 2044 | p2_1@199@01]
(pop) ; 24
(pop) ; 23
(pop) ; 22
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 22
; [then-branch: 2045 | !(p2_1@199@01) | live]
; [else-branch: 2045 | p2_1@199@01 | live]
(push) ; 23
; [then-branch: 2045 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
(pop) ; 23
(push) ; 23
; [else-branch: 2045 | p2_1@199@01]
; [eval] !break2
(push) ; 24
; [then-branch: 2046 | False | live]
; [else-branch: 2046 | True | live]
(push) ; 25
; [then-branch: 2046 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 2046 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 2047 | !(p2_1@199@01) | dead]
; [else-branch: 2047 | p2_1@199@01 | live]
(push) ; 22
; [else-branch: 2047 | p2_1@199@01]
(pop) ; 22
(pop) ; 21
(pop) ; 20
(push) ; 20
; [else-branch: 1915 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
(pop) ; 20
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 20
; [then-branch: 2048 | !(p2_1@199@01) | live]
; [else-branch: 2048 | p2_1@199@01 | live]
(push) ; 21
; [then-branch: 2048 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
(pop) ; 21
(push) ; 21
; [else-branch: 2048 | p2_1@199@01]
(assert p2_1@199@01)
; [eval] !break2
(push) ; 22
; [then-branch: 2049 | False | live]
; [else-branch: 2049 | True | live]
(push) ; 23
; [then-branch: 2049 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 2049 | True]
; [eval] !except2
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not p2_1@199@01))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_1@199@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2050 | !(p2_1@199@01) | live]
; [else-branch: 2050 | p2_1@199@01 | live]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 2050 | !(p2_1@199@01)]
(assert (not p2_1@199@01))
; [exec]
; tmp := new()
(declare-const tmp@220@01 $Ref)
(assert (not (= tmp@220@01 $Ref.null)))
(assert (not (= tmp@220@01 tmp1_2@66@01)))
(assert (not (= tmp@220@01 Exception_res@100@01)))
(assert (not (= tmp@220@01 c_9@25@01)))
(assert (not (= tmp@220@01 tmp@191@01)))
(assert (not (= tmp@220@01 tmp2_0@63@01)))
(assert (not (= tmp@220@01 _cthread_157_0@19@01)))
(assert (not (= tmp@220@01 b_9@27@01)))
(assert (not (= tmp@220@01 tmp1_0@62@01)))
(assert (not (= tmp@220@01 Exception_res_2@101@01)))
(assert (not (= tmp@220@01 _err_0@104@01)))
(assert (not (= tmp@220@01 tmp2_2@67@01)))
(assert (not (= tmp@220@01 b@26@01)))
(assert (not (= tmp@220@01 _cthread_157@18@01)))
(assert (not (= tmp@220@01 _err@102@01)))
(assert (not (= tmp@220@01 c@24@01)))
(assert (not
  (=
    tmp@220@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
(assert (not
  (=
    tmp@220@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@114@01)))))))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 21
; [then-branch: 2051 | !(p1_1@198@01) | live]
; [else-branch: 2051 | p1_1@198@01 | live]
(push) ; 22
; [then-branch: 2051 | !(p1_1@198@01)]
(pop) ; 22
(push) ; 22
; [else-branch: 2051 | p1_1@198@01]
(assert p1_1@198@01)
; [eval] !break1
(push) ; 23
; [then-branch: 2052 | False | live]
; [else-branch: 2052 | True | live]
(push) ; 24
; [then-branch: 2052 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 2052 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 2053 | p1_1@198@01 | dead]
; [else-branch: 2053 | !(p1_1@198@01) | live]
(push) ; 21
; [else-branch: 2053 | !(p1_1@198@01)]
(pop) ; 21
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 21
; [then-branch: 2054 | !(p1_1@198@01) | live]
; [else-branch: 2054 | p1_1@198@01 | live]
(push) ; 22
; [then-branch: 2054 | !(p1_1@198@01)]
(pop) ; 22
(push) ; 22
; [else-branch: 2054 | p1_1@198@01]
(assert p1_1@198@01)
; [eval] !break1
(push) ; 23
; [then-branch: 2055 | False | live]
; [else-branch: 2055 | True | live]
(push) ; 24
; [then-branch: 2055 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 2055 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not p1_1@198@01))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2056 | !(p1_1@198@01) | live]
; [else-branch: 2056 | p1_1@198@01 | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 2056 | !(p1_1@198@01)]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 22
; [then-branch: 2057 | !(p2_1@199@01) | live]
; [else-branch: 2057 | p2_1@199@01 | live]
(push) ; 23
; [then-branch: 2057 | !(p2_1@199@01)]
(pop) ; 23
(push) ; 23
; [else-branch: 2057 | p2_1@199@01]
(assert p2_1@199@01)
; [eval] !break2
(push) ; 24
; [then-branch: 2058 | False | live]
; [else-branch: 2058 | True | live]
(push) ; 25
; [then-branch: 2058 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 2058 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 2059 | p2_1@199@01 | dead]
; [else-branch: 2059 | !(p2_1@199@01) | live]
(push) ; 22
; [else-branch: 2059 | !(p2_1@199@01)]
(pop) ; 22
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 22
; [then-branch: 2060 | !(p2_1@199@01) | live]
; [else-branch: 2060 | p2_1@199@01 | live]
(push) ; 23
; [then-branch: 2060 | !(p2_1@199@01)]
(pop) ; 23
(push) ; 23
; [else-branch: 2060 | p2_1@199@01]
(assert p2_1@199@01)
; [eval] !break2
(push) ; 24
; [then-branch: 2061 | False | live]
; [else-branch: 2061 | True | live]
(push) ; 25
; [then-branch: 2061 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 2061 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not p2_1@199@01))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2062 | !(p2_1@199@01) | live]
; [else-branch: 2062 | p2_1@199@01 | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 2062 | !(p2_1@199@01)]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 23
; [then-branch: 2063 | !(p1_1@198@01) | live]
; [else-branch: 2063 | p1_1@198@01 | live]
(push) ; 24
; [then-branch: 2063 | !(p1_1@198@01)]
(pop) ; 24
(push) ; 24
; [else-branch: 2063 | p1_1@198@01]
(assert p1_1@198@01)
; [eval] !break1
(push) ; 25
; [then-branch: 2064 | False | live]
; [else-branch: 2064 | True | live]
(push) ; 26
; [then-branch: 2064 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 2064 | True]
; [eval] !except1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 2065 | p1_1@198@01 | dead]
; [else-branch: 2065 | !(p1_1@198@01) | live]
(push) ; 23
; [else-branch: 2065 | !(p1_1@198@01)]
(pop) ; 23
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 23
; [then-branch: 2066 | !(p1_1@198@01) | live]
; [else-branch: 2066 | p1_1@198@01 | live]
(push) ; 24
; [then-branch: 2066 | !(p1_1@198@01)]
(pop) ; 24
(push) ; 24
; [else-branch: 2066 | p1_1@198@01]
(assert p1_1@198@01)
; [eval] !break1
(push) ; 25
; [then-branch: 2067 | False | live]
; [else-branch: 2067 | True | live]
(push) ; 26
; [then-branch: 2067 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 2067 | True]
; [eval] !except1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not p1_1@198@01))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2068 | !(p1_1@198@01) | live]
; [else-branch: 2068 | p1_1@198@01 | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 2068 | !(p1_1@198@01)]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 24
; [then-branch: 2069 | !(p2_1@199@01) | live]
; [else-branch: 2069 | p2_1@199@01 | live]
(push) ; 25
; [then-branch: 2069 | !(p2_1@199@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 2069 | p2_1@199@01]
(assert p2_1@199@01)
; [eval] !break2
(push) ; 26
; [then-branch: 2070 | False | live]
; [else-branch: 2070 | True | live]
(push) ; 27
; [then-branch: 2070 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 2070 | True]
; [eval] !except2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 2071 | p2_1@199@01 | dead]
; [else-branch: 2071 | !(p2_1@199@01) | live]
(push) ; 24
; [else-branch: 2071 | !(p2_1@199@01)]
(pop) ; 24
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 24
; [then-branch: 2072 | !(p2_1@199@01) | live]
; [else-branch: 2072 | p2_1@199@01 | live]
(push) ; 25
; [then-branch: 2072 | !(p2_1@199@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 2072 | p2_1@199@01]
(assert p2_1@199@01)
; [eval] !break2
(push) ; 26
; [then-branch: 2073 | False | live]
; [else-branch: 2073 | True | live]
(push) ; 27
; [then-branch: 2073 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 2073 | True]
; [eval] !except2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not p2_1@199@01))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2074 | !(p2_1@199@01) | live]
; [else-branch: 2074 | p2_1@199@01 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 2074 | !(p2_1@199@01)]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 25
; [then-branch: 2075 | !(p1_1@198@01) | live]
; [else-branch: 2075 | p1_1@198@01 | live]
(push) ; 26
; [then-branch: 2075 | !(p1_1@198@01)]
(pop) ; 26
(push) ; 26
; [else-branch: 2075 | p1_1@198@01]
(assert p1_1@198@01)
; [eval] !break1
(push) ; 27
; [then-branch: 2076 | False | live]
; [else-branch: 2076 | True | live]
(push) ; 28
; [then-branch: 2076 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 2076 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 2077 | p1_1@198@01 | dead]
; [else-branch: 2077 | !(p1_1@198@01) | live]
(push) ; 25
; [else-branch: 2077 | !(p1_1@198@01)]
(pop) ; 25
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 25
; [then-branch: 2078 | !(p1_1@198@01) | live]
; [else-branch: 2078 | p1_1@198@01 | live]
(push) ; 26
; [then-branch: 2078 | !(p1_1@198@01)]
(pop) ; 26
(push) ; 26
; [else-branch: 2078 | p1_1@198@01]
(assert p1_1@198@01)
; [eval] !break1
(push) ; 27
; [then-branch: 2079 | False | live]
; [else-branch: 2079 | True | live]
(push) ; 28
; [then-branch: 2079 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 2079 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not p1_1@198@01))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2080 | !(p1_1@198@01) | live]
; [else-branch: 2080 | p1_1@198@01 | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 2080 | !(p1_1@198@01)]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 26
; [then-branch: 2081 | !(p2_1@199@01) | live]
; [else-branch: 2081 | p2_1@199@01 | live]
(push) ; 27
; [then-branch: 2081 | !(p2_1@199@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 2081 | p2_1@199@01]
(assert p2_1@199@01)
; [eval] !break2
(push) ; 28
; [then-branch: 2082 | False | live]
; [else-branch: 2082 | True | live]
(push) ; 29
; [then-branch: 2082 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 2082 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 2083 | p2_1@199@01 | dead]
; [else-branch: 2083 | !(p2_1@199@01) | live]
(push) ; 26
; [else-branch: 2083 | !(p2_1@199@01)]
(pop) ; 26
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 26
; [then-branch: 2084 | !(p2_1@199@01) | live]
; [else-branch: 2084 | p2_1@199@01 | live]
(push) ; 27
; [then-branch: 2084 | !(p2_1@199@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 2084 | p2_1@199@01]
(assert p2_1@199@01)
; [eval] !break2
(push) ; 28
; [then-branch: 2085 | False | live]
; [else-branch: 2085 | True | live]
(push) ; 29
; [then-branch: 2085 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 2085 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not p2_1@199@01))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2086 | !(p2_1@199@01) | live]
; [else-branch: 2086 | p2_1@199@01 | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 2086 | !(p2_1@199@01)]
; [exec]
; p1_3 := p3 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p3 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 2087 | !(p3@200@01) | live]
; [else-branch: 2087 | p3@200@01 | live]
(push) ; 28
; [then-branch: 2087 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2087 | p3@200@01]
(assert p3@200@01)
; [eval] !break1
(push) ; 29
; [then-branch: 2088 | False | live]
; [else-branch: 2088 | True | live]
(push) ; 30
; [then-branch: 2088 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2088 | True]
; [eval] !except1
(push) ; 31
; [then-branch: 2089 | False | live]
; [else-branch: 2089 | True | live]
(push) ; 32
; [then-branch: 2089 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2089 | True]
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or p3@200@01 (not p3@200@01)))
; [exec]
; p2_3 := p4 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p4 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 2090 | !(p4@201@01) | live]
; [else-branch: 2090 | p4@201@01 | live]
(push) ; 28
; [then-branch: 2090 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2090 | p4@201@01]
(assert p4@201@01)
; [eval] !break2
(push) ; 29
; [then-branch: 2091 | False | live]
; [else-branch: 2091 | True | live]
(push) ; 30
; [then-branch: 2091 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2091 | True]
; [eval] !except2
(push) ; 31
; [then-branch: 2092 | False | live]
; [else-branch: 2092 | True | live]
(push) ; 32
; [then-branch: 2092 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2092 | True]
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or p4@201@01 (not p4@201@01)))
; [exec]
; p3_1 := p3 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p3 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 2093 | !(p3@200@01) | live]
; [else-branch: 2093 | p3@200@01 | live]
(push) ; 28
; [then-branch: 2093 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2093 | p3@200@01]
(assert p3@200@01)
; [eval] !break1
(push) ; 29
; [then-branch: 2094 | False | live]
; [else-branch: 2094 | True | live]
(push) ; 30
; [then-branch: 2094 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2094 | True]
; [eval] !except1
(push) ; 31
; [then-branch: 2095 | False | live]
; [else-branch: 2095 | True | live]
(push) ; 32
; [then-branch: 2095 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2095 | True]
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p4_1 := p4 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p4 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 2096 | !(p4@201@01) | live]
; [else-branch: 2096 | p4@201@01 | live]
(push) ; 28
; [then-branch: 2096 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2096 | p4@201@01]
(assert p4@201@01)
; [eval] !break2
(push) ; 29
; [then-branch: 2097 | False | live]
; [else-branch: 2097 | True | live]
(push) ; 30
; [then-branch: 2097 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2097 | True]
; [eval] !except2
(push) ; 31
; [then-branch: 2098 | False | live]
; [else-branch: 2098 | True | live]
(push) ; 32
; [then-branch: 2098 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2098 | True]
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [eval] p1_3 && (!break1 && !except1)
; [then-branch: 2099 | False | dead]
; [else-branch: 2099 | True | live]
(push) ; 27
; [else-branch: 2099 | True]
(pop) ; 27
; [eval] !(p1_3 && (!break1 && !except1))
; [eval] p1_3 && (!break1 && !except1)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2100 | True | live]
; [else-branch: 2100 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 2100 | True]
; [eval] p2_3 && (!break2 && !except2)
; [then-branch: 2101 | False | dead]
; [else-branch: 2101 | True | live]
(push) ; 28
; [else-branch: 2101 | True]
(pop) ; 28
; [eval] !(p2_3 && (!break2 && !except2))
; [eval] p2_3 && (!break2 && !except2)
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2102 | True | live]
; [else-branch: 2102 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2102 | True]
; [eval] p3 && (!break1 && !except1)
(push) ; 29
; [then-branch: 2103 | !(p3@200@01) | live]
; [else-branch: 2103 | p3@200@01 | live]
(push) ; 30
; [then-branch: 2103 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 30
(push) ; 30
; [else-branch: 2103 | p3@200@01]
(assert p3@200@01)
; [eval] !break1
(push) ; 31
; [then-branch: 2104 | False | live]
; [else-branch: 2104 | True | live]
(push) ; 32
; [then-branch: 2104 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2104 | True]
; [eval] !except1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p3@200@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not p3@200@01))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2105 | p3@200@01 | live]
; [else-branch: 2105 | !(p3@200@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 2105 | p3@200@01]
(assert p3@200@01)
; [exec]
; c_4.Container_value := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 30
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 30
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_value@221@01 $Ref)
(assert (= Container_value@221@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p4 && (!break2 && !except2)
(push) ; 30
; [then-branch: 2106 | !(p4@201@01) | live]
; [else-branch: 2106 | p4@201@01 | live]
(push) ; 31
; [then-branch: 2106 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 31
(push) ; 31
; [else-branch: 2106 | p4@201@01]
(assert p4@201@01)
; [eval] !break2
(push) ; 32
; [then-branch: 2107 | False | live]
; [else-branch: 2107 | True | live]
(push) ; 33
; [then-branch: 2107 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 2107 | True]
; [eval] !except2
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (not p4@201@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not p4@201@01))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2108 | p4@201@01 | live]
; [else-branch: 2108 | !(p4@201@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2108 | p4@201@01]
(assert p4@201@01)
; [exec]
; c_4_0.Container_valuep := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 31
(pop) ; 31
; Joined path conditions
(declare-const Container_valuep@222@01 $Ref)
(assert (= Container_valuep@222@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p3 && (!break1 && !except1)
(push) ; 31
; [then-branch: 2109 | !(p3@200@01) | live]
; [else-branch: 2109 | p3@200@01 | live]
(push) ; 32
; [then-branch: 2109 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 32
(push) ; 32
; [else-branch: 2109 | p3@200@01]
; [eval] !break1
(push) ; 33
; [then-branch: 2110 | False | live]
; [else-branch: 2110 | True | live]
(push) ; 34
; [then-branch: 2110 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 2110 | True]
; [eval] !except1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p3@200@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2111 | p3@200@01 | live]
; [else-branch: 2111 | !(p3@200@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 2111 | p3@200@01]
; [exec]
; break1 := true
; [eval] p4 && (!break2 && !except2)
(push) ; 32
; [then-branch: 2112 | !(p4@201@01) | live]
; [else-branch: 2112 | p4@201@01 | live]
(push) ; 33
; [then-branch: 2112 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 33
(push) ; 33
; [else-branch: 2112 | p4@201@01]
; [eval] !break2
(push) ; 34
; [then-branch: 2113 | False | live]
; [else-branch: 2113 | True | live]
(push) ; 35
; [then-branch: 2113 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 2113 | True]
; [eval] !except2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not (not p4@201@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2114 | p4@201@01 | live]
; [else-branch: 2114 | !(p4@201@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2114 | p4@201@01]
; [exec]
; break2 := true
; [eval] p1_0 && (!break1 && !except1)
(push) ; 33
; [then-branch: 2115 | !(p1@16@01) | live]
; [else-branch: 2115 | p1@16@01 | live]
(push) ; 34
; [then-branch: 2115 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 34
(push) ; 34
; [else-branch: 2115 | p1@16@01]
; [eval] !break1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 2116 | False | dead]
; [else-branch: 2116 | True | live]
(push) ; 33
; [else-branch: 2116 | True]
(pop) ; 33
; [eval] !(p1_0 && (!break1 && !except1))
; [eval] p1_0 && (!break1 && !except1)
(push) ; 33
; [then-branch: 2117 | !(p1@16@01) | live]
; [else-branch: 2117 | p1@16@01 | live]
(push) ; 34
; [then-branch: 2117 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 34
(push) ; 34
; [else-branch: 2117 | p1@16@01]
; [eval] !break1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2118 | True | live]
; [else-branch: 2118 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 2118 | True]
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 2119 | !(p2@17@01) | live]
; [else-branch: 2119 | p2@17@01 | live]
(push) ; 35
; [then-branch: 2119 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 35
(push) ; 35
; [else-branch: 2119 | p2@17@01]
; [eval] !break2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
; [then-branch: 2120 | False | dead]
; [else-branch: 2120 | True | live]
(push) ; 34
; [else-branch: 2120 | True]
(pop) ; 34
; [eval] !(p2_0 && (!break2 && !except2))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 2121 | !(p2@17@01) | live]
; [else-branch: 2121 | p2@17@01 | live]
(push) ; 35
; [then-branch: 2121 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 35
(push) ; 35
; [else-branch: 2121 | p2@17@01]
; [eval] !break2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2122 | True | live]
; [else-branch: 2122 | False | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 2122 | True]
; [exec]
; assert (p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true) &&
;   (p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true)
; [eval] p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true
; [eval] p1_0 && (!break1 && !except1)
(push) ; 35
; [then-branch: 2123 | !(p1@16@01) | live]
; [else-branch: 2123 | p1@16@01 | live]
(push) ; 36
; [then-branch: 2123 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 36
(push) ; 36
; [else-branch: 2123 | p1@16@01]
; [eval] !break1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
; [then-branch: 2124 | False | dead]
; [else-branch: 2124 | True | live]
(push) ; 36
; [else-branch: 2124 | True]
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true
; [eval] p2_0 && (!break2 && !except2)
(push) ; 35
; [then-branch: 2125 | !(p2@17@01) | live]
; [else-branch: 2125 | p2@17@01 | live]
(push) ; 36
; [then-branch: 2125 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 36
(push) ; 36
; [else-branch: 2125 | p2@17@01]
; [eval] !break2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
; [then-branch: 2126 | False | dead]
; [else-branch: 2126 | True | live]
(push) ; 36
; [else-branch: 2126 | True]
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [exec]
; inhale !p1_0 || !(!break1 && !except1)
(declare-const $t@223@01 $Snap)
(assert (= $t@223@01 $Snap.unit))
; [eval] !p1_0 || !(!break1 && !except1)
; [eval] !p1_0
(push) ; 35
; [then-branch: 2127 | !(p1@16@01) | live]
; [else-branch: 2127 | p1@16@01 | live]
(push) ; 36
; [then-branch: 2127 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 36
(push) ; 36
; [else-branch: 2127 | p1@16@01]
; [eval] !(!break1 && !except1)
; [eval] !break1 && !except1
; [eval] !break1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !p2_0 || !(!break2 && !except2)
(declare-const $t@224@01 $Snap)
(assert (= $t@224@01 $Snap.unit))
; [eval] !p2_0 || !(!break2 && !except2)
; [eval] !p2_0
(set-option :timeout 0)
(push) ; 35
; [then-branch: 2128 | !(p2@17@01) | live]
; [else-branch: 2128 | p2@17@01 | live]
(push) ; 36
; [then-branch: 2128 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 36
(push) ; 36
; [else-branch: 2128 | p2@17@01]
; [eval] !(!break2 && !except2)
; [eval] !break2 && !except2
; [eval] !break2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] !bypass1
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not bypass1@83@01))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (not bypass1@83@01)))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2129 | !(bypass1@83@01) | live]
; [else-branch: 2129 | bypass1@83@01 | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 2129 | !(bypass1@83@01)]
(assert (not bypass1@83@01))
; [exec]
; break1 := false
; [eval] !bypass2
(push) ; 36
(set-option :timeout 10)
(assert (not bypass2@84@01))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (not bypass2@84@01)))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2130 | !(bypass2@84@01) | live]
; [else-branch: 2130 | bypass2@84@01 | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 2130 | !(bypass2@84@01)]
(assert (not bypass2@84@01))
; [exec]
; break2 := false
; [eval] p1 && (!break1 && !except1)
(push) ; 37
; [then-branch: 2131 | !(p1@16@01) | live]
; [else-branch: 2131 | p1@16@01 | live]
(push) ; 38
; [then-branch: 2131 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 38
(push) ; 38
; [else-branch: 2131 | p1@16@01]
; [eval] !break1
(push) ; 39
; [then-branch: 2132 | False | live]
; [else-branch: 2132 | True | live]
(push) ; 40
; [then-branch: 2132 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 2132 | True]
; [eval] !except1
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2133 | p1@16@01 | live]
; [else-branch: 2133 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2133 | p1@16@01]
; [exec]
; exhale perm(MustTerminate(_cthread_157)) > none ==>
;   acc(MustTerminate(_cthread_157), perm(MustTerminate(_cthread_157)) -
;   _loop_original_must_terminate)
; [eval] perm(MustTerminate(_cthread_157)) > none
; [eval] perm(MustTerminate(_cthread_157))
; [then-branch: 2134 | False | dead]
; [else-branch: 2134 | True | live]
(push) ; 38
; [else-branch: 2134 | True]
; [exec]
; _err := null
; [eval] p2 && (!break2 && !except2)
(push) ; 39
; [then-branch: 2135 | !(p2@17@01) | live]
; [else-branch: 2135 | p2@17@01 | live]
(push) ; 40
; [then-branch: 2135 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 40
(push) ; 40
; [else-branch: 2135 | p2@17@01]
; [eval] !break2
(push) ; 41
; [then-branch: 2136 | False | live]
; [else-branch: 2136 | True | live]
(push) ; 42
; [then-branch: 2136 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2136 | True]
; [eval] !except2
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(push) ; 39
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2137 | p2@17@01 | live]
; [else-branch: 2137 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 2137 | p2@17@01]
; [exec]
; exhale perm(MustTerminate_0(_cthread_157_0)) > none ==>
;   acc(MustTerminate_0(_cthread_157_0), perm(MustTerminate_0(_cthread_157_0)) -
;   _loop_original_must_terminate_4)
; [eval] perm(MustTerminate_0(_cthread_157_0)) > none
; [eval] perm(MustTerminate_0(_cthread_157_0))
; [then-branch: 2138 | False | dead]
; [else-branch: 2138 | True | live]
(push) ; 40
; [else-branch: 2138 | True]
; [exec]
; _err_0 := null
; [eval] p1 ==> true
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2139 | p1@16@01 | live]
; [else-branch: 2139 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 2139 | p1@16@01]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; [eval] p2 ==> true
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2140 | p2@17@01 | live]
; [else-branch: 2140 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 2140 | p2@17@01]
(pop) ; 42
(pop) ; 41
; Joined path conditions
(push) ; 41
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2141 | p1@16@01 | live]
; [else-branch: 2141 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 2141 | p1@16@01]
; [eval] _err == null
(push) ; 42
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2142 | True | live]
; [else-branch: 2142 | False | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 2142 | True]
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(push) ; 43
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@221@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@221@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c.Container_value, __prim__int___box__(8))
; [eval] __prim__int___box__(8)
(push) ; 43
(pop) ; 43
; Joined path conditions
(push) ; 43
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@221@01 (__prim__int___box__ $Snap.unit 8)))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@221@01 (__prim__int___box__ $Snap.unit 8))))
(push) ; 43
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@221@01 (__prim__int___box__ $Snap.unit 8))))
(check-sat)
; unsat
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@221@01 (__prim__int___box__ $Snap.unit 8)))
(push) ; 43
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2143 | p2@17@01 | live]
; [else-branch: 2143 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 2143 | p2@17@01]
; [eval] _err_0 == null
(push) ; 44
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2144 | True | live]
; [else-branch: 2144 | False | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 2144 | True]
; [eval] issubtype(typeof(c_9.Container_valuep), int())
; [eval] typeof(c_9.Container_valuep)
; [eval] int()
(push) ; 45
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@222@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@222@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_9.Container_valuep, __prim__int___box__(8))
; [eval] __prim__int___box__(8)
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@222@01 (__prim__int___box__ $Snap.unit 8)))
(pop) ; 45
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@222@01 (__prim__int___box__ $Snap.unit 8)))
(push) ; 45
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@222@01 (__prim__int___box__ $Snap.unit 8))))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@222@01 (__prim__int___box__ $Snap.unit 8)))
(push) ; 45
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2145 | p1@16@01 | live]
; [else-branch: 2145 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 2145 | p1@16@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
; [then-branch: 2146 | False | dead]
; [else-branch: 2146 | True | live]
(push) ; 46
; [else-branch: 2146 | True]
(push) ; 47
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2147 | p2@17@01 | live]
; [else-branch: 2147 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 47
; [then-branch: 2147 | p2@17@01]
; [eval] _err_0 != null && issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
; [then-branch: 2148 | False | dead]
; [else-branch: 2148 | True | live]
(push) ; 48
; [else-branch: 2148 | True]
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2149 | p1@16@01 | live]
; [else-branch: 2149 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 2149 | p1@16@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 51
; [then-branch: 2150 | False | dead]
; [else-branch: 2150 | True | live]
(push) ; 52
; [else-branch: 2150 | True]
(pop) ; 52
(pop) ; 51
; Joined path conditions
(pop) ; 50
(pop) ; 49
; Joined path conditions
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2151 | p2@17@01 | live]
; [else-branch: 2151 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 2151 | p2@17@01]
; [eval] _err_0 != null ==> issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 51
; [then-branch: 2152 | False | dead]
; [else-branch: 2152 | True | live]
(push) ; 52
; [else-branch: 2152 | True]
(pop) ; 52
(pop) ; 51
; Joined path conditions
(pop) ; 50
(pop) ; 49
; Joined path conditions
; [eval] p1 ==> (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2153 | p1@16@01 | live]
; [else-branch: 2153 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 2153 | p1@16@01]
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
(push) ; 51
; [then-branch: 2154 | False | live]
; [else-branch: 2154 | True | live]
(push) ; 52
; [then-branch: 2154 | False]
(assert false)
(pop) ; 52
(push) ; 52
; [else-branch: 2154 | True]
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
(push) ; 53
; [then-branch: 2155 | False | live]
; [else-branch: 2155 | True | live]
(push) ; 54
; [then-branch: 2155 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 2155 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
(push) ; 55
; [then-branch: 2156 | False | live]
; [else-branch: 2156 | True | live]
(push) ; 56
; [then-branch: 2156 | False]
(assert false)
(pop) ; 56
(push) ; 56
; [else-branch: 2156 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 56
(pop) ; 55
; Joined path conditions
; Joined path conditions
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(pop) ; 50
(pop) ; 49
; Joined path conditions
; [eval] p2 ==> (forperm _r_2: Ref [MustInvokeBounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: false)))
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2157 | p2@17@01 | live]
; [else-branch: 2157 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 2157 | p2@17@01]
; [eval] (forperm _r_2: Ref [MustInvokeBounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded_0(_r_2)] :: false)
(push) ; 51
; [then-branch: 2158 | False | live]
; [else-branch: 2158 | True | live]
(push) ; 52
; [then-branch: 2158 | False]
(assert false)
(pop) ; 52
(push) ; 52
; [else-branch: 2158 | True]
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded_0(_r_2)] :: false)
(push) ; 53
; [then-branch: 2159 | False | live]
; [else-branch: 2159 | True | live]
(push) ; 54
; [then-branch: 2159 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 2159 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: false)
(push) ; 55
; [then-branch: 2160 | False | live]
; [else-branch: 2160 | True | live]
(push) ; 56
; [then-branch: 2160 | False]
(assert false)
(pop) ; 56
(push) ; 56
; [else-branch: 2160 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: false)
(pop) ; 56
(pop) ; 55
; Joined path conditions
; Joined path conditions
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(pop) ; 50
(pop) ; 49
; Joined path conditions
(pop) ; 48
(pop) ; 47
(pop) ; 46
(pop) ; 45
(pop) ; 44
(pop) ; 43
(pop) ; 42
(pop) ; 41
(pop) ; 40
(pop) ; 39
; [eval] !(p2 && (!break2 && !except2))
; [eval] p2 && (!break2 && !except2)
(push) ; 39
; [then-branch: 2161 | !(p2@17@01) | live]
; [else-branch: 2161 | p2@17@01 | live]
(push) ; 40
; [then-branch: 2161 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 40
(push) ; 40
; [else-branch: 2161 | p2@17@01]
; [eval] !break2
(push) ; 41
; [then-branch: 2162 | False | live]
; [else-branch: 2162 | True | live]
(push) ; 42
; [then-branch: 2162 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2162 | True]
; [eval] !except2
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
; [then-branch: 2163 | !(p2@17@01) | dead]
; [else-branch: 2163 | p2@17@01 | live]
(push) ; 39
; [else-branch: 2163 | p2@17@01]
(pop) ; 39
(pop) ; 38
(pop) ; 37
; [eval] !(p1 && (!break1 && !except1))
; [eval] p1 && (!break1 && !except1)
(push) ; 37
; [then-branch: 2164 | !(p1@16@01) | live]
; [else-branch: 2164 | p1@16@01 | live]
(push) ; 38
; [then-branch: 2164 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 38
(push) ; 38
; [else-branch: 2164 | p1@16@01]
; [eval] !break1
(push) ; 39
; [then-branch: 2165 | False | live]
; [else-branch: 2165 | True | live]
(push) ; 40
; [then-branch: 2165 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 2165 | True]
; [eval] !except1
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
; [then-branch: 2166 | !(p1@16@01) | dead]
; [else-branch: 2166 | p1@16@01 | live]
(push) ; 37
; [else-branch: 2166 | p1@16@01]
(pop) ; 37
(pop) ; 36
; [eval] !!bypass2
; [eval] !bypass2
(push) ; 36
(set-option :timeout 10)
(assert (not (not bypass2@84@01)))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2167 | bypass2@84@01 | dead]
; [else-branch: 2167 | !(bypass2@84@01) | live]
(set-option :timeout 0)
(push) ; 36
; [else-branch: 2167 | !(bypass2@84@01)]
(assert (not bypass2@84@01))
(pop) ; 36
(pop) ; 35
; [eval] !!bypass1
; [eval] !bypass1
(push) ; 35
(set-option :timeout 10)
(assert (not (not bypass1@83@01)))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2168 | bypass1@83@01 | dead]
; [else-branch: 2168 | !(bypass1@83@01) | live]
(set-option :timeout 0)
(push) ; 35
; [else-branch: 2168 | !(bypass1@83@01)]
(assert (not bypass1@83@01))
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 32
; [then-branch: 2169 | !(p4@201@01) | live]
; [else-branch: 2169 | p4@201@01 | live]
(push) ; 33
; [then-branch: 2169 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 33
(push) ; 33
; [else-branch: 2169 | p4@201@01]
; [eval] !break2
(push) ; 34
; [then-branch: 2170 | False | live]
; [else-branch: 2170 | True | live]
(push) ; 35
; [then-branch: 2170 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 2170 | True]
; [eval] !except2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 2171 | !(p4@201@01) | dead]
; [else-branch: 2171 | p4@201@01 | live]
(push) ; 32
; [else-branch: 2171 | p4@201@01]
(pop) ; 32
(pop) ; 31
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 31
; [then-branch: 2172 | !(p3@200@01) | live]
; [else-branch: 2172 | p3@200@01 | live]
(push) ; 32
; [then-branch: 2172 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 32
(push) ; 32
; [else-branch: 2172 | p3@200@01]
; [eval] !break1
(push) ; 33
; [then-branch: 2173 | False | live]
; [else-branch: 2173 | True | live]
(push) ; 34
; [then-branch: 2173 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 2173 | True]
; [eval] !except1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 2174 | !(p3@200@01) | dead]
; [else-branch: 2174 | p3@200@01 | live]
(push) ; 31
; [else-branch: 2174 | p3@200@01]
(pop) ; 31
(pop) ; 30
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 30
; [then-branch: 2175 | !(p4@201@01) | live]
; [else-branch: 2175 | p4@201@01 | live]
(push) ; 31
; [then-branch: 2175 | !(p4@201@01)]
(assert (not p4@201@01))
(pop) ; 31
(push) ; 31
; [else-branch: 2175 | p4@201@01]
(assert p4@201@01)
; [eval] !break2
(push) ; 32
; [then-branch: 2176 | False | live]
; [else-branch: 2176 | True | live]
(push) ; 33
; [then-branch: 2176 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 2176 | True]
; [eval] !except2
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not p4@201@01))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2177 | !(p4@201@01) | dead]
; [else-branch: 2177 | p4@201@01 | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 2177 | p4@201@01]
(assert p4@201@01)
(pop) ; 30
(pop) ; 29
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 29
; [then-branch: 2178 | !(p3@200@01) | live]
; [else-branch: 2178 | p3@200@01 | live]
(push) ; 30
; [then-branch: 2178 | !(p3@200@01)]
(assert (not p3@200@01))
(pop) ; 30
(push) ; 30
; [else-branch: 2178 | p3@200@01]
(assert p3@200@01)
; [eval] !break1
(push) ; 31
; [then-branch: 2179 | False | live]
; [else-branch: 2179 | True | live]
(push) ; 32
; [then-branch: 2179 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2179 | True]
; [eval] !except1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not p3@200@01))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2180 | !(p3@200@01) | dead]
; [else-branch: 2180 | p3@200@01 | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 2180 | p3@200@01]
(assert p3@200@01)
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(push) ; 20
; [else-branch: 2050 | p2_1@199@01]
(assert p2_1@199@01)
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 1912 | p1_1@198@01]
(assert p1_1@198@01)
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
; [eval] !(p2_0 && (!break2 && !except2))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 16
; [then-branch: 2181 | !(p2@17@01) | live]
; [else-branch: 2181 | p2@17@01 | live]
(push) ; 17
; [then-branch: 2181 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 17
(push) ; 17
; [else-branch: 2181 | p2@17@01]
; [eval] !break2
(push) ; 18
; [then-branch: 2182 | False | live]
; [else-branch: 2182 | True | live]
(push) ; 19
; [then-branch: 2182 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 2182 | True]
; [eval] !except2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 2183 | !(p2@17@01) | dead]
; [else-branch: 2183 | p2@17@01 | live]
(push) ; 16
; [else-branch: 2183 | p2@17@01]
(pop) ; 16
(pop) ; 15
; [eval] !(p1_0 && (!break1 && !except1))
; [eval] p1_0 && (!break1 && !except1)
(push) ; 15
; [then-branch: 2184 | !(p1@16@01) | live]
; [else-branch: 2184 | p1@16@01 | live]
(push) ; 16
; [then-branch: 2184 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2184 | p1@16@01]
; [eval] !break1
(push) ; 17
; [then-branch: 2185 | False | live]
; [else-branch: 2185 | True | live]
(push) ; 18
; [then-branch: 2185 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 2185 | True]
; [eval] !except1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 2186 | !(p1@16@01) | dead]
; [else-branch: 2186 | p1@16@01 | live]
(push) ; 15
; [else-branch: 2186 | p1@16@01]
(pop) ; 15
(pop) ; 14
; [eval] !(!bypass1 && (break1 || except1) || !bypass2 && (break2 || except2))
; [eval] !bypass1 && (break1 || except1) || !bypass2 && (break2 || except2)
; [eval] !bypass1 && (break1 || except1)
; [eval] !bypass1
(push) ; 14
; [then-branch: 2187 | bypass1@83@01 | live]
; [else-branch: 2187 | !(bypass1@83@01) | live]
(push) ; 15
; [then-branch: 2187 | bypass1@83@01]
(assert bypass1@83@01)
(pop) ; 15
(push) ; 15
; [else-branch: 2187 | !(bypass1@83@01)]
(assert (not bypass1@83@01))
; [eval] break1 || except1
(push) ; 16
; [then-branch: 2188 | break1@110@01 | live]
; [else-branch: 2188 | !(break1@110@01) | live]
(push) ; 17
; [then-branch: 2188 | break1@110@01]
(assert break1@110@01)
(pop) ; 17
(push) ; 17
; [else-branch: 2188 | !(break1@110@01)]
(assert (not break1@110@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1@110@01) break1@110@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 2189 | !(bypass1@83@01) && break1@110@01 || except1@103@01 | live]
; [else-branch: 2189 | !(!(bypass1@83@01) && break1@110@01 || except1@103@01) | live]
(push) ; 15
; [then-branch: 2189 | !(bypass1@83@01) && break1@110@01 || except1@103@01]
(assert (and (not bypass1@83@01) (or break1@110@01 except1@103@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 2189 | !(!(bypass1@83@01) && break1@110@01 || except1@103@01)]
(assert (not (and (not bypass1@83@01) (or break1@110@01 except1@103@01))))
; [eval] !bypass2 && (break2 || except2)
; [eval] !bypass2
(push) ; 16
; [then-branch: 2190 | bypass2@84@01 | live]
; [else-branch: 2190 | !(bypass2@84@01) | live]
(push) ; 17
; [then-branch: 2190 | bypass2@84@01]
(assert bypass2@84@01)
(pop) ; 17
(push) ; 17
; [else-branch: 2190 | !(bypass2@84@01)]
(assert (not bypass2@84@01))
; [eval] break2 || except2
(push) ; 18
; [then-branch: 2191 | break2@111@01 | live]
; [else-branch: 2191 | !(break2@111@01) | live]
(push) ; 19
; [then-branch: 2191 | break2@111@01]
(assert break2@111@01)
(pop) ; 19
(push) ; 19
; [else-branch: 2191 | !(break2@111@01)]
(assert (not break2@111@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break2@111@01) break2@111@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not bypass2@84@01)
  (and (not bypass2@84@01) (or (not break2@111@01) break2@111@01))))
(assert (or (not bypass2@84@01) bypass2@84@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (or
  (and (not bypass1@83@01) (or break1@110@01 except1@103@01))
  (and (not bypass2@84@01) (or break2@111@01 except2@105@01)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2192 | !(!(bypass1@83@01) && break1@110@01 || except1@103@01 || !(bypass2@84@01) && break2@111@01 || except2@105@01) | dead]
; [else-branch: 2192 | !(bypass1@83@01) && break1@110@01 || except1@103@01 || !(bypass2@84@01) && break2@111@01 || except2@105@01 | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 2192 | !(bypass1@83@01) && break1@110@01 || except1@103@01 || !(bypass2@84@01) && break2@111@01 || except2@105@01]
(assert (or
  (and (not bypass1@83@01) (or break1@110@01 except1@103@01))
  (and (not bypass2@84@01) (or break2@111@01 except2@105@01))))
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 1576 | p1@16@01 && !(break1@110@01) && !(except1@103@01) && !(bypass1@83@01) || p2@17@01 && !(break2@111@01) && !(except2@105@01) && !(bypass2@84@01)]
(assert (or
  (and
    p1@16@01
    (and (not break1@110@01) (and (not except1@103@01) (not bypass1@83@01))))
  (and
    p2@17@01
    (and (not break2@111@01) (and (not except2@105@01) (not bypass2@84@01))))))
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
; [eval] !(p2 && (!break2 && !except2))
; [eval] p2 && (!break2 && !except2)
(push) ; 6
; [then-branch: 2193 | !(p2@17@01) | live]
; [else-branch: 2193 | p2@17@01 | live]
(push) ; 7
; [then-branch: 2193 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2193 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 8
; [then-branch: 2194 | False | live]
; [else-branch: 2194 | True | live]
(push) ; 9
; [then-branch: 2194 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 2194 | True]
; [eval] !except2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2@17@01))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2195 | !(p2@17@01) | dead]
; [else-branch: 2195 | p2@17@01 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 2195 | p2@17@01]
(assert p2@17@01)
(pop) ; 6
(pop) ; 5
; [eval] !(p1 && (!break1 && !except1))
; [eval] p1 && (!break1 && !except1)
(push) ; 5
; [then-branch: 2196 | !(p1@16@01) | live]
; [else-branch: 2196 | p1@16@01 | live]
(push) ; 6
; [then-branch: 2196 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2196 | p1@16@01]
(assert p1@16@01)
; [eval] !break1
(push) ; 7
; [then-branch: 2197 | False | live]
; [else-branch: 2197 | True | live]
(push) ; 8
; [then-branch: 2197 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2197 | True]
; [eval] !except1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not p1@16@01))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2198 | !(p1@16@01) | dead]
; [else-branch: 2198 | p1@16@01 | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 2198 | p1@16@01]
(assert p1@16@01)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 9 | !(p2@17@01)]
(assert (not p2@17@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))
  $Snap.unit))
; [eval] p1 ==> issubtype(typeof(c.Container_value), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not p1@16@01))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2199 | p1@16@01 | live]
; [else-branch: 2199 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2199 | p1@16@01]
(assert p1@16@01)
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert p1@16@01)
(assert (=>
  p1@16@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(c_9.Container_valuep), int())
(push) ; 4
; [then-branch: 2200 | p2@17@01 | dead]
; [else-branch: 2200 | !(p2@17@01) | live]
(push) ; 5
; [else-branch: 2200 | !(p2@17@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2201 | p1@16@01 | live]
; [else-branch: 2201 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2201 | p1@16@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 4
; [then-branch: 2202 | p2@17@01 | dead]
; [else-branch: 2202 | !(p2@17@01) | live]
(push) ; 5
; [else-branch: 2202 | !(p2@17@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@225@01 $Snap)
(assert (= $t@225@01 ($Snap.combine ($Snap.first $t@225@01) ($Snap.second $t@225@01))))
(assert (= ($Snap.first $t@225@01) $Snap.unit))
; [eval] p1 ==> (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_157) && ((forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2203 | p1@16@01 | live]
; [else-branch: 2203 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2203 | p1@16@01]
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_157) && ((forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_157)
(push) ; 7
; [then-branch: 2204 | False | live]
; [else-branch: 2204 | True | live]
(push) ; 8
; [then-branch: 2204 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2204 | True]
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_157)
(push) ; 9
; [then-branch: 2205 | False | live]
; [else-branch: 2205 | True | live]
(push) ; 10
; [then-branch: 2205 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 2205 | True]
; [eval] _residue_157 <= _current_wait_level_157
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p1@16@01 (<= _residue_157@22@01 _current_wait_level_157@28@01)))
(assert (=
  ($Snap.second $t@225@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@225@01))
    ($Snap.second ($Snap.second $t@225@01)))))
(assert (= ($Snap.first ($Snap.second $t@225@01)) $Snap.unit))
; [eval] p2 ==> (forperm _r_1: Ref [_r_1.MustReleaseBoundedp] :: Level(_r_1) <= _current_wait_level_157_0) && ((forperm _r_1: Ref [_r_1.MustReleaseUnboundedp] :: Level(_r_1) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
(push) ; 5
; [then-branch: 2206 | p2@17@01 | dead]
; [else-branch: 2206 | !(p2@17@01) | live]
(push) ; 6
; [else-branch: 2206 | !(p2@17@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@225@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@225@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2207 | p1@16@01 | live]
; [else-branch: 2207 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2207 | p1@16@01]
; [eval] _err == null
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@30@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@30@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2208 | _err@30@01 == Null | live]
; [else-branch: 2208 | _err@30@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2208 | _err@30@01 == Null]
(assert (= _err@30@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@225@01))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@225@01)))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@225@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@225@01)))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@225@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@225@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@225@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@225@01)))))
  $Snap.unit))
; [eval] int___eq__(c.Container_value, __prim__int___box__(8))
; [eval] __prim__int___box__(8)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@225@01))))) (__prim__int___box__ $Snap.unit 8)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@225@01))))) (__prim__int___box__ $Snap.unit 8))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@225@01))))) (__prim__int___box__ $Snap.unit 8)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@225@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
; [then-branch: 2209 | p2@17@01 | dead]
; [else-branch: 2209 | !(p2@17@01) | live]
(push) ; 7
; [else-branch: 2209 | !(p2@17@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@225@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2210 | p1@16@01 | live]
; [else-branch: 2210 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2210 | p1@16@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 9
; [then-branch: 2211 | _err@30@01 == Null | live]
; [else-branch: 2211 | _err@30@01 != Null | live]
(push) ; 10
; [then-branch: 2211 | _err@30@01 == Null]
(pop) ; 10
(push) ; 10
; [else-branch: 2211 | _err@30@01 != Null]
(assert (not (= _err@30@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@30@01 $Ref.null)) (= _err@30@01 $Ref.null)))
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@30@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2212 | _err@30@01 != Null && issubtype[Bool](typeof[PyType](_err@30@01), Exception[PyType]) | dead]
; [else-branch: 2212 | !(_err@30@01 != Null && issubtype[Bool](typeof[PyType](_err@30@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 2212 | !(_err@30@01 != Null && issubtype[Bool](typeof[PyType](_err@30@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err@30@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
; [then-branch: 2213 | p2@17@01 | dead]
; [else-branch: 2213 | !(p2@17@01) | live]
(push) ; 10
; [else-branch: 2213 | !(p2@17@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
  $Snap.unit))
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2214 | p1@16@01 | live]
; [else-branch: 2214 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2214 | p1@16@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 13
; [then-branch: 2215 | _err@30@01 != Null | dead]
; [else-branch: 2215 | _err@30@01 == Null | live]
(push) ; 14
; [else-branch: 2215 | _err@30@01 == Null]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))
  $Snap.unit))
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 11
; [then-branch: 2216 | p2@17@01 | dead]
; [else-branch: 2216 | !(p2@17@01) | live]
(push) ; 12
; [else-branch: 2216 | !(p2@17@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2217 | p1@16@01 | live]
; [else-branch: 2217 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2217 | p1@16@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 11
; [then-branch: 2218 | p2@17@01 | dead]
; [else-branch: 2218 | !(p2@17@01) | live]
(push) ; 12
; [else-branch: 2218 | !(p2@17@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 2208 | _err@30@01 != Null]
(assert (not (= _err@30@01 $Ref.null)))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@225@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@225@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
; [then-branch: 2219 | p2@17@01 | dead]
; [else-branch: 2219 | !(p2@17@01) | live]
(push) ; 7
; [else-branch: 2219 | !(p2@17@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@225@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2220 | p1@16@01 | live]
; [else-branch: 2220 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2220 | p1@16@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 9
; [then-branch: 2221 | _err@30@01 == Null | live]
; [else-branch: 2221 | _err@30@01 != Null | live]
(push) ; 10
; [then-branch: 2221 | _err@30@01 == Null]
(assert (= _err@30@01 $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 2221 | _err@30@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@30@01 $Ref.null)) (= _err@30@01 $Ref.null)))
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@30@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (not (= _err@30@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2222 | _err@30@01 != Null && issubtype[Bool](typeof[PyType](_err@30@01), Exception[PyType]) | live]
; [else-branch: 2222 | !(_err@30@01 != Null && issubtype[Bool](typeof[PyType](_err@30@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2222 | _err@30@01 != Null && issubtype[Bool](typeof[PyType](_err@30@01), Exception[PyType])]
(assert (and
  (not (= _err@30@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
  $Snap.unit))
; [eval] int___eq__(c.Container_value, __prim__int___box__(7))
; [eval] __prim__int___box__(7)
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))) (__prim__int___box__ $Snap.unit 7)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))) (__prim__int___box__ $Snap.unit 7))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))) (__prim__int___box__ $Snap.unit 7)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
; [then-branch: 2223 | p2@17@01 | dead]
; [else-branch: 2223 | !(p2@17@01) | live]
(push) ; 10
; [else-branch: 2223 | !(p2@17@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
  $Snap.unit))
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2224 | p1@16@01 | live]
; [else-branch: 2224 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2224 | p1@16@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= _err@30@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2225 | _err@30@01 != Null | live]
; [else-branch: 2225 | _err@30@01 == Null | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2225 | _err@30@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and p1@16@01 (not (= _err@30@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))
  $Snap.unit))
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 11
; [then-branch: 2226 | p2@17@01 | dead]
; [else-branch: 2226 | !(p2@17@01) | live]
(push) ; 12
; [else-branch: 2226 | !(p2@17@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2227 | p1@16@01 | live]
; [else-branch: 2227 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2227 | p1@16@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 11
; [then-branch: 2228 | p2@17@01 | dead]
; [else-branch: 2228 | !(p2@17@01) | live]
(push) ; 12
; [else-branch: 2228 | !(p2@17@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 2222 | !(_err@30@01 != Null && issubtype[Bool](typeof[PyType](_err@30@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err@30@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
; [then-branch: 2229 | p2@17@01 | dead]
; [else-branch: 2229 | !(p2@17@01) | live]
(push) ; 10
; [else-branch: 2229 | !(p2@17@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
  $Snap.unit))
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2230 | p1@16@01 | live]
; [else-branch: 2230 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2230 | p1@16@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= _err@30@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= _err@30@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2231 | _err@30@01 != Null | live]
; [else-branch: 2231 | _err@30@01 == Null | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2231 | _err@30@01 != Null]
(assert (not (= _err@30@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not (= _err@30@01 $Ref.null)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=> p1@16@01 (not (= _err@30@01 $Ref.null))))
(assert (=>
  (and p1@16@01 (not (= _err@30@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@30@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))
  $Snap.unit))
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 11
; [then-branch: 2232 | p2@17@01 | dead]
; [else-branch: 2232 | !(p2@17@01) | live]
(push) ; 12
; [else-branch: 2232 | !(p2@17@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2233 | p1@16@01 | dead]
; [else-branch: 2233 | !(p1@16@01) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 2233 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not p1@16@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 11
; [then-branch: 2234 | p2@17@01 | dead]
; [else-branch: 2234 | !(p2@17@01) | live]
(push) ; 12
; [else-branch: 2234 | !(p2@17@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var break1: Bool
(declare-const break1@226@01 Bool)
; [exec]
; var break2: Bool
(declare-const break2@227@01 Bool)
; [exec]
; var except1: Bool
(declare-const except1@228@01 Bool)
; [exec]
; var except2: Bool
(declare-const except2@229@01 Bool)
; [exec]
; var c_4: Ref
(declare-const c_4@230@01 $Ref)
; [exec]
; var c_4_0: Ref
(declare-const c_4_0@231@01 $Ref)
; [exec]
; var b_4: Ref
(declare-const b_4@232@01 $Ref)
; [exec]
; var b_4_0: Ref
(declare-const b_4_0@233@01 $Ref)
; [exec]
; var _loop_measures: Seq[Measure$]
(declare-const _loop_measures@234@01 Seq<Measure$>)
; [exec]
; var _loop_measures_4: Seq[Measure$]
(declare-const _loop_measures_4@235@01 Seq<Measure$>)
; [exec]
; var _loop_check_before: Bool
(declare-const _loop_check_before@236@01 Bool)
; [exec]
; var _loop_check_before_4: Bool
(declare-const _loop_check_before_4@237@01 Bool)
; [exec]
; var _loop_termination_flag: Bool
(declare-const _loop_termination_flag@238@01 Bool)
; [exec]
; var _loop_termination_flag_4: Bool
(declare-const _loop_termination_flag_4@239@01 Bool)
; [exec]
; var _loop_original_must_terminate: Perm
(declare-const _loop_original_must_terminate@240@01 $Perm)
; [exec]
; var _loop_original_must_terminate_4: Perm
(declare-const _loop_original_must_terminate_4@241@01 $Perm)
; [exec]
; var _residue_162: Perm
(declare-const _residue_162@242@01 $Perm)
; [exec]
; var _residue_162_0: Perm
(declare-const _residue_162_0@243@01 $Perm)
; [exec]
; var Exception_res: Ref
(declare-const Exception_res@244@01 $Ref)
; [exec]
; var Exception_res_2: Ref
(declare-const Exception_res_2@245@01 $Ref)
; [exec]
; var _cwl_157: Perm
(declare-const _cwl_157@246@01 $Perm)
; [exec]
; var _cwl_157_0: Perm
(declare-const _cwl_157_0@247@01 $Perm)
; [exec]
; var _method_measures_157: Seq[Measure$]
(declare-const _method_measures_157@248@01 Seq<Measure$>)
; [exec]
; var _method_measures_157_0: Seq[Measure$]
(declare-const _method_measures_157_0@249@01 Seq<Measure$>)
; [exec]
; var bypass1: Bool
(declare-const bypass1@250@01 Bool)
; [exec]
; var bypass2: Bool
(declare-const bypass2@251@01 Bool)
; [exec]
; var tmp1: Seq[Measure$]
(declare-const tmp1@252@01 Seq<Measure$>)
; [exec]
; var tmp2: Seq[Measure$]
(declare-const tmp2@253@01 Seq<Measure$>)
; [exec]
; var tmp1_0: Ref
(declare-const tmp1_0@254@01 $Ref)
; [exec]
; var tmp2_0: Ref
(declare-const tmp2_0@255@01 $Ref)
; [exec]
; var tmp1_1: Bool
(declare-const tmp1_1@256@01 Bool)
; [exec]
; var tmp2_1: Bool
(declare-const tmp2_1@257@01 Bool)
; [exec]
; var tmp1_2: Ref
(declare-const tmp1_2@258@01 $Ref)
; [exec]
; var tmp2_2: Ref
(declare-const tmp2_2@259@01 $Ref)
; [exec]
; var tmp1_3: Bool
(declare-const tmp1_3@260@01 Bool)
; [exec]
; var tmp2_3: Bool
(declare-const tmp2_3@261@01 Bool)
; [exec]
; var tmp1_4: Bool
(declare-const tmp1_4@262@01 Bool)
; [exec]
; var tmp2_4: Bool
(declare-const tmp2_4@263@01 Bool)
; [exec]
; var oldbreak1: Bool
(declare-const oldbreak1@264@01 Bool)
; [exec]
; var oldbreak2: Bool
(declare-const oldbreak2@265@01 Bool)
; [exec]
; var oldexcept1: Bool
(declare-const oldexcept1@266@01 Bool)
; [exec]
; var oldexcept2: Bool
(declare-const oldexcept2@267@01 Bool)
; [exec]
; var p1_0: Bool
(declare-const p1_0@268@01 Bool)
; [exec]
; var p2_0: Bool
(declare-const p2_0@269@01 Bool)
; [exec]
; var idle1: Bool
(declare-const idle1@270@01 Bool)
; [exec]
; var idle2: Bool
(declare-const idle2@271@01 Bool)
; [exec]
; inhale p1
(declare-const $t@272@01 $Snap)
(assert (= $t@272@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; break1 := false
; [exec]
; break2 := false
; [exec]
; except1 := false
; [exec]
; except2 := false
; [eval] p1 && (!break1 && !except1)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2235 | !(p1@16@01) | live]
; [else-branch: 2235 | p1@16@01 | live]
(push) ; 6
; [then-branch: 2235 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2235 | p1@16@01]
; [eval] !break1
(push) ; 7
; [then-branch: 2236 | False | live]
; [else-branch: 2236 | True | live]
(push) ; 8
; [then-branch: 2236 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2236 | True]
; [eval] !except1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1@16@01 (not p1@16@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2237 | p1@16@01 | live]
; [else-branch: 2237 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2237 | p1@16@01]
; [exec]
; _method_measures_157 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; c_4 := c
; [exec]
; b_4 := b
; [exec]
; _loop_original_must_terminate := perm(MustTerminate(_cthread_157))
; [eval] perm(MustTerminate(_cthread_157))
(declare-const _loop_original_must_terminate@273@01 $Perm)
(assert (= _loop_original_must_terminate@273@01 $Perm.No))
; [exec]
; _loop_termination_flag := false
; [exec]
; _loop_check_before := true
; [eval] p2 && (!break2 && !except2)
(push) ; 6
; [then-branch: 2238 | !(p2@17@01) | live]
; [else-branch: 2238 | p2@17@01 | live]
(push) ; 7
; [then-branch: 2238 | !(p2@17@01)]
(pop) ; 7
(push) ; 7
; [else-branch: 2238 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 8
; [then-branch: 2239 | False | live]
; [else-branch: 2239 | True | live]
(push) ; 9
; [then-branch: 2239 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 2239 | True]
; [eval] !except2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2@17@01 (not p2@17@01)))
; [then-branch: 2240 | p2@17@01 | dead]
; [else-branch: 2240 | !(p2@17@01) | live]
(push) ; 6
; [else-branch: 2240 | !(p2@17@01)]
(pop) ; 6
; [eval] !(p2 && (!break2 && !except2))
; [eval] p2 && (!break2 && !except2)
(push) ; 6
; [then-branch: 2241 | !(p2@17@01) | live]
; [else-branch: 2241 | p2@17@01 | live]
(push) ; 7
; [then-branch: 2241 | !(p2@17@01)]
(pop) ; 7
(push) ; 7
; [else-branch: 2241 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 8
; [then-branch: 2242 | False | live]
; [else-branch: 2242 | True | live]
(push) ; 9
; [then-branch: 2242 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 2242 | True]
; [eval] !except2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2@17@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2243 | !(p2@17@01) | live]
; [else-branch: 2243 | p2@17@01 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2243 | !(p2@17@01)]
; [exec]
; bypass1 := !(p1 && (!break1 && !except1))
; [eval] !(p1 && (!break1 && !except1))
; [eval] p1 && (!break1 && !except1)
(push) ; 7
; [then-branch: 2244 | !(p1@16@01) | live]
; [else-branch: 2244 | p1@16@01 | live]
(push) ; 8
; [then-branch: 2244 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2244 | p1@16@01]
; [eval] !break1
(push) ; 9
; [then-branch: 2245 | False | live]
; [else-branch: 2245 | True | live]
(push) ; 10
; [then-branch: 2245 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 2245 | True]
; [eval] !except1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass1@274@01 Bool)
(assert (= bypass1@274@01 (not p1@16@01)))
; [exec]
; bypass2 := !(p2 && (!break2 && !except2))
; [eval] !(p2 && (!break2 && !except2))
; [eval] p2 && (!break2 && !except2)
(push) ; 7
; [then-branch: 2246 | !(p2@17@01) | live]
; [else-branch: 2246 | p2@17@01 | live]
(push) ; 8
; [then-branch: 2246 | !(p2@17@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 2246 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 9
; [then-branch: 2247 | False | live]
; [else-branch: 2247 | True | live]
(push) ; 10
; [then-branch: 2247 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 2247 | True]
; [eval] !except2
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass2@275@01 Bool)
(assert (= bypass2@275@01 (not p2@17@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (not bypass1@274@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2248 | bypass1@274@01 | dead]
; [else-branch: 2248 | !(bypass1@274@01) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 2248 | !(bypass1@274@01)]
(assert (not bypass1@274@01))
(pop) ; 7
; [eval] !bypass1
(push) ; 7
(set-option :timeout 10)
(assert (not bypass1@274@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not bypass1@274@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2249 | !(bypass1@274@01) | live]
; [else-branch: 2249 | bypass1@274@01 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2249 | !(bypass1@274@01)]
(assert (not bypass1@274@01))
(push) ; 8
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not bypass2@275@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2250 | bypass2@275@01 | live]
; [else-branch: 2250 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2250 | bypass2@275@01]
(assert bypass2@275@01)
; [exec]
; tmp2 := _loop_measures_4
; [exec]
; tmp2_0 := Exception_res_2
; [exec]
; tmp2_1 := except2
; [exec]
; tmp2_2 := _err_0
; [exec]
; tmp2_3 := _loop_check_before_4
; [exec]
; tmp2_4 := break2
; [exec]
; oldbreak1 := break1
; [exec]
; oldbreak2 := break2
; [exec]
; oldexcept1 := except1
; [exec]
; oldexcept2 := except2
; [exec]
; idle1 := false
; [exec]
; idle2 := false
(declare-const p1_0@276@01 Bool)
(declare-const p2_0@277@01 Bool)
(declare-const idle1@278@01 Bool)
(declare-const idle2@279@01 Bool)
(declare-const _loop_measures@280@01 Seq<Measure$>)
(declare-const _loop_measures_4@281@01 Seq<Measure$>)
(declare-const p1_1@282@01 Bool)
(declare-const p2_1@283@01 Bool)
(declare-const p3@284@01 Bool)
(declare-const p4@285@01 Bool)
(declare-const p1_2@286@01 Bool)
(declare-const p2_2@287@01 Bool)
(declare-const p3_0@288@01 Bool)
(declare-const p4_0@289@01 Bool)
(declare-const tmp@290@01 $Ref)
(declare-const Exception_res@291@01 $Ref)
(declare-const Exception_res_2@292@01 $Ref)
(declare-const _err@293@01 $Ref)
(declare-const except1@294@01 Bool)
(declare-const _err_0@295@01 $Ref)
(declare-const except2@296@01 Bool)
(declare-const p1_3@297@01 Bool)
(declare-const p2_3@298@01 Bool)
(declare-const p3_1@299@01 Bool)
(declare-const p4_1@300@01 Bool)
(declare-const break1@301@01 Bool)
(declare-const break2@302@01 Bool)
(declare-const _loop_check_before@303@01 Bool)
(declare-const _loop_check_before_4@304@01 Bool)
(push) ; 9
; Loop head block: Check well-definedness of invariant
(declare-const $t@305@01 $Snap)
(assert (= $t@305@01 ($Snap.combine ($Snap.first $t@305@01) ($Snap.second $t@305@01))))
(assert (= ($Snap.first $t@305@01) $Snap.unit))
; [eval] p1 && !bypass1 ==> (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_162) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_162) && _residue_157 <= _residue_162)
; [eval] p1 && !bypass1
(push) ; 10
; [then-branch: 2251 | !(p1@16@01) | live]
; [else-branch: 2251 | p1@16@01 | live]
(push) ; 11
; [then-branch: 2251 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 11
(push) ; 11
; [else-branch: 2251 | p1@16@01]
; [eval] !bypass1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@274@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@274@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2252 | p1@16@01 && !(bypass1@274@01) | live]
; [else-branch: 2252 | !(p1@16@01 && !(bypass1@274@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 2252 | p1@16@01 && !(bypass1@274@01)]
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_162) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_162) && _residue_157 <= _residue_162)
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_162)
(push) ; 12
; [then-branch: 2253 | False | live]
; [else-branch: 2253 | True | live]
(push) ; 13
; [then-branch: 2253 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 2253 | True]
; [eval] (forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_162)
(push) ; 14
; [then-branch: 2254 | False | live]
; [else-branch: 2254 | True | live]
(push) ; 15
; [then-branch: 2254 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 2254 | True]
; [eval] _residue_157 <= _residue_162
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and p1@16@01 (not bypass1@274@01)))
(assert (=>
  (and p1@16@01 (not bypass1@274@01))
  (<= _residue_157@22@01 _residue_162@242@01)))
(assert (=
  ($Snap.second $t@305@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@305@01))
    ($Snap.second ($Snap.second $t@305@01)))))
(assert (= ($Snap.first ($Snap.second $t@305@01)) $Snap.unit))
; [eval] p2 && !bypass2 ==> (forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _residue_162_0) && ((forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _residue_162_0) && _residue_157_0 <= _residue_162_0)
; [eval] p2 && !bypass2
(push) ; 10
; [then-branch: 2255 | !(p2@17@01) | live]
; [else-branch: 2255 | p2@17@01 | live]
(push) ; 11
; [then-branch: 2255 | !(p2@17@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 2255 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@275@01)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2256 | p2@17@01 && !(bypass2@275@01) | dead]
; [else-branch: 2256 | !(p2@17@01 && !(bypass2@275@01)) | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 2256 | !(p2@17@01 && !(bypass2@275@01))]
(assert (not (and p2@17@01 (not bypass2@275@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (not (and p2@17@01 (not bypass2@275@01))))
(assert (=
  ($Snap.second ($Snap.second $t@305@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@305@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))
; [eval] p1 && !bypass1
(push) ; 10
; [then-branch: 2257 | !(p1@16@01) | live]
; [else-branch: 2257 | p1@16@01 | live]
(push) ; 11
; [then-branch: 2257 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 11
(push) ; 11
; [else-branch: 2257 | p1@16@01]
; [eval] !bypass1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@274@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@274@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2258 | p1@16@01 && !(bypass1@274@01) | live]
; [else-branch: 2258 | !(p1@16@01 && !(bypass1@274@01)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2258 | p1@16@01 && !(bypass1@274@01)]
(assert (and p1@16@01 (not bypass1@274@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@305@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@305@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))
; [eval] p2 && !bypass2
(push) ; 11
; [then-branch: 2259 | !(p2@17@01) | live]
; [else-branch: 2259 | p2@17@01 | live]
(push) ; 12
; [then-branch: 2259 | !(p2@17@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 2259 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 2260 | p2@17@01 && !(bypass2@275@01) | dead]
; [else-branch: 2260 | !(p2@17@01 && !(bypass2@275@01)) | live]
(push) ; 11
; [else-branch: 2260 | !(p2@17@01 && !(bypass2@275@01))]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@305@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))
  $Snap.unit))
; [eval] p1 && !bypass1 ==> issubtype(typeof(c_4.Container_value), int())
; [eval] p1 && !bypass1
(push) ; 12
; [then-branch: 2261 | !(p1@16@01) | live]
; [else-branch: 2261 | p1@16@01 | live]
(push) ; 13
; [then-branch: 2261 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 13
(push) ; 13
; [else-branch: 2261 | p1@16@01]
; [eval] !bypass1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@274@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@274@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2262 | p1@16@01 && !(bypass1@274@01) | live]
; [else-branch: 2262 | !(p1@16@01 && !(bypass1@274@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2262 | p1@16@01 && !(bypass1@274@01)]
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] issubtype(typeof(c_4.Container_value), int())
; [eval] typeof(c_4.Container_value)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1@16@01 (not bypass1@274@01)))
(assert (=>
  (and p1@16@01 (not bypass1@274@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@305@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))
  $Snap.unit))
; [eval] p2 && !bypass2 ==> issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] p2 && !bypass2
(push) ; 12
; [then-branch: 2263 | !(p2@17@01) | live]
; [else-branch: 2263 | p2@17@01 | live]
(push) ; 13
; [then-branch: 2263 | !(p2@17@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 2263 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 2264 | p2@17@01 && !(bypass2@275@01) | dead]
; [else-branch: 2264 | !(p2@17@01 && !(bypass2@275@01)) | live]
(push) ; 13
; [else-branch: 2264 | !(p2@17@01 && !(bypass2@275@01))]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))
  $Snap.unit))
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 12
; [then-branch: 2265 | !(p1@16@01) | live]
; [else-branch: 2265 | p1@16@01 | live]
(push) ; 13
; [then-branch: 2265 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 13
(push) ; 13
; [else-branch: 2265 | p1@16@01]
; [eval] !bypass1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@274@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@274@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2266 | p1@16@01 && !(bypass1@274@01) | live]
; [else-branch: 2266 | !(p1@16@01 && !(bypass1@274@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2266 | p1@16@01 && !(bypass1@274@01)]
(assert (and p1@16@01 (not bypass1@274@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1@16@01 (not bypass1@274@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))
  $Snap.unit))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 12
; [then-branch: 2267 | !(p2@17@01) | live]
; [else-branch: 2267 | p2@17@01 | live]
(push) ; 13
; [then-branch: 2267 | !(p2@17@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 2267 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 2268 | p2@17@01 && !(bypass2@275@01) | dead]
; [else-branch: 2268 | !(p2@17@01 && !(bypass2@275@01)) | live]
(push) ; 13
; [else-branch: 2268 | !(p2@17@01 && !(bypass2@275@01))]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))
  $Snap.unit))
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 12
; [then-branch: 2269 | !(p1@16@01) | live]
; [else-branch: 2269 | p1@16@01 | live]
(push) ; 13
; [then-branch: 2269 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 13
(push) ; 13
; [else-branch: 2269 | p1@16@01]
; [eval] !bypass1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@274@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@274@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2270 | p1@16@01 && !(bypass1@274@01) | live]
; [else-branch: 2270 | !(p1@16@01 && !(bypass1@274@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2270 | p1@16@01 && !(bypass1@274@01)]
(assert (and p1@16@01 (not bypass1@274@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1@16@01 (not bypass1@274@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))
  $Snap.unit))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 12
; [then-branch: 2271 | !(p2@17@01) | live]
; [else-branch: 2271 | p2@17@01 | live]
(push) ; 13
; [then-branch: 2271 | !(p2@17@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 2271 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 2272 | p2@17@01 && !(bypass2@275@01) | dead]
; [else-branch: 2272 | !(p2@17@01 && !(bypass2@275@01)) | live]
(push) ; 13
; [else-branch: 2272 | !(p2@17@01 && !(bypass2@275@01))]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))
  $Snap.unit))
; [eval] bypass1 ==> tmp1_1 == except1
(push) ; 12
; [then-branch: 2273 | bypass1@274@01 | dead]
; [else-branch: 2273 | !(bypass1@274@01) | live]
(push) ; 13
; [else-branch: 2273 | !(bypass1@274@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))
  $Snap.unit))
; [eval] bypass1 ==> tmp1_4 == break1
(push) ; 12
; [then-branch: 2274 | bypass1@274@01 | dead]
; [else-branch: 2274 | !(bypass1@274@01) | live]
(push) ; 13
; [else-branch: 2274 | !(bypass1@274@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))
  $Snap.unit))
; [eval] bypass1 ==> tmp1_0 == Exception_res
(push) ; 12
; [then-branch: 2275 | bypass1@274@01 | dead]
; [else-branch: 2275 | !(bypass1@274@01) | live]
(push) ; 13
; [else-branch: 2275 | !(bypass1@274@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))
  $Snap.unit))
; [eval] bypass1 ==> tmp1_2 == _err
(push) ; 12
; [then-branch: 2276 | bypass1@274@01 | dead]
; [else-branch: 2276 | !(bypass1@274@01) | live]
(push) ; 13
; [else-branch: 2276 | !(bypass1@274@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))
  $Snap.unit))
; [eval] bypass1 ==> tmp1_3 == _loop_check_before
(push) ; 12
; [then-branch: 2277 | bypass1@274@01 | dead]
; [else-branch: 2277 | !(bypass1@274@01) | live]
(push) ; 13
; [else-branch: 2277 | !(bypass1@274@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))
  $Snap.unit))
; [eval] bypass1 ==> tmp1 == _loop_measures
(push) ; 12
; [then-branch: 2278 | bypass1@274@01 | dead]
; [else-branch: 2278 | !(bypass1@274@01) | live]
(push) ; 13
; [else-branch: 2278 | !(bypass1@274@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))
  $Snap.unit))
; [eval] bypass2 ==> tmp2 == _loop_measures_4
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2279 | bypass2@275@01 | live]
; [else-branch: 2279 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2279 | bypass2@275@01]
; [eval] tmp2 == _loop_measures_4
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=> bypass2@275@01 (Seq_equal _loop_measures_4@235@01 _loop_measures_4@281@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))))
  $Snap.unit))
; [eval] bypass2 ==> tmp2_1 == except2
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2280 | bypass2@275@01 | live]
; [else-branch: 2280 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2280 | bypass2@275@01]
; [eval] tmp2_1 == except2
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=> bypass2@275@01 (= false except2@296@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))))
  $Snap.unit))
; [eval] bypass2 ==> tmp2_3 == _loop_check_before_4
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2281 | bypass2@275@01 | live]
; [else-branch: 2281 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2281 | bypass2@275@01]
; [eval] tmp2_3 == _loop_check_before_4
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=> bypass2@275@01 (= _loop_check_before_4@237@01 _loop_check_before_4@304@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2 ==> tmp2_4 == break2
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2282 | bypass2@275@01 | live]
; [else-branch: 2282 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2282 | bypass2@275@01]
; [eval] tmp2_4 == break2
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=> bypass2@275@01 (= false break2@302@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2 ==> tmp2_2 == _err_0
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2283 | bypass2@275@01 | live]
; [else-branch: 2283 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2283 | bypass2@275@01]
; [eval] tmp2_2 == _err_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=> bypass2@275@01 (= _err_0@31@01 _err_0@295@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2 ==> tmp2_0 == Exception_res_2
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2284 | bypass2@275@01 | live]
; [else-branch: 2284 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2284 | bypass2@275@01]
; [eval] tmp2_0 == Exception_res_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=> bypass2@275@01 (= Exception_res_2@245@01 Exception_res_2@292@01)))
(pop) ; 11
(pop) ; 10
(pop) ; 9
(push) ; 9
; Loop head block: Establish invariant
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 10
; [then-branch: 2285 | !(p1@16@01) | live]
; [else-branch: 2285 | p1@16@01 | live]
(push) ; 11
; [then-branch: 2285 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 11
(push) ; 11
; [else-branch: 2285 | p1@16@01]
(assert p1@16@01)
; [eval] !bypass1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@274@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@274@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2286 | p1@16@01 && !(bypass1@274@01) | live]
; [else-branch: 2286 | !(p1@16@01 && !(bypass1@274@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 2286 | p1@16@01 && !(bypass1@274@01)]
(assert (and p1@16@01 (not bypass1@274@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 10
; [then-branch: 2287 | !(p2@17@01) | live]
; [else-branch: 2287 | p2@17@01 | live]
(push) ; 11
; [then-branch: 2287 | !(p2@17@01)]
(pop) ; 11
(push) ; 11
; [else-branch: 2287 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@275@01)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2288 | p2@17@01 && !(bypass2@275@01) | dead]
; [else-branch: 2288 | !(p2@17@01 && !(bypass2@275@01)) | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 2288 | !(p2@17@01 && !(bypass2@275@01))]
(assert (not (and p2@17@01 (not bypass2@275@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (not (and p2@17@01 (not bypass2@275@01))))
; [eval] p1 && !bypass1
(push) ; 10
; [then-branch: 2289 | !(p1@16@01) | live]
; [else-branch: 2289 | p1@16@01 | live]
(push) ; 11
; [then-branch: 2289 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 11
(push) ; 11
; [else-branch: 2289 | p1@16@01]
; [eval] !bypass1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@274@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@274@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2290 | p1@16@01 && !(bypass1@274@01) | live]
; [else-branch: 2290 | !(p1@16@01 && !(bypass1@274@01)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2290 | p1@16@01 && !(bypass1@274@01)]
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] p2 && !bypass2
(push) ; 11
; [then-branch: 2291 | !(p2@17@01) | live]
; [else-branch: 2291 | p2@17@01 | live]
(push) ; 12
; [then-branch: 2291 | !(p2@17@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 2291 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 2292 | p2@17@01 && !(bypass2@275@01) | dead]
; [else-branch: 2292 | !(p2@17@01 && !(bypass2@275@01)) | live]
(push) ; 11
; [else-branch: 2292 | !(p2@17@01 && !(bypass2@275@01))]
; [eval] p1 && !bypass1 ==> issubtype(typeof(c_4.Container_value), int())
; [eval] p1 && !bypass1
(push) ; 12
; [then-branch: 2293 | !(p1@16@01) | live]
; [else-branch: 2293 | p1@16@01 | live]
(push) ; 13
; [then-branch: 2293 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 13
(push) ; 13
; [else-branch: 2293 | p1@16@01]
; [eval] !bypass1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@274@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@274@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2294 | p1@16@01 && !(bypass1@274@01) | live]
; [else-branch: 2294 | !(p1@16@01 && !(bypass1@274@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2294 | p1@16@01 && !(bypass1@274@01)]
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] issubtype(typeof(c_4.Container_value), int())
; [eval] typeof(c_4.Container_value)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1@16@01 (not bypass1@274@01)))
(push) ; 12
(assert (not (=>
  (and p1@16@01 (not bypass1@274@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@274@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) (as int<PyType>  PyType))))
; [eval] p2 && !bypass2 ==> issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] p2 && !bypass2
(push) ; 12
; [then-branch: 2295 | !(p2@17@01) | live]
; [else-branch: 2295 | p2@17@01 | live]
(push) ; 13
; [then-branch: 2295 | !(p2@17@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 2295 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 2296 | p2@17@01 && !(bypass2@275@01) | dead]
; [else-branch: 2296 | !(p2@17@01 && !(bypass2@275@01)) | live]
(push) ; 13
; [else-branch: 2296 | !(p2@17@01 && !(bypass2@275@01))]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1 && !bypass1 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] p1 && !bypass1
(push) ; 12
; [then-branch: 2297 | !(p1@16@01) | live]
; [else-branch: 2297 | p1@16@01 | live]
(push) ; 13
; [then-branch: 2297 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 13
(push) ; 13
; [else-branch: 2297 | p1@16@01]
; [eval] !bypass1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@274@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@274@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2298 | p1@16@01 && !(bypass1@274@01) | live]
; [else-branch: 2298 | !(p1@16@01 && !(bypass1@274@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2298 | p1@16@01 && !(bypass1@274@01)]
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] !idle1
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2299 | True | live]
; [else-branch: 2299 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2299 | True]
; [eval] _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2300 | True | live]
; [else-branch: 2300 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2300 | True]
; [eval] _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 18
; [then-branch: 2301 | False | live]
; [else-branch: 2301 | True | live]
(push) ; 19
; [then-branch: 2301 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 2301 | True]
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 20
; [then-branch: 2302 | False | live]
; [else-branch: 2302 | True | live]
(push) ; 21
; [then-branch: 2302 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 2302 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 22
; [then-branch: 2303 | False | live]
; [else-branch: 2303 | True | live]
(push) ; 23
; [then-branch: 2303 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 2303 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 24
; [then-branch: 2304 | False | live]
; [else-branch: 2304 | True | live]
(push) ; 25
; [then-branch: 2304 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 2304 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 26
; [then-branch: 2305 | False | live]
; [else-branch: 2305 | True | live]
(push) ; 27
; [then-branch: 2305 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 2305 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] p2 && !bypass2
(push) ; 12
; [then-branch: 2306 | !(p2@17@01) | live]
; [else-branch: 2306 | p2@17@01 | live]
(push) ; 13
; [then-branch: 2306 | !(p2@17@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 2306 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 2307 | p2@17@01 && !(bypass2@275@01) | dead]
; [else-branch: 2307 | !(p2@17@01 && !(bypass2@275@01)) | live]
(push) ; 13
; [else-branch: 2307 | !(p2@17@01 && !(bypass2@275@01))]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1 && !bypass1 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] p1 && !bypass1
(push) ; 12
; [then-branch: 2308 | !(p1@16@01) | live]
; [else-branch: 2308 | p1@16@01 | live]
(push) ; 13
; [then-branch: 2308 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 13
(push) ; 13
; [else-branch: 2308 | p1@16@01]
; [eval] !bypass1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@274@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@274@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2309 | p1@16@01 && !(bypass1@274@01) | live]
; [else-branch: 2309 | !(p1@16@01 && !(bypass1@274@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2309 | p1@16@01 && !(bypass1@274@01)]
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2310 | True | live]
; [else-branch: 2310 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2310 | True]
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 16
; [then-branch: 2311 | False | dead]
; [else-branch: 2311 | True | live]
(push) ; 17
; [else-branch: 2311 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] p2 && !bypass2
(push) ; 12
; [then-branch: 2312 | !(p2@17@01) | live]
; [else-branch: 2312 | p2@17@01 | live]
(push) ; 13
; [then-branch: 2312 | !(p2@17@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 2312 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 2313 | p2@17@01 && !(bypass2@275@01) | dead]
; [else-branch: 2313 | !(p2@17@01 && !(bypass2@275@01)) | live]
(push) ; 13
; [else-branch: 2313 | !(p2@17@01 && !(bypass2@275@01))]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1 ==> tmp1_1 == except1
(push) ; 12
; [then-branch: 2314 | bypass1@274@01 | dead]
; [else-branch: 2314 | !(bypass1@274@01) | live]
(push) ; 13
; [else-branch: 2314 | !(bypass1@274@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1 ==> tmp1_4 == break1
(push) ; 12
; [then-branch: 2315 | bypass1@274@01 | dead]
; [else-branch: 2315 | !(bypass1@274@01) | live]
(push) ; 13
; [else-branch: 2315 | !(bypass1@274@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1 ==> tmp1_0 == Exception_res
(push) ; 12
; [then-branch: 2316 | bypass1@274@01 | dead]
; [else-branch: 2316 | !(bypass1@274@01) | live]
(push) ; 13
; [else-branch: 2316 | !(bypass1@274@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1 ==> tmp1_2 == _err
(push) ; 12
; [then-branch: 2317 | bypass1@274@01 | dead]
; [else-branch: 2317 | !(bypass1@274@01) | live]
(push) ; 13
; [else-branch: 2317 | !(bypass1@274@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1 ==> tmp1_3 == _loop_check_before
(push) ; 12
; [then-branch: 2318 | bypass1@274@01 | dead]
; [else-branch: 2318 | !(bypass1@274@01) | live]
(push) ; 13
; [else-branch: 2318 | !(bypass1@274@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1 ==> tmp1 == _loop_measures
(push) ; 12
; [then-branch: 2319 | bypass1@274@01 | dead]
; [else-branch: 2319 | !(bypass1@274@01) | live]
(push) ; 13
; [else-branch: 2319 | !(bypass1@274@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2 ==> tmp2 == _loop_measures_4
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2320 | bypass2@275@01 | live]
; [else-branch: 2320 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2320 | bypass2@275@01]
; [eval] tmp2 == _loop_measures_4
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2 ==> tmp2_1 == except2
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2321 | bypass2@275@01 | live]
; [else-branch: 2321 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2321 | bypass2@275@01]
; [eval] tmp2_1 == except2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2 ==> tmp2_3 == _loop_check_before_4
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2322 | bypass2@275@01 | live]
; [else-branch: 2322 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2322 | bypass2@275@01]
; [eval] tmp2_3 == _loop_check_before_4
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2 ==> tmp2_4 == break2
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2323 | bypass2@275@01 | live]
; [else-branch: 2323 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2323 | bypass2@275@01]
; [eval] tmp2_4 == break2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2 ==> tmp2_2 == _err_0
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2324 | bypass2@275@01 | live]
; [else-branch: 2324 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2324 | bypass2@275@01]
; [eval] tmp2_2 == _err_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2 ==> tmp2_0 == Exception_res_2
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2325 | bypass2@275@01 | live]
; [else-branch: 2325 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2325 | bypass2@275@01]
; [eval] tmp2_0 == Exception_res_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 12
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@305@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))
  $Snap.unit))
(assert (=>
  (and p1@16@01 (not bypass1@274@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@305@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))
  $Snap.unit))
(assert (=> bypass2@275@01 (Seq_equal _loop_measures_4@235@01 _loop_measures_4@281@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))))
  $Snap.unit))
(assert (=> bypass2@275@01 (= false except2@296@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))))
  $Snap.unit))
(assert (=> bypass2@275@01 (= _loop_check_before_4@237@01 _loop_check_before_4@304@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))))))
  $Snap.unit))
(assert (=> bypass2@275@01 (= false break2@302@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))))))
  $Snap.unit))
(assert (=> bypass2@275@01 (= _err_0@31@01 _err_0@295@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))))))))))))))))
  $Snap.unit))
(assert (=> bypass2@275@01 (= Exception_res_2@245@01 Exception_res_2@292@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@305@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@305@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@305@01)))))))
(assert (= $t@305@01 ($Snap.combine ($Snap.first $t@305@01) ($Snap.second $t@305@01))))
(assert (= ($Snap.first $t@305@01) $Snap.unit))
(assert (=>
  (and p1@16@01 (not bypass1@274@01))
  (<= _residue_157@22@01 _residue_162@242@01)))
(assert (=
  ($Snap.second $t@305@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@305@01))
    ($Snap.second ($Snap.second $t@305@01)))))
(assert (= ($Snap.first ($Snap.second $t@305@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@305@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@305@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 13
; [eval] p1 && (!break1 && !except1 && (!bypass1 && true)) || p2 && (!break2 && !except2 && (!bypass2 && true))
; [eval] p1 && (!break1 && !except1 && (!bypass1 && true))
(push) ; 14
; [then-branch: 2326 | !(p1@16@01) | live]
; [else-branch: 2326 | p1@16@01 | live]
(push) ; 15
; [then-branch: 2326 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 15
(push) ; 15
; [else-branch: 2326 | p1@16@01]
; [eval] !break1
(push) ; 16
; [then-branch: 2327 | break1@301@01 | live]
; [else-branch: 2327 | !(break1@301@01) | live]
(push) ; 17
; [then-branch: 2327 | break1@301@01]
(assert break1@301@01)
(pop) ; 17
(push) ; 17
; [else-branch: 2327 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(push) ; 18
; [then-branch: 2328 | except1@294@01 | live]
; [else-branch: 2328 | !(except1@294@01) | live]
(push) ; 19
; [then-branch: 2328 | except1@294@01]
(assert except1@294@01)
(pop) ; 19
(push) ; 19
; [else-branch: 2328 | !(except1@294@01)]
(assert (not except1@294@01))
; [eval] !bypass1
(push) ; 20
; [then-branch: 2329 | bypass1@274@01 | live]
; [else-branch: 2329 | !(bypass1@274@01) | live]
(push) ; 21
; [then-branch: 2329 | bypass1@274@01]
(assert bypass1@274@01)
(pop) ; 21
(push) ; 21
; [else-branch: 2329 | !(bypass1@274@01)]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1@274@01) bypass1@274@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1@294@01)
  (and (not except1@294@01) (or (not bypass1@274@01) bypass1@274@01))))
(assert (or (not except1@294@01) except1@294@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@301@01)
  (and
    (not break1@301@01)
    (=>
      (not except1@294@01)
      (and (not except1@294@01) (or (not bypass1@274@01) bypass1@274@01)))
    (or (not except1@294@01) except1@294@01))))
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@16@01
  (and
    (=>
      (not break1@301@01)
      (and
        (not break1@301@01)
        (=>
          (not except1@294@01)
          (and (not except1@294@01) (or (not bypass1@274@01) bypass1@274@01)))
        (or (not except1@294@01) except1@294@01)))
    (or (not break1@301@01) break1@301@01))))
(push) ; 14
; [then-branch: 2330 | p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01) | live]
; [else-branch: 2330 | !(p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01)) | live]
(push) ; 15
; [then-branch: 2330 | p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01)]
(assert (and
  p1@16@01
  (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01)))))
(pop) ; 15
(push) ; 15
; [else-branch: 2330 | !(p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01))]
(assert (not
  (and
    p1@16@01
    (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01))))))
; [eval] p2 && (!break2 && !except2 && (!bypass2 && true))
(push) ; 16
; [then-branch: 2331 | !(p2@17@01) | live]
; [else-branch: 2331 | p2@17@01 | live]
(push) ; 17
; [then-branch: 2331 | !(p2@17@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 2331 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 18
; [then-branch: 2332 | break2@302@01 | live]
; [else-branch: 2332 | !(break2@302@01) | live]
(push) ; 19
; [then-branch: 2332 | break2@302@01]
(assert break2@302@01)
(pop) ; 19
(push) ; 19
; [else-branch: 2332 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(push) ; 20
; [then-branch: 2333 | except2@296@01 | live]
; [else-branch: 2333 | !(except2@296@01) | live]
(push) ; 21
; [then-branch: 2333 | except2@296@01]
(assert except2@296@01)
(pop) ; 21
(push) ; 21
; [else-branch: 2333 | !(except2@296@01)]
(assert (not except2@296@01))
; [eval] !bypass2
(push) ; 22
; [then-branch: 2334 | bypass2@275@01 | live]
; [else-branch: 2334 | !(bypass2@275@01) | live]
(push) ; 23
; [then-branch: 2334 | bypass2@275@01]
(pop) ; 23
(push) ; 23
; [else-branch: 2334 | !(bypass2@275@01)]
(assert (not bypass2@275@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2@275@01) bypass2@275@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2@296@01)
  (and (not except2@296@01) (or (not bypass2@275@01) bypass2@275@01))))
(assert (or (not except2@296@01) except2@296@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@302@01)
  (and
    (not break2@302@01)
    (=>
      (not except2@296@01)
      (and (not except2@296@01) (or (not bypass2@275@01) bypass2@275@01)))
    (or (not except2@296@01) except2@296@01))))
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@17@01
  (and
    p2@17@01
    (=>
      (not break2@302@01)
      (and
        (not break2@302@01)
        (=>
          (not except2@296@01)
          (and (not except2@296@01) (or (not bypass2@275@01) bypass2@275@01)))
        (or (not except2@296@01) except2@296@01)))
    (or (not break2@302@01) break2@302@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (and
    p1@16@01
    (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01))))
  (and p1@16@01 (not break1@301@01) (not except1@294@01) (not bypass1@274@01))))
; Joined path conditions
(assert (=>
  (not
    (and
      p1@16@01
      (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01)))))
  (and
    (not
      (and
        p1@16@01
        (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01)))))
    (=>
      p2@17@01
      (and
        p2@17@01
        (=>
          (not break2@302@01)
          (and
            (not break2@302@01)
            (=>
              (not except2@296@01)
              (and (not except2@296@01) (or (not bypass2@275@01) bypass2@275@01)))
            (or (not except2@296@01) except2@296@01)))
        (or (not break2@302@01) break2@302@01))))))
(assert (or
  (not
    (and
      p1@16@01
      (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01)))))
  (and
    p1@16@01
    (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01))))))
(pop) ; 13
(push) ; 13
; [eval] !(p1 && (!break1 && !except1 && (!bypass1 && true)) || p2 && (!break2 && !except2 && (!bypass2 && true)))
; [eval] p1 && (!break1 && !except1 && (!bypass1 && true)) || p2 && (!break2 && !except2 && (!bypass2 && true))
; [eval] p1 && (!break1 && !except1 && (!bypass1 && true))
(push) ; 14
; [then-branch: 2335 | !(p1@16@01) | live]
; [else-branch: 2335 | p1@16@01 | live]
(push) ; 15
; [then-branch: 2335 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 15
(push) ; 15
; [else-branch: 2335 | p1@16@01]
(assert p1@16@01)
; [eval] !break1
(push) ; 16
; [then-branch: 2336 | break1@301@01 | live]
; [else-branch: 2336 | !(break1@301@01) | live]
(push) ; 17
; [then-branch: 2336 | break1@301@01]
(assert break1@301@01)
(pop) ; 17
(push) ; 17
; [else-branch: 2336 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(push) ; 18
; [then-branch: 2337 | except1@294@01 | live]
; [else-branch: 2337 | !(except1@294@01) | live]
(push) ; 19
; [then-branch: 2337 | except1@294@01]
(assert except1@294@01)
(pop) ; 19
(push) ; 19
; [else-branch: 2337 | !(except1@294@01)]
(assert (not except1@294@01))
; [eval] !bypass1
(push) ; 20
; [then-branch: 2338 | bypass1@274@01 | live]
; [else-branch: 2338 | !(bypass1@274@01) | live]
(push) ; 21
; [then-branch: 2338 | bypass1@274@01]
(assert bypass1@274@01)
(pop) ; 21
(push) ; 21
; [else-branch: 2338 | !(bypass1@274@01)]
(assert (not bypass1@274@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1@274@01) bypass1@274@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1@294@01)
  (and (not except1@294@01) (or (not bypass1@274@01) bypass1@274@01))))
(assert (or (not except1@294@01) except1@294@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@301@01)
  (and
    (not break1@301@01)
    (=>
      (not except1@294@01)
      (and (not except1@294@01) (or (not bypass1@274@01) bypass1@274@01)))
    (or (not except1@294@01) except1@294@01))))
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@16@01
  (and
    p1@16@01
    (=>
      (not break1@301@01)
      (and
        (not break1@301@01)
        (=>
          (not except1@294@01)
          (and (not except1@294@01) (or (not bypass1@274@01) bypass1@274@01)))
        (or (not except1@294@01) except1@294@01)))
    (or (not break1@301@01) break1@301@01))))
(push) ; 14
; [then-branch: 2339 | p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01) | live]
; [else-branch: 2339 | !(p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01)) | live]
(push) ; 15
; [then-branch: 2339 | p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01)]
(assert (and
  p1@16@01
  (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01)))))
(pop) ; 15
(push) ; 15
; [else-branch: 2339 | !(p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01))]
(assert (not
  (and
    p1@16@01
    (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01))))))
; [eval] p2 && (!break2 && !except2 && (!bypass2 && true))
(push) ; 16
; [then-branch: 2340 | !(p2@17@01) | live]
; [else-branch: 2340 | p2@17@01 | live]
(push) ; 17
; [then-branch: 2340 | !(p2@17@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 2340 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 18
; [then-branch: 2341 | break2@302@01 | live]
; [else-branch: 2341 | !(break2@302@01) | live]
(push) ; 19
; [then-branch: 2341 | break2@302@01]
(assert break2@302@01)
(pop) ; 19
(push) ; 19
; [else-branch: 2341 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(push) ; 20
; [then-branch: 2342 | except2@296@01 | live]
; [else-branch: 2342 | !(except2@296@01) | live]
(push) ; 21
; [then-branch: 2342 | except2@296@01]
(assert except2@296@01)
(pop) ; 21
(push) ; 21
; [else-branch: 2342 | !(except2@296@01)]
(assert (not except2@296@01))
; [eval] !bypass2
(push) ; 22
; [then-branch: 2343 | bypass2@275@01 | live]
; [else-branch: 2343 | !(bypass2@275@01) | live]
(push) ; 23
; [then-branch: 2343 | bypass2@275@01]
(pop) ; 23
(push) ; 23
; [else-branch: 2343 | !(bypass2@275@01)]
(assert (not bypass2@275@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2@275@01) bypass2@275@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2@296@01)
  (and (not except2@296@01) (or (not bypass2@275@01) bypass2@275@01))))
(assert (or (not except2@296@01) except2@296@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@302@01)
  (and
    (not break2@302@01)
    (=>
      (not except2@296@01)
      (and (not except2@296@01) (or (not bypass2@275@01) bypass2@275@01)))
    (or (not except2@296@01) except2@296@01))))
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@17@01
  (and
    p2@17@01
    (=>
      (not break2@302@01)
      (and
        (not break2@302@01)
        (=>
          (not except2@296@01)
          (and (not except2@296@01) (or (not bypass2@275@01) bypass2@275@01)))
        (or (not except2@296@01) except2@296@01)))
    (or (not break2@302@01) break2@302@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (and
    p1@16@01
    (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01))))
  (and p1@16@01 (not break1@301@01) (not except1@294@01) (not bypass1@274@01))))
; Joined path conditions
(assert (=>
  (not
    (and
      p1@16@01
      (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01)))))
  (and
    (not
      (and
        p1@16@01
        (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01)))))
    (=>
      p2@17@01
      (and
        p2@17@01
        (=>
          (not break2@302@01)
          (and
            (not break2@302@01)
            (=>
              (not except2@296@01)
              (and (not except2@296@01) (or (not bypass2@275@01) bypass2@275@01)))
            (or (not except2@296@01) except2@296@01)))
        (or (not break2@302@01) break2@302@01))))))
(assert (or
  (not
    (and
      p1@16@01
      (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01)))))
  (and
    p1@16@01
    (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01))))))
(pop) ; 13
; Loop head block: Follow loop-internal edges
; [eval] p1 && (!break1 && !except1 && (!bypass1 && true)) || p2 && (!break2 && !except2 && (!bypass2 && true))
; [eval] p1 && (!break1 && !except1 && (!bypass1 && true))
(push) ; 13
; [then-branch: 2344 | !(p1@16@01) | live]
; [else-branch: 2344 | p1@16@01 | live]
(push) ; 14
; [then-branch: 2344 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 14
(push) ; 14
; [else-branch: 2344 | p1@16@01]
(assert p1@16@01)
; [eval] !break1
(push) ; 15
; [then-branch: 2345 | break1@301@01 | live]
; [else-branch: 2345 | !(break1@301@01) | live]
(push) ; 16
; [then-branch: 2345 | break1@301@01]
(assert break1@301@01)
(pop) ; 16
(push) ; 16
; [else-branch: 2345 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(push) ; 17
; [then-branch: 2346 | except1@294@01 | live]
; [else-branch: 2346 | !(except1@294@01) | live]
(push) ; 18
; [then-branch: 2346 | except1@294@01]
(assert except1@294@01)
(pop) ; 18
(push) ; 18
; [else-branch: 2346 | !(except1@294@01)]
(assert (not except1@294@01))
; [eval] !bypass1
(push) ; 19
; [then-branch: 2347 | bypass1@274@01 | live]
; [else-branch: 2347 | !(bypass1@274@01) | live]
(push) ; 20
; [then-branch: 2347 | bypass1@274@01]
(assert bypass1@274@01)
(pop) ; 20
(push) ; 20
; [else-branch: 2347 | !(bypass1@274@01)]
(assert (not bypass1@274@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1@274@01) bypass1@274@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1@294@01)
  (and (not except1@294@01) (or (not bypass1@274@01) bypass1@274@01))))
(assert (or (not except1@294@01) except1@294@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@301@01)
  (and
    (not break1@301@01)
    (=>
      (not except1@294@01)
      (and (not except1@294@01) (or (not bypass1@274@01) bypass1@274@01)))
    (or (not except1@294@01) except1@294@01))))
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@16@01
  (and
    p1@16@01
    (=>
      (not break1@301@01)
      (and
        (not break1@301@01)
        (=>
          (not except1@294@01)
          (and (not except1@294@01) (or (not bypass1@274@01) bypass1@274@01)))
        (or (not except1@294@01) except1@294@01)))
    (or (not break1@301@01) break1@301@01))))
(push) ; 13
; [then-branch: 2348 | p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01) | live]
; [else-branch: 2348 | !(p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01)) | live]
(push) ; 14
; [then-branch: 2348 | p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01)]
(assert (and
  p1@16@01
  (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01)))))
(pop) ; 14
(push) ; 14
; [else-branch: 2348 | !(p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01))]
(assert (not
  (and
    p1@16@01
    (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01))))))
; [eval] p2 && (!break2 && !except2 && (!bypass2 && true))
(push) ; 15
; [then-branch: 2349 | !(p2@17@01) | live]
; [else-branch: 2349 | p2@17@01 | live]
(push) ; 16
; [then-branch: 2349 | !(p2@17@01)]
(pop) ; 16
(push) ; 16
; [else-branch: 2349 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 17
; [then-branch: 2350 | break2@302@01 | live]
; [else-branch: 2350 | !(break2@302@01) | live]
(push) ; 18
; [then-branch: 2350 | break2@302@01]
(assert break2@302@01)
(pop) ; 18
(push) ; 18
; [else-branch: 2350 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(push) ; 19
; [then-branch: 2351 | except2@296@01 | live]
; [else-branch: 2351 | !(except2@296@01) | live]
(push) ; 20
; [then-branch: 2351 | except2@296@01]
(assert except2@296@01)
(pop) ; 20
(push) ; 20
; [else-branch: 2351 | !(except2@296@01)]
(assert (not except2@296@01))
; [eval] !bypass2
(push) ; 21
; [then-branch: 2352 | bypass2@275@01 | live]
; [else-branch: 2352 | !(bypass2@275@01) | live]
(push) ; 22
; [then-branch: 2352 | bypass2@275@01]
(pop) ; 22
(push) ; 22
; [else-branch: 2352 | !(bypass2@275@01)]
(assert (not bypass2@275@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2@275@01) bypass2@275@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2@296@01)
  (and (not except2@296@01) (or (not bypass2@275@01) bypass2@275@01))))
(assert (or (not except2@296@01) except2@296@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@302@01)
  (and
    (not break2@302@01)
    (=>
      (not except2@296@01)
      (and (not except2@296@01) (or (not bypass2@275@01) bypass2@275@01)))
    (or (not except2@296@01) except2@296@01))))
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@17@01
  (and
    p2@17@01
    (=>
      (not break2@302@01)
      (and
        (not break2@302@01)
        (=>
          (not except2@296@01)
          (and (not except2@296@01) (or (not bypass2@275@01) bypass2@275@01)))
        (or (not except2@296@01) except2@296@01)))
    (or (not break2@302@01) break2@302@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and
    p1@16@01
    (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01))))
  (and p1@16@01 (not break1@301@01) (not except1@294@01) (not bypass1@274@01))))
; Joined path conditions
(assert (=>
  (not
    (and
      p1@16@01
      (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01)))))
  (and
    (not
      (and
        p1@16@01
        (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01)))))
    (=>
      p2@17@01
      (and
        p2@17@01
        (=>
          (not break2@302@01)
          (and
            (not break2@302@01)
            (=>
              (not except2@296@01)
              (and (not except2@296@01) (or (not bypass2@275@01) bypass2@275@01)))
            (or (not except2@296@01) except2@296@01)))
        (or (not break2@302@01) break2@302@01))))))
(assert (or
  (not
    (and
      p1@16@01
      (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01)))))
  (and
    p1@16@01
    (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01))))))
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (or
    (and
      p1@16@01
      (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01))))
    (and
      p2@17@01
      (and (not break2@302@01) (and (not except2@296@01) (not bypass2@275@01))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (or
  (and
    p1@16@01
    (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01))))
  (and
    p2@17@01
    (and (not break2@302@01) (and (not except2@296@01) (not bypass2@275@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2353 | p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01) || p2@17@01 && !(break2@302@01) && !(except2@296@01) && !(bypass2@275@01) | live]
; [else-branch: 2353 | !(p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01) || p2@17@01 && !(break2@302@01) && !(except2@296@01) && !(bypass2@275@01)) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2353 | p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01) || p2@17@01 && !(break2@302@01) && !(except2@296@01) && !(bypass2@275@01)]
(assert (or
  (and
    p1@16@01
    (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01))))
  (and
    p2@17@01
    (and (not break2@302@01) (and (not except2@296@01) (not bypass2@275@01))))))
; [exec]
; var p1_1: Bool
(declare-const p1_1@306@01 Bool)
; [exec]
; var p2_1: Bool
(declare-const p2_1@307@01 Bool)
; [exec]
; var p3: Bool
(declare-const p3@308@01 Bool)
; [exec]
; var p4: Bool
(declare-const p4@309@01 Bool)
; [exec]
; var p1_2: Bool
(declare-const p1_2@310@01 Bool)
; [exec]
; var p2_2: Bool
(declare-const p2_2@311@01 Bool)
; [exec]
; var p3_0: Bool
(declare-const p3_0@312@01 Bool)
; [exec]
; var p4_0: Bool
(declare-const p4_0@313@01 Bool)
; [exec]
; var tmp: Ref
(declare-const tmp@314@01 $Ref)
; [exec]
; var p1_3: Bool
(declare-const p1_3@315@01 Bool)
; [exec]
; var p2_3: Bool
(declare-const p2_3@316@01 Bool)
; [exec]
; var p3_1: Bool
(declare-const p3_1@317@01 Bool)
; [exec]
; var p4_1: Bool
(declare-const p4_1@318@01 Bool)
; [exec]
; p1_0 := p1 && (!break1 && !except1 && true)
; [eval] p1 && (!break1 && !except1 && true)
(push) ; 14
; [then-branch: 2354 | !(p1@16@01) | live]
; [else-branch: 2354 | p1@16@01 | live]
(push) ; 15
; [then-branch: 2354 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 15
(push) ; 15
; [else-branch: 2354 | p1@16@01]
(assert p1@16@01)
; [eval] !break1
(push) ; 16
; [then-branch: 2355 | break1@301@01 | live]
; [else-branch: 2355 | !(break1@301@01) | live]
(push) ; 17
; [then-branch: 2355 | break1@301@01]
(assert break1@301@01)
(pop) ; 17
(push) ; 17
; [else-branch: 2355 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(push) ; 18
; [then-branch: 2356 | except1@294@01 | live]
; [else-branch: 2356 | !(except1@294@01) | live]
(push) ; 19
; [then-branch: 2356 | except1@294@01]
(assert except1@294@01)
(pop) ; 19
(push) ; 19
; [else-branch: 2356 | !(except1@294@01)]
(assert (not except1@294@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not except1@294@01) except1@294@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@301@01)
  (and (not break1@301@01) (or (not except1@294@01) except1@294@01))))
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@16@01
  (and
    p1@16@01
    (=>
      (not break1@301@01)
      (and (not break1@301@01) (or (not except1@294@01) except1@294@01)))
    (or (not break1@301@01) break1@301@01))))
(declare-const p1_0@319@01 Bool)
(assert (= p1_0@319@01 (and p1@16@01 (and (not break1@301@01) (not except1@294@01)))))
; [exec]
; p2_0 := p2 && (!break2 && !except2 && true)
; [eval] p2 && (!break2 && !except2 && true)
(push) ; 14
; [then-branch: 2357 | !(p2@17@01) | live]
; [else-branch: 2357 | p2@17@01 | live]
(push) ; 15
; [then-branch: 2357 | !(p2@17@01)]
(pop) ; 15
(push) ; 15
; [else-branch: 2357 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 16
; [then-branch: 2358 | break2@302@01 | live]
; [else-branch: 2358 | !(break2@302@01) | live]
(push) ; 17
; [then-branch: 2358 | break2@302@01]
(assert break2@302@01)
(pop) ; 17
(push) ; 17
; [else-branch: 2358 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(push) ; 18
; [then-branch: 2359 | except2@296@01 | live]
; [else-branch: 2359 | !(except2@296@01) | live]
(push) ; 19
; [then-branch: 2359 | except2@296@01]
(assert except2@296@01)
(pop) ; 19
(push) ; 19
; [else-branch: 2359 | !(except2@296@01)]
(assert (not except2@296@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not except2@296@01) except2@296@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@302@01)
  (and (not break2@302@01) (or (not except2@296@01) except2@296@01))))
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@17@01
  (and
    p2@17@01
    (=>
      (not break2@302@01)
      (and (not break2@302@01) (or (not except2@296@01) except2@296@01)))
    (or (not break2@302@01) break2@302@01))))
(declare-const p2_0@320@01 Bool)
(assert (= p2_0@320@01 (and p2@17@01 (and (not break2@302@01) (not except2@296@01)))))
; [exec]
; idle1 := p1 && (!break1 && !except1 && !true)
; [eval] p1 && (!break1 && !except1 && !true)
(push) ; 14
; [then-branch: 2360 | !(p1@16@01) | live]
; [else-branch: 2360 | p1@16@01 | live]
(push) ; 15
; [then-branch: 2360 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 15
(push) ; 15
; [else-branch: 2360 | p1@16@01]
(assert p1@16@01)
; [eval] !break1
(push) ; 16
; [then-branch: 2361 | break1@301@01 | live]
; [else-branch: 2361 | !(break1@301@01) | live]
(push) ; 17
; [then-branch: 2361 | break1@301@01]
(assert break1@301@01)
(pop) ; 17
(push) ; 17
; [else-branch: 2361 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(push) ; 18
; [then-branch: 2362 | except1@294@01 | live]
; [else-branch: 2362 | !(except1@294@01) | live]
(push) ; 19
; [then-branch: 2362 | except1@294@01]
(assert except1@294@01)
(pop) ; 19
(push) ; 19
; [else-branch: 2362 | !(except1@294@01)]
(assert (not except1@294@01))
; [eval] !true
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not except1@294@01) except1@294@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@301@01)
  (and (not break1@301@01) (or (not except1@294@01) except1@294@01))))
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [exec]
; idle2 := p2 && (!break2 && !except2 && !true)
; [eval] p2 && (!break2 && !except2 && !true)
(push) ; 14
; [then-branch: 2363 | !(p2@17@01) | live]
; [else-branch: 2363 | p2@17@01 | live]
(push) ; 15
; [then-branch: 2363 | !(p2@17@01)]
(pop) ; 15
(push) ; 15
; [else-branch: 2363 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 16
; [then-branch: 2364 | break2@302@01 | live]
; [else-branch: 2364 | !(break2@302@01) | live]
(push) ; 17
; [then-branch: 2364 | break2@302@01]
(assert break2@302@01)
(pop) ; 17
(push) ; 17
; [else-branch: 2364 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(push) ; 18
; [then-branch: 2365 | except2@296@01 | live]
; [else-branch: 2365 | !(except2@296@01) | live]
(push) ; 19
; [then-branch: 2365 | except2@296@01]
(assert except2@296@01)
(pop) ; 19
(push) ; 19
; [else-branch: 2365 | !(except2@296@01)]
(assert (not except2@296@01))
; [eval] !true
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not except2@296@01) except2@296@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@302@01)
  (and (not break2@302@01) (or (not except2@296@01) except2@296@01))))
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [eval] p1_0 && (!break1 && !except1)
(push) ; 14
; [then-branch: 2366 | !(p1_0@319@01) | live]
; [else-branch: 2366 | p1_0@319@01 | live]
(push) ; 15
; [then-branch: 2366 | !(p1_0@319@01)]
(assert (not p1_0@319@01))
(pop) ; 15
(push) ; 15
; [else-branch: 2366 | p1_0@319@01]
(assert p1_0@319@01)
; [eval] !break1
(push) ; 16
; [then-branch: 2367 | break1@301@01 | live]
; [else-branch: 2367 | !(break1@301@01) | live]
(push) ; 17
; [then-branch: 2367 | break1@301@01]
(assert break1@301@01)
(pop) ; 17
(push) ; 17
; [else-branch: 2367 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=> p1_0@319@01 (and p1_0@319@01 (or (not break1@301@01) break1@301@01))))
(assert (or p1_0@319@01 (not p1_0@319@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (not (and p1_0@319@01 (and (not break1@301@01) (not except1@294@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and p1_0@319@01 (and (not break1@301@01) (not except1@294@01)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2368 | p1_0@319@01 && !(break1@301@01) && !(except1@294@01) | live]
; [else-branch: 2368 | !(p1_0@319@01 && !(break1@301@01) && !(except1@294@01)) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2368 | p1_0@319@01 && !(break1@301@01) && !(except1@294@01)]
(assert (and p1_0@319@01 (and (not break1@301@01) (not except1@294@01))))
; [exec]
; _loop_measures := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [eval] p2_0 && (!break2 && !except2)
(push) ; 15
; [then-branch: 2369 | !(p2_0@320@01) | live]
; [else-branch: 2369 | p2_0@320@01 | live]
(push) ; 16
; [then-branch: 2369 | !(p2_0@320@01)]
(assert (not p2_0@320@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2369 | p2_0@320@01]
(assert p2_0@320@01)
; [eval] !break2
(push) ; 17
; [then-branch: 2370 | break2@302@01 | live]
; [else-branch: 2370 | !(break2@302@01) | live]
(push) ; 18
; [then-branch: 2370 | break2@302@01]
(assert break2@302@01)
(pop) ; 18
(push) ; 18
; [else-branch: 2370 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=> p2_0@320@01 (and p2_0@320@01 (or (not break2@302@01) break2@302@01))))
(assert (or p2_0@320@01 (not p2_0@320@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and p2_0@320@01 (and (not break2@302@01) (not except2@296@01))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2371 | p2_0@320@01 && !(break2@302@01) && !(except2@296@01) | dead]
; [else-branch: 2371 | !(p2_0@320@01 && !(break2@302@01) && !(except2@296@01)) | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 2371 | !(p2_0@320@01 && !(break2@302@01) && !(except2@296@01))]
(assert (not (and p2_0@320@01 (and (not break2@302@01) (not except2@296@01)))))
(pop) ; 15
; [eval] !(p2_0 && (!break2 && !except2))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 15
; [then-branch: 2372 | !(p2_0@320@01) | live]
; [else-branch: 2372 | p2_0@320@01 | live]
(push) ; 16
; [then-branch: 2372 | !(p2_0@320@01)]
(assert (not p2_0@320@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2372 | p2_0@320@01]
(assert p2_0@320@01)
; [eval] !break2
(push) ; 17
; [then-branch: 2373 | break2@302@01 | live]
; [else-branch: 2373 | !(break2@302@01) | live]
(push) ; 18
; [then-branch: 2373 | break2@302@01]
(assert break2@302@01)
(pop) ; 18
(push) ; 18
; [else-branch: 2373 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (and p2_0@320@01 (and (not break2@302@01) (not except2@296@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and p2_0@320@01 (and (not break2@302@01) (not except2@296@01))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2374 | !(p2_0@320@01 && !(break2@302@01) && !(except2@296@01)) | live]
; [else-branch: 2374 | p2_0@320@01 && !(break2@302@01) && !(except2@296@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2374 | !(p2_0@320@01 && !(break2@302@01) && !(except2@296@01))]
(assert (not (and p2_0@320@01 (and (not break2@302@01) (not except2@296@01)))))
; [exec]
; p1_1 := p1_0 && (!break1 && !except1 && bool___unbox__(b_4))
; [eval] p1_0 && (!break1 && !except1 && bool___unbox__(b_4))
(push) ; 16
; [then-branch: 2375 | !(p1_0@319@01) | live]
; [else-branch: 2375 | p1_0@319@01 | live]
(push) ; 17
; [then-branch: 2375 | !(p1_0@319@01)]
(assert (not p1_0@319@01))
(pop) ; 17
(push) ; 17
; [else-branch: 2375 | p1_0@319@01]
; [eval] !break1
(push) ; 18
; [then-branch: 2376 | break1@301@01 | live]
; [else-branch: 2376 | !(break1@301@01) | live]
(push) ; 19
; [then-branch: 2376 | break1@301@01]
(assert break1@301@01)
(pop) ; 19
(push) ; 19
; [else-branch: 2376 | !(break1@301@01)]
; [eval] !except1
(push) ; 20
; [then-branch: 2377 | except1@294@01 | live]
; [else-branch: 2377 | !(except1@294@01) | live]
(push) ; 21
; [then-branch: 2377 | except1@294@01]
(assert except1@294@01)
(pop) ; 21
(push) ; 21
; [else-branch: 2377 | !(except1@294@01)]
; [eval] bool___unbox__(b_4)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@26@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@26@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1@294@01)
  (and
    (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@26@01))))
(assert (or (not except1@294@01) except1@294@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@301@01)
  (and
    (=>
      (not except1@294@01)
      (and
        (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b@26@01)))
    (or (not except1@294@01) except1@294@01))))
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_0@319@01
  (and
    (=>
      (not break1@301@01)
      (and
        (=>
          (not except1@294@01)
          (and
            (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
            (bool___unbox__%precondition $Snap.unit b@26@01)))
        (or (not except1@294@01) except1@294@01)))
    (or (not break1@301@01) break1@301@01))))
(declare-const p1_1@321@01 Bool)
(assert (=
  p1_1@321@01
  (and
    p1_0@319@01
    (and
      (not break1@301@01)
      (and (not except1@294@01) (bool___unbox__ $Snap.unit b@26@01))))))
; [exec]
; p2_1 := p2_0 && (!break2 && !except2 && bool___unbox__(b_4_0))
; [eval] p2_0 && (!break2 && !except2 && bool___unbox__(b_4_0))
(push) ; 16
; [then-branch: 2378 | !(p2_0@320@01) | live]
; [else-branch: 2378 | p2_0@320@01 | live]
(push) ; 17
; [then-branch: 2378 | !(p2_0@320@01)]
(assert (not p2_0@320@01))
(pop) ; 17
(push) ; 17
; [else-branch: 2378 | p2_0@320@01]
(assert p2_0@320@01)
; [eval] !break2
(push) ; 18
; [then-branch: 2379 | break2@302@01 | live]
; [else-branch: 2379 | !(break2@302@01) | live]
(push) ; 19
; [then-branch: 2379 | break2@302@01]
(assert break2@302@01)
(pop) ; 19
(push) ; 19
; [else-branch: 2379 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(push) ; 20
; [then-branch: 2380 | except2@296@01 | live]
; [else-branch: 2380 | !(except2@296@01) | live]
(push) ; 21
; [then-branch: 2380 | except2@296@01]
(assert except2@296@01)
(pop) ; 21
(push) ; 21
; [else-branch: 2380 | !(except2@296@01)]
(assert (not except2@296@01))
; [eval] bool___unbox__(b_4_0)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_4_0@233@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_4_0@233@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2@296@01)
  (and
    (not except2@296@01)
    (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_4_0@233@01))))
(assert (or (not except2@296@01) except2@296@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@302@01)
  (and
    (not break2@302@01)
    (=>
      (not except2@296@01)
      (and
        (not except2@296@01)
        (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_4_0@233@01)))
    (or (not except2@296@01) except2@296@01))))
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_0@320@01
  (and
    p2_0@320@01
    (=>
      (not break2@302@01)
      (and
        (not break2@302@01)
        (=>
          (not except2@296@01)
          (and
            (not except2@296@01)
            (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType))
            (bool___unbox__%precondition $Snap.unit b_4_0@233@01)))
        (or (not except2@296@01) except2@296@01)))
    (or (not break2@302@01) break2@302@01))))
(declare-const p2_1@322@01 Bool)
(assert (=
  p2_1@322@01
  (and
    p2_0@320@01
    (and
      (not break2@302@01)
      (and (not except2@296@01) (bool___unbox__ $Snap.unit b_4_0@233@01))))))
; [exec]
; p3 := p1_0 && (!break1 && !except1 && !bool___unbox__(b_4))
; [eval] p1_0 && (!break1 && !except1 && !bool___unbox__(b_4))
(push) ; 16
; [then-branch: 2381 | !(p1_0@319@01) | live]
; [else-branch: 2381 | p1_0@319@01 | live]
(push) ; 17
; [then-branch: 2381 | !(p1_0@319@01)]
(assert (not p1_0@319@01))
(pop) ; 17
(push) ; 17
; [else-branch: 2381 | p1_0@319@01]
; [eval] !break1
(push) ; 18
; [then-branch: 2382 | break1@301@01 | live]
; [else-branch: 2382 | !(break1@301@01) | live]
(push) ; 19
; [then-branch: 2382 | break1@301@01]
(assert break1@301@01)
(pop) ; 19
(push) ; 19
; [else-branch: 2382 | !(break1@301@01)]
; [eval] !except1
(push) ; 20
; [then-branch: 2383 | except1@294@01 | live]
; [else-branch: 2383 | !(except1@294@01) | live]
(push) ; 21
; [then-branch: 2383 | except1@294@01]
(assert except1@294@01)
(pop) ; 21
(push) ; 21
; [else-branch: 2383 | !(except1@294@01)]
; [eval] !bool___unbox__(b_4)
; [eval] bool___unbox__(b_4)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@26@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@26@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1@294@01)
  (and
    (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@26@01))))
(assert (or (not except1@294@01) except1@294@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@301@01)
  (and
    (=>
      (not except1@294@01)
      (and
        (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b@26@01)))
    (or (not except1@294@01) except1@294@01))))
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3@323@01 Bool)
(assert (=
  p3@323@01
  (and
    p1_0@319@01
    (and
      (not break1@301@01)
      (and (not except1@294@01) (not (bool___unbox__ $Snap.unit b@26@01)))))))
; [exec]
; p4 := p2_0 && (!break2 && !except2 && !bool___unbox__(b_4_0))
; [eval] p2_0 && (!break2 && !except2 && !bool___unbox__(b_4_0))
(push) ; 16
; [then-branch: 2384 | !(p2_0@320@01) | live]
; [else-branch: 2384 | p2_0@320@01 | live]
(push) ; 17
; [then-branch: 2384 | !(p2_0@320@01)]
(assert (not p2_0@320@01))
(pop) ; 17
(push) ; 17
; [else-branch: 2384 | p2_0@320@01]
(assert p2_0@320@01)
; [eval] !break2
(push) ; 18
; [then-branch: 2385 | break2@302@01 | live]
; [else-branch: 2385 | !(break2@302@01) | live]
(push) ; 19
; [then-branch: 2385 | break2@302@01]
(assert break2@302@01)
(pop) ; 19
(push) ; 19
; [else-branch: 2385 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(push) ; 20
; [then-branch: 2386 | except2@296@01 | live]
; [else-branch: 2386 | !(except2@296@01) | live]
(push) ; 21
; [then-branch: 2386 | except2@296@01]
(assert except2@296@01)
(pop) ; 21
(push) ; 21
; [else-branch: 2386 | !(except2@296@01)]
(assert (not except2@296@01))
; [eval] !bool___unbox__(b_4_0)
; [eval] bool___unbox__(b_4_0)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_4_0@233@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_4_0@233@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2@296@01)
  (and
    (not except2@296@01)
    (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_4_0@233@01))))
(assert (or (not except2@296@01) except2@296@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@302@01)
  (and
    (not break2@302@01)
    (=>
      (not except2@296@01)
      (and
        (not except2@296@01)
        (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_4_0@233@01)))
    (or (not except2@296@01) except2@296@01))))
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4@324@01 Bool)
(assert (=
  p4@324@01
  (and
    p2_0@320@01
    (and
      (not break2@302@01)
      (and (not except2@296@01) (not (bool___unbox__ $Snap.unit b_4_0@233@01)))))))
; [exec]
; p1_2 := p1_1 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p1_1 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 2387 | !(p1_1@321@01) | live]
; [else-branch: 2387 | p1_1@321@01 | live]
(push) ; 17
; [then-branch: 2387 | !(p1_1@321@01)]
(assert (not p1_1@321@01))
(pop) ; 17
(push) ; 17
; [else-branch: 2387 | p1_1@321@01]
(assert p1_1@321@01)
; [eval] !break1
(push) ; 18
; [then-branch: 2388 | break1@301@01 | live]
; [else-branch: 2388 | !(break1@301@01) | live]
(push) ; 19
; [then-branch: 2388 | break1@301@01]
(assert break1@301@01)
(pop) ; 19
(push) ; 19
; [else-branch: 2388 | !(break1@301@01)]
; [eval] !except1
(push) ; 20
; [then-branch: 2389 | except1@294@01 | live]
; [else-branch: 2389 | !(except1@294@01) | live]
(push) ; 21
; [then-branch: 2389 | except1@294@01]
(assert except1@294@01)
(pop) ; 21
(push) ; 21
; [else-branch: 2389 | !(except1@294@01)]
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except1@294@01) except1@294@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> (not break1@301@01) (or (not except1@294@01) except1@294@01)))
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_1@321@01
  (and
    p1_1@321@01
    (=> (not break1@301@01) (or (not except1@294@01) except1@294@01))
    (or (not break1@301@01) break1@301@01))))
(assert (or p1_1@321@01 (not p1_1@321@01)))
; [exec]
; p2_2 := p2_1 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_1 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 2390 | !(p2_1@322@01) | live]
; [else-branch: 2390 | p2_1@322@01 | live]
(push) ; 17
; [then-branch: 2390 | !(p2_1@322@01)]
(assert (not p2_1@322@01))
(pop) ; 17
(push) ; 17
; [else-branch: 2390 | p2_1@322@01]
(assert p2_1@322@01)
; [eval] !break2
(push) ; 18
; [then-branch: 2391 | break2@302@01 | live]
; [else-branch: 2391 | !(break2@302@01) | live]
(push) ; 19
; [then-branch: 2391 | break2@302@01]
(assert break2@302@01)
(pop) ; 19
(push) ; 19
; [else-branch: 2391 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(push) ; 20
; [then-branch: 2392 | except2@296@01 | live]
; [else-branch: 2392 | !(except2@296@01) | live]
(push) ; 21
; [then-branch: 2392 | except2@296@01]
(assert except2@296@01)
(pop) ; 21
(push) ; 21
; [else-branch: 2392 | !(except2@296@01)]
(assert (not except2@296@01))
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except2@296@01) except2@296@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@302@01)
  (and (not break2@302@01) (or (not except2@296@01) except2@296@01))))
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_1@322@01
  (and
    p2_1@322@01
    (=>
      (not break2@302@01)
      (and (not break2@302@01) (or (not except2@296@01) except2@296@01)))
    (or (not break2@302@01) break2@302@01))))
(assert (or p2_1@322@01 (not p2_1@322@01)))
; [exec]
; p3_0 := p1_1 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p1_1 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 2393 | !(p1_1@321@01) | live]
; [else-branch: 2393 | p1_1@321@01 | live]
(push) ; 17
; [then-branch: 2393 | !(p1_1@321@01)]
(assert (not p1_1@321@01))
(pop) ; 17
(push) ; 17
; [else-branch: 2393 | p1_1@321@01]
(assert p1_1@321@01)
; [eval] !break1
(push) ; 18
; [then-branch: 2394 | break1@301@01 | live]
; [else-branch: 2394 | !(break1@301@01) | live]
(push) ; 19
; [then-branch: 2394 | break1@301@01]
(assert break1@301@01)
(pop) ; 19
(push) ; 19
; [else-branch: 2394 | !(break1@301@01)]
; [eval] !except1
(push) ; 20
; [then-branch: 2395 | except1@294@01 | live]
; [else-branch: 2395 | !(except1@294@01) | live]
(push) ; 21
; [then-branch: 2395 | except1@294@01]
(assert except1@294@01)
(pop) ; 21
(push) ; 21
; [else-branch: 2395 | !(except1@294@01)]
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except1@294@01) except1@294@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> (not break1@301@01) (or (not except1@294@01) except1@294@01)))
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3_0@325@01 Bool)
(assert (= p3_0@325@01 (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01)))))
; [exec]
; p4_0 := p2_1 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_1 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 2396 | !(p2_1@322@01) | live]
; [else-branch: 2396 | p2_1@322@01 | live]
(push) ; 17
; [then-branch: 2396 | !(p2_1@322@01)]
(assert (not p2_1@322@01))
(pop) ; 17
(push) ; 17
; [else-branch: 2396 | p2_1@322@01]
(assert p2_1@322@01)
; [eval] !break2
(push) ; 18
; [then-branch: 2397 | break2@302@01 | live]
; [else-branch: 2397 | !(break2@302@01) | live]
(push) ; 19
; [then-branch: 2397 | break2@302@01]
(assert break2@302@01)
(pop) ; 19
(push) ; 19
; [else-branch: 2397 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(push) ; 20
; [then-branch: 2398 | except2@296@01 | live]
; [else-branch: 2398 | !(except2@296@01) | live]
(push) ; 21
; [then-branch: 2398 | except2@296@01]
(assert except2@296@01)
(pop) ; 21
(push) ; 21
; [else-branch: 2398 | !(except2@296@01)]
(assert (not except2@296@01))
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except2@296@01) except2@296@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@302@01)
  (and (not break2@302@01) (or (not except2@296@01) except2@296@01))))
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4_0@326@01 Bool)
(assert (= p4_0@326@01 (and p2_1@322@01 (and (not break2@302@01) (not except2@296@01)))))
; [eval] p1_2 && (!break1 && !except1)
; [then-branch: 2399 | False | dead]
; [else-branch: 2399 | True | live]
(push) ; 16
; [else-branch: 2399 | True]
(pop) ; 16
; [eval] !(p1_2 && (!break1 && !except1))
; [eval] p1_2 && (!break1 && !except1)
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2400 | True | live]
; [else-branch: 2400 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2400 | True]
; [eval] p2_2 && (!break2 && !except2)
; [then-branch: 2401 | False | dead]
; [else-branch: 2401 | True | live]
(push) ; 17
; [else-branch: 2401 | True]
(pop) ; 17
; [eval] !(p2_2 && (!break2 && !except2))
; [eval] p2_2 && (!break2 && !except2)
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2402 | True | live]
; [else-branch: 2402 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2402 | True]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 18
; [then-branch: 2403 | !(p1_1@321@01) | live]
; [else-branch: 2403 | p1_1@321@01 | live]
(push) ; 19
; [then-branch: 2403 | !(p1_1@321@01)]
(assert (not p1_1@321@01))
(pop) ; 19
(push) ; 19
; [else-branch: 2403 | p1_1@321@01]
(assert p1_1@321@01)
; [eval] !break1
(push) ; 20
; [then-branch: 2404 | break1@301@01 | live]
; [else-branch: 2404 | !(break1@301@01) | live]
(push) ; 21
; [then-branch: 2404 | break1@301@01]
(assert break1@301@01)
(pop) ; 21
(push) ; 21
; [else-branch: 2404 | !(break1@301@01)]
; [eval] !except1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> p1_1@321@01 (and p1_1@321@01 (or (not break1@301@01) break1@301@01))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2405 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01) | live]
; [else-branch: 2405 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01)) | live]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 2405 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01)]
(assert (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01))))
; [exec]
; c_4.Container_value := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 19
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 19
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(declare-const Container_value@327@01 $Ref)
(assert (= Container_value@327@01 (__prim__int___box__ $Snap.unit 7)))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 19
; [then-branch: 2406 | !(p2_1@322@01) | live]
; [else-branch: 2406 | p2_1@322@01 | live]
(push) ; 20
; [then-branch: 2406 | !(p2_1@322@01)]
(assert (not p2_1@322@01))
(pop) ; 20
(push) ; 20
; [else-branch: 2406 | p2_1@322@01]
(assert p2_1@322@01)
; [eval] !break2
(push) ; 21
; [then-branch: 2407 | break2@302@01 | live]
; [else-branch: 2407 | !(break2@302@01) | live]
(push) ; 22
; [then-branch: 2407 | break2@302@01]
(assert break2@302@01)
(pop) ; 22
(push) ; 22
; [else-branch: 2407 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=> p2_1@322@01 (and p2_1@322@01 (or (not break2@302@01) break2@302@01))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_1@322@01 (and (not break2@302@01) (not except2@296@01))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2408 | p2_1@322@01 && !(break2@302@01) && !(except2@296@01) | dead]
; [else-branch: 2408 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01)) | live]
(set-option :timeout 0)
(push) ; 19
; [else-branch: 2408 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01))]
(assert (not (and p2_1@322@01 (and (not break2@302@01) (not except2@296@01)))))
(pop) ; 19
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 19
; [then-branch: 2409 | !(p2_1@322@01) | live]
; [else-branch: 2409 | p2_1@322@01 | live]
(push) ; 20
; [then-branch: 2409 | !(p2_1@322@01)]
(assert (not p2_1@322@01))
(pop) ; 20
(push) ; 20
; [else-branch: 2409 | p2_1@322@01]
(assert p2_1@322@01)
; [eval] !break2
(push) ; 21
; [then-branch: 2410 | break2@302@01 | live]
; [else-branch: 2410 | !(break2@302@01) | live]
(push) ; 22
; [then-branch: 2410 | break2@302@01]
(assert break2@302@01)
(pop) ; 22
(push) ; 22
; [else-branch: 2410 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_1@322@01 (and (not break2@302@01) (not except2@296@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_1@322@01 (and (not break2@302@01) (not except2@296@01))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2411 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01)) | live]
; [else-branch: 2411 | p2_1@322@01 && !(break2@302@01) && !(except2@296@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 2411 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01))]
(assert (not (and p2_1@322@01 (and (not break2@302@01) (not except2@296@01)))))
; [exec]
; tmp := new()
(declare-const tmp@328@01 $Ref)
(assert (not (= tmp@328@01 $Ref.null)))
(assert (not (= tmp@328@01 _err_0@295@01)))
(assert (not (= tmp@328@01 Exception_res@291@01)))
(assert (not (= tmp@328@01 tmp1_2@258@01)))
(assert (not (= tmp@328@01 _err_0@31@01)))
(assert (not (= tmp@328@01 _err@293@01)))
(assert (not (= tmp@328@01 Exception_res_2@245@01)))
(assert (not (= tmp@328@01 c_9@25@01)))
(assert (not (= tmp@328@01 Exception_res_2@292@01)))
(assert (not (= tmp@328@01 _cthread_157_0@19@01)))
(assert (not (= tmp@328@01 Container_value@327@01)))
(assert (not (= tmp@328@01 b_9@27@01)))
(assert (not (= tmp@328@01 tmp1_0@254@01)))
(assert (not (= tmp@328@01 b@26@01)))
(assert (not (= tmp@328@01 _cthread_157@18@01)))
(assert (not (= tmp@328@01 c_4_0@231@01)))
(assert (not (= tmp@328@01 tmp@314@01)))
(assert (not (= tmp@328@01 c@24@01)))
(assert (not (= tmp@328@01 b_4_0@233@01)))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 20
; [then-branch: 2412 | !(p1_1@321@01) | live]
; [else-branch: 2412 | p1_1@321@01 | live]
(push) ; 21
; [then-branch: 2412 | !(p1_1@321@01)]
(assert (not p1_1@321@01))
(pop) ; 21
(push) ; 21
; [else-branch: 2412 | p1_1@321@01]
; [eval] !break1
(push) ; 22
; [then-branch: 2413 | break1@301@01 | live]
; [else-branch: 2413 | !(break1@301@01) | live]
(push) ; 23
; [then-branch: 2413 | break1@301@01]
(assert break1@301@01)
(pop) ; 23
(push) ; 23
; [else-branch: 2413 | !(break1@301@01)]
; [eval] !except1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=> p1_1@321@01 (or (not break1@301@01) break1@301@01)))
(push) ; 20
(set-option :timeout 10)
(assert (not (not (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2414 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01) | live]
; [else-branch: 2414 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01)) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 2414 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01)]
(assert (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01))))
; [exec]
; Exception_res := tmp
; [eval] p2_1 && (!break2 && !except2)
(push) ; 21
; [then-branch: 2415 | !(p2_1@322@01) | live]
; [else-branch: 2415 | p2_1@322@01 | live]
(push) ; 22
; [then-branch: 2415 | !(p2_1@322@01)]
(assert (not p2_1@322@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2415 | p2_1@322@01]
(assert p2_1@322@01)
; [eval] !break2
(push) ; 23
; [then-branch: 2416 | break2@302@01 | live]
; [else-branch: 2416 | !(break2@302@01) | live]
(push) ; 24
; [then-branch: 2416 | break2@302@01]
(assert break2@302@01)
(pop) ; 24
(push) ; 24
; [else-branch: 2416 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 2417 | p2_1@322@01 && !(break2@302@01) && !(except2@296@01) | dead]
; [else-branch: 2417 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01)) | live]
(push) ; 21
; [else-branch: 2417 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01))]
(pop) ; 21
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 21
; [then-branch: 2418 | !(p2_1@322@01) | live]
; [else-branch: 2418 | p2_1@322@01 | live]
(push) ; 22
; [then-branch: 2418 | !(p2_1@322@01)]
(assert (not p2_1@322@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2418 | p2_1@322@01]
(assert p2_1@322@01)
; [eval] !break2
(push) ; 23
; [then-branch: 2419 | break2@302@01 | live]
; [else-branch: 2419 | !(break2@302@01) | live]
(push) ; 24
; [then-branch: 2419 | break2@302@01]
(assert break2@302@01)
(pop) ; 24
(push) ; 24
; [else-branch: 2419 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@322@01 (and (not break2@302@01) (not except2@296@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2420 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01)) | live]
; [else-branch: 2420 | p2_1@322@01 && !(break2@302@01) && !(except2@296@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 2420 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01))]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 22
; [then-branch: 2421 | !(p1_1@321@01) | live]
; [else-branch: 2421 | p1_1@321@01 | live]
(push) ; 23
; [then-branch: 2421 | !(p1_1@321@01)]
(assert (not p1_1@321@01))
(pop) ; 23
(push) ; 23
; [else-branch: 2421 | p1_1@321@01]
; [eval] !break1
(push) ; 24
; [then-branch: 2422 | break1@301@01 | live]
; [else-branch: 2422 | !(break1@301@01) | live]
(push) ; 25
; [then-branch: 2422 | break1@301@01]
(assert break1@301@01)
(pop) ; 25
(push) ; 25
; [else-branch: 2422 | !(break1@301@01)]
; [eval] !except1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2423 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01) | live]
; [else-branch: 2423 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01)) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 2423 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01)]
(assert (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01))))
; [exec]
; inhale typeof(Exception_res) == Exception()
(declare-const $t@329@01 $Snap)
(assert (= $t@329@01 $Snap.unit))
; [eval] typeof(Exception_res) == Exception()
; [eval] typeof(Exception_res)
; [eval] Exception()
(assert (= (typeof<PyType> tmp@328@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_1 && (!break2 && !except2)
(set-option :timeout 0)
(push) ; 23
; [then-branch: 2424 | !(p2_1@322@01) | live]
; [else-branch: 2424 | p2_1@322@01 | live]
(push) ; 24
; [then-branch: 2424 | !(p2_1@322@01)]
(assert (not p2_1@322@01))
(pop) ; 24
(push) ; 24
; [else-branch: 2424 | p2_1@322@01]
(assert p2_1@322@01)
; [eval] !break2
(push) ; 25
; [then-branch: 2425 | break2@302@01 | live]
; [else-branch: 2425 | !(break2@302@01) | live]
(push) ; 26
; [then-branch: 2425 | break2@302@01]
(assert break2@302@01)
(pop) ; 26
(push) ; 26
; [else-branch: 2425 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 2426 | p2_1@322@01 && !(break2@302@01) && !(except2@296@01) | dead]
; [else-branch: 2426 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01)) | live]
(push) ; 23
; [else-branch: 2426 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01))]
(pop) ; 23
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 23
; [then-branch: 2427 | !(p2_1@322@01) | live]
; [else-branch: 2427 | p2_1@322@01 | live]
(push) ; 24
; [then-branch: 2427 | !(p2_1@322@01)]
(assert (not p2_1@322@01))
(pop) ; 24
(push) ; 24
; [else-branch: 2427 | p2_1@322@01]
(assert p2_1@322@01)
; [eval] !break2
(push) ; 25
; [then-branch: 2428 | break2@302@01 | live]
; [else-branch: 2428 | !(break2@302@01) | live]
(push) ; 26
; [then-branch: 2428 | break2@302@01]
(assert break2@302@01)
(pop) ; 26
(push) ; 26
; [else-branch: 2428 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_1@322@01 (and (not break2@302@01) (not except2@296@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2429 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01)) | live]
; [else-branch: 2429 | p2_1@322@01 && !(break2@302@01) && !(except2@296@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 2429 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01))]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 24
; [then-branch: 2430 | !(p1_1@321@01) | live]
; [else-branch: 2430 | p1_1@321@01 | live]
(push) ; 25
; [then-branch: 2430 | !(p1_1@321@01)]
(assert (not p1_1@321@01))
(pop) ; 25
(push) ; 25
; [else-branch: 2430 | p1_1@321@01]
; [eval] !break1
(push) ; 26
; [then-branch: 2431 | break1@301@01 | live]
; [else-branch: 2431 | !(break1@301@01) | live]
(push) ; 27
; [then-branch: 2431 | break1@301@01]
(assert break1@301@01)
(pop) ; 27
(push) ; 27
; [else-branch: 2431 | !(break1@301@01)]
; [eval] !except1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2432 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01) | live]
; [else-branch: 2432 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01)) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 2432 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01)]
(assert (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01))))
; [exec]
; _err := Exception_res
; [exec]
; except1 := true
; [eval] p2_1 && (!break2 && !except2)
(push) ; 25
; [then-branch: 2433 | !(p2_1@322@01) | live]
; [else-branch: 2433 | p2_1@322@01 | live]
(push) ; 26
; [then-branch: 2433 | !(p2_1@322@01)]
(assert (not p2_1@322@01))
(pop) ; 26
(push) ; 26
; [else-branch: 2433 | p2_1@322@01]
(assert p2_1@322@01)
; [eval] !break2
(push) ; 27
; [then-branch: 2434 | break2@302@01 | live]
; [else-branch: 2434 | !(break2@302@01) | live]
(push) ; 28
; [then-branch: 2434 | break2@302@01]
(assert break2@302@01)
(pop) ; 28
(push) ; 28
; [else-branch: 2434 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 2435 | p2_1@322@01 && !(break2@302@01) && !(except2@296@01) | dead]
; [else-branch: 2435 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01)) | live]
(push) ; 25
; [else-branch: 2435 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01))]
(pop) ; 25
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 25
; [then-branch: 2436 | !(p2_1@322@01) | live]
; [else-branch: 2436 | p2_1@322@01 | live]
(push) ; 26
; [then-branch: 2436 | !(p2_1@322@01)]
(assert (not p2_1@322@01))
(pop) ; 26
(push) ; 26
; [else-branch: 2436 | p2_1@322@01]
(assert p2_1@322@01)
; [eval] !break2
(push) ; 27
; [then-branch: 2437 | break2@302@01 | live]
; [else-branch: 2437 | !(break2@302@01) | live]
(push) ; 28
; [then-branch: 2437 | break2@302@01]
(assert break2@302@01)
(pop) ; 28
(push) ; 28
; [else-branch: 2437 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@322@01 (and (not break2@302@01) (not except2@296@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2438 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01)) | live]
; [else-branch: 2438 | p2_1@322@01 && !(break2@302@01) && !(except2@296@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 2438 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01))]
; [exec]
; p1_3 := p3 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p3 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 2439 | !(p3@323@01) | live]
; [else-branch: 2439 | p3@323@01 | live]
(push) ; 27
; [then-branch: 2439 | !(p3@323@01)]
(assert (not p3@323@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2439 | p3@323@01]
(assert p3@323@01)
; [eval] !break1
(push) ; 28
; [then-branch: 2440 | break1@301@01 | live]
; [else-branch: 2440 | !(break1@301@01) | live]
(push) ; 29
; [then-branch: 2440 | break1@301@01]
(assert break1@301@01)
(pop) ; 29
(push) ; 29
; [else-branch: 2440 | !(break1@301@01)]
; [eval] !except1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=> p3@323@01 (and p3@323@01 (or (not break1@301@01) break1@301@01))))
(assert (or p3@323@01 (not p3@323@01)))
; [exec]
; p2_3 := p4 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p4 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 2441 | !(p4@324@01) | live]
; [else-branch: 2441 | p4@324@01 | live]
(push) ; 27
; [then-branch: 2441 | !(p4@324@01)]
(assert (not p4@324@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2441 | p4@324@01]
(assert p4@324@01)
; [eval] !break2
(push) ; 28
; [then-branch: 2442 | break2@302@01 | live]
; [else-branch: 2442 | !(break2@302@01) | live]
(push) ; 29
; [then-branch: 2442 | break2@302@01]
(assert break2@302@01)
(pop) ; 29
(push) ; 29
; [else-branch: 2442 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(push) ; 30
; [then-branch: 2443 | except2@296@01 | live]
; [else-branch: 2443 | !(except2@296@01) | live]
(push) ; 31
; [then-branch: 2443 | except2@296@01]
(assert except2@296@01)
(pop) ; 31
(push) ; 31
; [else-branch: 2443 | !(except2@296@01)]
(assert (not except2@296@01))
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2@296@01) except2@296@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@302@01)
  (and (not break2@302@01) (or (not except2@296@01) except2@296@01))))
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p4@324@01
  (and
    p4@324@01
    (=>
      (not break2@302@01)
      (and (not break2@302@01) (or (not except2@296@01) except2@296@01)))
    (or (not break2@302@01) break2@302@01))))
(assert (or p4@324@01 (not p4@324@01)))
; [exec]
; p3_1 := p3 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p3 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 2444 | !(p3@323@01) | live]
; [else-branch: 2444 | p3@323@01 | live]
(push) ; 27
; [then-branch: 2444 | !(p3@323@01)]
(assert (not p3@323@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2444 | p3@323@01]
(assert p3@323@01)
; [eval] !break1
(push) ; 28
; [then-branch: 2445 | break1@301@01 | live]
; [else-branch: 2445 | !(break1@301@01) | live]
(push) ; 29
; [then-branch: 2445 | break1@301@01]
(assert break1@301@01)
(pop) ; 29
(push) ; 29
; [else-branch: 2445 | !(break1@301@01)]
; [eval] !except1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [exec]
; p4_1 := p4 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p4 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 2446 | !(p4@324@01) | live]
; [else-branch: 2446 | p4@324@01 | live]
(push) ; 27
; [then-branch: 2446 | !(p4@324@01)]
(assert (not p4@324@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2446 | p4@324@01]
(assert p4@324@01)
; [eval] !break2
(push) ; 28
; [then-branch: 2447 | break2@302@01 | live]
; [else-branch: 2447 | !(break2@302@01) | live]
(push) ; 29
; [then-branch: 2447 | break2@302@01]
(assert break2@302@01)
(pop) ; 29
(push) ; 29
; [else-branch: 2447 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(push) ; 30
; [then-branch: 2448 | except2@296@01 | live]
; [else-branch: 2448 | !(except2@296@01) | live]
(push) ; 31
; [then-branch: 2448 | except2@296@01]
(assert except2@296@01)
(pop) ; 31
(push) ; 31
; [else-branch: 2448 | !(except2@296@01)]
(assert (not except2@296@01))
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2@296@01) except2@296@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@302@01)
  (and (not break2@302@01) (or (not except2@296@01) except2@296@01))))
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p4_1@330@01 Bool)
(assert (= p4_1@330@01 (and p4@324@01 (and (not break2@302@01) (not except2@296@01)))))
; [eval] p1_3 && (!break1 && !except1)
; [then-branch: 2449 | False | dead]
; [else-branch: 2449 | True | live]
(push) ; 26
; [else-branch: 2449 | True]
(pop) ; 26
; [eval] !(p1_3 && (!break1 && !except1))
; [eval] p1_3 && (!break1 && !except1)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2450 | True | live]
; [else-branch: 2450 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 2450 | True]
; [eval] p2_3 && (!break2 && !except2)
; [then-branch: 2451 | False | dead]
; [else-branch: 2451 | True | live]
(push) ; 27
; [else-branch: 2451 | True]
(pop) ; 27
; [eval] !(p2_3 && (!break2 && !except2))
; [eval] p2_3 && (!break2 && !except2)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2452 | True | live]
; [else-branch: 2452 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 2452 | True]
; [eval] p3 && (!break1 && !except1)
(push) ; 28
; [then-branch: 2453 | !(p3@323@01) | live]
; [else-branch: 2453 | p3@323@01 | live]
(push) ; 29
; [then-branch: 2453 | !(p3@323@01)]
(assert (not p3@323@01))
(pop) ; 29
(push) ; 29
; [else-branch: 2453 | p3@323@01]
(assert p3@323@01)
; [eval] !break1
(push) ; 30
; [then-branch: 2454 | break1@301@01 | live]
; [else-branch: 2454 | !(break1@301@01) | live]
(push) ; 31
; [then-branch: 2454 | break1@301@01]
(assert break1@301@01)
(pop) ; 31
(push) ; 31
; [else-branch: 2454 | !(break1@301@01)]
; [eval] !except1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 2455 | False | dead]
; [else-branch: 2455 | True | live]
(push) ; 28
; [else-branch: 2455 | True]
(pop) ; 28
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 28
; [then-branch: 2456 | !(p3@323@01) | live]
; [else-branch: 2456 | p3@323@01 | live]
(push) ; 29
; [then-branch: 2456 | !(p3@323@01)]
(assert (not p3@323@01))
(pop) ; 29
(push) ; 29
; [else-branch: 2456 | p3@323@01]
(assert p3@323@01)
; [eval] !break1
(push) ; 30
; [then-branch: 2457 | break1@301@01 | live]
; [else-branch: 2457 | !(break1@301@01) | live]
(push) ; 31
; [then-branch: 2457 | break1@301@01]
(assert break1@301@01)
(pop) ; 31
(push) ; 31
; [else-branch: 2457 | !(break1@301@01)]
; [eval] !except1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2458 | True | live]
; [else-branch: 2458 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2458 | True]
; [eval] p4 && (!break2 && !except2)
(push) ; 29
; [then-branch: 2459 | !(p4@324@01) | live]
; [else-branch: 2459 | p4@324@01 | live]
(push) ; 30
; [then-branch: 2459 | !(p4@324@01)]
(assert (not p4@324@01))
(pop) ; 30
(push) ; 30
; [else-branch: 2459 | p4@324@01]
(assert p4@324@01)
; [eval] !break2
(push) ; 31
; [then-branch: 2460 | break2@302@01 | live]
; [else-branch: 2460 | !(break2@302@01) | live]
(push) ; 32
; [then-branch: 2460 | break2@302@01]
(assert break2@302@01)
(pop) ; 32
(push) ; 32
; [else-branch: 2460 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p4@324@01 (and p4@324@01 (or (not break2@302@01) break2@302@01))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4@324@01 (and (not break2@302@01) (not except2@296@01))))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2461 | p4@324@01 && !(break2@302@01) && !(except2@296@01) | dead]
; [else-branch: 2461 | !(p4@324@01 && !(break2@302@01) && !(except2@296@01)) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 2461 | !(p4@324@01 && !(break2@302@01) && !(except2@296@01))]
(assert (not (and p4@324@01 (and (not break2@302@01) (not except2@296@01)))))
(pop) ; 29
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 29
; [then-branch: 2462 | !(p4@324@01) | live]
; [else-branch: 2462 | p4@324@01 | live]
(push) ; 30
; [then-branch: 2462 | !(p4@324@01)]
(assert (not p4@324@01))
(pop) ; 30
(push) ; 30
; [else-branch: 2462 | p4@324@01]
(assert p4@324@01)
; [eval] !break2
(push) ; 31
; [then-branch: 2463 | break2@302@01 | live]
; [else-branch: 2463 | !(break2@302@01) | live]
(push) ; 32
; [then-branch: 2463 | break2@302@01]
(assert break2@302@01)
(pop) ; 32
(push) ; 32
; [else-branch: 2463 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4@324@01 (and (not break2@302@01) (not except2@296@01)))))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4@324@01 (and (not break2@302@01) (not except2@296@01))))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2464 | !(p4@324@01 && !(break2@302@01) && !(except2@296@01)) | live]
; [else-branch: 2464 | p4@324@01 && !(break2@302@01) && !(except2@296@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 2464 | !(p4@324@01 && !(break2@302@01) && !(except2@296@01))]
(assert (not (and p4@324@01 (and (not break2@302@01) (not except2@296@01)))))
; [eval] p3 && (!break1 && !except1)
(push) ; 30
; [then-branch: 2465 | !(p3@323@01) | live]
; [else-branch: 2465 | p3@323@01 | live]
(push) ; 31
; [then-branch: 2465 | !(p3@323@01)]
(assert (not p3@323@01))
(pop) ; 31
(push) ; 31
; [else-branch: 2465 | p3@323@01]
(assert p3@323@01)
; [eval] !break1
(push) ; 32
; [then-branch: 2466 | break1@301@01 | live]
; [else-branch: 2466 | !(break1@301@01) | live]
(push) ; 33
; [then-branch: 2466 | break1@301@01]
(assert break1@301@01)
(pop) ; 33
(push) ; 33
; [else-branch: 2466 | !(break1@301@01)]
; [eval] !except1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 2467 | False | dead]
; [else-branch: 2467 | True | live]
(push) ; 30
; [else-branch: 2467 | True]
(pop) ; 30
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 30
; [then-branch: 2468 | !(p3@323@01) | live]
; [else-branch: 2468 | p3@323@01 | live]
(push) ; 31
; [then-branch: 2468 | !(p3@323@01)]
(assert (not p3@323@01))
(pop) ; 31
(push) ; 31
; [else-branch: 2468 | p3@323@01]
(assert p3@323@01)
; [eval] !break1
(push) ; 32
; [then-branch: 2469 | break1@301@01 | live]
; [else-branch: 2469 | !(break1@301@01) | live]
(push) ; 33
; [then-branch: 2469 | break1@301@01]
(assert break1@301@01)
(pop) ; 33
(push) ; 33
; [else-branch: 2469 | !(break1@301@01)]
; [eval] !except1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2470 | True | live]
; [else-branch: 2470 | False | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2470 | True]
; [eval] p4 && (!break2 && !except2)
(push) ; 31
; [then-branch: 2471 | !(p4@324@01) | live]
; [else-branch: 2471 | p4@324@01 | live]
(push) ; 32
; [then-branch: 2471 | !(p4@324@01)]
(assert (not p4@324@01))
(pop) ; 32
(push) ; 32
; [else-branch: 2471 | p4@324@01]
(assert p4@324@01)
; [eval] !break2
(push) ; 33
; [then-branch: 2472 | break2@302@01 | live]
; [else-branch: 2472 | !(break2@302@01) | live]
(push) ; 34
; [then-branch: 2472 | break2@302@01]
(assert break2@302@01)
(pop) ; 34
(push) ; 34
; [else-branch: 2472 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 2473 | p4@324@01 && !(break2@302@01) && !(except2@296@01) | dead]
; [else-branch: 2473 | !(p4@324@01 && !(break2@302@01) && !(except2@296@01)) | live]
(push) ; 31
; [else-branch: 2473 | !(p4@324@01 && !(break2@302@01) && !(except2@296@01))]
(pop) ; 31
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 31
; [then-branch: 2474 | !(p4@324@01) | live]
; [else-branch: 2474 | p4@324@01 | live]
(push) ; 32
; [then-branch: 2474 | !(p4@324@01)]
(assert (not p4@324@01))
(pop) ; 32
(push) ; 32
; [else-branch: 2474 | p4@324@01]
(assert p4@324@01)
; [eval] !break2
(push) ; 33
; [then-branch: 2475 | break2@302@01 | live]
; [else-branch: 2475 | !(break2@302@01) | live]
(push) ; 34
; [then-branch: 2475 | break2@302@01]
(assert break2@302@01)
(pop) ; 34
(push) ; 34
; [else-branch: 2475 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4@324@01 (and (not break2@302@01) (not except2@296@01)))))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2476 | !(p4@324@01 && !(break2@302@01) && !(except2@296@01)) | live]
; [else-branch: 2476 | p4@324@01 && !(break2@302@01) && !(except2@296@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 2476 | !(p4@324@01 && !(break2@302@01) && !(except2@296@01))]
; [eval] p1_0 && (!break1 && !except1)
(push) ; 32
; [then-branch: 2477 | !(p1_0@319@01) | live]
; [else-branch: 2477 | p1_0@319@01 | live]
(push) ; 33
; [then-branch: 2477 | !(p1_0@319@01)]
(assert (not p1_0@319@01))
(pop) ; 33
(push) ; 33
; [else-branch: 2477 | p1_0@319@01]
; [eval] !break1
(push) ; 34
; [then-branch: 2478 | break1@301@01 | live]
; [else-branch: 2478 | !(break1@301@01) | live]
(push) ; 35
; [then-branch: 2478 | break1@301@01]
(assert break1@301@01)
(pop) ; 35
(push) ; 35
; [else-branch: 2478 | !(break1@301@01)]
; [eval] !except1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (=> p1_0@319@01 (or (not break1@301@01) break1@301@01)))
; [then-branch: 2479 | False | dead]
; [else-branch: 2479 | True | live]
(push) ; 32
; [else-branch: 2479 | True]
(pop) ; 32
; [eval] !(p1_0 && (!break1 && !except1))
; [eval] p1_0 && (!break1 && !except1)
(push) ; 32
; [then-branch: 2480 | !(p1_0@319@01) | live]
; [else-branch: 2480 | p1_0@319@01 | live]
(push) ; 33
; [then-branch: 2480 | !(p1_0@319@01)]
(assert (not p1_0@319@01))
(pop) ; 33
(push) ; 33
; [else-branch: 2480 | p1_0@319@01]
; [eval] !break1
(push) ; 34
; [then-branch: 2481 | break1@301@01 | live]
; [else-branch: 2481 | !(break1@301@01) | live]
(push) ; 35
; [then-branch: 2481 | break1@301@01]
(assert break1@301@01)
(pop) ; 35
(push) ; 35
; [else-branch: 2481 | !(break1@301@01)]
; [eval] !except1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2482 | True | live]
; [else-branch: 2482 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2482 | True]
; [eval] p2_0 && (!break2 && !except2)
(push) ; 33
; [then-branch: 2483 | !(p2_0@320@01) | live]
; [else-branch: 2483 | p2_0@320@01 | live]
(push) ; 34
; [then-branch: 2483 | !(p2_0@320@01)]
(assert (not p2_0@320@01))
(pop) ; 34
(push) ; 34
; [else-branch: 2483 | p2_0@320@01]
(assert p2_0@320@01)
; [eval] !break2
(push) ; 35
; [then-branch: 2484 | break2@302@01 | live]
; [else-branch: 2484 | !(break2@302@01) | live]
(push) ; 36
; [then-branch: 2484 | break2@302@01]
(assert break2@302@01)
(pop) ; 36
(push) ; 36
; [else-branch: 2484 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 2485 | p2_0@320@01 && !(break2@302@01) && !(except2@296@01) | dead]
; [else-branch: 2485 | !(p2_0@320@01 && !(break2@302@01) && !(except2@296@01)) | live]
(push) ; 33
; [else-branch: 2485 | !(p2_0@320@01 && !(break2@302@01) && !(except2@296@01))]
(pop) ; 33
; [eval] !(p2_0 && (!break2 && !except2))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 33
; [then-branch: 2486 | !(p2_0@320@01) | live]
; [else-branch: 2486 | p2_0@320@01 | live]
(push) ; 34
; [then-branch: 2486 | !(p2_0@320@01)]
(assert (not p2_0@320@01))
(pop) ; 34
(push) ; 34
; [else-branch: 2486 | p2_0@320@01]
(assert p2_0@320@01)
; [eval] !break2
(push) ; 35
; [then-branch: 2487 | break2@302@01 | live]
; [else-branch: 2487 | !(break2@302@01) | live]
(push) ; 36
; [then-branch: 2487 | break2@302@01]
(assert break2@302@01)
(pop) ; 36
(push) ; 36
; [else-branch: 2487 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not (and p2_0@320@01 (and (not break2@302@01) (not except2@296@01)))))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2488 | !(p2_0@320@01 && !(break2@302@01) && !(except2@296@01)) | live]
; [else-branch: 2488 | p2_0@320@01 && !(break2@302@01) && !(except2@296@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 2488 | !(p2_0@320@01 && !(break2@302@01) && !(except2@296@01))]
; [exec]
; assert (p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true) &&
;   (p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true)
; [eval] p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true
; [eval] p1_0 && (!break1 && !except1)
(push) ; 34
; [then-branch: 2489 | !(p1_0@319@01) | live]
; [else-branch: 2489 | p1_0@319@01 | live]
(push) ; 35
; [then-branch: 2489 | !(p1_0@319@01)]
(assert (not p1_0@319@01))
(pop) ; 35
(push) ; 35
; [else-branch: 2489 | p1_0@319@01]
; [eval] !break1
(push) ; 36
; [then-branch: 2490 | break1@301@01 | live]
; [else-branch: 2490 | !(break1@301@01) | live]
(push) ; 37
; [then-branch: 2490 | break1@301@01]
(assert break1@301@01)
(pop) ; 37
(push) ; 37
; [else-branch: 2490 | !(break1@301@01)]
; [eval] !except1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 2491 | False | dead]
; [else-branch: 2491 | True | live]
(push) ; 35
; [else-branch: 2491 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 2492 | !(p2_0@320@01) | live]
; [else-branch: 2492 | p2_0@320@01 | live]
(push) ; 35
; [then-branch: 2492 | !(p2_0@320@01)]
(assert (not p2_0@320@01))
(pop) ; 35
(push) ; 35
; [else-branch: 2492 | p2_0@320@01]
(assert p2_0@320@01)
; [eval] !break2
(push) ; 36
; [then-branch: 2493 | break2@302@01 | live]
; [else-branch: 2493 | !(break2@302@01) | live]
(push) ; 37
; [then-branch: 2493 | break2@302@01]
(assert break2@302@01)
(pop) ; 37
(push) ; 37
; [else-branch: 2493 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 2494 | p2_0@320@01 && !(break2@302@01) && !(except2@296@01) | dead]
; [else-branch: 2494 | !(p2_0@320@01 && !(break2@302@01) && !(except2@296@01)) | live]
(push) ; 35
; [else-branch: 2494 | !(p2_0@320@01 && !(break2@302@01) && !(except2@296@01))]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 34
; [then-branch: 2495 | !(p1@16@01) | live]
; [else-branch: 2495 | p1@16@01 | live]
(push) ; 35
; [then-branch: 2495 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 35
(push) ; 35
; [else-branch: 2495 | p1@16@01]
(assert p1@16@01)
; [eval] !bypass1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@274@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@274@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2496 | p1@16@01 && !(bypass1@274@01) | live]
; [else-branch: 2496 | !(p1@16@01 && !(bypass1@274@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 2496 | p1@16@01 && !(bypass1@274@01)]
(assert (and p1@16@01 (not bypass1@274@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 34
; [then-branch: 2497 | !(p2@17@01) | live]
; [else-branch: 2497 | p2@17@01 | live]
(push) ; 35
; [then-branch: 2497 | !(p2@17@01)]
(pop) ; 35
(push) ; 35
; [else-branch: 2497 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 2498 | p2@17@01 && !(bypass2@275@01) | dead]
; [else-branch: 2498 | !(p2@17@01 && !(bypass2@275@01)) | live]
(push) ; 35
; [else-branch: 2498 | !(p2@17@01 && !(bypass2@275@01))]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p1 && !bypass1
(push) ; 34
; [then-branch: 2499 | !(p1@16@01) | live]
; [else-branch: 2499 | p1@16@01 | live]
(push) ; 35
; [then-branch: 2499 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 35
(push) ; 35
; [else-branch: 2499 | p1@16@01]
; [eval] !bypass1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@274@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@274@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2500 | p1@16@01 && !(bypass1@274@01) | live]
; [else-branch: 2500 | !(p1@16@01 && !(bypass1@274@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 2500 | p1@16@01 && !(bypass1@274@01)]
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] p2 && !bypass2
(push) ; 35
; [then-branch: 2501 | !(p2@17@01) | live]
; [else-branch: 2501 | p2@17@01 | live]
(push) ; 36
; [then-branch: 2501 | !(p2@17@01)]
(pop) ; 36
(push) ; 36
; [else-branch: 2501 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; [then-branch: 2502 | p2@17@01 && !(bypass2@275@01) | dead]
; [else-branch: 2502 | !(p2@17@01 && !(bypass2@275@01)) | live]
(push) ; 35
; [else-branch: 2502 | !(p2@17@01 && !(bypass2@275@01))]
; [eval] p1 && !bypass1 ==> issubtype(typeof(c_4.Container_value), int())
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 2503 | !(p1@16@01) | live]
; [else-branch: 2503 | p1@16@01 | live]
(push) ; 37
; [then-branch: 2503 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 2503 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@274@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@274@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2504 | p1@16@01 && !(bypass1@274@01) | live]
; [else-branch: 2504 | !(p1@16@01 && !(bypass1@274@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2504 | p1@16@01 && !(bypass1@274@01)]
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] issubtype(typeof(c_4.Container_value), int())
; [eval] typeof(c_4.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1@16@01 (not bypass1@274@01)))
(push) ; 36
(assert (not (=>
  (and p1@16@01 (not bypass1@274@01))
  (issubtype<Bool> (typeof<PyType> Container_value@327@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@274@01))
  (issubtype<Bool> (typeof<PyType> Container_value@327@01) (as int<PyType>  PyType))))
; [eval] p2 && !bypass2 ==> issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 2505 | !(p2@17@01) | live]
; [else-branch: 2505 | p2@17@01 | live]
(push) ; 37
; [then-branch: 2505 | !(p2@17@01)]
(pop) ; 37
(push) ; 37
; [else-branch: 2505 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
; [then-branch: 2506 | p2@17@01 && !(bypass2@275@01) | dead]
; [else-branch: 2506 | !(p2@17@01 && !(bypass2@275@01)) | live]
(push) ; 37
; [else-branch: 2506 | !(p2@17@01 && !(bypass2@275@01))]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] p1 && !bypass1 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 2507 | !(p1@16@01) | live]
; [else-branch: 2507 | p1@16@01 | live]
(push) ; 37
; [then-branch: 2507 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 2507 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@274@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@274@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2508 | p1@16@01 && !(bypass1@274@01) | live]
; [else-branch: 2508 | !(p1@16@01 && !(bypass1@274@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2508 | p1@16@01 && !(bypass1@274@01)]
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] !idle1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2509 | True | live]
; [else-branch: 2509 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 2509 | True]
; [eval] _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before@303@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before@303@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2510 | _loop_check_before@303@01 | live]
; [else-branch: 2510 | !(_loop_check_before@303@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 2510 | _loop_check_before@303@01]
(assert _loop_check_before@303@01)
; [eval] _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 2511 | False | live]
; [else-branch: 2511 | True | live]
(push) ; 43
; [then-branch: 2511 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 2511 | True]
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 44
; [then-branch: 2512 | False | live]
; [else-branch: 2512 | True | live]
(push) ; 45
; [then-branch: 2512 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 2512 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 46
; [then-branch: 2513 | False | live]
; [else-branch: 2513 | True | live]
(push) ; 47
; [then-branch: 2513 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 2513 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 48
; [then-branch: 2514 | False | live]
; [else-branch: 2514 | True | live]
(push) ; 49
; [then-branch: 2514 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 2514 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 2515 | False | live]
; [else-branch: 2515 | True | live]
(push) ; 51
; [then-branch: 2515 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 2515 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 2510 | !(_loop_check_before@303@01)]
(assert (not _loop_check_before@303@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before@303@01) _loop_check_before@303@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before@303@01) _loop_check_before@303@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@274@01))
  (and
    p1@16@01
    (not bypass1@274@01)
    (or (not _loop_check_before@303@01) _loop_check_before@303@01))))
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 2516 | !(p2@17@01) | live]
; [else-branch: 2516 | p2@17@01 | live]
(push) ; 37
; [then-branch: 2516 | !(p2@17@01)]
(pop) ; 37
(push) ; 37
; [else-branch: 2516 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
; [then-branch: 2517 | p2@17@01 && !(bypass2@275@01) | dead]
; [else-branch: 2517 | !(p2@17@01 && !(bypass2@275@01)) | live]
(push) ; 37
; [else-branch: 2517 | !(p2@17@01 && !(bypass2@275@01))]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] p1 && !bypass1 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 2518 | !(p1@16@01) | live]
; [else-branch: 2518 | p1@16@01 | live]
(push) ; 37
; [then-branch: 2518 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 2518 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@274@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@274@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2519 | p1@16@01 && !(bypass1@274@01) | live]
; [else-branch: 2519 | !(p1@16@01 && !(bypass1@274@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2519 | p1@16@01 && !(bypass1@274@01)]
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2520 | True | live]
; [else-branch: 2520 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 2520 | True]
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before@303@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before@303@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2521 | !(_loop_check_before@303@01) | live]
; [else-branch: 2521 | _loop_check_before@303@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 2521 | !(_loop_check_before@303@01)]
(assert (not _loop_check_before@303@01))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 42
; [then-branch: 2522 | False | live]
; [else-branch: 2522 | True | live]
(push) ; 43
; [then-branch: 2522 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 2522 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 44
; [then-branch: 2523 | False | live]
; [else-branch: 2523 | True | live]
(push) ; 45
; [then-branch: 2523 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 2523 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 2524 | False | live]
; [else-branch: 2524 | True | live]
(push) ; 47
; [then-branch: 2524 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 2524 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 2521 | _loop_check_before@303@01]
(assert _loop_check_before@303@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before@303@01 (not _loop_check_before@303@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before@303@01 (not _loop_check_before@303@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@274@01))
  (and
    p1@16@01
    (not bypass1@274@01)
    (or _loop_check_before@303@01 (not _loop_check_before@303@01)))))
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 2525 | !(p2@17@01) | live]
; [else-branch: 2525 | p2@17@01 | live]
(push) ; 37
; [then-branch: 2525 | !(p2@17@01)]
(pop) ; 37
(push) ; 37
; [else-branch: 2525 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
; [then-branch: 2526 | p2@17@01 && !(bypass2@275@01) | dead]
; [else-branch: 2526 | !(p2@17@01 && !(bypass2@275@01)) | live]
(push) ; 37
; [else-branch: 2526 | !(p2@17@01 && !(bypass2@275@01))]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_1 == except1
(push) ; 36
; [then-branch: 2527 | bypass1@274@01 | dead]
; [else-branch: 2527 | !(bypass1@274@01) | live]
(push) ; 37
; [else-branch: 2527 | !(bypass1@274@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_4 == break1
(push) ; 36
; [then-branch: 2528 | bypass1@274@01 | dead]
; [else-branch: 2528 | !(bypass1@274@01) | live]
(push) ; 37
; [else-branch: 2528 | !(bypass1@274@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_0 == Exception_res
(push) ; 36
; [then-branch: 2529 | bypass1@274@01 | dead]
; [else-branch: 2529 | !(bypass1@274@01) | live]
(push) ; 37
; [else-branch: 2529 | !(bypass1@274@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_2 == _err
(push) ; 36
; [then-branch: 2530 | bypass1@274@01 | dead]
; [else-branch: 2530 | !(bypass1@274@01) | live]
(push) ; 37
; [else-branch: 2530 | !(bypass1@274@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_3 == _loop_check_before
(push) ; 36
; [then-branch: 2531 | bypass1@274@01 | dead]
; [else-branch: 2531 | !(bypass1@274@01) | live]
(push) ; 37
; [else-branch: 2531 | !(bypass1@274@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1 == _loop_measures
(push) ; 36
; [then-branch: 2532 | bypass1@274@01 | dead]
; [else-branch: 2532 | !(bypass1@274@01) | live]
(push) ; 37
; [else-branch: 2532 | !(bypass1@274@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2 == _loop_measures_4
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2533 | bypass2@275@01 | live]
; [else-branch: 2533 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2533 | bypass2@275@01]
; [eval] tmp2 == _loop_measures_4
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_1 == except2
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2534 | bypass2@275@01 | live]
; [else-branch: 2534 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2534 | bypass2@275@01]
; [eval] tmp2_1 == except2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_3 == _loop_check_before_4
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2535 | bypass2@275@01 | live]
; [else-branch: 2535 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2535 | bypass2@275@01]
; [eval] tmp2_3 == _loop_check_before_4
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_4 == break2
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2536 | bypass2@275@01 | live]
; [else-branch: 2536 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2536 | bypass2@275@01]
; [eval] tmp2_4 == break2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_2 == _err_0
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2537 | bypass2@275@01 | live]
; [else-branch: 2537 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2537 | bypass2@275@01]
; [eval] tmp2_2 == _err_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_0 == Exception_res_2
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2538 | bypass2@275@01 | live]
; [else-branch: 2538 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2538 | bypass2@275@01]
; [eval] tmp2_0 == Exception_res_2
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 24
; [then-branch: 2539 | !(p1_1@321@01) | live]
; [else-branch: 2539 | p1_1@321@01 | live]
(push) ; 25
; [then-branch: 2539 | !(p1_1@321@01)]
(assert (not p1_1@321@01))
(pop) ; 25
(push) ; 25
; [else-branch: 2539 | p1_1@321@01]
(assert p1_1@321@01)
; [eval] !break1
(push) ; 26
; [then-branch: 2540 | break1@301@01 | live]
; [else-branch: 2540 | !(break1@301@01) | live]
(push) ; 27
; [then-branch: 2540 | break1@301@01]
(assert break1@301@01)
(pop) ; 27
(push) ; 27
; [else-branch: 2540 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2541 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01)) | dead]
; [else-branch: 2541 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 2541 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01)]
(assert (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01))))
(pop) ; 24
(pop) ; 23
(pop) ; 22
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 22
; [then-branch: 2542 | !(p1_1@321@01) | live]
; [else-branch: 2542 | p1_1@321@01 | live]
(push) ; 23
; [then-branch: 2542 | !(p1_1@321@01)]
(assert (not p1_1@321@01))
(pop) ; 23
(push) ; 23
; [else-branch: 2542 | p1_1@321@01]
(assert p1_1@321@01)
; [eval] !break1
(push) ; 24
; [then-branch: 2543 | break1@301@01 | live]
; [else-branch: 2543 | !(break1@301@01) | live]
(push) ; 25
; [then-branch: 2543 | break1@301@01]
(assert break1@301@01)
(pop) ; 25
(push) ; 25
; [else-branch: 2543 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2544 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01)) | dead]
; [else-branch: 2544 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01) | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 2544 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01)]
(assert (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01))))
(pop) ; 22
(pop) ; 21
(pop) ; 20
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 20
; [then-branch: 2545 | !(p1_1@321@01) | live]
; [else-branch: 2545 | p1_1@321@01 | live]
(push) ; 21
; [then-branch: 2545 | !(p1_1@321@01)]
(assert (not p1_1@321@01))
(pop) ; 21
(push) ; 21
; [else-branch: 2545 | p1_1@321@01]
(assert p1_1@321@01)
; [eval] !break1
(push) ; 22
; [then-branch: 2546 | break1@301@01 | live]
; [else-branch: 2546 | !(break1@301@01) | live]
(push) ; 23
; [then-branch: 2546 | break1@301@01]
(assert break1@301@01)
(pop) ; 23
(push) ; 23
; [else-branch: 2546 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2547 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01)) | dead]
; [else-branch: 2547 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01) | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 2547 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01)]
(assert (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01))))
(pop) ; 20
(pop) ; 19
(pop) ; 18
(push) ; 18
; [else-branch: 2405 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01))]
(assert (not (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01)))))
(pop) ; 18
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 18
; [then-branch: 2548 | !(p1_1@321@01) | live]
; [else-branch: 2548 | p1_1@321@01 | live]
(push) ; 19
; [then-branch: 2548 | !(p1_1@321@01)]
(assert (not p1_1@321@01))
(pop) ; 19
(push) ; 19
; [else-branch: 2548 | p1_1@321@01]
(assert p1_1@321@01)
; [eval] !break1
(push) ; 20
; [then-branch: 2549 | break1@301@01 | live]
; [else-branch: 2549 | !(break1@301@01) | live]
(push) ; 21
; [then-branch: 2549 | break1@301@01]
(assert break1@301@01)
(pop) ; 21
(push) ; 21
; [else-branch: 2549 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2550 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01)) | live]
; [else-branch: 2550 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01) | live]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 2550 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01))]
(assert (not (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01)))))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 19
; [then-branch: 2551 | !(p2_1@322@01) | live]
; [else-branch: 2551 | p2_1@322@01 | live]
(push) ; 20
; [then-branch: 2551 | !(p2_1@322@01)]
(assert (not p2_1@322@01))
(pop) ; 20
(push) ; 20
; [else-branch: 2551 | p2_1@322@01]
(assert p2_1@322@01)
; [eval] !break2
(push) ; 21
; [then-branch: 2552 | break2@302@01 | live]
; [else-branch: 2552 | !(break2@302@01) | live]
(push) ; 22
; [then-branch: 2552 | break2@302@01]
(assert break2@302@01)
(pop) ; 22
(push) ; 22
; [else-branch: 2552 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=> p2_1@322@01 (and p2_1@322@01 (or (not break2@302@01) break2@302@01))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_1@322@01 (and (not break2@302@01) (not except2@296@01))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2553 | p2_1@322@01 && !(break2@302@01) && !(except2@296@01) | dead]
; [else-branch: 2553 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01)) | live]
(set-option :timeout 0)
(push) ; 19
; [else-branch: 2553 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01))]
(assert (not (and p2_1@322@01 (and (not break2@302@01) (not except2@296@01)))))
(pop) ; 19
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 19
; [then-branch: 2554 | !(p2_1@322@01) | live]
; [else-branch: 2554 | p2_1@322@01 | live]
(push) ; 20
; [then-branch: 2554 | !(p2_1@322@01)]
(assert (not p2_1@322@01))
(pop) ; 20
(push) ; 20
; [else-branch: 2554 | p2_1@322@01]
(assert p2_1@322@01)
; [eval] !break2
(push) ; 21
; [then-branch: 2555 | break2@302@01 | live]
; [else-branch: 2555 | !(break2@302@01) | live]
(push) ; 22
; [then-branch: 2555 | break2@302@01]
(assert break2@302@01)
(pop) ; 22
(push) ; 22
; [else-branch: 2555 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_1@322@01 (and (not break2@302@01) (not except2@296@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_1@322@01 (and (not break2@302@01) (not except2@296@01))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2556 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01)) | live]
; [else-branch: 2556 | p2_1@322@01 && !(break2@302@01) && !(except2@296@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 2556 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01))]
(assert (not (and p2_1@322@01 (and (not break2@302@01) (not except2@296@01)))))
; [exec]
; tmp := new()
(declare-const tmp@331@01 $Ref)
(assert (not (= tmp@331@01 $Ref.null)))
(assert (not (= tmp@331@01 _err_0@295@01)))
(assert (not (= tmp@331@01 Exception_res@291@01)))
(assert (not (= tmp@331@01 tmp1_2@258@01)))
(assert (not (= tmp@331@01 _err_0@31@01)))
(assert (not (= tmp@331@01 _err@293@01)))
(assert (not
  (=
    tmp@331@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@305@01)))))))
(assert (not (= tmp@331@01 Exception_res_2@245@01)))
(assert (not (= tmp@331@01 c_9@25@01)))
(assert (not (= tmp@331@01 Exception_res_2@292@01)))
(assert (not (= tmp@331@01 _cthread_157_0@19@01)))
(assert (not (= tmp@331@01 b_9@27@01)))
(assert (not (= tmp@331@01 tmp1_0@254@01)))
(assert (not (= tmp@331@01 b@26@01)))
(assert (not (= tmp@331@01 _cthread_157@18@01)))
(assert (not (= tmp@331@01 c_4_0@231@01)))
(assert (not (= tmp@331@01 tmp@314@01)))
(assert (not (= tmp@331@01 c@24@01)))
(assert (not (= tmp@331@01 b_4_0@233@01)))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 20
; [then-branch: 2557 | !(p1_1@321@01) | live]
; [else-branch: 2557 | p1_1@321@01 | live]
(push) ; 21
; [then-branch: 2557 | !(p1_1@321@01)]
(assert (not p1_1@321@01))
(pop) ; 21
(push) ; 21
; [else-branch: 2557 | p1_1@321@01]
(assert p1_1@321@01)
; [eval] !break1
(push) ; 22
; [then-branch: 2558 | break1@301@01 | live]
; [else-branch: 2558 | !(break1@301@01) | live]
(push) ; 23
; [then-branch: 2558 | break1@301@01]
(assert break1@301@01)
(pop) ; 23
(push) ; 23
; [else-branch: 2558 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 2559 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01) | dead]
; [else-branch: 2559 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01)) | live]
(push) ; 20
; [else-branch: 2559 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01))]
(pop) ; 20
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 20
; [then-branch: 2560 | !(p1_1@321@01) | live]
; [else-branch: 2560 | p1_1@321@01 | live]
(push) ; 21
; [then-branch: 2560 | !(p1_1@321@01)]
(assert (not p1_1@321@01))
(pop) ; 21
(push) ; 21
; [else-branch: 2560 | p1_1@321@01]
(assert p1_1@321@01)
; [eval] !break1
(push) ; 22
; [then-branch: 2561 | break1@301@01 | live]
; [else-branch: 2561 | !(break1@301@01) | live]
(push) ; 23
; [then-branch: 2561 | break1@301@01]
(assert break1@301@01)
(pop) ; 23
(push) ; 23
; [else-branch: 2561 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2562 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01)) | live]
; [else-branch: 2562 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 2562 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01))]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 21
; [then-branch: 2563 | !(p2_1@322@01) | live]
; [else-branch: 2563 | p2_1@322@01 | live]
(push) ; 22
; [then-branch: 2563 | !(p2_1@322@01)]
(assert (not p2_1@322@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2563 | p2_1@322@01]
(assert p2_1@322@01)
; [eval] !break2
(push) ; 23
; [then-branch: 2564 | break2@302@01 | live]
; [else-branch: 2564 | !(break2@302@01) | live]
(push) ; 24
; [then-branch: 2564 | break2@302@01]
(assert break2@302@01)
(pop) ; 24
(push) ; 24
; [else-branch: 2564 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 2565 | p2_1@322@01 && !(break2@302@01) && !(except2@296@01) | dead]
; [else-branch: 2565 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01)) | live]
(push) ; 21
; [else-branch: 2565 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01))]
(pop) ; 21
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 21
; [then-branch: 2566 | !(p2_1@322@01) | live]
; [else-branch: 2566 | p2_1@322@01 | live]
(push) ; 22
; [then-branch: 2566 | !(p2_1@322@01)]
(assert (not p2_1@322@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2566 | p2_1@322@01]
(assert p2_1@322@01)
; [eval] !break2
(push) ; 23
; [then-branch: 2567 | break2@302@01 | live]
; [else-branch: 2567 | !(break2@302@01) | live]
(push) ; 24
; [then-branch: 2567 | break2@302@01]
(assert break2@302@01)
(pop) ; 24
(push) ; 24
; [else-branch: 2567 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@322@01 (and (not break2@302@01) (not except2@296@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2568 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01)) | live]
; [else-branch: 2568 | p2_1@322@01 && !(break2@302@01) && !(except2@296@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 2568 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01))]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 22
; [then-branch: 2569 | !(p1_1@321@01) | live]
; [else-branch: 2569 | p1_1@321@01 | live]
(push) ; 23
; [then-branch: 2569 | !(p1_1@321@01)]
(assert (not p1_1@321@01))
(pop) ; 23
(push) ; 23
; [else-branch: 2569 | p1_1@321@01]
(assert p1_1@321@01)
; [eval] !break1
(push) ; 24
; [then-branch: 2570 | break1@301@01 | live]
; [else-branch: 2570 | !(break1@301@01) | live]
(push) ; 25
; [then-branch: 2570 | break1@301@01]
(assert break1@301@01)
(pop) ; 25
(push) ; 25
; [else-branch: 2570 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 2571 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01) | dead]
; [else-branch: 2571 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01)) | live]
(push) ; 22
; [else-branch: 2571 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01))]
(pop) ; 22
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 22
; [then-branch: 2572 | !(p1_1@321@01) | live]
; [else-branch: 2572 | p1_1@321@01 | live]
(push) ; 23
; [then-branch: 2572 | !(p1_1@321@01)]
(assert (not p1_1@321@01))
(pop) ; 23
(push) ; 23
; [else-branch: 2572 | p1_1@321@01]
(assert p1_1@321@01)
; [eval] !break1
(push) ; 24
; [then-branch: 2573 | break1@301@01 | live]
; [else-branch: 2573 | !(break1@301@01) | live]
(push) ; 25
; [then-branch: 2573 | break1@301@01]
(assert break1@301@01)
(pop) ; 25
(push) ; 25
; [else-branch: 2573 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2574 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01)) | live]
; [else-branch: 2574 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 2574 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01))]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 23
; [then-branch: 2575 | !(p2_1@322@01) | live]
; [else-branch: 2575 | p2_1@322@01 | live]
(push) ; 24
; [then-branch: 2575 | !(p2_1@322@01)]
(assert (not p2_1@322@01))
(pop) ; 24
(push) ; 24
; [else-branch: 2575 | p2_1@322@01]
(assert p2_1@322@01)
; [eval] !break2
(push) ; 25
; [then-branch: 2576 | break2@302@01 | live]
; [else-branch: 2576 | !(break2@302@01) | live]
(push) ; 26
; [then-branch: 2576 | break2@302@01]
(assert break2@302@01)
(pop) ; 26
(push) ; 26
; [else-branch: 2576 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 2577 | p2_1@322@01 && !(break2@302@01) && !(except2@296@01) | dead]
; [else-branch: 2577 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01)) | live]
(push) ; 23
; [else-branch: 2577 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01))]
(pop) ; 23
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 23
; [then-branch: 2578 | !(p2_1@322@01) | live]
; [else-branch: 2578 | p2_1@322@01 | live]
(push) ; 24
; [then-branch: 2578 | !(p2_1@322@01)]
(assert (not p2_1@322@01))
(pop) ; 24
(push) ; 24
; [else-branch: 2578 | p2_1@322@01]
(assert p2_1@322@01)
; [eval] !break2
(push) ; 25
; [then-branch: 2579 | break2@302@01 | live]
; [else-branch: 2579 | !(break2@302@01) | live]
(push) ; 26
; [then-branch: 2579 | break2@302@01]
(assert break2@302@01)
(pop) ; 26
(push) ; 26
; [else-branch: 2579 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_1@322@01 (and (not break2@302@01) (not except2@296@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2580 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01)) | live]
; [else-branch: 2580 | p2_1@322@01 && !(break2@302@01) && !(except2@296@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 2580 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01))]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 24
; [then-branch: 2581 | !(p1_1@321@01) | live]
; [else-branch: 2581 | p1_1@321@01 | live]
(push) ; 25
; [then-branch: 2581 | !(p1_1@321@01)]
(assert (not p1_1@321@01))
(pop) ; 25
(push) ; 25
; [else-branch: 2581 | p1_1@321@01]
(assert p1_1@321@01)
; [eval] !break1
(push) ; 26
; [then-branch: 2582 | break1@301@01 | live]
; [else-branch: 2582 | !(break1@301@01) | live]
(push) ; 27
; [then-branch: 2582 | break1@301@01]
(assert break1@301@01)
(pop) ; 27
(push) ; 27
; [else-branch: 2582 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 2583 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01) | dead]
; [else-branch: 2583 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01)) | live]
(push) ; 24
; [else-branch: 2583 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01))]
(pop) ; 24
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 24
; [then-branch: 2584 | !(p1_1@321@01) | live]
; [else-branch: 2584 | p1_1@321@01 | live]
(push) ; 25
; [then-branch: 2584 | !(p1_1@321@01)]
(assert (not p1_1@321@01))
(pop) ; 25
(push) ; 25
; [else-branch: 2584 | p1_1@321@01]
(assert p1_1@321@01)
; [eval] !break1
(push) ; 26
; [then-branch: 2585 | break1@301@01 | live]
; [else-branch: 2585 | !(break1@301@01) | live]
(push) ; 27
; [then-branch: 2585 | break1@301@01]
(assert break1@301@01)
(pop) ; 27
(push) ; 27
; [else-branch: 2585 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2586 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01)) | live]
; [else-branch: 2586 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 2586 | !(p1_1@321@01 && !(break1@301@01) && !(except1@294@01))]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 25
; [then-branch: 2587 | !(p2_1@322@01) | live]
; [else-branch: 2587 | p2_1@322@01 | live]
(push) ; 26
; [then-branch: 2587 | !(p2_1@322@01)]
(assert (not p2_1@322@01))
(pop) ; 26
(push) ; 26
; [else-branch: 2587 | p2_1@322@01]
(assert p2_1@322@01)
; [eval] !break2
(push) ; 27
; [then-branch: 2588 | break2@302@01 | live]
; [else-branch: 2588 | !(break2@302@01) | live]
(push) ; 28
; [then-branch: 2588 | break2@302@01]
(assert break2@302@01)
(pop) ; 28
(push) ; 28
; [else-branch: 2588 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 2589 | p2_1@322@01 && !(break2@302@01) && !(except2@296@01) | dead]
; [else-branch: 2589 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01)) | live]
(push) ; 25
; [else-branch: 2589 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01))]
(pop) ; 25
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 25
; [then-branch: 2590 | !(p2_1@322@01) | live]
; [else-branch: 2590 | p2_1@322@01 | live]
(push) ; 26
; [then-branch: 2590 | !(p2_1@322@01)]
(assert (not p2_1@322@01))
(pop) ; 26
(push) ; 26
; [else-branch: 2590 | p2_1@322@01]
(assert p2_1@322@01)
; [eval] !break2
(push) ; 27
; [then-branch: 2591 | break2@302@01 | live]
; [else-branch: 2591 | !(break2@302@01) | live]
(push) ; 28
; [then-branch: 2591 | break2@302@01]
(assert break2@302@01)
(pop) ; 28
(push) ; 28
; [else-branch: 2591 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@322@01 (and (not break2@302@01) (not except2@296@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2592 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01)) | live]
; [else-branch: 2592 | p2_1@322@01 && !(break2@302@01) && !(except2@296@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 2592 | !(p2_1@322@01 && !(break2@302@01) && !(except2@296@01))]
; [exec]
; p1_3 := p3 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p3 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 2593 | !(p3@323@01) | live]
; [else-branch: 2593 | p3@323@01 | live]
(push) ; 27
; [then-branch: 2593 | !(p3@323@01)]
(assert (not p3@323@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2593 | p3@323@01]
(assert p3@323@01)
; [eval] !break1
(push) ; 28
; [then-branch: 2594 | break1@301@01 | live]
; [else-branch: 2594 | !(break1@301@01) | live]
(push) ; 29
; [then-branch: 2594 | break1@301@01]
(assert break1@301@01)
(pop) ; 29
(push) ; 29
; [else-branch: 2594 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(push) ; 30
; [then-branch: 2595 | except1@294@01 | live]
; [else-branch: 2595 | !(except1@294@01) | live]
(push) ; 31
; [then-branch: 2595 | except1@294@01]
(assert except1@294@01)
(pop) ; 31
(push) ; 31
; [else-branch: 2595 | !(except1@294@01)]
(assert (not except1@294@01))
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1@294@01) except1@294@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@301@01)
  (and (not break1@301@01) (or (not except1@294@01) except1@294@01))))
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p3@323@01
  (and
    p3@323@01
    (=>
      (not break1@301@01)
      (and (not break1@301@01) (or (not except1@294@01) except1@294@01)))
    (or (not break1@301@01) break1@301@01))))
(assert (or p3@323@01 (not p3@323@01)))
; [exec]
; p2_3 := p4 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p4 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 2596 | !(p4@324@01) | live]
; [else-branch: 2596 | p4@324@01 | live]
(push) ; 27
; [then-branch: 2596 | !(p4@324@01)]
(assert (not p4@324@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2596 | p4@324@01]
(assert p4@324@01)
; [eval] !break2
(push) ; 28
; [then-branch: 2597 | break2@302@01 | live]
; [else-branch: 2597 | !(break2@302@01) | live]
(push) ; 29
; [then-branch: 2597 | break2@302@01]
(assert break2@302@01)
(pop) ; 29
(push) ; 29
; [else-branch: 2597 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(push) ; 30
; [then-branch: 2598 | except2@296@01 | live]
; [else-branch: 2598 | !(except2@296@01) | live]
(push) ; 31
; [then-branch: 2598 | except2@296@01]
(assert except2@296@01)
(pop) ; 31
(push) ; 31
; [else-branch: 2598 | !(except2@296@01)]
(assert (not except2@296@01))
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2@296@01) except2@296@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@302@01)
  (and (not break2@302@01) (or (not except2@296@01) except2@296@01))))
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p4@324@01
  (and
    p4@324@01
    (=>
      (not break2@302@01)
      (and (not break2@302@01) (or (not except2@296@01) except2@296@01)))
    (or (not break2@302@01) break2@302@01))))
(assert (or p4@324@01 (not p4@324@01)))
; [exec]
; p3_1 := p3 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p3 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 2599 | !(p3@323@01) | live]
; [else-branch: 2599 | p3@323@01 | live]
(push) ; 27
; [then-branch: 2599 | !(p3@323@01)]
(assert (not p3@323@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2599 | p3@323@01]
(assert p3@323@01)
; [eval] !break1
(push) ; 28
; [then-branch: 2600 | break1@301@01 | live]
; [else-branch: 2600 | !(break1@301@01) | live]
(push) ; 29
; [then-branch: 2600 | break1@301@01]
(assert break1@301@01)
(pop) ; 29
(push) ; 29
; [else-branch: 2600 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(push) ; 30
; [then-branch: 2601 | except1@294@01 | live]
; [else-branch: 2601 | !(except1@294@01) | live]
(push) ; 31
; [then-branch: 2601 | except1@294@01]
(assert except1@294@01)
(pop) ; 31
(push) ; 31
; [else-branch: 2601 | !(except1@294@01)]
(assert (not except1@294@01))
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1@294@01) except1@294@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@301@01)
  (and (not break1@301@01) (or (not except1@294@01) except1@294@01))))
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p3_1@332@01 Bool)
(assert (= p3_1@332@01 (and p3@323@01 (and (not break1@301@01) (not except1@294@01)))))
; [exec]
; p4_1 := p4 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p4 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 2602 | !(p4@324@01) | live]
; [else-branch: 2602 | p4@324@01 | live]
(push) ; 27
; [then-branch: 2602 | !(p4@324@01)]
(assert (not p4@324@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2602 | p4@324@01]
(assert p4@324@01)
; [eval] !break2
(push) ; 28
; [then-branch: 2603 | break2@302@01 | live]
; [else-branch: 2603 | !(break2@302@01) | live]
(push) ; 29
; [then-branch: 2603 | break2@302@01]
(assert break2@302@01)
(pop) ; 29
(push) ; 29
; [else-branch: 2603 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(push) ; 30
; [then-branch: 2604 | except2@296@01 | live]
; [else-branch: 2604 | !(except2@296@01) | live]
(push) ; 31
; [then-branch: 2604 | except2@296@01]
(assert except2@296@01)
(pop) ; 31
(push) ; 31
; [else-branch: 2604 | !(except2@296@01)]
(assert (not except2@296@01))
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2@296@01) except2@296@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@302@01)
  (and (not break2@302@01) (or (not except2@296@01) except2@296@01))))
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p4_1@333@01 Bool)
(assert (= p4_1@333@01 (and p4@324@01 (and (not break2@302@01) (not except2@296@01)))))
; [eval] p1_3 && (!break1 && !except1)
; [then-branch: 2605 | False | dead]
; [else-branch: 2605 | True | live]
(push) ; 26
; [else-branch: 2605 | True]
(pop) ; 26
; [eval] !(p1_3 && (!break1 && !except1))
; [eval] p1_3 && (!break1 && !except1)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2606 | True | live]
; [else-branch: 2606 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 2606 | True]
; [eval] p2_3 && (!break2 && !except2)
; [then-branch: 2607 | False | dead]
; [else-branch: 2607 | True | live]
(push) ; 27
; [else-branch: 2607 | True]
(pop) ; 27
; [eval] !(p2_3 && (!break2 && !except2))
; [eval] p2_3 && (!break2 && !except2)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2608 | True | live]
; [else-branch: 2608 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 2608 | True]
; [eval] p3 && (!break1 && !except1)
(push) ; 28
; [then-branch: 2609 | !(p3@323@01) | live]
; [else-branch: 2609 | p3@323@01 | live]
(push) ; 29
; [then-branch: 2609 | !(p3@323@01)]
(assert (not p3@323@01))
(pop) ; 29
(push) ; 29
; [else-branch: 2609 | p3@323@01]
(assert p3@323@01)
; [eval] !break1
(push) ; 30
; [then-branch: 2610 | break1@301@01 | live]
; [else-branch: 2610 | !(break1@301@01) | live]
(push) ; 31
; [then-branch: 2610 | break1@301@01]
(assert break1@301@01)
(pop) ; 31
(push) ; 31
; [else-branch: 2610 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=> p3@323@01 (and p3@323@01 (or (not break1@301@01) break1@301@01))))
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3@323@01 (and (not break1@301@01) (not except1@294@01))))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3@323@01 (and (not break1@301@01) (not except1@294@01)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2611 | p3@323@01 && !(break1@301@01) && !(except1@294@01) | live]
; [else-branch: 2611 | !(p3@323@01 && !(break1@301@01) && !(except1@294@01)) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2611 | p3@323@01 && !(break1@301@01) && !(except1@294@01)]
(assert (and p3@323@01 (and (not break1@301@01) (not except1@294@01))))
; [exec]
; c_4.Container_value := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 29
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 29
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_value@334@01 $Ref)
(assert (= Container_value@334@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p4 && (!break2 && !except2)
(push) ; 29
; [then-branch: 2612 | !(p4@324@01) | live]
; [else-branch: 2612 | p4@324@01 | live]
(push) ; 30
; [then-branch: 2612 | !(p4@324@01)]
(assert (not p4@324@01))
(pop) ; 30
(push) ; 30
; [else-branch: 2612 | p4@324@01]
(assert p4@324@01)
; [eval] !break2
(push) ; 31
; [then-branch: 2613 | break2@302@01 | live]
; [else-branch: 2613 | !(break2@302@01) | live]
(push) ; 32
; [then-branch: 2613 | break2@302@01]
(assert break2@302@01)
(pop) ; 32
(push) ; 32
; [else-branch: 2613 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p4@324@01 (and p4@324@01 (or (not break2@302@01) break2@302@01))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4@324@01 (and (not break2@302@01) (not except2@296@01))))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2614 | p4@324@01 && !(break2@302@01) && !(except2@296@01) | dead]
; [else-branch: 2614 | !(p4@324@01 && !(break2@302@01) && !(except2@296@01)) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 2614 | !(p4@324@01 && !(break2@302@01) && !(except2@296@01))]
(assert (not (and p4@324@01 (and (not break2@302@01) (not except2@296@01)))))
(pop) ; 29
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 29
; [then-branch: 2615 | !(p4@324@01) | live]
; [else-branch: 2615 | p4@324@01 | live]
(push) ; 30
; [then-branch: 2615 | !(p4@324@01)]
(assert (not p4@324@01))
(pop) ; 30
(push) ; 30
; [else-branch: 2615 | p4@324@01]
(assert p4@324@01)
; [eval] !break2
(push) ; 31
; [then-branch: 2616 | break2@302@01 | live]
; [else-branch: 2616 | !(break2@302@01) | live]
(push) ; 32
; [then-branch: 2616 | break2@302@01]
(assert break2@302@01)
(pop) ; 32
(push) ; 32
; [else-branch: 2616 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4@324@01 (and (not break2@302@01) (not except2@296@01)))))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4@324@01 (and (not break2@302@01) (not except2@296@01))))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2617 | !(p4@324@01 && !(break2@302@01) && !(except2@296@01)) | live]
; [else-branch: 2617 | p4@324@01 && !(break2@302@01) && !(except2@296@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 2617 | !(p4@324@01 && !(break2@302@01) && !(except2@296@01))]
(assert (not (and p4@324@01 (and (not break2@302@01) (not except2@296@01)))))
; [eval] p3 && (!break1 && !except1)
(push) ; 30
; [then-branch: 2618 | !(p3@323@01) | live]
; [else-branch: 2618 | p3@323@01 | live]
(push) ; 31
; [then-branch: 2618 | !(p3@323@01)]
(assert (not p3@323@01))
(pop) ; 31
(push) ; 31
; [else-branch: 2618 | p3@323@01]
; [eval] !break1
(push) ; 32
; [then-branch: 2619 | break1@301@01 | live]
; [else-branch: 2619 | !(break1@301@01) | live]
(push) ; 33
; [then-branch: 2619 | break1@301@01]
(assert break1@301@01)
(pop) ; 33
(push) ; 33
; [else-branch: 2619 | !(break1@301@01)]
; [eval] !except1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (=> p3@323@01 (or (not break1@301@01) break1@301@01)))
(push) ; 30
(set-option :timeout 10)
(assert (not (not (and p3@323@01 (and (not break1@301@01) (not except1@294@01))))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3@323@01 (and (not break1@301@01) (not except1@294@01)))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2620 | p3@323@01 && !(break1@301@01) && !(except1@294@01) | live]
; [else-branch: 2620 | !(p3@323@01 && !(break1@301@01) && !(except1@294@01)) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2620 | p3@323@01 && !(break1@301@01) && !(except1@294@01)]
(assert (and p3@323@01 (and (not break1@301@01) (not except1@294@01))))
; [exec]
; break1 := true
; [eval] p4 && (!break2 && !except2)
(push) ; 31
; [then-branch: 2621 | !(p4@324@01) | live]
; [else-branch: 2621 | p4@324@01 | live]
(push) ; 32
; [then-branch: 2621 | !(p4@324@01)]
(assert (not p4@324@01))
(pop) ; 32
(push) ; 32
; [else-branch: 2621 | p4@324@01]
(assert p4@324@01)
; [eval] !break2
(push) ; 33
; [then-branch: 2622 | break2@302@01 | live]
; [else-branch: 2622 | !(break2@302@01) | live]
(push) ; 34
; [then-branch: 2622 | break2@302@01]
(assert break2@302@01)
(pop) ; 34
(push) ; 34
; [else-branch: 2622 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 2623 | p4@324@01 && !(break2@302@01) && !(except2@296@01) | dead]
; [else-branch: 2623 | !(p4@324@01 && !(break2@302@01) && !(except2@296@01)) | live]
(push) ; 31
; [else-branch: 2623 | !(p4@324@01 && !(break2@302@01) && !(except2@296@01))]
(pop) ; 31
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 31
; [then-branch: 2624 | !(p4@324@01) | live]
; [else-branch: 2624 | p4@324@01 | live]
(push) ; 32
; [then-branch: 2624 | !(p4@324@01)]
(assert (not p4@324@01))
(pop) ; 32
(push) ; 32
; [else-branch: 2624 | p4@324@01]
(assert p4@324@01)
; [eval] !break2
(push) ; 33
; [then-branch: 2625 | break2@302@01 | live]
; [else-branch: 2625 | !(break2@302@01) | live]
(push) ; 34
; [then-branch: 2625 | break2@302@01]
(assert break2@302@01)
(pop) ; 34
(push) ; 34
; [else-branch: 2625 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4@324@01 (and (not break2@302@01) (not except2@296@01)))))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2626 | !(p4@324@01 && !(break2@302@01) && !(except2@296@01)) | live]
; [else-branch: 2626 | p4@324@01 && !(break2@302@01) && !(except2@296@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 2626 | !(p4@324@01 && !(break2@302@01) && !(except2@296@01))]
; [eval] p1_0 && (!break1 && !except1)
(push) ; 32
; [then-branch: 2627 | !(p1_0@319@01) | live]
; [else-branch: 2627 | p1_0@319@01 | live]
(push) ; 33
; [then-branch: 2627 | !(p1_0@319@01)]
(assert (not p1_0@319@01))
(pop) ; 33
(push) ; 33
; [else-branch: 2627 | p1_0@319@01]
; [eval] !break1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 2628 | False | dead]
; [else-branch: 2628 | True | live]
(push) ; 32
; [else-branch: 2628 | True]
(pop) ; 32
; [eval] !(p1_0 && (!break1 && !except1))
; [eval] p1_0 && (!break1 && !except1)
(push) ; 32
; [then-branch: 2629 | !(p1_0@319@01) | live]
; [else-branch: 2629 | p1_0@319@01 | live]
(push) ; 33
; [then-branch: 2629 | !(p1_0@319@01)]
(assert (not p1_0@319@01))
(pop) ; 33
(push) ; 33
; [else-branch: 2629 | p1_0@319@01]
; [eval] !break1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2630 | True | live]
; [else-branch: 2630 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2630 | True]
; [eval] p2_0 && (!break2 && !except2)
(push) ; 33
; [then-branch: 2631 | !(p2_0@320@01) | live]
; [else-branch: 2631 | p2_0@320@01 | live]
(push) ; 34
; [then-branch: 2631 | !(p2_0@320@01)]
(assert (not p2_0@320@01))
(pop) ; 34
(push) ; 34
; [else-branch: 2631 | p2_0@320@01]
(assert p2_0@320@01)
; [eval] !break2
(push) ; 35
; [then-branch: 2632 | break2@302@01 | live]
; [else-branch: 2632 | !(break2@302@01) | live]
(push) ; 36
; [then-branch: 2632 | break2@302@01]
(assert break2@302@01)
(pop) ; 36
(push) ; 36
; [else-branch: 2632 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 2633 | p2_0@320@01 && !(break2@302@01) && !(except2@296@01) | dead]
; [else-branch: 2633 | !(p2_0@320@01 && !(break2@302@01) && !(except2@296@01)) | live]
(push) ; 33
; [else-branch: 2633 | !(p2_0@320@01 && !(break2@302@01) && !(except2@296@01))]
(pop) ; 33
; [eval] !(p2_0 && (!break2 && !except2))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 33
; [then-branch: 2634 | !(p2_0@320@01) | live]
; [else-branch: 2634 | p2_0@320@01 | live]
(push) ; 34
; [then-branch: 2634 | !(p2_0@320@01)]
(assert (not p2_0@320@01))
(pop) ; 34
(push) ; 34
; [else-branch: 2634 | p2_0@320@01]
(assert p2_0@320@01)
; [eval] !break2
(push) ; 35
; [then-branch: 2635 | break2@302@01 | live]
; [else-branch: 2635 | !(break2@302@01) | live]
(push) ; 36
; [then-branch: 2635 | break2@302@01]
(assert break2@302@01)
(pop) ; 36
(push) ; 36
; [else-branch: 2635 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not (and p2_0@320@01 (and (not break2@302@01) (not except2@296@01)))))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2636 | !(p2_0@320@01 && !(break2@302@01) && !(except2@296@01)) | live]
; [else-branch: 2636 | p2_0@320@01 && !(break2@302@01) && !(except2@296@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 2636 | !(p2_0@320@01 && !(break2@302@01) && !(except2@296@01))]
; [exec]
; assert (p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true) &&
;   (p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true)
; [eval] p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true
; [eval] p1_0 && (!break1 && !except1)
(push) ; 34
; [then-branch: 2637 | !(p1_0@319@01) | live]
; [else-branch: 2637 | p1_0@319@01 | live]
(push) ; 35
; [then-branch: 2637 | !(p1_0@319@01)]
(assert (not p1_0@319@01))
(pop) ; 35
(push) ; 35
; [else-branch: 2637 | p1_0@319@01]
; [eval] !break1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 2638 | False | dead]
; [else-branch: 2638 | True | live]
(push) ; 35
; [else-branch: 2638 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 2639 | !(p2_0@320@01) | live]
; [else-branch: 2639 | p2_0@320@01 | live]
(push) ; 35
; [then-branch: 2639 | !(p2_0@320@01)]
(assert (not p2_0@320@01))
(pop) ; 35
(push) ; 35
; [else-branch: 2639 | p2_0@320@01]
(assert p2_0@320@01)
; [eval] !break2
(push) ; 36
; [then-branch: 2640 | break2@302@01 | live]
; [else-branch: 2640 | !(break2@302@01) | live]
(push) ; 37
; [then-branch: 2640 | break2@302@01]
(assert break2@302@01)
(pop) ; 37
(push) ; 37
; [else-branch: 2640 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 2641 | p2_0@320@01 && !(break2@302@01) && !(except2@296@01) | dead]
; [else-branch: 2641 | !(p2_0@320@01 && !(break2@302@01) && !(except2@296@01)) | live]
(push) ; 35
; [else-branch: 2641 | !(p2_0@320@01 && !(break2@302@01) && !(except2@296@01))]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 34
; [then-branch: 2642 | !(p1@16@01) | live]
; [else-branch: 2642 | p1@16@01 | live]
(push) ; 35
; [then-branch: 2642 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 35
(push) ; 35
; [else-branch: 2642 | p1@16@01]
(assert p1@16@01)
; [eval] !bypass1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@274@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@274@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2643 | p1@16@01 && !(bypass1@274@01) | live]
; [else-branch: 2643 | !(p1@16@01 && !(bypass1@274@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 2643 | p1@16@01 && !(bypass1@274@01)]
(assert (and p1@16@01 (not bypass1@274@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 34
; [then-branch: 2644 | !(p2@17@01) | live]
; [else-branch: 2644 | p2@17@01 | live]
(push) ; 35
; [then-branch: 2644 | !(p2@17@01)]
(pop) ; 35
(push) ; 35
; [else-branch: 2644 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 2645 | p2@17@01 && !(bypass2@275@01) | dead]
; [else-branch: 2645 | !(p2@17@01 && !(bypass2@275@01)) | live]
(push) ; 35
; [else-branch: 2645 | !(p2@17@01 && !(bypass2@275@01))]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p1 && !bypass1
(push) ; 34
; [then-branch: 2646 | !(p1@16@01) | live]
; [else-branch: 2646 | p1@16@01 | live]
(push) ; 35
; [then-branch: 2646 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 35
(push) ; 35
; [else-branch: 2646 | p1@16@01]
; [eval] !bypass1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@274@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@274@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2647 | p1@16@01 && !(bypass1@274@01) | live]
; [else-branch: 2647 | !(p1@16@01 && !(bypass1@274@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 2647 | p1@16@01 && !(bypass1@274@01)]
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] p2 && !bypass2
(push) ; 35
; [then-branch: 2648 | !(p2@17@01) | live]
; [else-branch: 2648 | p2@17@01 | live]
(push) ; 36
; [then-branch: 2648 | !(p2@17@01)]
(pop) ; 36
(push) ; 36
; [else-branch: 2648 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; [then-branch: 2649 | p2@17@01 && !(bypass2@275@01) | dead]
; [else-branch: 2649 | !(p2@17@01 && !(bypass2@275@01)) | live]
(push) ; 35
; [else-branch: 2649 | !(p2@17@01 && !(bypass2@275@01))]
; [eval] p1 && !bypass1 ==> issubtype(typeof(c_4.Container_value), int())
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 2650 | !(p1@16@01) | live]
; [else-branch: 2650 | p1@16@01 | live]
(push) ; 37
; [then-branch: 2650 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 2650 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@274@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@274@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2651 | p1@16@01 && !(bypass1@274@01) | live]
; [else-branch: 2651 | !(p1@16@01 && !(bypass1@274@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2651 | p1@16@01 && !(bypass1@274@01)]
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] issubtype(typeof(c_4.Container_value), int())
; [eval] typeof(c_4.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1@16@01 (not bypass1@274@01)))
(push) ; 36
(assert (not (=>
  (and p1@16@01 (not bypass1@274@01))
  (issubtype<Bool> (typeof<PyType> Container_value@334@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@274@01))
  (issubtype<Bool> (typeof<PyType> Container_value@334@01) (as int<PyType>  PyType))))
; [eval] p2 && !bypass2 ==> issubtype(typeof(c_4_0.Container_valuep), int())
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 2652 | !(p2@17@01) | live]
; [else-branch: 2652 | p2@17@01 | live]
(push) ; 37
; [then-branch: 2652 | !(p2@17@01)]
(pop) ; 37
(push) ; 37
; [else-branch: 2652 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
; [then-branch: 2653 | p2@17@01 && !(bypass2@275@01) | dead]
; [else-branch: 2653 | !(p2@17@01 && !(bypass2@275@01)) | live]
(push) ; 37
; [else-branch: 2653 | !(p2@17@01 && !(bypass2@275@01))]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] p1 && !bypass1 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 2654 | !(p1@16@01) | live]
; [else-branch: 2654 | p1@16@01 | live]
(push) ; 37
; [then-branch: 2654 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 2654 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@274@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@274@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2655 | p1@16@01 && !(bypass1@274@01) | live]
; [else-branch: 2655 | !(p1@16@01 && !(bypass1@274@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2655 | p1@16@01 && !(bypass1@274@01)]
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] !idle1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2656 | True | live]
; [else-branch: 2656 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 2656 | True]
; [eval] _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before@303@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before@303@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2657 | _loop_check_before@303@01 | live]
; [else-branch: 2657 | !(_loop_check_before@303@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 2657 | _loop_check_before@303@01]
(assert _loop_check_before@303@01)
; [eval] _loop_termination_flag || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 2658 | False | live]
; [else-branch: 2658 | True | live]
(push) ; 43
; [then-branch: 2658 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 2658 | True]
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 44
; [then-branch: 2659 | False | live]
; [else-branch: 2659 | True | live]
(push) ; 45
; [then-branch: 2659 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 2659 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 46
; [then-branch: 2660 | False | live]
; [else-branch: 2660 | True | live]
(push) ; 47
; [then-branch: 2660 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 2660 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 48
; [then-branch: 2661 | False | live]
; [else-branch: 2661 | True | live]
(push) ; 49
; [then-branch: 2661 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 2661 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 2662 | False | live]
; [else-branch: 2662 | True | live]
(push) ; 51
; [then-branch: 2662 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 2662 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 2657 | !(_loop_check_before@303@01)]
(assert (not _loop_check_before@303@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before@303@01) _loop_check_before@303@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before@303@01) _loop_check_before@303@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@274@01))
  (and
    p1@16@01
    (not bypass1@274@01)
    (or (not _loop_check_before@303@01) _loop_check_before@303@01))))
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 2663 | !(p2@17@01) | live]
; [else-branch: 2663 | p2@17@01 | live]
(push) ; 37
; [then-branch: 2663 | !(p2@17@01)]
(pop) ; 37
(push) ; 37
; [else-branch: 2663 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
; [then-branch: 2664 | p2@17@01 && !(bypass2@275@01) | dead]
; [else-branch: 2664 | !(p2@17@01 && !(bypass2@275@01)) | live]
(push) ; 37
; [else-branch: 2664 | !(p2@17@01 && !(bypass2@275@01))]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] p1 && !bypass1 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] p1 && !bypass1
(push) ; 36
; [then-branch: 2665 | !(p1@16@01) | live]
; [else-branch: 2665 | p1@16@01 | live]
(push) ; 37
; [then-branch: 2665 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 37
(push) ; 37
; [else-branch: 2665 | p1@16@01]
; [eval] !bypass1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@274@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@274@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2666 | p1@16@01 && !(bypass1@274@01) | live]
; [else-branch: 2666 | !(p1@16@01 && !(bypass1@274@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2666 | p1@16@01 && !(bypass1@274@01)]
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2667 | True | live]
; [else-branch: 2667 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 2667 | True]
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before@303@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before@303@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2668 | !(_loop_check_before@303@01) | live]
; [else-branch: 2668 | _loop_check_before@303@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 2668 | !(_loop_check_before@303@01)]
(assert (not _loop_check_before@303@01))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 42
; [then-branch: 2669 | False | live]
; [else-branch: 2669 | True | live]
(push) ; 43
; [then-branch: 2669 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 2669 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 44
; [then-branch: 2670 | False | live]
; [else-branch: 2670 | True | live]
(push) ; 45
; [then-branch: 2670 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 2670 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 2671 | False | live]
; [else-branch: 2671 | True | live]
(push) ; 47
; [then-branch: 2671 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 2671 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 2668 | _loop_check_before@303@01]
(assert _loop_check_before@303@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before@303@01 (not _loop_check_before@303@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before@303@01 (not _loop_check_before@303@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@274@01))
  (and
    p1@16@01
    (not bypass1@274@01)
    (or _loop_check_before@303@01 (not _loop_check_before@303@01)))))
(assert (and p1@16@01 (not bypass1@274@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> !_loop_check_before_4 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] p2 && !bypass2
(push) ; 36
; [then-branch: 2672 | !(p2@17@01) | live]
; [else-branch: 2672 | p2@17@01 | live]
(push) ; 37
; [then-branch: 2672 | !(p2@17@01)]
(pop) ; 37
(push) ; 37
; [else-branch: 2672 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
; [then-branch: 2673 | p2@17@01 && !(bypass2@275@01) | dead]
; [else-branch: 2673 | !(p2@17@01 && !(bypass2@275@01)) | live]
(push) ; 37
; [else-branch: 2673 | !(p2@17@01 && !(bypass2@275@01))]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_1 == except1
(push) ; 36
; [then-branch: 2674 | bypass1@274@01 | dead]
; [else-branch: 2674 | !(bypass1@274@01) | live]
(push) ; 37
; [else-branch: 2674 | !(bypass1@274@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_4 == break1
(push) ; 36
; [then-branch: 2675 | bypass1@274@01 | dead]
; [else-branch: 2675 | !(bypass1@274@01) | live]
(push) ; 37
; [else-branch: 2675 | !(bypass1@274@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_0 == Exception_res
(push) ; 36
; [then-branch: 2676 | bypass1@274@01 | dead]
; [else-branch: 2676 | !(bypass1@274@01) | live]
(push) ; 37
; [else-branch: 2676 | !(bypass1@274@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_2 == _err
(push) ; 36
; [then-branch: 2677 | bypass1@274@01 | dead]
; [else-branch: 2677 | !(bypass1@274@01) | live]
(push) ; 37
; [else-branch: 2677 | !(bypass1@274@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1_3 == _loop_check_before
(push) ; 36
; [then-branch: 2678 | bypass1@274@01 | dead]
; [else-branch: 2678 | !(bypass1@274@01) | live]
(push) ; 37
; [else-branch: 2678 | !(bypass1@274@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1 ==> tmp1 == _loop_measures
(push) ; 36
; [then-branch: 2679 | bypass1@274@01 | dead]
; [else-branch: 2679 | !(bypass1@274@01) | live]
(push) ; 37
; [else-branch: 2679 | !(bypass1@274@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2 == _loop_measures_4
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2680 | bypass2@275@01 | live]
; [else-branch: 2680 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2680 | bypass2@275@01]
; [eval] tmp2 == _loop_measures_4
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_1 == except2
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2681 | bypass2@275@01 | live]
; [else-branch: 2681 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2681 | bypass2@275@01]
; [eval] tmp2_1 == except2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_3 == _loop_check_before_4
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2682 | bypass2@275@01 | live]
; [else-branch: 2682 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2682 | bypass2@275@01]
; [eval] tmp2_3 == _loop_check_before_4
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_4 == break2
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2683 | bypass2@275@01 | live]
; [else-branch: 2683 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2683 | bypass2@275@01]
; [eval] tmp2_4 == break2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_2 == _err_0
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2684 | bypass2@275@01 | live]
; [else-branch: 2684 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2684 | bypass2@275@01]
; [eval] tmp2_2 == _err_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2 ==> tmp2_0 == Exception_res_2
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2685 | bypass2@275@01 | live]
; [else-branch: 2685 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2685 | bypass2@275@01]
; [eval] tmp2_0 == Exception_res_2
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 30
; [then-branch: 2686 | !(p3@323@01) | live]
; [else-branch: 2686 | p3@323@01 | live]
(push) ; 31
; [then-branch: 2686 | !(p3@323@01)]
(assert (not p3@323@01))
(pop) ; 31
(push) ; 31
; [else-branch: 2686 | p3@323@01]
(assert p3@323@01)
; [eval] !break1
(push) ; 32
; [then-branch: 2687 | break1@301@01 | live]
; [else-branch: 2687 | !(break1@301@01) | live]
(push) ; 33
; [then-branch: 2687 | break1@301@01]
(assert break1@301@01)
(pop) ; 33
(push) ; 33
; [else-branch: 2687 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3@323@01 (and (not break1@301@01) (not except1@294@01)))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2688 | !(p3@323@01 && !(break1@301@01) && !(except1@294@01)) | dead]
; [else-branch: 2688 | p3@323@01 && !(break1@301@01) && !(except1@294@01) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 2688 | p3@323@01 && !(break1@301@01) && !(except1@294@01)]
(assert (and p3@323@01 (and (not break1@301@01) (not except1@294@01))))
(pop) ; 30
(pop) ; 29
(pop) ; 28
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 28
; [then-branch: 2689 | !(p3@323@01) | live]
; [else-branch: 2689 | p3@323@01 | live]
(push) ; 29
; [then-branch: 2689 | !(p3@323@01)]
(assert (not p3@323@01))
(pop) ; 29
(push) ; 29
; [else-branch: 2689 | p3@323@01]
(assert p3@323@01)
; [eval] !break1
(push) ; 30
; [then-branch: 2690 | break1@301@01 | live]
; [else-branch: 2690 | !(break1@301@01) | live]
(push) ; 31
; [then-branch: 2690 | break1@301@01]
(assert break1@301@01)
(pop) ; 31
(push) ; 31
; [else-branch: 2690 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3@323@01 (and (not break1@301@01) (not except1@294@01)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2691 | !(p3@323@01 && !(break1@301@01) && !(except1@294@01)) | dead]
; [else-branch: 2691 | p3@323@01 && !(break1@301@01) && !(except1@294@01) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 2691 | p3@323@01 && !(break1@301@01) && !(except1@294@01)]
(assert (and p3@323@01 (and (not break1@301@01) (not except1@294@01))))
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(push) ; 18
; [else-branch: 2550 | p1_1@321@01 && !(break1@301@01) && !(except1@294@01)]
(assert (and p1_1@321@01 (and (not break1@301@01) (not except1@294@01))))
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
; [eval] !(p1_0 && (!break1 && !except1))
; [eval] p1_0 && (!break1 && !except1)
(push) ; 14
; [then-branch: 2692 | !(p1_0@319@01) | live]
; [else-branch: 2692 | p1_0@319@01 | live]
(push) ; 15
; [then-branch: 2692 | !(p1_0@319@01)]
(assert (not p1_0@319@01))
(pop) ; 15
(push) ; 15
; [else-branch: 2692 | p1_0@319@01]
(assert p1_0@319@01)
; [eval] !break1
(push) ; 16
; [then-branch: 2693 | break1@301@01 | live]
; [else-branch: 2693 | !(break1@301@01) | live]
(push) ; 17
; [then-branch: 2693 | break1@301@01]
(assert break1@301@01)
(pop) ; 17
(push) ; 17
; [else-branch: 2693 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (and p1_0@319@01 (and (not break1@301@01) (not except1@294@01)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2694 | !(p1_0@319@01 && !(break1@301@01) && !(except1@294@01)) | dead]
; [else-branch: 2694 | p1_0@319@01 && !(break1@301@01) && !(except1@294@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 2694 | p1_0@319@01 && !(break1@301@01) && !(except1@294@01)]
(assert (and p1_0@319@01 (and (not break1@301@01) (not except1@294@01))))
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 2353 | !(p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01) || p2@17@01 && !(break2@302@01) && !(except2@296@01) && !(bypass2@275@01))]
(assert (not
  (or
    (and
      p1@16@01
      (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01))))
    (and
      p2@17@01
      (and (not break2@302@01) (and (not except2@296@01) (not bypass2@275@01)))))))
(pop) ; 13
; [eval] !(p1 && (!break1 && !except1 && (!bypass1 && true)) || p2 && (!break2 && !except2 && (!bypass2 && true)))
; [eval] p1 && (!break1 && !except1 && (!bypass1 && true)) || p2 && (!break2 && !except2 && (!bypass2 && true))
; [eval] p1 && (!break1 && !except1 && (!bypass1 && true))
(push) ; 13
; [then-branch: 2695 | !(p1@16@01) | live]
; [else-branch: 2695 | p1@16@01 | live]
(push) ; 14
; [then-branch: 2695 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 14
(push) ; 14
; [else-branch: 2695 | p1@16@01]
(assert p1@16@01)
; [eval] !break1
(push) ; 15
; [then-branch: 2696 | break1@301@01 | live]
; [else-branch: 2696 | !(break1@301@01) | live]
(push) ; 16
; [then-branch: 2696 | break1@301@01]
(assert break1@301@01)
(pop) ; 16
(push) ; 16
; [else-branch: 2696 | !(break1@301@01)]
(assert (not break1@301@01))
; [eval] !except1
(push) ; 17
; [then-branch: 2697 | except1@294@01 | live]
; [else-branch: 2697 | !(except1@294@01) | live]
(push) ; 18
; [then-branch: 2697 | except1@294@01]
(assert except1@294@01)
(pop) ; 18
(push) ; 18
; [else-branch: 2697 | !(except1@294@01)]
(assert (not except1@294@01))
; [eval] !bypass1
(push) ; 19
; [then-branch: 2698 | bypass1@274@01 | live]
; [else-branch: 2698 | !(bypass1@274@01) | live]
(push) ; 20
; [then-branch: 2698 | bypass1@274@01]
(assert bypass1@274@01)
(pop) ; 20
(push) ; 20
; [else-branch: 2698 | !(bypass1@274@01)]
(assert (not bypass1@274@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1@274@01) bypass1@274@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1@294@01)
  (and (not except1@294@01) (or (not bypass1@274@01) bypass1@274@01))))
(assert (or (not except1@294@01) except1@294@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1@301@01)
  (and
    (not break1@301@01)
    (=>
      (not except1@294@01)
      (and (not except1@294@01) (or (not bypass1@274@01) bypass1@274@01)))
    (or (not except1@294@01) except1@294@01))))
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 2699 | p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01) | live]
; [else-branch: 2699 | !(p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01)) | live]
(push) ; 14
; [then-branch: 2699 | p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01)]
(assert (and
  p1@16@01
  (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01)))))
(pop) ; 14
(push) ; 14
; [else-branch: 2699 | !(p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01))]
(assert (not
  (and
    p1@16@01
    (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01))))))
; [eval] p2 && (!break2 && !except2 && (!bypass2 && true))
(push) ; 15
; [then-branch: 2700 | !(p2@17@01) | live]
; [else-branch: 2700 | p2@17@01 | live]
(push) ; 16
; [then-branch: 2700 | !(p2@17@01)]
(pop) ; 16
(push) ; 16
; [else-branch: 2700 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 17
; [then-branch: 2701 | break2@302@01 | live]
; [else-branch: 2701 | !(break2@302@01) | live]
(push) ; 18
; [then-branch: 2701 | break2@302@01]
(assert break2@302@01)
(pop) ; 18
(push) ; 18
; [else-branch: 2701 | !(break2@302@01)]
(assert (not break2@302@01))
; [eval] !except2
(push) ; 19
; [then-branch: 2702 | except2@296@01 | live]
; [else-branch: 2702 | !(except2@296@01) | live]
(push) ; 20
; [then-branch: 2702 | except2@296@01]
(assert except2@296@01)
(pop) ; 20
(push) ; 20
; [else-branch: 2702 | !(except2@296@01)]
(assert (not except2@296@01))
; [eval] !bypass2
(push) ; 21
; [then-branch: 2703 | bypass2@275@01 | live]
; [else-branch: 2703 | !(bypass2@275@01) | live]
(push) ; 22
; [then-branch: 2703 | bypass2@275@01]
(pop) ; 22
(push) ; 22
; [else-branch: 2703 | !(bypass2@275@01)]
(assert (not bypass2@275@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2@275@01) bypass2@275@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2@296@01)
  (and (not except2@296@01) (or (not bypass2@275@01) bypass2@275@01))))
(assert (or (not except2@296@01) except2@296@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2@302@01)
  (and
    (not break2@302@01)
    (=>
      (not except2@296@01)
      (and (not except2@296@01) (or (not bypass2@275@01) bypass2@275@01)))
    (or (not except2@296@01) except2@296@01))))
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@17@01
  (and
    p2@17@01
    (=>
      (not break2@302@01)
      (and
        (not break2@302@01)
        (=>
          (not except2@296@01)
          (and (not except2@296@01) (or (not bypass2@275@01) bypass2@275@01)))
        (or (not except2@296@01) except2@296@01)))
    (or (not break2@302@01) break2@302@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (or
  (and
    p1@16@01
    (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01))))
  (and
    p2@17@01
    (and (not break2@302@01) (and (not except2@296@01) (not bypass2@275@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (or
    (and
      p1@16@01
      (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01))))
    (and
      p2@17@01
      (and (not break2@302@01) (and (not except2@296@01) (not bypass2@275@01))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2704 | !(p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01) || p2@17@01 && !(break2@302@01) && !(except2@296@01) && !(bypass2@275@01)) | live]
; [else-branch: 2704 | p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01) || p2@17@01 && !(break2@302@01) && !(except2@296@01) && !(bypass2@275@01) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2704 | !(p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01) || p2@17@01 && !(break2@302@01) && !(except2@296@01) && !(bypass2@275@01))]
(assert (not
  (or
    (and
      p1@16@01
      (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01))))
    (and
      p2@17@01
      (and (not break2@302@01) (and (not except2@296@01) (not bypass2@275@01)))))))
; [eval] !bypass1 && (break1 || except1) || !bypass2 && (break2 || except2)
; [eval] !bypass1 && (break1 || except1)
; [eval] !bypass1
(push) ; 14
; [then-branch: 2705 | bypass1@274@01 | live]
; [else-branch: 2705 | !(bypass1@274@01) | live]
(push) ; 15
; [then-branch: 2705 | bypass1@274@01]
(assert bypass1@274@01)
(pop) ; 15
(push) ; 15
; [else-branch: 2705 | !(bypass1@274@01)]
(assert (not bypass1@274@01))
; [eval] break1 || except1
(push) ; 16
; [then-branch: 2706 | break1@301@01 | live]
; [else-branch: 2706 | !(break1@301@01) | live]
(push) ; 17
; [then-branch: 2706 | break1@301@01]
(assert break1@301@01)
(pop) ; 17
(push) ; 17
; [else-branch: 2706 | !(break1@301@01)]
(assert (not break1@301@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not bypass1@274@01)
  (and (not bypass1@274@01) (or (not break1@301@01) break1@301@01))))
(assert (or (not bypass1@274@01) bypass1@274@01))
(push) ; 14
; [then-branch: 2707 | !(bypass1@274@01) && break1@301@01 || except1@294@01 | live]
; [else-branch: 2707 | !(!(bypass1@274@01) && break1@301@01 || except1@294@01) | live]
(push) ; 15
; [then-branch: 2707 | !(bypass1@274@01) && break1@301@01 || except1@294@01]
(assert (and (not bypass1@274@01) (or break1@301@01 except1@294@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 2707 | !(!(bypass1@274@01) && break1@301@01 || except1@294@01)]
(assert (not (and (not bypass1@274@01) (or break1@301@01 except1@294@01))))
; [eval] !bypass2 && (break2 || except2)
; [eval] !bypass2
(push) ; 16
; [then-branch: 2708 | bypass2@275@01 | live]
; [else-branch: 2708 | !(bypass2@275@01) | live]
(push) ; 17
; [then-branch: 2708 | bypass2@275@01]
(pop) ; 17
(push) ; 17
; [else-branch: 2708 | !(bypass2@275@01)]
(assert (not bypass2@275@01))
; [eval] break2 || except2
(push) ; 18
; [then-branch: 2709 | break2@302@01 | live]
; [else-branch: 2709 | !(break2@302@01) | live]
(push) ; 19
; [then-branch: 2709 | break2@302@01]
(assert break2@302@01)
(pop) ; 19
(push) ; 19
; [else-branch: 2709 | !(break2@302@01)]
(assert (not break2@302@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not bypass2@275@01)
  (and (not bypass2@275@01) (or (not break2@302@01) break2@302@01))))
(assert (or (not bypass2@275@01) bypass2@275@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (and (not bypass1@274@01) (or break1@301@01 except1@294@01)))
  (and
    (not (and (not bypass1@274@01) (or break1@301@01 except1@294@01)))
    (=>
      (not bypass2@275@01)
      (and (not bypass2@275@01) (or (not break2@302@01) break2@302@01)))
    (or (not bypass2@275@01) bypass2@275@01))))
(assert (or
  (not (and (not bypass1@274@01) (or break1@301@01 except1@294@01)))
  (and (not bypass1@274@01) (or break1@301@01 except1@294@01))))
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (or
    (and (not bypass1@274@01) (or break1@301@01 except1@294@01))
    (and (not bypass2@275@01) (or break2@302@01 except2@296@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (or
  (and (not bypass1@274@01) (or break1@301@01 except1@294@01))
  (and (not bypass2@275@01) (or break2@302@01 except2@296@01)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2710 | !(bypass1@274@01) && break1@301@01 || except1@294@01 || !(bypass2@275@01) && break2@302@01 || except2@296@01 | live]
; [else-branch: 2710 | !(!(bypass1@274@01) && break1@301@01 || except1@294@01 || !(bypass2@275@01) && break2@302@01 || except2@296@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2710 | !(bypass1@274@01) && break1@301@01 || except1@294@01 || !(bypass2@275@01) && break2@302@01 || except2@296@01]
(assert (or
  (and (not bypass1@274@01) (or break1@301@01 except1@294@01))
  (and (not bypass2@275@01) (or break2@302@01 except2@296@01))))
; [exec]
; var p1_1: Bool
(declare-const p1_1@335@01 Bool)
; [exec]
; var p2_1: Bool
(declare-const p2_1@336@01 Bool)
; [exec]
; var p3: Bool
(declare-const p3@337@01 Bool)
; [exec]
; var p4: Bool
(declare-const p4@338@01 Bool)
; [exec]
; var p1_2: Bool
(declare-const p1_2@339@01 Bool)
; [exec]
; var p2_2: Bool
(declare-const p2_2@340@01 Bool)
; [exec]
; var p3_0: Bool
(declare-const p3_0@341@01 Bool)
; [exec]
; var p4_0: Bool
(declare-const p4_0@342@01 Bool)
; [exec]
; var tmp: Ref
(declare-const tmp@343@01 $Ref)
; [exec]
; var p1_3: Bool
(declare-const p1_3@344@01 Bool)
; [exec]
; var p2_3: Bool
(declare-const p2_3@345@01 Bool)
; [exec]
; var p3_1: Bool
(declare-const p3_1@346@01 Bool)
; [exec]
; var p4_1: Bool
(declare-const p4_1@347@01 Bool)
; [exec]
; break1 := oldbreak1
; [exec]
; break2 := oldbreak2
; [exec]
; except1 := oldexcept1
; [exec]
; except2 := oldexcept2
; [exec]
; inhale p1 && (!break1 && !except1) ==> true
(declare-const $t@348@01 $Snap)
(assert (= $t@348@01 $Snap.unit))
; [eval] p1 && (!break1 && !except1) ==> true
; [eval] p1 && (!break1 && !except1)
(push) ; 15
; [then-branch: 2711 | !(p1@16@01) | live]
; [else-branch: 2711 | p1@16@01 | live]
(push) ; 16
; [then-branch: 2711 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2711 | p1@16@01]
(assert p1@16@01)
; [eval] !break1
(push) ; 17
; [then-branch: 2712 | False | live]
; [else-branch: 2712 | True | live]
(push) ; 18
; [then-branch: 2712 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 2712 | True]
; [eval] !except1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not p1@16@01))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2713 | p1@16@01 | live]
; [else-branch: 2713 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2713 | p1@16@01]
(assert p1@16@01)
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert p1@16@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale p2 && (!break1 && !except1) ==> true
(declare-const $t@349@01 $Snap)
(assert (= $t@349@01 $Snap.unit))
; [eval] p2 && (!break1 && !except1) ==> true
; [eval] p2 && (!break1 && !except1)
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2714 | !(p2@17@01) | live]
; [else-branch: 2714 | p2@17@01 | live]
(push) ; 16
; [then-branch: 2714 | !(p2@17@01)]
(pop) ; 16
(push) ; 16
; [else-branch: 2714 | p2@17@01]
(assert p2@17@01)
; [eval] !break1
(push) ; 17
; [then-branch: 2715 | False | live]
; [else-branch: 2715 | True | live]
(push) ; 18
; [then-branch: 2715 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 2715 | True]
; [eval] !except1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
; [then-branch: 2716 | p2@17@01 | dead]
; [else-branch: 2716 | !(p2@17@01) | live]
(push) ; 16
; [else-branch: 2716 | !(p2@17@01)]
(pop) ; 16
(pop) ; 15
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; p1_0 := p1 && (!break1 && !except1 && true)
; [eval] p1 && (!break1 && !except1 && true)
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2717 | !(p1@16@01) | live]
; [else-branch: 2717 | p1@16@01 | live]
(push) ; 16
; [then-branch: 2717 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2717 | p1@16@01]
; [eval] !break1
(push) ; 17
; [then-branch: 2718 | False | live]
; [else-branch: 2718 | True | live]
(push) ; 18
; [then-branch: 2718 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 2718 | True]
; [eval] !except1
(push) ; 19
; [then-branch: 2719 | False | live]
; [else-branch: 2719 | True | live]
(push) ; 20
; [then-branch: 2719 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 2719 | True]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; p2_0 := p2 && (!break2 && !except2 && true)
; [eval] p2 && (!break2 && !except2 && true)
(push) ; 15
; [then-branch: 2720 | !(p2@17@01) | live]
; [else-branch: 2720 | p2@17@01 | live]
(push) ; 16
; [then-branch: 2720 | !(p2@17@01)]
(pop) ; 16
(push) ; 16
; [else-branch: 2720 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 17
; [then-branch: 2721 | False | live]
; [else-branch: 2721 | True | live]
(push) ; 18
; [then-branch: 2721 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 2721 | True]
; [eval] !except2
(push) ; 19
; [then-branch: 2722 | False | live]
; [else-branch: 2722 | True | live]
(push) ; 20
; [then-branch: 2722 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 2722 | True]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; idle1 := p1 && (!break1 && !except1 && !true)
; [eval] p1 && (!break1 && !except1 && !true)
(push) ; 15
; [then-branch: 2723 | !(p1@16@01) | live]
; [else-branch: 2723 | p1@16@01 | live]
(push) ; 16
; [then-branch: 2723 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2723 | p1@16@01]
; [eval] !break1
(push) ; 17
; [then-branch: 2724 | False | live]
; [else-branch: 2724 | True | live]
(push) ; 18
; [then-branch: 2724 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 2724 | True]
; [eval] !except1
(push) ; 19
; [then-branch: 2725 | False | live]
; [else-branch: 2725 | True | live]
(push) ; 20
; [then-branch: 2725 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 2725 | True]
; [eval] !true
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; idle2 := p2 && (!break2 && !except2 && !true)
; [eval] p2 && (!break2 && !except2 && !true)
(push) ; 15
; [then-branch: 2726 | !(p2@17@01) | live]
; [else-branch: 2726 | p2@17@01 | live]
(push) ; 16
; [then-branch: 2726 | !(p2@17@01)]
(pop) ; 16
(push) ; 16
; [else-branch: 2726 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 17
; [then-branch: 2727 | False | live]
; [else-branch: 2727 | True | live]
(push) ; 18
; [then-branch: 2727 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 2727 | True]
; [eval] !except2
(push) ; 19
; [then-branch: 2728 | False | live]
; [else-branch: 2728 | True | live]
(push) ; 20
; [then-branch: 2728 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 2728 | True]
; [eval] !true
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [eval] p1_0 && (!break1 && !except1)
(push) ; 15
; [then-branch: 2729 | !(p1@16@01) | live]
; [else-branch: 2729 | p1@16@01 | live]
(push) ; 16
; [then-branch: 2729 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 16
(push) ; 16
; [else-branch: 2729 | p1@16@01]
; [eval] !break1
(push) ; 17
; [then-branch: 2730 | False | live]
; [else-branch: 2730 | True | live]
(push) ; 18
; [then-branch: 2730 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 2730 | True]
; [eval] !except1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2731 | p1@16@01 | live]
; [else-branch: 2731 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2731 | p1@16@01]
; [exec]
; _loop_measures := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [eval] p2_0 && (!break2 && !except2)
(push) ; 16
; [then-branch: 2732 | !(p2@17@01) | live]
; [else-branch: 2732 | p2@17@01 | live]
(push) ; 17
; [then-branch: 2732 | !(p2@17@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 2732 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 18
; [then-branch: 2733 | False | live]
; [else-branch: 2733 | True | live]
(push) ; 19
; [then-branch: 2733 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 2733 | True]
; [eval] !except2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 2734 | p2@17@01 | dead]
; [else-branch: 2734 | !(p2@17@01) | live]
(push) ; 16
; [else-branch: 2734 | !(p2@17@01)]
(pop) ; 16
; [eval] !(p2_0 && (!break2 && !except2))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 16
; [then-branch: 2735 | !(p2@17@01) | live]
; [else-branch: 2735 | p2@17@01 | live]
(push) ; 17
; [then-branch: 2735 | !(p2@17@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 2735 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 18
; [then-branch: 2736 | False | live]
; [else-branch: 2736 | True | live]
(push) ; 19
; [then-branch: 2736 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 2736 | True]
; [eval] !except2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not p2@17@01))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2737 | !(p2@17@01) | live]
; [else-branch: 2737 | p2@17@01 | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2737 | !(p2@17@01)]
; [exec]
; p1_1 := p1_0 && (!break1 && !except1 && bool___unbox__(b_4))
; [eval] p1_0 && (!break1 && !except1 && bool___unbox__(b_4))
(push) ; 17
; [then-branch: 2738 | !(p1@16@01) | live]
; [else-branch: 2738 | p1@16@01 | live]
(push) ; 18
; [then-branch: 2738 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 18
(push) ; 18
; [else-branch: 2738 | p1@16@01]
; [eval] !break1
(push) ; 19
; [then-branch: 2739 | False | live]
; [else-branch: 2739 | True | live]
(push) ; 20
; [then-branch: 2739 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 2739 | True]
; [eval] !except1
(push) ; 21
; [then-branch: 2740 | False | live]
; [else-branch: 2740 | True | live]
(push) ; 22
; [then-branch: 2740 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 2740 | True]
; [eval] bool___unbox__(b_4)
(push) ; 23
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@26@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@26@01)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@26@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@26@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@16@01
  (and
    (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b@26@01))))
(declare-const p1_1@350@01 Bool)
(assert (= p1_1@350@01 (and p1@16@01 (bool___unbox__ $Snap.unit b@26@01))))
; [exec]
; p2_1 := p2_0 && (!break2 && !except2 && bool___unbox__(b_4_0))
; [eval] p2_0 && (!break2 && !except2 && bool___unbox__(b_4_0))
(push) ; 17
; [then-branch: 2741 | !(p2@17@01) | live]
; [else-branch: 2741 | p2@17@01 | live]
(push) ; 18
; [then-branch: 2741 | !(p2@17@01)]
(pop) ; 18
(push) ; 18
; [else-branch: 2741 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 19
; [then-branch: 2742 | False | live]
; [else-branch: 2742 | True | live]
(push) ; 20
; [then-branch: 2742 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 2742 | True]
; [eval] !except2
(push) ; 21
; [then-branch: 2743 | False | live]
; [else-branch: 2743 | True | live]
(push) ; 22
; [then-branch: 2743 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 2743 | True]
; [eval] bool___unbox__(b_4_0)
(push) ; 23
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_4_0@233@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_4_0@233@01)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_4_0@233@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_4_0@233@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@17@01
  (and
    p2@17@01
    (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_4_0@233@01))))
(declare-const p2_1@351@01 Bool)
(assert (= p2_1@351@01 (and p2@17@01 (bool___unbox__ $Snap.unit b_4_0@233@01))))
; [exec]
; p3 := p1_0 && (!break1 && !except1 && !bool___unbox__(b_4))
; [eval] p1_0 && (!break1 && !except1 && !bool___unbox__(b_4))
(push) ; 17
; [then-branch: 2744 | !(p1@16@01) | live]
; [else-branch: 2744 | p1@16@01 | live]
(push) ; 18
; [then-branch: 2744 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 18
(push) ; 18
; [else-branch: 2744 | p1@16@01]
; [eval] !break1
(push) ; 19
; [then-branch: 2745 | False | live]
; [else-branch: 2745 | True | live]
(push) ; 20
; [then-branch: 2745 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 2745 | True]
; [eval] !except1
(push) ; 21
; [then-branch: 2746 | False | live]
; [else-branch: 2746 | True | live]
(push) ; 22
; [then-branch: 2746 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 2746 | True]
; [eval] !bool___unbox__(b_4)
; [eval] bool___unbox__(b_4)
(push) ; 23
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b@26@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@26@01)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@26@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b@26@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b@26@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(declare-const p3@352@01 Bool)
(assert (= p3@352@01 (and p1@16@01 (not (bool___unbox__ $Snap.unit b@26@01)))))
; [exec]
; p4 := p2_0 && (!break2 && !except2 && !bool___unbox__(b_4_0))
; [eval] p2_0 && (!break2 && !except2 && !bool___unbox__(b_4_0))
(push) ; 17
; [then-branch: 2747 | !(p2@17@01) | live]
; [else-branch: 2747 | p2@17@01 | live]
(push) ; 18
; [then-branch: 2747 | !(p2@17@01)]
(pop) ; 18
(push) ; 18
; [else-branch: 2747 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 19
; [then-branch: 2748 | False | live]
; [else-branch: 2748 | True | live]
(push) ; 20
; [then-branch: 2748 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 2748 | True]
; [eval] !except2
(push) ; 21
; [then-branch: 2749 | False | live]
; [else-branch: 2749 | True | live]
(push) ; 22
; [then-branch: 2749 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 2749 | True]
; [eval] !bool___unbox__(b_4_0)
; [eval] bool___unbox__(b_4_0)
(push) ; 23
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_4_0@233@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_4_0@233@01)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_4_0@233@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_4_0@233@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_4_0@233@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(declare-const p4@353@01 Bool)
(assert (= p4@353@01 (and p2@17@01 (not (bool___unbox__ $Snap.unit b_4_0@233@01)))))
; [exec]
; p1_2 := p1_1 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p1_1 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 17
; [then-branch: 2750 | !(p1_1@350@01) | live]
; [else-branch: 2750 | p1_1@350@01 | live]
(push) ; 18
; [then-branch: 2750 | !(p1_1@350@01)]
(assert (not p1_1@350@01))
(pop) ; 18
(push) ; 18
; [else-branch: 2750 | p1_1@350@01]
(assert p1_1@350@01)
; [eval] !break1
(push) ; 19
; [then-branch: 2751 | False | live]
; [else-branch: 2751 | True | live]
(push) ; 20
; [then-branch: 2751 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 2751 | True]
; [eval] !except1
(push) ; 21
; [then-branch: 2752 | False | live]
; [else-branch: 2752 | True | live]
(push) ; 22
; [then-branch: 2752 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 2752 | True]
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or p1_1@350@01 (not p1_1@350@01)))
; [exec]
; p2_2 := p2_1 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_1 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 17
; [then-branch: 2753 | !(p2_1@351@01) | live]
; [else-branch: 2753 | p2_1@351@01 | live]
(push) ; 18
; [then-branch: 2753 | !(p2_1@351@01)]
(assert (not p2_1@351@01))
(pop) ; 18
(push) ; 18
; [else-branch: 2753 | p2_1@351@01]
(assert p2_1@351@01)
; [eval] !break2
(push) ; 19
; [then-branch: 2754 | False | live]
; [else-branch: 2754 | True | live]
(push) ; 20
; [then-branch: 2754 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 2754 | True]
; [eval] !except2
(push) ; 21
; [then-branch: 2755 | False | live]
; [else-branch: 2755 | True | live]
(push) ; 22
; [then-branch: 2755 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 2755 | True]
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or p2_1@351@01 (not p2_1@351@01)))
; [exec]
; p3_0 := p1_1 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p1_1 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 17
; [then-branch: 2756 | !(p1_1@350@01) | live]
; [else-branch: 2756 | p1_1@350@01 | live]
(push) ; 18
; [then-branch: 2756 | !(p1_1@350@01)]
(assert (not p1_1@350@01))
(pop) ; 18
(push) ; 18
; [else-branch: 2756 | p1_1@350@01]
(assert p1_1@350@01)
; [eval] !break1
(push) ; 19
; [then-branch: 2757 | False | live]
; [else-branch: 2757 | True | live]
(push) ; 20
; [then-branch: 2757 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 2757 | True]
; [eval] !except1
(push) ; 21
; [then-branch: 2758 | False | live]
; [else-branch: 2758 | True | live]
(push) ; 22
; [then-branch: 2758 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 2758 | True]
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [exec]
; p4_0 := p2_1 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_1 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 17
; [then-branch: 2759 | !(p2_1@351@01) | live]
; [else-branch: 2759 | p2_1@351@01 | live]
(push) ; 18
; [then-branch: 2759 | !(p2_1@351@01)]
(assert (not p2_1@351@01))
(pop) ; 18
(push) ; 18
; [else-branch: 2759 | p2_1@351@01]
(assert p2_1@351@01)
; [eval] !break2
(push) ; 19
; [then-branch: 2760 | False | live]
; [else-branch: 2760 | True | live]
(push) ; 20
; [then-branch: 2760 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 2760 | True]
; [eval] !except2
(push) ; 21
; [then-branch: 2761 | False | live]
; [else-branch: 2761 | True | live]
(push) ; 22
; [then-branch: 2761 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 2761 | True]
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [eval] p1_2 && (!break1 && !except1)
; [then-branch: 2762 | False | dead]
; [else-branch: 2762 | True | live]
(push) ; 17
; [else-branch: 2762 | True]
(pop) ; 17
; [eval] !(p1_2 && (!break1 && !except1))
; [eval] p1_2 && (!break1 && !except1)
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2763 | True | live]
; [else-branch: 2763 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2763 | True]
; [eval] p2_2 && (!break2 && !except2)
; [then-branch: 2764 | False | dead]
; [else-branch: 2764 | True | live]
(push) ; 18
; [else-branch: 2764 | True]
(pop) ; 18
; [eval] !(p2_2 && (!break2 && !except2))
; [eval] p2_2 && (!break2 && !except2)
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2765 | True | live]
; [else-branch: 2765 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 2765 | True]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 19
; [then-branch: 2766 | !(p1_1@350@01) | live]
; [else-branch: 2766 | p1_1@350@01 | live]
(push) ; 20
; [then-branch: 2766 | !(p1_1@350@01)]
(assert (not p1_1@350@01))
(pop) ; 20
(push) ; 20
; [else-branch: 2766 | p1_1@350@01]
(assert p1_1@350@01)
; [eval] !break1
(push) ; 21
; [then-branch: 2767 | False | live]
; [else-branch: 2767 | True | live]
(push) ; 22
; [then-branch: 2767 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 2767 | True]
; [eval] !except1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_1@350@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not p1_1@350@01))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2768 | p1_1@350@01 | live]
; [else-branch: 2768 | !(p1_1@350@01) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 2768 | p1_1@350@01]
(assert p1_1@350@01)
; [exec]
; c_4.Container_value := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(declare-const Container_value@354@01 $Ref)
(assert (= Container_value@354@01 (__prim__int___box__ $Snap.unit 7)))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 20
; [then-branch: 2769 | !(p2_1@351@01) | live]
; [else-branch: 2769 | p2_1@351@01 | live]
(push) ; 21
; [then-branch: 2769 | !(p2_1@351@01)]
(assert (not p2_1@351@01))
(pop) ; 21
(push) ; 21
; [else-branch: 2769 | p2_1@351@01]
(assert p2_1@351@01)
; [eval] !break2
(push) ; 22
; [then-branch: 2770 | False | live]
; [else-branch: 2770 | True | live]
(push) ; 23
; [then-branch: 2770 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 2770 | True]
; [eval] !except2
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_1@351@01)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2771 | p2_1@351@01 | dead]
; [else-branch: 2771 | !(p2_1@351@01) | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 2771 | !(p2_1@351@01)]
(assert (not p2_1@351@01))
(pop) ; 20
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 20
; [then-branch: 2772 | !(p2_1@351@01) | live]
; [else-branch: 2772 | p2_1@351@01 | live]
(push) ; 21
; [then-branch: 2772 | !(p2_1@351@01)]
(assert (not p2_1@351@01))
(pop) ; 21
(push) ; 21
; [else-branch: 2772 | p2_1@351@01]
(assert p2_1@351@01)
; [eval] !break2
(push) ; 22
; [then-branch: 2773 | False | live]
; [else-branch: 2773 | True | live]
(push) ; 23
; [then-branch: 2773 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 2773 | True]
; [eval] !except2
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not p2_1@351@01))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_1@351@01)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2774 | !(p2_1@351@01) | live]
; [else-branch: 2774 | p2_1@351@01 | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 2774 | !(p2_1@351@01)]
(assert (not p2_1@351@01))
; [exec]
; tmp := new()
(declare-const tmp@355@01 $Ref)
(assert (not (= tmp@355@01 $Ref.null)))
(assert (not (= tmp@355@01 _err_0@295@01)))
(assert (not (= tmp@355@01 Exception_res@291@01)))
(assert (not (= tmp@355@01 tmp1_2@258@01)))
(assert (not (= tmp@355@01 _err_0@31@01)))
(assert (not (= tmp@355@01 _err@293@01)))
(assert (not (= tmp@355@01 Exception_res_2@245@01)))
(assert (not (= tmp@355@01 tmp@343@01)))
(assert (not (= tmp@355@01 c_9@25@01)))
(assert (not (= tmp@355@01 Exception_res_2@292@01)))
(assert (not (= tmp@355@01 _cthread_157_0@19@01)))
(assert (not (= tmp@355@01 b_9@27@01)))
(assert (not (= tmp@355@01 tmp1_0@254@01)))
(assert (not (= tmp@355@01 b@26@01)))
(assert (not (= tmp@355@01 _cthread_157@18@01)))
(assert (not (= tmp@355@01 c_4_0@231@01)))
(assert (not (= tmp@355@01 c@24@01)))
(assert (not (= tmp@355@01 b_4_0@233@01)))
(assert (not (= tmp@355@01 Container_value@354@01)))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 21
; [then-branch: 2775 | !(p1_1@350@01) | live]
; [else-branch: 2775 | p1_1@350@01 | live]
(push) ; 22
; [then-branch: 2775 | !(p1_1@350@01)]
(assert (not p1_1@350@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2775 | p1_1@350@01]
; [eval] !break1
(push) ; 23
; [then-branch: 2776 | False | live]
; [else-branch: 2776 | True | live]
(push) ; 24
; [then-branch: 2776 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 2776 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_1@350@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2777 | p1_1@350@01 | live]
; [else-branch: 2777 | !(p1_1@350@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 2777 | p1_1@350@01]
; [exec]
; Exception_res := tmp
; [eval] p2_1 && (!break2 && !except2)
(push) ; 22
; [then-branch: 2778 | !(p2_1@351@01) | live]
; [else-branch: 2778 | p2_1@351@01 | live]
(push) ; 23
; [then-branch: 2778 | !(p2_1@351@01)]
(pop) ; 23
(push) ; 23
; [else-branch: 2778 | p2_1@351@01]
(assert p2_1@351@01)
; [eval] !break2
(push) ; 24
; [then-branch: 2779 | False | live]
; [else-branch: 2779 | True | live]
(push) ; 25
; [then-branch: 2779 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 2779 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 2780 | p2_1@351@01 | dead]
; [else-branch: 2780 | !(p2_1@351@01) | live]
(push) ; 22
; [else-branch: 2780 | !(p2_1@351@01)]
(pop) ; 22
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 22
; [then-branch: 2781 | !(p2_1@351@01) | live]
; [else-branch: 2781 | p2_1@351@01 | live]
(push) ; 23
; [then-branch: 2781 | !(p2_1@351@01)]
(pop) ; 23
(push) ; 23
; [else-branch: 2781 | p2_1@351@01]
(assert p2_1@351@01)
; [eval] !break2
(push) ; 24
; [then-branch: 2782 | False | live]
; [else-branch: 2782 | True | live]
(push) ; 25
; [then-branch: 2782 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 2782 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not p2_1@351@01))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2783 | !(p2_1@351@01) | live]
; [else-branch: 2783 | p2_1@351@01 | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 2783 | !(p2_1@351@01)]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 23
; [then-branch: 2784 | !(p1_1@350@01) | live]
; [else-branch: 2784 | p1_1@350@01 | live]
(push) ; 24
; [then-branch: 2784 | !(p1_1@350@01)]
(assert (not p1_1@350@01))
(pop) ; 24
(push) ; 24
; [else-branch: 2784 | p1_1@350@01]
; [eval] !break1
(push) ; 25
; [then-branch: 2785 | False | live]
; [else-branch: 2785 | True | live]
(push) ; 26
; [then-branch: 2785 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 2785 | True]
; [eval] !except1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_1@350@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2786 | p1_1@350@01 | live]
; [else-branch: 2786 | !(p1_1@350@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 2786 | p1_1@350@01]
; [exec]
; inhale typeof(Exception_res) == Exception()
(declare-const $t@356@01 $Snap)
(assert (= $t@356@01 $Snap.unit))
; [eval] typeof(Exception_res) == Exception()
; [eval] typeof(Exception_res)
; [eval] Exception()
(assert (= (typeof<PyType> tmp@355@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_1 && (!break2 && !except2)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 2787 | !(p2_1@351@01) | live]
; [else-branch: 2787 | p2_1@351@01 | live]
(push) ; 25
; [then-branch: 2787 | !(p2_1@351@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 2787 | p2_1@351@01]
(assert p2_1@351@01)
; [eval] !break2
(push) ; 26
; [then-branch: 2788 | False | live]
; [else-branch: 2788 | True | live]
(push) ; 27
; [then-branch: 2788 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 2788 | True]
; [eval] !except2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 2789 | p2_1@351@01 | dead]
; [else-branch: 2789 | !(p2_1@351@01) | live]
(push) ; 24
; [else-branch: 2789 | !(p2_1@351@01)]
(pop) ; 24
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 24
; [then-branch: 2790 | !(p2_1@351@01) | live]
; [else-branch: 2790 | p2_1@351@01 | live]
(push) ; 25
; [then-branch: 2790 | !(p2_1@351@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 2790 | p2_1@351@01]
(assert p2_1@351@01)
; [eval] !break2
(push) ; 26
; [then-branch: 2791 | False | live]
; [else-branch: 2791 | True | live]
(push) ; 27
; [then-branch: 2791 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 2791 | True]
; [eval] !except2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not p2_1@351@01))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2792 | !(p2_1@351@01) | live]
; [else-branch: 2792 | p2_1@351@01 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 2792 | !(p2_1@351@01)]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 25
; [then-branch: 2793 | !(p1_1@350@01) | live]
; [else-branch: 2793 | p1_1@350@01 | live]
(push) ; 26
; [then-branch: 2793 | !(p1_1@350@01)]
(assert (not p1_1@350@01))
(pop) ; 26
(push) ; 26
; [else-branch: 2793 | p1_1@350@01]
; [eval] !break1
(push) ; 27
; [then-branch: 2794 | False | live]
; [else-branch: 2794 | True | live]
(push) ; 28
; [then-branch: 2794 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 2794 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_1@350@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2795 | p1_1@350@01 | live]
; [else-branch: 2795 | !(p1_1@350@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 2795 | p1_1@350@01]
; [exec]
; _err := Exception_res
; [exec]
; except1 := true
; [eval] p2_1 && (!break2 && !except2)
(push) ; 26
; [then-branch: 2796 | !(p2_1@351@01) | live]
; [else-branch: 2796 | p2_1@351@01 | live]
(push) ; 27
; [then-branch: 2796 | !(p2_1@351@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 2796 | p2_1@351@01]
(assert p2_1@351@01)
; [eval] !break2
(push) ; 28
; [then-branch: 2797 | False | live]
; [else-branch: 2797 | True | live]
(push) ; 29
; [then-branch: 2797 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 2797 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 2798 | p2_1@351@01 | dead]
; [else-branch: 2798 | !(p2_1@351@01) | live]
(push) ; 26
; [else-branch: 2798 | !(p2_1@351@01)]
(pop) ; 26
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 26
; [then-branch: 2799 | !(p2_1@351@01) | live]
; [else-branch: 2799 | p2_1@351@01 | live]
(push) ; 27
; [then-branch: 2799 | !(p2_1@351@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 2799 | p2_1@351@01]
(assert p2_1@351@01)
; [eval] !break2
(push) ; 28
; [then-branch: 2800 | False | live]
; [else-branch: 2800 | True | live]
(push) ; 29
; [then-branch: 2800 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 2800 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not p2_1@351@01))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2801 | !(p2_1@351@01) | live]
; [else-branch: 2801 | p2_1@351@01 | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 2801 | !(p2_1@351@01)]
; [exec]
; p1_3 := p3 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p3 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 2802 | !(p3@352@01) | live]
; [else-branch: 2802 | p3@352@01 | live]
(push) ; 28
; [then-branch: 2802 | !(p3@352@01)]
(assert (not p3@352@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2802 | p3@352@01]
(assert p3@352@01)
; [eval] !break1
(push) ; 29
; [then-branch: 2803 | False | live]
; [else-branch: 2803 | True | live]
(push) ; 30
; [then-branch: 2803 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2803 | True]
; [eval] !except1
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or p3@352@01 (not p3@352@01)))
; [exec]
; p2_3 := p4 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p4 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 2804 | !(p4@353@01) | live]
; [else-branch: 2804 | p4@353@01 | live]
(push) ; 28
; [then-branch: 2804 | !(p4@353@01)]
(assert (not p4@353@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2804 | p4@353@01]
(assert p4@353@01)
; [eval] !break2
(push) ; 29
; [then-branch: 2805 | False | live]
; [else-branch: 2805 | True | live]
(push) ; 30
; [then-branch: 2805 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2805 | True]
; [eval] !except2
(push) ; 31
; [then-branch: 2806 | False | live]
; [else-branch: 2806 | True | live]
(push) ; 32
; [then-branch: 2806 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2806 | True]
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or p4@353@01 (not p4@353@01)))
; [exec]
; p3_1 := p3 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p3 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 2807 | !(p3@352@01) | live]
; [else-branch: 2807 | p3@352@01 | live]
(push) ; 28
; [then-branch: 2807 | !(p3@352@01)]
(assert (not p3@352@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2807 | p3@352@01]
(assert p3@352@01)
; [eval] !break1
(push) ; 29
; [then-branch: 2808 | False | live]
; [else-branch: 2808 | True | live]
(push) ; 30
; [then-branch: 2808 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2808 | True]
; [eval] !except1
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p4_1 := p4 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p4 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 2809 | !(p4@353@01) | live]
; [else-branch: 2809 | p4@353@01 | live]
(push) ; 28
; [then-branch: 2809 | !(p4@353@01)]
(assert (not p4@353@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2809 | p4@353@01]
(assert p4@353@01)
; [eval] !break2
(push) ; 29
; [then-branch: 2810 | False | live]
; [else-branch: 2810 | True | live]
(push) ; 30
; [then-branch: 2810 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2810 | True]
; [eval] !except2
(push) ; 31
; [then-branch: 2811 | False | live]
; [else-branch: 2811 | True | live]
(push) ; 32
; [then-branch: 2811 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2811 | True]
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [eval] p1_3 && (!break1 && !except1)
; [then-branch: 2812 | False | dead]
; [else-branch: 2812 | True | live]
(push) ; 27
; [else-branch: 2812 | True]
(pop) ; 27
; [eval] !(p1_3 && (!break1 && !except1))
; [eval] p1_3 && (!break1 && !except1)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2813 | True | live]
; [else-branch: 2813 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 2813 | True]
; [eval] p2_3 && (!break2 && !except2)
; [then-branch: 2814 | False | dead]
; [else-branch: 2814 | True | live]
(push) ; 28
; [else-branch: 2814 | True]
(pop) ; 28
; [eval] !(p2_3 && (!break2 && !except2))
; [eval] p2_3 && (!break2 && !except2)
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2815 | True | live]
; [else-branch: 2815 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2815 | True]
; [eval] p3 && (!break1 && !except1)
(push) ; 29
; [then-branch: 2816 | !(p3@352@01) | live]
; [else-branch: 2816 | p3@352@01 | live]
(push) ; 30
; [then-branch: 2816 | !(p3@352@01)]
(assert (not p3@352@01))
(pop) ; 30
(push) ; 30
; [else-branch: 2816 | p3@352@01]
(assert p3@352@01)
; [eval] !break1
(push) ; 31
; [then-branch: 2817 | False | live]
; [else-branch: 2817 | True | live]
(push) ; 32
; [then-branch: 2817 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2817 | True]
; [eval] !except1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 2818 | False | dead]
; [else-branch: 2818 | True | live]
(push) ; 29
; [else-branch: 2818 | True]
(pop) ; 29
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 29
; [then-branch: 2819 | !(p3@352@01) | live]
; [else-branch: 2819 | p3@352@01 | live]
(push) ; 30
; [then-branch: 2819 | !(p3@352@01)]
(assert (not p3@352@01))
(pop) ; 30
(push) ; 30
; [else-branch: 2819 | p3@352@01]
(assert p3@352@01)
; [eval] !break1
(push) ; 31
; [then-branch: 2820 | False | live]
; [else-branch: 2820 | True | live]
(push) ; 32
; [then-branch: 2820 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2820 | True]
; [eval] !except1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2821 | True | live]
; [else-branch: 2821 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 2821 | True]
; [eval] p4 && (!break2 && !except2)
(push) ; 30
; [then-branch: 2822 | !(p4@353@01) | live]
; [else-branch: 2822 | p4@353@01 | live]
(push) ; 31
; [then-branch: 2822 | !(p4@353@01)]
(assert (not p4@353@01))
(pop) ; 31
(push) ; 31
; [else-branch: 2822 | p4@353@01]
(assert p4@353@01)
; [eval] !break2
(push) ; 32
; [then-branch: 2823 | False | live]
; [else-branch: 2823 | True | live]
(push) ; 33
; [then-branch: 2823 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 2823 | True]
; [eval] !except2
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (not p4@353@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2824 | p4@353@01 | dead]
; [else-branch: 2824 | !(p4@353@01) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 2824 | !(p4@353@01)]
(assert (not p4@353@01))
(pop) ; 30
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 30
; [then-branch: 2825 | !(p4@353@01) | live]
; [else-branch: 2825 | p4@353@01 | live]
(push) ; 31
; [then-branch: 2825 | !(p4@353@01)]
(assert (not p4@353@01))
(pop) ; 31
(push) ; 31
; [else-branch: 2825 | p4@353@01]
(assert p4@353@01)
; [eval] !break2
(push) ; 32
; [then-branch: 2826 | False | live]
; [else-branch: 2826 | True | live]
(push) ; 33
; [then-branch: 2826 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 2826 | True]
; [eval] !except2
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not p4@353@01))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (not p4@353@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2827 | !(p4@353@01) | live]
; [else-branch: 2827 | p4@353@01 | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2827 | !(p4@353@01)]
(assert (not p4@353@01))
; [eval] p3 && (!break1 && !except1)
(push) ; 31
; [then-branch: 2828 | !(p3@352@01) | live]
; [else-branch: 2828 | p3@352@01 | live]
(push) ; 32
; [then-branch: 2828 | !(p3@352@01)]
(assert (not p3@352@01))
(pop) ; 32
(push) ; 32
; [else-branch: 2828 | p3@352@01]
(assert p3@352@01)
; [eval] !break1
(push) ; 33
; [then-branch: 2829 | False | live]
; [else-branch: 2829 | True | live]
(push) ; 34
; [then-branch: 2829 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 2829 | True]
; [eval] !except1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 2830 | False | dead]
; [else-branch: 2830 | True | live]
(push) ; 31
; [else-branch: 2830 | True]
(pop) ; 31
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 31
; [then-branch: 2831 | !(p3@352@01) | live]
; [else-branch: 2831 | p3@352@01 | live]
(push) ; 32
; [then-branch: 2831 | !(p3@352@01)]
(assert (not p3@352@01))
(pop) ; 32
(push) ; 32
; [else-branch: 2831 | p3@352@01]
(assert p3@352@01)
; [eval] !break1
(push) ; 33
; [then-branch: 2832 | False | live]
; [else-branch: 2832 | True | live]
(push) ; 34
; [then-branch: 2832 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 2832 | True]
; [eval] !except1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2833 | True | live]
; [else-branch: 2833 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 2833 | True]
; [eval] p4 && (!break2 && !except2)
(push) ; 32
; [then-branch: 2834 | !(p4@353@01) | live]
; [else-branch: 2834 | p4@353@01 | live]
(push) ; 33
; [then-branch: 2834 | !(p4@353@01)]
(pop) ; 33
(push) ; 33
; [else-branch: 2834 | p4@353@01]
(assert p4@353@01)
; [eval] !break2
(push) ; 34
; [then-branch: 2835 | False | live]
; [else-branch: 2835 | True | live]
(push) ; 35
; [then-branch: 2835 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 2835 | True]
; [eval] !except2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 2836 | p4@353@01 | dead]
; [else-branch: 2836 | !(p4@353@01) | live]
(push) ; 32
; [else-branch: 2836 | !(p4@353@01)]
(pop) ; 32
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 32
; [then-branch: 2837 | !(p4@353@01) | live]
; [else-branch: 2837 | p4@353@01 | live]
(push) ; 33
; [then-branch: 2837 | !(p4@353@01)]
(pop) ; 33
(push) ; 33
; [else-branch: 2837 | p4@353@01]
(assert p4@353@01)
; [eval] !break2
(push) ; 34
; [then-branch: 2838 | False | live]
; [else-branch: 2838 | True | live]
(push) ; 35
; [then-branch: 2838 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 2838 | True]
; [eval] !except2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not p4@353@01))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2839 | !(p4@353@01) | live]
; [else-branch: 2839 | p4@353@01 | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2839 | !(p4@353@01)]
; [eval] p1_0 && (!break1 && !except1)
(push) ; 33
; [then-branch: 2840 | !(p1@16@01) | live]
; [else-branch: 2840 | p1@16@01 | live]
(push) ; 34
; [then-branch: 2840 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 34
(push) ; 34
; [else-branch: 2840 | p1@16@01]
; [eval] !break1
(push) ; 35
; [then-branch: 2841 | False | live]
; [else-branch: 2841 | True | live]
(push) ; 36
; [then-branch: 2841 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 2841 | True]
; [eval] !except1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 2842 | False | dead]
; [else-branch: 2842 | True | live]
(push) ; 33
; [else-branch: 2842 | True]
(pop) ; 33
; [eval] !(p1_0 && (!break1 && !except1))
; [eval] p1_0 && (!break1 && !except1)
(push) ; 33
; [then-branch: 2843 | !(p1@16@01) | live]
; [else-branch: 2843 | p1@16@01 | live]
(push) ; 34
; [then-branch: 2843 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 34
(push) ; 34
; [else-branch: 2843 | p1@16@01]
; [eval] !break1
(push) ; 35
; [then-branch: 2844 | False | live]
; [else-branch: 2844 | True | live]
(push) ; 36
; [then-branch: 2844 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 2844 | True]
; [eval] !except1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2845 | True | live]
; [else-branch: 2845 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 2845 | True]
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 2846 | !(p2@17@01) | live]
; [else-branch: 2846 | p2@17@01 | live]
(push) ; 35
; [then-branch: 2846 | !(p2@17@01)]
(pop) ; 35
(push) ; 35
; [else-branch: 2846 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 36
; [then-branch: 2847 | False | live]
; [else-branch: 2847 | True | live]
(push) ; 37
; [then-branch: 2847 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 2847 | True]
; [eval] !except2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
; [then-branch: 2848 | p2@17@01 | dead]
; [else-branch: 2848 | !(p2@17@01) | live]
(push) ; 34
; [else-branch: 2848 | !(p2@17@01)]
(pop) ; 34
; [eval] !(p2_0 && (!break2 && !except2))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 2849 | !(p2@17@01) | live]
; [else-branch: 2849 | p2@17@01 | live]
(push) ; 35
; [then-branch: 2849 | !(p2@17@01)]
(pop) ; 35
(push) ; 35
; [else-branch: 2849 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 36
; [then-branch: 2850 | False | live]
; [else-branch: 2850 | True | live]
(push) ; 37
; [then-branch: 2850 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 2850 | True]
; [eval] !except2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not p2@17@01))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2851 | !(p2@17@01) | live]
; [else-branch: 2851 | p2@17@01 | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 2851 | !(p2@17@01)]
; [exec]
; assert (p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true) &&
;   (p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true)
; [eval] p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true
; [eval] p1_0 && (!break1 && !except1)
(push) ; 35
; [then-branch: 2852 | !(p1@16@01) | live]
; [else-branch: 2852 | p1@16@01 | live]
(push) ; 36
; [then-branch: 2852 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 36
(push) ; 36
; [else-branch: 2852 | p1@16@01]
; [eval] !break1
(push) ; 37
; [then-branch: 2853 | False | live]
; [else-branch: 2853 | True | live]
(push) ; 38
; [then-branch: 2853 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 2853 | True]
; [eval] !except1
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
; [then-branch: 2854 | False | dead]
; [else-branch: 2854 | True | live]
(push) ; 36
; [else-branch: 2854 | True]
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true
; [eval] p2_0 && (!break2 && !except2)
(push) ; 35
; [then-branch: 2855 | !(p2@17@01) | live]
; [else-branch: 2855 | p2@17@01 | live]
(push) ; 36
; [then-branch: 2855 | !(p2@17@01)]
(pop) ; 36
(push) ; 36
; [else-branch: 2855 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 37
; [then-branch: 2856 | False | live]
; [else-branch: 2856 | True | live]
(push) ; 38
; [then-branch: 2856 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 2856 | True]
; [eval] !except2
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
; [then-branch: 2857 | p2@17@01 | dead]
; [else-branch: 2857 | !(p2@17@01) | live]
(push) ; 36
; [else-branch: 2857 | !(p2@17@01)]
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [exec]
; inhale !p1_0 || !(!break1 && !except1)
(declare-const $t@357@01 $Snap)
(assert (= $t@357@01 $Snap.unit))
; [eval] !p1_0 || !(!break1 && !except1)
; [eval] !p1_0
(push) ; 35
; [then-branch: 2858 | !(p1@16@01) | live]
; [else-branch: 2858 | p1@16@01 | live]
(push) ; 36
; [then-branch: 2858 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 36
(push) ; 36
; [else-branch: 2858 | p1@16@01]
; [eval] !(!break1 && !except1)
; [eval] !break1 && !except1
; [eval] !break1
(push) ; 37
; [then-branch: 2859 | False | live]
; [else-branch: 2859 | True | live]
(push) ; 38
; [then-branch: 2859 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 2859 | True]
; [eval] !except1
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !p2_0 || !(!break2 && !except2)
(declare-const $t@358@01 $Snap)
(assert (= $t@358@01 $Snap.unit))
; [eval] !p2_0 || !(!break2 && !except2)
; [eval] !p2_0
(set-option :timeout 0)
(push) ; 35
; [then-branch: 2860 | !(p2@17@01) | live]
; [else-branch: 2860 | p2@17@01 | live]
(push) ; 36
; [then-branch: 2860 | !(p2@17@01)]
(pop) ; 36
(push) ; 36
; [else-branch: 2860 | p2@17@01]
(assert p2@17@01)
; [eval] !(!break2 && !except2)
; [eval] !break2 && !except2
; [eval] !break2
(push) ; 37
; [then-branch: 2861 | False | live]
; [else-branch: 2861 | True | live]
(push) ; 38
; [then-branch: 2861 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 2861 | True]
; [eval] !except2
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] !bypass1
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not bypass1@274@01))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (not bypass1@274@01)))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2862 | !(bypass1@274@01) | live]
; [else-branch: 2862 | bypass1@274@01 | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 2862 | !(bypass1@274@01)]
(assert (not bypass1@274@01))
; [exec]
; break1 := false
; [eval] !bypass2
; [then-branch: 2863 | !(bypass2@275@01) | dead]
; [else-branch: 2863 | bypass2@275@01 | live]
(push) ; 36
; [else-branch: 2863 | bypass2@275@01]
(pop) ; 36
; [eval] !!bypass2
; [eval] !bypass2
(push) ; 36
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2864 | bypass2@275@01 | live]
; [else-branch: 2864 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 2864 | bypass2@275@01]
; [eval] p1 && (!break1 && !except1)
(push) ; 37
; [then-branch: 2865 | !(p1@16@01) | live]
; [else-branch: 2865 | p1@16@01 | live]
(push) ; 38
; [then-branch: 2865 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 38
(push) ; 38
; [else-branch: 2865 | p1@16@01]
; [eval] !break1
(push) ; 39
; [then-branch: 2866 | False | live]
; [else-branch: 2866 | True | live]
(push) ; 40
; [then-branch: 2866 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 2866 | True]
; [eval] !except1
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
; [then-branch: 2867 | False | dead]
; [else-branch: 2867 | True | live]
(push) ; 37
; [else-branch: 2867 | True]
(pop) ; 37
; [eval] !(p1 && (!break1 && !except1))
; [eval] p1 && (!break1 && !except1)
(push) ; 37
; [then-branch: 2868 | !(p1@16@01) | live]
; [else-branch: 2868 | p1@16@01 | live]
(push) ; 38
; [then-branch: 2868 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 38
(push) ; 38
; [else-branch: 2868 | p1@16@01]
; [eval] !break1
(push) ; 39
; [then-branch: 2869 | False | live]
; [else-branch: 2869 | True | live]
(push) ; 40
; [then-branch: 2869 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 2869 | True]
; [eval] !except1
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2870 | True | live]
; [else-branch: 2870 | False | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2870 | True]
; [eval] p2 && (!break2 && !except2)
(push) ; 38
; [then-branch: 2871 | !(p2@17@01) | live]
; [else-branch: 2871 | p2@17@01 | live]
(push) ; 39
; [then-branch: 2871 | !(p2@17@01)]
(pop) ; 39
(push) ; 39
; [else-branch: 2871 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 40
; [then-branch: 2872 | False | live]
; [else-branch: 2872 | True | live]
(push) ; 41
; [then-branch: 2872 | False]
(assert false)
(pop) ; 41
(push) ; 41
; [else-branch: 2872 | True]
; [eval] !except2
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
; [then-branch: 2873 | p2@17@01 | dead]
; [else-branch: 2873 | !(p2@17@01) | live]
(push) ; 38
; [else-branch: 2873 | !(p2@17@01)]
(pop) ; 38
; [eval] !(p2 && (!break2 && !except2))
; [eval] p2 && (!break2 && !except2)
(push) ; 38
; [then-branch: 2874 | !(p2@17@01) | live]
; [else-branch: 2874 | p2@17@01 | live]
(push) ; 39
; [then-branch: 2874 | !(p2@17@01)]
(pop) ; 39
(push) ; 39
; [else-branch: 2874 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 40
; [then-branch: 2875 | False | live]
; [else-branch: 2875 | True | live]
(push) ; 41
; [then-branch: 2875 | False]
(assert false)
(pop) ; 41
(push) ; 41
; [else-branch: 2875 | True]
; [eval] !except2
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not p2@17@01))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2876 | !(p2@17@01) | live]
; [else-branch: 2876 | p2@17@01 | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 2876 | !(p2@17@01)]
; [eval] p1 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2877 | p1@16@01 | live]
; [else-branch: 2877 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2877 | p1@16@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2 ==> true
(push) ; 39
; [then-branch: 2878 | p2@17@01 | dead]
; [else-branch: 2878 | !(p2@17@01) | live]
(push) ; 40
; [else-branch: 2878 | !(p2@17@01)]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2879 | p1@16@01 | live]
; [else-branch: 2879 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 2879 | p1@16@01]
; [eval] _err == null
; [then-branch: 2880 | tmp@355@01 == Null | dead]
; [else-branch: 2880 | tmp@355@01 != Null | live]
(push) ; 40
; [else-branch: 2880 | tmp@355@01 != Null]
; [then-branch: 2881 | p2@17@01 | dead]
; [else-branch: 2881 | !(p2@17@01) | live]
(push) ; 41
; [else-branch: 2881 | !(p2@17@01)]
(push) ; 42
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2882 | p1@16@01 | live]
; [else-branch: 2882 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 2882 | p1@16@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 43
; [then-branch: 2883 | tmp@355@01 == Null | live]
; [else-branch: 2883 | tmp@355@01 != Null | live]
(push) ; 44
; [then-branch: 2883 | tmp@355@01 == Null]
(assert (= tmp@355@01 $Ref.null))
(pop) ; 44
(push) ; 44
; [else-branch: 2883 | tmp@355@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(assert (or (not (= tmp@355@01 $Ref.null)) (= tmp@355@01 $Ref.null)))
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= tmp@355@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> tmp@355@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (and
  (not (= tmp@355@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp@355@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2884 | tmp@355@01 != Null && issubtype[Bool](typeof[PyType](tmp@355@01), Exception[PyType]) | live]
; [else-branch: 2884 | !(tmp@355@01 != Null && issubtype[Bool](typeof[PyType](tmp@355@01), Exception[PyType])) | dead]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 2884 | tmp@355@01 != Null && issubtype[Bool](typeof[PyType](tmp@355@01), Exception[PyType])]
(assert (and
  (not (= tmp@355@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp@355@01) (as Exception<PyType>  PyType))))
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@354@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@354@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c.Container_value, __prim__int___box__(7))
; [eval] __prim__int___box__(7)
(push) ; 44
(pop) ; 44
; Joined path conditions
(push) ; 44
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 45
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@354@01 (__prim__int___box__ $Snap.unit 7)))
(pop) ; 44
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@354@01 (__prim__int___box__ $Snap.unit 7))))
(push) ; 44
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@354@01 (__prim__int___box__ $Snap.unit 7))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@354@01 (__prim__int___box__ $Snap.unit 7)))
; [then-branch: 2885 | p2@17@01 | dead]
; [else-branch: 2885 | !(p2@17@01) | live]
(push) ; 44
; [else-branch: 2885 | !(p2@17@01)]
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2886 | p1@16@01 | live]
; [else-branch: 2886 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 2886 | p1@16@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp@355@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2887 | tmp@355@01 != Null | live]
; [else-branch: 2887 | tmp@355@01 == Null | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 2887 | tmp@355@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(pop) ; 46
(pop) ; 45
; Joined path conditions
(push) ; 45
(assert (not (=>
  (and p1@16@01 (not (= tmp@355@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp@355@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not (= tmp@355@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp@355@01) (as Exception<PyType>  PyType))))
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 45
; [then-branch: 2888 | p2@17@01 | dead]
; [else-branch: 2888 | !(p2@17@01) | live]
(push) ; 46
; [else-branch: 2888 | !(p2@17@01)]
(pop) ; 46
(pop) ; 45
; Joined path conditions
; [eval] p1 ==> (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))
(push) ; 45
(push) ; 46
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2889 | p1@16@01 | live]
; [else-branch: 2889 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 2889 | p1@16@01]
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
(push) ; 47
; [then-branch: 2890 | False | live]
; [else-branch: 2890 | True | live]
(push) ; 48
; [then-branch: 2890 | False]
(assert false)
(pop) ; 48
(push) ; 48
; [else-branch: 2890 | True]
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
(push) ; 49
; [then-branch: 2891 | False | live]
; [else-branch: 2891 | True | live]
(push) ; 50
; [then-branch: 2891 | False]
(assert false)
(pop) ; 50
(push) ; 50
; [else-branch: 2891 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
(push) ; 51
; [then-branch: 2892 | False | live]
; [else-branch: 2892 | True | live]
(push) ; 52
; [then-branch: 2892 | False]
(assert false)
(pop) ; 52
(push) ; 52
; [else-branch: 2892 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(pop) ; 50
(pop) ; 49
; Joined path conditions
; Joined path conditions
(pop) ; 48
(pop) ; 47
; Joined path conditions
; Joined path conditions
(pop) ; 46
(pop) ; 45
; Joined path conditions
; [eval] p2 ==> (forperm _r_2: Ref [MustInvokeBounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: false)))
(push) ; 45
; [then-branch: 2893 | p2@17@01 | dead]
; [else-branch: 2893 | !(p2@17@01) | live]
(push) ; 46
; [else-branch: 2893 | !(p2@17@01)]
(pop) ; 46
(pop) ; 45
; Joined path conditions
(pop) ; 44
(pop) ; 43
(pop) ; 42
(pop) ; 41
(pop) ; 40
(pop) ; 39
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
; [eval] !!bypass1
; [eval] !bypass1
(push) ; 35
(set-option :timeout 10)
(assert (not (not bypass1@274@01)))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2894 | bypass1@274@01 | dead]
; [else-branch: 2894 | !(bypass1@274@01) | live]
(set-option :timeout 0)
(push) ; 35
; [else-branch: 2894 | !(bypass1@274@01)]
(assert (not bypass1@274@01))
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 25
; [then-branch: 2895 | !(p1_1@350@01) | live]
; [else-branch: 2895 | p1_1@350@01 | live]
(push) ; 26
; [then-branch: 2895 | !(p1_1@350@01)]
(assert (not p1_1@350@01))
(pop) ; 26
(push) ; 26
; [else-branch: 2895 | p1_1@350@01]
; [eval] !break1
(push) ; 27
; [then-branch: 2896 | False | live]
; [else-branch: 2896 | True | live]
(push) ; 28
; [then-branch: 2896 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 2896 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 2897 | !(p1_1@350@01) | dead]
; [else-branch: 2897 | p1_1@350@01 | live]
(push) ; 25
; [else-branch: 2897 | p1_1@350@01]
(pop) ; 25
(pop) ; 24
(pop) ; 23
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 23
; [then-branch: 2898 | !(p1_1@350@01) | live]
; [else-branch: 2898 | p1_1@350@01 | live]
(push) ; 24
; [then-branch: 2898 | !(p1_1@350@01)]
(assert (not p1_1@350@01))
(pop) ; 24
(push) ; 24
; [else-branch: 2898 | p1_1@350@01]
; [eval] !break1
(push) ; 25
; [then-branch: 2899 | False | live]
; [else-branch: 2899 | True | live]
(push) ; 26
; [then-branch: 2899 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 2899 | True]
; [eval] !except1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 2900 | !(p1_1@350@01) | dead]
; [else-branch: 2900 | p1_1@350@01 | live]
(push) ; 23
; [else-branch: 2900 | p1_1@350@01]
(pop) ; 23
(pop) ; 22
(pop) ; 21
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 21
; [then-branch: 2901 | !(p1_1@350@01) | live]
; [else-branch: 2901 | p1_1@350@01 | live]
(push) ; 22
; [then-branch: 2901 | !(p1_1@350@01)]
(assert (not p1_1@350@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2901 | p1_1@350@01]
; [eval] !break1
(push) ; 23
; [then-branch: 2902 | False | live]
; [else-branch: 2902 | True | live]
(push) ; 24
; [then-branch: 2902 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 2902 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 2903 | !(p1_1@350@01) | dead]
; [else-branch: 2903 | p1_1@350@01 | live]
(push) ; 21
; [else-branch: 2903 | p1_1@350@01]
(pop) ; 21
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 2768 | !(p1_1@350@01)]
(assert (not p1_1@350@01))
(pop) ; 19
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 19
; [then-branch: 2904 | !(p1_1@350@01) | live]
; [else-branch: 2904 | p1_1@350@01 | live]
(push) ; 20
; [then-branch: 2904 | !(p1_1@350@01)]
(assert (not p1_1@350@01))
(pop) ; 20
(push) ; 20
; [else-branch: 2904 | p1_1@350@01]
(assert p1_1@350@01)
; [eval] !break1
(push) ; 21
; [then-branch: 2905 | False | live]
; [else-branch: 2905 | True | live]
(push) ; 22
; [then-branch: 2905 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 2905 | True]
; [eval] !except1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not p1_1@350@01))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_1@350@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2906 | !(p1_1@350@01) | live]
; [else-branch: 2906 | p1_1@350@01 | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 2906 | !(p1_1@350@01)]
(assert (not p1_1@350@01))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 20
; [then-branch: 2907 | !(p2_1@351@01) | live]
; [else-branch: 2907 | p2_1@351@01 | live]
(push) ; 21
; [then-branch: 2907 | !(p2_1@351@01)]
(assert (not p2_1@351@01))
(pop) ; 21
(push) ; 21
; [else-branch: 2907 | p2_1@351@01]
(assert p2_1@351@01)
; [eval] !break2
(push) ; 22
; [then-branch: 2908 | False | live]
; [else-branch: 2908 | True | live]
(push) ; 23
; [then-branch: 2908 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 2908 | True]
; [eval] !except2
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_1@351@01)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2909 | p2_1@351@01 | dead]
; [else-branch: 2909 | !(p2_1@351@01) | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 2909 | !(p2_1@351@01)]
(assert (not p2_1@351@01))
(pop) ; 20
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 20
; [then-branch: 2910 | !(p2_1@351@01) | live]
; [else-branch: 2910 | p2_1@351@01 | live]
(push) ; 21
; [then-branch: 2910 | !(p2_1@351@01)]
(assert (not p2_1@351@01))
(pop) ; 21
(push) ; 21
; [else-branch: 2910 | p2_1@351@01]
(assert p2_1@351@01)
; [eval] !break2
(push) ; 22
; [then-branch: 2911 | False | live]
; [else-branch: 2911 | True | live]
(push) ; 23
; [then-branch: 2911 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 2911 | True]
; [eval] !except2
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not p2_1@351@01))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_1@351@01)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2912 | !(p2_1@351@01) | live]
; [else-branch: 2912 | p2_1@351@01 | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 2912 | !(p2_1@351@01)]
(assert (not p2_1@351@01))
; [exec]
; tmp := new()
(declare-const tmp@359@01 $Ref)
(assert (not (= tmp@359@01 $Ref.null)))
(assert (not (= tmp@359@01 _err_0@295@01)))
(assert (not (= tmp@359@01 Exception_res@291@01)))
(assert (not (= tmp@359@01 tmp1_2@258@01)))
(assert (not (= tmp@359@01 _err_0@31@01)))
(assert (not (= tmp@359@01 _err@293@01)))
(assert (not
  (=
    tmp@359@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@305@01)))))))
(assert (not (= tmp@359@01 Exception_res_2@245@01)))
(assert (not (= tmp@359@01 tmp@343@01)))
(assert (not (= tmp@359@01 c_9@25@01)))
(assert (not (= tmp@359@01 Exception_res_2@292@01)))
(assert (not (= tmp@359@01 _cthread_157_0@19@01)))
(assert (not (= tmp@359@01 b_9@27@01)))
(assert (not (= tmp@359@01 tmp1_0@254@01)))
(assert (not (= tmp@359@01 b@26@01)))
(assert (not (= tmp@359@01 _cthread_157@18@01)))
(assert (not (= tmp@359@01 c_4_0@231@01)))
(assert (not (= tmp@359@01 c@24@01)))
(assert (not (= tmp@359@01 b_4_0@233@01)))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 21
; [then-branch: 2913 | !(p1_1@350@01) | live]
; [else-branch: 2913 | p1_1@350@01 | live]
(push) ; 22
; [then-branch: 2913 | !(p1_1@350@01)]
(pop) ; 22
(push) ; 22
; [else-branch: 2913 | p1_1@350@01]
(assert p1_1@350@01)
; [eval] !break1
(push) ; 23
; [then-branch: 2914 | False | live]
; [else-branch: 2914 | True | live]
(push) ; 24
; [then-branch: 2914 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 2914 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 2915 | p1_1@350@01 | dead]
; [else-branch: 2915 | !(p1_1@350@01) | live]
(push) ; 21
; [else-branch: 2915 | !(p1_1@350@01)]
(pop) ; 21
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 21
; [then-branch: 2916 | !(p1_1@350@01) | live]
; [else-branch: 2916 | p1_1@350@01 | live]
(push) ; 22
; [then-branch: 2916 | !(p1_1@350@01)]
(pop) ; 22
(push) ; 22
; [else-branch: 2916 | p1_1@350@01]
(assert p1_1@350@01)
; [eval] !break1
(push) ; 23
; [then-branch: 2917 | False | live]
; [else-branch: 2917 | True | live]
(push) ; 24
; [then-branch: 2917 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 2917 | True]
; [eval] !except1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not p1_1@350@01))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2918 | !(p1_1@350@01) | live]
; [else-branch: 2918 | p1_1@350@01 | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 2918 | !(p1_1@350@01)]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 22
; [then-branch: 2919 | !(p2_1@351@01) | live]
; [else-branch: 2919 | p2_1@351@01 | live]
(push) ; 23
; [then-branch: 2919 | !(p2_1@351@01)]
(pop) ; 23
(push) ; 23
; [else-branch: 2919 | p2_1@351@01]
(assert p2_1@351@01)
; [eval] !break2
(push) ; 24
; [then-branch: 2920 | False | live]
; [else-branch: 2920 | True | live]
(push) ; 25
; [then-branch: 2920 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 2920 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 2921 | p2_1@351@01 | dead]
; [else-branch: 2921 | !(p2_1@351@01) | live]
(push) ; 22
; [else-branch: 2921 | !(p2_1@351@01)]
(pop) ; 22
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 22
; [then-branch: 2922 | !(p2_1@351@01) | live]
; [else-branch: 2922 | p2_1@351@01 | live]
(push) ; 23
; [then-branch: 2922 | !(p2_1@351@01)]
(pop) ; 23
(push) ; 23
; [else-branch: 2922 | p2_1@351@01]
(assert p2_1@351@01)
; [eval] !break2
(push) ; 24
; [then-branch: 2923 | False | live]
; [else-branch: 2923 | True | live]
(push) ; 25
; [then-branch: 2923 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 2923 | True]
; [eval] !except2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not p2_1@351@01))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2924 | !(p2_1@351@01) | live]
; [else-branch: 2924 | p2_1@351@01 | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 2924 | !(p2_1@351@01)]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 23
; [then-branch: 2925 | !(p1_1@350@01) | live]
; [else-branch: 2925 | p1_1@350@01 | live]
(push) ; 24
; [then-branch: 2925 | !(p1_1@350@01)]
(pop) ; 24
(push) ; 24
; [else-branch: 2925 | p1_1@350@01]
(assert p1_1@350@01)
; [eval] !break1
(push) ; 25
; [then-branch: 2926 | False | live]
; [else-branch: 2926 | True | live]
(push) ; 26
; [then-branch: 2926 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 2926 | True]
; [eval] !except1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 2927 | p1_1@350@01 | dead]
; [else-branch: 2927 | !(p1_1@350@01) | live]
(push) ; 23
; [else-branch: 2927 | !(p1_1@350@01)]
(pop) ; 23
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 23
; [then-branch: 2928 | !(p1_1@350@01) | live]
; [else-branch: 2928 | p1_1@350@01 | live]
(push) ; 24
; [then-branch: 2928 | !(p1_1@350@01)]
(pop) ; 24
(push) ; 24
; [else-branch: 2928 | p1_1@350@01]
(assert p1_1@350@01)
; [eval] !break1
(push) ; 25
; [then-branch: 2929 | False | live]
; [else-branch: 2929 | True | live]
(push) ; 26
; [then-branch: 2929 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 2929 | True]
; [eval] !except1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not p1_1@350@01))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2930 | !(p1_1@350@01) | live]
; [else-branch: 2930 | p1_1@350@01 | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 2930 | !(p1_1@350@01)]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 24
; [then-branch: 2931 | !(p2_1@351@01) | live]
; [else-branch: 2931 | p2_1@351@01 | live]
(push) ; 25
; [then-branch: 2931 | !(p2_1@351@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 2931 | p2_1@351@01]
(assert p2_1@351@01)
; [eval] !break2
(push) ; 26
; [then-branch: 2932 | False | live]
; [else-branch: 2932 | True | live]
(push) ; 27
; [then-branch: 2932 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 2932 | True]
; [eval] !except2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 2933 | p2_1@351@01 | dead]
; [else-branch: 2933 | !(p2_1@351@01) | live]
(push) ; 24
; [else-branch: 2933 | !(p2_1@351@01)]
(pop) ; 24
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 24
; [then-branch: 2934 | !(p2_1@351@01) | live]
; [else-branch: 2934 | p2_1@351@01 | live]
(push) ; 25
; [then-branch: 2934 | !(p2_1@351@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 2934 | p2_1@351@01]
(assert p2_1@351@01)
; [eval] !break2
(push) ; 26
; [then-branch: 2935 | False | live]
; [else-branch: 2935 | True | live]
(push) ; 27
; [then-branch: 2935 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 2935 | True]
; [eval] !except2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not p2_1@351@01))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2936 | !(p2_1@351@01) | live]
; [else-branch: 2936 | p2_1@351@01 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 2936 | !(p2_1@351@01)]
; [eval] p1_1 && (!break1 && !except1)
(push) ; 25
; [then-branch: 2937 | !(p1_1@350@01) | live]
; [else-branch: 2937 | p1_1@350@01 | live]
(push) ; 26
; [then-branch: 2937 | !(p1_1@350@01)]
(pop) ; 26
(push) ; 26
; [else-branch: 2937 | p1_1@350@01]
(assert p1_1@350@01)
; [eval] !break1
(push) ; 27
; [then-branch: 2938 | False | live]
; [else-branch: 2938 | True | live]
(push) ; 28
; [then-branch: 2938 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 2938 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 2939 | p1_1@350@01 | dead]
; [else-branch: 2939 | !(p1_1@350@01) | live]
(push) ; 25
; [else-branch: 2939 | !(p1_1@350@01)]
(pop) ; 25
; [eval] !(p1_1 && (!break1 && !except1))
; [eval] p1_1 && (!break1 && !except1)
(push) ; 25
; [then-branch: 2940 | !(p1_1@350@01) | live]
; [else-branch: 2940 | p1_1@350@01 | live]
(push) ; 26
; [then-branch: 2940 | !(p1_1@350@01)]
(pop) ; 26
(push) ; 26
; [else-branch: 2940 | p1_1@350@01]
(assert p1_1@350@01)
; [eval] !break1
(push) ; 27
; [then-branch: 2941 | False | live]
; [else-branch: 2941 | True | live]
(push) ; 28
; [then-branch: 2941 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 2941 | True]
; [eval] !except1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not p1_1@350@01))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2942 | !(p1_1@350@01) | live]
; [else-branch: 2942 | p1_1@350@01 | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 2942 | !(p1_1@350@01)]
; [eval] p2_1 && (!break2 && !except2)
(push) ; 26
; [then-branch: 2943 | !(p2_1@351@01) | live]
; [else-branch: 2943 | p2_1@351@01 | live]
(push) ; 27
; [then-branch: 2943 | !(p2_1@351@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 2943 | p2_1@351@01]
(assert p2_1@351@01)
; [eval] !break2
(push) ; 28
; [then-branch: 2944 | False | live]
; [else-branch: 2944 | True | live]
(push) ; 29
; [then-branch: 2944 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 2944 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 2945 | p2_1@351@01 | dead]
; [else-branch: 2945 | !(p2_1@351@01) | live]
(push) ; 26
; [else-branch: 2945 | !(p2_1@351@01)]
(pop) ; 26
; [eval] !(p2_1 && (!break2 && !except2))
; [eval] p2_1 && (!break2 && !except2)
(push) ; 26
; [then-branch: 2946 | !(p2_1@351@01) | live]
; [else-branch: 2946 | p2_1@351@01 | live]
(push) ; 27
; [then-branch: 2946 | !(p2_1@351@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 2946 | p2_1@351@01]
(assert p2_1@351@01)
; [eval] !break2
(push) ; 28
; [then-branch: 2947 | False | live]
; [else-branch: 2947 | True | live]
(push) ; 29
; [then-branch: 2947 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 2947 | True]
; [eval] !except2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not p2_1@351@01))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2948 | !(p2_1@351@01) | live]
; [else-branch: 2948 | p2_1@351@01 | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 2948 | !(p2_1@351@01)]
; [exec]
; p1_3 := p3 &&
;   (!break1 && !except1 &&
;   perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] p3 && (!break1 && !except1 && perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 2949 | !(p3@352@01) | live]
; [else-branch: 2949 | p3@352@01 | live]
(push) ; 28
; [then-branch: 2949 | !(p3@352@01)]
(assert (not p3@352@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2949 | p3@352@01]
(assert p3@352@01)
; [eval] !break1
(push) ; 29
; [then-branch: 2950 | False | live]
; [else-branch: 2950 | True | live]
(push) ; 30
; [then-branch: 2950 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2950 | True]
; [eval] !except1
(push) ; 31
; [then-branch: 2951 | False | live]
; [else-branch: 2951 | True | live]
(push) ; 32
; [then-branch: 2951 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2951 | True]
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or p3@352@01 (not p3@352@01)))
; [exec]
; p2_3 := p4 &&
;   (!break2 && !except2 &&
;   perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] p4 && (!break2 && !except2 && perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 2952 | !(p4@353@01) | live]
; [else-branch: 2952 | p4@353@01 | live]
(push) ; 28
; [then-branch: 2952 | !(p4@353@01)]
(assert (not p4@353@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2952 | p4@353@01]
(assert p4@353@01)
; [eval] !break2
(push) ; 29
; [then-branch: 2953 | False | live]
; [else-branch: 2953 | True | live]
(push) ; 30
; [then-branch: 2953 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2953 | True]
; [eval] !except2
(push) ; 31
; [then-branch: 2954 | False | live]
; [else-branch: 2954 | True | live]
(push) ; 32
; [then-branch: 2954 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2954 | True]
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or p4@353@01 (not p4@353@01)))
; [exec]
; p3_1 := p3 &&
;   (!break1 && !except1 &&
;   !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
; [eval] p3 && (!break1 && !except1 && !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 2955 | !(p3@352@01) | live]
; [else-branch: 2955 | p3@352@01 | live]
(push) ; 28
; [then-branch: 2955 | !(p3@352@01)]
(assert (not p3@352@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2955 | p3@352@01]
(assert p3@352@01)
; [eval] !break1
(push) ; 29
; [then-branch: 2956 | False | live]
; [else-branch: 2956 | True | live]
(push) ; 30
; [then-branch: 2956 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2956 | True]
; [eval] !except1
(push) ; 31
; [then-branch: 2957 | False | live]
; [else-branch: 2957 | True | live]
(push) ; 32
; [then-branch: 2957 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2957 | True]
; [eval] !(perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_4, 526803611440346310908232101056638787))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p4_1 := p4 &&
;   (!break2 && !except2 &&
;   !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
; [eval] p4 && (!break2 && !except2 && !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 2958 | !(p4@353@01) | live]
; [else-branch: 2958 | p4@353@01 | live]
(push) ; 28
; [then-branch: 2958 | !(p4@353@01)]
(assert (not p4@353@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2958 | p4@353@01]
(assert p4@353@01)
; [eval] !break2
(push) ; 29
; [then-branch: 2959 | False | live]
; [else-branch: 2959 | True | live]
(push) ; 30
; [then-branch: 2959 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 2959 | True]
; [eval] !except2
(push) ; 31
; [then-branch: 2960 | False | live]
; [else-branch: 2960 | True | live]
(push) ; 32
; [then-branch: 2960 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2960 | True]
; [eval] !(perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_4_0, 526803611440346310908232101056638787))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [eval] p1_3 && (!break1 && !except1)
; [then-branch: 2961 | False | dead]
; [else-branch: 2961 | True | live]
(push) ; 27
; [else-branch: 2961 | True]
(pop) ; 27
; [eval] !(p1_3 && (!break1 && !except1))
; [eval] p1_3 && (!break1 && !except1)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2962 | True | live]
; [else-branch: 2962 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 2962 | True]
; [eval] p2_3 && (!break2 && !except2)
; [then-branch: 2963 | False | dead]
; [else-branch: 2963 | True | live]
(push) ; 28
; [else-branch: 2963 | True]
(pop) ; 28
; [eval] !(p2_3 && (!break2 && !except2))
; [eval] p2_3 && (!break2 && !except2)
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2964 | True | live]
; [else-branch: 2964 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2964 | True]
; [eval] p3 && (!break1 && !except1)
(push) ; 29
; [then-branch: 2965 | !(p3@352@01) | live]
; [else-branch: 2965 | p3@352@01 | live]
(push) ; 30
; [then-branch: 2965 | !(p3@352@01)]
(assert (not p3@352@01))
(pop) ; 30
(push) ; 30
; [else-branch: 2965 | p3@352@01]
(assert p3@352@01)
; [eval] !break1
(push) ; 31
; [then-branch: 2966 | False | live]
; [else-branch: 2966 | True | live]
(push) ; 32
; [then-branch: 2966 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2966 | True]
; [eval] !except1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p3@352@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not p3@352@01))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2967 | p3@352@01 | live]
; [else-branch: 2967 | !(p3@352@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 2967 | p3@352@01]
(assert p3@352@01)
; [exec]
; c_4.Container_value := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 30
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 30
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_value@360@01 $Ref)
(assert (= Container_value@360@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p4 && (!break2 && !except2)
(push) ; 30
; [then-branch: 2968 | !(p4@353@01) | live]
; [else-branch: 2968 | p4@353@01 | live]
(push) ; 31
; [then-branch: 2968 | !(p4@353@01)]
(assert (not p4@353@01))
(pop) ; 31
(push) ; 31
; [else-branch: 2968 | p4@353@01]
(assert p4@353@01)
; [eval] !break2
(push) ; 32
; [then-branch: 2969 | False | live]
; [else-branch: 2969 | True | live]
(push) ; 33
; [then-branch: 2969 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 2969 | True]
; [eval] !except2
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (not p4@353@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2970 | p4@353@01 | dead]
; [else-branch: 2970 | !(p4@353@01) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 2970 | !(p4@353@01)]
(assert (not p4@353@01))
(pop) ; 30
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 30
; [then-branch: 2971 | !(p4@353@01) | live]
; [else-branch: 2971 | p4@353@01 | live]
(push) ; 31
; [then-branch: 2971 | !(p4@353@01)]
(assert (not p4@353@01))
(pop) ; 31
(push) ; 31
; [else-branch: 2971 | p4@353@01]
(assert p4@353@01)
; [eval] !break2
(push) ; 32
; [then-branch: 2972 | False | live]
; [else-branch: 2972 | True | live]
(push) ; 33
; [then-branch: 2972 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 2972 | True]
; [eval] !except2
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not p4@353@01))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (not p4@353@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2973 | !(p4@353@01) | live]
; [else-branch: 2973 | p4@353@01 | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2973 | !(p4@353@01)]
(assert (not p4@353@01))
; [eval] p3 && (!break1 && !except1)
(push) ; 31
; [then-branch: 2974 | !(p3@352@01) | live]
; [else-branch: 2974 | p3@352@01 | live]
(push) ; 32
; [then-branch: 2974 | !(p3@352@01)]
(assert (not p3@352@01))
(pop) ; 32
(push) ; 32
; [else-branch: 2974 | p3@352@01]
; [eval] !break1
(push) ; 33
; [then-branch: 2975 | False | live]
; [else-branch: 2975 | True | live]
(push) ; 34
; [then-branch: 2975 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 2975 | True]
; [eval] !except1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p3@352@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2976 | p3@352@01 | live]
; [else-branch: 2976 | !(p3@352@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 2976 | p3@352@01]
; [exec]
; break1 := true
; [eval] p4 && (!break2 && !except2)
(push) ; 32
; [then-branch: 2977 | !(p4@353@01) | live]
; [else-branch: 2977 | p4@353@01 | live]
(push) ; 33
; [then-branch: 2977 | !(p4@353@01)]
(pop) ; 33
(push) ; 33
; [else-branch: 2977 | p4@353@01]
(assert p4@353@01)
; [eval] !break2
(push) ; 34
; [then-branch: 2978 | False | live]
; [else-branch: 2978 | True | live]
(push) ; 35
; [then-branch: 2978 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 2978 | True]
; [eval] !except2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 2979 | p4@353@01 | dead]
; [else-branch: 2979 | !(p4@353@01) | live]
(push) ; 32
; [else-branch: 2979 | !(p4@353@01)]
(pop) ; 32
; [eval] !(p4 && (!break2 && !except2))
; [eval] p4 && (!break2 && !except2)
(push) ; 32
; [then-branch: 2980 | !(p4@353@01) | live]
; [else-branch: 2980 | p4@353@01 | live]
(push) ; 33
; [then-branch: 2980 | !(p4@353@01)]
(pop) ; 33
(push) ; 33
; [else-branch: 2980 | p4@353@01]
(assert p4@353@01)
; [eval] !break2
(push) ; 34
; [then-branch: 2981 | False | live]
; [else-branch: 2981 | True | live]
(push) ; 35
; [then-branch: 2981 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 2981 | True]
; [eval] !except2
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not p4@353@01))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2982 | !(p4@353@01) | live]
; [else-branch: 2982 | p4@353@01 | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2982 | !(p4@353@01)]
; [eval] p1_0 && (!break1 && !except1)
(push) ; 33
; [then-branch: 2983 | !(p1@16@01) | live]
; [else-branch: 2983 | p1@16@01 | live]
(push) ; 34
; [then-branch: 2983 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 34
(push) ; 34
; [else-branch: 2983 | p1@16@01]
; [eval] !break1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 2984 | False | dead]
; [else-branch: 2984 | True | live]
(push) ; 33
; [else-branch: 2984 | True]
(pop) ; 33
; [eval] !(p1_0 && (!break1 && !except1))
; [eval] p1_0 && (!break1 && !except1)
(push) ; 33
; [then-branch: 2985 | !(p1@16@01) | live]
; [else-branch: 2985 | p1@16@01 | live]
(push) ; 34
; [then-branch: 2985 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 34
(push) ; 34
; [else-branch: 2985 | p1@16@01]
; [eval] !break1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2986 | True | live]
; [else-branch: 2986 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 2986 | True]
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 2987 | !(p2@17@01) | live]
; [else-branch: 2987 | p2@17@01 | live]
(push) ; 35
; [then-branch: 2987 | !(p2@17@01)]
(pop) ; 35
(push) ; 35
; [else-branch: 2987 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 36
; [then-branch: 2988 | False | live]
; [else-branch: 2988 | True | live]
(push) ; 37
; [then-branch: 2988 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 2988 | True]
; [eval] !except2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
; [then-branch: 2989 | p2@17@01 | dead]
; [else-branch: 2989 | !(p2@17@01) | live]
(push) ; 34
; [else-branch: 2989 | !(p2@17@01)]
(pop) ; 34
; [eval] !(p2_0 && (!break2 && !except2))
; [eval] p2_0 && (!break2 && !except2)
(push) ; 34
; [then-branch: 2990 | !(p2@17@01) | live]
; [else-branch: 2990 | p2@17@01 | live]
(push) ; 35
; [then-branch: 2990 | !(p2@17@01)]
(pop) ; 35
(push) ; 35
; [else-branch: 2990 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 36
; [then-branch: 2991 | False | live]
; [else-branch: 2991 | True | live]
(push) ; 37
; [then-branch: 2991 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 2991 | True]
; [eval] !except2
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not p2@17@01))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2992 | !(p2@17@01) | live]
; [else-branch: 2992 | p2@17@01 | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 2992 | !(p2@17@01)]
; [exec]
; assert (p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true) &&
;   (p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true)
; [eval] p1_0 && (!break1 && !except1) ==> _loop_termination_flag ==> !true
; [eval] p1_0 && (!break1 && !except1)
(push) ; 35
; [then-branch: 2993 | !(p1@16@01) | live]
; [else-branch: 2993 | p1@16@01 | live]
(push) ; 36
; [then-branch: 2993 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 36
(push) ; 36
; [else-branch: 2993 | p1@16@01]
; [eval] !break1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
; [then-branch: 2994 | False | dead]
; [else-branch: 2994 | True | live]
(push) ; 36
; [else-branch: 2994 | True]
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p2_0 && (!break2 && !except2) ==> _loop_termination_flag_4 ==> !true
; [eval] p2_0 && (!break2 && !except2)
(push) ; 35
; [then-branch: 2995 | !(p2@17@01) | live]
; [else-branch: 2995 | p2@17@01 | live]
(push) ; 36
; [then-branch: 2995 | !(p2@17@01)]
(pop) ; 36
(push) ; 36
; [else-branch: 2995 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 37
; [then-branch: 2996 | False | live]
; [else-branch: 2996 | True | live]
(push) ; 38
; [then-branch: 2996 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 2996 | True]
; [eval] !except2
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
; [then-branch: 2997 | p2@17@01 | dead]
; [else-branch: 2997 | !(p2@17@01) | live]
(push) ; 36
; [else-branch: 2997 | !(p2@17@01)]
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [exec]
; inhale !p1_0 || !(!break1 && !except1)
(declare-const $t@361@01 $Snap)
(assert (= $t@361@01 $Snap.unit))
; [eval] !p1_0 || !(!break1 && !except1)
; [eval] !p1_0
(push) ; 35
; [then-branch: 2998 | !(p1@16@01) | live]
; [else-branch: 2998 | p1@16@01 | live]
(push) ; 36
; [then-branch: 2998 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 36
(push) ; 36
; [else-branch: 2998 | p1@16@01]
; [eval] !(!break1 && !except1)
; [eval] !break1 && !except1
; [eval] !break1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !p2_0 || !(!break2 && !except2)
(declare-const $t@362@01 $Snap)
(assert (= $t@362@01 $Snap.unit))
; [eval] !p2_0 || !(!break2 && !except2)
; [eval] !p2_0
(set-option :timeout 0)
(push) ; 35
; [then-branch: 2999 | !(p2@17@01) | live]
; [else-branch: 2999 | p2@17@01 | live]
(push) ; 36
; [then-branch: 2999 | !(p2@17@01)]
(pop) ; 36
(push) ; 36
; [else-branch: 2999 | p2@17@01]
(assert p2@17@01)
; [eval] !(!break2 && !except2)
; [eval] !break2 && !except2
; [eval] !break2
(push) ; 37
; [then-branch: 3000 | False | live]
; [else-branch: 3000 | True | live]
(push) ; 38
; [then-branch: 3000 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 3000 | True]
; [eval] !except2
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] !bypass1
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not bypass1@274@01))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (not bypass1@274@01)))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3001 | !(bypass1@274@01) | live]
; [else-branch: 3001 | bypass1@274@01 | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 3001 | !(bypass1@274@01)]
(assert (not bypass1@274@01))
; [exec]
; break1 := false
; [eval] !bypass2
; [then-branch: 3002 | !(bypass2@275@01) | dead]
; [else-branch: 3002 | bypass2@275@01 | live]
(push) ; 36
; [else-branch: 3002 | bypass2@275@01]
(pop) ; 36
; [eval] !!bypass2
; [eval] !bypass2
(push) ; 36
(set-option :timeout 10)
(assert (not (not bypass2@275@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3003 | bypass2@275@01 | live]
; [else-branch: 3003 | !(bypass2@275@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 3003 | bypass2@275@01]
; [eval] p1 && (!break1 && !except1)
(push) ; 37
; [then-branch: 3004 | !(p1@16@01) | live]
; [else-branch: 3004 | p1@16@01 | live]
(push) ; 38
; [then-branch: 3004 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 38
(push) ; 38
; [else-branch: 3004 | p1@16@01]
; [eval] !break1
(push) ; 39
; [then-branch: 3005 | False | live]
; [else-branch: 3005 | True | live]
(push) ; 40
; [then-branch: 3005 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 3005 | True]
; [eval] !except1
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3006 | p1@16@01 | live]
; [else-branch: 3006 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3006 | p1@16@01]
; [exec]
; exhale perm(MustTerminate(_cthread_157)) > none ==>
;   acc(MustTerminate(_cthread_157), perm(MustTerminate(_cthread_157)) -
;   _loop_original_must_terminate)
; [eval] perm(MustTerminate(_cthread_157)) > none
; [eval] perm(MustTerminate(_cthread_157))
; [then-branch: 3007 | False | dead]
; [else-branch: 3007 | True | live]
(push) ; 38
; [else-branch: 3007 | True]
; [exec]
; _err := null
; [eval] p2 && (!break2 && !except2)
(push) ; 39
; [then-branch: 3008 | !(p2@17@01) | live]
; [else-branch: 3008 | p2@17@01 | live]
(push) ; 40
; [then-branch: 3008 | !(p2@17@01)]
(pop) ; 40
(push) ; 40
; [else-branch: 3008 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 41
; [then-branch: 3009 | False | live]
; [else-branch: 3009 | True | live]
(push) ; 42
; [then-branch: 3009 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 3009 | True]
; [eval] !except2
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
; [then-branch: 3010 | p2@17@01 | dead]
; [else-branch: 3010 | !(p2@17@01) | live]
(push) ; 39
; [else-branch: 3010 | !(p2@17@01)]
(pop) ; 39
; [eval] !(p2 && (!break2 && !except2))
; [eval] p2 && (!break2 && !except2)
(push) ; 39
; [then-branch: 3011 | !(p2@17@01) | live]
; [else-branch: 3011 | p2@17@01 | live]
(push) ; 40
; [then-branch: 3011 | !(p2@17@01)]
(pop) ; 40
(push) ; 40
; [else-branch: 3011 | p2@17@01]
(assert p2@17@01)
; [eval] !break2
(push) ; 41
; [then-branch: 3012 | False | live]
; [else-branch: 3012 | True | live]
(push) ; 42
; [then-branch: 3012 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 3012 | True]
; [eval] !except2
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(push) ; 39
(set-option :timeout 10)
(assert (not p2@17@01))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3013 | !(p2@17@01) | live]
; [else-branch: 3013 | p2@17@01 | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 3013 | !(p2@17@01)]
; [eval] p1 ==> true
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3014 | p1@16@01 | live]
; [else-branch: 3014 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 3014 | p1@16@01]
(pop) ; 41
(pop) ; 40
; Joined path conditions
; [eval] p2 ==> true
(push) ; 40
; [then-branch: 3015 | p2@17@01 | dead]
; [else-branch: 3015 | !(p2@17@01) | live]
(push) ; 41
; [else-branch: 3015 | !(p2@17@01)]
(pop) ; 41
(pop) ; 40
; Joined path conditions
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3016 | p1@16@01 | live]
; [else-branch: 3016 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3016 | p1@16@01]
; [eval] _err == null
(push) ; 41
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3017 | True | live]
; [else-branch: 3017 | False | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 3017 | True]
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@360@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@360@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c.Container_value, __prim__int___box__(8))
; [eval] __prim__int___box__(8)
(push) ; 42
(pop) ; 42
; Joined path conditions
(push) ; 42
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 43
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@360@01 (__prim__int___box__ $Snap.unit 8)))
(pop) ; 42
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@360@01 (__prim__int___box__ $Snap.unit 8))))
(push) ; 42
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@360@01 (__prim__int___box__ $Snap.unit 8))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@360@01 (__prim__int___box__ $Snap.unit 8)))
; [then-branch: 3018 | p2@17@01 | dead]
; [else-branch: 3018 | !(p2@17@01) | live]
(push) ; 42
; [else-branch: 3018 | !(p2@17@01)]
(push) ; 43
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3019 | p1@16@01 | live]
; [else-branch: 3019 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 3019 | p1@16@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
; [then-branch: 3020 | False | dead]
; [else-branch: 3020 | True | live]
(push) ; 44
; [else-branch: 3020 | True]
; [then-branch: 3021 | p2@17@01 | dead]
; [else-branch: 3021 | !(p2@17@01) | live]
(push) ; 45
; [else-branch: 3021 | !(p2@17@01)]
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 46
(push) ; 47
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3022 | p1@16@01 | live]
; [else-branch: 3022 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 47
; [then-branch: 3022 | p1@16@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 48
; [then-branch: 3023 | False | dead]
; [else-branch: 3023 | True | live]
(push) ; 49
; [else-branch: 3023 | True]
(pop) ; 49
(pop) ; 48
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 46
; [then-branch: 3024 | p2@17@01 | dead]
; [else-branch: 3024 | !(p2@17@01) | live]
(push) ; 47
; [else-branch: 3024 | !(p2@17@01)]
(pop) ; 47
(pop) ; 46
; Joined path conditions
; [eval] p1 ==> (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))
(push) ; 46
(push) ; 47
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3025 | p1@16@01 | live]
; [else-branch: 3025 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 47
; [then-branch: 3025 | p1@16@01]
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
(push) ; 48
; [then-branch: 3026 | False | live]
; [else-branch: 3026 | True | live]
(push) ; 49
; [then-branch: 3026 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 3026 | True]
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
(push) ; 50
; [then-branch: 3027 | False | live]
; [else-branch: 3027 | True | live]
(push) ; 51
; [then-branch: 3027 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 3027 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
(push) ; 52
; [then-branch: 3028 | False | live]
; [else-branch: 3028 | True | live]
(push) ; 53
; [then-branch: 3028 | False]
(assert false)
(pop) ; 53
(push) ; 53
; [else-branch: 3028 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 53
(pop) ; 52
; Joined path conditions
; Joined path conditions
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; [eval] p2 ==> (forperm _r_2: Ref [MustInvokeBounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: false)))
(push) ; 46
; [then-branch: 3029 | p2@17@01 | dead]
; [else-branch: 3029 | !(p2@17@01) | live]
(push) ; 47
; [else-branch: 3029 | !(p2@17@01)]
(pop) ; 47
(pop) ; 46
; Joined path conditions
(pop) ; 45
(pop) ; 44
(pop) ; 43
(pop) ; 42
(pop) ; 41
(pop) ; 40
(pop) ; 39
(pop) ; 38
(pop) ; 37
; [eval] !(p1 && (!break1 && !except1))
; [eval] p1 && (!break1 && !except1)
(push) ; 37
; [then-branch: 3030 | !(p1@16@01) | live]
; [else-branch: 3030 | p1@16@01 | live]
(push) ; 38
; [then-branch: 3030 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 38
(push) ; 38
; [else-branch: 3030 | p1@16@01]
; [eval] !break1
(push) ; 39
; [then-branch: 3031 | False | live]
; [else-branch: 3031 | True | live]
(push) ; 40
; [then-branch: 3031 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 3031 | True]
; [eval] !except1
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
; [then-branch: 3032 | !(p1@16@01) | dead]
; [else-branch: 3032 | p1@16@01 | live]
(push) ; 37
; [else-branch: 3032 | p1@16@01]
(pop) ; 37
(pop) ; 36
(pop) ; 35
; [eval] !!bypass1
; [eval] !bypass1
(push) ; 35
(set-option :timeout 10)
(assert (not (not bypass1@274@01)))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3033 | bypass1@274@01 | dead]
; [else-branch: 3033 | !(bypass1@274@01) | live]
(set-option :timeout 0)
(push) ; 35
; [else-branch: 3033 | !(bypass1@274@01)]
(assert (not bypass1@274@01))
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 31
; [then-branch: 3034 | !(p3@352@01) | live]
; [else-branch: 3034 | p3@352@01 | live]
(push) ; 32
; [then-branch: 3034 | !(p3@352@01)]
(assert (not p3@352@01))
(pop) ; 32
(push) ; 32
; [else-branch: 3034 | p3@352@01]
; [eval] !break1
(push) ; 33
; [then-branch: 3035 | False | live]
; [else-branch: 3035 | True | live]
(push) ; 34
; [then-branch: 3035 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 3035 | True]
; [eval] !except1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 3036 | !(p3@352@01) | dead]
; [else-branch: 3036 | p3@352@01 | live]
(push) ; 31
; [else-branch: 3036 | p3@352@01]
(pop) ; 31
(pop) ; 30
(pop) ; 29
; [eval] !(p3 && (!break1 && !except1))
; [eval] p3 && (!break1 && !except1)
(push) ; 29
; [then-branch: 3037 | !(p3@352@01) | live]
; [else-branch: 3037 | p3@352@01 | live]
(push) ; 30
; [then-branch: 3037 | !(p3@352@01)]
(assert (not p3@352@01))
(pop) ; 30
(push) ; 30
; [else-branch: 3037 | p3@352@01]
(assert p3@352@01)
; [eval] !break1
(push) ; 31
; [then-branch: 3038 | False | live]
; [else-branch: 3038 | True | live]
(push) ; 32
; [then-branch: 3038 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 3038 | True]
; [eval] !except1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not p3@352@01))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3039 | !(p3@352@01) | dead]
; [else-branch: 3039 | p3@352@01 | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 3039 | p3@352@01]
(assert p3@352@01)
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 2906 | p1_1@350@01]
(assert p1_1@350@01)
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [eval] !(p1_0 && (!break1 && !except1))
; [eval] p1_0 && (!break1 && !except1)
(push) ; 15
; [then-branch: 3040 | !(p1@16@01) | live]
; [else-branch: 3040 | p1@16@01 | live]
(push) ; 16
; [then-branch: 3040 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 16
(push) ; 16
; [else-branch: 3040 | p1@16@01]
; [eval] !break1
(push) ; 17
; [then-branch: 3041 | False | live]
; [else-branch: 3041 | True | live]
(push) ; 18
; [then-branch: 3041 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 3041 | True]
; [eval] !except1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 3042 | !(p1@16@01) | dead]
; [else-branch: 3042 | p1@16@01 | live]
(push) ; 15
; [else-branch: 3042 | p1@16@01]
(pop) ; 15
(pop) ; 14
; [eval] !(!bypass1 && (break1 || except1) || !bypass2 && (break2 || except2))
; [eval] !bypass1 && (break1 || except1) || !bypass2 && (break2 || except2)
; [eval] !bypass1 && (break1 || except1)
; [eval] !bypass1
(push) ; 14
; [then-branch: 3043 | bypass1@274@01 | live]
; [else-branch: 3043 | !(bypass1@274@01) | live]
(push) ; 15
; [then-branch: 3043 | bypass1@274@01]
(assert bypass1@274@01)
(pop) ; 15
(push) ; 15
; [else-branch: 3043 | !(bypass1@274@01)]
(assert (not bypass1@274@01))
; [eval] break1 || except1
(push) ; 16
; [then-branch: 3044 | break1@301@01 | live]
; [else-branch: 3044 | !(break1@301@01) | live]
(push) ; 17
; [then-branch: 3044 | break1@301@01]
(assert break1@301@01)
(pop) ; 17
(push) ; 17
; [else-branch: 3044 | !(break1@301@01)]
(assert (not break1@301@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1@301@01) break1@301@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 3045 | !(bypass1@274@01) && break1@301@01 || except1@294@01 | live]
; [else-branch: 3045 | !(!(bypass1@274@01) && break1@301@01 || except1@294@01) | live]
(push) ; 15
; [then-branch: 3045 | !(bypass1@274@01) && break1@301@01 || except1@294@01]
(assert (and (not bypass1@274@01) (or break1@301@01 except1@294@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 3045 | !(!(bypass1@274@01) && break1@301@01 || except1@294@01)]
(assert (not (and (not bypass1@274@01) (or break1@301@01 except1@294@01))))
; [eval] !bypass2 && (break2 || except2)
; [eval] !bypass2
(push) ; 16
; [then-branch: 3046 | bypass2@275@01 | live]
; [else-branch: 3046 | !(bypass2@275@01) | live]
(push) ; 17
; [then-branch: 3046 | bypass2@275@01]
(pop) ; 17
(push) ; 17
; [else-branch: 3046 | !(bypass2@275@01)]
(assert (not bypass2@275@01))
; [eval] break2 || except2
(push) ; 18
; [then-branch: 3047 | break2@302@01 | live]
; [else-branch: 3047 | !(break2@302@01) | live]
(push) ; 19
; [then-branch: 3047 | break2@302@01]
(assert break2@302@01)
(pop) ; 19
(push) ; 19
; [else-branch: 3047 | !(break2@302@01)]
(assert (not break2@302@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break2@302@01) break2@302@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not bypass2@275@01)
  (and (not bypass2@275@01) (or (not break2@302@01) break2@302@01))))
(assert (or (not bypass2@275@01) bypass2@275@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (or
  (and (not bypass1@274@01) (or break1@301@01 except1@294@01))
  (and (not bypass2@275@01) (or break2@302@01 except2@296@01)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3048 | !(!(bypass1@274@01) && break1@301@01 || except1@294@01 || !(bypass2@275@01) && break2@302@01 || except2@296@01) | dead]
; [else-branch: 3048 | !(bypass1@274@01) && break1@301@01 || except1@294@01 || !(bypass2@275@01) && break2@302@01 || except2@296@01 | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 3048 | !(bypass1@274@01) && break1@301@01 || except1@294@01 || !(bypass2@275@01) && break2@302@01 || except2@296@01]
(assert (or
  (and (not bypass1@274@01) (or break1@301@01 except1@294@01))
  (and (not bypass2@275@01) (or break2@302@01 except2@296@01))))
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 2704 | p1@16@01 && !(break1@301@01) && !(except1@294@01) && !(bypass1@274@01) || p2@17@01 && !(break2@302@01) && !(except2@296@01) && !(bypass2@275@01)]
(assert (or
  (and
    p1@16@01
    (and (not break1@301@01) (and (not except1@294@01) (not bypass1@274@01))))
  (and
    p2@17@01
    (and (not break2@302@01) (and (not except2@296@01) (not bypass2@275@01))))))
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
; [eval] !bypass2
(push) ; 8
(set-option :timeout 10)
(assert (not bypass2@275@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3049 | !(bypass2@275@01) | dead]
; [else-branch: 3049 | bypass2@275@01 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 3049 | bypass2@275@01]
(assert bypass2@275@01)
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [eval] !(p1 && (!break1 && !except1))
; [eval] p1 && (!break1 && !except1)
(push) ; 5
; [then-branch: 3050 | !(p1@16@01) | live]
; [else-branch: 3050 | p1@16@01 | live]
(push) ; 6
; [then-branch: 3050 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 6
(push) ; 6
; [else-branch: 3050 | p1@16@01]
(assert p1@16@01)
; [eval] !break1
(push) ; 7
; [then-branch: 3051 | False | live]
; [else-branch: 3051 | True | live]
(push) ; 8
; [then-branch: 3051 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 3051 | True]
; [eval] !except1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not p1@16@01))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3052 | !(p1@16@01) | dead]
; [else-branch: 3052 | p1@16@01 | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 3052 | p1@16@01]
(assert p1@16@01)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [else-branch: 8 | !(p1@16@01)]
(assert (not p1@16@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2@17@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3053 | p2@17@01 | live]
; [else-branch: 3053 | !(p2@17@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3053 | p2@17@01]
(assert p2@17@01)
(assert (not (= c_9@25@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))
  $Snap.unit))
; [eval] p1 ==> issubtype(typeof(c.Container_value), int())
(push) ; 4
; [then-branch: 3054 | p1@16@01 | dead]
; [else-branch: 3054 | !(p1@16@01) | live]
(push) ; 5
; [else-branch: 3054 | !(p1@16@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(c_9.Container_valuep), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3055 | p2@17@01 | live]
; [else-branch: 3055 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3055 | p2@17@01]
; [eval] issubtype(typeof(c_9.Container_valuep), int())
; [eval] typeof(c_9.Container_valuep)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p2@17@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 4
; [then-branch: 3056 | p1@16@01 | dead]
; [else-branch: 3056 | !(p1@16@01) | live]
(push) ; 5
; [else-branch: 3056 | !(p1@16@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3057 | p2@17@01 | live]
; [else-branch: 3057 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3057 | p2@17@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@363@01 $Snap)
(assert (= $t@363@01 ($Snap.combine ($Snap.first $t@363@01) ($Snap.second $t@363@01))))
(assert (= ($Snap.first $t@363@01) $Snap.unit))
; [eval] p1 ==> (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_157) && ((forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
(push) ; 5
; [then-branch: 3058 | p1@16@01 | dead]
; [else-branch: 3058 | !(p1@16@01) | live]
(push) ; 6
; [else-branch: 3058 | !(p1@16@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second $t@363@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@363@01))
    ($Snap.second ($Snap.second $t@363@01)))))
(assert (= ($Snap.first ($Snap.second $t@363@01)) $Snap.unit))
; [eval] p2 ==> (forperm _r_1: Ref [_r_1.MustReleaseBoundedp] :: Level(_r_1) <= _current_wait_level_157_0) && ((forperm _r_1: Ref [_r_1.MustReleaseUnboundedp] :: Level(_r_1) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3059 | p2@17@01 | live]
; [else-branch: 3059 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3059 | p2@17@01]
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBoundedp] :: Level(_r_1) <= _current_wait_level_157_0) && ((forperm _r_1: Ref [_r_1.MustReleaseUnboundedp] :: Level(_r_1) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBoundedp] :: Level(_r_1) <= _current_wait_level_157_0)
(push) ; 7
; [then-branch: 3060 | False | live]
; [else-branch: 3060 | True | live]
(push) ; 8
; [then-branch: 3060 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 3060 | True]
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseUnboundedp] :: Level(_r_1) <= _current_wait_level_157_0)
(push) ; 9
; [then-branch: 3061 | False | live]
; [else-branch: 3061 | True | live]
(push) ; 10
; [then-branch: 3061 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3061 | True]
; [eval] _residue_157_0 <= _current_wait_level_157_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p2@17@01 (<= _residue_157_0@23@01 _current_wait_level_157_0@29@01)))
(assert (=
  ($Snap.second ($Snap.second $t@363@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@363@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
; [then-branch: 3062 | p1@16@01 | dead]
; [else-branch: 3062 | !(p1@16@01) | live]
(push) ; 5
; [else-branch: 3062 | !(p1@16@01)]
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@363@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@363@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@363@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3063 | p2@17@01 | live]
; [else-branch: 3063 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3063 | p2@17@01]
; [eval] _err_0 == null
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= _err_0@31@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= _err_0@31@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3064 | _err_0@31@01 == Null | live]
; [else-branch: 3064 | _err_0@31@01 != Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3064 | _err_0@31@01 == Null]
(assert (= _err_0@31@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@363@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_9.Container_valuep), int())
; [eval] typeof(c_9.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
  $Snap.unit))
; [eval] int___eq__(c_9.Container_valuep, __prim__int___box__(8))
; [eval] __prim__int___box__(8)
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(push) ; 8
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) (__prim__int___box__ $Snap.unit 8)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) (__prim__int___box__ $Snap.unit 8))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))) (__prim__int___box__ $Snap.unit 8)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
; [then-branch: 3065 | p1@16@01 | dead]
; [else-branch: 3065 | !(p1@16@01) | live]
(push) ; 8
; [else-branch: 3065 | !(p1@16@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3066 | p2@17@01 | live]
; [else-branch: 3066 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3066 | p2@17@01]
; [eval] _err_0 != null && issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 10
; [then-branch: 3067 | _err_0@31@01 == Null | live]
; [else-branch: 3067 | _err_0@31@01 != Null | live]
(push) ; 11
; [then-branch: 3067 | _err_0@31@01 == Null]
(pop) ; 11
(push) ; 11
; [else-branch: 3067 | _err_0@31@01 != Null]
(assert (not (= _err_0@31@01 $Ref.null)))
; [eval] issubtype(typeof(_err_0), Exception())
; [eval] typeof(_err_0)
; [eval] Exception()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_0@31@01 $Ref.null)) (= _err_0@31@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_0@31@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3068 | _err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType]) | dead]
; [else-branch: 3068 | !(_err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 3068 | !(_err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err_0@31@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
  $Snap.unit))
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 11
; [then-branch: 3069 | p1@16@01 | dead]
; [else-branch: 3069 | !(p1@16@01) | live]
(push) ; 12
; [else-branch: 3069 | !(p1@16@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
  $Snap.unit))
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3070 | p2@17@01 | live]
; [else-branch: 3070 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3070 | p2@17@01]
; [eval] _err_0 != null ==> issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 13
; [then-branch: 3071 | _err_0@31@01 != Null | dead]
; [else-branch: 3071 | _err_0@31@01 == Null | live]
(push) ; 14
; [else-branch: 3071 | _err_0@31@01 == Null]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 11
; [then-branch: 3072 | p1@16@01 | dead]
; [else-branch: 3072 | !(p1@16@01) | live]
(push) ; 12
; [else-branch: 3072 | !(p1@16@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3073 | p2@17@01 | live]
; [else-branch: 3073 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3073 | p2@17@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 3064 | _err_0@31@01 != Null]
(assert (not (= _err_0@31@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@363@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
; [then-branch: 3074 | p1@16@01 | dead]
; [else-branch: 3074 | !(p1@16@01) | live]
(push) ; 8
; [else-branch: 3074 | !(p1@16@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3075 | p2@17@01 | live]
; [else-branch: 3075 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3075 | p2@17@01]
; [eval] _err_0 != null && issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 10
; [then-branch: 3076 | _err_0@31@01 == Null | live]
; [else-branch: 3076 | _err_0@31@01 != Null | live]
(push) ; 11
; [then-branch: 3076 | _err_0@31@01 == Null]
(assert (= _err_0@31@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 3076 | _err_0@31@01 != Null]
; [eval] issubtype(typeof(_err_0), Exception())
; [eval] typeof(_err_0)
; [eval] Exception()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_0@31@01 $Ref.null)) (= _err_0@31@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_0@31@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (not (= _err_0@31@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3077 | _err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType]) | live]
; [else-branch: 3077 | !(_err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3077 | _err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType])]
(assert (and
  (not (= _err_0@31@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_9.Container_valuep), int())
; [eval] typeof(c_9.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
  $Snap.unit))
; [eval] int___eq__(c_9.Container_valuep, __prim__int___box__(7))
; [eval] __prim__int___box__(7)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))) (__prim__int___box__ $Snap.unit 7)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))) (__prim__int___box__ $Snap.unit 7))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))) (__prim__int___box__ $Snap.unit 7)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
  $Snap.unit))
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 11
; [then-branch: 3078 | p1@16@01 | dead]
; [else-branch: 3078 | !(p1@16@01) | live]
(push) ; 12
; [else-branch: 3078 | !(p1@16@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
  $Snap.unit))
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3079 | p2@17@01 | live]
; [else-branch: 3079 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3079 | p2@17@01]
; [eval] _err_0 != null ==> issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= _err_0@31@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3080 | _err_0@31@01 != Null | live]
; [else-branch: 3080 | _err_0@31@01 == Null | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3080 | _err_0@31@01 != Null]
; [eval] issubtype(typeof(_err_0), Exception())
; [eval] typeof(_err_0)
; [eval] Exception()
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and p2@17@01 (not (= _err_0@31@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 11
; [then-branch: 3081 | p1@16@01 | dead]
; [else-branch: 3081 | !(p1@16@01) | live]
(push) ; 12
; [else-branch: 3081 | !(p1@16@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3082 | p2@17@01 | live]
; [else-branch: 3082 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3082 | p2@17@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 3077 | !(_err_0@31@01 != Null && issubtype[Bool](typeof[PyType](_err_0@31@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err_0@31@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
  $Snap.unit))
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 11
; [then-branch: 3083 | p1@16@01 | dead]
; [else-branch: 3083 | !(p1@16@01) | live]
(push) ; 12
; [else-branch: 3083 | !(p1@16@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
  $Snap.unit))
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3084 | p2@17@01 | live]
; [else-branch: 3084 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3084 | p2@17@01]
; [eval] _err_0 != null ==> issubtype(typeof(_err_0), Exception())
; [eval] _err_0 != null
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= _err_0@31@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= _err_0@31@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3085 | _err_0@31@01 != Null | live]
; [else-branch: 3085 | _err_0@31@01 == Null | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3085 | _err_0@31@01 != Null]
(assert (not (= _err_0@31@01 $Ref.null)))
; [eval] issubtype(typeof(_err_0), Exception())
; [eval] typeof(_err_0)
; [eval] Exception()
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not (= _err_0@31@01 $Ref.null)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=> p2@17@01 (not (= _err_0@31@01 $Ref.null))))
(assert (=>
  (and p2@17@01 (not (= _err_0@31@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_0@31@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 11
; [then-branch: 3086 | p1@16@01 | dead]
; [else-branch: 3086 | !(p1@16@01) | live]
(push) ; 12
; [else-branch: 3086 | !(p1@16@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3087 | p2@17@01 | dead]
; [else-branch: 3087 | !(p2@17@01) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 3087 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not p2@17@01))
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var break1: Bool
(declare-const break1@364@01 Bool)
; [exec]
; var break2: Bool
(declare-const break2@365@01 Bool)
; [exec]
; var except1: Bool
(declare-const except1@366@01 Bool)
; [exec]
; var except2: Bool
(declare-const except2@367@01 Bool)
; [exec]
; var c_4: Ref
(declare-const c_4@368@01 $Ref)
; [exec]
; var c_4_0: Ref
(declare-const c_4_0@369@01 $Ref)
; [exec]
; var b_4: Ref
(declare-const b_4@370@01 $Ref)
; [exec]
; var b_4_0: Ref
(declare-const b_4_0@371@01 $Ref)
; [exec]
; var _loop_measures: Seq[Measure$]
(declare-const _loop_measures@372@01 Seq<Measure$>)
; [exec]
; var _loop_measures_4: Seq[Measure$]
(declare-const _loop_measures_4@373@01 Seq<Measure$>)
; [exec]
; var _loop_check_before: Bool
(declare-const _loop_check_before@374@01 Bool)
; [exec]
; var _loop_check_before_4: Bool
(declare-const _loop_check_before_4@375@01 Bool)
; [exec]
; var _loop_termination_flag: Bool
(declare-const _loop_termination_flag@376@01 Bool)
; [exec]
; var _loop_termination_flag_4: Bool
(declare-const _loop_termination_flag_4@377@01 Bool)
; [exec]
; var _loop_original_must_terminate: Perm
(declare-const _loop_original_must_terminate@378@01 $Perm)
; [exec]
; var _loop_original_must_terminate_4: Perm
(declare-const _loop_original_must_terminate_4@379@01 $Perm)
; [exec]
; var _residue_162: Perm
(declare-const _residue_162@380@01 $Perm)
; [exec]
; var _residue_162_0: Perm
(declare-const _residue_162_0@381@01 $Perm)
; [exec]
; var Exception_res: Ref
(declare-const Exception_res@382@01 $Ref)
; [exec]
; var Exception_res_2: Ref
(declare-const Exception_res_2@383@01 $Ref)
; [exec]
; var _cwl_157: Perm
(declare-const _cwl_157@384@01 $Perm)
; [exec]
; var _cwl_157_0: Perm
(declare-const _cwl_157_0@385@01 $Perm)
; [exec]
; var _method_measures_157: Seq[Measure$]
(declare-const _method_measures_157@386@01 Seq<Measure$>)
; [exec]
; var _method_measures_157_0: Seq[Measure$]
(declare-const _method_measures_157_0@387@01 Seq<Measure$>)
; [exec]
; var bypass1: Bool
(declare-const bypass1@388@01 Bool)
; [exec]
; var bypass2: Bool
(declare-const bypass2@389@01 Bool)
; [exec]
; var tmp1: Seq[Measure$]
(declare-const tmp1@390@01 Seq<Measure$>)
; [exec]
; var tmp2: Seq[Measure$]
(declare-const tmp2@391@01 Seq<Measure$>)
; [exec]
; var tmp1_0: Ref
(declare-const tmp1_0@392@01 $Ref)
; [exec]
; var tmp2_0: Ref
(declare-const tmp2_0@393@01 $Ref)
; [exec]
; var tmp1_1: Bool
(declare-const tmp1_1@394@01 Bool)
; [exec]
; var tmp2_1: Bool
(declare-const tmp2_1@395@01 Bool)
; [exec]
; var tmp1_2: Ref
(declare-const tmp1_2@396@01 $Ref)
; [exec]
; var tmp2_2: Ref
(declare-const tmp2_2@397@01 $Ref)
; [exec]
; var tmp1_3: Bool
(declare-const tmp1_3@398@01 Bool)
; [exec]
; var tmp2_3: Bool
(declare-const tmp2_3@399@01 Bool)
; [exec]
; var tmp1_4: Bool
(declare-const tmp1_4@400@01 Bool)
; [exec]
; var tmp2_4: Bool
(declare-const tmp2_4@401@01 Bool)
; [exec]
; var oldbreak1: Bool
(declare-const oldbreak1@402@01 Bool)
; [exec]
; var oldbreak2: Bool
(declare-const oldbreak2@403@01 Bool)
; [exec]
; var oldexcept1: Bool
(declare-const oldexcept1@404@01 Bool)
; [exec]
; var oldexcept2: Bool
(declare-const oldexcept2@405@01 Bool)
; [exec]
; var p1_0: Bool
(declare-const p1_0@406@01 Bool)
; [exec]
; var p2_0: Bool
(declare-const p2_0@407@01 Bool)
; [exec]
; var idle1: Bool
(declare-const idle1@408@01 Bool)
; [exec]
; var idle2: Bool
(declare-const idle2@409@01 Bool)
; [exec]
; inhale p1
(declare-const $t@410@01 $Snap)
(assert (= $t@410@01 $Snap.unit))
(assert p1@16@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; break1 := false
; [exec]
; break2 := false
; [exec]
; except1 := false
; [exec]
; except2 := false
; [eval] p1 && (!break1 && !except1)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3088 | !(p1@16@01) | live]
; [else-branch: 3088 | p1@16@01 | live]
(push) ; 6
; [then-branch: 3088 | !(p1@16@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 3088 | p1@16@01]
; [eval] !break1
(push) ; 7
; [then-branch: 3089 | False | live]
; [else-branch: 3089 | True | live]
(push) ; 8
; [then-branch: 3089 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 3089 | True]
; [eval] !except1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1@16@01 (not p1@16@01)))
; [then-branch: 3090 | p1@16@01 | dead]
; [else-branch: 3090 | !(p1@16@01) | live]
(push) ; 5
; [else-branch: 3090 | !(p1@16@01)]
(pop) ; 5
; [eval] !(p1 && (!break1 && !except1))
; [eval] p1 && (!break1 && !except1)
(push) ; 5
; [then-branch: 3091 | !(p1@16@01) | live]
; [else-branch: 3091 | p1@16@01 | live]
(push) ; 6
; [then-branch: 3091 | !(p1@16@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 3091 | p1@16@01]
; [eval] !break1
(push) ; 7
; [then-branch: 3092 | False | live]
; [else-branch: 3092 | True | live]
(push) ; 8
; [then-branch: 3092 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 3092 | True]
; [eval] !except1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [then-branch: 3093 | !(p1@16@01) | dead]
; [else-branch: 3093 | p1@16@01 | live]
(push) ; 5
; [else-branch: 3093 | p1@16@01]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 3053 | !(p2@17@01)]
(assert (not p2@17@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))
  $Snap.unit))
; [eval] p1 ==> issubtype(typeof(c.Container_value), int())
(push) ; 4
; [then-branch: 3094 | p1@16@01 | dead]
; [else-branch: 3094 | !(p1@16@01) | live]
(push) ; 5
; [else-branch: 3094 | !(p1@16@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(c_9.Container_valuep), int())
(push) ; 4
; [then-branch: 3095 | p2@17@01 | dead]
; [else-branch: 3095 | !(p2@17@01) | live]
(push) ; 5
; [else-branch: 3095 | !(p2@17@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 4
; [then-branch: 3096 | p1@16@01 | dead]
; [else-branch: 3096 | !(p1@16@01) | live]
(push) ; 5
; [else-branch: 3096 | !(p1@16@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 4
; [then-branch: 3097 | p2@17@01 | dead]
; [else-branch: 3097 | !(p2@17@01) | live]
(push) ; 5
; [else-branch: 3097 | !(p2@17@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@411@01 $Snap)
(assert (= $t@411@01 ($Snap.combine ($Snap.first $t@411@01) ($Snap.second $t@411@01))))
(assert (= ($Snap.first $t@411@01) $Snap.unit))
; [eval] p1 ==> (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_157) && ((forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
(push) ; 5
; [then-branch: 3098 | p1@16@01 | dead]
; [else-branch: 3098 | !(p1@16@01) | live]
(push) ; 6
; [else-branch: 3098 | !(p1@16@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second $t@411@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@411@01))
    ($Snap.second ($Snap.second $t@411@01)))))
(assert (= ($Snap.first ($Snap.second $t@411@01)) $Snap.unit))
; [eval] p2 ==> (forperm _r_1: Ref [_r_1.MustReleaseBoundedp] :: Level(_r_1) <= _current_wait_level_157_0) && ((forperm _r_1: Ref [_r_1.MustReleaseUnboundedp] :: Level(_r_1) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
(push) ; 5
; [then-branch: 3099 | p2@17@01 | dead]
; [else-branch: 3099 | !(p2@17@01) | live]
(push) ; 6
; [else-branch: 3099 | !(p2@17@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@411@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@411@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@411@01))))))
; [then-branch: 3100 | p1@16@01 | dead]
; [else-branch: 3100 | !(p1@16@01) | live]
(push) ; 5
; [else-branch: 3100 | !(p1@16@01)]
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@411@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@411@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@411@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01)))))))
; [then-branch: 3101 | p2@17@01 | dead]
; [else-branch: 3101 | !(p2@17@01) | live]
(push) ; 6
; [else-branch: 3101 | !(p2@17@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@411@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01))))))))
; [then-branch: 3102 | p1@16@01 | dead]
; [else-branch: 3102 | !(p1@16@01) | live]
(push) ; 7
; [else-branch: 3102 | !(p1@16@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01)))))))))
; [then-branch: 3103 | p2@17@01 | dead]
; [else-branch: 3103 | !(p2@17@01) | live]
(push) ; 8
; [else-branch: 3103 | !(p2@17@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01)))))))
  $Snap.unit))
; [eval] p1 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 9
; [then-branch: 3104 | p1@16@01 | dead]
; [else-branch: 3104 | !(p1@16@01) | live]
(push) ; 10
; [else-branch: 3104 | !(p1@16@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01))))))))
  $Snap.unit))
; [eval] p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), Exception())
(push) ; 9
; [then-branch: 3105 | p2@17@01 | dead]
; [else-branch: 3105 | !(p2@17@01) | live]
(push) ; 10
; [else-branch: 3105 | !(p2@17@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01)))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 9
; [then-branch: 3106 | p1@16@01 | dead]
; [else-branch: 3106 | !(p1@16@01) | live]
(push) ; 10
; [else-branch: 3106 | !(p1@16@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01)))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 9
; [then-branch: 3107 | p2@17@01 | dead]
; [else-branch: 3107 | !(p2@17@01) | live]
(push) ; 10
; [else-branch: 3107 | !(p2@17@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var break1: Bool
(declare-const break1@412@01 Bool)
; [exec]
; var break2: Bool
(declare-const break2@413@01 Bool)
; [exec]
; var except1: Bool
(declare-const except1@414@01 Bool)
; [exec]
; var except2: Bool
(declare-const except2@415@01 Bool)
; [exec]
; var c_4: Ref
(declare-const c_4@416@01 $Ref)
; [exec]
; var c_4_0: Ref
(declare-const c_4_0@417@01 $Ref)
; [exec]
; var b_4: Ref
(declare-const b_4@418@01 $Ref)
; [exec]
; var b_4_0: Ref
(declare-const b_4_0@419@01 $Ref)
; [exec]
; var _loop_measures: Seq[Measure$]
(declare-const _loop_measures@420@01 Seq<Measure$>)
; [exec]
; var _loop_measures_4: Seq[Measure$]
(declare-const _loop_measures_4@421@01 Seq<Measure$>)
; [exec]
; var _loop_check_before: Bool
(declare-const _loop_check_before@422@01 Bool)
; [exec]
; var _loop_check_before_4: Bool
(declare-const _loop_check_before_4@423@01 Bool)
; [exec]
; var _loop_termination_flag: Bool
(declare-const _loop_termination_flag@424@01 Bool)
; [exec]
; var _loop_termination_flag_4: Bool
(declare-const _loop_termination_flag_4@425@01 Bool)
; [exec]
; var _loop_original_must_terminate: Perm
(declare-const _loop_original_must_terminate@426@01 $Perm)
; [exec]
; var _loop_original_must_terminate_4: Perm
(declare-const _loop_original_must_terminate_4@427@01 $Perm)
; [exec]
; var _residue_162: Perm
(declare-const _residue_162@428@01 $Perm)
; [exec]
; var _residue_162_0: Perm
(declare-const _residue_162_0@429@01 $Perm)
; [exec]
; var Exception_res: Ref
(declare-const Exception_res@430@01 $Ref)
; [exec]
; var Exception_res_2: Ref
(declare-const Exception_res_2@431@01 $Ref)
; [exec]
; var _cwl_157: Perm
(declare-const _cwl_157@432@01 $Perm)
; [exec]
; var _cwl_157_0: Perm
(declare-const _cwl_157_0@433@01 $Perm)
; [exec]
; var _method_measures_157: Seq[Measure$]
(declare-const _method_measures_157@434@01 Seq<Measure$>)
; [exec]
; var _method_measures_157_0: Seq[Measure$]
(declare-const _method_measures_157_0@435@01 Seq<Measure$>)
; [exec]
; var bypass1: Bool
(declare-const bypass1@436@01 Bool)
; [exec]
; var bypass2: Bool
(declare-const bypass2@437@01 Bool)
; [exec]
; var tmp1: Seq[Measure$]
(declare-const tmp1@438@01 Seq<Measure$>)
; [exec]
; var tmp2: Seq[Measure$]
(declare-const tmp2@439@01 Seq<Measure$>)
; [exec]
; var tmp1_0: Ref
(declare-const tmp1_0@440@01 $Ref)
; [exec]
; var tmp2_0: Ref
(declare-const tmp2_0@441@01 $Ref)
; [exec]
; var tmp1_1: Bool
(declare-const tmp1_1@442@01 Bool)
; [exec]
; var tmp2_1: Bool
(declare-const tmp2_1@443@01 Bool)
; [exec]
; var tmp1_2: Ref
(declare-const tmp1_2@444@01 $Ref)
; [exec]
; var tmp2_2: Ref
(declare-const tmp2_2@445@01 $Ref)
; [exec]
; var tmp1_3: Bool
(declare-const tmp1_3@446@01 Bool)
; [exec]
; var tmp2_3: Bool
(declare-const tmp2_3@447@01 Bool)
; [exec]
; var tmp1_4: Bool
(declare-const tmp1_4@448@01 Bool)
; [exec]
; var tmp2_4: Bool
(declare-const tmp2_4@449@01 Bool)
; [exec]
; var oldbreak1: Bool
(declare-const oldbreak1@450@01 Bool)
; [exec]
; var oldbreak2: Bool
(declare-const oldbreak2@451@01 Bool)
; [exec]
; var oldexcept1: Bool
(declare-const oldexcept1@452@01 Bool)
; [exec]
; var oldexcept2: Bool
(declare-const oldexcept2@453@01 Bool)
; [exec]
; var p1_0: Bool
(declare-const p1_0@454@01 Bool)
; [exec]
; var p2_0: Bool
(declare-const p2_0@455@01 Bool)
; [exec]
; var idle1: Bool
(declare-const idle1@456@01 Bool)
; [exec]
; var idle2: Bool
(declare-const idle2@457@01 Bool)
; [exec]
; inhale p1
(declare-const $t@458@01 $Snap)
(assert (= $t@458@01 $Snap.unit))
(assert p1@16@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; break1 := false
; [exec]
; break2 := false
; [exec]
; except1 := false
; [exec]
; except2 := false
; [eval] p1 && (!break1 && !except1)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3108 | !(p1@16@01) | live]
; [else-branch: 3108 | p1@16@01 | live]
(push) ; 6
; [then-branch: 3108 | !(p1@16@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 3108 | p1@16@01]
; [eval] !break1
(push) ; 7
; [then-branch: 3109 | False | live]
; [else-branch: 3109 | True | live]
(push) ; 8
; [then-branch: 3109 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 3109 | True]
; [eval] !except1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1@16@01 (not p1@16@01)))
; [then-branch: 3110 | p1@16@01 | dead]
; [else-branch: 3110 | !(p1@16@01) | live]
(push) ; 5
; [else-branch: 3110 | !(p1@16@01)]
(pop) ; 5
; [eval] !(p1 && (!break1 && !except1))
; [eval] p1 && (!break1 && !except1)
(push) ; 5
; [then-branch: 3111 | !(p1@16@01) | live]
; [else-branch: 3111 | p1@16@01 | live]
(push) ; 6
; [then-branch: 3111 | !(p1@16@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 3111 | p1@16@01]
; [eval] !break1
(push) ; 7
; [then-branch: 3112 | False | live]
; [else-branch: 3112 | True | live]
(push) ; 8
; [then-branch: 3112 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 3112 | True]
; [eval] !except1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [then-branch: 3113 | !(p1@16@01) | dead]
; [else-branch: 3113 | p1@16@01 | live]
(push) ; 5
; [else-branch: 3113 | p1@16@01]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- break_out_exception_2 ----------
(declare-const p1_4@459@01 Bool)
(declare-const p2_4@460@01 Bool)
(declare-const _cthread_158@461@01 $Ref)
(declare-const _cthread_158_0@462@01 $Ref)
(declare-const _caller_measures_158@463@01 Seq<Measure$>)
(declare-const _caller_measures_158_0@464@01 Seq<Measure$>)
(declare-const _residue_158@465@01 $Perm)
(declare-const _residue_158_0@466@01 $Perm)
(declare-const c_0@467@01 $Ref)
(declare-const c_0_0@468@01 $Ref)
(declare-const b_0@469@01 $Ref)
(declare-const b_0_0@470@01 $Ref)
(declare-const _current_wait_level_158@471@01 $Perm)
(declare-const _current_wait_level_158_0@472@01 $Perm)
(declare-const _err@473@01 $Ref)
(declare-const _err_1@474@01 $Ref)
(declare-const p1_4@475@01 Bool)
(declare-const p2_4@476@01 Bool)
(declare-const _cthread_158@477@01 $Ref)
(declare-const _cthread_158_0@478@01 $Ref)
(declare-const _caller_measures_158@479@01 Seq<Measure$>)
(declare-const _caller_measures_158_0@480@01 Seq<Measure$>)
(declare-const _residue_158@481@01 $Perm)
(declare-const _residue_158_0@482@01 $Perm)
(declare-const c_0@483@01 $Ref)
(declare-const c_0_0@484@01 $Ref)
(declare-const b_0@485@01 $Ref)
(declare-const b_0_0@486@01 $Ref)
(declare-const _current_wait_level_158@487@01 $Perm)
(declare-const _current_wait_level_158_0@488@01 $Perm)
(declare-const _err@489@01 $Ref)
(declare-const _err_1@490@01 $Ref)
(push) ; 1
(declare-const $t@491@01 $Snap)
(assert (= $t@491@01 ($Snap.combine ($Snap.first $t@491@01) ($Snap.second $t@491@01))))
(assert (= ($Snap.first $t@491@01) $Snap.unit))
; [eval] p1_4 ==> _cthread_158 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_4@475@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3114 | p1_4@475@01 | live]
; [else-branch: 3114 | !(p1_4@475@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3114 | p1_4@475@01]
(assert p1_4@475@01)
; [eval] _cthread_158 != null
(pop) ; 3
(push) ; 3
; [else-branch: 3114 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_4@475@01) p1_4@475@01))
(assert (=> p1_4@475@01 (not (= _cthread_158@477@01 $Ref.null))))
(assert (=
  ($Snap.second $t@491@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@491@01))
    ($Snap.second ($Snap.second $t@491@01)))))
(assert (= ($Snap.first ($Snap.second $t@491@01)) $Snap.unit))
; [eval] p2_4 ==> _cthread_158_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_4@476@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3115 | p2_4@476@01 | live]
; [else-branch: 3115 | !(p2_4@476@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3115 | p2_4@476@01]
(assert p2_4@476@01)
; [eval] _cthread_158_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 3115 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_4@476@01) p2_4@476@01))
(assert (=> p2_4@476@01 (not (= _cthread_158_0@478@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@491@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@491@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@491@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@491@01))) $Snap.unit))
; [eval] p1_4 ==> issubtype(typeof(_cthread_158), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_4@475@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3116 | p1_4@475@01 | live]
; [else-branch: 3116 | !(p1_4@475@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3116 | p1_4@475@01]
(assert p1_4@475@01)
; [eval] issubtype(typeof(_cthread_158), Thread_0())
; [eval] typeof(_cthread_158)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 3116 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_4@475@01
  (issubtype<Bool> (typeof<PyType> _cthread_158@477@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@491@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@491@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@491@01))))
  $Snap.unit))
; [eval] p2_4 ==> issubtype(typeof(_cthread_158_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_4@476@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3117 | p2_4@476@01 | live]
; [else-branch: 3117 | !(p2_4@476@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3117 | p2_4@476@01]
(assert p2_4@476@01)
; [eval] issubtype(typeof(_cthread_158_0), Thread_0())
; [eval] typeof(_cthread_158_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 3117 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_4@476@01
  (issubtype<Bool> (typeof<PyType> _cthread_158_0@478@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))
  $Snap.unit))
; [eval] p1_4 ==> issubtype(typeof(c_0), Container())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_4@475@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3118 | p1_4@475@01 | live]
; [else-branch: 3118 | !(p1_4@475@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3118 | p1_4@475@01]
(assert p1_4@475@01)
; [eval] issubtype(typeof(c_0), Container())
; [eval] typeof(c_0)
; [eval] Container()
(pop) ; 3
(push) ; 3
; [else-branch: 3118 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_4@475@01
  (issubtype<Bool> (typeof<PyType> c_0@483@01) (as Container<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01))))))
  $Snap.unit))
; [eval] p2_4 ==> issubtype(typeof(c_0_0), Container())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_4@476@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3119 | p2_4@476@01 | live]
; [else-branch: 3119 | !(p2_4@476@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3119 | p2_4@476@01]
(assert p2_4@476@01)
; [eval] issubtype(typeof(c_0_0), Container())
; [eval] typeof(c_0_0)
; [eval] Container()
(pop) ; 3
(push) ; 3
; [else-branch: 3119 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_4@476@01
  (issubtype<Bool> (typeof<PyType> c_0_0@484@01) (as Container<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))))
  $Snap.unit))
; [eval] p1_4 ==> issubtype(typeof(b_0), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_4@475@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3120 | p1_4@475@01 | live]
; [else-branch: 3120 | !(p1_4@475@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3120 | p1_4@475@01]
(assert p1_4@475@01)
; [eval] issubtype(typeof(b_0), bool())
; [eval] typeof(b_0)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 3120 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_4@475@01
  (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01))))))))
  $Snap.unit))
; [eval] p2_4 ==> issubtype(typeof(b_0_0), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_4@476@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3121 | p2_4@476@01 | live]
; [else-branch: 3121 | !(p2_4@476@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3121 | p2_4@476@01]
(assert p2_4@476@01)
; [eval] issubtype(typeof(b_0_0), bool())
; [eval] typeof(b_0_0)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 3121 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_4@476@01
  (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01))))))))))))
(push) ; 2
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not p1_4@475@01))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3122 | p1_4@475@01 | live]
; [else-branch: 3122 | !(p1_4@475@01) | live]
(set-option :timeout 0)
(push) ; 2
; [then-branch: 3122 | p1_4@475@01]
(assert p1_4@475@01)
(assert (not (= c_0@483@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_4@476@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3123 | p2_4@476@01 | live]
; [else-branch: 3123 | !(p2_4@476@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3123 | p2_4@476@01]
(assert p2_4@476@01)
(assert (not (= c_0_0@484@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))))))))
  $Snap.unit))
; [eval] p1_4 ==> issubtype(typeof(c_0.Container_value), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3124 | p1_4@475@01 | live]
; [else-branch: 3124 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3124 | p1_4@475@01]
; [eval] issubtype(typeof(c_0.Container_value), int())
; [eval] typeof(c_0.Container_value)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p1_4@475@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01))))))))))))
  $Snap.unit))
; [eval] p2_4 ==> issubtype(typeof(c_0_0.Container_valuep), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3125 | p2_4@476@01 | live]
; [else-branch: 3125 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3125 | p2_4@476@01]
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p2_4@476@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))))))))))
  $Snap.unit))
; [eval] p1_4 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3126 | p1_4@475@01 | live]
; [else-branch: 3126 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3126 | p1_4@475@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))))))))))
  $Snap.unit))
; [eval] p2_4 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3127 | p2_4@476@01 | live]
; [else-branch: 3127 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3127 | p2_4@476@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@492@01 $Snap)
(assert (= $t@492@01 ($Snap.combine ($Snap.first $t@492@01) ($Snap.second $t@492@01))))
(assert (= ($Snap.first $t@492@01) $Snap.unit))
; [eval] p1_4 ==> (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _current_wait_level_158) && ((forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _current_wait_level_158) && _residue_158 <= _current_wait_level_158)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3128 | p1_4@475@01 | live]
; [else-branch: 3128 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3128 | p1_4@475@01]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _current_wait_level_158) && ((forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _current_wait_level_158) && _residue_158 <= _current_wait_level_158)
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _current_wait_level_158)
(push) ; 7
; [then-branch: 3129 | False | live]
; [else-branch: 3129 | True | live]
(push) ; 8
; [then-branch: 3129 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 3129 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _current_wait_level_158)
(push) ; 9
; [then-branch: 3130 | False | live]
; [else-branch: 3130 | True | live]
(push) ; 10
; [then-branch: 3130 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3130 | True]
; [eval] _residue_158 <= _current_wait_level_158
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p1_4@475@01 (<= _residue_158@481@01 _current_wait_level_158@487@01)))
(assert (=
  ($Snap.second $t@492@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@492@01))
    ($Snap.second ($Snap.second $t@492@01)))))
(assert (= ($Snap.first ($Snap.second $t@492@01)) $Snap.unit))
; [eval] p2_4 ==> (forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: Level(_r_6) <= _current_wait_level_158_0) && ((forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: Level(_r_6) <= _current_wait_level_158_0) && _residue_158_0 <= _current_wait_level_158_0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3131 | p2_4@476@01 | live]
; [else-branch: 3131 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3131 | p2_4@476@01]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: Level(_r_6) <= _current_wait_level_158_0) && ((forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: Level(_r_6) <= _current_wait_level_158_0) && _residue_158_0 <= _current_wait_level_158_0)
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: Level(_r_6) <= _current_wait_level_158_0)
(push) ; 7
; [then-branch: 3132 | False | live]
; [else-branch: 3132 | True | live]
(push) ; 8
; [then-branch: 3132 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 3132 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: Level(_r_6) <= _current_wait_level_158_0)
(push) ; 9
; [then-branch: 3133 | False | live]
; [else-branch: 3133 | True | live]
(push) ; 10
; [then-branch: 3133 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3133 | True]
; [eval] _residue_158_0 <= _current_wait_level_158_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p2_4@476@01 (<= _residue_158_0@482@01 _current_wait_level_158_0@488@01)))
(assert (=
  ($Snap.second ($Snap.second $t@492@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@492@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3134 | p1_4@475@01 | live]
; [else-branch: 3134 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3134 | p1_4@475@01]
; [eval] _err == null
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@489@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@489@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3135 | _err@489@01 == Null | live]
; [else-branch: 3135 | _err@489@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3135 | _err@489@01 == Null]
(assert (= _err@489@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second $t@492@01)))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@492@01))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@492@01)))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@492@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@492@01)))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@492@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@492@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0.Container_value), int())
; [eval] typeof(c_0.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@492@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@492@01)))))
  $Snap.unit))
; [eval] int___eq__(c_0.Container_value, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 9))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 9))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@492@01))))) (__prim__int___box__ $Snap.unit 9)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@492@01))))) (__prim__int___box__ $Snap.unit 9))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@492@01))))) (__prim__int___box__ $Snap.unit 9)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@492@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3136 | p2_4@476@01 | live]
; [else-branch: 3136 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3136 | p2_4@476@01]
; [eval] _err_1 == null
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err_1@490@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err_1@490@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3137 | _err_1@490@01 == Null | live]
; [else-branch: 3137 | _err_1@490@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3137 | _err_1@490@01 == Null]
(assert (= _err_1@490@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  $Snap.unit))
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))) (__prim__int___box__ $Snap.unit 9)))
(pop) ; 9
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))) (__prim__int___box__ $Snap.unit 9)))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))) (__prim__int___box__ $Snap.unit 9)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3138 | p1_4@475@01 | live]
; [else-branch: 3138 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3138 | p1_4@475@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 10
; [then-branch: 3139 | _err@489@01 == Null | live]
; [else-branch: 3139 | _err@489@01 != Null | live]
(push) ; 11
; [then-branch: 3139 | _err@489@01 == Null]
(pop) ; 11
(push) ; 11
; [else-branch: 3139 | _err@489@01 != Null]
(assert (not (= _err@489@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@489@01 $Ref.null)) (= _err@489@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@489@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@489@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3140 | _err@489@01 != Null && issubtype[Bool](typeof[PyType](_err@489@01), Exception[PyType]) | dead]
; [else-branch: 3140 | !(_err@489@01 != Null && issubtype[Bool](typeof[PyType](_err@489@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 3140 | !(_err@489@01 != Null && issubtype[Bool](typeof[PyType](_err@489@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err@489@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@489@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3141 | p2_4@476@01 | live]
; [else-branch: 3141 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3141 | p2_4@476@01]
; [eval] _err_1 != null && issubtype(typeof(_err_1), Exception())
; [eval] _err_1 != null
(push) ; 12
; [then-branch: 3142 | _err_1@490@01 == Null | live]
; [else-branch: 3142 | _err_1@490@01 != Null | live]
(push) ; 13
; [then-branch: 3142 | _err_1@490@01 == Null]
(pop) ; 13
(push) ; 13
; [else-branch: 3142 | _err_1@490@01 != Null]
(assert (not (= _err_1@490@01 $Ref.null)))
; [eval] issubtype(typeof(_err_1), Exception())
; [eval] typeof(_err_1)
; [eval] Exception()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_1@490@01 $Ref.null)) (= _err_1@490@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_1@490@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3143 | _err_1@490@01 != Null && issubtype[Bool](typeof[PyType](_err_1@490@01), Exception[PyType]) | dead]
; [else-branch: 3143 | !(_err_1@490@01 != Null && issubtype[Bool](typeof[PyType](_err_1@490@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 3143 | !(_err_1@490@01 != Null && issubtype[Bool](typeof[PyType](_err_1@490@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err_1@490@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  $Snap.unit))
; [eval] p1_4 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3144 | p1_4@475@01 | live]
; [else-branch: 3144 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3144 | p1_4@475@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
; [then-branch: 3145 | _err@489@01 != Null | dead]
; [else-branch: 3145 | _err@489@01 == Null | live]
(push) ; 16
; [else-branch: 3145 | _err@489@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  $Snap.unit))
; [eval] p2_4 ==> _err_1 != null ==> issubtype(typeof(_err_1), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3146 | p2_4@476@01 | live]
; [else-branch: 3146 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3146 | p2_4@476@01]
; [eval] _err_1 != null ==> issubtype(typeof(_err_1), Exception())
; [eval] _err_1 != null
(push) ; 15
; [then-branch: 3147 | _err_1@490@01 != Null | dead]
; [else-branch: 3147 | _err_1@490@01 == Null | live]
(push) ; 16
; [else-branch: 3147 | _err_1@490@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
  $Snap.unit))
; [eval] p1_4 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3148 | p1_4@475@01 | live]
; [else-branch: 3148 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3148 | p1_4@475@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
  $Snap.unit))
; [eval] p2_4 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3149 | p2_4@476@01 | live]
; [else-branch: 3149 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3149 | p2_4@476@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 3137 | _err_1@490@01 != Null]
(assert (not (= _err_1@490@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3150 | p1_4@475@01 | live]
; [else-branch: 3150 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3150 | p1_4@475@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 10
; [then-branch: 3151 | _err@489@01 == Null | live]
; [else-branch: 3151 | _err@489@01 != Null | live]
(push) ; 11
; [then-branch: 3151 | _err@489@01 == Null]
(pop) ; 11
(push) ; 11
; [else-branch: 3151 | _err@489@01 != Null]
(assert (not (= _err@489@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@489@01 $Ref.null)) (= _err@489@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@489@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@489@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3152 | _err@489@01 != Null && issubtype[Bool](typeof[PyType](_err@489@01), Exception[PyType]) | dead]
; [else-branch: 3152 | !(_err@489@01 != Null && issubtype[Bool](typeof[PyType](_err@489@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 3152 | !(_err@489@01 != Null && issubtype[Bool](typeof[PyType](_err@489@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err@489@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@489@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3153 | p2_4@476@01 | live]
; [else-branch: 3153 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3153 | p2_4@476@01]
; [eval] _err_1 != null && issubtype(typeof(_err_1), Exception())
; [eval] _err_1 != null
(push) ; 12
; [then-branch: 3154 | _err_1@490@01 == Null | live]
; [else-branch: 3154 | _err_1@490@01 != Null | live]
(push) ; 13
; [then-branch: 3154 | _err_1@490@01 == Null]
(assert (= _err_1@490@01 $Ref.null))
(pop) ; 13
(push) ; 13
; [else-branch: 3154 | _err_1@490@01 != Null]
; [eval] issubtype(typeof(_err_1), Exception())
; [eval] typeof(_err_1)
; [eval] Exception()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_1@490@01 $Ref.null)) (= _err_1@490@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_1@490@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  (not (= _err_1@490@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3155 | _err_1@490@01 != Null && issubtype[Bool](typeof[PyType](_err_1@490@01), Exception[PyType]) | live]
; [else-branch: 3155 | !(_err_1@490@01 != Null && issubtype[Bool](typeof[PyType](_err_1@490@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3155 | _err_1@490@01 != Null && issubtype[Bool](typeof[PyType](_err_1@490@01), Exception[PyType])]
(assert (and
  (not (= _err_1@490@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  $Snap.unit))
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(7))
; [eval] __prim__int___box__(7)
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))) (__prim__int___box__ $Snap.unit 7)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))) (__prim__int___box__ $Snap.unit 7))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))) (__prim__int___box__ $Snap.unit 7)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  $Snap.unit))
; [eval] p1_4 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3156 | p1_4@475@01 | live]
; [else-branch: 3156 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3156 | p1_4@475@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
; [then-branch: 3157 | _err@489@01 != Null | dead]
; [else-branch: 3157 | _err@489@01 == Null | live]
(push) ; 16
; [else-branch: 3157 | _err@489@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  $Snap.unit))
; [eval] p2_4 ==> _err_1 != null ==> issubtype(typeof(_err_1), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3158 | p2_4@476@01 | live]
; [else-branch: 3158 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3158 | p2_4@476@01]
; [eval] _err_1 != null ==> issubtype(typeof(_err_1), Exception())
; [eval] _err_1 != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err_1@490@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3159 | _err_1@490@01 != Null | live]
; [else-branch: 3159 | _err_1@490@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3159 | _err_1@490@01 != Null]
; [eval] issubtype(typeof(_err_1), Exception())
; [eval] typeof(_err_1)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p2_4@476@01 (not (= _err_1@490@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
  $Snap.unit))
; [eval] p1_4 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3160 | p1_4@475@01 | live]
; [else-branch: 3160 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3160 | p1_4@475@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
  $Snap.unit))
; [eval] p2_4 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3161 | p2_4@476@01 | live]
; [else-branch: 3161 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3161 | p2_4@476@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 3155 | !(_err_1@490@01 != Null && issubtype[Bool](typeof[PyType](_err_1@490@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err_1@490@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  $Snap.unit))
; [eval] p1_4 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3162 | p1_4@475@01 | live]
; [else-branch: 3162 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3162 | p1_4@475@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
; [then-branch: 3163 | _err@489@01 != Null | dead]
; [else-branch: 3163 | _err@489@01 == Null | live]
(push) ; 16
; [else-branch: 3163 | _err@489@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  $Snap.unit))
; [eval] p2_4 ==> _err_1 != null ==> issubtype(typeof(_err_1), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3164 | p2_4@476@01 | live]
; [else-branch: 3164 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3164 | p2_4@476@01]
; [eval] _err_1 != null ==> issubtype(typeof(_err_1), Exception())
; [eval] _err_1 != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err_1@490@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err_1@490@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3165 | _err_1@490@01 != Null | live]
; [else-branch: 3165 | _err_1@490@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3165 | _err_1@490@01 != Null]
(assert (not (= _err_1@490@01 $Ref.null)))
; [eval] issubtype(typeof(_err_1), Exception())
; [eval] typeof(_err_1)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err_1@490@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p2_4@476@01 (not (= _err_1@490@01 $Ref.null))))
(assert (=>
  (and p2_4@476@01 (not (= _err_1@490@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
  $Snap.unit))
; [eval] p1_4 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3166 | p1_4@475@01 | dead]
; [else-branch: 3166 | !(p1_4@475@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 3166 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1_4@475@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
  $Snap.unit))
; [eval] p2_4 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3167 | p2_4@476@01 | dead]
; [else-branch: 3167 | !(p2_4@476@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 3167 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2_4@476@01))
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 3135 | _err@489@01 != Null]
(assert (not (= _err@489@01 $Ref.null)))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@492@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@492@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3168 | p2_4@476@01 | live]
; [else-branch: 3168 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3168 | p2_4@476@01]
; [eval] _err_1 == null
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err_1@490@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err_1@490@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3169 | _err_1@490@01 == Null | live]
; [else-branch: 3169 | _err_1@490@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3169 | _err_1@490@01 == Null]
(assert (= _err_1@490@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  $Snap.unit))
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 9))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 9))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))) (__prim__int___box__ $Snap.unit 9)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))) (__prim__int___box__ $Snap.unit 9))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))) (__prim__int___box__ $Snap.unit 9)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3170 | p1_4@475@01 | live]
; [else-branch: 3170 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3170 | p1_4@475@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 10
; [then-branch: 3171 | _err@489@01 == Null | live]
; [else-branch: 3171 | _err@489@01 != Null | live]
(push) ; 11
; [then-branch: 3171 | _err@489@01 == Null]
(assert (= _err@489@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 3171 | _err@489@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@489@01 $Ref.null)) (= _err@489@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@489@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@489@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (not (= _err@489@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@489@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3172 | _err@489@01 != Null && issubtype[Bool](typeof[PyType](_err@489@01), Exception[PyType]) | live]
; [else-branch: 3172 | !(_err@489@01 != Null && issubtype[Bool](typeof[PyType](_err@489@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3172 | _err@489@01 != Null && issubtype[Bool](typeof[PyType](_err@489@01), Exception[PyType])]
(assert (and
  (not (= _err@489@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@489@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0.Container_value), int())
; [eval] typeof(c_0.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  $Snap.unit))
; [eval] int___eq__(c_0.Container_value, __prim__int___box__(7))
; [eval] __prim__int___box__(7)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))) (__prim__int___box__ $Snap.unit 7)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))) (__prim__int___box__ $Snap.unit 7))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))) (__prim__int___box__ $Snap.unit 7)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3173 | p2_4@476@01 | live]
; [else-branch: 3173 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3173 | p2_4@476@01]
; [eval] _err_1 != null && issubtype(typeof(_err_1), Exception())
; [eval] _err_1 != null
(push) ; 12
; [then-branch: 3174 | _err_1@490@01 == Null | live]
; [else-branch: 3174 | _err_1@490@01 != Null | live]
(push) ; 13
; [then-branch: 3174 | _err_1@490@01 == Null]
(pop) ; 13
(push) ; 13
; [else-branch: 3174 | _err_1@490@01 != Null]
(assert (not (= _err_1@490@01 $Ref.null)))
; [eval] issubtype(typeof(_err_1), Exception())
; [eval] typeof(_err_1)
; [eval] Exception()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_1@490@01 $Ref.null)) (= _err_1@490@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_1@490@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3175 | _err_1@490@01 != Null && issubtype[Bool](typeof[PyType](_err_1@490@01), Exception[PyType]) | dead]
; [else-branch: 3175 | !(_err_1@490@01 != Null && issubtype[Bool](typeof[PyType](_err_1@490@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 3175 | !(_err_1@490@01 != Null && issubtype[Bool](typeof[PyType](_err_1@490@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err_1@490@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  $Snap.unit))
; [eval] p1_4 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3176 | p1_4@475@01 | live]
; [else-branch: 3176 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3176 | p1_4@475@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@489@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3177 | _err@489@01 != Null | live]
; [else-branch: 3177 | _err@489@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3177 | _err@489@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p1_4@475@01 (not (= _err@489@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@489@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  $Snap.unit))
; [eval] p2_4 ==> _err_1 != null ==> issubtype(typeof(_err_1), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3178 | p2_4@476@01 | live]
; [else-branch: 3178 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3178 | p2_4@476@01]
; [eval] _err_1 != null ==> issubtype(typeof(_err_1), Exception())
; [eval] _err_1 != null
(push) ; 15
; [then-branch: 3179 | _err_1@490@01 != Null | dead]
; [else-branch: 3179 | _err_1@490@01 == Null | live]
(push) ; 16
; [else-branch: 3179 | _err_1@490@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
  $Snap.unit))
; [eval] p1_4 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3180 | p1_4@475@01 | live]
; [else-branch: 3180 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3180 | p1_4@475@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
  $Snap.unit))
; [eval] p2_4 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3181 | p2_4@476@01 | live]
; [else-branch: 3181 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3181 | p2_4@476@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 3172 | !(_err@489@01 != Null && issubtype[Bool](typeof[PyType](_err@489@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err@489@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@489@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3182 | p2_4@476@01 | live]
; [else-branch: 3182 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3182 | p2_4@476@01]
; [eval] _err_1 != null && issubtype(typeof(_err_1), Exception())
; [eval] _err_1 != null
(push) ; 12
; [then-branch: 3183 | _err_1@490@01 == Null | live]
; [else-branch: 3183 | _err_1@490@01 != Null | live]
(push) ; 13
; [then-branch: 3183 | _err_1@490@01 == Null]
(pop) ; 13
(push) ; 13
; [else-branch: 3183 | _err_1@490@01 != Null]
(assert (not (= _err_1@490@01 $Ref.null)))
; [eval] issubtype(typeof(_err_1), Exception())
; [eval] typeof(_err_1)
; [eval] Exception()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_1@490@01 $Ref.null)) (= _err_1@490@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_1@490@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3184 | _err_1@490@01 != Null && issubtype[Bool](typeof[PyType](_err_1@490@01), Exception[PyType]) | dead]
; [else-branch: 3184 | !(_err_1@490@01 != Null && issubtype[Bool](typeof[PyType](_err_1@490@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 3184 | !(_err_1@490@01 != Null && issubtype[Bool](typeof[PyType](_err_1@490@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err_1@490@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  $Snap.unit))
; [eval] p1_4 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3185 | p1_4@475@01 | live]
; [else-branch: 3185 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3185 | p1_4@475@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@489@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err@489@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3186 | _err@489@01 != Null | live]
; [else-branch: 3186 | _err@489@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3186 | _err@489@01 != Null]
(assert (not (= _err@489@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err@489@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p1_4@475@01 (not (= _err@489@01 $Ref.null))))
(assert (=>
  (and p1_4@475@01 (not (= _err@489@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@489@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  $Snap.unit))
; [eval] p2_4 ==> _err_1 != null ==> issubtype(typeof(_err_1), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3187 | p2_4@476@01 | dead]
; [else-branch: 3187 | !(p2_4@476@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 3187 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2_4@476@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
  $Snap.unit))
; [eval] p1_4 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3188 | p1_4@475@01 | dead]
; [else-branch: 3188 | !(p1_4@475@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 3188 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1_4@475@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
  $Snap.unit))
; [eval] p2_4 ==> true
(push) ; 13
; [then-branch: 3189 | p2_4@476@01 | dead]
; [else-branch: 3189 | !(p2_4@476@01) | live]
(push) ; 14
; [else-branch: 3189 | !(p2_4@476@01)]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 3169 | _err_1@490@01 != Null]
(assert (not (= _err_1@490@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@492@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3190 | p1_4@475@01 | live]
; [else-branch: 3190 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3190 | p1_4@475@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 10
; [then-branch: 3191 | _err@489@01 == Null | live]
; [else-branch: 3191 | _err@489@01 != Null | live]
(push) ; 11
; [then-branch: 3191 | _err@489@01 == Null]
(assert (= _err@489@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 3191 | _err@489@01 != Null]
(assert (not (= _err@489@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@489@01 $Ref.null)) (= _err@489@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@489@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@489@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (not (= _err@489@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@489@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3192 | _err@489@01 != Null && issubtype[Bool](typeof[PyType](_err@489@01), Exception[PyType]) | live]
; [else-branch: 3192 | !(_err@489@01 != Null && issubtype[Bool](typeof[PyType](_err@489@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3192 | _err@489@01 != Null && issubtype[Bool](typeof[PyType](_err@489@01), Exception[PyType])]
(assert (and
  (not (= _err@489@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@489@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0.Container_value), int())
; [eval] typeof(c_0.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  $Snap.unit))
; [eval] int___eq__(c_0.Container_value, __prim__int___box__(7))
; [eval] __prim__int___box__(7)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))) (__prim__int___box__ $Snap.unit 7)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))) (__prim__int___box__ $Snap.unit 7))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))) (__prim__int___box__ $Snap.unit 7)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3193 | p2_4@476@01 | live]
; [else-branch: 3193 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3193 | p2_4@476@01]
; [eval] _err_1 != null && issubtype(typeof(_err_1), Exception())
; [eval] _err_1 != null
(push) ; 12
; [then-branch: 3194 | _err_1@490@01 == Null | live]
; [else-branch: 3194 | _err_1@490@01 != Null | live]
(push) ; 13
; [then-branch: 3194 | _err_1@490@01 == Null]
(assert (= _err_1@490@01 $Ref.null))
(pop) ; 13
(push) ; 13
; [else-branch: 3194 | _err_1@490@01 != Null]
; [eval] issubtype(typeof(_err_1), Exception())
; [eval] typeof(_err_1)
; [eval] Exception()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_1@490@01 $Ref.null)) (= _err_1@490@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_1@490@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  (not (= _err_1@490@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3195 | _err_1@490@01 != Null && issubtype[Bool](typeof[PyType](_err_1@490@01), Exception[PyType]) | live]
; [else-branch: 3195 | !(_err_1@490@01 != Null && issubtype[Bool](typeof[PyType](_err_1@490@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3195 | _err_1@490@01 != Null && issubtype[Bool](typeof[PyType](_err_1@490@01), Exception[PyType])]
(assert (and
  (not (= _err_1@490@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  $Snap.unit))
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(7))
; [eval] __prim__int___box__(7)
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))) (__prim__int___box__ $Snap.unit 7)))
(pop) ; 13
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))) (__prim__int___box__ $Snap.unit 7)))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))) (__prim__int___box__ $Snap.unit 7)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  $Snap.unit))
; [eval] p1_4 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3196 | p1_4@475@01 | live]
; [else-branch: 3196 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3196 | p1_4@475@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@489@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3197 | _err@489@01 != Null | live]
; [else-branch: 3197 | _err@489@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3197 | _err@489@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p1_4@475@01 (not (= _err@489@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@489@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  $Snap.unit))
; [eval] p2_4 ==> _err_1 != null ==> issubtype(typeof(_err_1), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3198 | p2_4@476@01 | live]
; [else-branch: 3198 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3198 | p2_4@476@01]
; [eval] _err_1 != null ==> issubtype(typeof(_err_1), Exception())
; [eval] _err_1 != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err_1@490@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3199 | _err_1@490@01 != Null | live]
; [else-branch: 3199 | _err_1@490@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3199 | _err_1@490@01 != Null]
; [eval] issubtype(typeof(_err_1), Exception())
; [eval] typeof(_err_1)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p2_4@476@01 (not (= _err_1@490@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
  $Snap.unit))
; [eval] p1_4 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3200 | p1_4@475@01 | live]
; [else-branch: 3200 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3200 | p1_4@475@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
  $Snap.unit))
; [eval] p2_4 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3201 | p2_4@476@01 | live]
; [else-branch: 3201 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3201 | p2_4@476@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 3195 | !(_err_1@490@01 != Null && issubtype[Bool](typeof[PyType](_err_1@490@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err_1@490@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  $Snap.unit))
; [eval] p1_4 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3202 | p1_4@475@01 | live]
; [else-branch: 3202 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3202 | p1_4@475@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@489@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3203 | _err@489@01 != Null | live]
; [else-branch: 3203 | _err@489@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3203 | _err@489@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p1_4@475@01 (not (= _err@489@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@489@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  $Snap.unit))
; [eval] p2_4 ==> _err_1 != null ==> issubtype(typeof(_err_1), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3204 | p2_4@476@01 | live]
; [else-branch: 3204 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3204 | p2_4@476@01]
; [eval] _err_1 != null ==> issubtype(typeof(_err_1), Exception())
; [eval] _err_1 != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err_1@490@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err_1@490@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3205 | _err_1@490@01 != Null | live]
; [else-branch: 3205 | _err_1@490@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3205 | _err_1@490@01 != Null]
(assert (not (= _err_1@490@01 $Ref.null)))
; [eval] issubtype(typeof(_err_1), Exception())
; [eval] typeof(_err_1)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err_1@490@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p2_4@476@01 (not (= _err_1@490@01 $Ref.null))))
(assert (=>
  (and p2_4@476@01 (not (= _err_1@490@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
  $Snap.unit))
; [eval] p1_4 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3206 | p1_4@475@01 | dead]
; [else-branch: 3206 | !(p1_4@475@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 3206 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1_4@475@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
  $Snap.unit))
; [eval] p2_4 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3207 | p2_4@476@01 | dead]
; [else-branch: 3207 | !(p2_4@476@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 3207 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2_4@476@01))
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 3192 | !(_err@489@01 != Null && issubtype[Bool](typeof[PyType](_err@489@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err@489@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@489@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3208 | p2_4@476@01 | live]
; [else-branch: 3208 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3208 | p2_4@476@01]
; [eval] _err_1 != null && issubtype(typeof(_err_1), Exception())
; [eval] _err_1 != null
(push) ; 12
; [then-branch: 3209 | _err_1@490@01 == Null | live]
; [else-branch: 3209 | _err_1@490@01 != Null | live]
(push) ; 13
; [then-branch: 3209 | _err_1@490@01 == Null]
(assert (= _err_1@490@01 $Ref.null))
(pop) ; 13
(push) ; 13
; [else-branch: 3209 | _err_1@490@01 != Null]
(assert (not (= _err_1@490@01 $Ref.null)))
; [eval] issubtype(typeof(_err_1), Exception())
; [eval] typeof(_err_1)
; [eval] Exception()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_1@490@01 $Ref.null)) (= _err_1@490@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_1@490@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  (not (= _err_1@490@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3210 | _err_1@490@01 != Null && issubtype[Bool](typeof[PyType](_err_1@490@01), Exception[PyType]) | live]
; [else-branch: 3210 | !(_err_1@490@01 != Null && issubtype[Bool](typeof[PyType](_err_1@490@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3210 | _err_1@490@01 != Null && issubtype[Bool](typeof[PyType](_err_1@490@01), Exception[PyType])]
(assert (and
  (not (= _err_1@490@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  $Snap.unit))
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(7))
; [eval] __prim__int___box__(7)
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))) (__prim__int___box__ $Snap.unit 7)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))) (__prim__int___box__ $Snap.unit 7))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))) (__prim__int___box__ $Snap.unit 7)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  $Snap.unit))
; [eval] p1_4 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3211 | p1_4@475@01 | live]
; [else-branch: 3211 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3211 | p1_4@475@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@489@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err@489@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3212 | _err@489@01 != Null | live]
; [else-branch: 3212 | _err@489@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3212 | _err@489@01 != Null]
(assert (not (= _err@489@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err@489@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p1_4@475@01 (not (= _err@489@01 $Ref.null))))
(assert (=>
  (and p1_4@475@01 (not (= _err@489@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@489@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  $Snap.unit))
; [eval] p2_4 ==> _err_1 != null ==> issubtype(typeof(_err_1), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3213 | p2_4@476@01 | dead]
; [else-branch: 3213 | !(p2_4@476@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 3213 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2_4@476@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
  $Snap.unit))
; [eval] p1_4 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3214 | p1_4@475@01 | dead]
; [else-branch: 3214 | !(p1_4@475@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 3214 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1_4@475@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
  $Snap.unit))
; [eval] p2_4 ==> true
(push) ; 13
; [then-branch: 3215 | p2_4@476@01 | dead]
; [else-branch: 3215 | !(p2_4@476@01) | live]
(push) ; 14
; [else-branch: 3215 | !(p2_4@476@01)]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 3210 | !(_err_1@490@01 != Null && issubtype[Bool](typeof[PyType](_err_1@490@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err_1@490@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_1@490@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  $Snap.unit))
; [eval] p1_4 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3216 | p1_4@475@01 | live]
; [else-branch: 3216 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3216 | p1_4@475@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@489@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err@489@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3217 | _err@489@01 != Null | live]
; [else-branch: 3217 | _err@489@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3217 | _err@489@01 != Null]
(assert (not (= _err@489@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err@489@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p1_4@475@01 (not (= _err@489@01 $Ref.null))))
(assert (=>
  (and p1_4@475@01 (not (= _err@489@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@489@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  $Snap.unit))
; [eval] p2_4 ==> _err_1 != null ==> issubtype(typeof(_err_1), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3218 | p2_4@476@01 | dead]
; [else-branch: 3218 | !(p2_4@476@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 3218 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2_4@476@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
  $Snap.unit))
; [eval] p1_4 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3219 | p1_4@475@01 | dead]
; [else-branch: 3219 | !(p1_4@475@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 3219 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1_4@475@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@492@01)))))))))
  $Snap.unit))
; [eval] p2_4 ==> true
(push) ; 13
; [then-branch: 3220 | p2_4@476@01 | dead]
; [else-branch: 3220 | !(p2_4@476@01) | live]
(push) ; 14
; [else-branch: 3220 | !(p2_4@476@01)]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var break1_0: Bool
(declare-const break1_0@493@01 Bool)
; [exec]
; var break2_0: Bool
(declare-const break2_0@494@01 Bool)
; [exec]
; var except1_0: Bool
(declare-const except1_0@495@01 Bool)
; [exec]
; var except2_0: Bool
(declare-const except2_0@496@01 Bool)
; [exec]
; var c_5: Ref
(declare-const c_5@497@01 $Ref)
; [exec]
; var c_5_0: Ref
(declare-const c_5_0@498@01 $Ref)
; [exec]
; var b_5: Ref
(declare-const b_5@499@01 $Ref)
; [exec]
; var b_5_0: Ref
(declare-const b_5_0@500@01 $Ref)
; [exec]
; var _loop_measures_0: Seq[Measure$]
(declare-const _loop_measures_0@501@01 Seq<Measure$>)
; [exec]
; var _loop_measures_0_0: Seq[Measure$]
(declare-const _loop_measures_0_0@502@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_0: Bool
(declare-const _loop_check_before_0@503@01 Bool)
; [exec]
; var _loop_check_before_0_0: Bool
(declare-const _loop_check_before_0_0@504@01 Bool)
; [exec]
; var _loop_termination_flag_0: Bool
(declare-const _loop_termination_flag_0@505@01 Bool)
; [exec]
; var _loop_termination_flag_0_0: Bool
(declare-const _loop_termination_flag_0_0@506@01 Bool)
; [exec]
; var _loop_original_must_terminate_0: Perm
(declare-const _loop_original_must_terminate_0@507@01 $Perm)
; [exec]
; var _loop_original_must_terminate_0_0: Perm
(declare-const _loop_original_must_terminate_0_0@508@01 $Perm)
; [exec]
; var _residue_163: Perm
(declare-const _residue_163@509@01 $Perm)
; [exec]
; var _residue_163_0: Perm
(declare-const _residue_163_0@510@01 $Perm)
; [exec]
; var Exception_res_0: Ref
(declare-const Exception_res_0@511@01 $Ref)
; [exec]
; var Exception_res_0_0: Ref
(declare-const Exception_res_0_0@512@01 $Ref)
; [exec]
; var _cwl_158: Perm
(declare-const _cwl_158@513@01 $Perm)
; [exec]
; var _cwl_158_0: Perm
(declare-const _cwl_158_0@514@01 $Perm)
; [exec]
; var _method_measures_158: Seq[Measure$]
(declare-const _method_measures_158@515@01 Seq<Measure$>)
; [exec]
; var _method_measures_158_0: Seq[Measure$]
(declare-const _method_measures_158_0@516@01 Seq<Measure$>)
; [exec]
; var bypass1_0: Bool
(declare-const bypass1_0@517@01 Bool)
; [exec]
; var bypass2_0: Bool
(declare-const bypass2_0@518@01 Bool)
; [exec]
; var tmp1_5: Seq[Measure$]
(declare-const tmp1_5@519@01 Seq<Measure$>)
; [exec]
; var tmp2_5: Seq[Measure$]
(declare-const tmp2_5@520@01 Seq<Measure$>)
; [exec]
; var tmp1_6: Ref
(declare-const tmp1_6@521@01 $Ref)
; [exec]
; var tmp2_6: Ref
(declare-const tmp2_6@522@01 $Ref)
; [exec]
; var tmp1_7: Bool
(declare-const tmp1_7@523@01 Bool)
; [exec]
; var tmp2_7: Bool
(declare-const tmp2_7@524@01 Bool)
; [exec]
; var tmp1_8: Ref
(declare-const tmp1_8@525@01 $Ref)
; [exec]
; var tmp2_8: Ref
(declare-const tmp2_8@526@01 $Ref)
; [exec]
; var tmp1_9: Bool
(declare-const tmp1_9@527@01 Bool)
; [exec]
; var tmp2_9: Bool
(declare-const tmp2_9@528@01 Bool)
; [exec]
; var tmp1_10: Bool
(declare-const tmp1_10@529@01 Bool)
; [exec]
; var tmp2_10: Bool
(declare-const tmp2_10@530@01 Bool)
; [exec]
; var oldbreak1_0: Bool
(declare-const oldbreak1_0@531@01 Bool)
; [exec]
; var oldbreak2_0: Bool
(declare-const oldbreak2_0@532@01 Bool)
; [exec]
; var oldexcept1_0: Bool
(declare-const oldexcept1_0@533@01 Bool)
; [exec]
; var oldexcept2_0: Bool
(declare-const oldexcept2_0@534@01 Bool)
; [exec]
; var p1_5: Bool
(declare-const p1_5@535@01 Bool)
; [exec]
; var p2_5: Bool
(declare-const p2_5@536@01 Bool)
; [exec]
; var idle1_0: Bool
(declare-const idle1_0@537@01 Bool)
; [exec]
; var idle2_0: Bool
(declare-const idle2_0@538@01 Bool)
; [exec]
; inhale p1_4
(declare-const $t@539@01 $Snap)
(assert (= $t@539@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; break1_0 := false
; [exec]
; break2_0 := false
; [exec]
; except1_0 := false
; [exec]
; except2_0 := false
; [eval] p1_4 && (!break1_0 && !except1_0)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3221 | !(p1_4@475@01) | live]
; [else-branch: 3221 | p1_4@475@01 | live]
(push) ; 6
; [then-branch: 3221 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 6
(push) ; 6
; [else-branch: 3221 | p1_4@475@01]
; [eval] !break1_0
(push) ; 7
; [then-branch: 3222 | False | live]
; [else-branch: 3222 | True | live]
(push) ; 8
; [then-branch: 3222 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 3222 | True]
; [eval] !except1_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_4@475@01 (not p1_4@475@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3223 | p1_4@475@01 | live]
; [else-branch: 3223 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3223 | p1_4@475@01]
; [exec]
; _method_measures_158 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; c_5 := c_0
; [exec]
; b_5 := b_0
; [exec]
; _loop_original_must_terminate_0 := perm(MustTerminate(_cthread_158))
; [eval] perm(MustTerminate(_cthread_158))
(declare-const _loop_original_must_terminate_0@540@01 $Perm)
(assert (= _loop_original_must_terminate_0@540@01 $Perm.No))
; [exec]
; _loop_termination_flag_0 := false
; [exec]
; _loop_check_before_0 := true
; [eval] p2_4 && (!break2_0 && !except2_0)
(push) ; 6
; [then-branch: 3224 | !(p2_4@476@01) | live]
; [else-branch: 3224 | p2_4@476@01 | live]
(push) ; 7
; [then-branch: 3224 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 7
(push) ; 7
; [else-branch: 3224 | p2_4@476@01]
; [eval] !break2_0
(push) ; 8
; [then-branch: 3225 | False | live]
; [else-branch: 3225 | True | live]
(push) ; 9
; [then-branch: 3225 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 3225 | True]
; [eval] !except2_0
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_4@476@01 (not p2_4@476@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3226 | p2_4@476@01 | live]
; [else-branch: 3226 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3226 | p2_4@476@01]
; [exec]
; _method_measures_158_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err_1 := null
; [exec]
; c_5_0 := c_0_0
; [exec]
; b_5_0 := b_0_0
; [exec]
; _loop_original_must_terminate_0_0 := perm(MustTerminate_0(_cthread_158_0))
; [eval] perm(MustTerminate_0(_cthread_158_0))
(declare-const _loop_original_must_terminate_0_0@541@01 $Perm)
(assert (= _loop_original_must_terminate_0_0@541@01 $Perm.No))
; [exec]
; _loop_termination_flag_0_0 := false
; [exec]
; _loop_check_before_0_0 := true
; [exec]
; bypass1_0 := !(p1_4 && (!break1_0 && !except1_0))
; [eval] !(p1_4 && (!break1_0 && !except1_0))
; [eval] p1_4 && (!break1_0 && !except1_0)
(push) ; 7
; [then-branch: 3227 | !(p1_4@475@01) | live]
; [else-branch: 3227 | p1_4@475@01 | live]
(push) ; 8
; [then-branch: 3227 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3227 | p1_4@475@01]
; [eval] !break1_0
(push) ; 9
; [then-branch: 3228 | False | live]
; [else-branch: 3228 | True | live]
(push) ; 10
; [then-branch: 3228 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3228 | True]
; [eval] !except1_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass1_0@542@01 Bool)
(assert (= bypass1_0@542@01 (not p1_4@475@01)))
; [exec]
; bypass2_0 := !(p2_4 && (!break2_0 && !except2_0))
; [eval] !(p2_4 && (!break2_0 && !except2_0))
; [eval] p2_4 && (!break2_0 && !except2_0)
(push) ; 7
; [then-branch: 3229 | !(p2_4@476@01) | live]
; [else-branch: 3229 | p2_4@476@01 | live]
(push) ; 8
; [then-branch: 3229 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3229 | p2_4@476@01]
; [eval] !break2_0
(push) ; 9
; [then-branch: 3230 | False | live]
; [else-branch: 3230 | True | live]
(push) ; 10
; [then-branch: 3230 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3230 | True]
; [eval] !except2_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass2_0@543@01 Bool)
(assert (= bypass2_0@543@01 (not p2_4@476@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (not bypass1_0@542@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3231 | bypass1_0@542@01 | dead]
; [else-branch: 3231 | !(bypass1_0@542@01) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 3231 | !(bypass1_0@542@01)]
(assert (not bypass1_0@542@01))
(pop) ; 7
; [eval] !bypass1_0
(push) ; 7
(set-option :timeout 10)
(assert (not bypass1_0@542@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not bypass1_0@542@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3232 | !(bypass1_0@542@01) | live]
; [else-branch: 3232 | bypass1_0@542@01 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3232 | !(bypass1_0@542@01)]
(assert (not bypass1_0@542@01))
(push) ; 8
(set-option :timeout 10)
(assert (not (not bypass2_0@543@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3233 | bypass2_0@543@01 | dead]
; [else-branch: 3233 | !(bypass2_0@543@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 3233 | !(bypass2_0@543@01)]
(assert (not bypass2_0@543@01))
(pop) ; 8
; [eval] !bypass2_0
(push) ; 8
(set-option :timeout 10)
(assert (not bypass2_0@543@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not bypass2_0@543@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3234 | !(bypass2_0@543@01) | live]
; [else-branch: 3234 | bypass2_0@543@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3234 | !(bypass2_0@543@01)]
(assert (not bypass2_0@543@01))
; [exec]
; oldbreak1_0 := break1_0
; [exec]
; oldbreak2_0 := break2_0
; [exec]
; oldexcept1_0 := except1_0
; [exec]
; oldexcept2_0 := except2_0
; [exec]
; idle1_0 := false
; [exec]
; idle2_0 := false
(declare-const p1_5@544@01 Bool)
(declare-const p2_5@545@01 Bool)
(declare-const idle1_0@546@01 Bool)
(declare-const idle2_0@547@01 Bool)
(declare-const _loop_measures_0@548@01 Seq<Measure$>)
(declare-const _loop_measures_0_0@549@01 Seq<Measure$>)
(declare-const p1_6@550@01 Bool)
(declare-const p2_6@551@01 Bool)
(declare-const p3_2@552@01 Bool)
(declare-const p4_2@553@01 Bool)
(declare-const p1_7@554@01 Bool)
(declare-const p2_7@555@01 Bool)
(declare-const p3_3@556@01 Bool)
(declare-const p4_3@557@01 Bool)
(declare-const tmp_0@558@01 $Ref)
(declare-const Exception_res_0@559@01 $Ref)
(declare-const Exception_res_0_0@560@01 $Ref)
(declare-const _err@561@01 $Ref)
(declare-const except1_0@562@01 Bool)
(declare-const _err_1@563@01 $Ref)
(declare-const except2_0@564@01 Bool)
(declare-const p1_8@565@01 Bool)
(declare-const p2_8@566@01 Bool)
(declare-const p3_4@567@01 Bool)
(declare-const p4_4@568@01 Bool)
(declare-const break1_0@569@01 Bool)
(declare-const break2_0@570@01 Bool)
(declare-const _loop_check_before_0@571@01 Bool)
(declare-const _loop_check_before_0_0@572@01 Bool)
(push) ; 9
; Loop head block: Check well-definedness of invariant
(declare-const $t@573@01 $Snap)
(assert (= $t@573@01 ($Snap.combine ($Snap.first $t@573@01) ($Snap.second $t@573@01))))
(assert (= ($Snap.first $t@573@01) $Snap.unit))
; [eval] p1_4 && !bypass1_0 ==> (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _residue_163) && ((forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _residue_163) && _residue_158 <= _residue_163)
; [eval] p1_4 && !bypass1_0
(push) ; 10
; [then-branch: 3235 | !(p1_4@475@01) | live]
; [else-branch: 3235 | p1_4@475@01 | live]
(push) ; 11
; [then-branch: 3235 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 11
(push) ; 11
; [else-branch: 3235 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3236 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3236 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3236 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _residue_163) && ((forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _residue_163) && _residue_158 <= _residue_163)
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _residue_163)
(push) ; 12
; [then-branch: 3237 | False | live]
; [else-branch: 3237 | True | live]
(push) ; 13
; [then-branch: 3237 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 3237 | True]
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _residue_163)
(push) ; 14
; [then-branch: 3238 | False | live]
; [else-branch: 3238 | True | live]
(push) ; 15
; [then-branch: 3238 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 3238 | True]
; [eval] _residue_158 <= _residue_163
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (<= _residue_158@481@01 _residue_163@509@01)))
(assert (=
  ($Snap.second $t@573@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@573@01))
    ($Snap.second ($Snap.second $t@573@01)))))
(assert (= ($Snap.first ($Snap.second $t@573@01)) $Snap.unit))
; [eval] p2_4 && !bypass2_0 ==> (forperm _r_4: Ref [_r_4.MustReleaseBoundedp] :: Level(_r_4) <= _residue_163_0) && ((forperm _r_4: Ref [_r_4.MustReleaseUnboundedp] :: Level(_r_4) <= _residue_163_0) && _residue_158_0 <= _residue_163_0)
; [eval] p2_4 && !bypass2_0
(push) ; 10
; [then-branch: 3239 | !(p2_4@476@01) | live]
; [else-branch: 3239 | p2_4@476@01 | live]
(push) ; 11
; [then-branch: 3239 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 11
(push) ; 11
; [else-branch: 3239 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3240 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3240 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3240 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBoundedp] :: Level(_r_4) <= _residue_163_0) && ((forperm _r_4: Ref [_r_4.MustReleaseUnboundedp] :: Level(_r_4) <= _residue_163_0) && _residue_158_0 <= _residue_163_0)
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBoundedp] :: Level(_r_4) <= _residue_163_0)
(push) ; 12
; [then-branch: 3241 | False | live]
; [else-branch: 3241 | True | live]
(push) ; 13
; [then-branch: 3241 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 3241 | True]
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseUnboundedp] :: Level(_r_4) <= _residue_163_0)
(push) ; 14
; [then-branch: 3242 | False | live]
; [else-branch: 3242 | True | live]
(push) ; 15
; [then-branch: 3242 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 3242 | True]
; [eval] _residue_158_0 <= _residue_163_0
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (<= _residue_158_0@482@01 _residue_163_0@510@01)))
(assert (=
  ($Snap.second ($Snap.second $t@573@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@573@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))
; [eval] p1_4 && !bypass1_0
(push) ; 10
; [then-branch: 3243 | !(p1_4@475@01) | live]
; [else-branch: 3243 | p1_4@475@01 | live]
(push) ; 11
; [then-branch: 3243 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 11
(push) ; 11
; [else-branch: 3243 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3244 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3244 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3244 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@573@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@573@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))
; [eval] p2_4 && !bypass2_0
(push) ; 11
; [then-branch: 3245 | !(p2_4@476@01) | live]
; [else-branch: 3245 | p2_4@476@01 | live]
(push) ; 12
; [then-branch: 3245 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 12
(push) ; 12
; [else-branch: 3245 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3246 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3246 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3246 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))
  $Snap.unit))
; [eval] p1_4 && !bypass1_0 ==> issubtype(typeof(c_5.Container_value), int())
; [eval] p1_4 && !bypass1_0
(push) ; 12
; [then-branch: 3247 | !(p1_4@475@01) | live]
; [else-branch: 3247 | p1_4@475@01 | live]
(push) ; 13
; [then-branch: 3247 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 13
(push) ; 13
; [else-branch: 3247 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3248 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3248 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3248 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] issubtype(typeof(c_5.Container_value), int())
; [eval] typeof(c_5.Container_value)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@573@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))
  $Snap.unit))
; [eval] p2_4 && !bypass2_0 ==> issubtype(typeof(c_5_0.Container_valuep), int())
; [eval] p2_4 && !bypass2_0
(push) ; 12
; [then-branch: 3249 | !(p2_4@476@01) | live]
; [else-branch: 3249 | p2_4@476@01 | live]
(push) ; 13
; [then-branch: 3249 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 13
(push) ; 13
; [else-branch: 3249 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3250 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3250 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3250 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] issubtype(typeof(c_5_0.Container_valuep), int())
; [eval] typeof(c_5_0.Container_valuep)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))
  $Snap.unit))
; [eval] p1_4 && !bypass1_0 ==> true
; [eval] p1_4 && !bypass1_0
(push) ; 12
; [then-branch: 3251 | !(p1_4@475@01) | live]
; [else-branch: 3251 | p1_4@475@01 | live]
(push) ; 13
; [then-branch: 3251 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 13
(push) ; 13
; [else-branch: 3251 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3252 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3252 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3252 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))
  $Snap.unit))
; [eval] p2_4 && !bypass2_0 ==> true
; [eval] p2_4 && !bypass2_0
(push) ; 12
; [then-branch: 3253 | !(p2_4@476@01) | live]
; [else-branch: 3253 | p2_4@476@01 | live]
(push) ; 13
; [then-branch: 3253 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 13
(push) ; 13
; [else-branch: 3253 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3254 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3254 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3254 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))
  $Snap.unit))
; [eval] p1_4 && !bypass1_0 ==> true
; [eval] p1_4 && !bypass1_0
(push) ; 12
; [then-branch: 3255 | !(p1_4@475@01) | live]
; [else-branch: 3255 | p1_4@475@01 | live]
(push) ; 13
; [then-branch: 3255 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 13
(push) ; 13
; [else-branch: 3255 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3256 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3256 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3256 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))
  $Snap.unit))
; [eval] p2_4 && !bypass2_0 ==> true
; [eval] p2_4 && !bypass2_0
(push) ; 12
; [then-branch: 3257 | !(p2_4@476@01) | live]
; [else-branch: 3257 | p2_4@476@01 | live]
(push) ; 13
; [then-branch: 3257 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 13
(push) ; 13
; [else-branch: 3257 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3258 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3258 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3258 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))
  $Snap.unit))
; [eval] bypass1_0 ==> tmp1_7 == except1_0
(push) ; 12
; [then-branch: 3259 | bypass1_0@542@01 | dead]
; [else-branch: 3259 | !(bypass1_0@542@01) | live]
(push) ; 13
; [else-branch: 3259 | !(bypass1_0@542@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))
  $Snap.unit))
; [eval] bypass1_0 ==> tmp1_6 == Exception_res_0
(push) ; 12
; [then-branch: 3260 | bypass1_0@542@01 | dead]
; [else-branch: 3260 | !(bypass1_0@542@01) | live]
(push) ; 13
; [else-branch: 3260 | !(bypass1_0@542@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))
  $Snap.unit))
; [eval] bypass1_0 ==> tmp1_10 == break1_0
(push) ; 12
; [then-branch: 3261 | bypass1_0@542@01 | dead]
; [else-branch: 3261 | !(bypass1_0@542@01) | live]
(push) ; 13
; [else-branch: 3261 | !(bypass1_0@542@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))
  $Snap.unit))
; [eval] bypass1_0 ==> tmp1_9 == _loop_check_before_0
(push) ; 12
; [then-branch: 3262 | bypass1_0@542@01 | dead]
; [else-branch: 3262 | !(bypass1_0@542@01) | live]
(push) ; 13
; [else-branch: 3262 | !(bypass1_0@542@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))
  $Snap.unit))
; [eval] bypass1_0 ==> tmp1_8 == _err
(push) ; 12
; [then-branch: 3263 | bypass1_0@542@01 | dead]
; [else-branch: 3263 | !(bypass1_0@542@01) | live]
(push) ; 13
; [else-branch: 3263 | !(bypass1_0@542@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))
  $Snap.unit))
; [eval] bypass1_0 ==> tmp1_5 == _loop_measures_0
(push) ; 12
; [then-branch: 3264 | bypass1_0@542@01 | dead]
; [else-branch: 3264 | !(bypass1_0@542@01) | live]
(push) ; 13
; [else-branch: 3264 | !(bypass1_0@542@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))
  $Snap.unit))
; [eval] bypass2_0 ==> tmp2_5 == _loop_measures_0_0
(push) ; 12
; [then-branch: 3265 | bypass2_0@543@01 | dead]
; [else-branch: 3265 | !(bypass2_0@543@01) | live]
(push) ; 13
; [else-branch: 3265 | !(bypass2_0@543@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_0 ==> tmp2_8 == _err_1
(push) ; 12
; [then-branch: 3266 | bypass2_0@543@01 | dead]
; [else-branch: 3266 | !(bypass2_0@543@01) | live]
(push) ; 13
; [else-branch: 3266 | !(bypass2_0@543@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_0 ==> tmp2_10 == break2_0
(push) ; 12
; [then-branch: 3267 | bypass2_0@543@01 | dead]
; [else-branch: 3267 | !(bypass2_0@543@01) | live]
(push) ; 13
; [else-branch: 3267 | !(bypass2_0@543@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_0 ==> tmp2_7 == except2_0
(push) ; 12
; [then-branch: 3268 | bypass2_0@543@01 | dead]
; [else-branch: 3268 | !(bypass2_0@543@01) | live]
(push) ; 13
; [else-branch: 3268 | !(bypass2_0@543@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_0 ==> tmp2_6 == Exception_res_0_0
(push) ; 12
; [then-branch: 3269 | bypass2_0@543@01 | dead]
; [else-branch: 3269 | !(bypass2_0@543@01) | live]
(push) ; 13
; [else-branch: 3269 | !(bypass2_0@543@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_0 ==> tmp2_9 == _loop_check_before_0_0
(push) ; 12
; [then-branch: 3270 | bypass2_0@543@01 | dead]
; [else-branch: 3270 | !(bypass2_0@543@01) | live]
(push) ; 13
; [else-branch: 3270 | !(bypass2_0@543@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
(pop) ; 9
(push) ; 9
; Loop head block: Establish invariant
; [eval] p1_4 && !bypass1_0 ==> true
; [eval] p1_4 && !bypass1_0
(push) ; 10
; [then-branch: 3271 | !(p1_4@475@01) | live]
; [else-branch: 3271 | p1_4@475@01 | live]
(push) ; 11
; [then-branch: 3271 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 11
(push) ; 11
; [else-branch: 3271 | p1_4@475@01]
(assert p1_4@475@01)
; [eval] !bypass1_0
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3272 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3272 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3272 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> true
; [eval] p2_4 && !bypass2_0
(push) ; 10
; [then-branch: 3273 | !(p2_4@476@01) | live]
; [else-branch: 3273 | p2_4@476@01 | live]
(push) ; 11
; [then-branch: 3273 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 11
(push) ; 11
; [else-branch: 3273 | p2_4@476@01]
(assert p2_4@476@01)
; [eval] !bypass2_0
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3274 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3274 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3274 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0
(push) ; 10
; [then-branch: 3275 | !(p1_4@475@01) | live]
; [else-branch: 3275 | p1_4@475@01 | live]
(push) ; 11
; [then-branch: 3275 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 11
(push) ; 11
; [else-branch: 3275 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3276 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3276 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3276 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0
(push) ; 11
; [then-branch: 3277 | !(p2_4@476@01) | live]
; [else-branch: 3277 | p2_4@476@01 | live]
(push) ; 12
; [then-branch: 3277 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 12
(push) ; 12
; [else-branch: 3277 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3278 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3278 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3278 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0 ==> issubtype(typeof(c_5.Container_value), int())
; [eval] p1_4 && !bypass1_0
(push) ; 12
; [then-branch: 3279 | !(p1_4@475@01) | live]
; [else-branch: 3279 | p1_4@475@01 | live]
(push) ; 13
; [then-branch: 3279 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 13
(push) ; 13
; [else-branch: 3279 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3280 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3280 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3280 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] issubtype(typeof(c_5.Container_value), int())
; [eval] typeof(c_5.Container_value)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(push) ; 12
(assert (not (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01))))))))))) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01))))))))))) (as int<PyType>  PyType))))
; [eval] p2_4 && !bypass2_0 ==> issubtype(typeof(c_5_0.Container_valuep), int())
; [eval] p2_4 && !bypass2_0
(push) ; 12
; [then-branch: 3281 | !(p2_4@476@01) | live]
; [else-branch: 3281 | p2_4@476@01 | live]
(push) ; 13
; [then-branch: 3281 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 13
(push) ; 13
; [else-branch: 3281 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3282 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3282 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3282 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] issubtype(typeof(c_5_0.Container_valuep), int())
; [eval] typeof(c_5_0.Container_valuep)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(push) ; 12
(assert (not (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))))))))) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))))))))) (as int<PyType>  PyType))))
; [eval] p1_4 && !bypass1_0 ==> !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] p1_4 && !bypass1_0
(push) ; 12
; [then-branch: 3283 | !(p1_4@475@01) | live]
; [else-branch: 3283 | p1_4@475@01 | live]
(push) ; 13
; [then-branch: 3283 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 13
(push) ; 13
; [else-branch: 3283 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3284 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3284 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3284 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] !idle1_0
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3285 | True | live]
; [else-branch: 3285 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 3285 | True]
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3286 | True | live]
; [else-branch: 3286 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 3286 | True]
; [eval] _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
(push) ; 18
; [then-branch: 3287 | False | live]
; [else-branch: 3287 | True | live]
(push) ; 19
; [then-branch: 3287 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 3287 | True]
; [eval] perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_158)) == none
; [eval] perm(MustTerminate(_cthread_158))
(push) ; 20
; [then-branch: 3288 | False | live]
; [else-branch: 3288 | True | live]
(push) ; 21
; [then-branch: 3288 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 3288 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 22
; [then-branch: 3289 | False | live]
; [else-branch: 3289 | True | live]
(push) ; 23
; [then-branch: 3289 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 3289 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 24
; [then-branch: 3290 | False | live]
; [else-branch: 3290 | True | live]
(push) ; 25
; [then-branch: 3290 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 3290 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 26
; [then-branch: 3291 | False | live]
; [else-branch: 3291 | True | live]
(push) ; 27
; [then-branch: 3291 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 3291 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] p2_4 && !bypass2_0
(push) ; 12
; [then-branch: 3292 | !(p2_4@476@01) | live]
; [else-branch: 3292 | p2_4@476@01 | live]
(push) ; 13
; [then-branch: 3292 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 13
(push) ; 13
; [else-branch: 3292 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3293 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3293 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3293 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_0
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3294 | True | live]
; [else-branch: 3294 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 3294 | True]
; [eval] _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3295 | True | live]
; [else-branch: 3295 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 3295 | True]
; [eval] _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
(push) ; 18
; [then-branch: 3296 | False | live]
; [else-branch: 3296 | True | live]
(push) ; 19
; [then-branch: 3296 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 3296 | True]
; [eval] perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_158_0)) == none
; [eval] perm(MustTerminate_0(_cthread_158_0))
(push) ; 20
; [then-branch: 3297 | False | live]
; [else-branch: 3297 | True | live]
(push) ; 21
; [then-branch: 3297 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 3297 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false)
(push) ; 22
; [then-branch: 3298 | False | live]
; [else-branch: 3298 | True | live]
(push) ; 23
; [then-branch: 3298 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 3298 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false)
(push) ; 24
; [then-branch: 3299 | False | live]
; [else-branch: 3299 | True | live]
(push) ; 25
; [then-branch: 3299 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 3299 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false)
(push) ; 26
; [then-branch: 3300 | False | live]
; [else-branch: 3300 | True | live]
(push) ; 27
; [then-branch: 3300 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 3300 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0 ==> !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] p1_4 && !bypass1_0
(push) ; 12
; [then-branch: 3301 | !(p1_4@475@01) | live]
; [else-branch: 3301 | p1_4@475@01 | live]
(push) ; 13
; [then-branch: 3301 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 13
(push) ; 13
; [else-branch: 3301 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3302 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3302 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3302 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !idle1_0
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3303 | True | live]
; [else-branch: 3303 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 3303 | True]
; [eval] !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 16
; [then-branch: 3304 | False | dead]
; [else-branch: 3304 | True | live]
(push) ; 17
; [else-branch: 3304 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] p2_4 && !bypass2_0
(push) ; 12
; [then-branch: 3305 | !(p2_4@476@01) | live]
; [else-branch: 3305 | p2_4@476@01 | live]
(push) ; 13
; [then-branch: 3305 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 13
(push) ; 13
; [else-branch: 3305 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3306 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3306 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3306 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_0
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3307 | True | live]
; [else-branch: 3307 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 3307 | True]
; [eval] !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_0_0
(push) ; 16
; [then-branch: 3308 | False | dead]
; [else-branch: 3308 | True | live]
(push) ; 17
; [else-branch: 3308 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] bypass1_0 ==> tmp1_7 == except1_0
(push) ; 12
; [then-branch: 3309 | bypass1_0@542@01 | dead]
; [else-branch: 3309 | !(bypass1_0@542@01) | live]
(push) ; 13
; [else-branch: 3309 | !(bypass1_0@542@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_6 == Exception_res_0
(push) ; 12
; [then-branch: 3310 | bypass1_0@542@01 | dead]
; [else-branch: 3310 | !(bypass1_0@542@01) | live]
(push) ; 13
; [else-branch: 3310 | !(bypass1_0@542@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_10 == break1_0
(push) ; 12
; [then-branch: 3311 | bypass1_0@542@01 | dead]
; [else-branch: 3311 | !(bypass1_0@542@01) | live]
(push) ; 13
; [else-branch: 3311 | !(bypass1_0@542@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_9 == _loop_check_before_0
(push) ; 12
; [then-branch: 3312 | bypass1_0@542@01 | dead]
; [else-branch: 3312 | !(bypass1_0@542@01) | live]
(push) ; 13
; [else-branch: 3312 | !(bypass1_0@542@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_8 == _err
(push) ; 12
; [then-branch: 3313 | bypass1_0@542@01 | dead]
; [else-branch: 3313 | !(bypass1_0@542@01) | live]
(push) ; 13
; [else-branch: 3313 | !(bypass1_0@542@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_5 == _loop_measures_0
(push) ; 12
; [then-branch: 3314 | bypass1_0@542@01 | dead]
; [else-branch: 3314 | !(bypass1_0@542@01) | live]
(push) ; 13
; [else-branch: 3314 | !(bypass1_0@542@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_5 == _loop_measures_0_0
(push) ; 12
; [then-branch: 3315 | bypass2_0@543@01 | dead]
; [else-branch: 3315 | !(bypass2_0@543@01) | live]
(push) ; 13
; [else-branch: 3315 | !(bypass2_0@543@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_8 == _err_1
(push) ; 12
; [then-branch: 3316 | bypass2_0@543@01 | dead]
; [else-branch: 3316 | !(bypass2_0@543@01) | live]
(push) ; 13
; [else-branch: 3316 | !(bypass2_0@543@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_10 == break2_0
(push) ; 12
; [then-branch: 3317 | bypass2_0@543@01 | dead]
; [else-branch: 3317 | !(bypass2_0@543@01) | live]
(push) ; 13
; [else-branch: 3317 | !(bypass2_0@543@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_7 == except2_0
(push) ; 12
; [then-branch: 3318 | bypass2_0@543@01 | dead]
; [else-branch: 3318 | !(bypass2_0@543@01) | live]
(push) ; 13
; [else-branch: 3318 | !(bypass2_0@543@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_6 == Exception_res_0_0
(push) ; 12
; [then-branch: 3319 | bypass2_0@543@01 | dead]
; [else-branch: 3319 | !(bypass2_0@543@01) | live]
(push) ; 13
; [else-branch: 3319 | !(bypass2_0@543@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_9 == _loop_check_before_0_0
(push) ; 12
; [then-branch: 3320 | bypass2_0@543@01 | dead]
; [else-branch: 3320 | !(bypass2_0@543@01) | live]
(push) ; 13
; [else-branch: 3320 | !(bypass2_0@543@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 12
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))
  $Snap.unit))
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@573@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))
  $Snap.unit))
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@573@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@573@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@573@01)))))))
(assert (= $t@573@01 ($Snap.combine ($Snap.first $t@573@01) ($Snap.second $t@573@01))))
(assert (= ($Snap.first $t@573@01) $Snap.unit))
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (<= _residue_158@481@01 _residue_163@509@01)))
(assert (=
  ($Snap.second $t@573@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@573@01))
    ($Snap.second ($Snap.second $t@573@01)))))
(assert (= ($Snap.first ($Snap.second $t@573@01)) $Snap.unit))
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (<= _residue_158_0@482@01 _residue_163_0@510@01)))
(assert (=
  ($Snap.second ($Snap.second $t@573@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@573@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 13
; [eval] p1_4 && (!break1_0 && !except1_0 && (!bypass1_0 && true)) || p2_4 && (!break2_0 && !except2_0 && (!bypass2_0 && true))
; [eval] p1_4 && (!break1_0 && !except1_0 && (!bypass1_0 && true))
(push) ; 14
; [then-branch: 3321 | !(p1_4@475@01) | live]
; [else-branch: 3321 | p1_4@475@01 | live]
(push) ; 15
; [then-branch: 3321 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 15
(push) ; 15
; [else-branch: 3321 | p1_4@475@01]
; [eval] !break1_0
(push) ; 16
; [then-branch: 3322 | break1_0@569@01 | live]
; [else-branch: 3322 | !(break1_0@569@01) | live]
(push) ; 17
; [then-branch: 3322 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 17
(push) ; 17
; [else-branch: 3322 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 18
; [then-branch: 3323 | except1_0@562@01 | live]
; [else-branch: 3323 | !(except1_0@562@01) | live]
(push) ; 19
; [then-branch: 3323 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 19
(push) ; 19
; [else-branch: 3323 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] !bypass1_0
(push) ; 20
; [then-branch: 3324 | bypass1_0@542@01 | live]
; [else-branch: 3324 | !(bypass1_0@542@01) | live]
(push) ; 21
; [then-branch: 3324 | bypass1_0@542@01]
(assert bypass1_0@542@01)
(pop) ; 21
(push) ; 21
; [else-branch: 3324 | !(bypass1_0@542@01)]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1_0@542@01) bypass1_0@542@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_0@562@01)
  (and (not except1_0@562@01) (or (not bypass1_0@542@01) bypass1_0@542@01))))
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and
    (not break1_0@569@01)
    (=>
      (not except1_0@562@01)
      (and (not except1_0@562@01) (or (not bypass1_0@542@01) bypass1_0@542@01)))
    (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_4@475@01
  (and
    (=>
      (not break1_0@569@01)
      (and
        (not break1_0@569@01)
        (=>
          (not except1_0@562@01)
          (and
            (not except1_0@562@01)
            (or (not bypass1_0@542@01) bypass1_0@542@01)))
        (or (not except1_0@562@01) except1_0@562@01)))
    (or (not break1_0@569@01) break1_0@569@01))))
(push) ; 14
; [then-branch: 3325 | p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01) | live]
; [else-branch: 3325 | !(p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01)) | live]
(push) ; 15
; [then-branch: 3325 | p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01)]
(assert (and
  p1_4@475@01
  (and (not break1_0@569@01) (and (not except1_0@562@01) (not bypass1_0@542@01)))))
(pop) ; 15
(push) ; 15
; [else-branch: 3325 | !(p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01))]
(assert (not
  (and
    p1_4@475@01
    (and
      (not break1_0@569@01)
      (and (not except1_0@562@01) (not bypass1_0@542@01))))))
; [eval] p2_4 && (!break2_0 && !except2_0 && (!bypass2_0 && true))
(push) ; 16
; [then-branch: 3326 | !(p2_4@476@01) | live]
; [else-branch: 3326 | p2_4@476@01 | live]
(push) ; 17
; [then-branch: 3326 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 17
(push) ; 17
; [else-branch: 3326 | p2_4@476@01]
; [eval] !break2_0
(push) ; 18
; [then-branch: 3327 | break2_0@570@01 | live]
; [else-branch: 3327 | !(break2_0@570@01) | live]
(push) ; 19
; [then-branch: 3327 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 19
(push) ; 19
; [else-branch: 3327 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(push) ; 20
; [then-branch: 3328 | except2_0@564@01 | live]
; [else-branch: 3328 | !(except2_0@564@01) | live]
(push) ; 21
; [then-branch: 3328 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 21
(push) ; 21
; [else-branch: 3328 | !(except2_0@564@01)]
(assert (not except2_0@564@01))
; [eval] !bypass2_0
(push) ; 22
; [then-branch: 3329 | bypass2_0@543@01 | live]
; [else-branch: 3329 | !(bypass2_0@543@01) | live]
(push) ; 23
; [then-branch: 3329 | bypass2_0@543@01]
(assert bypass2_0@543@01)
(pop) ; 23
(push) ; 23
; [else-branch: 3329 | !(bypass2_0@543@01)]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2_0@543@01) bypass2_0@543@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_0@564@01)
  (and (not except2_0@564@01) (or (not bypass2_0@543@01) bypass2_0@543@01))))
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and
    (not break2_0@570@01)
    (=>
      (not except2_0@564@01)
      (and (not except2_0@564@01) (or (not bypass2_0@543@01) bypass2_0@543@01)))
    (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_4@476@01
  (and
    (=>
      (not break2_0@570@01)
      (and
        (not break2_0@570@01)
        (=>
          (not except2_0@564@01)
          (and
            (not except2_0@564@01)
            (or (not bypass2_0@543@01) bypass2_0@543@01)))
        (or (not except2_0@564@01) except2_0@564@01)))
    (or (not break2_0@570@01) break2_0@570@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (and
    p1_4@475@01
    (and
      (not break1_0@569@01)
      (and (not except1_0@562@01) (not bypass1_0@542@01))))
  (and
    p1_4@475@01
    (not break1_0@569@01)
    (not except1_0@562@01)
    (not bypass1_0@542@01))))
; Joined path conditions
(assert (=>
  (not
    (and
      p1_4@475@01
      (and
        (not break1_0@569@01)
        (and (not except1_0@562@01) (not bypass1_0@542@01)))))
  (and
    (not
      (and
        p1_4@475@01
        (and
          (not break1_0@569@01)
          (and (not except1_0@562@01) (not bypass1_0@542@01)))))
    (=>
      p2_4@476@01
      (and
        (=>
          (not break2_0@570@01)
          (and
            (not break2_0@570@01)
            (=>
              (not except2_0@564@01)
              (and
                (not except2_0@564@01)
                (or (not bypass2_0@543@01) bypass2_0@543@01)))
            (or (not except2_0@564@01) except2_0@564@01)))
        (or (not break2_0@570@01) break2_0@570@01))))))
(assert (or
  (not
    (and
      p1_4@475@01
      (and
        (not break1_0@569@01)
        (and (not except1_0@562@01) (not bypass1_0@542@01)))))
  (and
    p1_4@475@01
    (and
      (not break1_0@569@01)
      (and (not except1_0@562@01) (not bypass1_0@542@01))))))
(pop) ; 13
(push) ; 13
; [eval] !(p1_4 && (!break1_0 && !except1_0 && (!bypass1_0 && true)) || p2_4 && (!break2_0 && !except2_0 && (!bypass2_0 && true)))
; [eval] p1_4 && (!break1_0 && !except1_0 && (!bypass1_0 && true)) || p2_4 && (!break2_0 && !except2_0 && (!bypass2_0 && true))
; [eval] p1_4 && (!break1_0 && !except1_0 && (!bypass1_0 && true))
(push) ; 14
; [then-branch: 3330 | !(p1_4@475@01) | live]
; [else-branch: 3330 | p1_4@475@01 | live]
(push) ; 15
; [then-branch: 3330 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 15
(push) ; 15
; [else-branch: 3330 | p1_4@475@01]
(assert p1_4@475@01)
; [eval] !break1_0
(push) ; 16
; [then-branch: 3331 | break1_0@569@01 | live]
; [else-branch: 3331 | !(break1_0@569@01) | live]
(push) ; 17
; [then-branch: 3331 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 17
(push) ; 17
; [else-branch: 3331 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 18
; [then-branch: 3332 | except1_0@562@01 | live]
; [else-branch: 3332 | !(except1_0@562@01) | live]
(push) ; 19
; [then-branch: 3332 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 19
(push) ; 19
; [else-branch: 3332 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] !bypass1_0
(push) ; 20
; [then-branch: 3333 | bypass1_0@542@01 | live]
; [else-branch: 3333 | !(bypass1_0@542@01) | live]
(push) ; 21
; [then-branch: 3333 | bypass1_0@542@01]
(assert bypass1_0@542@01)
(pop) ; 21
(push) ; 21
; [else-branch: 3333 | !(bypass1_0@542@01)]
(assert (not bypass1_0@542@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1_0@542@01) bypass1_0@542@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_0@562@01)
  (and (not except1_0@562@01) (or (not bypass1_0@542@01) bypass1_0@542@01))))
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and
    (not break1_0@569@01)
    (=>
      (not except1_0@562@01)
      (and (not except1_0@562@01) (or (not bypass1_0@542@01) bypass1_0@542@01)))
    (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_4@475@01
  (and
    p1_4@475@01
    (=>
      (not break1_0@569@01)
      (and
        (not break1_0@569@01)
        (=>
          (not except1_0@562@01)
          (and
            (not except1_0@562@01)
            (or (not bypass1_0@542@01) bypass1_0@542@01)))
        (or (not except1_0@562@01) except1_0@562@01)))
    (or (not break1_0@569@01) break1_0@569@01))))
(push) ; 14
; [then-branch: 3334 | p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01) | live]
; [else-branch: 3334 | !(p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01)) | live]
(push) ; 15
; [then-branch: 3334 | p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01)]
(assert (and
  p1_4@475@01
  (and (not break1_0@569@01) (and (not except1_0@562@01) (not bypass1_0@542@01)))))
(pop) ; 15
(push) ; 15
; [else-branch: 3334 | !(p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01))]
(assert (not
  (and
    p1_4@475@01
    (and
      (not break1_0@569@01)
      (and (not except1_0@562@01) (not bypass1_0@542@01))))))
; [eval] p2_4 && (!break2_0 && !except2_0 && (!bypass2_0 && true))
(push) ; 16
; [then-branch: 3335 | !(p2_4@476@01) | live]
; [else-branch: 3335 | p2_4@476@01 | live]
(push) ; 17
; [then-branch: 3335 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 17
(push) ; 17
; [else-branch: 3335 | p2_4@476@01]
; [eval] !break2_0
(push) ; 18
; [then-branch: 3336 | break2_0@570@01 | live]
; [else-branch: 3336 | !(break2_0@570@01) | live]
(push) ; 19
; [then-branch: 3336 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 19
(push) ; 19
; [else-branch: 3336 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(push) ; 20
; [then-branch: 3337 | except2_0@564@01 | live]
; [else-branch: 3337 | !(except2_0@564@01) | live]
(push) ; 21
; [then-branch: 3337 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 21
(push) ; 21
; [else-branch: 3337 | !(except2_0@564@01)]
(assert (not except2_0@564@01))
; [eval] !bypass2_0
(push) ; 22
; [then-branch: 3338 | bypass2_0@543@01 | live]
; [else-branch: 3338 | !(bypass2_0@543@01) | live]
(push) ; 23
; [then-branch: 3338 | bypass2_0@543@01]
(assert bypass2_0@543@01)
(pop) ; 23
(push) ; 23
; [else-branch: 3338 | !(bypass2_0@543@01)]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2_0@543@01) bypass2_0@543@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_0@564@01)
  (and (not except2_0@564@01) (or (not bypass2_0@543@01) bypass2_0@543@01))))
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and
    (not break2_0@570@01)
    (=>
      (not except2_0@564@01)
      (and (not except2_0@564@01) (or (not bypass2_0@543@01) bypass2_0@543@01)))
    (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_4@476@01
  (and
    (=>
      (not break2_0@570@01)
      (and
        (not break2_0@570@01)
        (=>
          (not except2_0@564@01)
          (and
            (not except2_0@564@01)
            (or (not bypass2_0@543@01) bypass2_0@543@01)))
        (or (not except2_0@564@01) except2_0@564@01)))
    (or (not break2_0@570@01) break2_0@570@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (and
    p1_4@475@01
    (and
      (not break1_0@569@01)
      (and (not except1_0@562@01) (not bypass1_0@542@01))))
  (and
    p1_4@475@01
    (not break1_0@569@01)
    (not except1_0@562@01)
    (not bypass1_0@542@01))))
; Joined path conditions
(assert (=>
  (not
    (and
      p1_4@475@01
      (and
        (not break1_0@569@01)
        (and (not except1_0@562@01) (not bypass1_0@542@01)))))
  (and
    (not
      (and
        p1_4@475@01
        (and
          (not break1_0@569@01)
          (and (not except1_0@562@01) (not bypass1_0@542@01)))))
    (=>
      p2_4@476@01
      (and
        (=>
          (not break2_0@570@01)
          (and
            (not break2_0@570@01)
            (=>
              (not except2_0@564@01)
              (and
                (not except2_0@564@01)
                (or (not bypass2_0@543@01) bypass2_0@543@01)))
            (or (not except2_0@564@01) except2_0@564@01)))
        (or (not break2_0@570@01) break2_0@570@01))))))
(assert (or
  (not
    (and
      p1_4@475@01
      (and
        (not break1_0@569@01)
        (and (not except1_0@562@01) (not bypass1_0@542@01)))))
  (and
    p1_4@475@01
    (and
      (not break1_0@569@01)
      (and (not except1_0@562@01) (not bypass1_0@542@01))))))
(pop) ; 13
; Loop head block: Follow loop-internal edges
; [eval] p1_4 && (!break1_0 && !except1_0 && (!bypass1_0 && true)) || p2_4 && (!break2_0 && !except2_0 && (!bypass2_0 && true))
; [eval] p1_4 && (!break1_0 && !except1_0 && (!bypass1_0 && true))
(push) ; 13
; [then-branch: 3339 | !(p1_4@475@01) | live]
; [else-branch: 3339 | p1_4@475@01 | live]
(push) ; 14
; [then-branch: 3339 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 14
(push) ; 14
; [else-branch: 3339 | p1_4@475@01]
(assert p1_4@475@01)
; [eval] !break1_0
(push) ; 15
; [then-branch: 3340 | break1_0@569@01 | live]
; [else-branch: 3340 | !(break1_0@569@01) | live]
(push) ; 16
; [then-branch: 3340 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 16
(push) ; 16
; [else-branch: 3340 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 17
; [then-branch: 3341 | except1_0@562@01 | live]
; [else-branch: 3341 | !(except1_0@562@01) | live]
(push) ; 18
; [then-branch: 3341 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 18
(push) ; 18
; [else-branch: 3341 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] !bypass1_0
(push) ; 19
; [then-branch: 3342 | bypass1_0@542@01 | live]
; [else-branch: 3342 | !(bypass1_0@542@01) | live]
(push) ; 20
; [then-branch: 3342 | bypass1_0@542@01]
(assert bypass1_0@542@01)
(pop) ; 20
(push) ; 20
; [else-branch: 3342 | !(bypass1_0@542@01)]
(assert (not bypass1_0@542@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1_0@542@01) bypass1_0@542@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_0@562@01)
  (and (not except1_0@562@01) (or (not bypass1_0@542@01) bypass1_0@542@01))))
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and
    (not break1_0@569@01)
    (=>
      (not except1_0@562@01)
      (and (not except1_0@562@01) (or (not bypass1_0@542@01) bypass1_0@542@01)))
    (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_4@475@01
  (and
    p1_4@475@01
    (=>
      (not break1_0@569@01)
      (and
        (not break1_0@569@01)
        (=>
          (not except1_0@562@01)
          (and
            (not except1_0@562@01)
            (or (not bypass1_0@542@01) bypass1_0@542@01)))
        (or (not except1_0@562@01) except1_0@562@01)))
    (or (not break1_0@569@01) break1_0@569@01))))
(push) ; 13
; [then-branch: 3343 | p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01) | live]
; [else-branch: 3343 | !(p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01)) | live]
(push) ; 14
; [then-branch: 3343 | p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01)]
(assert (and
  p1_4@475@01
  (and (not break1_0@569@01) (and (not except1_0@562@01) (not bypass1_0@542@01)))))
(pop) ; 14
(push) ; 14
; [else-branch: 3343 | !(p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01))]
(assert (not
  (and
    p1_4@475@01
    (and
      (not break1_0@569@01)
      (and (not except1_0@562@01) (not bypass1_0@542@01))))))
; [eval] p2_4 && (!break2_0 && !except2_0 && (!bypass2_0 && true))
(push) ; 15
; [then-branch: 3344 | !(p2_4@476@01) | live]
; [else-branch: 3344 | p2_4@476@01 | live]
(push) ; 16
; [then-branch: 3344 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 16
(push) ; 16
; [else-branch: 3344 | p2_4@476@01]
; [eval] !break2_0
(push) ; 17
; [then-branch: 3345 | break2_0@570@01 | live]
; [else-branch: 3345 | !(break2_0@570@01) | live]
(push) ; 18
; [then-branch: 3345 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 18
(push) ; 18
; [else-branch: 3345 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(push) ; 19
; [then-branch: 3346 | except2_0@564@01 | live]
; [else-branch: 3346 | !(except2_0@564@01) | live]
(push) ; 20
; [then-branch: 3346 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 20
(push) ; 20
; [else-branch: 3346 | !(except2_0@564@01)]
(assert (not except2_0@564@01))
; [eval] !bypass2_0
(push) ; 21
; [then-branch: 3347 | bypass2_0@543@01 | live]
; [else-branch: 3347 | !(bypass2_0@543@01) | live]
(push) ; 22
; [then-branch: 3347 | bypass2_0@543@01]
(assert bypass2_0@543@01)
(pop) ; 22
(push) ; 22
; [else-branch: 3347 | !(bypass2_0@543@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2_0@543@01) bypass2_0@543@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_0@564@01)
  (and (not except2_0@564@01) (or (not bypass2_0@543@01) bypass2_0@543@01))))
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and
    (not break2_0@570@01)
    (=>
      (not except2_0@564@01)
      (and (not except2_0@564@01) (or (not bypass2_0@543@01) bypass2_0@543@01)))
    (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_4@476@01
  (and
    (=>
      (not break2_0@570@01)
      (and
        (not break2_0@570@01)
        (=>
          (not except2_0@564@01)
          (and
            (not except2_0@564@01)
            (or (not bypass2_0@543@01) bypass2_0@543@01)))
        (or (not except2_0@564@01) except2_0@564@01)))
    (or (not break2_0@570@01) break2_0@570@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and
    p1_4@475@01
    (and
      (not break1_0@569@01)
      (and (not except1_0@562@01) (not bypass1_0@542@01))))
  (and
    p1_4@475@01
    (not break1_0@569@01)
    (not except1_0@562@01)
    (not bypass1_0@542@01))))
; Joined path conditions
(assert (=>
  (not
    (and
      p1_4@475@01
      (and
        (not break1_0@569@01)
        (and (not except1_0@562@01) (not bypass1_0@542@01)))))
  (and
    (not
      (and
        p1_4@475@01
        (and
          (not break1_0@569@01)
          (and (not except1_0@562@01) (not bypass1_0@542@01)))))
    (=>
      p2_4@476@01
      (and
        (=>
          (not break2_0@570@01)
          (and
            (not break2_0@570@01)
            (=>
              (not except2_0@564@01)
              (and
                (not except2_0@564@01)
                (or (not bypass2_0@543@01) bypass2_0@543@01)))
            (or (not except2_0@564@01) except2_0@564@01)))
        (or (not break2_0@570@01) break2_0@570@01))))))
(assert (or
  (not
    (and
      p1_4@475@01
      (and
        (not break1_0@569@01)
        (and (not except1_0@562@01) (not bypass1_0@542@01)))))
  (and
    p1_4@475@01
    (and
      (not break1_0@569@01)
      (and (not except1_0@562@01) (not bypass1_0@542@01))))))
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (or
    (and
      p1_4@475@01
      (and
        (not break1_0@569@01)
        (and (not except1_0@562@01) (not bypass1_0@542@01))))
    (and
      p2_4@476@01
      (and
        (not break2_0@570@01)
        (and (not except2_0@564@01) (not bypass2_0@543@01))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (or
  (and
    p1_4@475@01
    (and
      (not break1_0@569@01)
      (and (not except1_0@562@01) (not bypass1_0@542@01))))
  (and
    p2_4@476@01
    (and
      (not break2_0@570@01)
      (and (not except2_0@564@01) (not bypass2_0@543@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3348 | p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01) || p2_4@476@01 && !(break2_0@570@01) && !(except2_0@564@01) && !(bypass2_0@543@01) | live]
; [else-branch: 3348 | !(p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01) || p2_4@476@01 && !(break2_0@570@01) && !(except2_0@564@01) && !(bypass2_0@543@01)) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3348 | p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01) || p2_4@476@01 && !(break2_0@570@01) && !(except2_0@564@01) && !(bypass2_0@543@01)]
(assert (or
  (and
    p1_4@475@01
    (and
      (not break1_0@569@01)
      (and (not except1_0@562@01) (not bypass1_0@542@01))))
  (and
    p2_4@476@01
    (and
      (not break2_0@570@01)
      (and (not except2_0@564@01) (not bypass2_0@543@01))))))
; [exec]
; var p1_6: Bool
(declare-const p1_6@574@01 Bool)
; [exec]
; var p2_6: Bool
(declare-const p2_6@575@01 Bool)
; [exec]
; var p3_2: Bool
(declare-const p3_2@576@01 Bool)
; [exec]
; var p4_2: Bool
(declare-const p4_2@577@01 Bool)
; [exec]
; var p1_7: Bool
(declare-const p1_7@578@01 Bool)
; [exec]
; var p2_7: Bool
(declare-const p2_7@579@01 Bool)
; [exec]
; var p3_3: Bool
(declare-const p3_3@580@01 Bool)
; [exec]
; var p4_3: Bool
(declare-const p4_3@581@01 Bool)
; [exec]
; var tmp_0: Ref
(declare-const tmp_0@582@01 $Ref)
; [exec]
; var p1_8: Bool
(declare-const p1_8@583@01 Bool)
; [exec]
; var p2_8: Bool
(declare-const p2_8@584@01 Bool)
; [exec]
; var p3_4: Bool
(declare-const p3_4@585@01 Bool)
; [exec]
; var p4_4: Bool
(declare-const p4_4@586@01 Bool)
; [exec]
; p1_5 := p1_4 && (!break1_0 && !except1_0 && true)
; [eval] p1_4 && (!break1_0 && !except1_0 && true)
(push) ; 14
; [then-branch: 3349 | !(p1_4@475@01) | live]
; [else-branch: 3349 | p1_4@475@01 | live]
(push) ; 15
; [then-branch: 3349 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 15
(push) ; 15
; [else-branch: 3349 | p1_4@475@01]
(assert p1_4@475@01)
; [eval] !break1_0
(push) ; 16
; [then-branch: 3350 | break1_0@569@01 | live]
; [else-branch: 3350 | !(break1_0@569@01) | live]
(push) ; 17
; [then-branch: 3350 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 17
(push) ; 17
; [else-branch: 3350 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 18
; [then-branch: 3351 | except1_0@562@01 | live]
; [else-branch: 3351 | !(except1_0@562@01) | live]
(push) ; 19
; [then-branch: 3351 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 19
(push) ; 19
; [else-branch: 3351 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_4@475@01
  (and
    p1_4@475@01
    (=>
      (not break1_0@569@01)
      (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01)))
    (or (not break1_0@569@01) break1_0@569@01))))
(declare-const p1_5@587@01 Bool)
(assert (=
  p1_5@587@01
  (and p1_4@475@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
; [exec]
; p2_5 := p2_4 && (!break2_0 && !except2_0 && true)
; [eval] p2_4 && (!break2_0 && !except2_0 && true)
(push) ; 14
; [then-branch: 3352 | !(p2_4@476@01) | live]
; [else-branch: 3352 | p2_4@476@01 | live]
(push) ; 15
; [then-branch: 3352 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 15
(push) ; 15
; [else-branch: 3352 | p2_4@476@01]
; [eval] !break2_0
(push) ; 16
; [then-branch: 3353 | break2_0@570@01 | live]
; [else-branch: 3353 | !(break2_0@570@01) | live]
(push) ; 17
; [then-branch: 3353 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 17
(push) ; 17
; [else-branch: 3353 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(push) ; 18
; [then-branch: 3354 | except2_0@564@01 | live]
; [else-branch: 3354 | !(except2_0@564@01) | live]
(push) ; 19
; [then-branch: 3354 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 19
(push) ; 19
; [else-branch: 3354 | !(except2_0@564@01)]
(assert (not except2_0@564@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_4@476@01
  (and
    (=>
      (not break2_0@570@01)
      (and (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01)))
    (or (not break2_0@570@01) break2_0@570@01))))
(declare-const p2_5@588@01 Bool)
(assert (=
  p2_5@588@01
  (and p2_4@476@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
; [exec]
; idle1_0 := p1_4 && (!break1_0 && !except1_0 && !true)
; [eval] p1_4 && (!break1_0 && !except1_0 && !true)
(push) ; 14
; [then-branch: 3355 | !(p1_4@475@01) | live]
; [else-branch: 3355 | p1_4@475@01 | live]
(push) ; 15
; [then-branch: 3355 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 15
(push) ; 15
; [else-branch: 3355 | p1_4@475@01]
(assert p1_4@475@01)
; [eval] !break1_0
(push) ; 16
; [then-branch: 3356 | break1_0@569@01 | live]
; [else-branch: 3356 | !(break1_0@569@01) | live]
(push) ; 17
; [then-branch: 3356 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 17
(push) ; 17
; [else-branch: 3356 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 18
; [then-branch: 3357 | except1_0@562@01 | live]
; [else-branch: 3357 | !(except1_0@562@01) | live]
(push) ; 19
; [then-branch: 3357 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 19
(push) ; 19
; [else-branch: 3357 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] !true
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [exec]
; idle2_0 := p2_4 && (!break2_0 && !except2_0 && !true)
; [eval] p2_4 && (!break2_0 && !except2_0 && !true)
(push) ; 14
; [then-branch: 3358 | !(p2_4@476@01) | live]
; [else-branch: 3358 | p2_4@476@01 | live]
(push) ; 15
; [then-branch: 3358 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 15
(push) ; 15
; [else-branch: 3358 | p2_4@476@01]
; [eval] !break2_0
(push) ; 16
; [then-branch: 3359 | break2_0@570@01 | live]
; [else-branch: 3359 | !(break2_0@570@01) | live]
(push) ; 17
; [then-branch: 3359 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 17
(push) ; 17
; [else-branch: 3359 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(push) ; 18
; [then-branch: 3360 | except2_0@564@01 | live]
; [else-branch: 3360 | !(except2_0@564@01) | live]
(push) ; 19
; [then-branch: 3360 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 19
(push) ; 19
; [else-branch: 3360 | !(except2_0@564@01)]
(assert (not except2_0@564@01))
; [eval] !true
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 14
; [then-branch: 3361 | !(p1_5@587@01) | live]
; [else-branch: 3361 | p1_5@587@01 | live]
(push) ; 15
; [then-branch: 3361 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 15
(push) ; 15
; [else-branch: 3361 | p1_5@587@01]
(assert p1_5@587@01)
; [eval] !break1_0
(push) ; 16
; [then-branch: 3362 | break1_0@569@01 | live]
; [else-branch: 3362 | !(break1_0@569@01) | live]
(push) ; 17
; [then-branch: 3362 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 17
(push) ; 17
; [else-branch: 3362 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=> p1_5@587@01 (and p1_5@587@01 (or (not break1_0@569@01) break1_0@569@01))))
(assert (or p1_5@587@01 (not p1_5@587@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (not (and p1_5@587@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and p1_5@587@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3363 | p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
; [else-branch: 3363 | !(p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3363 | p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_5@587@01 (and (not break1_0@569@01) (not except1_0@562@01))))
; [exec]
; _loop_measures_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 15
; [then-branch: 3364 | !(p2_5@588@01) | live]
; [else-branch: 3364 | p2_5@588@01 | live]
(push) ; 16
; [then-branch: 3364 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 16
(push) ; 16
; [else-branch: 3364 | p2_5@588@01]
(assert p2_5@588@01)
; [eval] !break2_0
(push) ; 17
; [then-branch: 3365 | break2_0@570@01 | live]
; [else-branch: 3365 | !(break2_0@570@01) | live]
(push) ; 18
; [then-branch: 3365 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 18
(push) ; 18
; [else-branch: 3365 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=> p2_5@588@01 (and p2_5@588@01 (or (not break2_0@570@01) break2_0@570@01))))
(assert (or p2_5@588@01 (not p2_5@588@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and p2_5@588@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (and p2_5@588@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3366 | p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
; [else-branch: 3366 | !(p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 3366 | p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_5@588@01 (and (not break2_0@570@01) (not except2_0@564@01))))
; [exec]
; _loop_measures_0_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; p1_6 := p1_5 && (!break1_0 && !except1_0 && bool___unbox__(b_5))
; [eval] p1_5 && (!break1_0 && !except1_0 && bool___unbox__(b_5))
(push) ; 16
; [then-branch: 3367 | !(p1_5@587@01) | live]
; [else-branch: 3367 | p1_5@587@01 | live]
(push) ; 17
; [then-branch: 3367 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 17
(push) ; 17
; [else-branch: 3367 | p1_5@587@01]
; [eval] !break1_0
(push) ; 18
; [then-branch: 3368 | break1_0@569@01 | live]
; [else-branch: 3368 | !(break1_0@569@01) | live]
(push) ; 19
; [then-branch: 3368 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 19
(push) ; 19
; [else-branch: 3368 | !(break1_0@569@01)]
; [eval] !except1_0
(push) ; 20
; [then-branch: 3369 | except1_0@562@01 | live]
; [else-branch: 3369 | !(except1_0@562@01) | live]
(push) ; 21
; [then-branch: 3369 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 21
(push) ; 21
; [else-branch: 3369 | !(except1_0@562@01)]
; [eval] bool___unbox__(b_5)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0@485@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@485@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_0@562@01)
  (and
    (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_0@485@01))))
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and
    (=>
      (not except1_0@562@01)
      (and
        (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_0@485@01)))
    (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_5@587@01
  (and
    (=>
      (not break1_0@569@01)
      (and
        (=>
          (not except1_0@562@01)
          (and
            (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
            (bool___unbox__%precondition $Snap.unit b_0@485@01)))
        (or (not except1_0@562@01) except1_0@562@01)))
    (or (not break1_0@569@01) break1_0@569@01))))
(declare-const p1_6@589@01 Bool)
(assert (=
  p1_6@589@01
  (and
    p1_5@587@01
    (and
      (not break1_0@569@01)
      (and (not except1_0@562@01) (bool___unbox__ $Snap.unit b_0@485@01))))))
; [exec]
; p2_6 := p2_5 && (!break2_0 && !except2_0 && bool___unbox__(b_5_0))
; [eval] p2_5 && (!break2_0 && !except2_0 && bool___unbox__(b_5_0))
(push) ; 16
; [then-branch: 3370 | !(p2_5@588@01) | live]
; [else-branch: 3370 | p2_5@588@01 | live]
(push) ; 17
; [then-branch: 3370 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 17
(push) ; 17
; [else-branch: 3370 | p2_5@588@01]
; [eval] !break2_0
(push) ; 18
; [then-branch: 3371 | break2_0@570@01 | live]
; [else-branch: 3371 | !(break2_0@570@01) | live]
(push) ; 19
; [then-branch: 3371 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 19
(push) ; 19
; [else-branch: 3371 | !(break2_0@570@01)]
; [eval] !except2_0
(push) ; 20
; [then-branch: 3372 | except2_0@564@01 | live]
; [else-branch: 3372 | !(except2_0@564@01) | live]
(push) ; 21
; [then-branch: 3372 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 21
(push) ; 21
; [else-branch: 3372 | !(except2_0@564@01)]
; [eval] bool___unbox__(b_5_0)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0_0@486@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0_0@486@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_0@564@01)
  (and
    (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_0_0@486@01))))
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and
    (=>
      (not except2_0@564@01)
      (and
        (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_0_0@486@01)))
    (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_5@588@01
  (and
    (=>
      (not break2_0@570@01)
      (and
        (=>
          (not except2_0@564@01)
          (and
            (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
            (bool___unbox__%precondition $Snap.unit b_0_0@486@01)))
        (or (not except2_0@564@01) except2_0@564@01)))
    (or (not break2_0@570@01) break2_0@570@01))))
(declare-const p2_6@590@01 Bool)
(assert (=
  p2_6@590@01
  (and
    p2_5@588@01
    (and
      (not break2_0@570@01)
      (and (not except2_0@564@01) (bool___unbox__ $Snap.unit b_0_0@486@01))))))
; [exec]
; p3_2 := p1_5 && (!break1_0 && !except1_0 && !bool___unbox__(b_5))
; [eval] p1_5 && (!break1_0 && !except1_0 && !bool___unbox__(b_5))
(push) ; 16
; [then-branch: 3373 | !(p1_5@587@01) | live]
; [else-branch: 3373 | p1_5@587@01 | live]
(push) ; 17
; [then-branch: 3373 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 17
(push) ; 17
; [else-branch: 3373 | p1_5@587@01]
; [eval] !break1_0
(push) ; 18
; [then-branch: 3374 | break1_0@569@01 | live]
; [else-branch: 3374 | !(break1_0@569@01) | live]
(push) ; 19
; [then-branch: 3374 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 19
(push) ; 19
; [else-branch: 3374 | !(break1_0@569@01)]
; [eval] !except1_0
(push) ; 20
; [then-branch: 3375 | except1_0@562@01 | live]
; [else-branch: 3375 | !(except1_0@562@01) | live]
(push) ; 21
; [then-branch: 3375 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 21
(push) ; 21
; [else-branch: 3375 | !(except1_0@562@01)]
; [eval] !bool___unbox__(b_5)
; [eval] bool___unbox__(b_5)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0@485@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@485@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_0@562@01)
  (and
    (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_0@485@01))))
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and
    (=>
      (not except1_0@562@01)
      (and
        (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_0@485@01)))
    (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3_2@591@01 Bool)
(assert (=
  p3_2@591@01
  (and
    p1_5@587@01
    (and
      (not break1_0@569@01)
      (and (not except1_0@562@01) (not (bool___unbox__ $Snap.unit b_0@485@01)))))))
; [exec]
; p4_2 := p2_5 && (!break2_0 && !except2_0 && !bool___unbox__(b_5_0))
; [eval] p2_5 && (!break2_0 && !except2_0 && !bool___unbox__(b_5_0))
(push) ; 16
; [then-branch: 3376 | !(p2_5@588@01) | live]
; [else-branch: 3376 | p2_5@588@01 | live]
(push) ; 17
; [then-branch: 3376 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 17
(push) ; 17
; [else-branch: 3376 | p2_5@588@01]
; [eval] !break2_0
(push) ; 18
; [then-branch: 3377 | break2_0@570@01 | live]
; [else-branch: 3377 | !(break2_0@570@01) | live]
(push) ; 19
; [then-branch: 3377 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 19
(push) ; 19
; [else-branch: 3377 | !(break2_0@570@01)]
; [eval] !except2_0
(push) ; 20
; [then-branch: 3378 | except2_0@564@01 | live]
; [else-branch: 3378 | !(except2_0@564@01) | live]
(push) ; 21
; [then-branch: 3378 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 21
(push) ; 21
; [else-branch: 3378 | !(except2_0@564@01)]
; [eval] !bool___unbox__(b_5_0)
; [eval] bool___unbox__(b_5_0)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0_0@486@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0_0@486@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_0@564@01)
  (and
    (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_0_0@486@01))))
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and
    (=>
      (not except2_0@564@01)
      (and
        (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_0_0@486@01)))
    (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4_2@592@01 Bool)
(assert (=
  p4_2@592@01
  (and
    p2_5@588@01
    (and
      (not break2_0@570@01)
      (and (not except2_0@564@01) (not (bool___unbox__ $Snap.unit b_0_0@486@01)))))))
; [exec]
; p1_7 := p1_6 &&
;   (!break1_0 && !except1_0 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p1_6 && (!break1_0 && !except1_0 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 3379 | !(p1_6@589@01) | live]
; [else-branch: 3379 | p1_6@589@01 | live]
(push) ; 17
; [then-branch: 3379 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 17
(push) ; 17
; [else-branch: 3379 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 18
; [then-branch: 3380 | break1_0@569@01 | live]
; [else-branch: 3380 | !(break1_0@569@01) | live]
(push) ; 19
; [then-branch: 3380 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 19
(push) ; 19
; [else-branch: 3380 | !(break1_0@569@01)]
; [eval] !except1_0
(push) ; 20
; [then-branch: 3381 | except1_0@562@01 | live]
; [else-branch: 3381 | !(except1_0@562@01) | live]
(push) ; 21
; [then-branch: 3381 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 21
(push) ; 21
; [else-branch: 3381 | !(except1_0@562@01)]
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01)))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_6@589@01
  (and
    p1_6@589@01
    (=> (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01))
    (or (not break1_0@569@01) break1_0@569@01))))
(assert (or p1_6@589@01 (not p1_6@589@01)))
; [exec]
; p2_7 := p2_6 &&
;   (!break2_0 && !except2_0 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_6 && (!break2_0 && !except2_0 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 3382 | !(p2_6@590@01) | live]
; [else-branch: 3382 | p2_6@590@01 | live]
(push) ; 17
; [then-branch: 3382 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 17
(push) ; 17
; [else-branch: 3382 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 18
; [then-branch: 3383 | break2_0@570@01 | live]
; [else-branch: 3383 | !(break2_0@570@01) | live]
(push) ; 19
; [then-branch: 3383 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 19
(push) ; 19
; [else-branch: 3383 | !(break2_0@570@01)]
; [eval] !except2_0
(push) ; 20
; [then-branch: 3384 | except2_0@564@01 | live]
; [else-branch: 3384 | !(except2_0@564@01) | live]
(push) ; 21
; [then-branch: 3384 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 21
(push) ; 21
; [else-branch: 3384 | !(except2_0@564@01)]
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01)))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_6@590@01
  (and
    p2_6@590@01
    (=> (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01))
    (or (not break2_0@570@01) break2_0@570@01))))
(assert (or p2_6@590@01 (not p2_6@590@01)))
; [exec]
; p3_3 := p1_6 &&
;   (!break1_0 && !except1_0 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p1_6 && (!break1_0 && !except1_0 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 3385 | !(p1_6@589@01) | live]
; [else-branch: 3385 | p1_6@589@01 | live]
(push) ; 17
; [then-branch: 3385 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 17
(push) ; 17
; [else-branch: 3385 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 18
; [then-branch: 3386 | break1_0@569@01 | live]
; [else-branch: 3386 | !(break1_0@569@01) | live]
(push) ; 19
; [then-branch: 3386 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 19
(push) ; 19
; [else-branch: 3386 | !(break1_0@569@01)]
; [eval] !except1_0
(push) ; 20
; [then-branch: 3387 | except1_0@562@01 | live]
; [else-branch: 3387 | !(except1_0@562@01) | live]
(push) ; 21
; [then-branch: 3387 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 21
(push) ; 21
; [else-branch: 3387 | !(except1_0@562@01)]
; [eval] !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01)))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3_3@593@01 Bool)
(assert (=
  p3_3@593@01
  (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
; [exec]
; p4_3 := p2_6 &&
;   (!break2_0 && !except2_0 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_6 && (!break2_0 && !except2_0 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 3388 | !(p2_6@590@01) | live]
; [else-branch: 3388 | p2_6@590@01 | live]
(push) ; 17
; [then-branch: 3388 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 17
(push) ; 17
; [else-branch: 3388 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 18
; [then-branch: 3389 | break2_0@570@01 | live]
; [else-branch: 3389 | !(break2_0@570@01) | live]
(push) ; 19
; [then-branch: 3389 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 19
(push) ; 19
; [else-branch: 3389 | !(break2_0@570@01)]
; [eval] !except2_0
(push) ; 20
; [then-branch: 3390 | except2_0@564@01 | live]
; [else-branch: 3390 | !(except2_0@564@01) | live]
(push) ; 21
; [then-branch: 3390 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 21
(push) ; 21
; [else-branch: 3390 | !(except2_0@564@01)]
; [eval] !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01)))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4_3@594@01 Bool)
(assert (=
  p4_3@594@01
  (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
; [eval] p1_7 && (!break1_0 && !except1_0)
; [then-branch: 3391 | False | dead]
; [else-branch: 3391 | True | live]
(push) ; 16
; [else-branch: 3391 | True]
(pop) ; 16
; [eval] !(p1_7 && (!break1_0 && !except1_0))
; [eval] p1_7 && (!break1_0 && !except1_0)
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3392 | True | live]
; [else-branch: 3392 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3392 | True]
; [eval] p2_7 && (!break2_0 && !except2_0)
; [then-branch: 3393 | False | dead]
; [else-branch: 3393 | True | live]
(push) ; 17
; [else-branch: 3393 | True]
(pop) ; 17
; [eval] !(p2_7 && (!break2_0 && !except2_0))
; [eval] p2_7 && (!break2_0 && !except2_0)
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3394 | True | live]
; [else-branch: 3394 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 3394 | True]
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 18
; [then-branch: 3395 | !(p1_6@589@01) | live]
; [else-branch: 3395 | p1_6@589@01 | live]
(push) ; 19
; [then-branch: 3395 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 19
(push) ; 19
; [else-branch: 3395 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 20
; [then-branch: 3396 | break1_0@569@01 | live]
; [else-branch: 3396 | !(break1_0@569@01) | live]
(push) ; 21
; [then-branch: 3396 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 21
(push) ; 21
; [else-branch: 3396 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> p1_6@589@01 (and p1_6@589@01 (or (not break1_0@569@01) break1_0@569@01))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3397 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
; [else-branch: 3397 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 3397 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))
; [exec]
; c_5.Container_value := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 19
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 19
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(declare-const Container_value@595@01 $Ref)
(assert (= Container_value@595@01 (__prim__int___box__ $Snap.unit 7)))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 19
; [then-branch: 3398 | !(p2_6@590@01) | live]
; [else-branch: 3398 | p2_6@590@01 | live]
(push) ; 20
; [then-branch: 3398 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 20
(push) ; 20
; [else-branch: 3398 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 21
; [then-branch: 3399 | break2_0@570@01 | live]
; [else-branch: 3399 | !(break2_0@570@01) | live]
(push) ; 22
; [then-branch: 3399 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 22
(push) ; 22
; [else-branch: 3399 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=> p2_6@590@01 (and p2_6@590@01 (or (not break2_0@570@01) break2_0@570@01))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3400 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
; [else-branch: 3400 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 3400 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))
; [exec]
; c_5_0.Container_valuep := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 20
(pop) ; 20
; Joined path conditions
(declare-const Container_valuep@596@01 $Ref)
(assert (= Container_valuep@596@01 (__prim__int___box__ $Snap.unit 7)))
; [exec]
; tmp_0 := new()
(declare-const tmp_0@597@01 $Ref)
(assert (not (= tmp_0@597@01 $Ref.null)))
(assert (not (= tmp_0@597@01 _cthread_158_0@478@01)))
(assert (not (= tmp_0@597@01 tmp2_8@526@01)))
(assert (not (= tmp_0@597@01 tmp_0@582@01)))
(assert (not (= tmp_0@597@01 Exception_res_0_0@560@01)))
(assert (not (= tmp_0@597@01 c_0@483@01)))
(assert (not (= tmp_0@597@01 _err@561@01)))
(assert (not (= tmp_0@597@01 b_0@485@01)))
(assert (not (= tmp_0@597@01 b_0_0@486@01)))
(assert (not (= tmp_0@597@01 tmp1_8@525@01)))
(assert (not (= tmp_0@597@01 Container_valuep@596@01)))
(assert (not (= tmp_0@597@01 _cthread_158@477@01)))
(assert (not (= tmp_0@597@01 c_0_0@484@01)))
(assert (not (= tmp_0@597@01 tmp1_6@521@01)))
(assert (not (= tmp_0@597@01 tmp2_6@522@01)))
(assert (not (= tmp_0@597@01 _err_1@563@01)))
(assert (not (= tmp_0@597@01 Exception_res_0@559@01)))
(assert (not (= tmp_0@597@01 Container_value@595@01)))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 20
; [then-branch: 3401 | !(p1_6@589@01) | live]
; [else-branch: 3401 | p1_6@589@01 | live]
(push) ; 21
; [then-branch: 3401 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 21
(push) ; 21
; [else-branch: 3401 | p1_6@589@01]
; [eval] !break1_0
(push) ; 22
; [then-branch: 3402 | break1_0@569@01 | live]
; [else-branch: 3402 | !(break1_0@569@01) | live]
(push) ; 23
; [then-branch: 3402 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 23
(push) ; 23
; [else-branch: 3402 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=> p1_6@589@01 (or (not break1_0@569@01) break1_0@569@01)))
(push) ; 20
(set-option :timeout 10)
(assert (not (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3403 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
; [else-branch: 3403 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 3403 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))
; [exec]
; Exception_res_0 := tmp_0
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 21
; [then-branch: 3404 | !(p2_6@590@01) | live]
; [else-branch: 3404 | p2_6@590@01 | live]
(push) ; 22
; [then-branch: 3404 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3404 | p2_6@590@01]
; [eval] !break2_0
(push) ; 23
; [then-branch: 3405 | break2_0@570@01 | live]
; [else-branch: 3405 | !(break2_0@570@01) | live]
(push) ; 24
; [then-branch: 3405 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 24
(push) ; 24
; [else-branch: 3405 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (=> p2_6@590@01 (or (not break2_0@570@01) break2_0@570@01)))
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3406 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
; [else-branch: 3406 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 3406 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))
; [exec]
; Exception_res_0_0 := tmp_0
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 22
; [then-branch: 3407 | !(p1_6@589@01) | live]
; [else-branch: 3407 | p1_6@589@01 | live]
(push) ; 23
; [then-branch: 3407 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 23
(push) ; 23
; [else-branch: 3407 | p1_6@589@01]
; [eval] !break1_0
(push) ; 24
; [then-branch: 3408 | break1_0@569@01 | live]
; [else-branch: 3408 | !(break1_0@569@01) | live]
(push) ; 25
; [then-branch: 3408 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 25
(push) ; 25
; [else-branch: 3408 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3409 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
; [else-branch: 3409 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3409 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))
; [exec]
; inhale typeof(Exception_res_0) == Exception()
(declare-const $t@598@01 $Snap)
(assert (= $t@598@01 $Snap.unit))
; [eval] typeof(Exception_res_0) == Exception()
; [eval] typeof(Exception_res_0)
; [eval] Exception()
(assert (= (typeof<PyType> tmp_0@597@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_6 && (!break2_0 && !except2_0)
(set-option :timeout 0)
(push) ; 23
; [then-branch: 3410 | !(p2_6@590@01) | live]
; [else-branch: 3410 | p2_6@590@01 | live]
(push) ; 24
; [then-branch: 3410 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 24
(push) ; 24
; [else-branch: 3410 | p2_6@590@01]
; [eval] !break2_0
(push) ; 25
; [then-branch: 3411 | break2_0@570@01 | live]
; [else-branch: 3411 | !(break2_0@570@01) | live]
(push) ; 26
; [then-branch: 3411 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 26
(push) ; 26
; [else-branch: 3411 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3412 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
; [else-branch: 3412 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 3412 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))
; [exec]
; inhale typeof(Exception_res_0_0) == Exception()
(declare-const $t@599@01 $Snap)
(assert (= $t@599@01 $Snap.unit))
; [eval] typeof(Exception_res_0_0) == Exception()
; [eval] typeof(Exception_res_0_0)
; [eval] Exception()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_6 && (!break1_0 && !except1_0)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 3413 | !(p1_6@589@01) | live]
; [else-branch: 3413 | p1_6@589@01 | live]
(push) ; 25
; [then-branch: 3413 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 25
(push) ; 25
; [else-branch: 3413 | p1_6@589@01]
; [eval] !break1_0
(push) ; 26
; [then-branch: 3414 | break1_0@569@01 | live]
; [else-branch: 3414 | !(break1_0@569@01) | live]
(push) ; 27
; [then-branch: 3414 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 27
(push) ; 27
; [else-branch: 3414 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3415 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
; [else-branch: 3415 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 3415 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))
; [exec]
; _err := Exception_res_0
; [exec]
; except1_0 := true
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 25
; [then-branch: 3416 | !(p2_6@590@01) | live]
; [else-branch: 3416 | p2_6@590@01 | live]
(push) ; 26
; [then-branch: 3416 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3416 | p2_6@590@01]
; [eval] !break2_0
(push) ; 27
; [then-branch: 3417 | break2_0@570@01 | live]
; [else-branch: 3417 | !(break2_0@570@01) | live]
(push) ; 28
; [then-branch: 3417 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 28
(push) ; 28
; [else-branch: 3417 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3418 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
; [else-branch: 3418 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 3418 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))
; [exec]
; _err_1 := Exception_res_0_0
; [exec]
; except2_0 := true
; [exec]
; p1_8 := p3_2 &&
;   (!break1_0 && !except1_0 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p3_2 && (!break1_0 && !except1_0 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 3419 | !(p3_2@591@01) | live]
; [else-branch: 3419 | p3_2@591@01 | live]
(push) ; 27
; [then-branch: 3419 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 27
(push) ; 27
; [else-branch: 3419 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 28
; [then-branch: 3420 | break1_0@569@01 | live]
; [else-branch: 3420 | !(break1_0@569@01) | live]
(push) ; 29
; [then-branch: 3420 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 29
(push) ; 29
; [else-branch: 3420 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=> p3_2@591@01 (and p3_2@591@01 (or (not break1_0@569@01) break1_0@569@01))))
(assert (or p3_2@591@01 (not p3_2@591@01)))
; [exec]
; p2_8 := p4_2 &&
;   (!break2_0 && !except2_0 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_2 && (!break2_0 && !except2_0 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 3421 | !(p4_2@592@01) | live]
; [else-branch: 3421 | p4_2@592@01 | live]
(push) ; 27
; [then-branch: 3421 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 27
(push) ; 27
; [else-branch: 3421 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 28
; [then-branch: 3422 | break2_0@570@01 | live]
; [else-branch: 3422 | !(break2_0@570@01) | live]
(push) ; 29
; [then-branch: 3422 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 29
(push) ; 29
; [else-branch: 3422 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=> p4_2@592@01 (and p4_2@592@01 (or (not break2_0@570@01) break2_0@570@01))))
(assert (or p4_2@592@01 (not p4_2@592@01)))
; [exec]
; p3_4 := p3_2 &&
;   (!break1_0 && !except1_0 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p3_2 && (!break1_0 && !except1_0 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 3423 | !(p3_2@591@01) | live]
; [else-branch: 3423 | p3_2@591@01 | live]
(push) ; 27
; [then-branch: 3423 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 27
(push) ; 27
; [else-branch: 3423 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 28
; [then-branch: 3424 | break1_0@569@01 | live]
; [else-branch: 3424 | !(break1_0@569@01) | live]
(push) ; 29
; [then-branch: 3424 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 29
(push) ; 29
; [else-branch: 3424 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [exec]
; p4_4 := p4_2 &&
;   (!break2_0 && !except2_0 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_2 && (!break2_0 && !except2_0 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 3425 | !(p4_2@592@01) | live]
; [else-branch: 3425 | p4_2@592@01 | live]
(push) ; 27
; [then-branch: 3425 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 27
(push) ; 27
; [else-branch: 3425 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 28
; [then-branch: 3426 | break2_0@570@01 | live]
; [else-branch: 3426 | !(break2_0@570@01) | live]
(push) ; 29
; [then-branch: 3426 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 29
(push) ; 29
; [else-branch: 3426 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [eval] p1_8 && (!break1_0 && !except1_0)
; [then-branch: 3427 | False | dead]
; [else-branch: 3427 | True | live]
(push) ; 26
; [else-branch: 3427 | True]
(pop) ; 26
; [eval] !(p1_8 && (!break1_0 && !except1_0))
; [eval] p1_8 && (!break1_0 && !except1_0)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3428 | True | live]
; [else-branch: 3428 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 3428 | True]
; [eval] p2_8 && (!break2_0 && !except2_0)
; [then-branch: 3429 | False | dead]
; [else-branch: 3429 | True | live]
(push) ; 27
; [else-branch: 3429 | True]
(pop) ; 27
; [eval] !(p2_8 && (!break2_0 && !except2_0))
; [eval] p2_8 && (!break2_0 && !except2_0)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3430 | True | live]
; [else-branch: 3430 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 3430 | True]
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 28
; [then-branch: 3431 | !(p3_2@591@01) | live]
; [else-branch: 3431 | p3_2@591@01 | live]
(push) ; 29
; [then-branch: 3431 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 29
(push) ; 29
; [else-branch: 3431 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 30
; [then-branch: 3432 | break1_0@569@01 | live]
; [else-branch: 3432 | !(break1_0@569@01) | live]
(push) ; 31
; [then-branch: 3432 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 31
(push) ; 31
; [else-branch: 3432 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 3433 | False | dead]
; [else-branch: 3433 | True | live]
(push) ; 28
; [else-branch: 3433 | True]
(pop) ; 28
; [eval] !(p3_2 && (!break1_0 && !except1_0))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 28
; [then-branch: 3434 | !(p3_2@591@01) | live]
; [else-branch: 3434 | p3_2@591@01 | live]
(push) ; 29
; [then-branch: 3434 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 29
(push) ; 29
; [else-branch: 3434 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 30
; [then-branch: 3435 | break1_0@569@01 | live]
; [else-branch: 3435 | !(break1_0@569@01) | live]
(push) ; 31
; [then-branch: 3435 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 31
(push) ; 31
; [else-branch: 3435 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3436 | True | live]
; [else-branch: 3436 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 3436 | True]
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 29
; [then-branch: 3437 | !(p4_2@592@01) | live]
; [else-branch: 3437 | p4_2@592@01 | live]
(push) ; 30
; [then-branch: 3437 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 30
(push) ; 30
; [else-branch: 3437 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 31
; [then-branch: 3438 | break2_0@570@01 | live]
; [else-branch: 3438 | !(break2_0@570@01) | live]
(push) ; 32
; [then-branch: 3438 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 32
(push) ; 32
; [else-branch: 3438 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 3439 | False | dead]
; [else-branch: 3439 | True | live]
(push) ; 29
; [else-branch: 3439 | True]
(pop) ; 29
; [eval] !(p4_2 && (!break2_0 && !except2_0))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 29
; [then-branch: 3440 | !(p4_2@592@01) | live]
; [else-branch: 3440 | p4_2@592@01 | live]
(push) ; 30
; [then-branch: 3440 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 30
(push) ; 30
; [else-branch: 3440 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 31
; [then-branch: 3441 | break2_0@570@01 | live]
; [else-branch: 3441 | !(break2_0@570@01) | live]
(push) ; 32
; [then-branch: 3441 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 32
(push) ; 32
; [else-branch: 3441 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3442 | True | live]
; [else-branch: 3442 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 3442 | True]
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 30
; [then-branch: 3443 | !(p3_2@591@01) | live]
; [else-branch: 3443 | p3_2@591@01 | live]
(push) ; 31
; [then-branch: 3443 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 31
(push) ; 31
; [else-branch: 3443 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 32
; [then-branch: 3444 | break1_0@569@01 | live]
; [else-branch: 3444 | !(break1_0@569@01) | live]
(push) ; 33
; [then-branch: 3444 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 33
(push) ; 33
; [else-branch: 3444 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 3445 | False | dead]
; [else-branch: 3445 | True | live]
(push) ; 30
; [else-branch: 3445 | True]
(pop) ; 30
; [eval] !(p3_2 && (!break1_0 && !except1_0))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 30
; [then-branch: 3446 | !(p3_2@591@01) | live]
; [else-branch: 3446 | p3_2@591@01 | live]
(push) ; 31
; [then-branch: 3446 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 31
(push) ; 31
; [else-branch: 3446 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 32
; [then-branch: 3447 | break1_0@569@01 | live]
; [else-branch: 3447 | !(break1_0@569@01) | live]
(push) ; 33
; [then-branch: 3447 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 33
(push) ; 33
; [else-branch: 3447 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3448 | True | live]
; [else-branch: 3448 | False | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 3448 | True]
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 31
; [then-branch: 3449 | !(p4_2@592@01) | live]
; [else-branch: 3449 | p4_2@592@01 | live]
(push) ; 32
; [then-branch: 3449 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 32
(push) ; 32
; [else-branch: 3449 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 33
; [then-branch: 3450 | break2_0@570@01 | live]
; [else-branch: 3450 | !(break2_0@570@01) | live]
(push) ; 34
; [then-branch: 3450 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 34
(push) ; 34
; [else-branch: 3450 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 3451 | False | dead]
; [else-branch: 3451 | True | live]
(push) ; 31
; [else-branch: 3451 | True]
(pop) ; 31
; [eval] !(p4_2 && (!break2_0 && !except2_0))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 31
; [then-branch: 3452 | !(p4_2@592@01) | live]
; [else-branch: 3452 | p4_2@592@01 | live]
(push) ; 32
; [then-branch: 3452 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 32
(push) ; 32
; [else-branch: 3452 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 33
; [then-branch: 3453 | break2_0@570@01 | live]
; [else-branch: 3453 | !(break2_0@570@01) | live]
(push) ; 34
; [then-branch: 3453 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 34
(push) ; 34
; [else-branch: 3453 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3454 | True | live]
; [else-branch: 3454 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 3454 | True]
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 32
; [then-branch: 3455 | !(p1_5@587@01) | live]
; [else-branch: 3455 | p1_5@587@01 | live]
(push) ; 33
; [then-branch: 3455 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 33
(push) ; 33
; [else-branch: 3455 | p1_5@587@01]
; [eval] !break1_0
(push) ; 34
; [then-branch: 3456 | break1_0@569@01 | live]
; [else-branch: 3456 | !(break1_0@569@01) | live]
(push) ; 35
; [then-branch: 3456 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 35
(push) ; 35
; [else-branch: 3456 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (=> p1_5@587@01 (or (not break1_0@569@01) break1_0@569@01)))
; [then-branch: 3457 | False | dead]
; [else-branch: 3457 | True | live]
(push) ; 32
; [else-branch: 3457 | True]
(pop) ; 32
; [eval] !(p1_5 && (!break1_0 && !except1_0))
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 32
; [then-branch: 3458 | !(p1_5@587@01) | live]
; [else-branch: 3458 | p1_5@587@01 | live]
(push) ; 33
; [then-branch: 3458 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 33
(push) ; 33
; [else-branch: 3458 | p1_5@587@01]
; [eval] !break1_0
(push) ; 34
; [then-branch: 3459 | break1_0@569@01 | live]
; [else-branch: 3459 | !(break1_0@569@01) | live]
(push) ; 35
; [then-branch: 3459 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 35
(push) ; 35
; [else-branch: 3459 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3460 | True | live]
; [else-branch: 3460 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 3460 | True]
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 33
; [then-branch: 3461 | !(p2_5@588@01) | live]
; [else-branch: 3461 | p2_5@588@01 | live]
(push) ; 34
; [then-branch: 3461 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 34
(push) ; 34
; [else-branch: 3461 | p2_5@588@01]
; [eval] !break2_0
(push) ; 35
; [then-branch: 3462 | break2_0@570@01 | live]
; [else-branch: 3462 | !(break2_0@570@01) | live]
(push) ; 36
; [then-branch: 3462 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 36
(push) ; 36
; [else-branch: 3462 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (=> p2_5@588@01 (or (not break2_0@570@01) break2_0@570@01)))
; [then-branch: 3463 | False | dead]
; [else-branch: 3463 | True | live]
(push) ; 33
; [else-branch: 3463 | True]
(pop) ; 33
; [eval] !(p2_5 && (!break2_0 && !except2_0))
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 33
; [then-branch: 3464 | !(p2_5@588@01) | live]
; [else-branch: 3464 | p2_5@588@01 | live]
(push) ; 34
; [then-branch: 3464 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 34
(push) ; 34
; [else-branch: 3464 | p2_5@588@01]
; [eval] !break2_0
(push) ; 35
; [then-branch: 3465 | break2_0@570@01 | live]
; [else-branch: 3465 | !(break2_0@570@01) | live]
(push) ; 36
; [then-branch: 3465 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 36
(push) ; 36
; [else-branch: 3465 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3466 | True | live]
; [else-branch: 3466 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 3466 | True]
; [exec]
; assert (p1_5 && (!break1_0 && !except1_0) ==>
;   _loop_termination_flag_0 ==> !true) &&
;   (p2_5 && (!break2_0 && !except2_0) ==>
;   _loop_termination_flag_0_0 ==> !true)
; [eval] p1_5 && (!break1_0 && !except1_0) ==> _loop_termination_flag_0 ==> !true
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 34
; [then-branch: 3467 | !(p1_5@587@01) | live]
; [else-branch: 3467 | p1_5@587@01 | live]
(push) ; 35
; [then-branch: 3467 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 35
(push) ; 35
; [else-branch: 3467 | p1_5@587@01]
; [eval] !break1_0
(push) ; 36
; [then-branch: 3468 | break1_0@569@01 | live]
; [else-branch: 3468 | !(break1_0@569@01) | live]
(push) ; 37
; [then-branch: 3468 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 37
(push) ; 37
; [else-branch: 3468 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 3469 | False | dead]
; [else-branch: 3469 | True | live]
(push) ; 35
; [else-branch: 3469 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_5 && (!break2_0 && !except2_0) ==> _loop_termination_flag_0_0 ==> !true
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 34
; [then-branch: 3470 | !(p2_5@588@01) | live]
; [else-branch: 3470 | p2_5@588@01 | live]
(push) ; 35
; [then-branch: 3470 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 35
(push) ; 35
; [else-branch: 3470 | p2_5@588@01]
; [eval] !break2_0
(push) ; 36
; [then-branch: 3471 | break2_0@570@01 | live]
; [else-branch: 3471 | !(break2_0@570@01) | live]
(push) ; 37
; [then-branch: 3471 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 37
(push) ; 37
; [else-branch: 3471 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 3472 | False | dead]
; [else-branch: 3472 | True | live]
(push) ; 35
; [else-branch: 3472 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_4 && !bypass1_0 ==> true
; [eval] p1_4 && !bypass1_0
(push) ; 34
; [then-branch: 3473 | !(p1_4@475@01) | live]
; [else-branch: 3473 | p1_4@475@01 | live]
(push) ; 35
; [then-branch: 3473 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 35
(push) ; 35
; [else-branch: 3473 | p1_4@475@01]
(assert p1_4@475@01)
; [eval] !bypass1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3474 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3474 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 3474 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> true
; [eval] p2_4 && !bypass2_0
(push) ; 34
; [then-branch: 3475 | !(p2_4@476@01) | live]
; [else-branch: 3475 | p2_4@476@01 | live]
(push) ; 35
; [then-branch: 3475 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 35
(push) ; 35
; [else-branch: 3475 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3476 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3476 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 3476 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0
(push) ; 34
; [then-branch: 3477 | !(p1_4@475@01) | live]
; [else-branch: 3477 | p1_4@475@01 | live]
(push) ; 35
; [then-branch: 3477 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 35
(push) ; 35
; [else-branch: 3477 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3478 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3478 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 3478 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0
(push) ; 35
; [then-branch: 3479 | !(p2_4@476@01) | live]
; [else-branch: 3479 | p2_4@476@01 | live]
(push) ; 36
; [then-branch: 3479 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 36
(push) ; 36
; [else-branch: 3479 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3480 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3480 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 3480 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0 ==> issubtype(typeof(c_5.Container_value), int())
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 3481 | !(p1_4@475@01) | live]
; [else-branch: 3481 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 3481 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3481 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3482 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3482 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3482 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] issubtype(typeof(c_5.Container_value), int())
; [eval] typeof(c_5.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(push) ; 36
(assert (not (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (issubtype<Bool> (typeof<PyType> Container_value@595@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (issubtype<Bool> (typeof<PyType> Container_value@595@01) (as int<PyType>  PyType))))
; [eval] p2_4 && !bypass2_0 ==> issubtype(typeof(c_5_0.Container_valuep), int())
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 3483 | !(p2_4@476@01) | live]
; [else-branch: 3483 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 3483 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3483 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3484 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3484 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3484 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] issubtype(typeof(c_5_0.Container_valuep), int())
; [eval] typeof(c_5_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(push) ; 36
(assert (not (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@596@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@596@01) (as int<PyType>  PyType))))
; [eval] p1_4 && !bypass1_0 ==> !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 3485 | !(p1_4@475@01) | live]
; [else-branch: 3485 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 3485 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3485 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3486 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3486 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3486 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] !idle1_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3487 | True | live]
; [else-branch: 3487 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 3487 | True]
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0@571@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0@571@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3488 | _loop_check_before_0@571@01 | live]
; [else-branch: 3488 | !(_loop_check_before_0@571@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 3488 | _loop_check_before_0@571@01]
(assert _loop_check_before_0@571@01)
; [eval] _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 3489 | False | live]
; [else-branch: 3489 | True | live]
(push) ; 43
; [then-branch: 3489 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 3489 | True]
; [eval] perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_158)) == none
; [eval] perm(MustTerminate(_cthread_158))
(push) ; 44
; [then-branch: 3490 | False | live]
; [else-branch: 3490 | True | live]
(push) ; 45
; [then-branch: 3490 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 3490 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 46
; [then-branch: 3491 | False | live]
; [else-branch: 3491 | True | live]
(push) ; 47
; [then-branch: 3491 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 3491 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 48
; [then-branch: 3492 | False | live]
; [else-branch: 3492 | True | live]
(push) ; 49
; [then-branch: 3492 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 3492 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 3493 | False | live]
; [else-branch: 3493 | True | live]
(push) ; 51
; [then-branch: 3493 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 3493 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 3488 | !(_loop_check_before_0@571@01)]
(assert (not _loop_check_before_0@571@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (and
    p1_4@475@01
    (not bypass1_0@542@01)
    (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))))
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 3494 | !(p2_4@476@01) | live]
; [else-branch: 3494 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 3494 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3494 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3495 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3495 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3495 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3496 | True | live]
; [else-branch: 3496 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 3496 | True]
; [eval] _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0_0@572@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0_0@572@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3497 | _loop_check_before_0_0@572@01 | live]
; [else-branch: 3497 | !(_loop_check_before_0_0@572@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 3497 | _loop_check_before_0_0@572@01]
(assert _loop_check_before_0_0@572@01)
; [eval] _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 3498 | False | live]
; [else-branch: 3498 | True | live]
(push) ; 43
; [then-branch: 3498 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 3498 | True]
; [eval] perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_158_0)) == none
; [eval] perm(MustTerminate_0(_cthread_158_0))
(push) ; 44
; [then-branch: 3499 | False | live]
; [else-branch: 3499 | True | live]
(push) ; 45
; [then-branch: 3499 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 3499 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false)
(push) ; 46
; [then-branch: 3500 | False | live]
; [else-branch: 3500 | True | live]
(push) ; 47
; [then-branch: 3500 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 3500 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false)
(push) ; 48
; [then-branch: 3501 | False | live]
; [else-branch: 3501 | True | live]
(push) ; 49
; [then-branch: 3501 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 3501 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 3502 | False | live]
; [else-branch: 3502 | True | live]
(push) ; 51
; [then-branch: 3502 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 3502 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 3497 | !(_loop_check_before_0_0@572@01)]
(assert (not _loop_check_before_0_0@572@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (and
    p2_4@476@01
    (not bypass2_0@543@01)
    (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))))
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0 ==> !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 3503 | !(p1_4@475@01) | live]
; [else-branch: 3503 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 3503 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3503 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3504 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3504 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3504 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !idle1_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3505 | True | live]
; [else-branch: 3505 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 3505 | True]
; [eval] !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0@571@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0@571@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3506 | !(_loop_check_before_0@571@01) | live]
; [else-branch: 3506 | _loop_check_before_0@571@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 3506 | !(_loop_check_before_0@571@01)]
(assert (not _loop_check_before_0@571@01))
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 42
; [then-branch: 3507 | False | live]
; [else-branch: 3507 | True | live]
(push) ; 43
; [then-branch: 3507 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 3507 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 44
; [then-branch: 3508 | False | live]
; [else-branch: 3508 | True | live]
(push) ; 45
; [then-branch: 3508 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 3508 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 3509 | False | live]
; [else-branch: 3509 | True | live]
(push) ; 47
; [then-branch: 3509 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 3509 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 3506 | _loop_check_before_0@571@01]
(assert _loop_check_before_0@571@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (and
    p1_4@475@01
    (not bypass1_0@542@01)
    (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))))
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 3510 | !(p2_4@476@01) | live]
; [else-branch: 3510 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 3510 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3510 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3511 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3511 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3511 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3512 | True | live]
; [else-branch: 3512 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 3512 | True]
; [eval] !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_0_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0_0@572@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0_0@572@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3513 | !(_loop_check_before_0_0@572@01) | live]
; [else-branch: 3513 | _loop_check_before_0_0@572@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 3513 | !(_loop_check_before_0_0@572@01)]
(assert (not _loop_check_before_0_0@572@01))
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false)
(push) ; 42
; [then-branch: 3514 | False | live]
; [else-branch: 3514 | True | live]
(push) ; 43
; [then-branch: 3514 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 3514 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false)
(push) ; 44
; [then-branch: 3515 | False | live]
; [else-branch: 3515 | True | live]
(push) ; 45
; [then-branch: 3515 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 3515 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 3516 | False | live]
; [else-branch: 3516 | True | live]
(push) ; 47
; [then-branch: 3516 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 3516 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 3513 | _loop_check_before_0_0@572@01]
(assert _loop_check_before_0_0@572@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (and
    p2_4@476@01
    (not bypass2_0@543@01)
    (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))))
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] bypass1_0 ==> tmp1_7 == except1_0
(push) ; 36
; [then-branch: 3517 | bypass1_0@542@01 | dead]
; [else-branch: 3517 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3517 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_6 == Exception_res_0
(push) ; 36
; [then-branch: 3518 | bypass1_0@542@01 | dead]
; [else-branch: 3518 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3518 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_10 == break1_0
(push) ; 36
; [then-branch: 3519 | bypass1_0@542@01 | dead]
; [else-branch: 3519 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3519 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_9 == _loop_check_before_0
(push) ; 36
; [then-branch: 3520 | bypass1_0@542@01 | dead]
; [else-branch: 3520 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3520 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_8 == _err
(push) ; 36
; [then-branch: 3521 | bypass1_0@542@01 | dead]
; [else-branch: 3521 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3521 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_5 == _loop_measures_0
(push) ; 36
; [then-branch: 3522 | bypass1_0@542@01 | dead]
; [else-branch: 3522 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3522 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_5 == _loop_measures_0_0
(push) ; 36
; [then-branch: 3523 | bypass2_0@543@01 | dead]
; [else-branch: 3523 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3523 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_8 == _err_1
(push) ; 36
; [then-branch: 3524 | bypass2_0@543@01 | dead]
; [else-branch: 3524 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3524 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_10 == break2_0
(push) ; 36
; [then-branch: 3525 | bypass2_0@543@01 | dead]
; [else-branch: 3525 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3525 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_7 == except2_0
(push) ; 36
; [then-branch: 3526 | bypass2_0@543@01 | dead]
; [else-branch: 3526 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3526 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_6 == Exception_res_0_0
(push) ; 36
; [then-branch: 3527 | bypass2_0@543@01 | dead]
; [else-branch: 3527 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3527 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_9 == _loop_check_before_0_0
(push) ; 36
; [then-branch: 3528 | bypass2_0@543@01 | dead]
; [else-branch: 3528 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3528 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 25
; [then-branch: 3529 | !(p2_6@590@01) | live]
; [else-branch: 3529 | p2_6@590@01 | live]
(push) ; 26
; [then-branch: 3529 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3529 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 27
; [then-branch: 3530 | break2_0@570@01 | live]
; [else-branch: 3530 | !(break2_0@570@01) | live]
(push) ; 28
; [then-branch: 3530 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 28
(push) ; 28
; [else-branch: 3530 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3531 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
; [else-branch: 3531 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 3531 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))
(pop) ; 25
(pop) ; 24
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 24
; [then-branch: 3532 | !(p1_6@589@01) | live]
; [else-branch: 3532 | p1_6@589@01 | live]
(push) ; 25
; [then-branch: 3532 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 25
(push) ; 25
; [else-branch: 3532 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 26
; [then-branch: 3533 | break1_0@569@01 | live]
; [else-branch: 3533 | !(break1_0@569@01) | live]
(push) ; 27
; [then-branch: 3533 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 27
(push) ; 27
; [else-branch: 3533 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3534 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
; [else-branch: 3534 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 3534 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))
(pop) ; 24
(pop) ; 23
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 23
; [then-branch: 3535 | !(p2_6@590@01) | live]
; [else-branch: 3535 | p2_6@590@01 | live]
(push) ; 24
; [then-branch: 3535 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 24
(push) ; 24
; [else-branch: 3535 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 25
; [then-branch: 3536 | break2_0@570@01 | live]
; [else-branch: 3536 | !(break2_0@570@01) | live]
(push) ; 26
; [then-branch: 3536 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 26
(push) ; 26
; [else-branch: 3536 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3537 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
; [else-branch: 3537 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 3537 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))
(pop) ; 23
(pop) ; 22
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 22
; [then-branch: 3538 | !(p1_6@589@01) | live]
; [else-branch: 3538 | p1_6@589@01 | live]
(push) ; 23
; [then-branch: 3538 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 23
(push) ; 23
; [else-branch: 3538 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 24
; [then-branch: 3539 | break1_0@569@01 | live]
; [else-branch: 3539 | !(break1_0@569@01) | live]
(push) ; 25
; [then-branch: 3539 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 25
(push) ; 25
; [else-branch: 3539 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3540 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
; [else-branch: 3540 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 3540 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))
(pop) ; 22
(pop) ; 21
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 21
; [then-branch: 3541 | !(p2_6@590@01) | live]
; [else-branch: 3541 | p2_6@590@01 | live]
(push) ; 22
; [then-branch: 3541 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3541 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 23
; [then-branch: 3542 | break2_0@570@01 | live]
; [else-branch: 3542 | !(break2_0@570@01) | live]
(push) ; 24
; [then-branch: 3542 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 24
(push) ; 24
; [else-branch: 3542 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3543 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
; [else-branch: 3543 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
(set-option :timeout 0)
(push) ; 21
; [else-branch: 3543 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))
(pop) ; 21
(pop) ; 20
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 20
; [then-branch: 3544 | !(p1_6@589@01) | live]
; [else-branch: 3544 | p1_6@589@01 | live]
(push) ; 21
; [then-branch: 3544 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 21
(push) ; 21
; [else-branch: 3544 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 22
; [then-branch: 3545 | break1_0@569@01 | live]
; [else-branch: 3545 | !(break1_0@569@01) | live]
(push) ; 23
; [then-branch: 3545 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 23
(push) ; 23
; [else-branch: 3545 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3546 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
; [else-branch: 3546 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 3546 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 3400 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(pop) ; 19
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 19
; [then-branch: 3547 | !(p2_6@590@01) | live]
; [else-branch: 3547 | p2_6@590@01 | live]
(push) ; 20
; [then-branch: 3547 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 20
(push) ; 20
; [else-branch: 3547 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 21
; [then-branch: 3548 | break2_0@570@01 | live]
; [else-branch: 3548 | !(break2_0@570@01) | live]
(push) ; 22
; [then-branch: 3548 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 22
(push) ; 22
; [else-branch: 3548 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3549 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 3549 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 3549 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
; [exec]
; tmp_0 := new()
(declare-const tmp_0@600@01 $Ref)
(assert (not (= tmp_0@600@01 $Ref.null)))
(assert (not (= tmp_0@600@01 _cthread_158_0@478@01)))
(assert (not (= tmp_0@600@01 tmp2_8@526@01)))
(assert (not (= tmp_0@600@01 tmp_0@582@01)))
(assert (not (= tmp_0@600@01 Exception_res_0_0@560@01)))
(assert (not (= tmp_0@600@01 c_0@483@01)))
(assert (not (= tmp_0@600@01 _err@561@01)))
(assert (not (= tmp_0@600@01 b_0@485@01)))
(assert (not
  (=
    tmp_0@600@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))
(assert (not (= tmp_0@600@01 b_0_0@486@01)))
(assert (not (= tmp_0@600@01 tmp1_8@525@01)))
(assert (not (= tmp_0@600@01 _cthread_158@477@01)))
(assert (not (= tmp_0@600@01 c_0_0@484@01)))
(assert (not (= tmp_0@600@01 tmp1_6@521@01)))
(assert (not (= tmp_0@600@01 tmp2_6@522@01)))
(assert (not (= tmp_0@600@01 _err_1@563@01)))
(assert (not (= tmp_0@600@01 Exception_res_0@559@01)))
(assert (not (= tmp_0@600@01 Container_value@595@01)))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 20
; [then-branch: 3550 | !(p1_6@589@01) | live]
; [else-branch: 3550 | p1_6@589@01 | live]
(push) ; 21
; [then-branch: 3550 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 21
(push) ; 21
; [else-branch: 3550 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 22
; [then-branch: 3551 | break1_0@569@01 | live]
; [else-branch: 3551 | !(break1_0@569@01) | live]
(push) ; 23
; [then-branch: 3551 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 23
(push) ; 23
; [else-branch: 3551 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3552 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
; [else-branch: 3552 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 3552 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))
; [exec]
; Exception_res_0 := tmp_0
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 21
; [then-branch: 3553 | !(p2_6@590@01) | live]
; [else-branch: 3553 | p2_6@590@01 | live]
(push) ; 22
; [then-branch: 3553 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3553 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 23
; [then-branch: 3554 | break2_0@570@01 | live]
; [else-branch: 3554 | !(break2_0@570@01) | live]
(push) ; 24
; [then-branch: 3554 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 24
(push) ; 24
; [else-branch: 3554 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 3555 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 3555 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(push) ; 21
; [else-branch: 3555 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(pop) ; 21
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 21
; [then-branch: 3556 | !(p2_6@590@01) | live]
; [else-branch: 3556 | p2_6@590@01 | live]
(push) ; 22
; [then-branch: 3556 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3556 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 23
; [then-branch: 3557 | break2_0@570@01 | live]
; [else-branch: 3557 | !(break2_0@570@01) | live]
(push) ; 24
; [then-branch: 3557 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 24
(push) ; 24
; [else-branch: 3557 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3558 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 3558 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 3558 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01))]
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 22
; [then-branch: 3559 | !(p1_6@589@01) | live]
; [else-branch: 3559 | p1_6@589@01 | live]
(push) ; 23
; [then-branch: 3559 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 23
(push) ; 23
; [else-branch: 3559 | p1_6@589@01]
; [eval] !break1_0
(push) ; 24
; [then-branch: 3560 | break1_0@569@01 | live]
; [else-branch: 3560 | !(break1_0@569@01) | live]
(push) ; 25
; [then-branch: 3560 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 25
(push) ; 25
; [else-branch: 3560 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (=> p1_6@589@01 (or (not break1_0@569@01) break1_0@569@01)))
(push) ; 22
(set-option :timeout 10)
(assert (not (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3561 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
; [else-branch: 3561 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3561 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))
; [exec]
; inhale typeof(Exception_res_0) == Exception()
(declare-const $t@601@01 $Snap)
(assert (= $t@601@01 $Snap.unit))
; [eval] typeof(Exception_res_0) == Exception()
; [eval] typeof(Exception_res_0)
; [eval] Exception()
(assert (= (typeof<PyType> tmp_0@600@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_6 && (!break2_0 && !except2_0)
(set-option :timeout 0)
(push) ; 23
; [then-branch: 3562 | !(p2_6@590@01) | live]
; [else-branch: 3562 | p2_6@590@01 | live]
(push) ; 24
; [then-branch: 3562 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 24
(push) ; 24
; [else-branch: 3562 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 25
; [then-branch: 3563 | break2_0@570@01 | live]
; [else-branch: 3563 | !(break2_0@570@01) | live]
(push) ; 26
; [then-branch: 3563 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 26
(push) ; 26
; [else-branch: 3563 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 3564 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 3564 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(push) ; 23
; [else-branch: 3564 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(pop) ; 23
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 23
; [then-branch: 3565 | !(p2_6@590@01) | live]
; [else-branch: 3565 | p2_6@590@01 | live]
(push) ; 24
; [then-branch: 3565 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 24
(push) ; 24
; [else-branch: 3565 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 25
; [then-branch: 3566 | break2_0@570@01 | live]
; [else-branch: 3566 | !(break2_0@570@01) | live]
(push) ; 26
; [then-branch: 3566 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 26
(push) ; 26
; [else-branch: 3566 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3567 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 3567 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 3567 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01))]
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 24
; [then-branch: 3568 | !(p1_6@589@01) | live]
; [else-branch: 3568 | p1_6@589@01 | live]
(push) ; 25
; [then-branch: 3568 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 25
(push) ; 25
; [else-branch: 3568 | p1_6@589@01]
; [eval] !break1_0
(push) ; 26
; [then-branch: 3569 | break1_0@569@01 | live]
; [else-branch: 3569 | !(break1_0@569@01) | live]
(push) ; 27
; [then-branch: 3569 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 27
(push) ; 27
; [else-branch: 3569 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3570 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
; [else-branch: 3570 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 3570 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))
; [exec]
; _err := Exception_res_0
; [exec]
; except1_0 := true
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 25
; [then-branch: 3571 | !(p2_6@590@01) | live]
; [else-branch: 3571 | p2_6@590@01 | live]
(push) ; 26
; [then-branch: 3571 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3571 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 27
; [then-branch: 3572 | break2_0@570@01 | live]
; [else-branch: 3572 | !(break2_0@570@01) | live]
(push) ; 28
; [then-branch: 3572 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 28
(push) ; 28
; [else-branch: 3572 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 3573 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 3573 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(push) ; 25
; [else-branch: 3573 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(pop) ; 25
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 25
; [then-branch: 3574 | !(p2_6@590@01) | live]
; [else-branch: 3574 | p2_6@590@01 | live]
(push) ; 26
; [then-branch: 3574 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3574 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 27
; [then-branch: 3575 | break2_0@570@01 | live]
; [else-branch: 3575 | !(break2_0@570@01) | live]
(push) ; 28
; [then-branch: 3575 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 28
(push) ; 28
; [else-branch: 3575 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3576 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 3576 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 3576 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01))]
; [exec]
; p1_8 := p3_2 &&
;   (!break1_0 && !except1_0 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p3_2 && (!break1_0 && !except1_0 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 3577 | !(p3_2@591@01) | live]
; [else-branch: 3577 | p3_2@591@01 | live]
(push) ; 27
; [then-branch: 3577 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 27
(push) ; 27
; [else-branch: 3577 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 28
; [then-branch: 3578 | break1_0@569@01 | live]
; [else-branch: 3578 | !(break1_0@569@01) | live]
(push) ; 29
; [then-branch: 3578 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 29
(push) ; 29
; [else-branch: 3578 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=> p3_2@591@01 (and p3_2@591@01 (or (not break1_0@569@01) break1_0@569@01))))
(assert (or p3_2@591@01 (not p3_2@591@01)))
; [exec]
; p2_8 := p4_2 &&
;   (!break2_0 && !except2_0 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_2 && (!break2_0 && !except2_0 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 3579 | !(p4_2@592@01) | live]
; [else-branch: 3579 | p4_2@592@01 | live]
(push) ; 27
; [then-branch: 3579 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 27
(push) ; 27
; [else-branch: 3579 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 28
; [then-branch: 3580 | break2_0@570@01 | live]
; [else-branch: 3580 | !(break2_0@570@01) | live]
(push) ; 29
; [then-branch: 3580 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 29
(push) ; 29
; [else-branch: 3580 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(push) ; 30
; [then-branch: 3581 | except2_0@564@01 | live]
; [else-branch: 3581 | !(except2_0@564@01) | live]
(push) ; 31
; [then-branch: 3581 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 31
(push) ; 31
; [else-branch: 3581 | !(except2_0@564@01)]
(assert (not except2_0@564@01))
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p4_2@592@01
  (and
    p4_2@592@01
    (=>
      (not break2_0@570@01)
      (and (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01)))
    (or (not break2_0@570@01) break2_0@570@01))))
(assert (or p4_2@592@01 (not p4_2@592@01)))
; [exec]
; p3_4 := p3_2 &&
;   (!break1_0 && !except1_0 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p3_2 && (!break1_0 && !except1_0 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 3582 | !(p3_2@591@01) | live]
; [else-branch: 3582 | p3_2@591@01 | live]
(push) ; 27
; [then-branch: 3582 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 27
(push) ; 27
; [else-branch: 3582 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 28
; [then-branch: 3583 | break1_0@569@01 | live]
; [else-branch: 3583 | !(break1_0@569@01) | live]
(push) ; 29
; [then-branch: 3583 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 29
(push) ; 29
; [else-branch: 3583 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [exec]
; p4_4 := p4_2 &&
;   (!break2_0 && !except2_0 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_2 && (!break2_0 && !except2_0 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 3584 | !(p4_2@592@01) | live]
; [else-branch: 3584 | p4_2@592@01 | live]
(push) ; 27
; [then-branch: 3584 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 27
(push) ; 27
; [else-branch: 3584 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 28
; [then-branch: 3585 | break2_0@570@01 | live]
; [else-branch: 3585 | !(break2_0@570@01) | live]
(push) ; 29
; [then-branch: 3585 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 29
(push) ; 29
; [else-branch: 3585 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(push) ; 30
; [then-branch: 3586 | except2_0@564@01 | live]
; [else-branch: 3586 | !(except2_0@564@01) | live]
(push) ; 31
; [then-branch: 3586 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 31
(push) ; 31
; [else-branch: 3586 | !(except2_0@564@01)]
(assert (not except2_0@564@01))
; [eval] !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p4_4@602@01 Bool)
(assert (=
  p4_4@602@01
  (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
; [eval] p1_8 && (!break1_0 && !except1_0)
; [then-branch: 3587 | False | dead]
; [else-branch: 3587 | True | live]
(push) ; 26
; [else-branch: 3587 | True]
(pop) ; 26
; [eval] !(p1_8 && (!break1_0 && !except1_0))
; [eval] p1_8 && (!break1_0 && !except1_0)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3588 | True | live]
; [else-branch: 3588 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 3588 | True]
; [eval] p2_8 && (!break2_0 && !except2_0)
; [then-branch: 3589 | False | dead]
; [else-branch: 3589 | True | live]
(push) ; 27
; [else-branch: 3589 | True]
(pop) ; 27
; [eval] !(p2_8 && (!break2_0 && !except2_0))
; [eval] p2_8 && (!break2_0 && !except2_0)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3590 | True | live]
; [else-branch: 3590 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 3590 | True]
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 28
; [then-branch: 3591 | !(p3_2@591@01) | live]
; [else-branch: 3591 | p3_2@591@01 | live]
(push) ; 29
; [then-branch: 3591 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 29
(push) ; 29
; [else-branch: 3591 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 30
; [then-branch: 3592 | break1_0@569@01 | live]
; [else-branch: 3592 | !(break1_0@569@01) | live]
(push) ; 31
; [then-branch: 3592 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 31
(push) ; 31
; [else-branch: 3592 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 3593 | False | dead]
; [else-branch: 3593 | True | live]
(push) ; 28
; [else-branch: 3593 | True]
(pop) ; 28
; [eval] !(p3_2 && (!break1_0 && !except1_0))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 28
; [then-branch: 3594 | !(p3_2@591@01) | live]
; [else-branch: 3594 | p3_2@591@01 | live]
(push) ; 29
; [then-branch: 3594 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 29
(push) ; 29
; [else-branch: 3594 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 30
; [then-branch: 3595 | break1_0@569@01 | live]
; [else-branch: 3595 | !(break1_0@569@01) | live]
(push) ; 31
; [then-branch: 3595 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 31
(push) ; 31
; [else-branch: 3595 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3596 | True | live]
; [else-branch: 3596 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 3596 | True]
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 29
; [then-branch: 3597 | !(p4_2@592@01) | live]
; [else-branch: 3597 | p4_2@592@01 | live]
(push) ; 30
; [then-branch: 3597 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 30
(push) ; 30
; [else-branch: 3597 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 31
; [then-branch: 3598 | break2_0@570@01 | live]
; [else-branch: 3598 | !(break2_0@570@01) | live]
(push) ; 32
; [then-branch: 3598 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 32
(push) ; 32
; [else-branch: 3598 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p4_2@592@01 (and p4_2@592@01 (or (not break2_0@570@01) break2_0@570@01))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3599 | p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
; [else-branch: 3599 | !(p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 3599 | p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01))))
; [exec]
; c_5_0.Container_valuep := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 30
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 30
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_valuep@603@01 $Ref)
(assert (= Container_valuep@603@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 30
; [then-branch: 3600 | !(p3_2@591@01) | live]
; [else-branch: 3600 | p3_2@591@01 | live]
(push) ; 31
; [then-branch: 3600 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 31
(push) ; 31
; [else-branch: 3600 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 32
; [then-branch: 3601 | break1_0@569@01 | live]
; [else-branch: 3601 | !(break1_0@569@01) | live]
(push) ; 33
; [then-branch: 3601 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 33
(push) ; 33
; [else-branch: 3601 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 3602 | False | dead]
; [else-branch: 3602 | True | live]
(push) ; 30
; [else-branch: 3602 | True]
(pop) ; 30
; [eval] !(p3_2 && (!break1_0 && !except1_0))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 30
; [then-branch: 3603 | !(p3_2@591@01) | live]
; [else-branch: 3603 | p3_2@591@01 | live]
(push) ; 31
; [then-branch: 3603 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 31
(push) ; 31
; [else-branch: 3603 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 32
; [then-branch: 3604 | break1_0@569@01 | live]
; [else-branch: 3604 | !(break1_0@569@01) | live]
(push) ; 33
; [then-branch: 3604 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 33
(push) ; 33
; [else-branch: 3604 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3605 | True | live]
; [else-branch: 3605 | False | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 3605 | True]
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 31
; [then-branch: 3606 | !(p4_2@592@01) | live]
; [else-branch: 3606 | p4_2@592@01 | live]
(push) ; 32
; [then-branch: 3606 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 32
(push) ; 32
; [else-branch: 3606 | p4_2@592@01]
; [eval] !break2_0
(push) ; 33
; [then-branch: 3607 | break2_0@570@01 | live]
; [else-branch: 3607 | !(break2_0@570@01) | live]
(push) ; 34
; [then-branch: 3607 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 34
(push) ; 34
; [else-branch: 3607 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (=> p4_2@592@01 (or (not break2_0@570@01) break2_0@570@01)))
(push) ; 31
(set-option :timeout 10)
(assert (not (not (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3608 | p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
; [else-branch: 3608 | !(p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 3608 | p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01))))
; [exec]
; break2_0 := true
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 32
; [then-branch: 3609 | !(p1_5@587@01) | live]
; [else-branch: 3609 | p1_5@587@01 | live]
(push) ; 33
; [then-branch: 3609 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 33
(push) ; 33
; [else-branch: 3609 | p1_5@587@01]
; [eval] !break1_0
(push) ; 34
; [then-branch: 3610 | break1_0@569@01 | live]
; [else-branch: 3610 | !(break1_0@569@01) | live]
(push) ; 35
; [then-branch: 3610 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 35
(push) ; 35
; [else-branch: 3610 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (=> p1_5@587@01 (or (not break1_0@569@01) break1_0@569@01)))
; [then-branch: 3611 | False | dead]
; [else-branch: 3611 | True | live]
(push) ; 32
; [else-branch: 3611 | True]
(pop) ; 32
; [eval] !(p1_5 && (!break1_0 && !except1_0))
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 32
; [then-branch: 3612 | !(p1_5@587@01) | live]
; [else-branch: 3612 | p1_5@587@01 | live]
(push) ; 33
; [then-branch: 3612 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 33
(push) ; 33
; [else-branch: 3612 | p1_5@587@01]
; [eval] !break1_0
(push) ; 34
; [then-branch: 3613 | break1_0@569@01 | live]
; [else-branch: 3613 | !(break1_0@569@01) | live]
(push) ; 35
; [then-branch: 3613 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 35
(push) ; 35
; [else-branch: 3613 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3614 | True | live]
; [else-branch: 3614 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 3614 | True]
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 33
; [then-branch: 3615 | !(p2_5@588@01) | live]
; [else-branch: 3615 | p2_5@588@01 | live]
(push) ; 34
; [then-branch: 3615 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 34
(push) ; 34
; [else-branch: 3615 | p2_5@588@01]
; [eval] !break2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 3616 | False | dead]
; [else-branch: 3616 | True | live]
(push) ; 33
; [else-branch: 3616 | True]
(pop) ; 33
; [eval] !(p2_5 && (!break2_0 && !except2_0))
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 33
; [then-branch: 3617 | !(p2_5@588@01) | live]
; [else-branch: 3617 | p2_5@588@01 | live]
(push) ; 34
; [then-branch: 3617 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 34
(push) ; 34
; [else-branch: 3617 | p2_5@588@01]
; [eval] !break2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3618 | True | live]
; [else-branch: 3618 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 3618 | True]
; [exec]
; assert (p1_5 && (!break1_0 && !except1_0) ==>
;   _loop_termination_flag_0 ==> !true) &&
;   (p2_5 && (!break2_0 && !except2_0) ==>
;   _loop_termination_flag_0_0 ==> !true)
; [eval] p1_5 && (!break1_0 && !except1_0) ==> _loop_termination_flag_0 ==> !true
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 34
; [then-branch: 3619 | !(p1_5@587@01) | live]
; [else-branch: 3619 | p1_5@587@01 | live]
(push) ; 35
; [then-branch: 3619 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 35
(push) ; 35
; [else-branch: 3619 | p1_5@587@01]
; [eval] !break1_0
(push) ; 36
; [then-branch: 3620 | break1_0@569@01 | live]
; [else-branch: 3620 | !(break1_0@569@01) | live]
(push) ; 37
; [then-branch: 3620 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 37
(push) ; 37
; [else-branch: 3620 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 3621 | False | dead]
; [else-branch: 3621 | True | live]
(push) ; 35
; [else-branch: 3621 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_5 && (!break2_0 && !except2_0) ==> _loop_termination_flag_0_0 ==> !true
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 34
; [then-branch: 3622 | !(p2_5@588@01) | live]
; [else-branch: 3622 | p2_5@588@01 | live]
(push) ; 35
; [then-branch: 3622 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 35
(push) ; 35
; [else-branch: 3622 | p2_5@588@01]
; [eval] !break2_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 3623 | False | dead]
; [else-branch: 3623 | True | live]
(push) ; 35
; [else-branch: 3623 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_4 && !bypass1_0 ==> true
; [eval] p1_4 && !bypass1_0
(push) ; 34
; [then-branch: 3624 | !(p1_4@475@01) | live]
; [else-branch: 3624 | p1_4@475@01 | live]
(push) ; 35
; [then-branch: 3624 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 35
(push) ; 35
; [else-branch: 3624 | p1_4@475@01]
(assert p1_4@475@01)
; [eval] !bypass1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3625 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3625 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 3625 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> true
; [eval] p2_4 && !bypass2_0
(push) ; 34
; [then-branch: 3626 | !(p2_4@476@01) | live]
; [else-branch: 3626 | p2_4@476@01 | live]
(push) ; 35
; [then-branch: 3626 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 35
(push) ; 35
; [else-branch: 3626 | p2_4@476@01]
(assert p2_4@476@01)
; [eval] !bypass2_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3627 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3627 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 3627 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0
(push) ; 34
; [then-branch: 3628 | !(p1_4@475@01) | live]
; [else-branch: 3628 | p1_4@475@01 | live]
(push) ; 35
; [then-branch: 3628 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 35
(push) ; 35
; [else-branch: 3628 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3629 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3629 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 3629 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0
(push) ; 35
; [then-branch: 3630 | !(p2_4@476@01) | live]
; [else-branch: 3630 | p2_4@476@01 | live]
(push) ; 36
; [then-branch: 3630 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 36
(push) ; 36
; [else-branch: 3630 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3631 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3631 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 3631 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0 ==> issubtype(typeof(c_5.Container_value), int())
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 3632 | !(p1_4@475@01) | live]
; [else-branch: 3632 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 3632 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3632 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3633 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3633 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3633 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] issubtype(typeof(c_5.Container_value), int())
; [eval] typeof(c_5.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(push) ; 36
(assert (not (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (issubtype<Bool> (typeof<PyType> Container_value@595@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (issubtype<Bool> (typeof<PyType> Container_value@595@01) (as int<PyType>  PyType))))
; [eval] p2_4 && !bypass2_0 ==> issubtype(typeof(c_5_0.Container_valuep), int())
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 3634 | !(p2_4@476@01) | live]
; [else-branch: 3634 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 3634 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3634 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3635 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3635 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3635 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] issubtype(typeof(c_5_0.Container_valuep), int())
; [eval] typeof(c_5_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(push) ; 36
(assert (not (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@603@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@603@01) (as int<PyType>  PyType))))
; [eval] p1_4 && !bypass1_0 ==> !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 3636 | !(p1_4@475@01) | live]
; [else-branch: 3636 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 3636 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3636 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3637 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3637 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3637 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] !idle1_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3638 | True | live]
; [else-branch: 3638 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 3638 | True]
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0@571@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0@571@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3639 | _loop_check_before_0@571@01 | live]
; [else-branch: 3639 | !(_loop_check_before_0@571@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 3639 | _loop_check_before_0@571@01]
(assert _loop_check_before_0@571@01)
; [eval] _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 3640 | False | live]
; [else-branch: 3640 | True | live]
(push) ; 43
; [then-branch: 3640 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 3640 | True]
; [eval] perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_158)) == none
; [eval] perm(MustTerminate(_cthread_158))
(push) ; 44
; [then-branch: 3641 | False | live]
; [else-branch: 3641 | True | live]
(push) ; 45
; [then-branch: 3641 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 3641 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 46
; [then-branch: 3642 | False | live]
; [else-branch: 3642 | True | live]
(push) ; 47
; [then-branch: 3642 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 3642 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 48
; [then-branch: 3643 | False | live]
; [else-branch: 3643 | True | live]
(push) ; 49
; [then-branch: 3643 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 3643 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 3644 | False | live]
; [else-branch: 3644 | True | live]
(push) ; 51
; [then-branch: 3644 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 3644 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 3639 | !(_loop_check_before_0@571@01)]
(assert (not _loop_check_before_0@571@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (and
    p1_4@475@01
    (not bypass1_0@542@01)
    (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))))
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 3645 | !(p2_4@476@01) | live]
; [else-branch: 3645 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 3645 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3645 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3646 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3646 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3646 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3647 | True | live]
; [else-branch: 3647 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 3647 | True]
; [eval] _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0_0@572@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0_0@572@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3648 | _loop_check_before_0_0@572@01 | live]
; [else-branch: 3648 | !(_loop_check_before_0_0@572@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 3648 | _loop_check_before_0_0@572@01]
(assert _loop_check_before_0_0@572@01)
; [eval] _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 3649 | False | live]
; [else-branch: 3649 | True | live]
(push) ; 43
; [then-branch: 3649 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 3649 | True]
; [eval] perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_158_0)) == none
; [eval] perm(MustTerminate_0(_cthread_158_0))
(push) ; 44
; [then-branch: 3650 | False | live]
; [else-branch: 3650 | True | live]
(push) ; 45
; [then-branch: 3650 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 3650 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false)
(push) ; 46
; [then-branch: 3651 | False | live]
; [else-branch: 3651 | True | live]
(push) ; 47
; [then-branch: 3651 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 3651 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false)
(push) ; 48
; [then-branch: 3652 | False | live]
; [else-branch: 3652 | True | live]
(push) ; 49
; [then-branch: 3652 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 3652 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 3653 | False | live]
; [else-branch: 3653 | True | live]
(push) ; 51
; [then-branch: 3653 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 3653 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 3648 | !(_loop_check_before_0_0@572@01)]
(assert (not _loop_check_before_0_0@572@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (and
    p2_4@476@01
    (not bypass2_0@543@01)
    (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))))
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0 ==> !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 3654 | !(p1_4@475@01) | live]
; [else-branch: 3654 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 3654 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3654 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3655 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3655 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3655 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !idle1_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3656 | True | live]
; [else-branch: 3656 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 3656 | True]
; [eval] !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0@571@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0@571@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3657 | !(_loop_check_before_0@571@01) | live]
; [else-branch: 3657 | _loop_check_before_0@571@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 3657 | !(_loop_check_before_0@571@01)]
(assert (not _loop_check_before_0@571@01))
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 42
; [then-branch: 3658 | False | live]
; [else-branch: 3658 | True | live]
(push) ; 43
; [then-branch: 3658 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 3658 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 44
; [then-branch: 3659 | False | live]
; [else-branch: 3659 | True | live]
(push) ; 45
; [then-branch: 3659 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 3659 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 3660 | False | live]
; [else-branch: 3660 | True | live]
(push) ; 47
; [then-branch: 3660 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 3660 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 3657 | _loop_check_before_0@571@01]
(assert _loop_check_before_0@571@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (and
    p1_4@475@01
    (not bypass1_0@542@01)
    (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))))
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 3661 | !(p2_4@476@01) | live]
; [else-branch: 3661 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 3661 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3661 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3662 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3662 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3662 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3663 | True | live]
; [else-branch: 3663 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 3663 | True]
; [eval] !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_0_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0_0@572@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0_0@572@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3664 | !(_loop_check_before_0_0@572@01) | live]
; [else-branch: 3664 | _loop_check_before_0_0@572@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 3664 | !(_loop_check_before_0_0@572@01)]
(assert (not _loop_check_before_0_0@572@01))
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false)
(push) ; 42
; [then-branch: 3665 | False | live]
; [else-branch: 3665 | True | live]
(push) ; 43
; [then-branch: 3665 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 3665 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false)
(push) ; 44
; [then-branch: 3666 | False | live]
; [else-branch: 3666 | True | live]
(push) ; 45
; [then-branch: 3666 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 3666 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 3667 | False | live]
; [else-branch: 3667 | True | live]
(push) ; 47
; [then-branch: 3667 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 3667 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 3664 | _loop_check_before_0_0@572@01]
(assert _loop_check_before_0_0@572@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (and
    p2_4@476@01
    (not bypass2_0@543@01)
    (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))))
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] bypass1_0 ==> tmp1_7 == except1_0
(push) ; 36
; [then-branch: 3668 | bypass1_0@542@01 | dead]
; [else-branch: 3668 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3668 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_6 == Exception_res_0
(push) ; 36
; [then-branch: 3669 | bypass1_0@542@01 | dead]
; [else-branch: 3669 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3669 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_10 == break1_0
(push) ; 36
; [then-branch: 3670 | bypass1_0@542@01 | dead]
; [else-branch: 3670 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3670 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_9 == _loop_check_before_0
(push) ; 36
; [then-branch: 3671 | bypass1_0@542@01 | dead]
; [else-branch: 3671 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3671 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_8 == _err
(push) ; 36
; [then-branch: 3672 | bypass1_0@542@01 | dead]
; [else-branch: 3672 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3672 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_5 == _loop_measures_0
(push) ; 36
; [then-branch: 3673 | bypass1_0@542@01 | dead]
; [else-branch: 3673 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3673 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_5 == _loop_measures_0_0
(push) ; 36
; [then-branch: 3674 | bypass2_0@543@01 | dead]
; [else-branch: 3674 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3674 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_8 == _err_1
(push) ; 36
; [then-branch: 3675 | bypass2_0@543@01 | dead]
; [else-branch: 3675 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3675 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_10 == break2_0
(push) ; 36
; [then-branch: 3676 | bypass2_0@543@01 | dead]
; [else-branch: 3676 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3676 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_7 == except2_0
(push) ; 36
; [then-branch: 3677 | bypass2_0@543@01 | dead]
; [else-branch: 3677 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3677 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_6 == Exception_res_0_0
(push) ; 36
; [then-branch: 3678 | bypass2_0@543@01 | dead]
; [else-branch: 3678 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3678 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_9 == _loop_check_before_0_0
(push) ; 36
; [then-branch: 3679 | bypass2_0@543@01 | dead]
; [else-branch: 3679 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3679 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
; [eval] !(p4_2 && (!break2_0 && !except2_0))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 31
; [then-branch: 3680 | !(p4_2@592@01) | live]
; [else-branch: 3680 | p4_2@592@01 | live]
(push) ; 32
; [then-branch: 3680 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 32
(push) ; 32
; [else-branch: 3680 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 33
; [then-branch: 3681 | break2_0@570@01 | live]
; [else-branch: 3681 | !(break2_0@570@01) | live]
(push) ; 34
; [then-branch: 3681 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 34
(push) ; 34
; [else-branch: 3681 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3682 | !(p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
; [else-branch: 3682 | p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
(set-option :timeout 0)
(push) ; 31
; [else-branch: 3682 | p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01))))
(pop) ; 31
(pop) ; 30
(pop) ; 29
; [eval] !(p4_2 && (!break2_0 && !except2_0))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 29
; [then-branch: 3683 | !(p4_2@592@01) | live]
; [else-branch: 3683 | p4_2@592@01 | live]
(push) ; 30
; [then-branch: 3683 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 30
(push) ; 30
; [else-branch: 3683 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 31
; [then-branch: 3684 | break2_0@570@01 | live]
; [else-branch: 3684 | !(break2_0@570@01) | live]
(push) ; 32
; [then-branch: 3684 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 32
(push) ; 32
; [else-branch: 3684 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3685 | !(p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
; [else-branch: 3685 | p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 3685 | p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01))))
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 24
; [then-branch: 3686 | !(p1_6@589@01) | live]
; [else-branch: 3686 | p1_6@589@01 | live]
(push) ; 25
; [then-branch: 3686 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 25
(push) ; 25
; [else-branch: 3686 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 26
; [then-branch: 3687 | break1_0@569@01 | live]
; [else-branch: 3687 | !(break1_0@569@01) | live]
(push) ; 27
; [then-branch: 3687 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 27
(push) ; 27
; [else-branch: 3687 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3688 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
; [else-branch: 3688 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 3688 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))
(pop) ; 24
(pop) ; 23
(pop) ; 22
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 22
; [then-branch: 3689 | !(p1_6@589@01) | live]
; [else-branch: 3689 | p1_6@589@01 | live]
(push) ; 23
; [then-branch: 3689 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 23
(push) ; 23
; [else-branch: 3689 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 24
; [then-branch: 3690 | break1_0@569@01 | live]
; [else-branch: 3690 | !(break1_0@569@01) | live]
(push) ; 25
; [then-branch: 3690 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 25
(push) ; 25
; [else-branch: 3690 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3691 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
; [else-branch: 3691 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 3691 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))
(pop) ; 22
(pop) ; 21
(pop) ; 20
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 20
; [then-branch: 3692 | !(p1_6@589@01) | live]
; [else-branch: 3692 | p1_6@589@01 | live]
(push) ; 21
; [then-branch: 3692 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 21
(push) ; 21
; [else-branch: 3692 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 22
; [then-branch: 3693 | break1_0@569@01 | live]
; [else-branch: 3693 | !(break1_0@569@01) | live]
(push) ; 23
; [then-branch: 3693 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 23
(push) ; 23
; [else-branch: 3693 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3694 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
; [else-branch: 3694 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 3694 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 3549 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))
(pop) ; 19
(pop) ; 18
(push) ; 18
; [else-branch: 3397 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(pop) ; 18
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 18
; [then-branch: 3695 | !(p1_6@589@01) | live]
; [else-branch: 3695 | p1_6@589@01 | live]
(push) ; 19
; [then-branch: 3695 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 19
(push) ; 19
; [else-branch: 3695 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 20
; [then-branch: 3696 | break1_0@569@01 | live]
; [else-branch: 3696 | !(break1_0@569@01) | live]
(push) ; 21
; [then-branch: 3696 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 21
(push) ; 21
; [else-branch: 3696 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3697 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 3697 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 3697 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 19
; [then-branch: 3698 | !(p2_6@590@01) | live]
; [else-branch: 3698 | p2_6@590@01 | live]
(push) ; 20
; [then-branch: 3698 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 20
(push) ; 20
; [else-branch: 3698 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 21
; [then-branch: 3699 | break2_0@570@01 | live]
; [else-branch: 3699 | !(break2_0@570@01) | live]
(push) ; 22
; [then-branch: 3699 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 22
(push) ; 22
; [else-branch: 3699 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=> p2_6@590@01 (and p2_6@590@01 (or (not break2_0@570@01) break2_0@570@01))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3700 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
; [else-branch: 3700 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 3700 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))
; [exec]
; c_5_0.Container_valuep := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(declare-const Container_valuep@604@01 $Ref)
(assert (= Container_valuep@604@01 (__prim__int___box__ $Snap.unit 7)))
; [exec]
; tmp_0 := new()
(declare-const tmp_0@605@01 $Ref)
(assert (not (= tmp_0@605@01 $Ref.null)))
(assert (not (= tmp_0@605@01 _cthread_158_0@478@01)))
(assert (not (= tmp_0@605@01 tmp2_8@526@01)))
(assert (not (= tmp_0@605@01 tmp_0@582@01)))
(assert (not (= tmp_0@605@01 Exception_res_0_0@560@01)))
(assert (not (= tmp_0@605@01 c_0@483@01)))
(assert (not (= tmp_0@605@01 _err@561@01)))
(assert (not (= tmp_0@605@01 b_0@485@01)))
(assert (not
  (=
    tmp_0@605@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@573@01)))))))
(assert (not (= tmp_0@605@01 b_0_0@486@01)))
(assert (not (= tmp_0@605@01 tmp1_8@525@01)))
(assert (not (= tmp_0@605@01 _cthread_158@477@01)))
(assert (not (= tmp_0@605@01 c_0_0@484@01)))
(assert (not (= tmp_0@605@01 tmp1_6@521@01)))
(assert (not (= tmp_0@605@01 tmp2_6@522@01)))
(assert (not (= tmp_0@605@01 _err_1@563@01)))
(assert (not (= tmp_0@605@01 Exception_res_0@559@01)))
(assert (not (= tmp_0@605@01 Container_valuep@604@01)))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 20
; [then-branch: 3701 | !(p1_6@589@01) | live]
; [else-branch: 3701 | p1_6@589@01 | live]
(push) ; 21
; [then-branch: 3701 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 21
(push) ; 21
; [else-branch: 3701 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 22
; [then-branch: 3702 | break1_0@569@01 | live]
; [else-branch: 3702 | !(break1_0@569@01) | live]
(push) ; 23
; [then-branch: 3702 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 23
(push) ; 23
; [else-branch: 3702 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 3703 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 3703 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(push) ; 20
; [else-branch: 3703 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(pop) ; 20
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 20
; [then-branch: 3704 | !(p1_6@589@01) | live]
; [else-branch: 3704 | p1_6@589@01 | live]
(push) ; 21
; [then-branch: 3704 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 21
(push) ; 21
; [else-branch: 3704 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 22
; [then-branch: 3705 | break1_0@569@01 | live]
; [else-branch: 3705 | !(break1_0@569@01) | live]
(push) ; 23
; [then-branch: 3705 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 23
(push) ; 23
; [else-branch: 3705 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3706 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 3706 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 3706 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01))]
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 21
; [then-branch: 3707 | !(p2_6@590@01) | live]
; [else-branch: 3707 | p2_6@590@01 | live]
(push) ; 22
; [then-branch: 3707 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3707 | p2_6@590@01]
; [eval] !break2_0
(push) ; 23
; [then-branch: 3708 | break2_0@570@01 | live]
; [else-branch: 3708 | !(break2_0@570@01) | live]
(push) ; 24
; [then-branch: 3708 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 24
(push) ; 24
; [else-branch: 3708 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (=> p2_6@590@01 (or (not break2_0@570@01) break2_0@570@01)))
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3709 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
; [else-branch: 3709 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 3709 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))
; [exec]
; Exception_res_0_0 := tmp_0
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 22
; [then-branch: 3710 | !(p1_6@589@01) | live]
; [else-branch: 3710 | p1_6@589@01 | live]
(push) ; 23
; [then-branch: 3710 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 23
(push) ; 23
; [else-branch: 3710 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 24
; [then-branch: 3711 | break1_0@569@01 | live]
; [else-branch: 3711 | !(break1_0@569@01) | live]
(push) ; 25
; [then-branch: 3711 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 25
(push) ; 25
; [else-branch: 3711 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 3712 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 3712 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(push) ; 22
; [else-branch: 3712 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(pop) ; 22
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 22
; [then-branch: 3713 | !(p1_6@589@01) | live]
; [else-branch: 3713 | p1_6@589@01 | live]
(push) ; 23
; [then-branch: 3713 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 23
(push) ; 23
; [else-branch: 3713 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 24
; [then-branch: 3714 | break1_0@569@01 | live]
; [else-branch: 3714 | !(break1_0@569@01) | live]
(push) ; 25
; [then-branch: 3714 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 25
(push) ; 25
; [else-branch: 3714 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3715 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 3715 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3715 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01))]
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 23
; [then-branch: 3716 | !(p2_6@590@01) | live]
; [else-branch: 3716 | p2_6@590@01 | live]
(push) ; 24
; [then-branch: 3716 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 24
(push) ; 24
; [else-branch: 3716 | p2_6@590@01]
; [eval] !break2_0
(push) ; 25
; [then-branch: 3717 | break2_0@570@01 | live]
; [else-branch: 3717 | !(break2_0@570@01) | live]
(push) ; 26
; [then-branch: 3717 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 26
(push) ; 26
; [else-branch: 3717 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3718 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
; [else-branch: 3718 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 3718 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))
; [exec]
; inhale typeof(Exception_res_0_0) == Exception()
(declare-const $t@606@01 $Snap)
(assert (= $t@606@01 $Snap.unit))
; [eval] typeof(Exception_res_0_0) == Exception()
; [eval] typeof(Exception_res_0_0)
; [eval] Exception()
(assert (= (typeof<PyType> tmp_0@605@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_6 && (!break1_0 && !except1_0)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 3719 | !(p1_6@589@01) | live]
; [else-branch: 3719 | p1_6@589@01 | live]
(push) ; 25
; [then-branch: 3719 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 25
(push) ; 25
; [else-branch: 3719 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 26
; [then-branch: 3720 | break1_0@569@01 | live]
; [else-branch: 3720 | !(break1_0@569@01) | live]
(push) ; 27
; [then-branch: 3720 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 27
(push) ; 27
; [else-branch: 3720 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 3721 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 3721 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(push) ; 24
; [else-branch: 3721 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(pop) ; 24
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 24
; [then-branch: 3722 | !(p1_6@589@01) | live]
; [else-branch: 3722 | p1_6@589@01 | live]
(push) ; 25
; [then-branch: 3722 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 25
(push) ; 25
; [else-branch: 3722 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 26
; [then-branch: 3723 | break1_0@569@01 | live]
; [else-branch: 3723 | !(break1_0@569@01) | live]
(push) ; 27
; [then-branch: 3723 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 27
(push) ; 27
; [else-branch: 3723 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3724 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 3724 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 3724 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01))]
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 25
; [then-branch: 3725 | !(p2_6@590@01) | live]
; [else-branch: 3725 | p2_6@590@01 | live]
(push) ; 26
; [then-branch: 3725 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3725 | p2_6@590@01]
; [eval] !break2_0
(push) ; 27
; [then-branch: 3726 | break2_0@570@01 | live]
; [else-branch: 3726 | !(break2_0@570@01) | live]
(push) ; 28
; [then-branch: 3726 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 28
(push) ; 28
; [else-branch: 3726 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3727 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
; [else-branch: 3727 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 3727 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))
; [exec]
; _err_1 := Exception_res_0_0
; [exec]
; except2_0 := true
; [exec]
; p1_8 := p3_2 &&
;   (!break1_0 && !except1_0 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p3_2 && (!break1_0 && !except1_0 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 3728 | !(p3_2@591@01) | live]
; [else-branch: 3728 | p3_2@591@01 | live]
(push) ; 27
; [then-branch: 3728 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 27
(push) ; 27
; [else-branch: 3728 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 28
; [then-branch: 3729 | break1_0@569@01 | live]
; [else-branch: 3729 | !(break1_0@569@01) | live]
(push) ; 29
; [then-branch: 3729 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 29
(push) ; 29
; [else-branch: 3729 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 30
; [then-branch: 3730 | except1_0@562@01 | live]
; [else-branch: 3730 | !(except1_0@562@01) | live]
(push) ; 31
; [then-branch: 3730 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 31
(push) ; 31
; [else-branch: 3730 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p3_2@591@01
  (and
    p3_2@591@01
    (=>
      (not break1_0@569@01)
      (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01)))
    (or (not break1_0@569@01) break1_0@569@01))))
(assert (or p3_2@591@01 (not p3_2@591@01)))
; [exec]
; p2_8 := p4_2 &&
;   (!break2_0 && !except2_0 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_2 && (!break2_0 && !except2_0 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 3731 | !(p4_2@592@01) | live]
; [else-branch: 3731 | p4_2@592@01 | live]
(push) ; 27
; [then-branch: 3731 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 27
(push) ; 27
; [else-branch: 3731 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 28
; [then-branch: 3732 | break2_0@570@01 | live]
; [else-branch: 3732 | !(break2_0@570@01) | live]
(push) ; 29
; [then-branch: 3732 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 29
(push) ; 29
; [else-branch: 3732 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=> p4_2@592@01 (and p4_2@592@01 (or (not break2_0@570@01) break2_0@570@01))))
(assert (or p4_2@592@01 (not p4_2@592@01)))
; [exec]
; p3_4 := p3_2 &&
;   (!break1_0 && !except1_0 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p3_2 && (!break1_0 && !except1_0 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 3733 | !(p3_2@591@01) | live]
; [else-branch: 3733 | p3_2@591@01 | live]
(push) ; 27
; [then-branch: 3733 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 27
(push) ; 27
; [else-branch: 3733 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 28
; [then-branch: 3734 | break1_0@569@01 | live]
; [else-branch: 3734 | !(break1_0@569@01) | live]
(push) ; 29
; [then-branch: 3734 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 29
(push) ; 29
; [else-branch: 3734 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 30
; [then-branch: 3735 | except1_0@562@01 | live]
; [else-branch: 3735 | !(except1_0@562@01) | live]
(push) ; 31
; [then-branch: 3735 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 31
(push) ; 31
; [else-branch: 3735 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p3_4@607@01 Bool)
(assert (=
  p3_4@607@01
  (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
; [exec]
; p4_4 := p4_2 &&
;   (!break2_0 && !except2_0 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_2 && (!break2_0 && !except2_0 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 3736 | !(p4_2@592@01) | live]
; [else-branch: 3736 | p4_2@592@01 | live]
(push) ; 27
; [then-branch: 3736 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 27
(push) ; 27
; [else-branch: 3736 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 28
; [then-branch: 3737 | break2_0@570@01 | live]
; [else-branch: 3737 | !(break2_0@570@01) | live]
(push) ; 29
; [then-branch: 3737 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 29
(push) ; 29
; [else-branch: 3737 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [eval] p1_8 && (!break1_0 && !except1_0)
; [then-branch: 3738 | False | dead]
; [else-branch: 3738 | True | live]
(push) ; 26
; [else-branch: 3738 | True]
(pop) ; 26
; [eval] !(p1_8 && (!break1_0 && !except1_0))
; [eval] p1_8 && (!break1_0 && !except1_0)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3739 | True | live]
; [else-branch: 3739 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 3739 | True]
; [eval] p2_8 && (!break2_0 && !except2_0)
; [then-branch: 3740 | False | dead]
; [else-branch: 3740 | True | live]
(push) ; 27
; [else-branch: 3740 | True]
(pop) ; 27
; [eval] !(p2_8 && (!break2_0 && !except2_0))
; [eval] p2_8 && (!break2_0 && !except2_0)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3741 | True | live]
; [else-branch: 3741 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 3741 | True]
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 28
; [then-branch: 3742 | !(p3_2@591@01) | live]
; [else-branch: 3742 | p3_2@591@01 | live]
(push) ; 29
; [then-branch: 3742 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 29
(push) ; 29
; [else-branch: 3742 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 30
; [then-branch: 3743 | break1_0@569@01 | live]
; [else-branch: 3743 | !(break1_0@569@01) | live]
(push) ; 31
; [then-branch: 3743 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 31
(push) ; 31
; [else-branch: 3743 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=> p3_2@591@01 (and p3_2@591@01 (or (not break1_0@569@01) break1_0@569@01))))
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3744 | p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
; [else-branch: 3744 | !(p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 3744 | p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01))))
; [exec]
; c_5.Container_value := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 29
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 29
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_value@608@01 $Ref)
(assert (= Container_value@608@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 29
; [then-branch: 3745 | !(p4_2@592@01) | live]
; [else-branch: 3745 | p4_2@592@01 | live]
(push) ; 30
; [then-branch: 3745 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 30
(push) ; 30
; [else-branch: 3745 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 31
; [then-branch: 3746 | break2_0@570@01 | live]
; [else-branch: 3746 | !(break2_0@570@01) | live]
(push) ; 32
; [then-branch: 3746 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 32
(push) ; 32
; [else-branch: 3746 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 3747 | False | dead]
; [else-branch: 3747 | True | live]
(push) ; 29
; [else-branch: 3747 | True]
(pop) ; 29
; [eval] !(p4_2 && (!break2_0 && !except2_0))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 29
; [then-branch: 3748 | !(p4_2@592@01) | live]
; [else-branch: 3748 | p4_2@592@01 | live]
(push) ; 30
; [then-branch: 3748 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 30
(push) ; 30
; [else-branch: 3748 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 31
; [then-branch: 3749 | break2_0@570@01 | live]
; [else-branch: 3749 | !(break2_0@570@01) | live]
(push) ; 32
; [then-branch: 3749 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 32
(push) ; 32
; [else-branch: 3749 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3750 | True | live]
; [else-branch: 3750 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 3750 | True]
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 30
; [then-branch: 3751 | !(p3_2@591@01) | live]
; [else-branch: 3751 | p3_2@591@01 | live]
(push) ; 31
; [then-branch: 3751 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 31
(push) ; 31
; [else-branch: 3751 | p3_2@591@01]
; [eval] !break1_0
(push) ; 32
; [then-branch: 3752 | break1_0@569@01 | live]
; [else-branch: 3752 | !(break1_0@569@01) | live]
(push) ; 33
; [then-branch: 3752 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 33
(push) ; 33
; [else-branch: 3752 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (=> p3_2@591@01 (or (not break1_0@569@01) break1_0@569@01)))
(push) ; 30
(set-option :timeout 10)
(assert (not (not (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3753 | p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
; [else-branch: 3753 | !(p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 3753 | p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01))))
; [exec]
; break1_0 := true
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 31
; [then-branch: 3754 | !(p4_2@592@01) | live]
; [else-branch: 3754 | p4_2@592@01 | live]
(push) ; 32
; [then-branch: 3754 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 32
(push) ; 32
; [else-branch: 3754 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 33
; [then-branch: 3755 | break2_0@570@01 | live]
; [else-branch: 3755 | !(break2_0@570@01) | live]
(push) ; 34
; [then-branch: 3755 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 34
(push) ; 34
; [else-branch: 3755 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 3756 | False | dead]
; [else-branch: 3756 | True | live]
(push) ; 31
; [else-branch: 3756 | True]
(pop) ; 31
; [eval] !(p4_2 && (!break2_0 && !except2_0))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 31
; [then-branch: 3757 | !(p4_2@592@01) | live]
; [else-branch: 3757 | p4_2@592@01 | live]
(push) ; 32
; [then-branch: 3757 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 32
(push) ; 32
; [else-branch: 3757 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 33
; [then-branch: 3758 | break2_0@570@01 | live]
; [else-branch: 3758 | !(break2_0@570@01) | live]
(push) ; 34
; [then-branch: 3758 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 34
(push) ; 34
; [else-branch: 3758 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3759 | True | live]
; [else-branch: 3759 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 3759 | True]
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 32
; [then-branch: 3760 | !(p1_5@587@01) | live]
; [else-branch: 3760 | p1_5@587@01 | live]
(push) ; 33
; [then-branch: 3760 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 33
(push) ; 33
; [else-branch: 3760 | p1_5@587@01]
; [eval] !break1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 3761 | False | dead]
; [else-branch: 3761 | True | live]
(push) ; 32
; [else-branch: 3761 | True]
(pop) ; 32
; [eval] !(p1_5 && (!break1_0 && !except1_0))
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 32
; [then-branch: 3762 | !(p1_5@587@01) | live]
; [else-branch: 3762 | p1_5@587@01 | live]
(push) ; 33
; [then-branch: 3762 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 33
(push) ; 33
; [else-branch: 3762 | p1_5@587@01]
; [eval] !break1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3763 | True | live]
; [else-branch: 3763 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 3763 | True]
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 33
; [then-branch: 3764 | !(p2_5@588@01) | live]
; [else-branch: 3764 | p2_5@588@01 | live]
(push) ; 34
; [then-branch: 3764 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 34
(push) ; 34
; [else-branch: 3764 | p2_5@588@01]
; [eval] !break2_0
(push) ; 35
; [then-branch: 3765 | break2_0@570@01 | live]
; [else-branch: 3765 | !(break2_0@570@01) | live]
(push) ; 36
; [then-branch: 3765 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 36
(push) ; 36
; [else-branch: 3765 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (=> p2_5@588@01 (or (not break2_0@570@01) break2_0@570@01)))
; [then-branch: 3766 | False | dead]
; [else-branch: 3766 | True | live]
(push) ; 33
; [else-branch: 3766 | True]
(pop) ; 33
; [eval] !(p2_5 && (!break2_0 && !except2_0))
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 33
; [then-branch: 3767 | !(p2_5@588@01) | live]
; [else-branch: 3767 | p2_5@588@01 | live]
(push) ; 34
; [then-branch: 3767 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 34
(push) ; 34
; [else-branch: 3767 | p2_5@588@01]
; [eval] !break2_0
(push) ; 35
; [then-branch: 3768 | break2_0@570@01 | live]
; [else-branch: 3768 | !(break2_0@570@01) | live]
(push) ; 36
; [then-branch: 3768 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 36
(push) ; 36
; [else-branch: 3768 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3769 | True | live]
; [else-branch: 3769 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 3769 | True]
; [exec]
; assert (p1_5 && (!break1_0 && !except1_0) ==>
;   _loop_termination_flag_0 ==> !true) &&
;   (p2_5 && (!break2_0 && !except2_0) ==>
;   _loop_termination_flag_0_0 ==> !true)
; [eval] p1_5 && (!break1_0 && !except1_0) ==> _loop_termination_flag_0 ==> !true
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 34
; [then-branch: 3770 | !(p1_5@587@01) | live]
; [else-branch: 3770 | p1_5@587@01 | live]
(push) ; 35
; [then-branch: 3770 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 35
(push) ; 35
; [else-branch: 3770 | p1_5@587@01]
; [eval] !break1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 3771 | False | dead]
; [else-branch: 3771 | True | live]
(push) ; 35
; [else-branch: 3771 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_5 && (!break2_0 && !except2_0) ==> _loop_termination_flag_0_0 ==> !true
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 34
; [then-branch: 3772 | !(p2_5@588@01) | live]
; [else-branch: 3772 | p2_5@588@01 | live]
(push) ; 35
; [then-branch: 3772 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 35
(push) ; 35
; [else-branch: 3772 | p2_5@588@01]
; [eval] !break2_0
(push) ; 36
; [then-branch: 3773 | break2_0@570@01 | live]
; [else-branch: 3773 | !(break2_0@570@01) | live]
(push) ; 37
; [then-branch: 3773 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 37
(push) ; 37
; [else-branch: 3773 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 3774 | False | dead]
; [else-branch: 3774 | True | live]
(push) ; 35
; [else-branch: 3774 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_4 && !bypass1_0 ==> true
; [eval] p1_4 && !bypass1_0
(push) ; 34
; [then-branch: 3775 | !(p1_4@475@01) | live]
; [else-branch: 3775 | p1_4@475@01 | live]
(push) ; 35
; [then-branch: 3775 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 35
(push) ; 35
; [else-branch: 3775 | p1_4@475@01]
(assert p1_4@475@01)
; [eval] !bypass1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3776 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3776 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 3776 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> true
; [eval] p2_4 && !bypass2_0
(push) ; 34
; [then-branch: 3777 | !(p2_4@476@01) | live]
; [else-branch: 3777 | p2_4@476@01 | live]
(push) ; 35
; [then-branch: 3777 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 35
(push) ; 35
; [else-branch: 3777 | p2_4@476@01]
(assert p2_4@476@01)
; [eval] !bypass2_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3778 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3778 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 3778 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0
(push) ; 34
; [then-branch: 3779 | !(p1_4@475@01) | live]
; [else-branch: 3779 | p1_4@475@01 | live]
(push) ; 35
; [then-branch: 3779 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 35
(push) ; 35
; [else-branch: 3779 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3780 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3780 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 3780 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0
(push) ; 35
; [then-branch: 3781 | !(p2_4@476@01) | live]
; [else-branch: 3781 | p2_4@476@01 | live]
(push) ; 36
; [then-branch: 3781 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 36
(push) ; 36
; [else-branch: 3781 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3782 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3782 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 3782 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0 ==> issubtype(typeof(c_5.Container_value), int())
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 3783 | !(p1_4@475@01) | live]
; [else-branch: 3783 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 3783 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3783 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3784 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3784 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3784 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] issubtype(typeof(c_5.Container_value), int())
; [eval] typeof(c_5.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(push) ; 36
(assert (not (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (issubtype<Bool> (typeof<PyType> Container_value@608@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (issubtype<Bool> (typeof<PyType> Container_value@608@01) (as int<PyType>  PyType))))
; [eval] p2_4 && !bypass2_0 ==> issubtype(typeof(c_5_0.Container_valuep), int())
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 3785 | !(p2_4@476@01) | live]
; [else-branch: 3785 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 3785 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3785 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3786 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3786 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3786 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] issubtype(typeof(c_5_0.Container_valuep), int())
; [eval] typeof(c_5_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(push) ; 36
(assert (not (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@604@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@604@01) (as int<PyType>  PyType))))
; [eval] p1_4 && !bypass1_0 ==> !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 3787 | !(p1_4@475@01) | live]
; [else-branch: 3787 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 3787 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3787 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3788 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3788 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3788 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] !idle1_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3789 | True | live]
; [else-branch: 3789 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 3789 | True]
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0@571@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0@571@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3790 | _loop_check_before_0@571@01 | live]
; [else-branch: 3790 | !(_loop_check_before_0@571@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 3790 | _loop_check_before_0@571@01]
(assert _loop_check_before_0@571@01)
; [eval] _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 3791 | False | live]
; [else-branch: 3791 | True | live]
(push) ; 43
; [then-branch: 3791 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 3791 | True]
; [eval] perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_158)) == none
; [eval] perm(MustTerminate(_cthread_158))
(push) ; 44
; [then-branch: 3792 | False | live]
; [else-branch: 3792 | True | live]
(push) ; 45
; [then-branch: 3792 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 3792 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 46
; [then-branch: 3793 | False | live]
; [else-branch: 3793 | True | live]
(push) ; 47
; [then-branch: 3793 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 3793 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 48
; [then-branch: 3794 | False | live]
; [else-branch: 3794 | True | live]
(push) ; 49
; [then-branch: 3794 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 3794 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 3795 | False | live]
; [else-branch: 3795 | True | live]
(push) ; 51
; [then-branch: 3795 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 3795 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 3790 | !(_loop_check_before_0@571@01)]
(assert (not _loop_check_before_0@571@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (and
    p1_4@475@01
    (not bypass1_0@542@01)
    (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))))
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 3796 | !(p2_4@476@01) | live]
; [else-branch: 3796 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 3796 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3796 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3797 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3797 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3797 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3798 | True | live]
; [else-branch: 3798 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 3798 | True]
; [eval] _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0_0@572@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0_0@572@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3799 | _loop_check_before_0_0@572@01 | live]
; [else-branch: 3799 | !(_loop_check_before_0_0@572@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 3799 | _loop_check_before_0_0@572@01]
(assert _loop_check_before_0_0@572@01)
; [eval] _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 3800 | False | live]
; [else-branch: 3800 | True | live]
(push) ; 43
; [then-branch: 3800 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 3800 | True]
; [eval] perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_158_0)) == none
; [eval] perm(MustTerminate_0(_cthread_158_0))
(push) ; 44
; [then-branch: 3801 | False | live]
; [else-branch: 3801 | True | live]
(push) ; 45
; [then-branch: 3801 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 3801 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false)
(push) ; 46
; [then-branch: 3802 | False | live]
; [else-branch: 3802 | True | live]
(push) ; 47
; [then-branch: 3802 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 3802 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false)
(push) ; 48
; [then-branch: 3803 | False | live]
; [else-branch: 3803 | True | live]
(push) ; 49
; [then-branch: 3803 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 3803 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 3804 | False | live]
; [else-branch: 3804 | True | live]
(push) ; 51
; [then-branch: 3804 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 3804 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 3799 | !(_loop_check_before_0_0@572@01)]
(assert (not _loop_check_before_0_0@572@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (and
    p2_4@476@01
    (not bypass2_0@543@01)
    (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))))
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0 ==> !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 3805 | !(p1_4@475@01) | live]
; [else-branch: 3805 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 3805 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3805 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3806 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3806 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3806 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !idle1_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3807 | True | live]
; [else-branch: 3807 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 3807 | True]
; [eval] !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0@571@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0@571@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3808 | !(_loop_check_before_0@571@01) | live]
; [else-branch: 3808 | _loop_check_before_0@571@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 3808 | !(_loop_check_before_0@571@01)]
(assert (not _loop_check_before_0@571@01))
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 42
; [then-branch: 3809 | False | live]
; [else-branch: 3809 | True | live]
(push) ; 43
; [then-branch: 3809 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 3809 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 44
; [then-branch: 3810 | False | live]
; [else-branch: 3810 | True | live]
(push) ; 45
; [then-branch: 3810 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 3810 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 3811 | False | live]
; [else-branch: 3811 | True | live]
(push) ; 47
; [then-branch: 3811 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 3811 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 3808 | _loop_check_before_0@571@01]
(assert _loop_check_before_0@571@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (and
    p1_4@475@01
    (not bypass1_0@542@01)
    (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))))
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 3812 | !(p2_4@476@01) | live]
; [else-branch: 3812 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 3812 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3812 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3813 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3813 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3813 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3814 | True | live]
; [else-branch: 3814 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 3814 | True]
; [eval] !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_0_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0_0@572@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0_0@572@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3815 | !(_loop_check_before_0_0@572@01) | live]
; [else-branch: 3815 | _loop_check_before_0_0@572@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 3815 | !(_loop_check_before_0_0@572@01)]
(assert (not _loop_check_before_0_0@572@01))
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false)
(push) ; 42
; [then-branch: 3816 | False | live]
; [else-branch: 3816 | True | live]
(push) ; 43
; [then-branch: 3816 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 3816 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false)
(push) ; 44
; [then-branch: 3817 | False | live]
; [else-branch: 3817 | True | live]
(push) ; 45
; [then-branch: 3817 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 3817 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 3818 | False | live]
; [else-branch: 3818 | True | live]
(push) ; 47
; [then-branch: 3818 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 3818 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 3815 | _loop_check_before_0_0@572@01]
(assert _loop_check_before_0_0@572@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (and
    p2_4@476@01
    (not bypass2_0@543@01)
    (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))))
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] bypass1_0 ==> tmp1_7 == except1_0
(push) ; 36
; [then-branch: 3819 | bypass1_0@542@01 | dead]
; [else-branch: 3819 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3819 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_6 == Exception_res_0
(push) ; 36
; [then-branch: 3820 | bypass1_0@542@01 | dead]
; [else-branch: 3820 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3820 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_10 == break1_0
(push) ; 36
; [then-branch: 3821 | bypass1_0@542@01 | dead]
; [else-branch: 3821 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3821 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_9 == _loop_check_before_0
(push) ; 36
; [then-branch: 3822 | bypass1_0@542@01 | dead]
; [else-branch: 3822 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3822 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_8 == _err
(push) ; 36
; [then-branch: 3823 | bypass1_0@542@01 | dead]
; [else-branch: 3823 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3823 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_5 == _loop_measures_0
(push) ; 36
; [then-branch: 3824 | bypass1_0@542@01 | dead]
; [else-branch: 3824 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3824 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_5 == _loop_measures_0_0
(push) ; 36
; [then-branch: 3825 | bypass2_0@543@01 | dead]
; [else-branch: 3825 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3825 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_8 == _err_1
(push) ; 36
; [then-branch: 3826 | bypass2_0@543@01 | dead]
; [else-branch: 3826 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3826 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_10 == break2_0
(push) ; 36
; [then-branch: 3827 | bypass2_0@543@01 | dead]
; [else-branch: 3827 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3827 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_7 == except2_0
(push) ; 36
; [then-branch: 3828 | bypass2_0@543@01 | dead]
; [else-branch: 3828 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3828 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_6 == Exception_res_0_0
(push) ; 36
; [then-branch: 3829 | bypass2_0@543@01 | dead]
; [else-branch: 3829 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3829 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_9 == _loop_check_before_0_0
(push) ; 36
; [then-branch: 3830 | bypass2_0@543@01 | dead]
; [else-branch: 3830 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3830 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
; [eval] !(p3_2 && (!break1_0 && !except1_0))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 30
; [then-branch: 3831 | !(p3_2@591@01) | live]
; [else-branch: 3831 | p3_2@591@01 | live]
(push) ; 31
; [then-branch: 3831 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 31
(push) ; 31
; [else-branch: 3831 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 32
; [then-branch: 3832 | break1_0@569@01 | live]
; [else-branch: 3832 | !(break1_0@569@01) | live]
(push) ; 33
; [then-branch: 3832 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 33
(push) ; 33
; [else-branch: 3832 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3833 | !(p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
; [else-branch: 3833 | p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 3833 | p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01))))
(pop) ; 30
(pop) ; 29
(pop) ; 28
; [eval] !(p3_2 && (!break1_0 && !except1_0))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 28
; [then-branch: 3834 | !(p3_2@591@01) | live]
; [else-branch: 3834 | p3_2@591@01 | live]
(push) ; 29
; [then-branch: 3834 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 29
(push) ; 29
; [else-branch: 3834 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 30
; [then-branch: 3835 | break1_0@569@01 | live]
; [else-branch: 3835 | !(break1_0@569@01) | live]
(push) ; 31
; [then-branch: 3835 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 31
(push) ; 31
; [else-branch: 3835 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3836 | !(p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
; [else-branch: 3836 | p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 3836 | p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01))))
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 25
; [then-branch: 3837 | !(p2_6@590@01) | live]
; [else-branch: 3837 | p2_6@590@01 | live]
(push) ; 26
; [then-branch: 3837 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3837 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 27
; [then-branch: 3838 | break2_0@570@01 | live]
; [else-branch: 3838 | !(break2_0@570@01) | live]
(push) ; 28
; [then-branch: 3838 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 28
(push) ; 28
; [else-branch: 3838 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3839 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
; [else-branch: 3839 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 3839 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))
(pop) ; 25
(pop) ; 24
(pop) ; 23
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 23
; [then-branch: 3840 | !(p2_6@590@01) | live]
; [else-branch: 3840 | p2_6@590@01 | live]
(push) ; 24
; [then-branch: 3840 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 24
(push) ; 24
; [else-branch: 3840 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 25
; [then-branch: 3841 | break2_0@570@01 | live]
; [else-branch: 3841 | !(break2_0@570@01) | live]
(push) ; 26
; [then-branch: 3841 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 26
(push) ; 26
; [else-branch: 3841 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3842 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
; [else-branch: 3842 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 3842 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))
(pop) ; 23
(pop) ; 22
(pop) ; 21
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 21
; [then-branch: 3843 | !(p2_6@590@01) | live]
; [else-branch: 3843 | p2_6@590@01 | live]
(push) ; 22
; [then-branch: 3843 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3843 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 23
; [then-branch: 3844 | break2_0@570@01 | live]
; [else-branch: 3844 | !(break2_0@570@01) | live]
(push) ; 24
; [then-branch: 3844 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 24
(push) ; 24
; [else-branch: 3844 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3845 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
; [else-branch: 3845 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
(set-option :timeout 0)
(push) ; 21
; [else-branch: 3845 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))
(pop) ; 21
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 3700 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(pop) ; 19
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 19
; [then-branch: 3846 | !(p2_6@590@01) | live]
; [else-branch: 3846 | p2_6@590@01 | live]
(push) ; 20
; [then-branch: 3846 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 20
(push) ; 20
; [else-branch: 3846 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 21
; [then-branch: 3847 | break2_0@570@01 | live]
; [else-branch: 3847 | !(break2_0@570@01) | live]
(push) ; 22
; [then-branch: 3847 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 22
(push) ; 22
; [else-branch: 3847 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3848 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 3848 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 3848 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
; [exec]
; tmp_0 := new()
(declare-const tmp_0@609@01 $Ref)
(assert (not (= tmp_0@609@01 $Ref.null)))
(assert (not (= tmp_0@609@01 _cthread_158_0@478@01)))
(assert (not (= tmp_0@609@01 tmp2_8@526@01)))
(assert (not (= tmp_0@609@01 tmp_0@582@01)))
(assert (not (= tmp_0@609@01 Exception_res_0_0@560@01)))
(assert (not (= tmp_0@609@01 c_0@483@01)))
(assert (not (= tmp_0@609@01 _err@561@01)))
(assert (not (= tmp_0@609@01 b_0@485@01)))
(assert (not
  (=
    tmp_0@609@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))
(assert (not
  (=
    tmp_0@609@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@573@01)))))))
(assert (not (= tmp_0@609@01 b_0_0@486@01)))
(assert (not (= tmp_0@609@01 tmp1_8@525@01)))
(assert (not (= tmp_0@609@01 _cthread_158@477@01)))
(assert (not (= tmp_0@609@01 c_0_0@484@01)))
(assert (not (= tmp_0@609@01 tmp1_6@521@01)))
(assert (not (= tmp_0@609@01 tmp2_6@522@01)))
(assert (not (= tmp_0@609@01 _err_1@563@01)))
(assert (not (= tmp_0@609@01 Exception_res_0@559@01)))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 20
; [then-branch: 3849 | !(p1_6@589@01) | live]
; [else-branch: 3849 | p1_6@589@01 | live]
(push) ; 21
; [then-branch: 3849 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 21
(push) ; 21
; [else-branch: 3849 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 22
; [then-branch: 3850 | break1_0@569@01 | live]
; [else-branch: 3850 | !(break1_0@569@01) | live]
(push) ; 23
; [then-branch: 3850 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 23
(push) ; 23
; [else-branch: 3850 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 3851 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 3851 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(push) ; 20
; [else-branch: 3851 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(pop) ; 20
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 20
; [then-branch: 3852 | !(p1_6@589@01) | live]
; [else-branch: 3852 | p1_6@589@01 | live]
(push) ; 21
; [then-branch: 3852 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 21
(push) ; 21
; [else-branch: 3852 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 22
; [then-branch: 3853 | break1_0@569@01 | live]
; [else-branch: 3853 | !(break1_0@569@01) | live]
(push) ; 23
; [then-branch: 3853 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 23
(push) ; 23
; [else-branch: 3853 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3854 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 3854 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 3854 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01))]
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 21
; [then-branch: 3855 | !(p2_6@590@01) | live]
; [else-branch: 3855 | p2_6@590@01 | live]
(push) ; 22
; [then-branch: 3855 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3855 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 23
; [then-branch: 3856 | break2_0@570@01 | live]
; [else-branch: 3856 | !(break2_0@570@01) | live]
(push) ; 24
; [then-branch: 3856 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 24
(push) ; 24
; [else-branch: 3856 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 3857 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 3857 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(push) ; 21
; [else-branch: 3857 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(pop) ; 21
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 21
; [then-branch: 3858 | !(p2_6@590@01) | live]
; [else-branch: 3858 | p2_6@590@01 | live]
(push) ; 22
; [then-branch: 3858 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 22
(push) ; 22
; [else-branch: 3858 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 23
; [then-branch: 3859 | break2_0@570@01 | live]
; [else-branch: 3859 | !(break2_0@570@01) | live]
(push) ; 24
; [then-branch: 3859 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 24
(push) ; 24
; [else-branch: 3859 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3860 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 3860 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 3860 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01))]
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 22
; [then-branch: 3861 | !(p1_6@589@01) | live]
; [else-branch: 3861 | p1_6@589@01 | live]
(push) ; 23
; [then-branch: 3861 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 23
(push) ; 23
; [else-branch: 3861 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 24
; [then-branch: 3862 | break1_0@569@01 | live]
; [else-branch: 3862 | !(break1_0@569@01) | live]
(push) ; 25
; [then-branch: 3862 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 25
(push) ; 25
; [else-branch: 3862 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 3863 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 3863 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(push) ; 22
; [else-branch: 3863 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(pop) ; 22
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 22
; [then-branch: 3864 | !(p1_6@589@01) | live]
; [else-branch: 3864 | p1_6@589@01 | live]
(push) ; 23
; [then-branch: 3864 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 23
(push) ; 23
; [else-branch: 3864 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 24
; [then-branch: 3865 | break1_0@569@01 | live]
; [else-branch: 3865 | !(break1_0@569@01) | live]
(push) ; 25
; [then-branch: 3865 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 25
(push) ; 25
; [else-branch: 3865 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3866 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 3866 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3866 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01))]
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 23
; [then-branch: 3867 | !(p2_6@590@01) | live]
; [else-branch: 3867 | p2_6@590@01 | live]
(push) ; 24
; [then-branch: 3867 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 24
(push) ; 24
; [else-branch: 3867 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 25
; [then-branch: 3868 | break2_0@570@01 | live]
; [else-branch: 3868 | !(break2_0@570@01) | live]
(push) ; 26
; [then-branch: 3868 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 26
(push) ; 26
; [else-branch: 3868 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 3869 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 3869 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(push) ; 23
; [else-branch: 3869 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(pop) ; 23
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 23
; [then-branch: 3870 | !(p2_6@590@01) | live]
; [else-branch: 3870 | p2_6@590@01 | live]
(push) ; 24
; [then-branch: 3870 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 24
(push) ; 24
; [else-branch: 3870 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 25
; [then-branch: 3871 | break2_0@570@01 | live]
; [else-branch: 3871 | !(break2_0@570@01) | live]
(push) ; 26
; [then-branch: 3871 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 26
(push) ; 26
; [else-branch: 3871 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3872 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 3872 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 3872 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01))]
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 24
; [then-branch: 3873 | !(p1_6@589@01) | live]
; [else-branch: 3873 | p1_6@589@01 | live]
(push) ; 25
; [then-branch: 3873 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 25
(push) ; 25
; [else-branch: 3873 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 26
; [then-branch: 3874 | break1_0@569@01 | live]
; [else-branch: 3874 | !(break1_0@569@01) | live]
(push) ; 27
; [then-branch: 3874 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 27
(push) ; 27
; [else-branch: 3874 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 3875 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 3875 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(push) ; 24
; [else-branch: 3875 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(pop) ; 24
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 24
; [then-branch: 3876 | !(p1_6@589@01) | live]
; [else-branch: 3876 | p1_6@589@01 | live]
(push) ; 25
; [then-branch: 3876 | !(p1_6@589@01)]
(assert (not p1_6@589@01))
(pop) ; 25
(push) ; 25
; [else-branch: 3876 | p1_6@589@01]
(assert p1_6@589@01)
; [eval] !break1_0
(push) ; 26
; [then-branch: 3877 | break1_0@569@01 | live]
; [else-branch: 3877 | !(break1_0@569@01) | live]
(push) ; 27
; [then-branch: 3877 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 27
(push) ; 27
; [else-branch: 3877 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3878 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 3878 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 3878 | !(p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01))]
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 25
; [then-branch: 3879 | !(p2_6@590@01) | live]
; [else-branch: 3879 | p2_6@590@01 | live]
(push) ; 26
; [then-branch: 3879 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3879 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 27
; [then-branch: 3880 | break2_0@570@01 | live]
; [else-branch: 3880 | !(break2_0@570@01) | live]
(push) ; 28
; [then-branch: 3880 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 28
(push) ; 28
; [else-branch: 3880 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 3881 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 3881 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(push) ; 25
; [else-branch: 3881 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(pop) ; 25
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 25
; [then-branch: 3882 | !(p2_6@590@01) | live]
; [else-branch: 3882 | p2_6@590@01 | live]
(push) ; 26
; [then-branch: 3882 | !(p2_6@590@01)]
(assert (not p2_6@590@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3882 | p2_6@590@01]
(assert p2_6@590@01)
; [eval] !break2_0
(push) ; 27
; [then-branch: 3883 | break2_0@570@01 | live]
; [else-branch: 3883 | !(break2_0@570@01) | live]
(push) ; 28
; [then-branch: 3883 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 28
(push) ; 28
; [else-branch: 3883 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3884 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 3884 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 3884 | !(p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01))]
; [exec]
; p1_8 := p3_2 &&
;   (!break1_0 && !except1_0 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p3_2 && (!break1_0 && !except1_0 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 3885 | !(p3_2@591@01) | live]
; [else-branch: 3885 | p3_2@591@01 | live]
(push) ; 27
; [then-branch: 3885 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 27
(push) ; 27
; [else-branch: 3885 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 28
; [then-branch: 3886 | break1_0@569@01 | live]
; [else-branch: 3886 | !(break1_0@569@01) | live]
(push) ; 29
; [then-branch: 3886 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 29
(push) ; 29
; [else-branch: 3886 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 30
; [then-branch: 3887 | except1_0@562@01 | live]
; [else-branch: 3887 | !(except1_0@562@01) | live]
(push) ; 31
; [then-branch: 3887 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 31
(push) ; 31
; [else-branch: 3887 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p3_2@591@01
  (and
    p3_2@591@01
    (=>
      (not break1_0@569@01)
      (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01)))
    (or (not break1_0@569@01) break1_0@569@01))))
(assert (or p3_2@591@01 (not p3_2@591@01)))
; [exec]
; p2_8 := p4_2 &&
;   (!break2_0 && !except2_0 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_2 && (!break2_0 && !except2_0 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 3888 | !(p4_2@592@01) | live]
; [else-branch: 3888 | p4_2@592@01 | live]
(push) ; 27
; [then-branch: 3888 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 27
(push) ; 27
; [else-branch: 3888 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 28
; [then-branch: 3889 | break2_0@570@01 | live]
; [else-branch: 3889 | !(break2_0@570@01) | live]
(push) ; 29
; [then-branch: 3889 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 29
(push) ; 29
; [else-branch: 3889 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(push) ; 30
; [then-branch: 3890 | except2_0@564@01 | live]
; [else-branch: 3890 | !(except2_0@564@01) | live]
(push) ; 31
; [then-branch: 3890 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 31
(push) ; 31
; [else-branch: 3890 | !(except2_0@564@01)]
(assert (not except2_0@564@01))
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p4_2@592@01
  (and
    p4_2@592@01
    (=>
      (not break2_0@570@01)
      (and (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01)))
    (or (not break2_0@570@01) break2_0@570@01))))
(assert (or p4_2@592@01 (not p4_2@592@01)))
; [exec]
; p3_4 := p3_2 &&
;   (!break1_0 && !except1_0 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p3_2 && (!break1_0 && !except1_0 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 3891 | !(p3_2@591@01) | live]
; [else-branch: 3891 | p3_2@591@01 | live]
(push) ; 27
; [then-branch: 3891 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 27
(push) ; 27
; [else-branch: 3891 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 28
; [then-branch: 3892 | break1_0@569@01 | live]
; [else-branch: 3892 | !(break1_0@569@01) | live]
(push) ; 29
; [then-branch: 3892 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 29
(push) ; 29
; [else-branch: 3892 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 30
; [then-branch: 3893 | except1_0@562@01 | live]
; [else-branch: 3893 | !(except1_0@562@01) | live]
(push) ; 31
; [then-branch: 3893 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 31
(push) ; 31
; [else-branch: 3893 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p3_4@610@01 Bool)
(assert (=
  p3_4@610@01
  (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
; [exec]
; p4_4 := p4_2 &&
;   (!break2_0 && !except2_0 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_2 && (!break2_0 && !except2_0 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 3894 | !(p4_2@592@01) | live]
; [else-branch: 3894 | p4_2@592@01 | live]
(push) ; 27
; [then-branch: 3894 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 27
(push) ; 27
; [else-branch: 3894 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 28
; [then-branch: 3895 | break2_0@570@01 | live]
; [else-branch: 3895 | !(break2_0@570@01) | live]
(push) ; 29
; [then-branch: 3895 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 29
(push) ; 29
; [else-branch: 3895 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(push) ; 30
; [then-branch: 3896 | except2_0@564@01 | live]
; [else-branch: 3896 | !(except2_0@564@01) | live]
(push) ; 31
; [then-branch: 3896 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 31
(push) ; 31
; [else-branch: 3896 | !(except2_0@564@01)]
(assert (not except2_0@564@01))
; [eval] !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p4_4@611@01 Bool)
(assert (=
  p4_4@611@01
  (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
; [eval] p1_8 && (!break1_0 && !except1_0)
; [then-branch: 3897 | False | dead]
; [else-branch: 3897 | True | live]
(push) ; 26
; [else-branch: 3897 | True]
(pop) ; 26
; [eval] !(p1_8 && (!break1_0 && !except1_0))
; [eval] p1_8 && (!break1_0 && !except1_0)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3898 | True | live]
; [else-branch: 3898 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 3898 | True]
; [eval] p2_8 && (!break2_0 && !except2_0)
; [then-branch: 3899 | False | dead]
; [else-branch: 3899 | True | live]
(push) ; 27
; [else-branch: 3899 | True]
(pop) ; 27
; [eval] !(p2_8 && (!break2_0 && !except2_0))
; [eval] p2_8 && (!break2_0 && !except2_0)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3900 | True | live]
; [else-branch: 3900 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 3900 | True]
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 28
; [then-branch: 3901 | !(p3_2@591@01) | live]
; [else-branch: 3901 | p3_2@591@01 | live]
(push) ; 29
; [then-branch: 3901 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 29
(push) ; 29
; [else-branch: 3901 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 30
; [then-branch: 3902 | break1_0@569@01 | live]
; [else-branch: 3902 | !(break1_0@569@01) | live]
(push) ; 31
; [then-branch: 3902 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 31
(push) ; 31
; [else-branch: 3902 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=> p3_2@591@01 (and p3_2@591@01 (or (not break1_0@569@01) break1_0@569@01))))
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3903 | p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
; [else-branch: 3903 | !(p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 3903 | p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01))))
; [exec]
; c_5.Container_value := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 29
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 29
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_value@612@01 $Ref)
(assert (= Container_value@612@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 29
; [then-branch: 3904 | !(p4_2@592@01) | live]
; [else-branch: 3904 | p4_2@592@01 | live]
(push) ; 30
; [then-branch: 3904 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 30
(push) ; 30
; [else-branch: 3904 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 31
; [then-branch: 3905 | break2_0@570@01 | live]
; [else-branch: 3905 | !(break2_0@570@01) | live]
(push) ; 32
; [then-branch: 3905 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 32
(push) ; 32
; [else-branch: 3905 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p4_2@592@01 (and p4_2@592@01 (or (not break2_0@570@01) break2_0@570@01))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3906 | p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
; [else-branch: 3906 | !(p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 3906 | p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01))))
; [exec]
; c_5_0.Container_valuep := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 30
(pop) ; 30
; Joined path conditions
(declare-const Container_valuep@613@01 $Ref)
(assert (= Container_valuep@613@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 30
; [then-branch: 3907 | !(p3_2@591@01) | live]
; [else-branch: 3907 | p3_2@591@01 | live]
(push) ; 31
; [then-branch: 3907 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 31
(push) ; 31
; [else-branch: 3907 | p3_2@591@01]
; [eval] !break1_0
(push) ; 32
; [then-branch: 3908 | break1_0@569@01 | live]
; [else-branch: 3908 | !(break1_0@569@01) | live]
(push) ; 33
; [then-branch: 3908 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 33
(push) ; 33
; [else-branch: 3908 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (=> p3_2@591@01 (or (not break1_0@569@01) break1_0@569@01)))
(push) ; 30
(set-option :timeout 10)
(assert (not (not (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3909 | p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
; [else-branch: 3909 | !(p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 3909 | p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01))))
; [exec]
; break1_0 := true
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 31
; [then-branch: 3910 | !(p4_2@592@01) | live]
; [else-branch: 3910 | p4_2@592@01 | live]
(push) ; 32
; [then-branch: 3910 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 32
(push) ; 32
; [else-branch: 3910 | p4_2@592@01]
; [eval] !break2_0
(push) ; 33
; [then-branch: 3911 | break2_0@570@01 | live]
; [else-branch: 3911 | !(break2_0@570@01) | live]
(push) ; 34
; [then-branch: 3911 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 34
(push) ; 34
; [else-branch: 3911 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (=> p4_2@592@01 (or (not break2_0@570@01) break2_0@570@01)))
(push) ; 31
(set-option :timeout 10)
(assert (not (not (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3912 | p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
; [else-branch: 3912 | !(p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 3912 | p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01))))
; [exec]
; break2_0 := true
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 32
; [then-branch: 3913 | !(p1_5@587@01) | live]
; [else-branch: 3913 | p1_5@587@01 | live]
(push) ; 33
; [then-branch: 3913 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 33
(push) ; 33
; [else-branch: 3913 | p1_5@587@01]
; [eval] !break1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 3914 | False | dead]
; [else-branch: 3914 | True | live]
(push) ; 32
; [else-branch: 3914 | True]
(pop) ; 32
; [eval] !(p1_5 && (!break1_0 && !except1_0))
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 32
; [then-branch: 3915 | !(p1_5@587@01) | live]
; [else-branch: 3915 | p1_5@587@01 | live]
(push) ; 33
; [then-branch: 3915 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 33
(push) ; 33
; [else-branch: 3915 | p1_5@587@01]
; [eval] !break1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3916 | True | live]
; [else-branch: 3916 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 3916 | True]
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 33
; [then-branch: 3917 | !(p2_5@588@01) | live]
; [else-branch: 3917 | p2_5@588@01 | live]
(push) ; 34
; [then-branch: 3917 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 34
(push) ; 34
; [else-branch: 3917 | p2_5@588@01]
; [eval] !break2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 3918 | False | dead]
; [else-branch: 3918 | True | live]
(push) ; 33
; [else-branch: 3918 | True]
(pop) ; 33
; [eval] !(p2_5 && (!break2_0 && !except2_0))
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 33
; [then-branch: 3919 | !(p2_5@588@01) | live]
; [else-branch: 3919 | p2_5@588@01 | live]
(push) ; 34
; [then-branch: 3919 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 34
(push) ; 34
; [else-branch: 3919 | p2_5@588@01]
; [eval] !break2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3920 | True | live]
; [else-branch: 3920 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 3920 | True]
; [exec]
; assert (p1_5 && (!break1_0 && !except1_0) ==>
;   _loop_termination_flag_0 ==> !true) &&
;   (p2_5 && (!break2_0 && !except2_0) ==>
;   _loop_termination_flag_0_0 ==> !true)
; [eval] p1_5 && (!break1_0 && !except1_0) ==> _loop_termination_flag_0 ==> !true
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 34
; [then-branch: 3921 | !(p1_5@587@01) | live]
; [else-branch: 3921 | p1_5@587@01 | live]
(push) ; 35
; [then-branch: 3921 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 35
(push) ; 35
; [else-branch: 3921 | p1_5@587@01]
; [eval] !break1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 3922 | False | dead]
; [else-branch: 3922 | True | live]
(push) ; 35
; [else-branch: 3922 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_5 && (!break2_0 && !except2_0) ==> _loop_termination_flag_0_0 ==> !true
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 34
; [then-branch: 3923 | !(p2_5@588@01) | live]
; [else-branch: 3923 | p2_5@588@01 | live]
(push) ; 35
; [then-branch: 3923 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 35
(push) ; 35
; [else-branch: 3923 | p2_5@588@01]
; [eval] !break2_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 3924 | False | dead]
; [else-branch: 3924 | True | live]
(push) ; 35
; [else-branch: 3924 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_4 && !bypass1_0 ==> true
; [eval] p1_4 && !bypass1_0
(push) ; 34
; [then-branch: 3925 | !(p1_4@475@01) | live]
; [else-branch: 3925 | p1_4@475@01 | live]
(push) ; 35
; [then-branch: 3925 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 35
(push) ; 35
; [else-branch: 3925 | p1_4@475@01]
(assert p1_4@475@01)
; [eval] !bypass1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3926 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3926 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 3926 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> true
; [eval] p2_4 && !bypass2_0
(push) ; 34
; [then-branch: 3927 | !(p2_4@476@01) | live]
; [else-branch: 3927 | p2_4@476@01 | live]
(push) ; 35
; [then-branch: 3927 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 35
(push) ; 35
; [else-branch: 3927 | p2_4@476@01]
(assert p2_4@476@01)
; [eval] !bypass2_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3928 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3928 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 3928 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0
(push) ; 34
; [then-branch: 3929 | !(p1_4@475@01) | live]
; [else-branch: 3929 | p1_4@475@01 | live]
(push) ; 35
; [then-branch: 3929 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 35
(push) ; 35
; [else-branch: 3929 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3930 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3930 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 3930 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0
(push) ; 35
; [then-branch: 3931 | !(p2_4@476@01) | live]
; [else-branch: 3931 | p2_4@476@01 | live]
(push) ; 36
; [then-branch: 3931 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 36
(push) ; 36
; [else-branch: 3931 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3932 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3932 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 3932 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0 ==> issubtype(typeof(c_5.Container_value), int())
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 3933 | !(p1_4@475@01) | live]
; [else-branch: 3933 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 3933 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3933 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3934 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3934 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3934 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] issubtype(typeof(c_5.Container_value), int())
; [eval] typeof(c_5.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(push) ; 36
(assert (not (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (issubtype<Bool> (typeof<PyType> Container_value@612@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (issubtype<Bool> (typeof<PyType> Container_value@612@01) (as int<PyType>  PyType))))
; [eval] p2_4 && !bypass2_0 ==> issubtype(typeof(c_5_0.Container_valuep), int())
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 3935 | !(p2_4@476@01) | live]
; [else-branch: 3935 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 3935 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3935 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3936 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3936 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3936 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] issubtype(typeof(c_5_0.Container_valuep), int())
; [eval] typeof(c_5_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(push) ; 36
(assert (not (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@613@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@613@01) (as int<PyType>  PyType))))
; [eval] p1_4 && !bypass1_0 ==> !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 3937 | !(p1_4@475@01) | live]
; [else-branch: 3937 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 3937 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3937 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3938 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3938 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3938 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] !idle1_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3939 | True | live]
; [else-branch: 3939 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 3939 | True]
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0@571@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0@571@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3940 | _loop_check_before_0@571@01 | live]
; [else-branch: 3940 | !(_loop_check_before_0@571@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 3940 | _loop_check_before_0@571@01]
(assert _loop_check_before_0@571@01)
; [eval] _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 3941 | False | live]
; [else-branch: 3941 | True | live]
(push) ; 43
; [then-branch: 3941 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 3941 | True]
; [eval] perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_158)) == none
; [eval] perm(MustTerminate(_cthread_158))
(push) ; 44
; [then-branch: 3942 | False | live]
; [else-branch: 3942 | True | live]
(push) ; 45
; [then-branch: 3942 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 3942 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 46
; [then-branch: 3943 | False | live]
; [else-branch: 3943 | True | live]
(push) ; 47
; [then-branch: 3943 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 3943 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 48
; [then-branch: 3944 | False | live]
; [else-branch: 3944 | True | live]
(push) ; 49
; [then-branch: 3944 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 3944 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 3945 | False | live]
; [else-branch: 3945 | True | live]
(push) ; 51
; [then-branch: 3945 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 3945 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 3940 | !(_loop_check_before_0@571@01)]
(assert (not _loop_check_before_0@571@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (and
    p1_4@475@01
    (not bypass1_0@542@01)
    (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))))
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 3946 | !(p2_4@476@01) | live]
; [else-branch: 3946 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 3946 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3946 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3947 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3947 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3947 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3948 | True | live]
; [else-branch: 3948 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 3948 | True]
; [eval] _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0_0@572@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0_0@572@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3949 | _loop_check_before_0_0@572@01 | live]
; [else-branch: 3949 | !(_loop_check_before_0_0@572@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 3949 | _loop_check_before_0_0@572@01]
(assert _loop_check_before_0_0@572@01)
; [eval] _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 3950 | False | live]
; [else-branch: 3950 | True | live]
(push) ; 43
; [then-branch: 3950 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 3950 | True]
; [eval] perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_158_0)) == none
; [eval] perm(MustTerminate_0(_cthread_158_0))
(push) ; 44
; [then-branch: 3951 | False | live]
; [else-branch: 3951 | True | live]
(push) ; 45
; [then-branch: 3951 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 3951 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false)
(push) ; 46
; [then-branch: 3952 | False | live]
; [else-branch: 3952 | True | live]
(push) ; 47
; [then-branch: 3952 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 3952 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false)
(push) ; 48
; [then-branch: 3953 | False | live]
; [else-branch: 3953 | True | live]
(push) ; 49
; [then-branch: 3953 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 3953 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 3954 | False | live]
; [else-branch: 3954 | True | live]
(push) ; 51
; [then-branch: 3954 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 3954 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 3949 | !(_loop_check_before_0_0@572@01)]
(assert (not _loop_check_before_0_0@572@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (and
    p2_4@476@01
    (not bypass2_0@543@01)
    (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))))
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0 ==> !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 3955 | !(p1_4@475@01) | live]
; [else-branch: 3955 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 3955 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3955 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3956 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 3956 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3956 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !idle1_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3957 | True | live]
; [else-branch: 3957 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 3957 | True]
; [eval] !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0@571@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0@571@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3958 | !(_loop_check_before_0@571@01) | live]
; [else-branch: 3958 | _loop_check_before_0@571@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 3958 | !(_loop_check_before_0@571@01)]
(assert (not _loop_check_before_0@571@01))
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 42
; [then-branch: 3959 | False | live]
; [else-branch: 3959 | True | live]
(push) ; 43
; [then-branch: 3959 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 3959 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 44
; [then-branch: 3960 | False | live]
; [else-branch: 3960 | True | live]
(push) ; 45
; [then-branch: 3960 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 3960 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 3961 | False | live]
; [else-branch: 3961 | True | live]
(push) ; 47
; [then-branch: 3961 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 3961 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 3958 | _loop_check_before_0@571@01]
(assert _loop_check_before_0@571@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (and
    p1_4@475@01
    (not bypass1_0@542@01)
    (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))))
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 3962 | !(p2_4@476@01) | live]
; [else-branch: 3962 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 3962 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3962 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3963 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 3963 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3963 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3964 | True | live]
; [else-branch: 3964 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 3964 | True]
; [eval] !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_0_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0_0@572@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0_0@572@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3965 | !(_loop_check_before_0_0@572@01) | live]
; [else-branch: 3965 | _loop_check_before_0_0@572@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 3965 | !(_loop_check_before_0_0@572@01)]
(assert (not _loop_check_before_0_0@572@01))
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false)
(push) ; 42
; [then-branch: 3966 | False | live]
; [else-branch: 3966 | True | live]
(push) ; 43
; [then-branch: 3966 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 3966 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false)
(push) ; 44
; [then-branch: 3967 | False | live]
; [else-branch: 3967 | True | live]
(push) ; 45
; [then-branch: 3967 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 3967 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 3968 | False | live]
; [else-branch: 3968 | True | live]
(push) ; 47
; [then-branch: 3968 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 3968 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 3965 | _loop_check_before_0_0@572@01]
(assert _loop_check_before_0_0@572@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (and
    p2_4@476@01
    (not bypass2_0@543@01)
    (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))))
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] bypass1_0 ==> tmp1_7 == except1_0
(push) ; 36
; [then-branch: 3969 | bypass1_0@542@01 | dead]
; [else-branch: 3969 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3969 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_6 == Exception_res_0
(push) ; 36
; [then-branch: 3970 | bypass1_0@542@01 | dead]
; [else-branch: 3970 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3970 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_10 == break1_0
(push) ; 36
; [then-branch: 3971 | bypass1_0@542@01 | dead]
; [else-branch: 3971 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3971 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_9 == _loop_check_before_0
(push) ; 36
; [then-branch: 3972 | bypass1_0@542@01 | dead]
; [else-branch: 3972 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3972 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_8 == _err
(push) ; 36
; [then-branch: 3973 | bypass1_0@542@01 | dead]
; [else-branch: 3973 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3973 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_5 == _loop_measures_0
(push) ; 36
; [then-branch: 3974 | bypass1_0@542@01 | dead]
; [else-branch: 3974 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 3974 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_5 == _loop_measures_0_0
(push) ; 36
; [then-branch: 3975 | bypass2_0@543@01 | dead]
; [else-branch: 3975 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3975 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_8 == _err_1
(push) ; 36
; [then-branch: 3976 | bypass2_0@543@01 | dead]
; [else-branch: 3976 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3976 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_10 == break2_0
(push) ; 36
; [then-branch: 3977 | bypass2_0@543@01 | dead]
; [else-branch: 3977 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3977 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_7 == except2_0
(push) ; 36
; [then-branch: 3978 | bypass2_0@543@01 | dead]
; [else-branch: 3978 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3978 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_6 == Exception_res_0_0
(push) ; 36
; [then-branch: 3979 | bypass2_0@543@01 | dead]
; [else-branch: 3979 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3979 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_9 == _loop_check_before_0_0
(push) ; 36
; [then-branch: 3980 | bypass2_0@543@01 | dead]
; [else-branch: 3980 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 3980 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
; [eval] !(p4_2 && (!break2_0 && !except2_0))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 31
; [then-branch: 3981 | !(p4_2@592@01) | live]
; [else-branch: 3981 | p4_2@592@01 | live]
(push) ; 32
; [then-branch: 3981 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 32
(push) ; 32
; [else-branch: 3981 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 33
; [then-branch: 3982 | break2_0@570@01 | live]
; [else-branch: 3982 | !(break2_0@570@01) | live]
(push) ; 34
; [then-branch: 3982 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 34
(push) ; 34
; [else-branch: 3982 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3983 | !(p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
; [else-branch: 3983 | p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
(set-option :timeout 0)
(push) ; 31
; [else-branch: 3983 | p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01))))
(pop) ; 31
(pop) ; 30
; [eval] !(p3_2 && (!break1_0 && !except1_0))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 30
; [then-branch: 3984 | !(p3_2@591@01) | live]
; [else-branch: 3984 | p3_2@591@01 | live]
(push) ; 31
; [then-branch: 3984 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 31
(push) ; 31
; [else-branch: 3984 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 32
; [then-branch: 3985 | break1_0@569@01 | live]
; [else-branch: 3985 | !(break1_0@569@01) | live]
(push) ; 33
; [then-branch: 3985 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 33
(push) ; 33
; [else-branch: 3985 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3986 | !(p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
; [else-branch: 3986 | p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 3986 | p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01))))
(pop) ; 30
(pop) ; 29
; [eval] !(p4_2 && (!break2_0 && !except2_0))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 29
; [then-branch: 3987 | !(p4_2@592@01) | live]
; [else-branch: 3987 | p4_2@592@01 | live]
(push) ; 30
; [then-branch: 3987 | !(p4_2@592@01)]
(assert (not p4_2@592@01))
(pop) ; 30
(push) ; 30
; [else-branch: 3987 | p4_2@592@01]
(assert p4_2@592@01)
; [eval] !break2_0
(push) ; 31
; [then-branch: 3988 | break2_0@570@01 | live]
; [else-branch: 3988 | !(break2_0@570@01) | live]
(push) ; 32
; [then-branch: 3988 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 32
(push) ; 32
; [else-branch: 3988 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3989 | !(p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
; [else-branch: 3989 | p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 3989 | p4_2@592@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p4_2@592@01 (and (not break2_0@570@01) (not except2_0@564@01))))
(pop) ; 29
(pop) ; 28
; [eval] !(p3_2 && (!break1_0 && !except1_0))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 28
; [then-branch: 3990 | !(p3_2@591@01) | live]
; [else-branch: 3990 | p3_2@591@01 | live]
(push) ; 29
; [then-branch: 3990 | !(p3_2@591@01)]
(assert (not p3_2@591@01))
(pop) ; 29
(push) ; 29
; [else-branch: 3990 | p3_2@591@01]
(assert p3_2@591@01)
; [eval] !break1_0
(push) ; 30
; [then-branch: 3991 | break1_0@569@01 | live]
; [else-branch: 3991 | !(break1_0@569@01) | live]
(push) ; 31
; [then-branch: 3991 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 31
(push) ; 31
; [else-branch: 3991 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3992 | !(p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
; [else-branch: 3992 | p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 3992 | p3_2@591@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p3_2@591@01 (and (not break1_0@569@01) (not except1_0@562@01))))
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 3848 | p2_6@590@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@590@01 (and (not break2_0@570@01) (not except2_0@564@01))))
(pop) ; 19
(pop) ; 18
(push) ; 18
; [else-branch: 3697 | p1_6@589@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@589@01 (and (not break1_0@569@01) (not except1_0@562@01))))
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 3366 | !(p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(assert (not (and p2_5@588@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(pop) ; 15
; [eval] !(p2_5 && (!break2_0 && !except2_0))
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 15
; [then-branch: 3993 | !(p2_5@588@01) | live]
; [else-branch: 3993 | p2_5@588@01 | live]
(push) ; 16
; [then-branch: 3993 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 16
(push) ; 16
; [else-branch: 3993 | p2_5@588@01]
(assert p2_5@588@01)
; [eval] !break2_0
(push) ; 17
; [then-branch: 3994 | break2_0@570@01 | live]
; [else-branch: 3994 | !(break2_0@570@01) | live]
(push) ; 18
; [then-branch: 3994 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 18
(push) ; 18
; [else-branch: 3994 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (and p2_5@588@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and p2_5@588@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3995 | !(p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 3995 | p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 3995 | !(p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(assert (not (and p2_5@588@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
; [exec]
; p1_6 := p1_5 && (!break1_0 && !except1_0 && bool___unbox__(b_5))
; [eval] p1_5 && (!break1_0 && !except1_0 && bool___unbox__(b_5))
(push) ; 16
; [then-branch: 3996 | !(p1_5@587@01) | live]
; [else-branch: 3996 | p1_5@587@01 | live]
(push) ; 17
; [then-branch: 3996 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 17
(push) ; 17
; [else-branch: 3996 | p1_5@587@01]
; [eval] !break1_0
(push) ; 18
; [then-branch: 3997 | break1_0@569@01 | live]
; [else-branch: 3997 | !(break1_0@569@01) | live]
(push) ; 19
; [then-branch: 3997 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 19
(push) ; 19
; [else-branch: 3997 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 20
; [then-branch: 3998 | except1_0@562@01 | live]
; [else-branch: 3998 | !(except1_0@562@01) | live]
(push) ; 21
; [then-branch: 3998 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 21
(push) ; 21
; [else-branch: 3998 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] bool___unbox__(b_5)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0@485@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@485@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_0@562@01)
  (and
    (not except1_0@562@01)
    (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_0@485@01))))
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and
    (not break1_0@569@01)
    (=>
      (not except1_0@562@01)
      (and
        (not except1_0@562@01)
        (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_0@485@01)))
    (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_5@587@01
  (and
    (=>
      (not break1_0@569@01)
      (and
        (not break1_0@569@01)
        (=>
          (not except1_0@562@01)
          (and
            (not except1_0@562@01)
            (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
            (bool___unbox__%precondition $Snap.unit b_0@485@01)))
        (or (not except1_0@562@01) except1_0@562@01)))
    (or (not break1_0@569@01) break1_0@569@01))))
(declare-const p1_6@614@01 Bool)
(assert (=
  p1_6@614@01
  (and
    p1_5@587@01
    (and
      (not break1_0@569@01)
      (and (not except1_0@562@01) (bool___unbox__ $Snap.unit b_0@485@01))))))
; [exec]
; p2_6 := p2_5 && (!break2_0 && !except2_0 && bool___unbox__(b_5_0))
; [eval] p2_5 && (!break2_0 && !except2_0 && bool___unbox__(b_5_0))
(push) ; 16
; [then-branch: 3999 | !(p2_5@588@01) | live]
; [else-branch: 3999 | p2_5@588@01 | live]
(push) ; 17
; [then-branch: 3999 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 17
(push) ; 17
; [else-branch: 3999 | p2_5@588@01]
(assert p2_5@588@01)
; [eval] !break2_0
(push) ; 18
; [then-branch: 4000 | break2_0@570@01 | live]
; [else-branch: 4000 | !(break2_0@570@01) | live]
(push) ; 19
; [then-branch: 4000 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 19
(push) ; 19
; [else-branch: 4000 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(push) ; 20
; [then-branch: 4001 | except2_0@564@01 | live]
; [else-branch: 4001 | !(except2_0@564@01) | live]
(push) ; 21
; [then-branch: 4001 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 21
(push) ; 21
; [else-branch: 4001 | !(except2_0@564@01)]
(assert (not except2_0@564@01))
; [eval] bool___unbox__(b_5_0)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0_0@486@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0_0@486@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_0@564@01)
  (and
    (not except2_0@564@01)
    (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_0_0@486@01))))
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and
    (not break2_0@570@01)
    (=>
      (not except2_0@564@01)
      (and
        (not except2_0@564@01)
        (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_0_0@486@01)))
    (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_5@588@01
  (and
    p2_5@588@01
    (=>
      (not break2_0@570@01)
      (and
        (not break2_0@570@01)
        (=>
          (not except2_0@564@01)
          (and
            (not except2_0@564@01)
            (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
            (bool___unbox__%precondition $Snap.unit b_0_0@486@01)))
        (or (not except2_0@564@01) except2_0@564@01)))
    (or (not break2_0@570@01) break2_0@570@01))))
(declare-const p2_6@615@01 Bool)
(assert (=
  p2_6@615@01
  (and
    p2_5@588@01
    (and
      (not break2_0@570@01)
      (and (not except2_0@564@01) (bool___unbox__ $Snap.unit b_0_0@486@01))))))
; [exec]
; p3_2 := p1_5 && (!break1_0 && !except1_0 && !bool___unbox__(b_5))
; [eval] p1_5 && (!break1_0 && !except1_0 && !bool___unbox__(b_5))
(push) ; 16
; [then-branch: 4002 | !(p1_5@587@01) | live]
; [else-branch: 4002 | p1_5@587@01 | live]
(push) ; 17
; [then-branch: 4002 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 17
(push) ; 17
; [else-branch: 4002 | p1_5@587@01]
; [eval] !break1_0
(push) ; 18
; [then-branch: 4003 | break1_0@569@01 | live]
; [else-branch: 4003 | !(break1_0@569@01) | live]
(push) ; 19
; [then-branch: 4003 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 19
(push) ; 19
; [else-branch: 4003 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 20
; [then-branch: 4004 | except1_0@562@01 | live]
; [else-branch: 4004 | !(except1_0@562@01) | live]
(push) ; 21
; [then-branch: 4004 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 21
(push) ; 21
; [else-branch: 4004 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] !bool___unbox__(b_5)
; [eval] bool___unbox__(b_5)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0@485@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@485@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_0@562@01)
  (and
    (not except1_0@562@01)
    (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_0@485@01))))
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and
    (not break1_0@569@01)
    (=>
      (not except1_0@562@01)
      (and
        (not except1_0@562@01)
        (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_0@485@01)))
    (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3_2@616@01 Bool)
(assert (=
  p3_2@616@01
  (and
    p1_5@587@01
    (and
      (not break1_0@569@01)
      (and (not except1_0@562@01) (not (bool___unbox__ $Snap.unit b_0@485@01)))))))
; [exec]
; p4_2 := p2_5 && (!break2_0 && !except2_0 && !bool___unbox__(b_5_0))
; [eval] p2_5 && (!break2_0 && !except2_0 && !bool___unbox__(b_5_0))
(push) ; 16
; [then-branch: 4005 | !(p2_5@588@01) | live]
; [else-branch: 4005 | p2_5@588@01 | live]
(push) ; 17
; [then-branch: 4005 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 17
(push) ; 17
; [else-branch: 4005 | p2_5@588@01]
(assert p2_5@588@01)
; [eval] !break2_0
(push) ; 18
; [then-branch: 4006 | break2_0@570@01 | live]
; [else-branch: 4006 | !(break2_0@570@01) | live]
(push) ; 19
; [then-branch: 4006 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 19
(push) ; 19
; [else-branch: 4006 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(push) ; 20
; [then-branch: 4007 | except2_0@564@01 | live]
; [else-branch: 4007 | !(except2_0@564@01) | live]
(push) ; 21
; [then-branch: 4007 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 21
(push) ; 21
; [else-branch: 4007 | !(except2_0@564@01)]
(assert (not except2_0@564@01))
; [eval] !bool___unbox__(b_5_0)
; [eval] bool___unbox__(b_5_0)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0_0@486@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0_0@486@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_0@564@01)
  (and
    (not except2_0@564@01)
    (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_0_0@486@01))))
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and
    (not break2_0@570@01)
    (=>
      (not except2_0@564@01)
      (and
        (not except2_0@564@01)
        (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_0_0@486@01)))
    (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4_2@617@01 Bool)
(assert (=
  p4_2@617@01
  (and
    p2_5@588@01
    (and
      (not break2_0@570@01)
      (and (not except2_0@564@01) (not (bool___unbox__ $Snap.unit b_0_0@486@01)))))))
; [exec]
; p1_7 := p1_6 &&
;   (!break1_0 && !except1_0 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p1_6 && (!break1_0 && !except1_0 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 4008 | !(p1_6@614@01) | live]
; [else-branch: 4008 | p1_6@614@01 | live]
(push) ; 17
; [then-branch: 4008 | !(p1_6@614@01)]
(assert (not p1_6@614@01))
(pop) ; 17
(push) ; 17
; [else-branch: 4008 | p1_6@614@01]
(assert p1_6@614@01)
; [eval] !break1_0
(push) ; 18
; [then-branch: 4009 | break1_0@569@01 | live]
; [else-branch: 4009 | !(break1_0@569@01) | live]
(push) ; 19
; [then-branch: 4009 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 19
(push) ; 19
; [else-branch: 4009 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 20
; [then-branch: 4010 | except1_0@562@01 | live]
; [else-branch: 4010 | !(except1_0@562@01) | live]
(push) ; 21
; [then-branch: 4010 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 21
(push) ; 21
; [else-branch: 4010 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_6@614@01
  (and
    p1_6@614@01
    (=>
      (not break1_0@569@01)
      (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01)))
    (or (not break1_0@569@01) break1_0@569@01))))
(assert (or p1_6@614@01 (not p1_6@614@01)))
; [exec]
; p2_7 := p2_6 &&
;   (!break2_0 && !except2_0 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_6 && (!break2_0 && !except2_0 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 4011 | !(p2_6@615@01) | live]
; [else-branch: 4011 | p2_6@615@01 | live]
(push) ; 17
; [then-branch: 4011 | !(p2_6@615@01)]
(assert (not p2_6@615@01))
(pop) ; 17
(push) ; 17
; [else-branch: 4011 | p2_6@615@01]
(assert p2_6@615@01)
; [eval] !break2_0
(push) ; 18
; [then-branch: 4012 | break2_0@570@01 | live]
; [else-branch: 4012 | !(break2_0@570@01) | live]
(push) ; 19
; [then-branch: 4012 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 19
(push) ; 19
; [else-branch: 4012 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(push) ; 20
; [then-branch: 4013 | except2_0@564@01 | live]
; [else-branch: 4013 | !(except2_0@564@01) | live]
(push) ; 21
; [then-branch: 4013 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 21
(push) ; 21
; [else-branch: 4013 | !(except2_0@564@01)]
(assert (not except2_0@564@01))
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_6@615@01
  (and
    p2_6@615@01
    (=>
      (not break2_0@570@01)
      (and (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01)))
    (or (not break2_0@570@01) break2_0@570@01))))
(assert (or p2_6@615@01 (not p2_6@615@01)))
; [exec]
; p3_3 := p1_6 &&
;   (!break1_0 && !except1_0 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p1_6 && (!break1_0 && !except1_0 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 4014 | !(p1_6@614@01) | live]
; [else-branch: 4014 | p1_6@614@01 | live]
(push) ; 17
; [then-branch: 4014 | !(p1_6@614@01)]
(assert (not p1_6@614@01))
(pop) ; 17
(push) ; 17
; [else-branch: 4014 | p1_6@614@01]
(assert p1_6@614@01)
; [eval] !break1_0
(push) ; 18
; [then-branch: 4015 | break1_0@569@01 | live]
; [else-branch: 4015 | !(break1_0@569@01) | live]
(push) ; 19
; [then-branch: 4015 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 19
(push) ; 19
; [else-branch: 4015 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 20
; [then-branch: 4016 | except1_0@562@01 | live]
; [else-branch: 4016 | !(except1_0@562@01) | live]
(push) ; 21
; [then-branch: 4016 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 21
(push) ; 21
; [else-branch: 4016 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3_3@618@01 Bool)
(assert (=
  p3_3@618@01
  (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
; [exec]
; p4_3 := p2_6 &&
;   (!break2_0 && !except2_0 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_6 && (!break2_0 && !except2_0 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 4017 | !(p2_6@615@01) | live]
; [else-branch: 4017 | p2_6@615@01 | live]
(push) ; 17
; [then-branch: 4017 | !(p2_6@615@01)]
(assert (not p2_6@615@01))
(pop) ; 17
(push) ; 17
; [else-branch: 4017 | p2_6@615@01]
(assert p2_6@615@01)
; [eval] !break2_0
(push) ; 18
; [then-branch: 4018 | break2_0@570@01 | live]
; [else-branch: 4018 | !(break2_0@570@01) | live]
(push) ; 19
; [then-branch: 4018 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 19
(push) ; 19
; [else-branch: 4018 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(push) ; 20
; [then-branch: 4019 | except2_0@564@01 | live]
; [else-branch: 4019 | !(except2_0@564@01) | live]
(push) ; 21
; [then-branch: 4019 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 21
(push) ; 21
; [else-branch: 4019 | !(except2_0@564@01)]
(assert (not except2_0@564@01))
; [eval] !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4_3@619@01 Bool)
(assert (=
  p4_3@619@01
  (and p2_6@615@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
; [eval] p1_7 && (!break1_0 && !except1_0)
; [then-branch: 4020 | False | dead]
; [else-branch: 4020 | True | live]
(push) ; 16
; [else-branch: 4020 | True]
(pop) ; 16
; [eval] !(p1_7 && (!break1_0 && !except1_0))
; [eval] p1_7 && (!break1_0 && !except1_0)
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4021 | True | live]
; [else-branch: 4021 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 4021 | True]
; [eval] p2_7 && (!break2_0 && !except2_0)
; [then-branch: 4022 | False | dead]
; [else-branch: 4022 | True | live]
(push) ; 17
; [else-branch: 4022 | True]
(pop) ; 17
; [eval] !(p2_7 && (!break2_0 && !except2_0))
; [eval] p2_7 && (!break2_0 && !except2_0)
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4023 | True | live]
; [else-branch: 4023 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 4023 | True]
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 18
; [then-branch: 4024 | !(p1_6@614@01) | live]
; [else-branch: 4024 | p1_6@614@01 | live]
(push) ; 19
; [then-branch: 4024 | !(p1_6@614@01)]
(assert (not p1_6@614@01))
(pop) ; 19
(push) ; 19
; [else-branch: 4024 | p1_6@614@01]
(assert p1_6@614@01)
; [eval] !break1_0
(push) ; 20
; [then-branch: 4025 | break1_0@569@01 | live]
; [else-branch: 4025 | !(break1_0@569@01) | live]
(push) ; 21
; [then-branch: 4025 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 21
(push) ; 21
; [else-branch: 4025 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> p1_6@614@01 (and p1_6@614@01 (or (not break1_0@569@01) break1_0@569@01))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4026 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
; [else-branch: 4026 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 4026 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01))))
; [exec]
; c_5.Container_value := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 19
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 19
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(declare-const Container_value@620@01 $Ref)
(assert (= Container_value@620@01 (__prim__int___box__ $Snap.unit 7)))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 19
; [then-branch: 4027 | !(p2_6@615@01) | live]
; [else-branch: 4027 | p2_6@615@01 | live]
(push) ; 20
; [then-branch: 4027 | !(p2_6@615@01)]
(assert (not p2_6@615@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4027 | p2_6@615@01]
(assert p2_6@615@01)
; [eval] !break2_0
(push) ; 21
; [then-branch: 4028 | break2_0@570@01 | live]
; [else-branch: 4028 | !(break2_0@570@01) | live]
(push) ; 22
; [then-branch: 4028 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 22
(push) ; 22
; [else-branch: 4028 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=> p2_6@615@01 (and p2_6@615@01 (or (not break2_0@570@01) break2_0@570@01))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_6@615@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4029 | p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 4029 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(set-option :timeout 0)
(push) ; 19
; [else-branch: 4029 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(assert (not (and p2_6@615@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(pop) ; 19
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 19
; [then-branch: 4030 | !(p2_6@615@01) | live]
; [else-branch: 4030 | p2_6@615@01 | live]
(push) ; 20
; [then-branch: 4030 | !(p2_6@615@01)]
(assert (not p2_6@615@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4030 | p2_6@615@01]
(assert p2_6@615@01)
; [eval] !break2_0
(push) ; 21
; [then-branch: 4031 | break2_0@570@01 | live]
; [else-branch: 4031 | !(break2_0@570@01) | live]
(push) ; 22
; [then-branch: 4031 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 22
(push) ; 22
; [else-branch: 4031 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_6@615@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_6@615@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4032 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 4032 | p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 4032 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(assert (not (and p2_6@615@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
; [exec]
; tmp_0 := new()
(declare-const tmp_0@621@01 $Ref)
(assert (not (= tmp_0@621@01 $Ref.null)))
(assert (not (= tmp_0@621@01 _cthread_158_0@478@01)))
(assert (not (= tmp_0@621@01 tmp2_8@526@01)))
(assert (not (= tmp_0@621@01 Container_value@620@01)))
(assert (not (= tmp_0@621@01 tmp_0@582@01)))
(assert (not (= tmp_0@621@01 Exception_res_0_0@560@01)))
(assert (not (= tmp_0@621@01 c_0@483@01)))
(assert (not (= tmp_0@621@01 _err@561@01)))
(assert (not (= tmp_0@621@01 b_0@485@01)))
(assert (not
  (=
    tmp_0@621@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))
(assert (not (= tmp_0@621@01 b_0_0@486@01)))
(assert (not (= tmp_0@621@01 tmp1_8@525@01)))
(assert (not (= tmp_0@621@01 _cthread_158@477@01)))
(assert (not (= tmp_0@621@01 c_0_0@484@01)))
(assert (not (= tmp_0@621@01 tmp1_6@521@01)))
(assert (not (= tmp_0@621@01 tmp2_6@522@01)))
(assert (not (= tmp_0@621@01 _err_1@563@01)))
(assert (not (= tmp_0@621@01 Exception_res_0@559@01)))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 20
; [then-branch: 4033 | !(p1_6@614@01) | live]
; [else-branch: 4033 | p1_6@614@01 | live]
(push) ; 21
; [then-branch: 4033 | !(p1_6@614@01)]
(assert (not p1_6@614@01))
(pop) ; 21
(push) ; 21
; [else-branch: 4033 | p1_6@614@01]
; [eval] !break1_0
(push) ; 22
; [then-branch: 4034 | break1_0@569@01 | live]
; [else-branch: 4034 | !(break1_0@569@01) | live]
(push) ; 23
; [then-branch: 4034 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 23
(push) ; 23
; [else-branch: 4034 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=> p1_6@614@01 (or (not break1_0@569@01) break1_0@569@01)))
(push) ; 20
(set-option :timeout 10)
(assert (not (not (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4035 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
; [else-branch: 4035 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 4035 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01))))
; [exec]
; Exception_res_0 := tmp_0
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 21
; [then-branch: 4036 | !(p2_6@615@01) | live]
; [else-branch: 4036 | p2_6@615@01 | live]
(push) ; 22
; [then-branch: 4036 | !(p2_6@615@01)]
(assert (not p2_6@615@01))
(pop) ; 22
(push) ; 22
; [else-branch: 4036 | p2_6@615@01]
(assert p2_6@615@01)
; [eval] !break2_0
(push) ; 23
; [then-branch: 4037 | break2_0@570@01 | live]
; [else-branch: 4037 | !(break2_0@570@01) | live]
(push) ; 24
; [then-branch: 4037 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 24
(push) ; 24
; [else-branch: 4037 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 4038 | p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 4038 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(push) ; 21
; [else-branch: 4038 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(pop) ; 21
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 21
; [then-branch: 4039 | !(p2_6@615@01) | live]
; [else-branch: 4039 | p2_6@615@01 | live]
(push) ; 22
; [then-branch: 4039 | !(p2_6@615@01)]
(assert (not p2_6@615@01))
(pop) ; 22
(push) ; 22
; [else-branch: 4039 | p2_6@615@01]
(assert p2_6@615@01)
; [eval] !break2_0
(push) ; 23
; [then-branch: 4040 | break2_0@570@01 | live]
; [else-branch: 4040 | !(break2_0@570@01) | live]
(push) ; 24
; [then-branch: 4040 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 24
(push) ; 24
; [else-branch: 4040 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_6@615@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4041 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 4041 | p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 4041 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01))]
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 22
; [then-branch: 4042 | !(p1_6@614@01) | live]
; [else-branch: 4042 | p1_6@614@01 | live]
(push) ; 23
; [then-branch: 4042 | !(p1_6@614@01)]
(assert (not p1_6@614@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4042 | p1_6@614@01]
; [eval] !break1_0
(push) ; 24
; [then-branch: 4043 | break1_0@569@01 | live]
; [else-branch: 4043 | !(break1_0@569@01) | live]
(push) ; 25
; [then-branch: 4043 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 25
(push) ; 25
; [else-branch: 4043 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4044 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
; [else-branch: 4044 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 4044 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01))))
; [exec]
; inhale typeof(Exception_res_0) == Exception()
(declare-const $t@622@01 $Snap)
(assert (= $t@622@01 $Snap.unit))
; [eval] typeof(Exception_res_0) == Exception()
; [eval] typeof(Exception_res_0)
; [eval] Exception()
(assert (= (typeof<PyType> tmp_0@621@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_6 && (!break2_0 && !except2_0)
(set-option :timeout 0)
(push) ; 23
; [then-branch: 4045 | !(p2_6@615@01) | live]
; [else-branch: 4045 | p2_6@615@01 | live]
(push) ; 24
; [then-branch: 4045 | !(p2_6@615@01)]
(assert (not p2_6@615@01))
(pop) ; 24
(push) ; 24
; [else-branch: 4045 | p2_6@615@01]
(assert p2_6@615@01)
; [eval] !break2_0
(push) ; 25
; [then-branch: 4046 | break2_0@570@01 | live]
; [else-branch: 4046 | !(break2_0@570@01) | live]
(push) ; 26
; [then-branch: 4046 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 26
(push) ; 26
; [else-branch: 4046 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 4047 | p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 4047 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(push) ; 23
; [else-branch: 4047 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(pop) ; 23
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 23
; [then-branch: 4048 | !(p2_6@615@01) | live]
; [else-branch: 4048 | p2_6@615@01 | live]
(push) ; 24
; [then-branch: 4048 | !(p2_6@615@01)]
(assert (not p2_6@615@01))
(pop) ; 24
(push) ; 24
; [else-branch: 4048 | p2_6@615@01]
(assert p2_6@615@01)
; [eval] !break2_0
(push) ; 25
; [then-branch: 4049 | break2_0@570@01 | live]
; [else-branch: 4049 | !(break2_0@570@01) | live]
(push) ; 26
; [then-branch: 4049 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 26
(push) ; 26
; [else-branch: 4049 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_6@615@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4050 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 4050 | p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 4050 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01))]
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 24
; [then-branch: 4051 | !(p1_6@614@01) | live]
; [else-branch: 4051 | p1_6@614@01 | live]
(push) ; 25
; [then-branch: 4051 | !(p1_6@614@01)]
(assert (not p1_6@614@01))
(pop) ; 25
(push) ; 25
; [else-branch: 4051 | p1_6@614@01]
; [eval] !break1_0
(push) ; 26
; [then-branch: 4052 | break1_0@569@01 | live]
; [else-branch: 4052 | !(break1_0@569@01) | live]
(push) ; 27
; [then-branch: 4052 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 27
(push) ; 27
; [else-branch: 4052 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4053 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
; [else-branch: 4053 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 4053 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01))))
; [exec]
; _err := Exception_res_0
; [exec]
; except1_0 := true
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 25
; [then-branch: 4054 | !(p2_6@615@01) | live]
; [else-branch: 4054 | p2_6@615@01 | live]
(push) ; 26
; [then-branch: 4054 | !(p2_6@615@01)]
(assert (not p2_6@615@01))
(pop) ; 26
(push) ; 26
; [else-branch: 4054 | p2_6@615@01]
(assert p2_6@615@01)
; [eval] !break2_0
(push) ; 27
; [then-branch: 4055 | break2_0@570@01 | live]
; [else-branch: 4055 | !(break2_0@570@01) | live]
(push) ; 28
; [then-branch: 4055 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 28
(push) ; 28
; [else-branch: 4055 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 4056 | p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 4056 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(push) ; 25
; [else-branch: 4056 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(pop) ; 25
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 25
; [then-branch: 4057 | !(p2_6@615@01) | live]
; [else-branch: 4057 | p2_6@615@01 | live]
(push) ; 26
; [then-branch: 4057 | !(p2_6@615@01)]
(assert (not p2_6@615@01))
(pop) ; 26
(push) ; 26
; [else-branch: 4057 | p2_6@615@01]
(assert p2_6@615@01)
; [eval] !break2_0
(push) ; 27
; [then-branch: 4058 | break2_0@570@01 | live]
; [else-branch: 4058 | !(break2_0@570@01) | live]
(push) ; 28
; [then-branch: 4058 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 28
(push) ; 28
; [else-branch: 4058 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_6@615@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4059 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 4059 | p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 4059 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01))]
; [exec]
; p1_8 := p3_2 &&
;   (!break1_0 && !except1_0 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p3_2 && (!break1_0 && !except1_0 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 4060 | !(p3_2@616@01) | live]
; [else-branch: 4060 | p3_2@616@01 | live]
(push) ; 27
; [then-branch: 4060 | !(p3_2@616@01)]
(assert (not p3_2@616@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4060 | p3_2@616@01]
(assert p3_2@616@01)
; [eval] !break1_0
(push) ; 28
; [then-branch: 4061 | break1_0@569@01 | live]
; [else-branch: 4061 | !(break1_0@569@01) | live]
(push) ; 29
; [then-branch: 4061 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 29
(push) ; 29
; [else-branch: 4061 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=> p3_2@616@01 (and p3_2@616@01 (or (not break1_0@569@01) break1_0@569@01))))
(assert (or p3_2@616@01 (not p3_2@616@01)))
; [exec]
; p2_8 := p4_2 &&
;   (!break2_0 && !except2_0 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_2 && (!break2_0 && !except2_0 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 4062 | !(p4_2@617@01) | live]
; [else-branch: 4062 | p4_2@617@01 | live]
(push) ; 27
; [then-branch: 4062 | !(p4_2@617@01)]
(assert (not p4_2@617@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4062 | p4_2@617@01]
(assert p4_2@617@01)
; [eval] !break2_0
(push) ; 28
; [then-branch: 4063 | break2_0@570@01 | live]
; [else-branch: 4063 | !(break2_0@570@01) | live]
(push) ; 29
; [then-branch: 4063 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 29
(push) ; 29
; [else-branch: 4063 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(push) ; 30
; [then-branch: 4064 | except2_0@564@01 | live]
; [else-branch: 4064 | !(except2_0@564@01) | live]
(push) ; 31
; [then-branch: 4064 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 31
(push) ; 31
; [else-branch: 4064 | !(except2_0@564@01)]
(assert (not except2_0@564@01))
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p4_2@617@01
  (and
    p4_2@617@01
    (=>
      (not break2_0@570@01)
      (and (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01)))
    (or (not break2_0@570@01) break2_0@570@01))))
(assert (or p4_2@617@01 (not p4_2@617@01)))
; [exec]
; p3_4 := p3_2 &&
;   (!break1_0 && !except1_0 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p3_2 && (!break1_0 && !except1_0 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 4065 | !(p3_2@616@01) | live]
; [else-branch: 4065 | p3_2@616@01 | live]
(push) ; 27
; [then-branch: 4065 | !(p3_2@616@01)]
(assert (not p3_2@616@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4065 | p3_2@616@01]
(assert p3_2@616@01)
; [eval] !break1_0
(push) ; 28
; [then-branch: 4066 | break1_0@569@01 | live]
; [else-branch: 4066 | !(break1_0@569@01) | live]
(push) ; 29
; [then-branch: 4066 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 29
(push) ; 29
; [else-branch: 4066 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [exec]
; p4_4 := p4_2 &&
;   (!break2_0 && !except2_0 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_2 && (!break2_0 && !except2_0 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 4067 | !(p4_2@617@01) | live]
; [else-branch: 4067 | p4_2@617@01 | live]
(push) ; 27
; [then-branch: 4067 | !(p4_2@617@01)]
(assert (not p4_2@617@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4067 | p4_2@617@01]
(assert p4_2@617@01)
; [eval] !break2_0
(push) ; 28
; [then-branch: 4068 | break2_0@570@01 | live]
; [else-branch: 4068 | !(break2_0@570@01) | live]
(push) ; 29
; [then-branch: 4068 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 29
(push) ; 29
; [else-branch: 4068 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(push) ; 30
; [then-branch: 4069 | except2_0@564@01 | live]
; [else-branch: 4069 | !(except2_0@564@01) | live]
(push) ; 31
; [then-branch: 4069 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 31
(push) ; 31
; [else-branch: 4069 | !(except2_0@564@01)]
(assert (not except2_0@564@01))
; [eval] !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p4_4@623@01 Bool)
(assert (=
  p4_4@623@01
  (and p4_2@617@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
; [eval] p1_8 && (!break1_0 && !except1_0)
; [then-branch: 4070 | False | dead]
; [else-branch: 4070 | True | live]
(push) ; 26
; [else-branch: 4070 | True]
(pop) ; 26
; [eval] !(p1_8 && (!break1_0 && !except1_0))
; [eval] p1_8 && (!break1_0 && !except1_0)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4071 | True | live]
; [else-branch: 4071 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 4071 | True]
; [eval] p2_8 && (!break2_0 && !except2_0)
; [then-branch: 4072 | False | dead]
; [else-branch: 4072 | True | live]
(push) ; 27
; [else-branch: 4072 | True]
(pop) ; 27
; [eval] !(p2_8 && (!break2_0 && !except2_0))
; [eval] p2_8 && (!break2_0 && !except2_0)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4073 | True | live]
; [else-branch: 4073 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 4073 | True]
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 28
; [then-branch: 4074 | !(p3_2@616@01) | live]
; [else-branch: 4074 | p3_2@616@01 | live]
(push) ; 29
; [then-branch: 4074 | !(p3_2@616@01)]
(assert (not p3_2@616@01))
(pop) ; 29
(push) ; 29
; [else-branch: 4074 | p3_2@616@01]
(assert p3_2@616@01)
; [eval] !break1_0
(push) ; 30
; [then-branch: 4075 | break1_0@569@01 | live]
; [else-branch: 4075 | !(break1_0@569@01) | live]
(push) ; 31
; [then-branch: 4075 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 31
(push) ; 31
; [else-branch: 4075 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 4076 | False | dead]
; [else-branch: 4076 | True | live]
(push) ; 28
; [else-branch: 4076 | True]
(pop) ; 28
; [eval] !(p3_2 && (!break1_0 && !except1_0))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 28
; [then-branch: 4077 | !(p3_2@616@01) | live]
; [else-branch: 4077 | p3_2@616@01 | live]
(push) ; 29
; [then-branch: 4077 | !(p3_2@616@01)]
(assert (not p3_2@616@01))
(pop) ; 29
(push) ; 29
; [else-branch: 4077 | p3_2@616@01]
(assert p3_2@616@01)
; [eval] !break1_0
(push) ; 30
; [then-branch: 4078 | break1_0@569@01 | live]
; [else-branch: 4078 | !(break1_0@569@01) | live]
(push) ; 31
; [then-branch: 4078 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 31
(push) ; 31
; [else-branch: 4078 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4079 | True | live]
; [else-branch: 4079 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 4079 | True]
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 29
; [then-branch: 4080 | !(p4_2@617@01) | live]
; [else-branch: 4080 | p4_2@617@01 | live]
(push) ; 30
; [then-branch: 4080 | !(p4_2@617@01)]
(assert (not p4_2@617@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4080 | p4_2@617@01]
(assert p4_2@617@01)
; [eval] !break2_0
(push) ; 31
; [then-branch: 4081 | break2_0@570@01 | live]
; [else-branch: 4081 | !(break2_0@570@01) | live]
(push) ; 32
; [then-branch: 4081 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 32
(push) ; 32
; [else-branch: 4081 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p4_2@617@01 (and p4_2@617@01 (or (not break2_0@570@01) break2_0@570@01))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4_2@617@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4082 | p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 4082 | !(p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 4082 | !(p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(assert (not (and p4_2@617@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(pop) ; 29
; [eval] !(p4_2 && (!break2_0 && !except2_0))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 29
; [then-branch: 4083 | !(p4_2@617@01) | live]
; [else-branch: 4083 | p4_2@617@01 | live]
(push) ; 30
; [then-branch: 4083 | !(p4_2@617@01)]
(assert (not p4_2@617@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4083 | p4_2@617@01]
(assert p4_2@617@01)
; [eval] !break2_0
(push) ; 31
; [then-branch: 4084 | break2_0@570@01 | live]
; [else-branch: 4084 | !(break2_0@570@01) | live]
(push) ; 32
; [then-branch: 4084 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 32
(push) ; 32
; [else-branch: 4084 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4_2@617@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4_2@617@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4085 | !(p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 4085 | p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 4085 | !(p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(assert (not (and p4_2@617@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 30
; [then-branch: 4086 | !(p3_2@616@01) | live]
; [else-branch: 4086 | p3_2@616@01 | live]
(push) ; 31
; [then-branch: 4086 | !(p3_2@616@01)]
(assert (not p3_2@616@01))
(pop) ; 31
(push) ; 31
; [else-branch: 4086 | p3_2@616@01]
(assert p3_2@616@01)
; [eval] !break1_0
(push) ; 32
; [then-branch: 4087 | break1_0@569@01 | live]
; [else-branch: 4087 | !(break1_0@569@01) | live]
(push) ; 33
; [then-branch: 4087 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 33
(push) ; 33
; [else-branch: 4087 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 4088 | False | dead]
; [else-branch: 4088 | True | live]
(push) ; 30
; [else-branch: 4088 | True]
(pop) ; 30
; [eval] !(p3_2 && (!break1_0 && !except1_0))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 30
; [then-branch: 4089 | !(p3_2@616@01) | live]
; [else-branch: 4089 | p3_2@616@01 | live]
(push) ; 31
; [then-branch: 4089 | !(p3_2@616@01)]
(assert (not p3_2@616@01))
(pop) ; 31
(push) ; 31
; [else-branch: 4089 | p3_2@616@01]
(assert p3_2@616@01)
; [eval] !break1_0
(push) ; 32
; [then-branch: 4090 | break1_0@569@01 | live]
; [else-branch: 4090 | !(break1_0@569@01) | live]
(push) ; 33
; [then-branch: 4090 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 33
(push) ; 33
; [else-branch: 4090 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4091 | True | live]
; [else-branch: 4091 | False | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 4091 | True]
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 31
; [then-branch: 4092 | !(p4_2@617@01) | live]
; [else-branch: 4092 | p4_2@617@01 | live]
(push) ; 32
; [then-branch: 4092 | !(p4_2@617@01)]
(assert (not p4_2@617@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4092 | p4_2@617@01]
(assert p4_2@617@01)
; [eval] !break2_0
(push) ; 33
; [then-branch: 4093 | break2_0@570@01 | live]
; [else-branch: 4093 | !(break2_0@570@01) | live]
(push) ; 34
; [then-branch: 4093 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 34
(push) ; 34
; [else-branch: 4093 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 4094 | p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 4094 | !(p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(push) ; 31
; [else-branch: 4094 | !(p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(pop) ; 31
; [eval] !(p4_2 && (!break2_0 && !except2_0))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 31
; [then-branch: 4095 | !(p4_2@617@01) | live]
; [else-branch: 4095 | p4_2@617@01 | live]
(push) ; 32
; [then-branch: 4095 | !(p4_2@617@01)]
(assert (not p4_2@617@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4095 | p4_2@617@01]
(assert p4_2@617@01)
; [eval] !break2_0
(push) ; 33
; [then-branch: 4096 | break2_0@570@01 | live]
; [else-branch: 4096 | !(break2_0@570@01) | live]
(push) ; 34
; [then-branch: 4096 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 34
(push) ; 34
; [else-branch: 4096 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4_2@617@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4097 | !(p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 4097 | p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 4097 | !(p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01))]
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 32
; [then-branch: 4098 | !(p1_5@587@01) | live]
; [else-branch: 4098 | p1_5@587@01 | live]
(push) ; 33
; [then-branch: 4098 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 33
(push) ; 33
; [else-branch: 4098 | p1_5@587@01]
; [eval] !break1_0
(push) ; 34
; [then-branch: 4099 | break1_0@569@01 | live]
; [else-branch: 4099 | !(break1_0@569@01) | live]
(push) ; 35
; [then-branch: 4099 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 35
(push) ; 35
; [else-branch: 4099 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (=> p1_5@587@01 (or (not break1_0@569@01) break1_0@569@01)))
; [then-branch: 4100 | False | dead]
; [else-branch: 4100 | True | live]
(push) ; 32
; [else-branch: 4100 | True]
(pop) ; 32
; [eval] !(p1_5 && (!break1_0 && !except1_0))
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 32
; [then-branch: 4101 | !(p1_5@587@01) | live]
; [else-branch: 4101 | p1_5@587@01 | live]
(push) ; 33
; [then-branch: 4101 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 33
(push) ; 33
; [else-branch: 4101 | p1_5@587@01]
; [eval] !break1_0
(push) ; 34
; [then-branch: 4102 | break1_0@569@01 | live]
; [else-branch: 4102 | !(break1_0@569@01) | live]
(push) ; 35
; [then-branch: 4102 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 35
(push) ; 35
; [else-branch: 4102 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4103 | True | live]
; [else-branch: 4103 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 4103 | True]
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 33
; [then-branch: 4104 | !(p2_5@588@01) | live]
; [else-branch: 4104 | p2_5@588@01 | live]
(push) ; 34
; [then-branch: 4104 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 34
(push) ; 34
; [else-branch: 4104 | p2_5@588@01]
(assert p2_5@588@01)
; [eval] !break2_0
(push) ; 35
; [then-branch: 4105 | break2_0@570@01 | live]
; [else-branch: 4105 | !(break2_0@570@01) | live]
(push) ; 36
; [then-branch: 4105 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 36
(push) ; 36
; [else-branch: 4105 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 4106 | p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 4106 | !(p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(push) ; 33
; [else-branch: 4106 | !(p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(pop) ; 33
; [eval] !(p2_5 && (!break2_0 && !except2_0))
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 33
; [then-branch: 4107 | !(p2_5@588@01) | live]
; [else-branch: 4107 | p2_5@588@01 | live]
(push) ; 34
; [then-branch: 4107 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 34
(push) ; 34
; [else-branch: 4107 | p2_5@588@01]
(assert p2_5@588@01)
; [eval] !break2_0
(push) ; 35
; [then-branch: 4108 | break2_0@570@01 | live]
; [else-branch: 4108 | !(break2_0@570@01) | live]
(push) ; 36
; [then-branch: 4108 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 36
(push) ; 36
; [else-branch: 4108 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not (and p2_5@588@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4109 | !(p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 4109 | p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 4109 | !(p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01))]
; [exec]
; assert (p1_5 && (!break1_0 && !except1_0) ==>
;   _loop_termination_flag_0 ==> !true) &&
;   (p2_5 && (!break2_0 && !except2_0) ==>
;   _loop_termination_flag_0_0 ==> !true)
; [eval] p1_5 && (!break1_0 && !except1_0) ==> _loop_termination_flag_0 ==> !true
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 34
; [then-branch: 4110 | !(p1_5@587@01) | live]
; [else-branch: 4110 | p1_5@587@01 | live]
(push) ; 35
; [then-branch: 4110 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4110 | p1_5@587@01]
; [eval] !break1_0
(push) ; 36
; [then-branch: 4111 | break1_0@569@01 | live]
; [else-branch: 4111 | !(break1_0@569@01) | live]
(push) ; 37
; [then-branch: 4111 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 37
(push) ; 37
; [else-branch: 4111 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 4112 | False | dead]
; [else-branch: 4112 | True | live]
(push) ; 35
; [else-branch: 4112 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_5 && (!break2_0 && !except2_0) ==> _loop_termination_flag_0_0 ==> !true
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 34
; [then-branch: 4113 | !(p2_5@588@01) | live]
; [else-branch: 4113 | p2_5@588@01 | live]
(push) ; 35
; [then-branch: 4113 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4113 | p2_5@588@01]
(assert p2_5@588@01)
; [eval] !break2_0
(push) ; 36
; [then-branch: 4114 | break2_0@570@01 | live]
; [else-branch: 4114 | !(break2_0@570@01) | live]
(push) ; 37
; [then-branch: 4114 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 37
(push) ; 37
; [else-branch: 4114 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 4115 | p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 4115 | !(p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(push) ; 35
; [else-branch: 4115 | !(p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_4 && !bypass1_0 ==> true
; [eval] p1_4 && !bypass1_0
(push) ; 34
; [then-branch: 4116 | !(p1_4@475@01) | live]
; [else-branch: 4116 | p1_4@475@01 | live]
(push) ; 35
; [then-branch: 4116 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4116 | p1_4@475@01]
(assert p1_4@475@01)
; [eval] !bypass1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4117 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 4117 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4117 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> true
; [eval] p2_4 && !bypass2_0
(push) ; 34
; [then-branch: 4118 | !(p2_4@476@01) | live]
; [else-branch: 4118 | p2_4@476@01 | live]
(push) ; 35
; [then-branch: 4118 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4118 | p2_4@476@01]
(assert p2_4@476@01)
; [eval] !bypass2_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4119 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 4119 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4119 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0
(push) ; 34
; [then-branch: 4120 | !(p1_4@475@01) | live]
; [else-branch: 4120 | p1_4@475@01 | live]
(push) ; 35
; [then-branch: 4120 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4120 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4121 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 4121 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 4121 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0
(push) ; 35
; [then-branch: 4122 | !(p2_4@476@01) | live]
; [else-branch: 4122 | p2_4@476@01 | live]
(push) ; 36
; [then-branch: 4122 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 36
(push) ; 36
; [else-branch: 4122 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4123 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 4123 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4123 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0 ==> issubtype(typeof(c_5.Container_value), int())
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 4124 | !(p1_4@475@01) | live]
; [else-branch: 4124 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 4124 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4124 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4125 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 4125 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4125 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] issubtype(typeof(c_5.Container_value), int())
; [eval] typeof(c_5.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(push) ; 36
(assert (not (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (issubtype<Bool> (typeof<PyType> Container_value@620@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (issubtype<Bool> (typeof<PyType> Container_value@620@01) (as int<PyType>  PyType))))
; [eval] p2_4 && !bypass2_0 ==> issubtype(typeof(c_5_0.Container_valuep), int())
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 4126 | !(p2_4@476@01) | live]
; [else-branch: 4126 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 4126 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4126 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4127 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 4127 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4127 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] issubtype(typeof(c_5_0.Container_valuep), int())
; [eval] typeof(c_5_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0 ==> !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 4128 | !(p1_4@475@01) | live]
; [else-branch: 4128 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 4128 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4128 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4129 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 4129 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4129 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] !idle1_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4130 | True | live]
; [else-branch: 4130 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4130 | True]
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0@571@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0@571@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4131 | _loop_check_before_0@571@01 | live]
; [else-branch: 4131 | !(_loop_check_before_0@571@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4131 | _loop_check_before_0@571@01]
(assert _loop_check_before_0@571@01)
; [eval] _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 4132 | False | live]
; [else-branch: 4132 | True | live]
(push) ; 43
; [then-branch: 4132 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 4132 | True]
; [eval] perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_158)) == none
; [eval] perm(MustTerminate(_cthread_158))
(push) ; 44
; [then-branch: 4133 | False | live]
; [else-branch: 4133 | True | live]
(push) ; 45
; [then-branch: 4133 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 4133 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 46
; [then-branch: 4134 | False | live]
; [else-branch: 4134 | True | live]
(push) ; 47
; [then-branch: 4134 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 4134 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 48
; [then-branch: 4135 | False | live]
; [else-branch: 4135 | True | live]
(push) ; 49
; [then-branch: 4135 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 4135 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 4136 | False | live]
; [else-branch: 4136 | True | live]
(push) ; 51
; [then-branch: 4136 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 4136 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 4131 | !(_loop_check_before_0@571@01)]
(assert (not _loop_check_before_0@571@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (and
    p1_4@475@01
    (not bypass1_0@542@01)
    (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))))
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 4137 | !(p2_4@476@01) | live]
; [else-branch: 4137 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 4137 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4137 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4138 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 4138 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4138 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4139 | True | live]
; [else-branch: 4139 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4139 | True]
; [eval] _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0_0@572@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0_0@572@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4140 | _loop_check_before_0_0@572@01 | live]
; [else-branch: 4140 | !(_loop_check_before_0_0@572@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4140 | _loop_check_before_0_0@572@01]
(assert _loop_check_before_0_0@572@01)
; [eval] _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 4141 | False | live]
; [else-branch: 4141 | True | live]
(push) ; 43
; [then-branch: 4141 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 4141 | True]
; [eval] perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_158_0)) == none
; [eval] perm(MustTerminate_0(_cthread_158_0))
(push) ; 44
; [then-branch: 4142 | False | live]
; [else-branch: 4142 | True | live]
(push) ; 45
; [then-branch: 4142 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 4142 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false)
(push) ; 46
; [then-branch: 4143 | False | live]
; [else-branch: 4143 | True | live]
(push) ; 47
; [then-branch: 4143 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 4143 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false)
(push) ; 48
; [then-branch: 4144 | False | live]
; [else-branch: 4144 | True | live]
(push) ; 49
; [then-branch: 4144 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 4144 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 4145 | False | live]
; [else-branch: 4145 | True | live]
(push) ; 51
; [then-branch: 4145 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 4145 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 4140 | !(_loop_check_before_0_0@572@01)]
(assert (not _loop_check_before_0_0@572@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (and
    p2_4@476@01
    (not bypass2_0@543@01)
    (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))))
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0 ==> !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 4146 | !(p1_4@475@01) | live]
; [else-branch: 4146 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 4146 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4146 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4147 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 4147 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4147 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !idle1_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4148 | True | live]
; [else-branch: 4148 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4148 | True]
; [eval] !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0@571@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0@571@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4149 | !(_loop_check_before_0@571@01) | live]
; [else-branch: 4149 | _loop_check_before_0@571@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4149 | !(_loop_check_before_0@571@01)]
(assert (not _loop_check_before_0@571@01))
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 42
; [then-branch: 4150 | False | live]
; [else-branch: 4150 | True | live]
(push) ; 43
; [then-branch: 4150 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 4150 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 44
; [then-branch: 4151 | False | live]
; [else-branch: 4151 | True | live]
(push) ; 45
; [then-branch: 4151 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 4151 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 4152 | False | live]
; [else-branch: 4152 | True | live]
(push) ; 47
; [then-branch: 4152 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 4152 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 4149 | _loop_check_before_0@571@01]
(assert _loop_check_before_0@571@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (and
    p1_4@475@01
    (not bypass1_0@542@01)
    (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))))
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 4153 | !(p2_4@476@01) | live]
; [else-branch: 4153 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 4153 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4153 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4154 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 4154 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4154 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4155 | True | live]
; [else-branch: 4155 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4155 | True]
; [eval] !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_0_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0_0@572@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0_0@572@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4156 | !(_loop_check_before_0_0@572@01) | live]
; [else-branch: 4156 | _loop_check_before_0_0@572@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4156 | !(_loop_check_before_0_0@572@01)]
(assert (not _loop_check_before_0_0@572@01))
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false)
(push) ; 42
; [then-branch: 4157 | False | live]
; [else-branch: 4157 | True | live]
(push) ; 43
; [then-branch: 4157 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 4157 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false)
(push) ; 44
; [then-branch: 4158 | False | live]
; [else-branch: 4158 | True | live]
(push) ; 45
; [then-branch: 4158 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 4158 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 4159 | False | live]
; [else-branch: 4159 | True | live]
(push) ; 47
; [then-branch: 4159 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 4159 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 4156 | _loop_check_before_0_0@572@01]
(assert _loop_check_before_0_0@572@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (and
    p2_4@476@01
    (not bypass2_0@543@01)
    (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))))
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] bypass1_0 ==> tmp1_7 == except1_0
(push) ; 36
; [then-branch: 4160 | bypass1_0@542@01 | dead]
; [else-branch: 4160 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4160 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_6 == Exception_res_0
(push) ; 36
; [then-branch: 4161 | bypass1_0@542@01 | dead]
; [else-branch: 4161 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4161 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_10 == break1_0
(push) ; 36
; [then-branch: 4162 | bypass1_0@542@01 | dead]
; [else-branch: 4162 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4162 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_9 == _loop_check_before_0
(push) ; 36
; [then-branch: 4163 | bypass1_0@542@01 | dead]
; [else-branch: 4163 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4163 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_8 == _err
(push) ; 36
; [then-branch: 4164 | bypass1_0@542@01 | dead]
; [else-branch: 4164 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4164 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_5 == _loop_measures_0
(push) ; 36
; [then-branch: 4165 | bypass1_0@542@01 | dead]
; [else-branch: 4165 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4165 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_5 == _loop_measures_0_0
(push) ; 36
; [then-branch: 4166 | bypass2_0@543@01 | dead]
; [else-branch: 4166 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4166 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_8 == _err_1
(push) ; 36
; [then-branch: 4167 | bypass2_0@543@01 | dead]
; [else-branch: 4167 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4167 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_10 == break2_0
(push) ; 36
; [then-branch: 4168 | bypass2_0@543@01 | dead]
; [else-branch: 4168 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4168 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_7 == except2_0
(push) ; 36
; [then-branch: 4169 | bypass2_0@543@01 | dead]
; [else-branch: 4169 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4169 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_6 == Exception_res_0_0
(push) ; 36
; [then-branch: 4170 | bypass2_0@543@01 | dead]
; [else-branch: 4170 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4170 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_9 == _loop_check_before_0_0
(push) ; 36
; [then-branch: 4171 | bypass2_0@543@01 | dead]
; [else-branch: 4171 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4171 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 24
; [then-branch: 4172 | !(p1_6@614@01) | live]
; [else-branch: 4172 | p1_6@614@01 | live]
(push) ; 25
; [then-branch: 4172 | !(p1_6@614@01)]
(assert (not p1_6@614@01))
(pop) ; 25
(push) ; 25
; [else-branch: 4172 | p1_6@614@01]
(assert p1_6@614@01)
; [eval] !break1_0
(push) ; 26
; [then-branch: 4173 | break1_0@569@01 | live]
; [else-branch: 4173 | !(break1_0@569@01) | live]
(push) ; 27
; [then-branch: 4173 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 27
(push) ; 27
; [else-branch: 4173 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4174 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
; [else-branch: 4174 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 4174 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01))))
(pop) ; 24
(pop) ; 23
(pop) ; 22
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 22
; [then-branch: 4175 | !(p1_6@614@01) | live]
; [else-branch: 4175 | p1_6@614@01 | live]
(push) ; 23
; [then-branch: 4175 | !(p1_6@614@01)]
(assert (not p1_6@614@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4175 | p1_6@614@01]
(assert p1_6@614@01)
; [eval] !break1_0
(push) ; 24
; [then-branch: 4176 | break1_0@569@01 | live]
; [else-branch: 4176 | !(break1_0@569@01) | live]
(push) ; 25
; [then-branch: 4176 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 25
(push) ; 25
; [else-branch: 4176 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4177 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
; [else-branch: 4177 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 4177 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01))))
(pop) ; 22
(pop) ; 21
(pop) ; 20
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 20
; [then-branch: 4178 | !(p1_6@614@01) | live]
; [else-branch: 4178 | p1_6@614@01 | live]
(push) ; 21
; [then-branch: 4178 | !(p1_6@614@01)]
(assert (not p1_6@614@01))
(pop) ; 21
(push) ; 21
; [else-branch: 4178 | p1_6@614@01]
(assert p1_6@614@01)
; [eval] !break1_0
(push) ; 22
; [then-branch: 4179 | break1_0@569@01 | live]
; [else-branch: 4179 | !(break1_0@569@01) | live]
(push) ; 23
; [then-branch: 4179 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 23
(push) ; 23
; [else-branch: 4179 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4180 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
; [else-branch: 4180 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 4180 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01))))
(pop) ; 20
(pop) ; 19
(pop) ; 18
(push) ; 18
; [else-branch: 4026 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(assert (not (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(pop) ; 18
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 18
; [then-branch: 4181 | !(p1_6@614@01) | live]
; [else-branch: 4181 | p1_6@614@01 | live]
(push) ; 19
; [then-branch: 4181 | !(p1_6@614@01)]
(assert (not p1_6@614@01))
(pop) ; 19
(push) ; 19
; [else-branch: 4181 | p1_6@614@01]
(assert p1_6@614@01)
; [eval] !break1_0
(push) ; 20
; [then-branch: 4182 | break1_0@569@01 | live]
; [else-branch: 4182 | !(break1_0@569@01) | live]
(push) ; 21
; [then-branch: 4182 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 21
(push) ; 21
; [else-branch: 4182 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4183 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 4183 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 4183 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(assert (not (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 19
; [then-branch: 4184 | !(p2_6@615@01) | live]
; [else-branch: 4184 | p2_6@615@01 | live]
(push) ; 20
; [then-branch: 4184 | !(p2_6@615@01)]
(assert (not p2_6@615@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4184 | p2_6@615@01]
(assert p2_6@615@01)
; [eval] !break2_0
(push) ; 21
; [then-branch: 4185 | break2_0@570@01 | live]
; [else-branch: 4185 | !(break2_0@570@01) | live]
(push) ; 22
; [then-branch: 4185 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 22
(push) ; 22
; [else-branch: 4185 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=> p2_6@615@01 (and p2_6@615@01 (or (not break2_0@570@01) break2_0@570@01))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_6@615@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4186 | p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 4186 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(set-option :timeout 0)
(push) ; 19
; [else-branch: 4186 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(assert (not (and p2_6@615@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(pop) ; 19
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 19
; [then-branch: 4187 | !(p2_6@615@01) | live]
; [else-branch: 4187 | p2_6@615@01 | live]
(push) ; 20
; [then-branch: 4187 | !(p2_6@615@01)]
(assert (not p2_6@615@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4187 | p2_6@615@01]
(assert p2_6@615@01)
; [eval] !break2_0
(push) ; 21
; [then-branch: 4188 | break2_0@570@01 | live]
; [else-branch: 4188 | !(break2_0@570@01) | live]
(push) ; 22
; [then-branch: 4188 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 22
(push) ; 22
; [else-branch: 4188 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_6@615@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_6@615@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4189 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 4189 | p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 4189 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(assert (not (and p2_6@615@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
; [exec]
; tmp_0 := new()
(declare-const tmp_0@624@01 $Ref)
(assert (not (= tmp_0@624@01 $Ref.null)))
(assert (not (= tmp_0@624@01 _cthread_158_0@478@01)))
(assert (not (= tmp_0@624@01 tmp2_8@526@01)))
(assert (not (= tmp_0@624@01 tmp_0@582@01)))
(assert (not (= tmp_0@624@01 Exception_res_0_0@560@01)))
(assert (not (= tmp_0@624@01 c_0@483@01)))
(assert (not (= tmp_0@624@01 _err@561@01)))
(assert (not (= tmp_0@624@01 b_0@485@01)))
(assert (not
  (=
    tmp_0@624@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))
(assert (not
  (=
    tmp_0@624@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@573@01)))))))
(assert (not (= tmp_0@624@01 b_0_0@486@01)))
(assert (not (= tmp_0@624@01 tmp1_8@525@01)))
(assert (not (= tmp_0@624@01 _cthread_158@477@01)))
(assert (not (= tmp_0@624@01 c_0_0@484@01)))
(assert (not (= tmp_0@624@01 tmp1_6@521@01)))
(assert (not (= tmp_0@624@01 tmp2_6@522@01)))
(assert (not (= tmp_0@624@01 _err_1@563@01)))
(assert (not (= tmp_0@624@01 Exception_res_0@559@01)))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 20
; [then-branch: 4190 | !(p1_6@614@01) | live]
; [else-branch: 4190 | p1_6@614@01 | live]
(push) ; 21
; [then-branch: 4190 | !(p1_6@614@01)]
(assert (not p1_6@614@01))
(pop) ; 21
(push) ; 21
; [else-branch: 4190 | p1_6@614@01]
(assert p1_6@614@01)
; [eval] !break1_0
(push) ; 22
; [then-branch: 4191 | break1_0@569@01 | live]
; [else-branch: 4191 | !(break1_0@569@01) | live]
(push) ; 23
; [then-branch: 4191 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 23
(push) ; 23
; [else-branch: 4191 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 4192 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 4192 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(push) ; 20
; [else-branch: 4192 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(pop) ; 20
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 20
; [then-branch: 4193 | !(p1_6@614@01) | live]
; [else-branch: 4193 | p1_6@614@01 | live]
(push) ; 21
; [then-branch: 4193 | !(p1_6@614@01)]
(assert (not p1_6@614@01))
(pop) ; 21
(push) ; 21
; [else-branch: 4193 | p1_6@614@01]
(assert p1_6@614@01)
; [eval] !break1_0
(push) ; 22
; [then-branch: 4194 | break1_0@569@01 | live]
; [else-branch: 4194 | !(break1_0@569@01) | live]
(push) ; 23
; [then-branch: 4194 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 23
(push) ; 23
; [else-branch: 4194 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4195 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 4195 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 4195 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01))]
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 21
; [then-branch: 4196 | !(p2_6@615@01) | live]
; [else-branch: 4196 | p2_6@615@01 | live]
(push) ; 22
; [then-branch: 4196 | !(p2_6@615@01)]
(assert (not p2_6@615@01))
(pop) ; 22
(push) ; 22
; [else-branch: 4196 | p2_6@615@01]
(assert p2_6@615@01)
; [eval] !break2_0
(push) ; 23
; [then-branch: 4197 | break2_0@570@01 | live]
; [else-branch: 4197 | !(break2_0@570@01) | live]
(push) ; 24
; [then-branch: 4197 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 24
(push) ; 24
; [else-branch: 4197 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 4198 | p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 4198 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(push) ; 21
; [else-branch: 4198 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(pop) ; 21
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 21
; [then-branch: 4199 | !(p2_6@615@01) | live]
; [else-branch: 4199 | p2_6@615@01 | live]
(push) ; 22
; [then-branch: 4199 | !(p2_6@615@01)]
(assert (not p2_6@615@01))
(pop) ; 22
(push) ; 22
; [else-branch: 4199 | p2_6@615@01]
(assert p2_6@615@01)
; [eval] !break2_0
(push) ; 23
; [then-branch: 4200 | break2_0@570@01 | live]
; [else-branch: 4200 | !(break2_0@570@01) | live]
(push) ; 24
; [then-branch: 4200 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 24
(push) ; 24
; [else-branch: 4200 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_6@615@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4201 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 4201 | p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 4201 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01))]
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 22
; [then-branch: 4202 | !(p1_6@614@01) | live]
; [else-branch: 4202 | p1_6@614@01 | live]
(push) ; 23
; [then-branch: 4202 | !(p1_6@614@01)]
(assert (not p1_6@614@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4202 | p1_6@614@01]
(assert p1_6@614@01)
; [eval] !break1_0
(push) ; 24
; [then-branch: 4203 | break1_0@569@01 | live]
; [else-branch: 4203 | !(break1_0@569@01) | live]
(push) ; 25
; [then-branch: 4203 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 25
(push) ; 25
; [else-branch: 4203 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 4204 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 4204 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(push) ; 22
; [else-branch: 4204 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(pop) ; 22
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 22
; [then-branch: 4205 | !(p1_6@614@01) | live]
; [else-branch: 4205 | p1_6@614@01 | live]
(push) ; 23
; [then-branch: 4205 | !(p1_6@614@01)]
(assert (not p1_6@614@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4205 | p1_6@614@01]
(assert p1_6@614@01)
; [eval] !break1_0
(push) ; 24
; [then-branch: 4206 | break1_0@569@01 | live]
; [else-branch: 4206 | !(break1_0@569@01) | live]
(push) ; 25
; [then-branch: 4206 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 25
(push) ; 25
; [else-branch: 4206 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4207 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 4207 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 4207 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01))]
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 23
; [then-branch: 4208 | !(p2_6@615@01) | live]
; [else-branch: 4208 | p2_6@615@01 | live]
(push) ; 24
; [then-branch: 4208 | !(p2_6@615@01)]
(assert (not p2_6@615@01))
(pop) ; 24
(push) ; 24
; [else-branch: 4208 | p2_6@615@01]
(assert p2_6@615@01)
; [eval] !break2_0
(push) ; 25
; [then-branch: 4209 | break2_0@570@01 | live]
; [else-branch: 4209 | !(break2_0@570@01) | live]
(push) ; 26
; [then-branch: 4209 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 26
(push) ; 26
; [else-branch: 4209 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 4210 | p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 4210 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(push) ; 23
; [else-branch: 4210 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(pop) ; 23
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 23
; [then-branch: 4211 | !(p2_6@615@01) | live]
; [else-branch: 4211 | p2_6@615@01 | live]
(push) ; 24
; [then-branch: 4211 | !(p2_6@615@01)]
(assert (not p2_6@615@01))
(pop) ; 24
(push) ; 24
; [else-branch: 4211 | p2_6@615@01]
(assert p2_6@615@01)
; [eval] !break2_0
(push) ; 25
; [then-branch: 4212 | break2_0@570@01 | live]
; [else-branch: 4212 | !(break2_0@570@01) | live]
(push) ; 26
; [then-branch: 4212 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 26
(push) ; 26
; [else-branch: 4212 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_6@615@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4213 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 4213 | p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 4213 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01))]
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 24
; [then-branch: 4214 | !(p1_6@614@01) | live]
; [else-branch: 4214 | p1_6@614@01 | live]
(push) ; 25
; [then-branch: 4214 | !(p1_6@614@01)]
(assert (not p1_6@614@01))
(pop) ; 25
(push) ; 25
; [else-branch: 4214 | p1_6@614@01]
(assert p1_6@614@01)
; [eval] !break1_0
(push) ; 26
; [then-branch: 4215 | break1_0@569@01 | live]
; [else-branch: 4215 | !(break1_0@569@01) | live]
(push) ; 27
; [then-branch: 4215 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 27
(push) ; 27
; [else-branch: 4215 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 4216 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 4216 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(push) ; 24
; [else-branch: 4216 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(pop) ; 24
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 24
; [then-branch: 4217 | !(p1_6@614@01) | live]
; [else-branch: 4217 | p1_6@614@01 | live]
(push) ; 25
; [then-branch: 4217 | !(p1_6@614@01)]
(assert (not p1_6@614@01))
(pop) ; 25
(push) ; 25
; [else-branch: 4217 | p1_6@614@01]
(assert p1_6@614@01)
; [eval] !break1_0
(push) ; 26
; [then-branch: 4218 | break1_0@569@01 | live]
; [else-branch: 4218 | !(break1_0@569@01) | live]
(push) ; 27
; [then-branch: 4218 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 27
(push) ; 27
; [else-branch: 4218 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4219 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 4219 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 4219 | !(p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01))]
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 25
; [then-branch: 4220 | !(p2_6@615@01) | live]
; [else-branch: 4220 | p2_6@615@01 | live]
(push) ; 26
; [then-branch: 4220 | !(p2_6@615@01)]
(assert (not p2_6@615@01))
(pop) ; 26
(push) ; 26
; [else-branch: 4220 | p2_6@615@01]
(assert p2_6@615@01)
; [eval] !break2_0
(push) ; 27
; [then-branch: 4221 | break2_0@570@01 | live]
; [else-branch: 4221 | !(break2_0@570@01) | live]
(push) ; 28
; [then-branch: 4221 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 28
(push) ; 28
; [else-branch: 4221 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 4222 | p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 4222 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(push) ; 25
; [else-branch: 4222 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(pop) ; 25
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 25
; [then-branch: 4223 | !(p2_6@615@01) | live]
; [else-branch: 4223 | p2_6@615@01 | live]
(push) ; 26
; [then-branch: 4223 | !(p2_6@615@01)]
(assert (not p2_6@615@01))
(pop) ; 26
(push) ; 26
; [else-branch: 4223 | p2_6@615@01]
(assert p2_6@615@01)
; [eval] !break2_0
(push) ; 27
; [then-branch: 4224 | break2_0@570@01 | live]
; [else-branch: 4224 | !(break2_0@570@01) | live]
(push) ; 28
; [then-branch: 4224 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 28
(push) ; 28
; [else-branch: 4224 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_6@615@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4225 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 4225 | p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 4225 | !(p2_6@615@01 && !(break2_0@570@01) && !(except2_0@564@01))]
; [exec]
; p1_8 := p3_2 &&
;   (!break1_0 && !except1_0 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p3_2 && (!break1_0 && !except1_0 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 4226 | !(p3_2@616@01) | live]
; [else-branch: 4226 | p3_2@616@01 | live]
(push) ; 27
; [then-branch: 4226 | !(p3_2@616@01)]
(assert (not p3_2@616@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4226 | p3_2@616@01]
(assert p3_2@616@01)
; [eval] !break1_0
(push) ; 28
; [then-branch: 4227 | break1_0@569@01 | live]
; [else-branch: 4227 | !(break1_0@569@01) | live]
(push) ; 29
; [then-branch: 4227 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 29
(push) ; 29
; [else-branch: 4227 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 30
; [then-branch: 4228 | except1_0@562@01 | live]
; [else-branch: 4228 | !(except1_0@562@01) | live]
(push) ; 31
; [then-branch: 4228 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 31
(push) ; 31
; [else-branch: 4228 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p3_2@616@01
  (and
    p3_2@616@01
    (=>
      (not break1_0@569@01)
      (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01)))
    (or (not break1_0@569@01) break1_0@569@01))))
(assert (or p3_2@616@01 (not p3_2@616@01)))
; [exec]
; p2_8 := p4_2 &&
;   (!break2_0 && !except2_0 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_2 && (!break2_0 && !except2_0 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 4229 | !(p4_2@617@01) | live]
; [else-branch: 4229 | p4_2@617@01 | live]
(push) ; 27
; [then-branch: 4229 | !(p4_2@617@01)]
(assert (not p4_2@617@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4229 | p4_2@617@01]
(assert p4_2@617@01)
; [eval] !break2_0
(push) ; 28
; [then-branch: 4230 | break2_0@570@01 | live]
; [else-branch: 4230 | !(break2_0@570@01) | live]
(push) ; 29
; [then-branch: 4230 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 29
(push) ; 29
; [else-branch: 4230 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(push) ; 30
; [then-branch: 4231 | except2_0@564@01 | live]
; [else-branch: 4231 | !(except2_0@564@01) | live]
(push) ; 31
; [then-branch: 4231 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 31
(push) ; 31
; [else-branch: 4231 | !(except2_0@564@01)]
(assert (not except2_0@564@01))
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p4_2@617@01
  (and
    p4_2@617@01
    (=>
      (not break2_0@570@01)
      (and (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01)))
    (or (not break2_0@570@01) break2_0@570@01))))
(assert (or p4_2@617@01 (not p4_2@617@01)))
; [exec]
; p3_4 := p3_2 &&
;   (!break1_0 && !except1_0 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p3_2 && (!break1_0 && !except1_0 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 4232 | !(p3_2@616@01) | live]
; [else-branch: 4232 | p3_2@616@01 | live]
(push) ; 27
; [then-branch: 4232 | !(p3_2@616@01)]
(assert (not p3_2@616@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4232 | p3_2@616@01]
(assert p3_2@616@01)
; [eval] !break1_0
(push) ; 28
; [then-branch: 4233 | break1_0@569@01 | live]
; [else-branch: 4233 | !(break1_0@569@01) | live]
(push) ; 29
; [then-branch: 4233 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 29
(push) ; 29
; [else-branch: 4233 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 30
; [then-branch: 4234 | except1_0@562@01 | live]
; [else-branch: 4234 | !(except1_0@562@01) | live]
(push) ; 31
; [then-branch: 4234 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 31
(push) ; 31
; [else-branch: 4234 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p3_4@625@01 Bool)
(assert (=
  p3_4@625@01
  (and p3_2@616@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
; [exec]
; p4_4 := p4_2 &&
;   (!break2_0 && !except2_0 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_2 && (!break2_0 && !except2_0 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 4235 | !(p4_2@617@01) | live]
; [else-branch: 4235 | p4_2@617@01 | live]
(push) ; 27
; [then-branch: 4235 | !(p4_2@617@01)]
(assert (not p4_2@617@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4235 | p4_2@617@01]
(assert p4_2@617@01)
; [eval] !break2_0
(push) ; 28
; [then-branch: 4236 | break2_0@570@01 | live]
; [else-branch: 4236 | !(break2_0@570@01) | live]
(push) ; 29
; [then-branch: 4236 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 29
(push) ; 29
; [else-branch: 4236 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(push) ; 30
; [then-branch: 4237 | except2_0@564@01 | live]
; [else-branch: 4237 | !(except2_0@564@01) | live]
(push) ; 31
; [then-branch: 4237 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 31
(push) ; 31
; [else-branch: 4237 | !(except2_0@564@01)]
(assert (not except2_0@564@01))
; [eval] !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p4_4@626@01 Bool)
(assert (=
  p4_4@626@01
  (and p4_2@617@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
; [eval] p1_8 && (!break1_0 && !except1_0)
; [then-branch: 4238 | False | dead]
; [else-branch: 4238 | True | live]
(push) ; 26
; [else-branch: 4238 | True]
(pop) ; 26
; [eval] !(p1_8 && (!break1_0 && !except1_0))
; [eval] p1_8 && (!break1_0 && !except1_0)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4239 | True | live]
; [else-branch: 4239 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 4239 | True]
; [eval] p2_8 && (!break2_0 && !except2_0)
; [then-branch: 4240 | False | dead]
; [else-branch: 4240 | True | live]
(push) ; 27
; [else-branch: 4240 | True]
(pop) ; 27
; [eval] !(p2_8 && (!break2_0 && !except2_0))
; [eval] p2_8 && (!break2_0 && !except2_0)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4241 | True | live]
; [else-branch: 4241 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 4241 | True]
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 28
; [then-branch: 4242 | !(p3_2@616@01) | live]
; [else-branch: 4242 | p3_2@616@01 | live]
(push) ; 29
; [then-branch: 4242 | !(p3_2@616@01)]
(assert (not p3_2@616@01))
(pop) ; 29
(push) ; 29
; [else-branch: 4242 | p3_2@616@01]
(assert p3_2@616@01)
; [eval] !break1_0
(push) ; 30
; [then-branch: 4243 | break1_0@569@01 | live]
; [else-branch: 4243 | !(break1_0@569@01) | live]
(push) ; 31
; [then-branch: 4243 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 31
(push) ; 31
; [else-branch: 4243 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=> p3_2@616@01 (and p3_2@616@01 (or (not break1_0@569@01) break1_0@569@01))))
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3_2@616@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3_2@616@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4244 | p3_2@616@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
; [else-branch: 4244 | !(p3_2@616@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 4244 | p3_2@616@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p3_2@616@01 (and (not break1_0@569@01) (not except1_0@562@01))))
; [exec]
; c_5.Container_value := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 29
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 29
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_value@627@01 $Ref)
(assert (= Container_value@627@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 29
; [then-branch: 4245 | !(p4_2@617@01) | live]
; [else-branch: 4245 | p4_2@617@01 | live]
(push) ; 30
; [then-branch: 4245 | !(p4_2@617@01)]
(assert (not p4_2@617@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4245 | p4_2@617@01]
(assert p4_2@617@01)
; [eval] !break2_0
(push) ; 31
; [then-branch: 4246 | break2_0@570@01 | live]
; [else-branch: 4246 | !(break2_0@570@01) | live]
(push) ; 32
; [then-branch: 4246 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 32
(push) ; 32
; [else-branch: 4246 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p4_2@617@01 (and p4_2@617@01 (or (not break2_0@570@01) break2_0@570@01))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4_2@617@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4247 | p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 4247 | !(p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 4247 | !(p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(assert (not (and p4_2@617@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(pop) ; 29
; [eval] !(p4_2 && (!break2_0 && !except2_0))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 29
; [then-branch: 4248 | !(p4_2@617@01) | live]
; [else-branch: 4248 | p4_2@617@01 | live]
(push) ; 30
; [then-branch: 4248 | !(p4_2@617@01)]
(assert (not p4_2@617@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4248 | p4_2@617@01]
(assert p4_2@617@01)
; [eval] !break2_0
(push) ; 31
; [then-branch: 4249 | break2_0@570@01 | live]
; [else-branch: 4249 | !(break2_0@570@01) | live]
(push) ; 32
; [then-branch: 4249 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 32
(push) ; 32
; [else-branch: 4249 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4_2@617@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4_2@617@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4250 | !(p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 4250 | p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 4250 | !(p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(assert (not (and p4_2@617@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 30
; [then-branch: 4251 | !(p3_2@616@01) | live]
; [else-branch: 4251 | p3_2@616@01 | live]
(push) ; 31
; [then-branch: 4251 | !(p3_2@616@01)]
(assert (not p3_2@616@01))
(pop) ; 31
(push) ; 31
; [else-branch: 4251 | p3_2@616@01]
; [eval] !break1_0
(push) ; 32
; [then-branch: 4252 | break1_0@569@01 | live]
; [else-branch: 4252 | !(break1_0@569@01) | live]
(push) ; 33
; [then-branch: 4252 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 33
(push) ; 33
; [else-branch: 4252 | !(break1_0@569@01)]
; [eval] !except1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (=> p3_2@616@01 (or (not break1_0@569@01) break1_0@569@01)))
(push) ; 30
(set-option :timeout 10)
(assert (not (not (and p3_2@616@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3_2@616@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4253 | p3_2@616@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
; [else-branch: 4253 | !(p3_2@616@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 4253 | p3_2@616@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p3_2@616@01 (and (not break1_0@569@01) (not except1_0@562@01))))
; [exec]
; break1_0 := true
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 31
; [then-branch: 4254 | !(p4_2@617@01) | live]
; [else-branch: 4254 | p4_2@617@01 | live]
(push) ; 32
; [then-branch: 4254 | !(p4_2@617@01)]
(assert (not p4_2@617@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4254 | p4_2@617@01]
(assert p4_2@617@01)
; [eval] !break2_0
(push) ; 33
; [then-branch: 4255 | break2_0@570@01 | live]
; [else-branch: 4255 | !(break2_0@570@01) | live]
(push) ; 34
; [then-branch: 4255 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 34
(push) ; 34
; [else-branch: 4255 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 4256 | p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 4256 | !(p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(push) ; 31
; [else-branch: 4256 | !(p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(pop) ; 31
; [eval] !(p4_2 && (!break2_0 && !except2_0))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 31
; [then-branch: 4257 | !(p4_2@617@01) | live]
; [else-branch: 4257 | p4_2@617@01 | live]
(push) ; 32
; [then-branch: 4257 | !(p4_2@617@01)]
(assert (not p4_2@617@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4257 | p4_2@617@01]
(assert p4_2@617@01)
; [eval] !break2_0
(push) ; 33
; [then-branch: 4258 | break2_0@570@01 | live]
; [else-branch: 4258 | !(break2_0@570@01) | live]
(push) ; 34
; [then-branch: 4258 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 34
(push) ; 34
; [else-branch: 4258 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4_2@617@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4259 | !(p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 4259 | p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 4259 | !(p4_2@617@01 && !(break2_0@570@01) && !(except2_0@564@01))]
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 32
; [then-branch: 4260 | !(p1_5@587@01) | live]
; [else-branch: 4260 | p1_5@587@01 | live]
(push) ; 33
; [then-branch: 4260 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 33
(push) ; 33
; [else-branch: 4260 | p1_5@587@01]
; [eval] !break1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 4261 | False | dead]
; [else-branch: 4261 | True | live]
(push) ; 32
; [else-branch: 4261 | True]
(pop) ; 32
; [eval] !(p1_5 && (!break1_0 && !except1_0))
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 32
; [then-branch: 4262 | !(p1_5@587@01) | live]
; [else-branch: 4262 | p1_5@587@01 | live]
(push) ; 33
; [then-branch: 4262 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 33
(push) ; 33
; [else-branch: 4262 | p1_5@587@01]
; [eval] !break1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4263 | True | live]
; [else-branch: 4263 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 4263 | True]
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 33
; [then-branch: 4264 | !(p2_5@588@01) | live]
; [else-branch: 4264 | p2_5@588@01 | live]
(push) ; 34
; [then-branch: 4264 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 34
(push) ; 34
; [else-branch: 4264 | p2_5@588@01]
(assert p2_5@588@01)
; [eval] !break2_0
(push) ; 35
; [then-branch: 4265 | break2_0@570@01 | live]
; [else-branch: 4265 | !(break2_0@570@01) | live]
(push) ; 36
; [then-branch: 4265 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 36
(push) ; 36
; [else-branch: 4265 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 4266 | p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 4266 | !(p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(push) ; 33
; [else-branch: 4266 | !(p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(pop) ; 33
; [eval] !(p2_5 && (!break2_0 && !except2_0))
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 33
; [then-branch: 4267 | !(p2_5@588@01) | live]
; [else-branch: 4267 | p2_5@588@01 | live]
(push) ; 34
; [then-branch: 4267 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 34
(push) ; 34
; [else-branch: 4267 | p2_5@588@01]
(assert p2_5@588@01)
; [eval] !break2_0
(push) ; 35
; [then-branch: 4268 | break2_0@570@01 | live]
; [else-branch: 4268 | !(break2_0@570@01) | live]
(push) ; 36
; [then-branch: 4268 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 36
(push) ; 36
; [else-branch: 4268 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not (and p2_5@588@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4269 | !(p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 4269 | p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 4269 | !(p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01))]
; [exec]
; assert (p1_5 && (!break1_0 && !except1_0) ==>
;   _loop_termination_flag_0 ==> !true) &&
;   (p2_5 && (!break2_0 && !except2_0) ==>
;   _loop_termination_flag_0_0 ==> !true)
; [eval] p1_5 && (!break1_0 && !except1_0) ==> _loop_termination_flag_0 ==> !true
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 34
; [then-branch: 4270 | !(p1_5@587@01) | live]
; [else-branch: 4270 | p1_5@587@01 | live]
(push) ; 35
; [then-branch: 4270 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4270 | p1_5@587@01]
; [eval] !break1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 4271 | False | dead]
; [else-branch: 4271 | True | live]
(push) ; 35
; [else-branch: 4271 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_5 && (!break2_0 && !except2_0) ==> _loop_termination_flag_0_0 ==> !true
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 34
; [then-branch: 4272 | !(p2_5@588@01) | live]
; [else-branch: 4272 | p2_5@588@01 | live]
(push) ; 35
; [then-branch: 4272 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4272 | p2_5@588@01]
(assert p2_5@588@01)
; [eval] !break2_0
(push) ; 36
; [then-branch: 4273 | break2_0@570@01 | live]
; [else-branch: 4273 | !(break2_0@570@01) | live]
(push) ; 37
; [then-branch: 4273 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 37
(push) ; 37
; [else-branch: 4273 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 4274 | p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 4274 | !(p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(push) ; 35
; [else-branch: 4274 | !(p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_4 && !bypass1_0 ==> true
; [eval] p1_4 && !bypass1_0
(push) ; 34
; [then-branch: 4275 | !(p1_4@475@01) | live]
; [else-branch: 4275 | p1_4@475@01 | live]
(push) ; 35
; [then-branch: 4275 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4275 | p1_4@475@01]
(assert p1_4@475@01)
; [eval] !bypass1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4276 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 4276 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4276 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> true
; [eval] p2_4 && !bypass2_0
(push) ; 34
; [then-branch: 4277 | !(p2_4@476@01) | live]
; [else-branch: 4277 | p2_4@476@01 | live]
(push) ; 35
; [then-branch: 4277 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4277 | p2_4@476@01]
(assert p2_4@476@01)
; [eval] !bypass2_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4278 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 4278 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4278 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0
(push) ; 34
; [then-branch: 4279 | !(p1_4@475@01) | live]
; [else-branch: 4279 | p1_4@475@01 | live]
(push) ; 35
; [then-branch: 4279 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4279 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4280 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 4280 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 4280 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0
(push) ; 35
; [then-branch: 4281 | !(p2_4@476@01) | live]
; [else-branch: 4281 | p2_4@476@01 | live]
(push) ; 36
; [then-branch: 4281 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 36
(push) ; 36
; [else-branch: 4281 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4282 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 4282 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4282 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0 ==> issubtype(typeof(c_5.Container_value), int())
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 4283 | !(p1_4@475@01) | live]
; [else-branch: 4283 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 4283 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4283 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4284 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 4284 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4284 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] issubtype(typeof(c_5.Container_value), int())
; [eval] typeof(c_5.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(push) ; 36
(assert (not (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (issubtype<Bool> (typeof<PyType> Container_value@627@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (issubtype<Bool> (typeof<PyType> Container_value@627@01) (as int<PyType>  PyType))))
; [eval] p2_4 && !bypass2_0 ==> issubtype(typeof(c_5_0.Container_valuep), int())
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 4285 | !(p2_4@476@01) | live]
; [else-branch: 4285 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 4285 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4285 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4286 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 4286 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4286 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] issubtype(typeof(c_5_0.Container_valuep), int())
; [eval] typeof(c_5_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0 ==> !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 4287 | !(p1_4@475@01) | live]
; [else-branch: 4287 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 4287 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4287 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4288 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 4288 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4288 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] !idle1_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4289 | True | live]
; [else-branch: 4289 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4289 | True]
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0@571@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0@571@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4290 | _loop_check_before_0@571@01 | live]
; [else-branch: 4290 | !(_loop_check_before_0@571@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4290 | _loop_check_before_0@571@01]
(assert _loop_check_before_0@571@01)
; [eval] _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 4291 | False | live]
; [else-branch: 4291 | True | live]
(push) ; 43
; [then-branch: 4291 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 4291 | True]
; [eval] perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_158)) == none
; [eval] perm(MustTerminate(_cthread_158))
(push) ; 44
; [then-branch: 4292 | False | live]
; [else-branch: 4292 | True | live]
(push) ; 45
; [then-branch: 4292 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 4292 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 46
; [then-branch: 4293 | False | live]
; [else-branch: 4293 | True | live]
(push) ; 47
; [then-branch: 4293 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 4293 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 48
; [then-branch: 4294 | False | live]
; [else-branch: 4294 | True | live]
(push) ; 49
; [then-branch: 4294 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 4294 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 4295 | False | live]
; [else-branch: 4295 | True | live]
(push) ; 51
; [then-branch: 4295 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 4295 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 4290 | !(_loop_check_before_0@571@01)]
(assert (not _loop_check_before_0@571@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (and
    p1_4@475@01
    (not bypass1_0@542@01)
    (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))))
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 4296 | !(p2_4@476@01) | live]
; [else-branch: 4296 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 4296 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4296 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4297 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 4297 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4297 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4298 | True | live]
; [else-branch: 4298 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4298 | True]
; [eval] _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0_0@572@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0_0@572@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4299 | _loop_check_before_0_0@572@01 | live]
; [else-branch: 4299 | !(_loop_check_before_0_0@572@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4299 | _loop_check_before_0_0@572@01]
(assert _loop_check_before_0_0@572@01)
; [eval] _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 4300 | False | live]
; [else-branch: 4300 | True | live]
(push) ; 43
; [then-branch: 4300 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 4300 | True]
; [eval] perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_158_0)) == none
; [eval] perm(MustTerminate_0(_cthread_158_0))
(push) ; 44
; [then-branch: 4301 | False | live]
; [else-branch: 4301 | True | live]
(push) ; 45
; [then-branch: 4301 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 4301 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false)
(push) ; 46
; [then-branch: 4302 | False | live]
; [else-branch: 4302 | True | live]
(push) ; 47
; [then-branch: 4302 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 4302 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false)
(push) ; 48
; [then-branch: 4303 | False | live]
; [else-branch: 4303 | True | live]
(push) ; 49
; [then-branch: 4303 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 4303 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 4304 | False | live]
; [else-branch: 4304 | True | live]
(push) ; 51
; [then-branch: 4304 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 4304 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 4299 | !(_loop_check_before_0_0@572@01)]
(assert (not _loop_check_before_0_0@572@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (and
    p2_4@476@01
    (not bypass2_0@543@01)
    (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))))
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0 ==> !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 4305 | !(p1_4@475@01) | live]
; [else-branch: 4305 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 4305 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4305 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4306 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 4306 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4306 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !idle1_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4307 | True | live]
; [else-branch: 4307 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4307 | True]
; [eval] !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0@571@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0@571@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4308 | !(_loop_check_before_0@571@01) | live]
; [else-branch: 4308 | _loop_check_before_0@571@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4308 | !(_loop_check_before_0@571@01)]
(assert (not _loop_check_before_0@571@01))
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 42
; [then-branch: 4309 | False | live]
; [else-branch: 4309 | True | live]
(push) ; 43
; [then-branch: 4309 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 4309 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 44
; [then-branch: 4310 | False | live]
; [else-branch: 4310 | True | live]
(push) ; 45
; [then-branch: 4310 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 4310 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 4311 | False | live]
; [else-branch: 4311 | True | live]
(push) ; 47
; [then-branch: 4311 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 4311 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 4308 | _loop_check_before_0@571@01]
(assert _loop_check_before_0@571@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (and
    p1_4@475@01
    (not bypass1_0@542@01)
    (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))))
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 4312 | !(p2_4@476@01) | live]
; [else-branch: 4312 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 4312 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4312 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4313 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 4313 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4313 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4314 | True | live]
; [else-branch: 4314 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4314 | True]
; [eval] !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_0_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0_0@572@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0_0@572@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4315 | !(_loop_check_before_0_0@572@01) | live]
; [else-branch: 4315 | _loop_check_before_0_0@572@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4315 | !(_loop_check_before_0_0@572@01)]
(assert (not _loop_check_before_0_0@572@01))
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false)
(push) ; 42
; [then-branch: 4316 | False | live]
; [else-branch: 4316 | True | live]
(push) ; 43
; [then-branch: 4316 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 4316 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false)
(push) ; 44
; [then-branch: 4317 | False | live]
; [else-branch: 4317 | True | live]
(push) ; 45
; [then-branch: 4317 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 4317 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 4318 | False | live]
; [else-branch: 4318 | True | live]
(push) ; 47
; [then-branch: 4318 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 4318 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 4315 | _loop_check_before_0_0@572@01]
(assert _loop_check_before_0_0@572@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (and
    p2_4@476@01
    (not bypass2_0@543@01)
    (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))))
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] bypass1_0 ==> tmp1_7 == except1_0
(push) ; 36
; [then-branch: 4319 | bypass1_0@542@01 | dead]
; [else-branch: 4319 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4319 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_6 == Exception_res_0
(push) ; 36
; [then-branch: 4320 | bypass1_0@542@01 | dead]
; [else-branch: 4320 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4320 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_10 == break1_0
(push) ; 36
; [then-branch: 4321 | bypass1_0@542@01 | dead]
; [else-branch: 4321 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4321 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_9 == _loop_check_before_0
(push) ; 36
; [then-branch: 4322 | bypass1_0@542@01 | dead]
; [else-branch: 4322 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4322 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_8 == _err
(push) ; 36
; [then-branch: 4323 | bypass1_0@542@01 | dead]
; [else-branch: 4323 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4323 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_5 == _loop_measures_0
(push) ; 36
; [then-branch: 4324 | bypass1_0@542@01 | dead]
; [else-branch: 4324 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4324 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_5 == _loop_measures_0_0
(push) ; 36
; [then-branch: 4325 | bypass2_0@543@01 | dead]
; [else-branch: 4325 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4325 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_8 == _err_1
(push) ; 36
; [then-branch: 4326 | bypass2_0@543@01 | dead]
; [else-branch: 4326 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4326 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_10 == break2_0
(push) ; 36
; [then-branch: 4327 | bypass2_0@543@01 | dead]
; [else-branch: 4327 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4327 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_7 == except2_0
(push) ; 36
; [then-branch: 4328 | bypass2_0@543@01 | dead]
; [else-branch: 4328 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4328 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_6 == Exception_res_0_0
(push) ; 36
; [then-branch: 4329 | bypass2_0@543@01 | dead]
; [else-branch: 4329 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4329 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_9 == _loop_check_before_0_0
(push) ; 36
; [then-branch: 4330 | bypass2_0@543@01 | dead]
; [else-branch: 4330 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4330 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
; [eval] !(p3_2 && (!break1_0 && !except1_0))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 30
; [then-branch: 4331 | !(p3_2@616@01) | live]
; [else-branch: 4331 | p3_2@616@01 | live]
(push) ; 31
; [then-branch: 4331 | !(p3_2@616@01)]
(assert (not p3_2@616@01))
(pop) ; 31
(push) ; 31
; [else-branch: 4331 | p3_2@616@01]
(assert p3_2@616@01)
; [eval] !break1_0
(push) ; 32
; [then-branch: 4332 | break1_0@569@01 | live]
; [else-branch: 4332 | !(break1_0@569@01) | live]
(push) ; 33
; [then-branch: 4332 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 33
(push) ; 33
; [else-branch: 4332 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3_2@616@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4333 | !(p3_2@616@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
; [else-branch: 4333 | p3_2@616@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 4333 | p3_2@616@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p3_2@616@01 (and (not break1_0@569@01) (not except1_0@562@01))))
(pop) ; 30
(pop) ; 29
(pop) ; 28
; [eval] !(p3_2 && (!break1_0 && !except1_0))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 28
; [then-branch: 4334 | !(p3_2@616@01) | live]
; [else-branch: 4334 | p3_2@616@01 | live]
(push) ; 29
; [then-branch: 4334 | !(p3_2@616@01)]
(assert (not p3_2@616@01))
(pop) ; 29
(push) ; 29
; [else-branch: 4334 | p3_2@616@01]
(assert p3_2@616@01)
; [eval] !break1_0
(push) ; 30
; [then-branch: 4335 | break1_0@569@01 | live]
; [else-branch: 4335 | !(break1_0@569@01) | live]
(push) ; 31
; [then-branch: 4335 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 31
(push) ; 31
; [else-branch: 4335 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3_2@616@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4336 | !(p3_2@616@01 && !(break1_0@569@01) && !(except1_0@562@01)) | dead]
; [else-branch: 4336 | p3_2@616@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 4336 | p3_2@616@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p3_2@616@01 (and (not break1_0@569@01) (not except1_0@562@01))))
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(push) ; 18
; [else-branch: 4183 | p1_6@614@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_6@614@01 (and (not break1_0@569@01) (not except1_0@562@01))))
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 3995 | p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_5@588@01 (and (not break2_0@570@01) (not except2_0@564@01))))
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 3363 | !(p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(assert (not (and p1_5@587@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(pop) ; 14
; [eval] !(p1_5 && (!break1_0 && !except1_0))
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 14
; [then-branch: 4337 | !(p1_5@587@01) | live]
; [else-branch: 4337 | p1_5@587@01 | live]
(push) ; 15
; [then-branch: 4337 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 15
(push) ; 15
; [else-branch: 4337 | p1_5@587@01]
(assert p1_5@587@01)
; [eval] !break1_0
(push) ; 16
; [then-branch: 4338 | break1_0@569@01 | live]
; [else-branch: 4338 | !(break1_0@569@01) | live]
(push) ; 17
; [then-branch: 4338 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 17
(push) ; 17
; [else-branch: 4338 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (and p1_5@587@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (and p1_5@587@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4339 | !(p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 4339 | p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 4339 | !(p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(assert (not (and p1_5@587@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 15
; [then-branch: 4340 | !(p2_5@588@01) | live]
; [else-branch: 4340 | p2_5@588@01 | live]
(push) ; 16
; [then-branch: 4340 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 16
(push) ; 16
; [else-branch: 4340 | p2_5@588@01]
(assert p2_5@588@01)
; [eval] !break2_0
(push) ; 17
; [then-branch: 4341 | break2_0@570@01 | live]
; [else-branch: 4341 | !(break2_0@570@01) | live]
(push) ; 18
; [then-branch: 4341 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 18
(push) ; 18
; [else-branch: 4341 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=> p2_5@588@01 (and p2_5@588@01 (or (not break2_0@570@01) break2_0@570@01))))
(assert (or p2_5@588@01 (not p2_5@588@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and p2_5@588@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (and p2_5@588@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4342 | p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
; [else-branch: 4342 | !(p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 4342 | p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_5@588@01 (and (not break2_0@570@01) (not except2_0@564@01))))
; [exec]
; _loop_measures_0_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; p1_6 := p1_5 && (!break1_0 && !except1_0 && bool___unbox__(b_5))
; [eval] p1_5 && (!break1_0 && !except1_0 && bool___unbox__(b_5))
(push) ; 16
; [then-branch: 4343 | !(p1_5@587@01) | live]
; [else-branch: 4343 | p1_5@587@01 | live]
(push) ; 17
; [then-branch: 4343 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 17
(push) ; 17
; [else-branch: 4343 | p1_5@587@01]
(assert p1_5@587@01)
; [eval] !break1_0
(push) ; 18
; [then-branch: 4344 | break1_0@569@01 | live]
; [else-branch: 4344 | !(break1_0@569@01) | live]
(push) ; 19
; [then-branch: 4344 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 19
(push) ; 19
; [else-branch: 4344 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 20
; [then-branch: 4345 | except1_0@562@01 | live]
; [else-branch: 4345 | !(except1_0@562@01) | live]
(push) ; 21
; [then-branch: 4345 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 21
(push) ; 21
; [else-branch: 4345 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] bool___unbox__(b_5)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0@485@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@485@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_0@562@01)
  (and
    (not except1_0@562@01)
    (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_0@485@01))))
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and
    (not break1_0@569@01)
    (=>
      (not except1_0@562@01)
      (and
        (not except1_0@562@01)
        (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_0@485@01)))
    (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_5@587@01
  (and
    p1_5@587@01
    (=>
      (not break1_0@569@01)
      (and
        (not break1_0@569@01)
        (=>
          (not except1_0@562@01)
          (and
            (not except1_0@562@01)
            (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
            (bool___unbox__%precondition $Snap.unit b_0@485@01)))
        (or (not except1_0@562@01) except1_0@562@01)))
    (or (not break1_0@569@01) break1_0@569@01))))
(declare-const p1_6@628@01 Bool)
(assert (=
  p1_6@628@01
  (and
    p1_5@587@01
    (and
      (not break1_0@569@01)
      (and (not except1_0@562@01) (bool___unbox__ $Snap.unit b_0@485@01))))))
; [exec]
; p2_6 := p2_5 && (!break2_0 && !except2_0 && bool___unbox__(b_5_0))
; [eval] p2_5 && (!break2_0 && !except2_0 && bool___unbox__(b_5_0))
(push) ; 16
; [then-branch: 4346 | !(p2_5@588@01) | live]
; [else-branch: 4346 | p2_5@588@01 | live]
(push) ; 17
; [then-branch: 4346 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 17
(push) ; 17
; [else-branch: 4346 | p2_5@588@01]
; [eval] !break2_0
(push) ; 18
; [then-branch: 4347 | break2_0@570@01 | live]
; [else-branch: 4347 | !(break2_0@570@01) | live]
(push) ; 19
; [then-branch: 4347 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 19
(push) ; 19
; [else-branch: 4347 | !(break2_0@570@01)]
; [eval] !except2_0
(push) ; 20
; [then-branch: 4348 | except2_0@564@01 | live]
; [else-branch: 4348 | !(except2_0@564@01) | live]
(push) ; 21
; [then-branch: 4348 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 21
(push) ; 21
; [else-branch: 4348 | !(except2_0@564@01)]
; [eval] bool___unbox__(b_5_0)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0_0@486@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0_0@486@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_0@564@01)
  (and
    (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_0_0@486@01))))
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and
    (=>
      (not except2_0@564@01)
      (and
        (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_0_0@486@01)))
    (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_5@588@01
  (and
    (=>
      (not break2_0@570@01)
      (and
        (=>
          (not except2_0@564@01)
          (and
            (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
            (bool___unbox__%precondition $Snap.unit b_0_0@486@01)))
        (or (not except2_0@564@01) except2_0@564@01)))
    (or (not break2_0@570@01) break2_0@570@01))))
(declare-const p2_6@629@01 Bool)
(assert (=
  p2_6@629@01
  (and
    p2_5@588@01
    (and
      (not break2_0@570@01)
      (and (not except2_0@564@01) (bool___unbox__ $Snap.unit b_0_0@486@01))))))
; [exec]
; p3_2 := p1_5 && (!break1_0 && !except1_0 && !bool___unbox__(b_5))
; [eval] p1_5 && (!break1_0 && !except1_0 && !bool___unbox__(b_5))
(push) ; 16
; [then-branch: 4349 | !(p1_5@587@01) | live]
; [else-branch: 4349 | p1_5@587@01 | live]
(push) ; 17
; [then-branch: 4349 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 17
(push) ; 17
; [else-branch: 4349 | p1_5@587@01]
(assert p1_5@587@01)
; [eval] !break1_0
(push) ; 18
; [then-branch: 4350 | break1_0@569@01 | live]
; [else-branch: 4350 | !(break1_0@569@01) | live]
(push) ; 19
; [then-branch: 4350 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 19
(push) ; 19
; [else-branch: 4350 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 20
; [then-branch: 4351 | except1_0@562@01 | live]
; [else-branch: 4351 | !(except1_0@562@01) | live]
(push) ; 21
; [then-branch: 4351 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 21
(push) ; 21
; [else-branch: 4351 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] !bool___unbox__(b_5)
; [eval] bool___unbox__(b_5)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0@485@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@485@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_0@562@01)
  (and
    (not except1_0@562@01)
    (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_0@485@01))))
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and
    (not break1_0@569@01)
    (=>
      (not except1_0@562@01)
      (and
        (not except1_0@562@01)
        (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_0@485@01)))
    (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3_2@630@01 Bool)
(assert (=
  p3_2@630@01
  (and
    p1_5@587@01
    (and
      (not break1_0@569@01)
      (and (not except1_0@562@01) (not (bool___unbox__ $Snap.unit b_0@485@01)))))))
; [exec]
; p4_2 := p2_5 && (!break2_0 && !except2_0 && !bool___unbox__(b_5_0))
; [eval] p2_5 && (!break2_0 && !except2_0 && !bool___unbox__(b_5_0))
(push) ; 16
; [then-branch: 4352 | !(p2_5@588@01) | live]
; [else-branch: 4352 | p2_5@588@01 | live]
(push) ; 17
; [then-branch: 4352 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 17
(push) ; 17
; [else-branch: 4352 | p2_5@588@01]
; [eval] !break2_0
(push) ; 18
; [then-branch: 4353 | break2_0@570@01 | live]
; [else-branch: 4353 | !(break2_0@570@01) | live]
(push) ; 19
; [then-branch: 4353 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 19
(push) ; 19
; [else-branch: 4353 | !(break2_0@570@01)]
; [eval] !except2_0
(push) ; 20
; [then-branch: 4354 | except2_0@564@01 | live]
; [else-branch: 4354 | !(except2_0@564@01) | live]
(push) ; 21
; [then-branch: 4354 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 21
(push) ; 21
; [else-branch: 4354 | !(except2_0@564@01)]
; [eval] !bool___unbox__(b_5_0)
; [eval] bool___unbox__(b_5_0)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0_0@486@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0_0@486@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_0@564@01)
  (and
    (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_0_0@486@01))))
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and
    (=>
      (not except2_0@564@01)
      (and
        (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_0_0@486@01)))
    (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4_2@631@01 Bool)
(assert (=
  p4_2@631@01
  (and
    p2_5@588@01
    (and
      (not break2_0@570@01)
      (and (not except2_0@564@01) (not (bool___unbox__ $Snap.unit b_0_0@486@01)))))))
; [exec]
; p1_7 := p1_6 &&
;   (!break1_0 && !except1_0 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p1_6 && (!break1_0 && !except1_0 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 4355 | !(p1_6@628@01) | live]
; [else-branch: 4355 | p1_6@628@01 | live]
(push) ; 17
; [then-branch: 4355 | !(p1_6@628@01)]
(assert (not p1_6@628@01))
(pop) ; 17
(push) ; 17
; [else-branch: 4355 | p1_6@628@01]
(assert p1_6@628@01)
; [eval] !break1_0
(push) ; 18
; [then-branch: 4356 | break1_0@569@01 | live]
; [else-branch: 4356 | !(break1_0@569@01) | live]
(push) ; 19
; [then-branch: 4356 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 19
(push) ; 19
; [else-branch: 4356 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 20
; [then-branch: 4357 | except1_0@562@01 | live]
; [else-branch: 4357 | !(except1_0@562@01) | live]
(push) ; 21
; [then-branch: 4357 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 21
(push) ; 21
; [else-branch: 4357 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_6@628@01
  (and
    p1_6@628@01
    (=>
      (not break1_0@569@01)
      (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01)))
    (or (not break1_0@569@01) break1_0@569@01))))
(assert (or p1_6@628@01 (not p1_6@628@01)))
; [exec]
; p2_7 := p2_6 &&
;   (!break2_0 && !except2_0 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_6 && (!break2_0 && !except2_0 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 4358 | !(p2_6@629@01) | live]
; [else-branch: 4358 | p2_6@629@01 | live]
(push) ; 17
; [then-branch: 4358 | !(p2_6@629@01)]
(assert (not p2_6@629@01))
(pop) ; 17
(push) ; 17
; [else-branch: 4358 | p2_6@629@01]
(assert p2_6@629@01)
; [eval] !break2_0
(push) ; 18
; [then-branch: 4359 | break2_0@570@01 | live]
; [else-branch: 4359 | !(break2_0@570@01) | live]
(push) ; 19
; [then-branch: 4359 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 19
(push) ; 19
; [else-branch: 4359 | !(break2_0@570@01)]
; [eval] !except2_0
(push) ; 20
; [then-branch: 4360 | except2_0@564@01 | live]
; [else-branch: 4360 | !(except2_0@564@01) | live]
(push) ; 21
; [then-branch: 4360 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 21
(push) ; 21
; [else-branch: 4360 | !(except2_0@564@01)]
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01)))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_6@629@01
  (and
    p2_6@629@01
    (=> (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01))
    (or (not break2_0@570@01) break2_0@570@01))))
(assert (or p2_6@629@01 (not p2_6@629@01)))
; [exec]
; p3_3 := p1_6 &&
;   (!break1_0 && !except1_0 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p1_6 && (!break1_0 && !except1_0 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 4361 | !(p1_6@628@01) | live]
; [else-branch: 4361 | p1_6@628@01 | live]
(push) ; 17
; [then-branch: 4361 | !(p1_6@628@01)]
(assert (not p1_6@628@01))
(pop) ; 17
(push) ; 17
; [else-branch: 4361 | p1_6@628@01]
(assert p1_6@628@01)
; [eval] !break1_0
(push) ; 18
; [then-branch: 4362 | break1_0@569@01 | live]
; [else-branch: 4362 | !(break1_0@569@01) | live]
(push) ; 19
; [then-branch: 4362 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 19
(push) ; 19
; [else-branch: 4362 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 20
; [then-branch: 4363 | except1_0@562@01 | live]
; [else-branch: 4363 | !(except1_0@562@01) | live]
(push) ; 21
; [then-branch: 4363 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 21
(push) ; 21
; [else-branch: 4363 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3_3@632@01 Bool)
(assert (=
  p3_3@632@01
  (and p1_6@628@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
; [exec]
; p4_3 := p2_6 &&
;   (!break2_0 && !except2_0 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_6 && (!break2_0 && !except2_0 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 4364 | !(p2_6@629@01) | live]
; [else-branch: 4364 | p2_6@629@01 | live]
(push) ; 17
; [then-branch: 4364 | !(p2_6@629@01)]
(assert (not p2_6@629@01))
(pop) ; 17
(push) ; 17
; [else-branch: 4364 | p2_6@629@01]
(assert p2_6@629@01)
; [eval] !break2_0
(push) ; 18
; [then-branch: 4365 | break2_0@570@01 | live]
; [else-branch: 4365 | !(break2_0@570@01) | live]
(push) ; 19
; [then-branch: 4365 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 19
(push) ; 19
; [else-branch: 4365 | !(break2_0@570@01)]
; [eval] !except2_0
(push) ; 20
; [then-branch: 4366 | except2_0@564@01 | live]
; [else-branch: 4366 | !(except2_0@564@01) | live]
(push) ; 21
; [then-branch: 4366 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 21
(push) ; 21
; [else-branch: 4366 | !(except2_0@564@01)]
; [eval] !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01)))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4_3@633@01 Bool)
(assert (=
  p4_3@633@01
  (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
; [eval] p1_7 && (!break1_0 && !except1_0)
; [then-branch: 4367 | False | dead]
; [else-branch: 4367 | True | live]
(push) ; 16
; [else-branch: 4367 | True]
(pop) ; 16
; [eval] !(p1_7 && (!break1_0 && !except1_0))
; [eval] p1_7 && (!break1_0 && !except1_0)
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4368 | True | live]
; [else-branch: 4368 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 4368 | True]
; [eval] p2_7 && (!break2_0 && !except2_0)
; [then-branch: 4369 | False | dead]
; [else-branch: 4369 | True | live]
(push) ; 17
; [else-branch: 4369 | True]
(pop) ; 17
; [eval] !(p2_7 && (!break2_0 && !except2_0))
; [eval] p2_7 && (!break2_0 && !except2_0)
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4370 | True | live]
; [else-branch: 4370 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 4370 | True]
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 18
; [then-branch: 4371 | !(p1_6@628@01) | live]
; [else-branch: 4371 | p1_6@628@01 | live]
(push) ; 19
; [then-branch: 4371 | !(p1_6@628@01)]
(assert (not p1_6@628@01))
(pop) ; 19
(push) ; 19
; [else-branch: 4371 | p1_6@628@01]
(assert p1_6@628@01)
; [eval] !break1_0
(push) ; 20
; [then-branch: 4372 | break1_0@569@01 | live]
; [else-branch: 4372 | !(break1_0@569@01) | live]
(push) ; 21
; [then-branch: 4372 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 21
(push) ; 21
; [else-branch: 4372 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> p1_6@628@01 (and p1_6@628@01 (or (not break1_0@569@01) break1_0@569@01))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_6@628@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4373 | p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 4373 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 4373 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(assert (not (and p1_6@628@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(pop) ; 18
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 18
; [then-branch: 4374 | !(p1_6@628@01) | live]
; [else-branch: 4374 | p1_6@628@01 | live]
(push) ; 19
; [then-branch: 4374 | !(p1_6@628@01)]
(assert (not p1_6@628@01))
(pop) ; 19
(push) ; 19
; [else-branch: 4374 | p1_6@628@01]
(assert p1_6@628@01)
; [eval] !break1_0
(push) ; 20
; [then-branch: 4375 | break1_0@569@01 | live]
; [else-branch: 4375 | !(break1_0@569@01) | live]
(push) ; 21
; [then-branch: 4375 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 21
(push) ; 21
; [else-branch: 4375 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_6@628@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_6@628@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4376 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 4376 | p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 4376 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(assert (not (and p1_6@628@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 19
; [then-branch: 4377 | !(p2_6@629@01) | live]
; [else-branch: 4377 | p2_6@629@01 | live]
(push) ; 20
; [then-branch: 4377 | !(p2_6@629@01)]
(assert (not p2_6@629@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4377 | p2_6@629@01]
(assert p2_6@629@01)
; [eval] !break2_0
(push) ; 21
; [then-branch: 4378 | break2_0@570@01 | live]
; [else-branch: 4378 | !(break2_0@570@01) | live]
(push) ; 22
; [then-branch: 4378 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 22
(push) ; 22
; [else-branch: 4378 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=> p2_6@629@01 (and p2_6@629@01 (or (not break2_0@570@01) break2_0@570@01))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4379 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
; [else-branch: 4379 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 4379 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01))))
; [exec]
; c_5_0.Container_valuep := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(declare-const Container_valuep@634@01 $Ref)
(assert (= Container_valuep@634@01 (__prim__int___box__ $Snap.unit 7)))
; [exec]
; tmp_0 := new()
(declare-const tmp_0@635@01 $Ref)
(assert (not (= tmp_0@635@01 $Ref.null)))
(assert (not (= tmp_0@635@01 _cthread_158_0@478@01)))
(assert (not (= tmp_0@635@01 tmp2_8@526@01)))
(assert (not (= tmp_0@635@01 tmp_0@582@01)))
(assert (not (= tmp_0@635@01 Exception_res_0_0@560@01)))
(assert (not (= tmp_0@635@01 c_0@483@01)))
(assert (not (= tmp_0@635@01 _err@561@01)))
(assert (not (= tmp_0@635@01 b_0@485@01)))
(assert (not
  (=
    tmp_0@635@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@573@01)))))))
(assert (not (= tmp_0@635@01 b_0_0@486@01)))
(assert (not (= tmp_0@635@01 tmp1_8@525@01)))
(assert (not (= tmp_0@635@01 _cthread_158@477@01)))
(assert (not (= tmp_0@635@01 c_0_0@484@01)))
(assert (not (= tmp_0@635@01 Container_valuep@634@01)))
(assert (not (= tmp_0@635@01 tmp1_6@521@01)))
(assert (not (= tmp_0@635@01 tmp2_6@522@01)))
(assert (not (= tmp_0@635@01 _err_1@563@01)))
(assert (not (= tmp_0@635@01 Exception_res_0@559@01)))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 20
; [then-branch: 4380 | !(p1_6@628@01) | live]
; [else-branch: 4380 | p1_6@628@01 | live]
(push) ; 21
; [then-branch: 4380 | !(p1_6@628@01)]
(assert (not p1_6@628@01))
(pop) ; 21
(push) ; 21
; [else-branch: 4380 | p1_6@628@01]
(assert p1_6@628@01)
; [eval] !break1_0
(push) ; 22
; [then-branch: 4381 | break1_0@569@01 | live]
; [else-branch: 4381 | !(break1_0@569@01) | live]
(push) ; 23
; [then-branch: 4381 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 23
(push) ; 23
; [else-branch: 4381 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 4382 | p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 4382 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(push) ; 20
; [else-branch: 4382 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(pop) ; 20
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 20
; [then-branch: 4383 | !(p1_6@628@01) | live]
; [else-branch: 4383 | p1_6@628@01 | live]
(push) ; 21
; [then-branch: 4383 | !(p1_6@628@01)]
(assert (not p1_6@628@01))
(pop) ; 21
(push) ; 21
; [else-branch: 4383 | p1_6@628@01]
(assert p1_6@628@01)
; [eval] !break1_0
(push) ; 22
; [then-branch: 4384 | break1_0@569@01 | live]
; [else-branch: 4384 | !(break1_0@569@01) | live]
(push) ; 23
; [then-branch: 4384 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 23
(push) ; 23
; [else-branch: 4384 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_6@628@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4385 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 4385 | p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 4385 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01))]
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 21
; [then-branch: 4386 | !(p2_6@629@01) | live]
; [else-branch: 4386 | p2_6@629@01 | live]
(push) ; 22
; [then-branch: 4386 | !(p2_6@629@01)]
(assert (not p2_6@629@01))
(pop) ; 22
(push) ; 22
; [else-branch: 4386 | p2_6@629@01]
; [eval] !break2_0
(push) ; 23
; [then-branch: 4387 | break2_0@570@01 | live]
; [else-branch: 4387 | !(break2_0@570@01) | live]
(push) ; 24
; [then-branch: 4387 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 24
(push) ; 24
; [else-branch: 4387 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (=> p2_6@629@01 (or (not break2_0@570@01) break2_0@570@01)))
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4388 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
; [else-branch: 4388 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 4388 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01))))
; [exec]
; Exception_res_0_0 := tmp_0
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 22
; [then-branch: 4389 | !(p1_6@628@01) | live]
; [else-branch: 4389 | p1_6@628@01 | live]
(push) ; 23
; [then-branch: 4389 | !(p1_6@628@01)]
(assert (not p1_6@628@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4389 | p1_6@628@01]
(assert p1_6@628@01)
; [eval] !break1_0
(push) ; 24
; [then-branch: 4390 | break1_0@569@01 | live]
; [else-branch: 4390 | !(break1_0@569@01) | live]
(push) ; 25
; [then-branch: 4390 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 25
(push) ; 25
; [else-branch: 4390 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 4391 | p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 4391 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(push) ; 22
; [else-branch: 4391 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(pop) ; 22
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 22
; [then-branch: 4392 | !(p1_6@628@01) | live]
; [else-branch: 4392 | p1_6@628@01 | live]
(push) ; 23
; [then-branch: 4392 | !(p1_6@628@01)]
(assert (not p1_6@628@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4392 | p1_6@628@01]
(assert p1_6@628@01)
; [eval] !break1_0
(push) ; 24
; [then-branch: 4393 | break1_0@569@01 | live]
; [else-branch: 4393 | !(break1_0@569@01) | live]
(push) ; 25
; [then-branch: 4393 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 25
(push) ; 25
; [else-branch: 4393 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_6@628@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4394 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 4394 | p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 4394 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01))]
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 23
; [then-branch: 4395 | !(p2_6@629@01) | live]
; [else-branch: 4395 | p2_6@629@01 | live]
(push) ; 24
; [then-branch: 4395 | !(p2_6@629@01)]
(assert (not p2_6@629@01))
(pop) ; 24
(push) ; 24
; [else-branch: 4395 | p2_6@629@01]
; [eval] !break2_0
(push) ; 25
; [then-branch: 4396 | break2_0@570@01 | live]
; [else-branch: 4396 | !(break2_0@570@01) | live]
(push) ; 26
; [then-branch: 4396 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 26
(push) ; 26
; [else-branch: 4396 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4397 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
; [else-branch: 4397 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 4397 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01))))
; [exec]
; inhale typeof(Exception_res_0_0) == Exception()
(declare-const $t@636@01 $Snap)
(assert (= $t@636@01 $Snap.unit))
; [eval] typeof(Exception_res_0_0) == Exception()
; [eval] typeof(Exception_res_0_0)
; [eval] Exception()
(assert (= (typeof<PyType> tmp_0@635@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_6 && (!break1_0 && !except1_0)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 4398 | !(p1_6@628@01) | live]
; [else-branch: 4398 | p1_6@628@01 | live]
(push) ; 25
; [then-branch: 4398 | !(p1_6@628@01)]
(assert (not p1_6@628@01))
(pop) ; 25
(push) ; 25
; [else-branch: 4398 | p1_6@628@01]
(assert p1_6@628@01)
; [eval] !break1_0
(push) ; 26
; [then-branch: 4399 | break1_0@569@01 | live]
; [else-branch: 4399 | !(break1_0@569@01) | live]
(push) ; 27
; [then-branch: 4399 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 27
(push) ; 27
; [else-branch: 4399 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 4400 | p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 4400 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(push) ; 24
; [else-branch: 4400 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(pop) ; 24
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 24
; [then-branch: 4401 | !(p1_6@628@01) | live]
; [else-branch: 4401 | p1_6@628@01 | live]
(push) ; 25
; [then-branch: 4401 | !(p1_6@628@01)]
(assert (not p1_6@628@01))
(pop) ; 25
(push) ; 25
; [else-branch: 4401 | p1_6@628@01]
(assert p1_6@628@01)
; [eval] !break1_0
(push) ; 26
; [then-branch: 4402 | break1_0@569@01 | live]
; [else-branch: 4402 | !(break1_0@569@01) | live]
(push) ; 27
; [then-branch: 4402 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 27
(push) ; 27
; [else-branch: 4402 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_6@628@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4403 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 4403 | p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 4403 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01))]
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 25
; [then-branch: 4404 | !(p2_6@629@01) | live]
; [else-branch: 4404 | p2_6@629@01 | live]
(push) ; 26
; [then-branch: 4404 | !(p2_6@629@01)]
(assert (not p2_6@629@01))
(pop) ; 26
(push) ; 26
; [else-branch: 4404 | p2_6@629@01]
; [eval] !break2_0
(push) ; 27
; [then-branch: 4405 | break2_0@570@01 | live]
; [else-branch: 4405 | !(break2_0@570@01) | live]
(push) ; 28
; [then-branch: 4405 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 28
(push) ; 28
; [else-branch: 4405 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4406 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
; [else-branch: 4406 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 4406 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01))))
; [exec]
; _err_1 := Exception_res_0_0
; [exec]
; except2_0 := true
; [exec]
; p1_8 := p3_2 &&
;   (!break1_0 && !except1_0 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p3_2 && (!break1_0 && !except1_0 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 4407 | !(p3_2@630@01) | live]
; [else-branch: 4407 | p3_2@630@01 | live]
(push) ; 27
; [then-branch: 4407 | !(p3_2@630@01)]
(assert (not p3_2@630@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4407 | p3_2@630@01]
(assert p3_2@630@01)
; [eval] !break1_0
(push) ; 28
; [then-branch: 4408 | break1_0@569@01 | live]
; [else-branch: 4408 | !(break1_0@569@01) | live]
(push) ; 29
; [then-branch: 4408 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 29
(push) ; 29
; [else-branch: 4408 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 30
; [then-branch: 4409 | except1_0@562@01 | live]
; [else-branch: 4409 | !(except1_0@562@01) | live]
(push) ; 31
; [then-branch: 4409 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 31
(push) ; 31
; [else-branch: 4409 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p3_2@630@01
  (and
    p3_2@630@01
    (=>
      (not break1_0@569@01)
      (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01)))
    (or (not break1_0@569@01) break1_0@569@01))))
(assert (or p3_2@630@01 (not p3_2@630@01)))
; [exec]
; p2_8 := p4_2 &&
;   (!break2_0 && !except2_0 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_2 && (!break2_0 && !except2_0 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 4410 | !(p4_2@631@01) | live]
; [else-branch: 4410 | p4_2@631@01 | live]
(push) ; 27
; [then-branch: 4410 | !(p4_2@631@01)]
(assert (not p4_2@631@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4410 | p4_2@631@01]
(assert p4_2@631@01)
; [eval] !break2_0
(push) ; 28
; [then-branch: 4411 | break2_0@570@01 | live]
; [else-branch: 4411 | !(break2_0@570@01) | live]
(push) ; 29
; [then-branch: 4411 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 29
(push) ; 29
; [else-branch: 4411 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=> p4_2@631@01 (and p4_2@631@01 (or (not break2_0@570@01) break2_0@570@01))))
(assert (or p4_2@631@01 (not p4_2@631@01)))
; [exec]
; p3_4 := p3_2 &&
;   (!break1_0 && !except1_0 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p3_2 && (!break1_0 && !except1_0 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 4412 | !(p3_2@630@01) | live]
; [else-branch: 4412 | p3_2@630@01 | live]
(push) ; 27
; [then-branch: 4412 | !(p3_2@630@01)]
(assert (not p3_2@630@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4412 | p3_2@630@01]
(assert p3_2@630@01)
; [eval] !break1_0
(push) ; 28
; [then-branch: 4413 | break1_0@569@01 | live]
; [else-branch: 4413 | !(break1_0@569@01) | live]
(push) ; 29
; [then-branch: 4413 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 29
(push) ; 29
; [else-branch: 4413 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 30
; [then-branch: 4414 | except1_0@562@01 | live]
; [else-branch: 4414 | !(except1_0@562@01) | live]
(push) ; 31
; [then-branch: 4414 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 31
(push) ; 31
; [else-branch: 4414 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p3_4@637@01 Bool)
(assert (=
  p3_4@637@01
  (and p3_2@630@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
; [exec]
; p4_4 := p4_2 &&
;   (!break2_0 && !except2_0 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_2 && (!break2_0 && !except2_0 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 4415 | !(p4_2@631@01) | live]
; [else-branch: 4415 | p4_2@631@01 | live]
(push) ; 27
; [then-branch: 4415 | !(p4_2@631@01)]
(assert (not p4_2@631@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4415 | p4_2@631@01]
(assert p4_2@631@01)
; [eval] !break2_0
(push) ; 28
; [then-branch: 4416 | break2_0@570@01 | live]
; [else-branch: 4416 | !(break2_0@570@01) | live]
(push) ; 29
; [then-branch: 4416 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 29
(push) ; 29
; [else-branch: 4416 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [eval] p1_8 && (!break1_0 && !except1_0)
; [then-branch: 4417 | False | dead]
; [else-branch: 4417 | True | live]
(push) ; 26
; [else-branch: 4417 | True]
(pop) ; 26
; [eval] !(p1_8 && (!break1_0 && !except1_0))
; [eval] p1_8 && (!break1_0 && !except1_0)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4418 | True | live]
; [else-branch: 4418 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 4418 | True]
; [eval] p2_8 && (!break2_0 && !except2_0)
; [then-branch: 4419 | False | dead]
; [else-branch: 4419 | True | live]
(push) ; 27
; [else-branch: 4419 | True]
(pop) ; 27
; [eval] !(p2_8 && (!break2_0 && !except2_0))
; [eval] p2_8 && (!break2_0 && !except2_0)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4420 | True | live]
; [else-branch: 4420 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 4420 | True]
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 28
; [then-branch: 4421 | !(p3_2@630@01) | live]
; [else-branch: 4421 | p3_2@630@01 | live]
(push) ; 29
; [then-branch: 4421 | !(p3_2@630@01)]
(assert (not p3_2@630@01))
(pop) ; 29
(push) ; 29
; [else-branch: 4421 | p3_2@630@01]
(assert p3_2@630@01)
; [eval] !break1_0
(push) ; 30
; [then-branch: 4422 | break1_0@569@01 | live]
; [else-branch: 4422 | !(break1_0@569@01) | live]
(push) ; 31
; [then-branch: 4422 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 31
(push) ; 31
; [else-branch: 4422 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=> p3_2@630@01 (and p3_2@630@01 (or (not break1_0@569@01) break1_0@569@01))))
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3_2@630@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4423 | p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 4423 | !(p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 4423 | !(p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(assert (not (and p3_2@630@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(pop) ; 28
; [eval] !(p3_2 && (!break1_0 && !except1_0))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 28
; [then-branch: 4424 | !(p3_2@630@01) | live]
; [else-branch: 4424 | p3_2@630@01 | live]
(push) ; 29
; [then-branch: 4424 | !(p3_2@630@01)]
(assert (not p3_2@630@01))
(pop) ; 29
(push) ; 29
; [else-branch: 4424 | p3_2@630@01]
(assert p3_2@630@01)
; [eval] !break1_0
(push) ; 30
; [then-branch: 4425 | break1_0@569@01 | live]
; [else-branch: 4425 | !(break1_0@569@01) | live]
(push) ; 31
; [then-branch: 4425 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 31
(push) ; 31
; [else-branch: 4425 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3_2@630@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3_2@630@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4426 | !(p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 4426 | p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 4426 | !(p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(assert (not (and p3_2@630@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 29
; [then-branch: 4427 | !(p4_2@631@01) | live]
; [else-branch: 4427 | p4_2@631@01 | live]
(push) ; 30
; [then-branch: 4427 | !(p4_2@631@01)]
(assert (not p4_2@631@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4427 | p4_2@631@01]
(assert p4_2@631@01)
; [eval] !break2_0
(push) ; 31
; [then-branch: 4428 | break2_0@570@01 | live]
; [else-branch: 4428 | !(break2_0@570@01) | live]
(push) ; 32
; [then-branch: 4428 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 32
(push) ; 32
; [else-branch: 4428 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 4429 | False | dead]
; [else-branch: 4429 | True | live]
(push) ; 29
; [else-branch: 4429 | True]
(pop) ; 29
; [eval] !(p4_2 && (!break2_0 && !except2_0))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 29
; [then-branch: 4430 | !(p4_2@631@01) | live]
; [else-branch: 4430 | p4_2@631@01 | live]
(push) ; 30
; [then-branch: 4430 | !(p4_2@631@01)]
(assert (not p4_2@631@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4430 | p4_2@631@01]
(assert p4_2@631@01)
; [eval] !break2_0
(push) ; 31
; [then-branch: 4431 | break2_0@570@01 | live]
; [else-branch: 4431 | !(break2_0@570@01) | live]
(push) ; 32
; [then-branch: 4431 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 32
(push) ; 32
; [else-branch: 4431 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4432 | True | live]
; [else-branch: 4432 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 4432 | True]
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 30
; [then-branch: 4433 | !(p3_2@630@01) | live]
; [else-branch: 4433 | p3_2@630@01 | live]
(push) ; 31
; [then-branch: 4433 | !(p3_2@630@01)]
(assert (not p3_2@630@01))
(pop) ; 31
(push) ; 31
; [else-branch: 4433 | p3_2@630@01]
(assert p3_2@630@01)
; [eval] !break1_0
(push) ; 32
; [then-branch: 4434 | break1_0@569@01 | live]
; [else-branch: 4434 | !(break1_0@569@01) | live]
(push) ; 33
; [then-branch: 4434 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 33
(push) ; 33
; [else-branch: 4434 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 4435 | p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 4435 | !(p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(push) ; 30
; [else-branch: 4435 | !(p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(pop) ; 30
; [eval] !(p3_2 && (!break1_0 && !except1_0))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 30
; [then-branch: 4436 | !(p3_2@630@01) | live]
; [else-branch: 4436 | p3_2@630@01 | live]
(push) ; 31
; [then-branch: 4436 | !(p3_2@630@01)]
(assert (not p3_2@630@01))
(pop) ; 31
(push) ; 31
; [else-branch: 4436 | p3_2@630@01]
(assert p3_2@630@01)
; [eval] !break1_0
(push) ; 32
; [then-branch: 4437 | break1_0@569@01 | live]
; [else-branch: 4437 | !(break1_0@569@01) | live]
(push) ; 33
; [then-branch: 4437 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 33
(push) ; 33
; [else-branch: 4437 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3_2@630@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4438 | !(p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 4438 | p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 4438 | !(p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01))]
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 31
; [then-branch: 4439 | !(p4_2@631@01) | live]
; [else-branch: 4439 | p4_2@631@01 | live]
(push) ; 32
; [then-branch: 4439 | !(p4_2@631@01)]
(assert (not p4_2@631@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4439 | p4_2@631@01]
(assert p4_2@631@01)
; [eval] !break2_0
(push) ; 33
; [then-branch: 4440 | break2_0@570@01 | live]
; [else-branch: 4440 | !(break2_0@570@01) | live]
(push) ; 34
; [then-branch: 4440 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 34
(push) ; 34
; [else-branch: 4440 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 4441 | False | dead]
; [else-branch: 4441 | True | live]
(push) ; 31
; [else-branch: 4441 | True]
(pop) ; 31
; [eval] !(p4_2 && (!break2_0 && !except2_0))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 31
; [then-branch: 4442 | !(p4_2@631@01) | live]
; [else-branch: 4442 | p4_2@631@01 | live]
(push) ; 32
; [then-branch: 4442 | !(p4_2@631@01)]
(assert (not p4_2@631@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4442 | p4_2@631@01]
(assert p4_2@631@01)
; [eval] !break2_0
(push) ; 33
; [then-branch: 4443 | break2_0@570@01 | live]
; [else-branch: 4443 | !(break2_0@570@01) | live]
(push) ; 34
; [then-branch: 4443 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 34
(push) ; 34
; [else-branch: 4443 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4444 | True | live]
; [else-branch: 4444 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 4444 | True]
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 32
; [then-branch: 4445 | !(p1_5@587@01) | live]
; [else-branch: 4445 | p1_5@587@01 | live]
(push) ; 33
; [then-branch: 4445 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 33
(push) ; 33
; [else-branch: 4445 | p1_5@587@01]
(assert p1_5@587@01)
; [eval] !break1_0
(push) ; 34
; [then-branch: 4446 | break1_0@569@01 | live]
; [else-branch: 4446 | !(break1_0@569@01) | live]
(push) ; 35
; [then-branch: 4446 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 35
(push) ; 35
; [else-branch: 4446 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 4447 | p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 4447 | !(p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(push) ; 32
; [else-branch: 4447 | !(p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(pop) ; 32
; [eval] !(p1_5 && (!break1_0 && !except1_0))
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 32
; [then-branch: 4448 | !(p1_5@587@01) | live]
; [else-branch: 4448 | p1_5@587@01 | live]
(push) ; 33
; [then-branch: 4448 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 33
(push) ; 33
; [else-branch: 4448 | p1_5@587@01]
(assert p1_5@587@01)
; [eval] !break1_0
(push) ; 34
; [then-branch: 4449 | break1_0@569@01 | live]
; [else-branch: 4449 | !(break1_0@569@01) | live]
(push) ; 35
; [then-branch: 4449 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 35
(push) ; 35
; [else-branch: 4449 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not (and p1_5@587@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4450 | !(p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 4450 | p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 4450 | !(p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01))]
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 33
; [then-branch: 4451 | !(p2_5@588@01) | live]
; [else-branch: 4451 | p2_5@588@01 | live]
(push) ; 34
; [then-branch: 4451 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 34
(push) ; 34
; [else-branch: 4451 | p2_5@588@01]
; [eval] !break2_0
(push) ; 35
; [then-branch: 4452 | break2_0@570@01 | live]
; [else-branch: 4452 | !(break2_0@570@01) | live]
(push) ; 36
; [then-branch: 4452 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 36
(push) ; 36
; [else-branch: 4452 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (=> p2_5@588@01 (or (not break2_0@570@01) break2_0@570@01)))
; [then-branch: 4453 | False | dead]
; [else-branch: 4453 | True | live]
(push) ; 33
; [else-branch: 4453 | True]
(pop) ; 33
; [eval] !(p2_5 && (!break2_0 && !except2_0))
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 33
; [then-branch: 4454 | !(p2_5@588@01) | live]
; [else-branch: 4454 | p2_5@588@01 | live]
(push) ; 34
; [then-branch: 4454 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 34
(push) ; 34
; [else-branch: 4454 | p2_5@588@01]
; [eval] !break2_0
(push) ; 35
; [then-branch: 4455 | break2_0@570@01 | live]
; [else-branch: 4455 | !(break2_0@570@01) | live]
(push) ; 36
; [then-branch: 4455 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 36
(push) ; 36
; [else-branch: 4455 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4456 | True | live]
; [else-branch: 4456 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 4456 | True]
; [exec]
; assert (p1_5 && (!break1_0 && !except1_0) ==>
;   _loop_termination_flag_0 ==> !true) &&
;   (p2_5 && (!break2_0 && !except2_0) ==>
;   _loop_termination_flag_0_0 ==> !true)
; [eval] p1_5 && (!break1_0 && !except1_0) ==> _loop_termination_flag_0 ==> !true
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 34
; [then-branch: 4457 | !(p1_5@587@01) | live]
; [else-branch: 4457 | p1_5@587@01 | live]
(push) ; 35
; [then-branch: 4457 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4457 | p1_5@587@01]
(assert p1_5@587@01)
; [eval] !break1_0
(push) ; 36
; [then-branch: 4458 | break1_0@569@01 | live]
; [else-branch: 4458 | !(break1_0@569@01) | live]
(push) ; 37
; [then-branch: 4458 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 37
(push) ; 37
; [else-branch: 4458 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 4459 | p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 4459 | !(p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(push) ; 35
; [else-branch: 4459 | !(p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_5 && (!break2_0 && !except2_0) ==> _loop_termination_flag_0_0 ==> !true
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 34
; [then-branch: 4460 | !(p2_5@588@01) | live]
; [else-branch: 4460 | p2_5@588@01 | live]
(push) ; 35
; [then-branch: 4460 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4460 | p2_5@588@01]
; [eval] !break2_0
(push) ; 36
; [then-branch: 4461 | break2_0@570@01 | live]
; [else-branch: 4461 | !(break2_0@570@01) | live]
(push) ; 37
; [then-branch: 4461 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 37
(push) ; 37
; [else-branch: 4461 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 4462 | False | dead]
; [else-branch: 4462 | True | live]
(push) ; 35
; [else-branch: 4462 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_4 && !bypass1_0 ==> true
; [eval] p1_4 && !bypass1_0
(push) ; 34
; [then-branch: 4463 | !(p1_4@475@01) | live]
; [else-branch: 4463 | p1_4@475@01 | live]
(push) ; 35
; [then-branch: 4463 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4463 | p1_4@475@01]
(assert p1_4@475@01)
; [eval] !bypass1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4464 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 4464 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4464 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> true
; [eval] p2_4 && !bypass2_0
(push) ; 34
; [then-branch: 4465 | !(p2_4@476@01) | live]
; [else-branch: 4465 | p2_4@476@01 | live]
(push) ; 35
; [then-branch: 4465 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4465 | p2_4@476@01]
(assert p2_4@476@01)
; [eval] !bypass2_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4466 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 4466 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4466 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0
(push) ; 34
; [then-branch: 4467 | !(p1_4@475@01) | live]
; [else-branch: 4467 | p1_4@475@01 | live]
(push) ; 35
; [then-branch: 4467 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4467 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4468 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 4468 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 4468 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0
(push) ; 35
; [then-branch: 4469 | !(p2_4@476@01) | live]
; [else-branch: 4469 | p2_4@476@01 | live]
(push) ; 36
; [then-branch: 4469 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 36
(push) ; 36
; [else-branch: 4469 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4470 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 4470 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4470 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0 ==> issubtype(typeof(c_5.Container_value), int())
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 4471 | !(p1_4@475@01) | live]
; [else-branch: 4471 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 4471 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4471 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4472 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 4472 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4472 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] issubtype(typeof(c_5.Container_value), int())
; [eval] typeof(c_5.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> issubtype(typeof(c_5_0.Container_valuep), int())
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 4473 | !(p2_4@476@01) | live]
; [else-branch: 4473 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 4473 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4473 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4474 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 4474 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4474 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] issubtype(typeof(c_5_0.Container_valuep), int())
; [eval] typeof(c_5_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(push) ; 36
(assert (not (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@634@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@634@01) (as int<PyType>  PyType))))
; [eval] p1_4 && !bypass1_0 ==> !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 4475 | !(p1_4@475@01) | live]
; [else-branch: 4475 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 4475 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4475 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4476 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 4476 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4476 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] !idle1_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4477 | True | live]
; [else-branch: 4477 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4477 | True]
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0@571@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0@571@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4478 | _loop_check_before_0@571@01 | live]
; [else-branch: 4478 | !(_loop_check_before_0@571@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4478 | _loop_check_before_0@571@01]
(assert _loop_check_before_0@571@01)
; [eval] _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 4479 | False | live]
; [else-branch: 4479 | True | live]
(push) ; 43
; [then-branch: 4479 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 4479 | True]
; [eval] perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_158)) == none
; [eval] perm(MustTerminate(_cthread_158))
(push) ; 44
; [then-branch: 4480 | False | live]
; [else-branch: 4480 | True | live]
(push) ; 45
; [then-branch: 4480 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 4480 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 46
; [then-branch: 4481 | False | live]
; [else-branch: 4481 | True | live]
(push) ; 47
; [then-branch: 4481 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 4481 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 48
; [then-branch: 4482 | False | live]
; [else-branch: 4482 | True | live]
(push) ; 49
; [then-branch: 4482 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 4482 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 4483 | False | live]
; [else-branch: 4483 | True | live]
(push) ; 51
; [then-branch: 4483 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 4483 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 4478 | !(_loop_check_before_0@571@01)]
(assert (not _loop_check_before_0@571@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (and
    p1_4@475@01
    (not bypass1_0@542@01)
    (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))))
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 4484 | !(p2_4@476@01) | live]
; [else-branch: 4484 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 4484 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4484 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4485 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 4485 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4485 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4486 | True | live]
; [else-branch: 4486 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4486 | True]
; [eval] _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0_0@572@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0_0@572@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4487 | _loop_check_before_0_0@572@01 | live]
; [else-branch: 4487 | !(_loop_check_before_0_0@572@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4487 | _loop_check_before_0_0@572@01]
(assert _loop_check_before_0_0@572@01)
; [eval] _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 4488 | False | live]
; [else-branch: 4488 | True | live]
(push) ; 43
; [then-branch: 4488 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 4488 | True]
; [eval] perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_158_0)) == none
; [eval] perm(MustTerminate_0(_cthread_158_0))
(push) ; 44
; [then-branch: 4489 | False | live]
; [else-branch: 4489 | True | live]
(push) ; 45
; [then-branch: 4489 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 4489 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false)
(push) ; 46
; [then-branch: 4490 | False | live]
; [else-branch: 4490 | True | live]
(push) ; 47
; [then-branch: 4490 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 4490 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false)
(push) ; 48
; [then-branch: 4491 | False | live]
; [else-branch: 4491 | True | live]
(push) ; 49
; [then-branch: 4491 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 4491 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 4492 | False | live]
; [else-branch: 4492 | True | live]
(push) ; 51
; [then-branch: 4492 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 4492 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 4487 | !(_loop_check_before_0_0@572@01)]
(assert (not _loop_check_before_0_0@572@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (and
    p2_4@476@01
    (not bypass2_0@543@01)
    (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))))
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0 ==> !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 4493 | !(p1_4@475@01) | live]
; [else-branch: 4493 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 4493 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4493 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4494 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 4494 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4494 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !idle1_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4495 | True | live]
; [else-branch: 4495 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4495 | True]
; [eval] !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0@571@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0@571@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4496 | !(_loop_check_before_0@571@01) | live]
; [else-branch: 4496 | _loop_check_before_0@571@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4496 | !(_loop_check_before_0@571@01)]
(assert (not _loop_check_before_0@571@01))
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 42
; [then-branch: 4497 | False | live]
; [else-branch: 4497 | True | live]
(push) ; 43
; [then-branch: 4497 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 4497 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 44
; [then-branch: 4498 | False | live]
; [else-branch: 4498 | True | live]
(push) ; 45
; [then-branch: 4498 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 4498 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 4499 | False | live]
; [else-branch: 4499 | True | live]
(push) ; 47
; [then-branch: 4499 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 4499 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 4496 | _loop_check_before_0@571@01]
(assert _loop_check_before_0@571@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (and
    p1_4@475@01
    (not bypass1_0@542@01)
    (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))))
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 4500 | !(p2_4@476@01) | live]
; [else-branch: 4500 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 4500 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4500 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4501 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 4501 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4501 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4502 | True | live]
; [else-branch: 4502 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4502 | True]
; [eval] !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_0_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0_0@572@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0_0@572@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4503 | !(_loop_check_before_0_0@572@01) | live]
; [else-branch: 4503 | _loop_check_before_0_0@572@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4503 | !(_loop_check_before_0_0@572@01)]
(assert (not _loop_check_before_0_0@572@01))
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false)
(push) ; 42
; [then-branch: 4504 | False | live]
; [else-branch: 4504 | True | live]
(push) ; 43
; [then-branch: 4504 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 4504 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false)
(push) ; 44
; [then-branch: 4505 | False | live]
; [else-branch: 4505 | True | live]
(push) ; 45
; [then-branch: 4505 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 4505 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 4506 | False | live]
; [else-branch: 4506 | True | live]
(push) ; 47
; [then-branch: 4506 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 4506 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 4503 | _loop_check_before_0_0@572@01]
(assert _loop_check_before_0_0@572@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (and
    p2_4@476@01
    (not bypass2_0@543@01)
    (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))))
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] bypass1_0 ==> tmp1_7 == except1_0
(push) ; 36
; [then-branch: 4507 | bypass1_0@542@01 | dead]
; [else-branch: 4507 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4507 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_6 == Exception_res_0
(push) ; 36
; [then-branch: 4508 | bypass1_0@542@01 | dead]
; [else-branch: 4508 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4508 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_10 == break1_0
(push) ; 36
; [then-branch: 4509 | bypass1_0@542@01 | dead]
; [else-branch: 4509 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4509 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_9 == _loop_check_before_0
(push) ; 36
; [then-branch: 4510 | bypass1_0@542@01 | dead]
; [else-branch: 4510 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4510 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_8 == _err
(push) ; 36
; [then-branch: 4511 | bypass1_0@542@01 | dead]
; [else-branch: 4511 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4511 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_5 == _loop_measures_0
(push) ; 36
; [then-branch: 4512 | bypass1_0@542@01 | dead]
; [else-branch: 4512 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4512 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_5 == _loop_measures_0_0
(push) ; 36
; [then-branch: 4513 | bypass2_0@543@01 | dead]
; [else-branch: 4513 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4513 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_8 == _err_1
(push) ; 36
; [then-branch: 4514 | bypass2_0@543@01 | dead]
; [else-branch: 4514 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4514 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_10 == break2_0
(push) ; 36
; [then-branch: 4515 | bypass2_0@543@01 | dead]
; [else-branch: 4515 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4515 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_7 == except2_0
(push) ; 36
; [then-branch: 4516 | bypass2_0@543@01 | dead]
; [else-branch: 4516 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4516 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_6 == Exception_res_0_0
(push) ; 36
; [then-branch: 4517 | bypass2_0@543@01 | dead]
; [else-branch: 4517 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4517 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_9 == _loop_check_before_0_0
(push) ; 36
; [then-branch: 4518 | bypass2_0@543@01 | dead]
; [else-branch: 4518 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4518 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 25
; [then-branch: 4519 | !(p2_6@629@01) | live]
; [else-branch: 4519 | p2_6@629@01 | live]
(push) ; 26
; [then-branch: 4519 | !(p2_6@629@01)]
(assert (not p2_6@629@01))
(pop) ; 26
(push) ; 26
; [else-branch: 4519 | p2_6@629@01]
(assert p2_6@629@01)
; [eval] !break2_0
(push) ; 27
; [then-branch: 4520 | break2_0@570@01 | live]
; [else-branch: 4520 | !(break2_0@570@01) | live]
(push) ; 28
; [then-branch: 4520 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 28
(push) ; 28
; [else-branch: 4520 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4521 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
; [else-branch: 4521 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 4521 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01))))
(pop) ; 25
(pop) ; 24
(pop) ; 23
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 23
; [then-branch: 4522 | !(p2_6@629@01) | live]
; [else-branch: 4522 | p2_6@629@01 | live]
(push) ; 24
; [then-branch: 4522 | !(p2_6@629@01)]
(assert (not p2_6@629@01))
(pop) ; 24
(push) ; 24
; [else-branch: 4522 | p2_6@629@01]
(assert p2_6@629@01)
; [eval] !break2_0
(push) ; 25
; [then-branch: 4523 | break2_0@570@01 | live]
; [else-branch: 4523 | !(break2_0@570@01) | live]
(push) ; 26
; [then-branch: 4523 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 26
(push) ; 26
; [else-branch: 4523 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4524 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
; [else-branch: 4524 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 4524 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01))))
(pop) ; 23
(pop) ; 22
(pop) ; 21
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 21
; [then-branch: 4525 | !(p2_6@629@01) | live]
; [else-branch: 4525 | p2_6@629@01 | live]
(push) ; 22
; [then-branch: 4525 | !(p2_6@629@01)]
(assert (not p2_6@629@01))
(pop) ; 22
(push) ; 22
; [else-branch: 4525 | p2_6@629@01]
(assert p2_6@629@01)
; [eval] !break2_0
(push) ; 23
; [then-branch: 4526 | break2_0@570@01 | live]
; [else-branch: 4526 | !(break2_0@570@01) | live]
(push) ; 24
; [then-branch: 4526 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 24
(push) ; 24
; [else-branch: 4526 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4527 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
; [else-branch: 4527 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
(set-option :timeout 0)
(push) ; 21
; [else-branch: 4527 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01))))
(pop) ; 21
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 4379 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(assert (not (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(pop) ; 19
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 19
; [then-branch: 4528 | !(p2_6@629@01) | live]
; [else-branch: 4528 | p2_6@629@01 | live]
(push) ; 20
; [then-branch: 4528 | !(p2_6@629@01)]
(assert (not p2_6@629@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4528 | p2_6@629@01]
(assert p2_6@629@01)
; [eval] !break2_0
(push) ; 21
; [then-branch: 4529 | break2_0@570@01 | live]
; [else-branch: 4529 | !(break2_0@570@01) | live]
(push) ; 22
; [then-branch: 4529 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 22
(push) ; 22
; [else-branch: 4529 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4530 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 4530 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 4530 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(assert (not (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
; [exec]
; tmp_0 := new()
(declare-const tmp_0@638@01 $Ref)
(assert (not (= tmp_0@638@01 $Ref.null)))
(assert (not (= tmp_0@638@01 _cthread_158_0@478@01)))
(assert (not (= tmp_0@638@01 tmp2_8@526@01)))
(assert (not (= tmp_0@638@01 tmp_0@582@01)))
(assert (not (= tmp_0@638@01 Exception_res_0_0@560@01)))
(assert (not (= tmp_0@638@01 c_0@483@01)))
(assert (not (= tmp_0@638@01 _err@561@01)))
(assert (not (= tmp_0@638@01 b_0@485@01)))
(assert (not
  (=
    tmp_0@638@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))
(assert (not
  (=
    tmp_0@638@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@573@01)))))))
(assert (not (= tmp_0@638@01 b_0_0@486@01)))
(assert (not (= tmp_0@638@01 tmp1_8@525@01)))
(assert (not (= tmp_0@638@01 _cthread_158@477@01)))
(assert (not (= tmp_0@638@01 c_0_0@484@01)))
(assert (not (= tmp_0@638@01 tmp1_6@521@01)))
(assert (not (= tmp_0@638@01 tmp2_6@522@01)))
(assert (not (= tmp_0@638@01 _err_1@563@01)))
(assert (not (= tmp_0@638@01 Exception_res_0@559@01)))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 20
; [then-branch: 4531 | !(p1_6@628@01) | live]
; [else-branch: 4531 | p1_6@628@01 | live]
(push) ; 21
; [then-branch: 4531 | !(p1_6@628@01)]
(assert (not p1_6@628@01))
(pop) ; 21
(push) ; 21
; [else-branch: 4531 | p1_6@628@01]
(assert p1_6@628@01)
; [eval] !break1_0
(push) ; 22
; [then-branch: 4532 | break1_0@569@01 | live]
; [else-branch: 4532 | !(break1_0@569@01) | live]
(push) ; 23
; [then-branch: 4532 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 23
(push) ; 23
; [else-branch: 4532 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 4533 | p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 4533 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(push) ; 20
; [else-branch: 4533 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(pop) ; 20
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 20
; [then-branch: 4534 | !(p1_6@628@01) | live]
; [else-branch: 4534 | p1_6@628@01 | live]
(push) ; 21
; [then-branch: 4534 | !(p1_6@628@01)]
(assert (not p1_6@628@01))
(pop) ; 21
(push) ; 21
; [else-branch: 4534 | p1_6@628@01]
(assert p1_6@628@01)
; [eval] !break1_0
(push) ; 22
; [then-branch: 4535 | break1_0@569@01 | live]
; [else-branch: 4535 | !(break1_0@569@01) | live]
(push) ; 23
; [then-branch: 4535 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 23
(push) ; 23
; [else-branch: 4535 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_6@628@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4536 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 4536 | p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 4536 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01))]
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 21
; [then-branch: 4537 | !(p2_6@629@01) | live]
; [else-branch: 4537 | p2_6@629@01 | live]
(push) ; 22
; [then-branch: 4537 | !(p2_6@629@01)]
(assert (not p2_6@629@01))
(pop) ; 22
(push) ; 22
; [else-branch: 4537 | p2_6@629@01]
(assert p2_6@629@01)
; [eval] !break2_0
(push) ; 23
; [then-branch: 4538 | break2_0@570@01 | live]
; [else-branch: 4538 | !(break2_0@570@01) | live]
(push) ; 24
; [then-branch: 4538 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 24
(push) ; 24
; [else-branch: 4538 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 4539 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 4539 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(push) ; 21
; [else-branch: 4539 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(pop) ; 21
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 21
; [then-branch: 4540 | !(p2_6@629@01) | live]
; [else-branch: 4540 | p2_6@629@01 | live]
(push) ; 22
; [then-branch: 4540 | !(p2_6@629@01)]
(assert (not p2_6@629@01))
(pop) ; 22
(push) ; 22
; [else-branch: 4540 | p2_6@629@01]
(assert p2_6@629@01)
; [eval] !break2_0
(push) ; 23
; [then-branch: 4541 | break2_0@570@01 | live]
; [else-branch: 4541 | !(break2_0@570@01) | live]
(push) ; 24
; [then-branch: 4541 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 24
(push) ; 24
; [else-branch: 4541 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4542 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 4542 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 4542 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01))]
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 22
; [then-branch: 4543 | !(p1_6@628@01) | live]
; [else-branch: 4543 | p1_6@628@01 | live]
(push) ; 23
; [then-branch: 4543 | !(p1_6@628@01)]
(assert (not p1_6@628@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4543 | p1_6@628@01]
(assert p1_6@628@01)
; [eval] !break1_0
(push) ; 24
; [then-branch: 4544 | break1_0@569@01 | live]
; [else-branch: 4544 | !(break1_0@569@01) | live]
(push) ; 25
; [then-branch: 4544 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 25
(push) ; 25
; [else-branch: 4544 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 4545 | p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 4545 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(push) ; 22
; [else-branch: 4545 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(pop) ; 22
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 22
; [then-branch: 4546 | !(p1_6@628@01) | live]
; [else-branch: 4546 | p1_6@628@01 | live]
(push) ; 23
; [then-branch: 4546 | !(p1_6@628@01)]
(assert (not p1_6@628@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4546 | p1_6@628@01]
(assert p1_6@628@01)
; [eval] !break1_0
(push) ; 24
; [then-branch: 4547 | break1_0@569@01 | live]
; [else-branch: 4547 | !(break1_0@569@01) | live]
(push) ; 25
; [then-branch: 4547 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 25
(push) ; 25
; [else-branch: 4547 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_6@628@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4548 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 4548 | p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 4548 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01))]
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 23
; [then-branch: 4549 | !(p2_6@629@01) | live]
; [else-branch: 4549 | p2_6@629@01 | live]
(push) ; 24
; [then-branch: 4549 | !(p2_6@629@01)]
(assert (not p2_6@629@01))
(pop) ; 24
(push) ; 24
; [else-branch: 4549 | p2_6@629@01]
(assert p2_6@629@01)
; [eval] !break2_0
(push) ; 25
; [then-branch: 4550 | break2_0@570@01 | live]
; [else-branch: 4550 | !(break2_0@570@01) | live]
(push) ; 26
; [then-branch: 4550 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 26
(push) ; 26
; [else-branch: 4550 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 4551 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 4551 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(push) ; 23
; [else-branch: 4551 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(pop) ; 23
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 23
; [then-branch: 4552 | !(p2_6@629@01) | live]
; [else-branch: 4552 | p2_6@629@01 | live]
(push) ; 24
; [then-branch: 4552 | !(p2_6@629@01)]
(assert (not p2_6@629@01))
(pop) ; 24
(push) ; 24
; [else-branch: 4552 | p2_6@629@01]
(assert p2_6@629@01)
; [eval] !break2_0
(push) ; 25
; [then-branch: 4553 | break2_0@570@01 | live]
; [else-branch: 4553 | !(break2_0@570@01) | live]
(push) ; 26
; [then-branch: 4553 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 26
(push) ; 26
; [else-branch: 4553 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4554 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 4554 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 4554 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01))]
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 24
; [then-branch: 4555 | !(p1_6@628@01) | live]
; [else-branch: 4555 | p1_6@628@01 | live]
(push) ; 25
; [then-branch: 4555 | !(p1_6@628@01)]
(assert (not p1_6@628@01))
(pop) ; 25
(push) ; 25
; [else-branch: 4555 | p1_6@628@01]
(assert p1_6@628@01)
; [eval] !break1_0
(push) ; 26
; [then-branch: 4556 | break1_0@569@01 | live]
; [else-branch: 4556 | !(break1_0@569@01) | live]
(push) ; 27
; [then-branch: 4556 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 27
(push) ; 27
; [else-branch: 4556 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 4557 | p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 4557 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(push) ; 24
; [else-branch: 4557 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(pop) ; 24
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 24
; [then-branch: 4558 | !(p1_6@628@01) | live]
; [else-branch: 4558 | p1_6@628@01 | live]
(push) ; 25
; [then-branch: 4558 | !(p1_6@628@01)]
(assert (not p1_6@628@01))
(pop) ; 25
(push) ; 25
; [else-branch: 4558 | p1_6@628@01]
(assert p1_6@628@01)
; [eval] !break1_0
(push) ; 26
; [then-branch: 4559 | break1_0@569@01 | live]
; [else-branch: 4559 | !(break1_0@569@01) | live]
(push) ; 27
; [then-branch: 4559 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 27
(push) ; 27
; [else-branch: 4559 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_6@628@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4560 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 4560 | p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 4560 | !(p1_6@628@01 && !(break1_0@569@01) && !(except1_0@562@01))]
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 25
; [then-branch: 4561 | !(p2_6@629@01) | live]
; [else-branch: 4561 | p2_6@629@01 | live]
(push) ; 26
; [then-branch: 4561 | !(p2_6@629@01)]
(assert (not p2_6@629@01))
(pop) ; 26
(push) ; 26
; [else-branch: 4561 | p2_6@629@01]
(assert p2_6@629@01)
; [eval] !break2_0
(push) ; 27
; [then-branch: 4562 | break2_0@570@01 | live]
; [else-branch: 4562 | !(break2_0@570@01) | live]
(push) ; 28
; [then-branch: 4562 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 28
(push) ; 28
; [else-branch: 4562 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 4563 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
; [else-branch: 4563 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
(push) ; 25
; [else-branch: 4563 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01))]
(pop) ; 25
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 25
; [then-branch: 4564 | !(p2_6@629@01) | live]
; [else-branch: 4564 | p2_6@629@01 | live]
(push) ; 26
; [then-branch: 4564 | !(p2_6@629@01)]
(assert (not p2_6@629@01))
(pop) ; 26
(push) ; 26
; [else-branch: 4564 | p2_6@629@01]
(assert p2_6@629@01)
; [eval] !break2_0
(push) ; 27
; [then-branch: 4565 | break2_0@570@01 | live]
; [else-branch: 4565 | !(break2_0@570@01) | live]
(push) ; 28
; [then-branch: 4565 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 28
(push) ; 28
; [else-branch: 4565 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4566 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)) | live]
; [else-branch: 4566 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 4566 | !(p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01))]
; [exec]
; p1_8 := p3_2 &&
;   (!break1_0 && !except1_0 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p3_2 && (!break1_0 && !except1_0 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 4567 | !(p3_2@630@01) | live]
; [else-branch: 4567 | p3_2@630@01 | live]
(push) ; 27
; [then-branch: 4567 | !(p3_2@630@01)]
(assert (not p3_2@630@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4567 | p3_2@630@01]
(assert p3_2@630@01)
; [eval] !break1_0
(push) ; 28
; [then-branch: 4568 | break1_0@569@01 | live]
; [else-branch: 4568 | !(break1_0@569@01) | live]
(push) ; 29
; [then-branch: 4568 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 29
(push) ; 29
; [else-branch: 4568 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 30
; [then-branch: 4569 | except1_0@562@01 | live]
; [else-branch: 4569 | !(except1_0@562@01) | live]
(push) ; 31
; [then-branch: 4569 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 31
(push) ; 31
; [else-branch: 4569 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p3_2@630@01
  (and
    p3_2@630@01
    (=>
      (not break1_0@569@01)
      (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01)))
    (or (not break1_0@569@01) break1_0@569@01))))
(assert (or p3_2@630@01 (not p3_2@630@01)))
; [exec]
; p2_8 := p4_2 &&
;   (!break2_0 && !except2_0 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_2 && (!break2_0 && !except2_0 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 4570 | !(p4_2@631@01) | live]
; [else-branch: 4570 | p4_2@631@01 | live]
(push) ; 27
; [then-branch: 4570 | !(p4_2@631@01)]
(assert (not p4_2@631@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4570 | p4_2@631@01]
(assert p4_2@631@01)
; [eval] !break2_0
(push) ; 28
; [then-branch: 4571 | break2_0@570@01 | live]
; [else-branch: 4571 | !(break2_0@570@01) | live]
(push) ; 29
; [then-branch: 4571 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 29
(push) ; 29
; [else-branch: 4571 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(push) ; 30
; [then-branch: 4572 | except2_0@564@01 | live]
; [else-branch: 4572 | !(except2_0@564@01) | live]
(push) ; 31
; [then-branch: 4572 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 31
(push) ; 31
; [else-branch: 4572 | !(except2_0@564@01)]
(assert (not except2_0@564@01))
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p4_2@631@01
  (and
    p4_2@631@01
    (=>
      (not break2_0@570@01)
      (and (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01)))
    (or (not break2_0@570@01) break2_0@570@01))))
(assert (or p4_2@631@01 (not p4_2@631@01)))
; [exec]
; p3_4 := p3_2 &&
;   (!break1_0 && !except1_0 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p3_2 && (!break1_0 && !except1_0 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 4573 | !(p3_2@630@01) | live]
; [else-branch: 4573 | p3_2@630@01 | live]
(push) ; 27
; [then-branch: 4573 | !(p3_2@630@01)]
(assert (not p3_2@630@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4573 | p3_2@630@01]
(assert p3_2@630@01)
; [eval] !break1_0
(push) ; 28
; [then-branch: 4574 | break1_0@569@01 | live]
; [else-branch: 4574 | !(break1_0@569@01) | live]
(push) ; 29
; [then-branch: 4574 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 29
(push) ; 29
; [else-branch: 4574 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 30
; [then-branch: 4575 | except1_0@562@01 | live]
; [else-branch: 4575 | !(except1_0@562@01) | live]
(push) ; 31
; [then-branch: 4575 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 31
(push) ; 31
; [else-branch: 4575 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and (not break1_0@569@01) (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p3_4@639@01 Bool)
(assert (=
  p3_4@639@01
  (and p3_2@630@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
; [exec]
; p4_4 := p4_2 &&
;   (!break2_0 && !except2_0 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_2 && (!break2_0 && !except2_0 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 4576 | !(p4_2@631@01) | live]
; [else-branch: 4576 | p4_2@631@01 | live]
(push) ; 27
; [then-branch: 4576 | !(p4_2@631@01)]
(assert (not p4_2@631@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4576 | p4_2@631@01]
(assert p4_2@631@01)
; [eval] !break2_0
(push) ; 28
; [then-branch: 4577 | break2_0@570@01 | live]
; [else-branch: 4577 | !(break2_0@570@01) | live]
(push) ; 29
; [then-branch: 4577 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 29
(push) ; 29
; [else-branch: 4577 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(push) ; 30
; [then-branch: 4578 | except2_0@564@01 | live]
; [else-branch: 4578 | !(except2_0@564@01) | live]
(push) ; 31
; [then-branch: 4578 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 31
(push) ; 31
; [else-branch: 4578 | !(except2_0@564@01)]
(assert (not except2_0@564@01))
; [eval] !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and (not break2_0@570@01) (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p4_4@640@01 Bool)
(assert (=
  p4_4@640@01
  (and p4_2@631@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
; [eval] p1_8 && (!break1_0 && !except1_0)
; [then-branch: 4579 | False | dead]
; [else-branch: 4579 | True | live]
(push) ; 26
; [else-branch: 4579 | True]
(pop) ; 26
; [eval] !(p1_8 && (!break1_0 && !except1_0))
; [eval] p1_8 && (!break1_0 && !except1_0)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4580 | True | live]
; [else-branch: 4580 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 4580 | True]
; [eval] p2_8 && (!break2_0 && !except2_0)
; [then-branch: 4581 | False | dead]
; [else-branch: 4581 | True | live]
(push) ; 27
; [else-branch: 4581 | True]
(pop) ; 27
; [eval] !(p2_8 && (!break2_0 && !except2_0))
; [eval] p2_8 && (!break2_0 && !except2_0)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4582 | True | live]
; [else-branch: 4582 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 4582 | True]
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 28
; [then-branch: 4583 | !(p3_2@630@01) | live]
; [else-branch: 4583 | p3_2@630@01 | live]
(push) ; 29
; [then-branch: 4583 | !(p3_2@630@01)]
(assert (not p3_2@630@01))
(pop) ; 29
(push) ; 29
; [else-branch: 4583 | p3_2@630@01]
(assert p3_2@630@01)
; [eval] !break1_0
(push) ; 30
; [then-branch: 4584 | break1_0@569@01 | live]
; [else-branch: 4584 | !(break1_0@569@01) | live]
(push) ; 31
; [then-branch: 4584 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 31
(push) ; 31
; [else-branch: 4584 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=> p3_2@630@01 (and p3_2@630@01 (or (not break1_0@569@01) break1_0@569@01))))
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3_2@630@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4585 | p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 4585 | !(p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 4585 | !(p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(assert (not (and p3_2@630@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(pop) ; 28
; [eval] !(p3_2 && (!break1_0 && !except1_0))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 28
; [then-branch: 4586 | !(p3_2@630@01) | live]
; [else-branch: 4586 | p3_2@630@01 | live]
(push) ; 29
; [then-branch: 4586 | !(p3_2@630@01)]
(assert (not p3_2@630@01))
(pop) ; 29
(push) ; 29
; [else-branch: 4586 | p3_2@630@01]
(assert p3_2@630@01)
; [eval] !break1_0
(push) ; 30
; [then-branch: 4587 | break1_0@569@01 | live]
; [else-branch: 4587 | !(break1_0@569@01) | live]
(push) ; 31
; [then-branch: 4587 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 31
(push) ; 31
; [else-branch: 4587 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3_2@630@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3_2@630@01 (and (not break1_0@569@01) (not except1_0@562@01))))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4588 | !(p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 4588 | p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 4588 | !(p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(assert (not (and p3_2@630@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 29
; [then-branch: 4589 | !(p4_2@631@01) | live]
; [else-branch: 4589 | p4_2@631@01 | live]
(push) ; 30
; [then-branch: 4589 | !(p4_2@631@01)]
(assert (not p4_2@631@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4589 | p4_2@631@01]
(assert p4_2@631@01)
; [eval] !break2_0
(push) ; 31
; [then-branch: 4590 | break2_0@570@01 | live]
; [else-branch: 4590 | !(break2_0@570@01) | live]
(push) ; 32
; [then-branch: 4590 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 32
(push) ; 32
; [else-branch: 4590 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p4_2@631@01 (and p4_2@631@01 (or (not break2_0@570@01) break2_0@570@01))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4_2@631@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4_2@631@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4591 | p4_2@631@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
; [else-branch: 4591 | !(p4_2@631@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 4591 | p4_2@631@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p4_2@631@01 (and (not break2_0@570@01) (not except2_0@564@01))))
; [exec]
; c_5_0.Container_valuep := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 30
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 30
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_valuep@641@01 $Ref)
(assert (= Container_valuep@641@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 30
; [then-branch: 4592 | !(p3_2@630@01) | live]
; [else-branch: 4592 | p3_2@630@01 | live]
(push) ; 31
; [then-branch: 4592 | !(p3_2@630@01)]
(assert (not p3_2@630@01))
(pop) ; 31
(push) ; 31
; [else-branch: 4592 | p3_2@630@01]
(assert p3_2@630@01)
; [eval] !break1_0
(push) ; 32
; [then-branch: 4593 | break1_0@569@01 | live]
; [else-branch: 4593 | !(break1_0@569@01) | live]
(push) ; 33
; [then-branch: 4593 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 33
(push) ; 33
; [else-branch: 4593 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 4594 | p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 4594 | !(p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(push) ; 30
; [else-branch: 4594 | !(p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(pop) ; 30
; [eval] !(p3_2 && (!break1_0 && !except1_0))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 30
; [then-branch: 4595 | !(p3_2@630@01) | live]
; [else-branch: 4595 | p3_2@630@01 | live]
(push) ; 31
; [then-branch: 4595 | !(p3_2@630@01)]
(assert (not p3_2@630@01))
(pop) ; 31
(push) ; 31
; [else-branch: 4595 | p3_2@630@01]
(assert p3_2@630@01)
; [eval] !break1_0
(push) ; 32
; [then-branch: 4596 | break1_0@569@01 | live]
; [else-branch: 4596 | !(break1_0@569@01) | live]
(push) ; 33
; [then-branch: 4596 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 33
(push) ; 33
; [else-branch: 4596 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3_2@630@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4597 | !(p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 4597 | p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 4597 | !(p3_2@630@01 && !(break1_0@569@01) && !(except1_0@562@01))]
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 31
; [then-branch: 4598 | !(p4_2@631@01) | live]
; [else-branch: 4598 | p4_2@631@01 | live]
(push) ; 32
; [then-branch: 4598 | !(p4_2@631@01)]
(assert (not p4_2@631@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4598 | p4_2@631@01]
; [eval] !break2_0
(push) ; 33
; [then-branch: 4599 | break2_0@570@01 | live]
; [else-branch: 4599 | !(break2_0@570@01) | live]
(push) ; 34
; [then-branch: 4599 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 34
(push) ; 34
; [else-branch: 4599 | !(break2_0@570@01)]
; [eval] !except2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (=> p4_2@631@01 (or (not break2_0@570@01) break2_0@570@01)))
(push) ; 31
(set-option :timeout 10)
(assert (not (not (and p4_2@631@01 (and (not break2_0@570@01) (not except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4_2@631@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4600 | p4_2@631@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
; [else-branch: 4600 | !(p4_2@631@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 4600 | p4_2@631@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p4_2@631@01 (and (not break2_0@570@01) (not except2_0@564@01))))
; [exec]
; break2_0 := true
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 32
; [then-branch: 4601 | !(p1_5@587@01) | live]
; [else-branch: 4601 | p1_5@587@01 | live]
(push) ; 33
; [then-branch: 4601 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 33
(push) ; 33
; [else-branch: 4601 | p1_5@587@01]
(assert p1_5@587@01)
; [eval] !break1_0
(push) ; 34
; [then-branch: 4602 | break1_0@569@01 | live]
; [else-branch: 4602 | !(break1_0@569@01) | live]
(push) ; 35
; [then-branch: 4602 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 35
(push) ; 35
; [else-branch: 4602 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 4603 | p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 4603 | !(p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(push) ; 32
; [else-branch: 4603 | !(p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(pop) ; 32
; [eval] !(p1_5 && (!break1_0 && !except1_0))
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 32
; [then-branch: 4604 | !(p1_5@587@01) | live]
; [else-branch: 4604 | p1_5@587@01 | live]
(push) ; 33
; [then-branch: 4604 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 33
(push) ; 33
; [else-branch: 4604 | p1_5@587@01]
(assert p1_5@587@01)
; [eval] !break1_0
(push) ; 34
; [then-branch: 4605 | break1_0@569@01 | live]
; [else-branch: 4605 | !(break1_0@569@01) | live]
(push) ; 35
; [then-branch: 4605 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 35
(push) ; 35
; [else-branch: 4605 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not (and p1_5@587@01 (and (not break1_0@569@01) (not except1_0@562@01)))))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4606 | !(p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
; [else-branch: 4606 | p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 4606 | !(p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01))]
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 33
; [then-branch: 4607 | !(p2_5@588@01) | live]
; [else-branch: 4607 | p2_5@588@01 | live]
(push) ; 34
; [then-branch: 4607 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 34
(push) ; 34
; [else-branch: 4607 | p2_5@588@01]
; [eval] !break2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 4608 | False | dead]
; [else-branch: 4608 | True | live]
(push) ; 33
; [else-branch: 4608 | True]
(pop) ; 33
; [eval] !(p2_5 && (!break2_0 && !except2_0))
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 33
; [then-branch: 4609 | !(p2_5@588@01) | live]
; [else-branch: 4609 | p2_5@588@01 | live]
(push) ; 34
; [then-branch: 4609 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 34
(push) ; 34
; [else-branch: 4609 | p2_5@588@01]
; [eval] !break2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4610 | True | live]
; [else-branch: 4610 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 4610 | True]
; [exec]
; assert (p1_5 && (!break1_0 && !except1_0) ==>
;   _loop_termination_flag_0 ==> !true) &&
;   (p2_5 && (!break2_0 && !except2_0) ==>
;   _loop_termination_flag_0_0 ==> !true)
; [eval] p1_5 && (!break1_0 && !except1_0) ==> _loop_termination_flag_0 ==> !true
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 34
; [then-branch: 4611 | !(p1_5@587@01) | live]
; [else-branch: 4611 | p1_5@587@01 | live]
(push) ; 35
; [then-branch: 4611 | !(p1_5@587@01)]
(assert (not p1_5@587@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4611 | p1_5@587@01]
(assert p1_5@587@01)
; [eval] !break1_0
(push) ; 36
; [then-branch: 4612 | break1_0@569@01 | live]
; [else-branch: 4612 | !(break1_0@569@01) | live]
(push) ; 37
; [then-branch: 4612 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 37
(push) ; 37
; [else-branch: 4612 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 4613 | p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01) | dead]
; [else-branch: 4613 | !(p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01)) | live]
(push) ; 35
; [else-branch: 4613 | !(p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01))]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_5 && (!break2_0 && !except2_0) ==> _loop_termination_flag_0_0 ==> !true
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 34
; [then-branch: 4614 | !(p2_5@588@01) | live]
; [else-branch: 4614 | p2_5@588@01 | live]
(push) ; 35
; [then-branch: 4614 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4614 | p2_5@588@01]
; [eval] !break2_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 4615 | False | dead]
; [else-branch: 4615 | True | live]
(push) ; 35
; [else-branch: 4615 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_4 && !bypass1_0 ==> true
; [eval] p1_4 && !bypass1_0
(push) ; 34
; [then-branch: 4616 | !(p1_4@475@01) | live]
; [else-branch: 4616 | p1_4@475@01 | live]
(push) ; 35
; [then-branch: 4616 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4616 | p1_4@475@01]
(assert p1_4@475@01)
; [eval] !bypass1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4617 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 4617 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4617 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> true
; [eval] p2_4 && !bypass2_0
(push) ; 34
; [then-branch: 4618 | !(p2_4@476@01) | live]
; [else-branch: 4618 | p2_4@476@01 | live]
(push) ; 35
; [then-branch: 4618 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4618 | p2_4@476@01]
(assert p2_4@476@01)
; [eval] !bypass2_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4619 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 4619 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4619 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0
(push) ; 34
; [then-branch: 4620 | !(p1_4@475@01) | live]
; [else-branch: 4620 | p1_4@475@01 | live]
(push) ; 35
; [then-branch: 4620 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4620 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4621 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 4621 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 4621 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0
(push) ; 35
; [then-branch: 4622 | !(p2_4@476@01) | live]
; [else-branch: 4622 | p2_4@476@01 | live]
(push) ; 36
; [then-branch: 4622 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 36
(push) ; 36
; [else-branch: 4622 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4623 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 4623 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4623 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0 ==> issubtype(typeof(c_5.Container_value), int())
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 4624 | !(p1_4@475@01) | live]
; [else-branch: 4624 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 4624 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4624 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4625 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 4625 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4625 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] issubtype(typeof(c_5.Container_value), int())
; [eval] typeof(c_5.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> issubtype(typeof(c_5_0.Container_valuep), int())
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 4626 | !(p2_4@476@01) | live]
; [else-branch: 4626 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 4626 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4626 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4627 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 4627 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4627 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] issubtype(typeof(c_5_0.Container_valuep), int())
; [eval] typeof(c_5_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
(push) ; 36
(assert (not (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@641@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@641@01) (as int<PyType>  PyType))))
; [eval] p1_4 && !bypass1_0 ==> !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 4628 | !(p1_4@475@01) | live]
; [else-branch: 4628 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 4628 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4628 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4629 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 4629 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4629 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] !idle1_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4630 | True | live]
; [else-branch: 4630 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4630 | True]
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0@571@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0@571@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4631 | _loop_check_before_0@571@01 | live]
; [else-branch: 4631 | !(_loop_check_before_0@571@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4631 | _loop_check_before_0@571@01]
(assert _loop_check_before_0@571@01)
; [eval] _loop_termination_flag_0 || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 4632 | False | live]
; [else-branch: 4632 | True | live]
(push) ; 43
; [then-branch: 4632 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 4632 | True]
; [eval] perm(MustTerminate(_cthread_158)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_158)) == none
; [eval] perm(MustTerminate(_cthread_158))
(push) ; 44
; [then-branch: 4633 | False | live]
; [else-branch: 4633 | True | live]
(push) ; 45
; [then-branch: 4633 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 4633 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 46
; [then-branch: 4634 | False | live]
; [else-branch: 4634 | True | live]
(push) ; 47
; [then-branch: 4634 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 4634 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 48
; [then-branch: 4635 | False | live]
; [else-branch: 4635 | True | live]
(push) ; 49
; [then-branch: 4635 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 4635 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 4636 | False | live]
; [else-branch: 4636 | True | live]
(push) ; 51
; [then-branch: 4636 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 4636 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 4631 | !(_loop_check_before_0@571@01)]
(assert (not _loop_check_before_0@571@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (and
    p1_4@475@01
    (not bypass1_0@542@01)
    (or (not _loop_check_before_0@571@01) _loop_check_before_0@571@01))))
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 4637 | !(p2_4@476@01) | live]
; [else-branch: 4637 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 4637 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4637 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4638 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 4638 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4638 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4639 | True | live]
; [else-branch: 4639 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4639 | True]
; [eval] _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0_0@572@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0_0@572@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4640 | _loop_check_before_0_0@572@01 | live]
; [else-branch: 4640 | !(_loop_check_before_0_0@572@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4640 | _loop_check_before_0_0@572@01]
(assert _loop_check_before_0_0@572@01)
; [eval] _loop_termination_flag_0_0 || perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 4641 | False | live]
; [else-branch: 4641 | True | live]
(push) ; 43
; [then-branch: 4641 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 4641 | True]
; [eval] perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_158_0)) == none
; [eval] perm(MustTerminate_0(_cthread_158_0))
(push) ; 44
; [then-branch: 4642 | False | live]
; [else-branch: 4642 | True | live]
(push) ; 45
; [then-branch: 4642 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 4642 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false)
(push) ; 46
; [then-branch: 4643 | False | live]
; [else-branch: 4643 | True | live]
(push) ; 47
; [then-branch: 4643 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 4643 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false)
(push) ; 48
; [then-branch: 4644 | False | live]
; [else-branch: 4644 | True | live]
(push) ; 49
; [then-branch: 4644 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 4644 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 4645 | False | live]
; [else-branch: 4645 | True | live]
(push) ; 51
; [then-branch: 4645 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 4645 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 4640 | !(_loop_check_before_0_0@572@01)]
(assert (not _loop_check_before_0_0@572@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (and
    p2_4@476@01
    (not bypass2_0@543@01)
    (or (not _loop_check_before_0_0@572@01) _loop_check_before_0_0@572@01))))
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] p1_4 && !bypass1_0 ==> !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] p1_4 && !bypass1_0
(push) ; 36
; [then-branch: 4646 | !(p1_4@475@01) | live]
; [else-branch: 4646 | p1_4@475@01 | live]
(push) ; 37
; [then-branch: 4646 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4646 | p1_4@475@01]
; [eval] !bypass1_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_4@475@01 (not bypass1_0@542@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_4@475@01 (not bypass1_0@542@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4647 | p1_4@475@01 && !(bypass1_0@542@01) | live]
; [else-branch: 4647 | !(p1_4@475@01 && !(bypass1_0@542@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4647 | p1_4@475@01 && !(bypass1_0@542@01)]
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !idle1_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4648 | True | live]
; [else-branch: 4648 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4648 | True]
; [eval] !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0@571@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0@571@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4649 | !(_loop_check_before_0@571@01) | live]
; [else-branch: 4649 | _loop_check_before_0@571@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4649 | !(_loop_check_before_0@571@01)]
(assert (not _loop_check_before_0@571@01))
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 42
; [then-branch: 4650 | False | live]
; [else-branch: 4650 | True | live]
(push) ; 43
; [then-branch: 4650 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 4650 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 44
; [then-branch: 4651 | False | live]
; [else-branch: 4651 | True | live]
(push) ; 45
; [then-branch: 4651 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 4651 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 4652 | False | live]
; [else-branch: 4652 | True | live]
(push) ; 47
; [then-branch: 4652 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 4652 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 4649 | _loop_check_before_0@571@01]
(assert _loop_check_before_0@571@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_4@475@01 (not bypass1_0@542@01))
  (and
    p1_4@475@01
    (not bypass1_0@542@01)
    (or _loop_check_before_0@571@01 (not _loop_check_before_0@571@01)))))
(assert (and p1_4@475@01 (not bypass1_0@542@01)))
; [eval] p2_4 && !bypass2_0 ==> !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] p2_4 && !bypass2_0
(push) ; 36
; [then-branch: 4653 | !(p2_4@476@01) | live]
; [else-branch: 4653 | p2_4@476@01 | live]
(push) ; 37
; [then-branch: 4653 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 37
(push) ; 37
; [else-branch: 4653 | p2_4@476@01]
; [eval] !bypass2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_4@476@01 (not bypass2_0@543@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_4@476@01 (not bypass2_0@543@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4654 | p2_4@476@01 && !(bypass2_0@543@01) | live]
; [else-branch: 4654 | !(p2_4@476@01 && !(bypass2_0@543@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4654 | p2_4@476@01 && !(bypass2_0@543@01)]
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_0
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4655 | True | live]
; [else-branch: 4655 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4655 | True]
; [eval] !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_0_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_0_0@572@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_0_0@572@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4656 | !(_loop_check_before_0_0@572@01) | live]
; [else-branch: 4656 | _loop_check_before_0_0@572@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4656 | !(_loop_check_before_0_0@572@01)]
(assert (not _loop_check_before_0_0@572@01))
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false)
(push) ; 42
; [then-branch: 4657 | False | live]
; [else-branch: 4657 | True | live]
(push) ; 43
; [then-branch: 4657 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 4657 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false)
(push) ; 44
; [then-branch: 4658 | False | live]
; [else-branch: 4658 | True | live]
(push) ; 45
; [then-branch: 4658 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 4658 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 4659 | False | live]
; [else-branch: 4659 | True | live]
(push) ; 47
; [then-branch: 4659 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 4659 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 4656 | _loop_check_before_0_0@572@01]
(assert _loop_check_before_0_0@572@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_4@476@01 (not bypass2_0@543@01))
  (and
    p2_4@476@01
    (not bypass2_0@543@01)
    (or _loop_check_before_0_0@572@01 (not _loop_check_before_0_0@572@01)))))
(assert (and p2_4@476@01 (not bypass2_0@543@01)))
; [eval] bypass1_0 ==> tmp1_7 == except1_0
(push) ; 36
; [then-branch: 4660 | bypass1_0@542@01 | dead]
; [else-branch: 4660 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4660 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_6 == Exception_res_0
(push) ; 36
; [then-branch: 4661 | bypass1_0@542@01 | dead]
; [else-branch: 4661 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4661 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_10 == break1_0
(push) ; 36
; [then-branch: 4662 | bypass1_0@542@01 | dead]
; [else-branch: 4662 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4662 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_9 == _loop_check_before_0
(push) ; 36
; [then-branch: 4663 | bypass1_0@542@01 | dead]
; [else-branch: 4663 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4663 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_8 == _err
(push) ; 36
; [then-branch: 4664 | bypass1_0@542@01 | dead]
; [else-branch: 4664 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4664 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_5 == _loop_measures_0
(push) ; 36
; [then-branch: 4665 | bypass1_0@542@01 | dead]
; [else-branch: 4665 | !(bypass1_0@542@01) | live]
(push) ; 37
; [else-branch: 4665 | !(bypass1_0@542@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_5 == _loop_measures_0_0
(push) ; 36
; [then-branch: 4666 | bypass2_0@543@01 | dead]
; [else-branch: 4666 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4666 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_8 == _err_1
(push) ; 36
; [then-branch: 4667 | bypass2_0@543@01 | dead]
; [else-branch: 4667 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4667 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_10 == break2_0
(push) ; 36
; [then-branch: 4668 | bypass2_0@543@01 | dead]
; [else-branch: 4668 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4668 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_7 == except2_0
(push) ; 36
; [then-branch: 4669 | bypass2_0@543@01 | dead]
; [else-branch: 4669 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4669 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_6 == Exception_res_0_0
(push) ; 36
; [then-branch: 4670 | bypass2_0@543@01 | dead]
; [else-branch: 4670 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4670 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_9 == _loop_check_before_0_0
(push) ; 36
; [then-branch: 4671 | bypass2_0@543@01 | dead]
; [else-branch: 4671 | !(bypass2_0@543@01) | live]
(push) ; 37
; [else-branch: 4671 | !(bypass2_0@543@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
; [eval] !(p4_2 && (!break2_0 && !except2_0))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 31
; [then-branch: 4672 | !(p4_2@631@01) | live]
; [else-branch: 4672 | p4_2@631@01 | live]
(push) ; 32
; [then-branch: 4672 | !(p4_2@631@01)]
(assert (not p4_2@631@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4672 | p4_2@631@01]
(assert p4_2@631@01)
; [eval] !break2_0
(push) ; 33
; [then-branch: 4673 | break2_0@570@01 | live]
; [else-branch: 4673 | !(break2_0@570@01) | live]
(push) ; 34
; [then-branch: 4673 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 34
(push) ; 34
; [else-branch: 4673 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4_2@631@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4674 | !(p4_2@631@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
; [else-branch: 4674 | p4_2@631@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
(set-option :timeout 0)
(push) ; 31
; [else-branch: 4674 | p4_2@631@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p4_2@631@01 (and (not break2_0@570@01) (not except2_0@564@01))))
(pop) ; 31
(pop) ; 30
(pop) ; 29
; [eval] !(p4_2 && (!break2_0 && !except2_0))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 29
; [then-branch: 4675 | !(p4_2@631@01) | live]
; [else-branch: 4675 | p4_2@631@01 | live]
(push) ; 30
; [then-branch: 4675 | !(p4_2@631@01)]
(assert (not p4_2@631@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4675 | p4_2@631@01]
(assert p4_2@631@01)
; [eval] !break2_0
(push) ; 31
; [then-branch: 4676 | break2_0@570@01 | live]
; [else-branch: 4676 | !(break2_0@570@01) | live]
(push) ; 32
; [then-branch: 4676 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 32
(push) ; 32
; [else-branch: 4676 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4_2@631@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4677 | !(p4_2@631@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
; [else-branch: 4677 | p4_2@631@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 4677 | p4_2@631@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p4_2@631@01 (and (not break2_0@570@01) (not except2_0@564@01))))
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 4530 | p2_6@629@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_6@629@01 (and (not break2_0@570@01) (not except2_0@564@01))))
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [eval] !(p2_5 && (!break2_0 && !except2_0))
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 15
; [then-branch: 4678 | !(p2_5@588@01) | live]
; [else-branch: 4678 | p2_5@588@01 | live]
(push) ; 16
; [then-branch: 4678 | !(p2_5@588@01)]
(assert (not p2_5@588@01))
(pop) ; 16
(push) ; 16
; [else-branch: 4678 | p2_5@588@01]
(assert p2_5@588@01)
; [eval] !break2_0
(push) ; 17
; [then-branch: 4679 | break2_0@570@01 | live]
; [else-branch: 4679 | !(break2_0@570@01) | live]
(push) ; 18
; [then-branch: 4679 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 18
(push) ; 18
; [else-branch: 4679 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (and p2_5@588@01 (and (not break2_0@570@01) (not except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4680 | !(p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01)) | dead]
; [else-branch: 4680 | p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01) | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 4680 | p2_5@588@01 && !(break2_0@570@01) && !(except2_0@564@01)]
(assert (and p2_5@588@01 (and (not break2_0@570@01) (not except2_0@564@01))))
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 4339 | p1_5@587@01 && !(break1_0@569@01) && !(except1_0@562@01)]
(assert (and p1_5@587@01 (and (not break1_0@569@01) (not except1_0@562@01))))
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 3348 | !(p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01) || p2_4@476@01 && !(break2_0@570@01) && !(except2_0@564@01) && !(bypass2_0@543@01))]
(assert (not
  (or
    (and
      p1_4@475@01
      (and
        (not break1_0@569@01)
        (and (not except1_0@562@01) (not bypass1_0@542@01))))
    (and
      p2_4@476@01
      (and
        (not break2_0@570@01)
        (and (not except2_0@564@01) (not bypass2_0@543@01)))))))
(pop) ; 13
; [eval] !(p1_4 && (!break1_0 && !except1_0 && (!bypass1_0 && true)) || p2_4 && (!break2_0 && !except2_0 && (!bypass2_0 && true)))
; [eval] p1_4 && (!break1_0 && !except1_0 && (!bypass1_0 && true)) || p2_4 && (!break2_0 && !except2_0 && (!bypass2_0 && true))
; [eval] p1_4 && (!break1_0 && !except1_0 && (!bypass1_0 && true))
(push) ; 13
; [then-branch: 4681 | !(p1_4@475@01) | live]
; [else-branch: 4681 | p1_4@475@01 | live]
(push) ; 14
; [then-branch: 4681 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 14
(push) ; 14
; [else-branch: 4681 | p1_4@475@01]
(assert p1_4@475@01)
; [eval] !break1_0
(push) ; 15
; [then-branch: 4682 | break1_0@569@01 | live]
; [else-branch: 4682 | !(break1_0@569@01) | live]
(push) ; 16
; [then-branch: 4682 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 16
(push) ; 16
; [else-branch: 4682 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
; [eval] !except1_0
(push) ; 17
; [then-branch: 4683 | except1_0@562@01 | live]
; [else-branch: 4683 | !(except1_0@562@01) | live]
(push) ; 18
; [then-branch: 4683 | except1_0@562@01]
(assert except1_0@562@01)
(pop) ; 18
(push) ; 18
; [else-branch: 4683 | !(except1_0@562@01)]
(assert (not except1_0@562@01))
; [eval] !bypass1_0
(push) ; 19
; [then-branch: 4684 | bypass1_0@542@01 | live]
; [else-branch: 4684 | !(bypass1_0@542@01) | live]
(push) ; 20
; [then-branch: 4684 | bypass1_0@542@01]
(assert bypass1_0@542@01)
(pop) ; 20
(push) ; 20
; [else-branch: 4684 | !(bypass1_0@542@01)]
(assert (not bypass1_0@542@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1_0@542@01) bypass1_0@542@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_0@562@01)
  (and (not except1_0@562@01) (or (not bypass1_0@542@01) bypass1_0@542@01))))
(assert (or (not except1_0@562@01) except1_0@562@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_0@569@01)
  (and
    (not break1_0@569@01)
    (=>
      (not except1_0@562@01)
      (and (not except1_0@562@01) (or (not bypass1_0@542@01) bypass1_0@542@01)))
    (or (not except1_0@562@01) except1_0@562@01))))
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 4685 | p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01) | live]
; [else-branch: 4685 | !(p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01)) | live]
(push) ; 14
; [then-branch: 4685 | p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01)]
(assert (and
  p1_4@475@01
  (and (not break1_0@569@01) (and (not except1_0@562@01) (not bypass1_0@542@01)))))
(pop) ; 14
(push) ; 14
; [else-branch: 4685 | !(p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01))]
(assert (not
  (and
    p1_4@475@01
    (and
      (not break1_0@569@01)
      (and (not except1_0@562@01) (not bypass1_0@542@01))))))
; [eval] p2_4 && (!break2_0 && !except2_0 && (!bypass2_0 && true))
(push) ; 15
; [then-branch: 4686 | !(p2_4@476@01) | live]
; [else-branch: 4686 | p2_4@476@01 | live]
(push) ; 16
; [then-branch: 4686 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 16
(push) ; 16
; [else-branch: 4686 | p2_4@476@01]
(assert p2_4@476@01)
; [eval] !break2_0
(push) ; 17
; [then-branch: 4687 | break2_0@570@01 | live]
; [else-branch: 4687 | !(break2_0@570@01) | live]
(push) ; 18
; [then-branch: 4687 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 18
(push) ; 18
; [else-branch: 4687 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
; [eval] !except2_0
(push) ; 19
; [then-branch: 4688 | except2_0@564@01 | live]
; [else-branch: 4688 | !(except2_0@564@01) | live]
(push) ; 20
; [then-branch: 4688 | except2_0@564@01]
(assert except2_0@564@01)
(pop) ; 20
(push) ; 20
; [else-branch: 4688 | !(except2_0@564@01)]
(assert (not except2_0@564@01))
; [eval] !bypass2_0
(push) ; 21
; [then-branch: 4689 | bypass2_0@543@01 | live]
; [else-branch: 4689 | !(bypass2_0@543@01) | live]
(push) ; 22
; [then-branch: 4689 | bypass2_0@543@01]
(assert bypass2_0@543@01)
(pop) ; 22
(push) ; 22
; [else-branch: 4689 | !(bypass2_0@543@01)]
(assert (not bypass2_0@543@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2_0@543@01) bypass2_0@543@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_0@564@01)
  (and (not except2_0@564@01) (or (not bypass2_0@543@01) bypass2_0@543@01))))
(assert (or (not except2_0@564@01) except2_0@564@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_0@570@01)
  (and
    (not break2_0@570@01)
    (=>
      (not except2_0@564@01)
      (and (not except2_0@564@01) (or (not bypass2_0@543@01) bypass2_0@543@01)))
    (or (not except2_0@564@01) except2_0@564@01))))
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_4@476@01
  (and
    p2_4@476@01
    (=>
      (not break2_0@570@01)
      (and
        (not break2_0@570@01)
        (=>
          (not except2_0@564@01)
          (and
            (not except2_0@564@01)
            (or (not bypass2_0@543@01) bypass2_0@543@01)))
        (or (not except2_0@564@01) except2_0@564@01)))
    (or (not break2_0@570@01) break2_0@570@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      p1_4@475@01
      (and
        (not break1_0@569@01)
        (and (not except1_0@562@01) (not bypass1_0@542@01)))))
  (and
    (not
      (and
        p1_4@475@01
        (and
          (not break1_0@569@01)
          (and (not except1_0@562@01) (not bypass1_0@542@01)))))
    (=>
      p2_4@476@01
      (and
        p2_4@476@01
        (=>
          (not break2_0@570@01)
          (and
            (not break2_0@570@01)
            (=>
              (not except2_0@564@01)
              (and
                (not except2_0@564@01)
                (or (not bypass2_0@543@01) bypass2_0@543@01)))
            (or (not except2_0@564@01) except2_0@564@01)))
        (or (not break2_0@570@01) break2_0@570@01))))))
(push) ; 13
(set-option :timeout 10)
(assert (not (or
  (and
    p1_4@475@01
    (and
      (not break1_0@569@01)
      (and (not except1_0@562@01) (not bypass1_0@542@01))))
  (and
    p2_4@476@01
    (and
      (not break2_0@570@01)
      (and (not except2_0@564@01) (not bypass2_0@543@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (or
    (and
      p1_4@475@01
      (and
        (not break1_0@569@01)
        (and (not except1_0@562@01) (not bypass1_0@542@01))))
    (and
      p2_4@476@01
      (and
        (not break2_0@570@01)
        (and (not except2_0@564@01) (not bypass2_0@543@01))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4690 | !(p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01) || p2_4@476@01 && !(break2_0@570@01) && !(except2_0@564@01) && !(bypass2_0@543@01)) | live]
; [else-branch: 4690 | p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01) || p2_4@476@01 && !(break2_0@570@01) && !(except2_0@564@01) && !(bypass2_0@543@01) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 4690 | !(p1_4@475@01 && !(break1_0@569@01) && !(except1_0@562@01) && !(bypass1_0@542@01) || p2_4@476@01 && !(break2_0@570@01) && !(except2_0@564@01) && !(bypass2_0@543@01))]
(assert (not
  (or
    (and
      p1_4@475@01
      (and
        (not break1_0@569@01)
        (and (not except1_0@562@01) (not bypass1_0@542@01))))
    (and
      p2_4@476@01
      (and
        (not break2_0@570@01)
        (and (not except2_0@564@01) (not bypass2_0@543@01)))))))
; [eval] !bypass1_0 && (break1_0 || except1_0) || !bypass2_0 && (break2_0 || except2_0)
; [eval] !bypass1_0 && (break1_0 || except1_0)
; [eval] !bypass1_0
(push) ; 14
; [then-branch: 4691 | bypass1_0@542@01 | live]
; [else-branch: 4691 | !(bypass1_0@542@01) | live]
(push) ; 15
; [then-branch: 4691 | bypass1_0@542@01]
(assert bypass1_0@542@01)
(pop) ; 15
(push) ; 15
; [else-branch: 4691 | !(bypass1_0@542@01)]
(assert (not bypass1_0@542@01))
; [eval] break1_0 || except1_0
(push) ; 16
; [then-branch: 4692 | break1_0@569@01 | live]
; [else-branch: 4692 | !(break1_0@569@01) | live]
(push) ; 17
; [then-branch: 4692 | break1_0@569@01]
(assert break1_0@569@01)
(pop) ; 17
(push) ; 17
; [else-branch: 4692 | !(break1_0@569@01)]
(assert (not break1_0@569@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1_0@569@01) break1_0@569@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not bypass1_0@542@01)
  (and (not bypass1_0@542@01) (or (not break1_0@569@01) break1_0@569@01))))
(assert (or (not bypass1_0@542@01) bypass1_0@542@01))
(push) ; 14
; [then-branch: 4693 | !(bypass1_0@542@01) && break1_0@569@01 || except1_0@562@01 | live]
; [else-branch: 4693 | !(!(bypass1_0@542@01) && break1_0@569@01 || except1_0@562@01) | live]
(push) ; 15
; [then-branch: 4693 | !(bypass1_0@542@01) && break1_0@569@01 || except1_0@562@01]
(assert (and (not bypass1_0@542@01) (or break1_0@569@01 except1_0@562@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 4693 | !(!(bypass1_0@542@01) && break1_0@569@01 || except1_0@562@01)]
(assert (not (and (not bypass1_0@542@01) (or break1_0@569@01 except1_0@562@01))))
; [eval] !bypass2_0 && (break2_0 || except2_0)
; [eval] !bypass2_0
(push) ; 16
; [then-branch: 4694 | bypass2_0@543@01 | live]
; [else-branch: 4694 | !(bypass2_0@543@01) | live]
(push) ; 17
; [then-branch: 4694 | bypass2_0@543@01]
(assert bypass2_0@543@01)
(pop) ; 17
(push) ; 17
; [else-branch: 4694 | !(bypass2_0@543@01)]
(assert (not bypass2_0@543@01))
; [eval] break2_0 || except2_0
(push) ; 18
; [then-branch: 4695 | break2_0@570@01 | live]
; [else-branch: 4695 | !(break2_0@570@01) | live]
(push) ; 19
; [then-branch: 4695 | break2_0@570@01]
(assert break2_0@570@01)
(pop) ; 19
(push) ; 19
; [else-branch: 4695 | !(break2_0@570@01)]
(assert (not break2_0@570@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break2_0@570@01) break2_0@570@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not bypass2_0@543@01)
  (and (not bypass2_0@543@01) (or (not break2_0@570@01) break2_0@570@01))))
(assert (or (not bypass2_0@543@01) bypass2_0@543@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (and (not bypass1_0@542@01) (or break1_0@569@01 except1_0@562@01)))
  (and
    (not (and (not bypass1_0@542@01) (or break1_0@569@01 except1_0@562@01)))
    (=>
      (not bypass2_0@543@01)
      (and (not bypass2_0@543@01) (or (not break2_0@570@01) break2_0@570@01)))
    (or (not bypass2_0@543@01) bypass2_0@543@01))))
(assert (or
  (not (and (not bypass1_0@542@01) (or break1_0@569@01 except1_0@562@01)))
  (and (not bypass1_0@542@01) (or break1_0@569@01 except1_0@562@01))))
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (or
    (and (not bypass1_0@542@01) (or break1_0@569@01 except1_0@562@01))
    (and (not bypass2_0@543@01) (or break2_0@570@01 except2_0@564@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (or
  (and (not bypass1_0@542@01) (or break1_0@569@01 except1_0@562@01))
  (and (not bypass2_0@543@01) (or break2_0@570@01 except2_0@564@01)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4696 | !(bypass1_0@542@01) && break1_0@569@01 || except1_0@562@01 || !(bypass2_0@543@01) && break2_0@570@01 || except2_0@564@01 | live]
; [else-branch: 4696 | !(!(bypass1_0@542@01) && break1_0@569@01 || except1_0@562@01 || !(bypass2_0@543@01) && break2_0@570@01 || except2_0@564@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 4696 | !(bypass1_0@542@01) && break1_0@569@01 || except1_0@562@01 || !(bypass2_0@543@01) && break2_0@570@01 || except2_0@564@01]
(assert (or
  (and (not bypass1_0@542@01) (or break1_0@569@01 except1_0@562@01))
  (and (not bypass2_0@543@01) (or break2_0@570@01 except2_0@564@01))))
; [exec]
; var p1_6: Bool
(declare-const p1_6@642@01 Bool)
; [exec]
; var p2_6: Bool
(declare-const p2_6@643@01 Bool)
; [exec]
; var p3_2: Bool
(declare-const p3_2@644@01 Bool)
; [exec]
; var p4_2: Bool
(declare-const p4_2@645@01 Bool)
; [exec]
; var p1_7: Bool
(declare-const p1_7@646@01 Bool)
; [exec]
; var p2_7: Bool
(declare-const p2_7@647@01 Bool)
; [exec]
; var p3_3: Bool
(declare-const p3_3@648@01 Bool)
; [exec]
; var p4_3: Bool
(declare-const p4_3@649@01 Bool)
; [exec]
; var tmp_0: Ref
(declare-const tmp_0@650@01 $Ref)
; [exec]
; var p1_8: Bool
(declare-const p1_8@651@01 Bool)
; [exec]
; var p2_8: Bool
(declare-const p2_8@652@01 Bool)
; [exec]
; var p3_4: Bool
(declare-const p3_4@653@01 Bool)
; [exec]
; var p4_4: Bool
(declare-const p4_4@654@01 Bool)
; [exec]
; break1_0 := oldbreak1_0
; [exec]
; break2_0 := oldbreak2_0
; [exec]
; except1_0 := oldexcept1_0
; [exec]
; except2_0 := oldexcept2_0
; [exec]
; inhale p1_4 && (!break1_0 && !except1_0) ==> true
(declare-const $t@655@01 $Snap)
(assert (= $t@655@01 $Snap.unit))
; [eval] p1_4 && (!break1_0 && !except1_0) ==> true
; [eval] p1_4 && (!break1_0 && !except1_0)
(push) ; 15
; [then-branch: 4697 | !(p1_4@475@01) | live]
; [else-branch: 4697 | p1_4@475@01 | live]
(push) ; 16
; [then-branch: 4697 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 16
(push) ; 16
; [else-branch: 4697 | p1_4@475@01]
(assert p1_4@475@01)
; [eval] !break1_0
(push) ; 17
; [then-branch: 4698 | False | live]
; [else-branch: 4698 | True | live]
(push) ; 18
; [then-branch: 4698 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 4698 | True]
; [eval] !except1_0
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not p1_4@475@01))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4699 | p1_4@475@01 | live]
; [else-branch: 4699 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 4699 | p1_4@475@01]
(assert p1_4@475@01)
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert p1_4@475@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale p2_4 && (!break1_0 && !except1_0) ==> true
(declare-const $t@656@01 $Snap)
(assert (= $t@656@01 $Snap.unit))
; [eval] p2_4 && (!break1_0 && !except1_0) ==> true
; [eval] p2_4 && (!break1_0 && !except1_0)
(set-option :timeout 0)
(push) ; 15
; [then-branch: 4700 | !(p2_4@476@01) | live]
; [else-branch: 4700 | p2_4@476@01 | live]
(push) ; 16
; [then-branch: 4700 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 16
(push) ; 16
; [else-branch: 4700 | p2_4@476@01]
(assert p2_4@476@01)
; [eval] !break1_0
(push) ; 17
; [then-branch: 4701 | False | live]
; [else-branch: 4701 | True | live]
(push) ; 18
; [then-branch: 4701 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 4701 | True]
; [eval] !except1_0
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not p2_4@476@01))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4702 | p2_4@476@01 | live]
; [else-branch: 4702 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 4702 | p2_4@476@01]
(assert p2_4@476@01)
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert p2_4@476@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; p1_5 := p1_4 && (!break1_0 && !except1_0 && true)
; [eval] p1_4 && (!break1_0 && !except1_0 && true)
(set-option :timeout 0)
(push) ; 15
; [then-branch: 4703 | !(p1_4@475@01) | live]
; [else-branch: 4703 | p1_4@475@01 | live]
(push) ; 16
; [then-branch: 4703 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 16
(push) ; 16
; [else-branch: 4703 | p1_4@475@01]
; [eval] !break1_0
(push) ; 17
; [then-branch: 4704 | False | live]
; [else-branch: 4704 | True | live]
(push) ; 18
; [then-branch: 4704 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 4704 | True]
; [eval] !except1_0
(push) ; 19
; [then-branch: 4705 | False | live]
; [else-branch: 4705 | True | live]
(push) ; 20
; [then-branch: 4705 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 4705 | True]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; p2_5 := p2_4 && (!break2_0 && !except2_0 && true)
; [eval] p2_4 && (!break2_0 && !except2_0 && true)
(push) ; 15
; [then-branch: 4706 | !(p2_4@476@01) | live]
; [else-branch: 4706 | p2_4@476@01 | live]
(push) ; 16
; [then-branch: 4706 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 16
(push) ; 16
; [else-branch: 4706 | p2_4@476@01]
; [eval] !break2_0
(push) ; 17
; [then-branch: 4707 | False | live]
; [else-branch: 4707 | True | live]
(push) ; 18
; [then-branch: 4707 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 4707 | True]
; [eval] !except2_0
(push) ; 19
; [then-branch: 4708 | False | live]
; [else-branch: 4708 | True | live]
(push) ; 20
; [then-branch: 4708 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 4708 | True]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; idle1_0 := p1_4 && (!break1_0 && !except1_0 && !true)
; [eval] p1_4 && (!break1_0 && !except1_0 && !true)
(push) ; 15
; [then-branch: 4709 | !(p1_4@475@01) | live]
; [else-branch: 4709 | p1_4@475@01 | live]
(push) ; 16
; [then-branch: 4709 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 16
(push) ; 16
; [else-branch: 4709 | p1_4@475@01]
; [eval] !break1_0
(push) ; 17
; [then-branch: 4710 | False | live]
; [else-branch: 4710 | True | live]
(push) ; 18
; [then-branch: 4710 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 4710 | True]
; [eval] !except1_0
(push) ; 19
; [then-branch: 4711 | False | live]
; [else-branch: 4711 | True | live]
(push) ; 20
; [then-branch: 4711 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 4711 | True]
; [eval] !true
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; idle2_0 := p2_4 && (!break2_0 && !except2_0 && !true)
; [eval] p2_4 && (!break2_0 && !except2_0 && !true)
(push) ; 15
; [then-branch: 4712 | !(p2_4@476@01) | live]
; [else-branch: 4712 | p2_4@476@01 | live]
(push) ; 16
; [then-branch: 4712 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 16
(push) ; 16
; [else-branch: 4712 | p2_4@476@01]
; [eval] !break2_0
(push) ; 17
; [then-branch: 4713 | False | live]
; [else-branch: 4713 | True | live]
(push) ; 18
; [then-branch: 4713 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 4713 | True]
; [eval] !except2_0
(push) ; 19
; [then-branch: 4714 | False | live]
; [else-branch: 4714 | True | live]
(push) ; 20
; [then-branch: 4714 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 4714 | True]
; [eval] !true
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 15
; [then-branch: 4715 | !(p1_4@475@01) | live]
; [else-branch: 4715 | p1_4@475@01 | live]
(push) ; 16
; [then-branch: 4715 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 16
(push) ; 16
; [else-branch: 4715 | p1_4@475@01]
; [eval] !break1_0
(push) ; 17
; [then-branch: 4716 | False | live]
; [else-branch: 4716 | True | live]
(push) ; 18
; [then-branch: 4716 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 4716 | True]
; [eval] !except1_0
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4717 | p1_4@475@01 | live]
; [else-branch: 4717 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 4717 | p1_4@475@01]
; [exec]
; _loop_measures_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 16
; [then-branch: 4718 | !(p2_4@476@01) | live]
; [else-branch: 4718 | p2_4@476@01 | live]
(push) ; 17
; [then-branch: 4718 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 17
(push) ; 17
; [else-branch: 4718 | p2_4@476@01]
; [eval] !break2_0
(push) ; 18
; [then-branch: 4719 | False | live]
; [else-branch: 4719 | True | live]
(push) ; 19
; [then-branch: 4719 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 4719 | True]
; [eval] !except2_0
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4720 | p2_4@476@01 | live]
; [else-branch: 4720 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 4720 | p2_4@476@01]
; [exec]
; _loop_measures_0_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; p1_6 := p1_5 && (!break1_0 && !except1_0 && bool___unbox__(b_5))
; [eval] p1_5 && (!break1_0 && !except1_0 && bool___unbox__(b_5))
(push) ; 17
; [then-branch: 4721 | !(p1_4@475@01) | live]
; [else-branch: 4721 | p1_4@475@01 | live]
(push) ; 18
; [then-branch: 4721 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 18
(push) ; 18
; [else-branch: 4721 | p1_4@475@01]
; [eval] !break1_0
(push) ; 19
; [then-branch: 4722 | False | live]
; [else-branch: 4722 | True | live]
(push) ; 20
; [then-branch: 4722 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 4722 | True]
; [eval] !except1_0
(push) ; 21
; [then-branch: 4723 | False | live]
; [else-branch: 4723 | True | live]
(push) ; 22
; [then-branch: 4723 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 4723 | True]
; [eval] bool___unbox__(b_5)
(push) ; 23
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0@485@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@485@01)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@485@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@485@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_4@475@01
  (and
    (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_0@485@01))))
(declare-const p1_6@657@01 Bool)
(assert (= p1_6@657@01 (and p1_4@475@01 (bool___unbox__ $Snap.unit b_0@485@01))))
; [exec]
; p2_6 := p2_5 && (!break2_0 && !except2_0 && bool___unbox__(b_5_0))
; [eval] p2_5 && (!break2_0 && !except2_0 && bool___unbox__(b_5_0))
(push) ; 17
; [then-branch: 4724 | !(p2_4@476@01) | live]
; [else-branch: 4724 | p2_4@476@01 | live]
(push) ; 18
; [then-branch: 4724 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 18
(push) ; 18
; [else-branch: 4724 | p2_4@476@01]
; [eval] !break2_0
(push) ; 19
; [then-branch: 4725 | False | live]
; [else-branch: 4725 | True | live]
(push) ; 20
; [then-branch: 4725 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 4725 | True]
; [eval] !except2_0
(push) ; 21
; [then-branch: 4726 | False | live]
; [else-branch: 4726 | True | live]
(push) ; 22
; [then-branch: 4726 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 4726 | True]
; [eval] bool___unbox__(b_5_0)
(push) ; 23
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0_0@486@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0_0@486@01)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0_0@486@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0_0@486@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_4@476@01
  (and
    (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_0_0@486@01))))
(declare-const p2_6@658@01 Bool)
(assert (= p2_6@658@01 (and p2_4@476@01 (bool___unbox__ $Snap.unit b_0_0@486@01))))
; [exec]
; p3_2 := p1_5 && (!break1_0 && !except1_0 && !bool___unbox__(b_5))
; [eval] p1_5 && (!break1_0 && !except1_0 && !bool___unbox__(b_5))
(push) ; 17
; [then-branch: 4727 | !(p1_4@475@01) | live]
; [else-branch: 4727 | p1_4@475@01 | live]
(push) ; 18
; [then-branch: 4727 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 18
(push) ; 18
; [else-branch: 4727 | p1_4@475@01]
; [eval] !break1_0
(push) ; 19
; [then-branch: 4728 | False | live]
; [else-branch: 4728 | True | live]
(push) ; 20
; [then-branch: 4728 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 4728 | True]
; [eval] !except1_0
(push) ; 21
; [then-branch: 4729 | False | live]
; [else-branch: 4729 | True | live]
(push) ; 22
; [then-branch: 4729 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 4729 | True]
; [eval] !bool___unbox__(b_5)
; [eval] bool___unbox__(b_5)
(push) ; 23
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0@485@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@485@01)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@485@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0@485@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0@485@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(declare-const p3_2@659@01 Bool)
(assert (= p3_2@659@01 (and p1_4@475@01 (not (bool___unbox__ $Snap.unit b_0@485@01)))))
; [exec]
; p4_2 := p2_5 && (!break2_0 && !except2_0 && !bool___unbox__(b_5_0))
; [eval] p2_5 && (!break2_0 && !except2_0 && !bool___unbox__(b_5_0))
(push) ; 17
; [then-branch: 4730 | !(p2_4@476@01) | live]
; [else-branch: 4730 | p2_4@476@01 | live]
(push) ; 18
; [then-branch: 4730 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 18
(push) ; 18
; [else-branch: 4730 | p2_4@476@01]
; [eval] !break2_0
(push) ; 19
; [then-branch: 4731 | False | live]
; [else-branch: 4731 | True | live]
(push) ; 20
; [then-branch: 4731 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 4731 | True]
; [eval] !except2_0
(push) ; 21
; [then-branch: 4732 | False | live]
; [else-branch: 4732 | True | live]
(push) ; 22
; [then-branch: 4732 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 4732 | True]
; [eval] !bool___unbox__(b_5_0)
; [eval] bool___unbox__(b_5_0)
(push) ; 23
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_0_0@486@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0_0@486@01)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0_0@486@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_0_0@486@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_0_0@486@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(declare-const p4_2@660@01 Bool)
(assert (= p4_2@660@01 (and p2_4@476@01 (not (bool___unbox__ $Snap.unit b_0_0@486@01)))))
; [exec]
; p1_7 := p1_6 &&
;   (!break1_0 && !except1_0 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p1_6 && (!break1_0 && !except1_0 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 17
; [then-branch: 4733 | !(p1_6@657@01) | live]
; [else-branch: 4733 | p1_6@657@01 | live]
(push) ; 18
; [then-branch: 4733 | !(p1_6@657@01)]
(assert (not p1_6@657@01))
(pop) ; 18
(push) ; 18
; [else-branch: 4733 | p1_6@657@01]
(assert p1_6@657@01)
; [eval] !break1_0
(push) ; 19
; [then-branch: 4734 | False | live]
; [else-branch: 4734 | True | live]
(push) ; 20
; [then-branch: 4734 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 4734 | True]
; [eval] !except1_0
(push) ; 21
; [then-branch: 4735 | False | live]
; [else-branch: 4735 | True | live]
(push) ; 22
; [then-branch: 4735 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 4735 | True]
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or p1_6@657@01 (not p1_6@657@01)))
; [exec]
; p2_7 := p2_6 &&
;   (!break2_0 && !except2_0 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_6 && (!break2_0 && !except2_0 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 17
; [then-branch: 4736 | !(p2_6@658@01) | live]
; [else-branch: 4736 | p2_6@658@01 | live]
(push) ; 18
; [then-branch: 4736 | !(p2_6@658@01)]
(assert (not p2_6@658@01))
(pop) ; 18
(push) ; 18
; [else-branch: 4736 | p2_6@658@01]
(assert p2_6@658@01)
; [eval] !break2_0
(push) ; 19
; [then-branch: 4737 | False | live]
; [else-branch: 4737 | True | live]
(push) ; 20
; [then-branch: 4737 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 4737 | True]
; [eval] !except2_0
(push) ; 21
; [then-branch: 4738 | False | live]
; [else-branch: 4738 | True | live]
(push) ; 22
; [then-branch: 4738 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 4738 | True]
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or p2_6@658@01 (not p2_6@658@01)))
; [exec]
; p3_3 := p1_6 &&
;   (!break1_0 && !except1_0 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p1_6 && (!break1_0 && !except1_0 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 17
; [then-branch: 4739 | !(p1_6@657@01) | live]
; [else-branch: 4739 | p1_6@657@01 | live]
(push) ; 18
; [then-branch: 4739 | !(p1_6@657@01)]
(assert (not p1_6@657@01))
(pop) ; 18
(push) ; 18
; [else-branch: 4739 | p1_6@657@01]
(assert p1_6@657@01)
; [eval] !break1_0
(push) ; 19
; [then-branch: 4740 | False | live]
; [else-branch: 4740 | True | live]
(push) ; 20
; [then-branch: 4740 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 4740 | True]
; [eval] !except1_0
(push) ; 21
; [then-branch: 4741 | False | live]
; [else-branch: 4741 | True | live]
(push) ; 22
; [then-branch: 4741 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 4741 | True]
; [eval] !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [exec]
; p4_3 := p2_6 &&
;   (!break2_0 && !except2_0 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_6 && (!break2_0 && !except2_0 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 17
; [then-branch: 4742 | !(p2_6@658@01) | live]
; [else-branch: 4742 | p2_6@658@01 | live]
(push) ; 18
; [then-branch: 4742 | !(p2_6@658@01)]
(assert (not p2_6@658@01))
(pop) ; 18
(push) ; 18
; [else-branch: 4742 | p2_6@658@01]
(assert p2_6@658@01)
; [eval] !break2_0
(push) ; 19
; [then-branch: 4743 | False | live]
; [else-branch: 4743 | True | live]
(push) ; 20
; [then-branch: 4743 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 4743 | True]
; [eval] !except2_0
(push) ; 21
; [then-branch: 4744 | False | live]
; [else-branch: 4744 | True | live]
(push) ; 22
; [then-branch: 4744 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 4744 | True]
; [eval] !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [eval] p1_7 && (!break1_0 && !except1_0)
; [then-branch: 4745 | False | dead]
; [else-branch: 4745 | True | live]
(push) ; 17
; [else-branch: 4745 | True]
(pop) ; 17
; [eval] !(p1_7 && (!break1_0 && !except1_0))
; [eval] p1_7 && (!break1_0 && !except1_0)
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4746 | True | live]
; [else-branch: 4746 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 4746 | True]
; [eval] p2_7 && (!break2_0 && !except2_0)
; [then-branch: 4747 | False | dead]
; [else-branch: 4747 | True | live]
(push) ; 18
; [else-branch: 4747 | True]
(pop) ; 18
; [eval] !(p2_7 && (!break2_0 && !except2_0))
; [eval] p2_7 && (!break2_0 && !except2_0)
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4748 | True | live]
; [else-branch: 4748 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 4748 | True]
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 19
; [then-branch: 4749 | !(p1_6@657@01) | live]
; [else-branch: 4749 | p1_6@657@01 | live]
(push) ; 20
; [then-branch: 4749 | !(p1_6@657@01)]
(assert (not p1_6@657@01))
(pop) ; 20
(push) ; 20
; [else-branch: 4749 | p1_6@657@01]
(assert p1_6@657@01)
; [eval] !break1_0
(push) ; 21
; [then-branch: 4750 | False | live]
; [else-branch: 4750 | True | live]
(push) ; 22
; [then-branch: 4750 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 4750 | True]
; [eval] !except1_0
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_6@657@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not p1_6@657@01))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4751 | p1_6@657@01 | live]
; [else-branch: 4751 | !(p1_6@657@01) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 4751 | p1_6@657@01]
(assert p1_6@657@01)
; [exec]
; c_5.Container_value := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(declare-const Container_value@661@01 $Ref)
(assert (= Container_value@661@01 (__prim__int___box__ $Snap.unit 7)))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 20
; [then-branch: 4752 | !(p2_6@658@01) | live]
; [else-branch: 4752 | p2_6@658@01 | live]
(push) ; 21
; [then-branch: 4752 | !(p2_6@658@01)]
(assert (not p2_6@658@01))
(pop) ; 21
(push) ; 21
; [else-branch: 4752 | p2_6@658@01]
(assert p2_6@658@01)
; [eval] !break2_0
(push) ; 22
; [then-branch: 4753 | False | live]
; [else-branch: 4753 | True | live]
(push) ; 23
; [then-branch: 4753 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 4753 | True]
; [eval] !except2_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_6@658@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not p2_6@658@01))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4754 | p2_6@658@01 | live]
; [else-branch: 4754 | !(p2_6@658@01) | live]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 4754 | p2_6@658@01]
(assert p2_6@658@01)
; [exec]
; c_5_0.Container_valuep := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 21
(pop) ; 21
; Joined path conditions
(declare-const Container_valuep@662@01 $Ref)
(assert (= Container_valuep@662@01 (__prim__int___box__ $Snap.unit 7)))
; [exec]
; tmp_0 := new()
(declare-const tmp_0@663@01 $Ref)
(assert (not (= tmp_0@663@01 $Ref.null)))
(assert (not (= tmp_0@663@01 _cthread_158_0@478@01)))
(assert (not (= tmp_0@663@01 tmp2_8@526@01)))
(assert (not (= tmp_0@663@01 tmp_0@650@01)))
(assert (not (= tmp_0@663@01 Exception_res_0_0@560@01)))
(assert (not (= tmp_0@663@01 c_0@483@01)))
(assert (not (= tmp_0@663@01 _err@561@01)))
(assert (not (= tmp_0@663@01 Container_value@661@01)))
(assert (not (= tmp_0@663@01 b_0@485@01)))
(assert (not (= tmp_0@663@01 b_0_0@486@01)))
(assert (not (= tmp_0@663@01 tmp1_8@525@01)))
(assert (not (= tmp_0@663@01 _cthread_158@477@01)))
(assert (not (= tmp_0@663@01 c_0_0@484@01)))
(assert (not (= tmp_0@663@01 tmp1_6@521@01)))
(assert (not (= tmp_0@663@01 Container_valuep@662@01)))
(assert (not (= tmp_0@663@01 tmp2_6@522@01)))
(assert (not (= tmp_0@663@01 _err_1@563@01)))
(assert (not (= tmp_0@663@01 Exception_res_0@559@01)))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 21
; [then-branch: 4755 | !(p1_6@657@01) | live]
; [else-branch: 4755 | p1_6@657@01 | live]
(push) ; 22
; [then-branch: 4755 | !(p1_6@657@01)]
(assert (not p1_6@657@01))
(pop) ; 22
(push) ; 22
; [else-branch: 4755 | p1_6@657@01]
; [eval] !break1_0
(push) ; 23
; [then-branch: 4756 | False | live]
; [else-branch: 4756 | True | live]
(push) ; 24
; [then-branch: 4756 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 4756 | True]
; [eval] !except1_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_6@657@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4757 | p1_6@657@01 | live]
; [else-branch: 4757 | !(p1_6@657@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 4757 | p1_6@657@01]
; [exec]
; Exception_res_0 := tmp_0
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 22
; [then-branch: 4758 | !(p2_6@658@01) | live]
; [else-branch: 4758 | p2_6@658@01 | live]
(push) ; 23
; [then-branch: 4758 | !(p2_6@658@01)]
(assert (not p2_6@658@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4758 | p2_6@658@01]
; [eval] !break2_0
(push) ; 24
; [then-branch: 4759 | False | live]
; [else-branch: 4759 | True | live]
(push) ; 25
; [then-branch: 4759 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 4759 | True]
; [eval] !except2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p2_6@658@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4760 | p2_6@658@01 | live]
; [else-branch: 4760 | !(p2_6@658@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 4760 | p2_6@658@01]
; [exec]
; Exception_res_0_0 := tmp_0
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 23
; [then-branch: 4761 | !(p1_6@657@01) | live]
; [else-branch: 4761 | p1_6@657@01 | live]
(push) ; 24
; [then-branch: 4761 | !(p1_6@657@01)]
(assert (not p1_6@657@01))
(pop) ; 24
(push) ; 24
; [else-branch: 4761 | p1_6@657@01]
; [eval] !break1_0
(push) ; 25
; [then-branch: 4762 | False | live]
; [else-branch: 4762 | True | live]
(push) ; 26
; [then-branch: 4762 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 4762 | True]
; [eval] !except1_0
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_6@657@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4763 | p1_6@657@01 | live]
; [else-branch: 4763 | !(p1_6@657@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 4763 | p1_6@657@01]
; [exec]
; inhale typeof(Exception_res_0) == Exception()
(declare-const $t@664@01 $Snap)
(assert (= $t@664@01 $Snap.unit))
; [eval] typeof(Exception_res_0) == Exception()
; [eval] typeof(Exception_res_0)
; [eval] Exception()
(assert (= (typeof<PyType> tmp_0@663@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_6 && (!break2_0 && !except2_0)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 4764 | !(p2_6@658@01) | live]
; [else-branch: 4764 | p2_6@658@01 | live]
(push) ; 25
; [then-branch: 4764 | !(p2_6@658@01)]
(assert (not p2_6@658@01))
(pop) ; 25
(push) ; 25
; [else-branch: 4764 | p2_6@658@01]
; [eval] !break2_0
(push) ; 26
; [then-branch: 4765 | False | live]
; [else-branch: 4765 | True | live]
(push) ; 27
; [then-branch: 4765 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 4765 | True]
; [eval] !except2_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_6@658@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4766 | p2_6@658@01 | live]
; [else-branch: 4766 | !(p2_6@658@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 4766 | p2_6@658@01]
; [exec]
; inhale typeof(Exception_res_0_0) == Exception()
(declare-const $t@665@01 $Snap)
(assert (= $t@665@01 $Snap.unit))
; [eval] typeof(Exception_res_0_0) == Exception()
; [eval] typeof(Exception_res_0_0)
; [eval] Exception()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_6 && (!break1_0 && !except1_0)
(set-option :timeout 0)
(push) ; 25
; [then-branch: 4767 | !(p1_6@657@01) | live]
; [else-branch: 4767 | p1_6@657@01 | live]
(push) ; 26
; [then-branch: 4767 | !(p1_6@657@01)]
(assert (not p1_6@657@01))
(pop) ; 26
(push) ; 26
; [else-branch: 4767 | p1_6@657@01]
; [eval] !break1_0
(push) ; 27
; [then-branch: 4768 | False | live]
; [else-branch: 4768 | True | live]
(push) ; 28
; [then-branch: 4768 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 4768 | True]
; [eval] !except1_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_6@657@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4769 | p1_6@657@01 | live]
; [else-branch: 4769 | !(p1_6@657@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 4769 | p1_6@657@01]
; [exec]
; _err := Exception_res_0
; [exec]
; except1_0 := true
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 26
; [then-branch: 4770 | !(p2_6@658@01) | live]
; [else-branch: 4770 | p2_6@658@01 | live]
(push) ; 27
; [then-branch: 4770 | !(p2_6@658@01)]
(assert (not p2_6@658@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4770 | p2_6@658@01]
; [eval] !break2_0
(push) ; 28
; [then-branch: 4771 | False | live]
; [else-branch: 4771 | True | live]
(push) ; 29
; [then-branch: 4771 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 4771 | True]
; [eval] !except2_0
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_6@658@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4772 | p2_6@658@01 | live]
; [else-branch: 4772 | !(p2_6@658@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 4772 | p2_6@658@01]
; [exec]
; _err_1 := Exception_res_0_0
; [exec]
; except2_0 := true
; [exec]
; p1_8 := p3_2 &&
;   (!break1_0 && !except1_0 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p3_2 && (!break1_0 && !except1_0 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 4773 | !(p3_2@659@01) | live]
; [else-branch: 4773 | p3_2@659@01 | live]
(push) ; 28
; [then-branch: 4773 | !(p3_2@659@01)]
(assert (not p3_2@659@01))
(pop) ; 28
(push) ; 28
; [else-branch: 4773 | p3_2@659@01]
(assert p3_2@659@01)
; [eval] !break1_0
(push) ; 29
; [then-branch: 4774 | False | live]
; [else-branch: 4774 | True | live]
(push) ; 30
; [then-branch: 4774 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 4774 | True]
; [eval] !except1_0
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or p3_2@659@01 (not p3_2@659@01)))
; [exec]
; p2_8 := p4_2 &&
;   (!break2_0 && !except2_0 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_2 && (!break2_0 && !except2_0 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 4775 | !(p4_2@660@01) | live]
; [else-branch: 4775 | p4_2@660@01 | live]
(push) ; 28
; [then-branch: 4775 | !(p4_2@660@01)]
(assert (not p4_2@660@01))
(pop) ; 28
(push) ; 28
; [else-branch: 4775 | p4_2@660@01]
(assert p4_2@660@01)
; [eval] !break2_0
(push) ; 29
; [then-branch: 4776 | False | live]
; [else-branch: 4776 | True | live]
(push) ; 30
; [then-branch: 4776 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 4776 | True]
; [eval] !except2_0
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or p4_2@660@01 (not p4_2@660@01)))
; [exec]
; p3_4 := p3_2 &&
;   (!break1_0 && !except1_0 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p3_2 && (!break1_0 && !except1_0 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 4777 | !(p3_2@659@01) | live]
; [else-branch: 4777 | p3_2@659@01 | live]
(push) ; 28
; [then-branch: 4777 | !(p3_2@659@01)]
(assert (not p3_2@659@01))
(pop) ; 28
(push) ; 28
; [else-branch: 4777 | p3_2@659@01]
(assert p3_2@659@01)
; [eval] !break1_0
(push) ; 29
; [then-branch: 4778 | False | live]
; [else-branch: 4778 | True | live]
(push) ; 30
; [then-branch: 4778 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 4778 | True]
; [eval] !except1_0
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p4_4 := p4_2 &&
;   (!break2_0 && !except2_0 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_2 && (!break2_0 && !except2_0 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 4779 | !(p4_2@660@01) | live]
; [else-branch: 4779 | p4_2@660@01 | live]
(push) ; 28
; [then-branch: 4779 | !(p4_2@660@01)]
(assert (not p4_2@660@01))
(pop) ; 28
(push) ; 28
; [else-branch: 4779 | p4_2@660@01]
(assert p4_2@660@01)
; [eval] !break2_0
(push) ; 29
; [then-branch: 4780 | False | live]
; [else-branch: 4780 | True | live]
(push) ; 30
; [then-branch: 4780 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 4780 | True]
; [eval] !except2_0
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [eval] p1_8 && (!break1_0 && !except1_0)
; [then-branch: 4781 | False | dead]
; [else-branch: 4781 | True | live]
(push) ; 27
; [else-branch: 4781 | True]
(pop) ; 27
; [eval] !(p1_8 && (!break1_0 && !except1_0))
; [eval] p1_8 && (!break1_0 && !except1_0)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4782 | True | live]
; [else-branch: 4782 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 4782 | True]
; [eval] p2_8 && (!break2_0 && !except2_0)
; [then-branch: 4783 | False | dead]
; [else-branch: 4783 | True | live]
(push) ; 28
; [else-branch: 4783 | True]
(pop) ; 28
; [eval] !(p2_8 && (!break2_0 && !except2_0))
; [eval] p2_8 && (!break2_0 && !except2_0)
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4784 | True | live]
; [else-branch: 4784 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 4784 | True]
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 29
; [then-branch: 4785 | !(p3_2@659@01) | live]
; [else-branch: 4785 | p3_2@659@01 | live]
(push) ; 30
; [then-branch: 4785 | !(p3_2@659@01)]
(assert (not p3_2@659@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4785 | p3_2@659@01]
(assert p3_2@659@01)
; [eval] !break1_0
(push) ; 31
; [then-branch: 4786 | False | live]
; [else-branch: 4786 | True | live]
(push) ; 32
; [then-branch: 4786 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 4786 | True]
; [eval] !except1_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 4787 | False | dead]
; [else-branch: 4787 | True | live]
(push) ; 29
; [else-branch: 4787 | True]
(pop) ; 29
; [eval] !(p3_2 && (!break1_0 && !except1_0))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 29
; [then-branch: 4788 | !(p3_2@659@01) | live]
; [else-branch: 4788 | p3_2@659@01 | live]
(push) ; 30
; [then-branch: 4788 | !(p3_2@659@01)]
(assert (not p3_2@659@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4788 | p3_2@659@01]
(assert p3_2@659@01)
; [eval] !break1_0
(push) ; 31
; [then-branch: 4789 | False | live]
; [else-branch: 4789 | True | live]
(push) ; 32
; [then-branch: 4789 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 4789 | True]
; [eval] !except1_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4790 | True | live]
; [else-branch: 4790 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 4790 | True]
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 30
; [then-branch: 4791 | !(p4_2@660@01) | live]
; [else-branch: 4791 | p4_2@660@01 | live]
(push) ; 31
; [then-branch: 4791 | !(p4_2@660@01)]
(assert (not p4_2@660@01))
(pop) ; 31
(push) ; 31
; [else-branch: 4791 | p4_2@660@01]
(assert p4_2@660@01)
; [eval] !break2_0
(push) ; 32
; [then-branch: 4792 | False | live]
; [else-branch: 4792 | True | live]
(push) ; 33
; [then-branch: 4792 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 4792 | True]
; [eval] !except2_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 4793 | False | dead]
; [else-branch: 4793 | True | live]
(push) ; 30
; [else-branch: 4793 | True]
(pop) ; 30
; [eval] !(p4_2 && (!break2_0 && !except2_0))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 30
; [then-branch: 4794 | !(p4_2@660@01) | live]
; [else-branch: 4794 | p4_2@660@01 | live]
(push) ; 31
; [then-branch: 4794 | !(p4_2@660@01)]
(assert (not p4_2@660@01))
(pop) ; 31
(push) ; 31
; [else-branch: 4794 | p4_2@660@01]
(assert p4_2@660@01)
; [eval] !break2_0
(push) ; 32
; [then-branch: 4795 | False | live]
; [else-branch: 4795 | True | live]
(push) ; 33
; [then-branch: 4795 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 4795 | True]
; [eval] !except2_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4796 | True | live]
; [else-branch: 4796 | False | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 4796 | True]
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 31
; [then-branch: 4797 | !(p3_2@659@01) | live]
; [else-branch: 4797 | p3_2@659@01 | live]
(push) ; 32
; [then-branch: 4797 | !(p3_2@659@01)]
(assert (not p3_2@659@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4797 | p3_2@659@01]
(assert p3_2@659@01)
; [eval] !break1_0
(push) ; 33
; [then-branch: 4798 | False | live]
; [else-branch: 4798 | True | live]
(push) ; 34
; [then-branch: 4798 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 4798 | True]
; [eval] !except1_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 4799 | False | dead]
; [else-branch: 4799 | True | live]
(push) ; 31
; [else-branch: 4799 | True]
(pop) ; 31
; [eval] !(p3_2 && (!break1_0 && !except1_0))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 31
; [then-branch: 4800 | !(p3_2@659@01) | live]
; [else-branch: 4800 | p3_2@659@01 | live]
(push) ; 32
; [then-branch: 4800 | !(p3_2@659@01)]
(assert (not p3_2@659@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4800 | p3_2@659@01]
(assert p3_2@659@01)
; [eval] !break1_0
(push) ; 33
; [then-branch: 4801 | False | live]
; [else-branch: 4801 | True | live]
(push) ; 34
; [then-branch: 4801 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 4801 | True]
; [eval] !except1_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4802 | True | live]
; [else-branch: 4802 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 4802 | True]
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 32
; [then-branch: 4803 | !(p4_2@660@01) | live]
; [else-branch: 4803 | p4_2@660@01 | live]
(push) ; 33
; [then-branch: 4803 | !(p4_2@660@01)]
(assert (not p4_2@660@01))
(pop) ; 33
(push) ; 33
; [else-branch: 4803 | p4_2@660@01]
(assert p4_2@660@01)
; [eval] !break2_0
(push) ; 34
; [then-branch: 4804 | False | live]
; [else-branch: 4804 | True | live]
(push) ; 35
; [then-branch: 4804 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 4804 | True]
; [eval] !except2_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 4805 | False | dead]
; [else-branch: 4805 | True | live]
(push) ; 32
; [else-branch: 4805 | True]
(pop) ; 32
; [eval] !(p4_2 && (!break2_0 && !except2_0))
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 32
; [then-branch: 4806 | !(p4_2@660@01) | live]
; [else-branch: 4806 | p4_2@660@01 | live]
(push) ; 33
; [then-branch: 4806 | !(p4_2@660@01)]
(assert (not p4_2@660@01))
(pop) ; 33
(push) ; 33
; [else-branch: 4806 | p4_2@660@01]
(assert p4_2@660@01)
; [eval] !break2_0
(push) ; 34
; [then-branch: 4807 | False | live]
; [else-branch: 4807 | True | live]
(push) ; 35
; [then-branch: 4807 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 4807 | True]
; [eval] !except2_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4808 | True | live]
; [else-branch: 4808 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 4808 | True]
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 33
; [then-branch: 4809 | !(p1_4@475@01) | live]
; [else-branch: 4809 | p1_4@475@01 | live]
(push) ; 34
; [then-branch: 4809 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 34
(push) ; 34
; [else-branch: 4809 | p1_4@475@01]
; [eval] !break1_0
(push) ; 35
; [then-branch: 4810 | False | live]
; [else-branch: 4810 | True | live]
(push) ; 36
; [then-branch: 4810 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 4810 | True]
; [eval] !except1_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 4811 | False | dead]
; [else-branch: 4811 | True | live]
(push) ; 33
; [else-branch: 4811 | True]
(pop) ; 33
; [eval] !(p1_5 && (!break1_0 && !except1_0))
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 33
; [then-branch: 4812 | !(p1_4@475@01) | live]
; [else-branch: 4812 | p1_4@475@01 | live]
(push) ; 34
; [then-branch: 4812 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 34
(push) ; 34
; [else-branch: 4812 | p1_4@475@01]
; [eval] !break1_0
(push) ; 35
; [then-branch: 4813 | False | live]
; [else-branch: 4813 | True | live]
(push) ; 36
; [then-branch: 4813 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 4813 | True]
; [eval] !except1_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4814 | True | live]
; [else-branch: 4814 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 4814 | True]
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 34
; [then-branch: 4815 | !(p2_4@476@01) | live]
; [else-branch: 4815 | p2_4@476@01 | live]
(push) ; 35
; [then-branch: 4815 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4815 | p2_4@476@01]
; [eval] !break2_0
(push) ; 36
; [then-branch: 4816 | False | live]
; [else-branch: 4816 | True | live]
(push) ; 37
; [then-branch: 4816 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 4816 | True]
; [eval] !except2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
; [then-branch: 4817 | False | dead]
; [else-branch: 4817 | True | live]
(push) ; 34
; [else-branch: 4817 | True]
(pop) ; 34
; [eval] !(p2_5 && (!break2_0 && !except2_0))
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 34
; [then-branch: 4818 | !(p2_4@476@01) | live]
; [else-branch: 4818 | p2_4@476@01 | live]
(push) ; 35
; [then-branch: 4818 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4818 | p2_4@476@01]
; [eval] !break2_0
(push) ; 36
; [then-branch: 4819 | False | live]
; [else-branch: 4819 | True | live]
(push) ; 37
; [then-branch: 4819 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 4819 | True]
; [eval] !except2_0
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4820 | True | live]
; [else-branch: 4820 | False | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 4820 | True]
; [exec]
; assert (p1_5 && (!break1_0 && !except1_0) ==>
;   _loop_termination_flag_0 ==> !true) &&
;   (p2_5 && (!break2_0 && !except2_0) ==>
;   _loop_termination_flag_0_0 ==> !true)
; [eval] p1_5 && (!break1_0 && !except1_0) ==> _loop_termination_flag_0 ==> !true
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 35
; [then-branch: 4821 | !(p1_4@475@01) | live]
; [else-branch: 4821 | p1_4@475@01 | live]
(push) ; 36
; [then-branch: 4821 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 36
(push) ; 36
; [else-branch: 4821 | p1_4@475@01]
; [eval] !break1_0
(push) ; 37
; [then-branch: 4822 | False | live]
; [else-branch: 4822 | True | live]
(push) ; 38
; [then-branch: 4822 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 4822 | True]
; [eval] !except1_0
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
; [then-branch: 4823 | False | dead]
; [else-branch: 4823 | True | live]
(push) ; 36
; [else-branch: 4823 | True]
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p2_5 && (!break2_0 && !except2_0) ==> _loop_termination_flag_0_0 ==> !true
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 35
; [then-branch: 4824 | !(p2_4@476@01) | live]
; [else-branch: 4824 | p2_4@476@01 | live]
(push) ; 36
; [then-branch: 4824 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 36
(push) ; 36
; [else-branch: 4824 | p2_4@476@01]
; [eval] !break2_0
(push) ; 37
; [then-branch: 4825 | False | live]
; [else-branch: 4825 | True | live]
(push) ; 38
; [then-branch: 4825 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 4825 | True]
; [eval] !except2_0
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
; [then-branch: 4826 | False | dead]
; [else-branch: 4826 | True | live]
(push) ; 36
; [else-branch: 4826 | True]
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [exec]
; inhale !p1_5 || !(!break1_0 && !except1_0)
(declare-const $t@666@01 $Snap)
(assert (= $t@666@01 $Snap.unit))
; [eval] !p1_5 || !(!break1_0 && !except1_0)
; [eval] !p1_5
(push) ; 35
; [then-branch: 4827 | !(p1_4@475@01) | live]
; [else-branch: 4827 | p1_4@475@01 | live]
(push) ; 36
; [then-branch: 4827 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 36
(push) ; 36
; [else-branch: 4827 | p1_4@475@01]
; [eval] !(!break1_0 && !except1_0)
; [eval] !break1_0 && !except1_0
; [eval] !break1_0
(push) ; 37
; [then-branch: 4828 | False | live]
; [else-branch: 4828 | True | live]
(push) ; 38
; [then-branch: 4828 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 4828 | True]
; [eval] !except1_0
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !p2_5 || !(!break2_0 && !except2_0)
(declare-const $t@667@01 $Snap)
(assert (= $t@667@01 $Snap.unit))
; [eval] !p2_5 || !(!break2_0 && !except2_0)
; [eval] !p2_5
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4829 | !(p2_4@476@01) | live]
; [else-branch: 4829 | p2_4@476@01 | live]
(push) ; 36
; [then-branch: 4829 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 36
(push) ; 36
; [else-branch: 4829 | p2_4@476@01]
; [eval] !(!break2_0 && !except2_0)
; [eval] !break2_0 && !except2_0
; [eval] !break2_0
(push) ; 37
; [then-branch: 4830 | False | live]
; [else-branch: 4830 | True | live]
(push) ; 38
; [then-branch: 4830 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 4830 | True]
; [eval] !except2_0
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] !bypass1_0
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not bypass1_0@542@01))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (not bypass1_0@542@01)))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4831 | !(bypass1_0@542@01) | live]
; [else-branch: 4831 | bypass1_0@542@01 | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4831 | !(bypass1_0@542@01)]
(assert (not bypass1_0@542@01))
; [exec]
; break1_0 := false
; [eval] !bypass2_0
(push) ; 36
(set-option :timeout 10)
(assert (not bypass2_0@543@01))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (not bypass2_0@543@01)))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4832 | !(bypass2_0@543@01) | live]
; [else-branch: 4832 | bypass2_0@543@01 | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 4832 | !(bypass2_0@543@01)]
(assert (not bypass2_0@543@01))
; [exec]
; break2_0 := false
; [eval] p1_4 && (!break1_0 && !except1_0)
(push) ; 37
; [then-branch: 4833 | !(p1_4@475@01) | live]
; [else-branch: 4833 | p1_4@475@01 | live]
(push) ; 38
; [then-branch: 4833 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 38
(push) ; 38
; [else-branch: 4833 | p1_4@475@01]
; [eval] !break1_0
(push) ; 39
; [then-branch: 4834 | False | live]
; [else-branch: 4834 | True | live]
(push) ; 40
; [then-branch: 4834 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 4834 | True]
; [eval] !except1_0
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
; [then-branch: 4835 | False | dead]
; [else-branch: 4835 | True | live]
(push) ; 37
; [else-branch: 4835 | True]
(pop) ; 37
; [eval] !(p1_4 && (!break1_0 && !except1_0))
; [eval] p1_4 && (!break1_0 && !except1_0)
(push) ; 37
; [then-branch: 4836 | !(p1_4@475@01) | live]
; [else-branch: 4836 | p1_4@475@01 | live]
(push) ; 38
; [then-branch: 4836 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 38
(push) ; 38
; [else-branch: 4836 | p1_4@475@01]
; [eval] !break1_0
(push) ; 39
; [then-branch: 4837 | False | live]
; [else-branch: 4837 | True | live]
(push) ; 40
; [then-branch: 4837 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 4837 | True]
; [eval] !except1_0
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4838 | True | live]
; [else-branch: 4838 | False | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4838 | True]
; [eval] p2_4 && (!break2_0 && !except2_0)
(push) ; 38
; [then-branch: 4839 | !(p2_4@476@01) | live]
; [else-branch: 4839 | p2_4@476@01 | live]
(push) ; 39
; [then-branch: 4839 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 39
(push) ; 39
; [else-branch: 4839 | p2_4@476@01]
; [eval] !break2_0
(push) ; 40
; [then-branch: 4840 | False | live]
; [else-branch: 4840 | True | live]
(push) ; 41
; [then-branch: 4840 | False]
(assert false)
(pop) ; 41
(push) ; 41
; [else-branch: 4840 | True]
; [eval] !except2_0
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
; [then-branch: 4841 | False | dead]
; [else-branch: 4841 | True | live]
(push) ; 38
; [else-branch: 4841 | True]
(pop) ; 38
; [eval] !(p2_4 && (!break2_0 && !except2_0))
; [eval] p2_4 && (!break2_0 && !except2_0)
(push) ; 38
; [then-branch: 4842 | !(p2_4@476@01) | live]
; [else-branch: 4842 | p2_4@476@01 | live]
(push) ; 39
; [then-branch: 4842 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 39
(push) ; 39
; [else-branch: 4842 | p2_4@476@01]
; [eval] !break2_0
(push) ; 40
; [then-branch: 4843 | False | live]
; [else-branch: 4843 | True | live]
(push) ; 41
; [then-branch: 4843 | False]
(assert false)
(pop) ; 41
(push) ; 41
; [else-branch: 4843 | True]
; [eval] !except2_0
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4844 | True | live]
; [else-branch: 4844 | False | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 4844 | True]
; [eval] p1_4 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4845 | p1_4@475@01 | live]
; [else-branch: 4845 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 4845 | p1_4@475@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_4 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4846 | p2_4@476@01 | live]
; [else-branch: 4846 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 4846 | p2_4@476@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4847 | p1_4@475@01 | live]
; [else-branch: 4847 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 4847 | p1_4@475@01]
; [eval] _err == null
; [then-branch: 4848 | tmp_0@663@01 == Null | dead]
; [else-branch: 4848 | tmp_0@663@01 != Null | live]
(push) ; 40
; [else-branch: 4848 | tmp_0@663@01 != Null]
(push) ; 41
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4849 | p2_4@476@01 | live]
; [else-branch: 4849 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4849 | p2_4@476@01]
; [eval] _err_1 == null
; [then-branch: 4850 | tmp_0@663@01 == Null | dead]
; [else-branch: 4850 | tmp_0@663@01 != Null | live]
(push) ; 42
; [else-branch: 4850 | tmp_0@663@01 != Null]
(push) ; 43
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4851 | p1_4@475@01 | live]
; [else-branch: 4851 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 4851 | p1_4@475@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 44
; [then-branch: 4852 | tmp_0@663@01 == Null | live]
; [else-branch: 4852 | tmp_0@663@01 != Null | live]
(push) ; 45
; [then-branch: 4852 | tmp_0@663@01 == Null]
(assert (= tmp_0@663@01 $Ref.null))
(pop) ; 45
(push) ; 45
; [else-branch: 4852 | tmp_0@663@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(assert (or (not (= tmp_0@663@01 $Ref.null)) (= tmp_0@663@01 $Ref.null)))
(push) ; 44
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= tmp_0@663@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> tmp_0@663@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (and
  (not (= tmp_0@663@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_0@663@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4853 | tmp_0@663@01 != Null && issubtype[Bool](typeof[PyType](tmp_0@663@01), Exception[PyType]) | live]
; [else-branch: 4853 | !(tmp_0@663@01 != Null && issubtype[Bool](typeof[PyType](tmp_0@663@01), Exception[PyType])) | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 4853 | tmp_0@663@01 != Null && issubtype[Bool](typeof[PyType](tmp_0@663@01), Exception[PyType])]
(assert (and
  (not (= tmp_0@663@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_0@663@01) (as Exception<PyType>  PyType))))
; [eval] issubtype(typeof(c_0.Container_value), int())
; [eval] typeof(c_0.Container_value)
; [eval] int()
(push) ; 45
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@661@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@661@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_0.Container_value, __prim__int___box__(7))
; [eval] __prim__int___box__(7)
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@661@01 (__prim__int___box__ $Snap.unit 7)))
(pop) ; 45
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@661@01 (__prim__int___box__ $Snap.unit 7))))
(push) ; 45
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@661@01 (__prim__int___box__ $Snap.unit 7))))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@661@01 (__prim__int___box__ $Snap.unit 7)))
(push) ; 45
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4854 | p2_4@476@01 | live]
; [else-branch: 4854 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 4854 | p2_4@476@01]
; [eval] _err_1 != null && issubtype(typeof(_err_1), Exception())
; [eval] _err_1 != null
(push) ; 46
; [then-branch: 4855 | tmp_0@663@01 == Null | live]
; [else-branch: 4855 | tmp_0@663@01 != Null | live]
(push) ; 47
; [then-branch: 4855 | tmp_0@663@01 == Null]
(assert (= tmp_0@663@01 $Ref.null))
(pop) ; 47
(push) ; 47
; [else-branch: 4855 | tmp_0@663@01 != Null]
; [eval] issubtype(typeof(_err_1), Exception())
; [eval] typeof(_err_1)
; [eval] Exception()
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(push) ; 46
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= tmp_0@663@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> tmp_0@663@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 46
(set-option :timeout 10)
(assert (not (and
  (not (= tmp_0@663@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_0@663@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4856 | tmp_0@663@01 != Null && issubtype[Bool](typeof[PyType](tmp_0@663@01), Exception[PyType]) | live]
; [else-branch: 4856 | !(tmp_0@663@01 != Null && issubtype[Bool](typeof[PyType](tmp_0@663@01), Exception[PyType])) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 4856 | tmp_0@663@01 != Null && issubtype[Bool](typeof[PyType](tmp_0@663@01), Exception[PyType])]
(assert (and
  (not (= tmp_0@663@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_0@663@01) (as Exception<PyType>  PyType))))
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(push) ; 47
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@662@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@662@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(7))
; [eval] __prim__int___box__(7)
(push) ; 47
(pop) ; 47
; Joined path conditions
(push) ; 47
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@662@01 (__prim__int___box__ $Snap.unit 7)))
(pop) ; 47
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@662@01 (__prim__int___box__ $Snap.unit 7)))
(push) ; 47
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@662@01 (__prim__int___box__ $Snap.unit 7))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@662@01 (__prim__int___box__ $Snap.unit 7)))
; [eval] p1_4 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4857 | p1_4@475@01 | live]
; [else-branch: 4857 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4857 | p1_4@475@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp_0@663@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4858 | tmp_0@663@01 != Null | live]
; [else-branch: 4858 | tmp_0@663@01 == Null | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 4858 | tmp_0@663@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 50
(pop) ; 49
; Joined path conditions
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  (and p1_4@475@01 (not (= tmp_0@663@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_0@663@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_4@475@01 (not (= tmp_0@663@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_0@663@01) (as Exception<PyType>  PyType))))
; [eval] p2_4 ==> _err_1 != null ==> issubtype(typeof(_err_1), Exception())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4859 | p2_4@476@01 | live]
; [else-branch: 4859 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4859 | p2_4@476@01]
; [eval] _err_1 != null ==> issubtype(typeof(_err_1), Exception())
; [eval] _err_1 != null
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp_0@663@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4860 | tmp_0@663@01 != Null | live]
; [else-branch: 4860 | tmp_0@663@01 == Null | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 4860 | tmp_0@663@01 != Null]
; [eval] issubtype(typeof(_err_1), Exception())
; [eval] typeof(_err_1)
; [eval] Exception()
(pop) ; 50
(pop) ; 49
; Joined path conditions
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  (and p2_4@476@01 (not (= tmp_0@663@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_0@663@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_4@476@01 (not (= tmp_0@663@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> tmp_0@663@01) (as Exception<PyType>  PyType))))
; [eval] p1_4 ==> (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4861 | p1_4@475@01 | live]
; [else-branch: 4861 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4861 | p1_4@475@01]
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false)
(push) ; 49
; [then-branch: 4862 | False | live]
; [else-branch: 4862 | True | live]
(push) ; 50
; [then-branch: 4862 | False]
(assert false)
(pop) ; 50
(push) ; 50
; [else-branch: 4862 | True]
; [eval] (forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false)
(push) ; 51
; [then-branch: 4863 | False | live]
; [else-branch: 4863 | True | live]
(push) ; 52
; [then-branch: 4863 | False]
(assert false)
(pop) ; 52
(push) ; 52
; [else-branch: 4863 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false)
(push) ; 53
; [then-branch: 4864 | False | live]
; [else-branch: 4864 | True | live]
(push) ; 54
; [then-branch: 4864 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 4864 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(pop) ; 50
(pop) ; 49
; Joined path conditions
; Joined path conditions
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p2_4 ==> (forperm _r_7: Ref [MustInvokeBounded_0(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded_0(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBoundedp] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnboundedp] :: false)))
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4865 | p2_4@476@01 | live]
; [else-branch: 4865 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 4865 | p2_4@476@01]
; [eval] (forperm _r_7: Ref [MustInvokeBounded_0(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded_0(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBoundedp] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_7: Ref [MustInvokeBounded_0(_r_7)] :: false)
(push) ; 49
; [then-branch: 4866 | False | live]
; [else-branch: 4866 | True | live]
(push) ; 50
; [then-branch: 4866 | False]
(assert false)
(pop) ; 50
(push) ; 50
; [else-branch: 4866 | True]
; [eval] (forperm _r_7: Ref [MustInvokeUnbounded_0(_r_7)] :: false)
(push) ; 51
; [then-branch: 4867 | False | live]
; [else-branch: 4867 | True | live]
(push) ; 52
; [then-branch: 4867 | False]
(assert false)
(pop) ; 52
(push) ; 52
; [else-branch: 4867 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBoundedp] :: false)
(push) ; 53
; [then-branch: 4868 | False | live]
; [else-branch: 4868 | True | live]
(push) ; 54
; [then-branch: 4868 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 4868 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnboundedp] :: false)
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(pop) ; 50
(pop) ; 49
; Joined path conditions
; Joined path conditions
(pop) ; 48
(pop) ; 47
; Joined path conditions
(pop) ; 46
(pop) ; 45
(pop) ; 44
(pop) ; 43
(pop) ; 42
(pop) ; 41
(pop) ; 40
(pop) ; 39
(pop) ; 38
(pop) ; 37
(pop) ; 36
; [eval] !!bypass2_0
; [eval] !bypass2_0
(push) ; 36
(set-option :timeout 10)
(assert (not (not bypass2_0@543@01)))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4869 | bypass2_0@543@01 | dead]
; [else-branch: 4869 | !(bypass2_0@543@01) | live]
(set-option :timeout 0)
(push) ; 36
; [else-branch: 4869 | !(bypass2_0@543@01)]
(assert (not bypass2_0@543@01))
(pop) ; 36
(pop) ; 35
; [eval] !!bypass1_0
; [eval] !bypass1_0
(push) ; 35
(set-option :timeout 10)
(assert (not (not bypass1_0@542@01)))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4870 | bypass1_0@542@01 | dead]
; [else-branch: 4870 | !(bypass1_0@542@01) | live]
(set-option :timeout 0)
(push) ; 35
; [else-branch: 4870 | !(bypass1_0@542@01)]
(assert (not bypass1_0@542@01))
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 26
; [then-branch: 4871 | !(p2_6@658@01) | live]
; [else-branch: 4871 | p2_6@658@01 | live]
(push) ; 27
; [then-branch: 4871 | !(p2_6@658@01)]
(assert (not p2_6@658@01))
(pop) ; 27
(push) ; 27
; [else-branch: 4871 | p2_6@658@01]
; [eval] !break2_0
(push) ; 28
; [then-branch: 4872 | False | live]
; [else-branch: 4872 | True | live]
(push) ; 29
; [then-branch: 4872 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 4872 | True]
; [eval] !except2_0
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 4873 | !(p2_6@658@01) | dead]
; [else-branch: 4873 | p2_6@658@01 | live]
(push) ; 26
; [else-branch: 4873 | p2_6@658@01]
(pop) ; 26
(pop) ; 25
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 25
; [then-branch: 4874 | !(p1_6@657@01) | live]
; [else-branch: 4874 | p1_6@657@01 | live]
(push) ; 26
; [then-branch: 4874 | !(p1_6@657@01)]
(assert (not p1_6@657@01))
(pop) ; 26
(push) ; 26
; [else-branch: 4874 | p1_6@657@01]
; [eval] !break1_0
(push) ; 27
; [then-branch: 4875 | False | live]
; [else-branch: 4875 | True | live]
(push) ; 28
; [then-branch: 4875 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 4875 | True]
; [eval] !except1_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 4876 | !(p1_6@657@01) | dead]
; [else-branch: 4876 | p1_6@657@01 | live]
(push) ; 25
; [else-branch: 4876 | p1_6@657@01]
(pop) ; 25
(pop) ; 24
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 24
; [then-branch: 4877 | !(p2_6@658@01) | live]
; [else-branch: 4877 | p2_6@658@01 | live]
(push) ; 25
; [then-branch: 4877 | !(p2_6@658@01)]
(assert (not p2_6@658@01))
(pop) ; 25
(push) ; 25
; [else-branch: 4877 | p2_6@658@01]
; [eval] !break2_0
(push) ; 26
; [then-branch: 4878 | False | live]
; [else-branch: 4878 | True | live]
(push) ; 27
; [then-branch: 4878 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 4878 | True]
; [eval] !except2_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 4879 | !(p2_6@658@01) | dead]
; [else-branch: 4879 | p2_6@658@01 | live]
(push) ; 24
; [else-branch: 4879 | p2_6@658@01]
(pop) ; 24
(pop) ; 23
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 23
; [then-branch: 4880 | !(p1_6@657@01) | live]
; [else-branch: 4880 | p1_6@657@01 | live]
(push) ; 24
; [then-branch: 4880 | !(p1_6@657@01)]
(assert (not p1_6@657@01))
(pop) ; 24
(push) ; 24
; [else-branch: 4880 | p1_6@657@01]
; [eval] !break1_0
(push) ; 25
; [then-branch: 4881 | False | live]
; [else-branch: 4881 | True | live]
(push) ; 26
; [then-branch: 4881 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 4881 | True]
; [eval] !except1_0
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 4882 | !(p1_6@657@01) | dead]
; [else-branch: 4882 | p1_6@657@01 | live]
(push) ; 23
; [else-branch: 4882 | p1_6@657@01]
(pop) ; 23
(pop) ; 22
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 22
; [then-branch: 4883 | !(p2_6@658@01) | live]
; [else-branch: 4883 | p2_6@658@01 | live]
(push) ; 23
; [then-branch: 4883 | !(p2_6@658@01)]
(assert (not p2_6@658@01))
(pop) ; 23
(push) ; 23
; [else-branch: 4883 | p2_6@658@01]
; [eval] !break2_0
(push) ; 24
; [then-branch: 4884 | False | live]
; [else-branch: 4884 | True | live]
(push) ; 25
; [then-branch: 4884 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 4884 | True]
; [eval] !except2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 4885 | !(p2_6@658@01) | dead]
; [else-branch: 4885 | p2_6@658@01 | live]
(push) ; 22
; [else-branch: 4885 | p2_6@658@01]
(pop) ; 22
(pop) ; 21
; [eval] !(p1_6 && (!break1_0 && !except1_0))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 21
; [then-branch: 4886 | !(p1_6@657@01) | live]
; [else-branch: 4886 | p1_6@657@01 | live]
(push) ; 22
; [then-branch: 4886 | !(p1_6@657@01)]
(assert (not p1_6@657@01))
(pop) ; 22
(push) ; 22
; [else-branch: 4886 | p1_6@657@01]
; [eval] !break1_0
(push) ; 23
; [then-branch: 4887 | False | live]
; [else-branch: 4887 | True | live]
(push) ; 24
; [then-branch: 4887 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 4887 | True]
; [eval] !except1_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 4888 | !(p1_6@657@01) | dead]
; [else-branch: 4888 | p1_6@657@01 | live]
(push) ; 21
; [else-branch: 4888 | p1_6@657@01]
(pop) ; 21
(pop) ; 20
(push) ; 20
; [else-branch: 4754 | !(p2_6@658@01)]
(assert (not p2_6@658@01))
(pop) ; 20
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 20
; [then-branch: 4889 | !(p2_6@658@01) | live]
; [else-branch: 4889 | p2_6@658@01 | live]
(push) ; 21
; [then-branch: 4889 | !(p2_6@658@01)]
(assert (not p2_6@658@01))
(pop) ; 21
(push) ; 21
; [else-branch: 4889 | p2_6@658@01]
(assert p2_6@658@01)
; [eval] !break2_0
(push) ; 22
; [then-branch: 4890 | False | live]
; [else-branch: 4890 | True | live]
(push) ; 23
; [then-branch: 4890 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 4890 | True]
; [eval] !except2_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not p2_6@658@01))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_6@658@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4891 | !(p2_6@658@01) | live]
; [else-branch: 4891 | p2_6@658@01 | live]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 4891 | !(p2_6@658@01)]
(assert (not p2_6@658@01))
; [exec]
; tmp_0 := new()
(declare-const tmp_0@668@01 $Ref)
(assert (not (= tmp_0@668@01 $Ref.null)))
(assert (not (= tmp_0@668@01 _cthread_158_0@478@01)))
(assert (not (= tmp_0@668@01 tmp2_8@526@01)))
(assert (not (= tmp_0@668@01 tmp_0@650@01)))
(assert (not (= tmp_0@668@01 Exception_res_0_0@560@01)))
(assert (not (= tmp_0@668@01 c_0@483@01)))
(assert (not (= tmp_0@668@01 _err@561@01)))
(assert (not (= tmp_0@668@01 Container_value@661@01)))
(assert (not (= tmp_0@668@01 b_0@485@01)))
(assert (not
  (=
    tmp_0@668@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@573@01))))))))
(assert (not (= tmp_0@668@01 b_0_0@486@01)))
(assert (not (= tmp_0@668@01 tmp1_8@525@01)))
(assert (not (= tmp_0@668@01 _cthread_158@477@01)))
(assert (not (= tmp_0@668@01 c_0_0@484@01)))
(assert (not (= tmp_0@668@01 tmp1_6@521@01)))
(assert (not (= tmp_0@668@01 tmp2_6@522@01)))
(assert (not (= tmp_0@668@01 _err_1@563@01)))
(assert (not (= tmp_0@668@01 Exception_res_0@559@01)))
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 21
; [then-branch: 4892 | !(p1_6@657@01) | live]
; [else-branch: 4892 | p1_6@657@01 | live]
(push) ; 22
; [then-branch: 4892 | !(p1_6@657@01)]
(assert (not p1_6@657@01))
(pop) ; 22
(push) ; 22
; [else-branch: 4892 | p1_6@657@01]
; [eval] !break1_0
(push) ; 23
; [then-branch: 4893 | False | live]
; [else-branch: 4893 | True | live]
(push) ; 24
; [then-branch: 4893 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 4893 | True]
; [eval] !except1_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_6@657@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4894 | p1_6@657@01 | live]
; [else-branch: 4894 | !(p1_6@657@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 4894 | p1_6@657@01]
; [exec]
; Exception_res_0 := tmp_0
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 22
; [then-branch: 4895 | !(p2_6@658@01) | live]
; [else-branch: 4895 | p2_6@658@01 | live]
(push) ; 23
; [then-branch: 4895 | !(p2_6@658@01)]
(pop) ; 23
(push) ; 23
; [else-branch: 4895 | p2_6@658@01]
(assert p2_6@658@01)
; [eval] !break2_0
(push) ; 24
; [then-branch: 4896 | False | live]
; [else-branch: 4896 | True | live]
(push) ; 25
; [then-branch: 4896 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 4896 | True]
; [eval] !except2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 4897 | p2_6@658@01 | dead]
; [else-branch: 4897 | !(p2_6@658@01) | live]
(push) ; 22
; [else-branch: 4897 | !(p2_6@658@01)]
(pop) ; 22
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 22
; [then-branch: 4898 | !(p2_6@658@01) | live]
; [else-branch: 4898 | p2_6@658@01 | live]
(push) ; 23
; [then-branch: 4898 | !(p2_6@658@01)]
(pop) ; 23
(push) ; 23
; [else-branch: 4898 | p2_6@658@01]
(assert p2_6@658@01)
; [eval] !break2_0
(push) ; 24
; [then-branch: 4899 | False | live]
; [else-branch: 4899 | True | live]
(push) ; 25
; [then-branch: 4899 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 4899 | True]
; [eval] !except2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not p2_6@658@01))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4900 | !(p2_6@658@01) | live]
; [else-branch: 4900 | p2_6@658@01 | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 4900 | !(p2_6@658@01)]
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 23
; [then-branch: 4901 | !(p1_6@657@01) | live]
; [else-branch: 4901 | p1_6@657@01 | live]
(push) ; 24
; [then-branch: 4901 | !(p1_6@657@01)]
(assert (not p1_6@657@01))
(pop) ; 24
(push) ; 24
; [else-branch: 4901 | p1_6@657@01]
; [eval] !break1_0
(push) ; 25
; [then-branch: 4902 | False | live]
; [else-branch: 4902 | True | live]
(push) ; 26
; [then-branch: 4902 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 4902 | True]
; [eval] !except1_0
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_6@657@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4903 | p1_6@657@01 | live]
; [else-branch: 4903 | !(p1_6@657@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 4903 | p1_6@657@01]
; [exec]
; inhale typeof(Exception_res_0) == Exception()
(declare-const $t@669@01 $Snap)
(assert (= $t@669@01 $Snap.unit))
; [eval] typeof(Exception_res_0) == Exception()
; [eval] typeof(Exception_res_0)
; [eval] Exception()
(assert (= (typeof<PyType> tmp_0@668@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_6 && (!break2_0 && !except2_0)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 4904 | !(p2_6@658@01) | live]
; [else-branch: 4904 | p2_6@658@01 | live]
(push) ; 25
; [then-branch: 4904 | !(p2_6@658@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 4904 | p2_6@658@01]
(assert p2_6@658@01)
; [eval] !break2_0
(push) ; 26
; [then-branch: 4905 | False | live]
; [else-branch: 4905 | True | live]
(push) ; 27
; [then-branch: 4905 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 4905 | True]
; [eval] !except2_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 4906 | p2_6@658@01 | dead]
; [else-branch: 4906 | !(p2_6@658@01) | live]
(push) ; 24
; [else-branch: 4906 | !(p2_6@658@01)]
(pop) ; 24
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 24
; [then-branch: 4907 | !(p2_6@658@01) | live]
; [else-branch: 4907 | p2_6@658@01 | live]
(push) ; 25
; [then-branch: 4907 | !(p2_6@658@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 4907 | p2_6@658@01]
(assert p2_6@658@01)
; [eval] !break2_0
(push) ; 26
; [then-branch: 4908 | False | live]
; [else-branch: 4908 | True | live]
(push) ; 27
; [then-branch: 4908 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 4908 | True]
; [eval] !except2_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not p2_6@658@01))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4909 | !(p2_6@658@01) | live]
; [else-branch: 4909 | p2_6@658@01 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 4909 | !(p2_6@658@01)]
; [eval] p1_6 && (!break1_0 && !except1_0)
(push) ; 25
; [then-branch: 4910 | !(p1_6@657@01) | live]
; [else-branch: 4910 | p1_6@657@01 | live]
(push) ; 26
; [then-branch: 4910 | !(p1_6@657@01)]
(assert (not p1_6@657@01))
(pop) ; 26
(push) ; 26
; [else-branch: 4910 | p1_6@657@01]
; [eval] !break1_0
(push) ; 27
; [then-branch: 4911 | False | live]
; [else-branch: 4911 | True | live]
(push) ; 28
; [then-branch: 4911 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 4911 | True]
; [eval] !except1_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_6@657@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4912 | p1_6@657@01 | live]
; [else-branch: 4912 | !(p1_6@657@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 4912 | p1_6@657@01]
; [exec]
; _err := Exception_res_0
; [exec]
; except1_0 := true
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 26
; [then-branch: 4913 | !(p2_6@658@01) | live]
; [else-branch: 4913 | p2_6@658@01 | live]
(push) ; 27
; [then-branch: 4913 | !(p2_6@658@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 4913 | p2_6@658@01]
(assert p2_6@658@01)
; [eval] !break2_0
(push) ; 28
; [then-branch: 4914 | False | live]
; [else-branch: 4914 | True | live]
(push) ; 29
; [then-branch: 4914 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 4914 | True]
; [eval] !except2_0
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 4915 | p2_6@658@01 | dead]
; [else-branch: 4915 | !(p2_6@658@01) | live]
(push) ; 26
; [else-branch: 4915 | !(p2_6@658@01)]
(pop) ; 26
; [eval] !(p2_6 && (!break2_0 && !except2_0))
; [eval] p2_6 && (!break2_0 && !except2_0)
(push) ; 26
; [then-branch: 4916 | !(p2_6@658@01) | live]
; [else-branch: 4916 | p2_6@658@01 | live]
(push) ; 27
; [then-branch: 4916 | !(p2_6@658@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 4916 | p2_6@658@01]
(assert p2_6@658@01)
; [eval] !break2_0
(push) ; 28
; [then-branch: 4917 | False | live]
; [else-branch: 4917 | True | live]
(push) ; 29
; [then-branch: 4917 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 4917 | True]
; [eval] !except2_0
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not p2_6@658@01))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4918 | !(p2_6@658@01) | live]
; [else-branch: 4918 | p2_6@658@01 | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 4918 | !(p2_6@658@01)]
; [exec]
; p1_8 := p3_2 &&
;   (!break1_0 && !except1_0 &&
;   perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] p3_2 && (!break1_0 && !except1_0 && perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 4919 | !(p3_2@659@01) | live]
; [else-branch: 4919 | p3_2@659@01 | live]
(push) ; 28
; [then-branch: 4919 | !(p3_2@659@01)]
(assert (not p3_2@659@01))
(pop) ; 28
(push) ; 28
; [else-branch: 4919 | p3_2@659@01]
(assert p3_2@659@01)
; [eval] !break1_0
(push) ; 29
; [then-branch: 4920 | False | live]
; [else-branch: 4920 | True | live]
(push) ; 30
; [then-branch: 4920 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 4920 | True]
; [eval] !except1_0
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or p3_2@659@01 (not p3_2@659@01)))
; [exec]
; p2_8 := p4_2 &&
;   (!break2_0 && !except2_0 &&
;   perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_2 && (!break2_0 && !except2_0 && perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 4921 | !(p4_2@660@01) | live]
; [else-branch: 4921 | p4_2@660@01 | live]
(push) ; 28
; [then-branch: 4921 | !(p4_2@660@01)]
(assert (not p4_2@660@01))
(pop) ; 28
(push) ; 28
; [else-branch: 4921 | p4_2@660@01]
(assert p4_2@660@01)
; [eval] !break2_0
(push) ; 29
; [then-branch: 4922 | False | live]
; [else-branch: 4922 | True | live]
(push) ; 30
; [then-branch: 4922 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 4922 | True]
; [eval] !except2_0
(push) ; 31
; [then-branch: 4923 | False | live]
; [else-branch: 4923 | True | live]
(push) ; 32
; [then-branch: 4923 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 4923 | True]
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or p4_2@660@01 (not p4_2@660@01)))
; [exec]
; p3_4 := p3_2 &&
;   (!break1_0 && !except1_0 &&
;   !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
; [eval] p3_2 && (!break1_0 && !except1_0 && !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 4924 | !(p3_2@659@01) | live]
; [else-branch: 4924 | p3_2@659@01 | live]
(push) ; 28
; [then-branch: 4924 | !(p3_2@659@01)]
(assert (not p3_2@659@01))
(pop) ; 28
(push) ; 28
; [else-branch: 4924 | p3_2@659@01]
(assert p3_2@659@01)
; [eval] !break1_0
(push) ; 29
; [then-branch: 4925 | False | live]
; [else-branch: 4925 | True | live]
(push) ; 30
; [then-branch: 4925 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 4925 | True]
; [eval] !except1_0
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p4_4 := p4_2 &&
;   (!break2_0 && !except2_0 &&
;   !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_2 && (!break2_0 && !except2_0 && !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 4926 | !(p4_2@660@01) | live]
; [else-branch: 4926 | p4_2@660@01 | live]
(push) ; 28
; [then-branch: 4926 | !(p4_2@660@01)]
(assert (not p4_2@660@01))
(pop) ; 28
(push) ; 28
; [else-branch: 4926 | p4_2@660@01]
(assert p4_2@660@01)
; [eval] !break2_0
(push) ; 29
; [then-branch: 4927 | False | live]
; [else-branch: 4927 | True | live]
(push) ; 30
; [then-branch: 4927 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 4927 | True]
; [eval] !except2_0
(push) ; 31
; [then-branch: 4928 | False | live]
; [else-branch: 4928 | True | live]
(push) ; 32
; [then-branch: 4928 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 4928 | True]
; [eval] !(perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_5_0, 526803611440346310908232101056638787))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [eval] p1_8 && (!break1_0 && !except1_0)
; [then-branch: 4929 | False | dead]
; [else-branch: 4929 | True | live]
(push) ; 27
; [else-branch: 4929 | True]
(pop) ; 27
; [eval] !(p1_8 && (!break1_0 && !except1_0))
; [eval] p1_8 && (!break1_0 && !except1_0)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4930 | True | live]
; [else-branch: 4930 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 4930 | True]
; [eval] p2_8 && (!break2_0 && !except2_0)
; [then-branch: 4931 | False | dead]
; [else-branch: 4931 | True | live]
(push) ; 28
; [else-branch: 4931 | True]
(pop) ; 28
; [eval] !(p2_8 && (!break2_0 && !except2_0))
; [eval] p2_8 && (!break2_0 && !except2_0)
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4932 | True | live]
; [else-branch: 4932 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 4932 | True]
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 29
; [then-branch: 4933 | !(p3_2@659@01) | live]
; [else-branch: 4933 | p3_2@659@01 | live]
(push) ; 30
; [then-branch: 4933 | !(p3_2@659@01)]
(assert (not p3_2@659@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4933 | p3_2@659@01]
(assert p3_2@659@01)
; [eval] !break1_0
(push) ; 31
; [then-branch: 4934 | False | live]
; [else-branch: 4934 | True | live]
(push) ; 32
; [then-branch: 4934 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 4934 | True]
; [eval] !except1_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 4935 | False | dead]
; [else-branch: 4935 | True | live]
(push) ; 29
; [else-branch: 4935 | True]
(pop) ; 29
; [eval] !(p3_2 && (!break1_0 && !except1_0))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 29
; [then-branch: 4936 | !(p3_2@659@01) | live]
; [else-branch: 4936 | p3_2@659@01 | live]
(push) ; 30
; [then-branch: 4936 | !(p3_2@659@01)]
(assert (not p3_2@659@01))
(pop) ; 30
(push) ; 30
; [else-branch: 4936 | p3_2@659@01]
(assert p3_2@659@01)
; [eval] !break1_0
(push) ; 31
; [then-branch: 4937 | False | live]
; [else-branch: 4937 | True | live]
(push) ; 32
; [then-branch: 4937 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 4937 | True]
; [eval] !except1_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4938 | True | live]
; [else-branch: 4938 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 4938 | True]
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 30
; [then-branch: 4939 | !(p4_2@660@01) | live]
; [else-branch: 4939 | p4_2@660@01 | live]
(push) ; 31
; [then-branch: 4939 | !(p4_2@660@01)]
(assert (not p4_2@660@01))
(pop) ; 31
(push) ; 31
; [else-branch: 4939 | p4_2@660@01]
(assert p4_2@660@01)
; [eval] !break2_0
(push) ; 32
; [then-branch: 4940 | False | live]
; [else-branch: 4940 | True | live]
(push) ; 33
; [then-branch: 4940 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 4940 | True]
; [eval] !except2_0
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (not p4_2@660@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not p4_2@660@01))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4941 | p4_2@660@01 | live]
; [else-branch: 4941 | !(p4_2@660@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 4941 | p4_2@660@01]
(assert p4_2@660@01)
; [exec]
; c_5_0.Container_valuep := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 31
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 31
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_valuep@670@01 $Ref)
(assert (= Container_valuep@670@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 31
; [then-branch: 4942 | !(p3_2@659@01) | live]
; [else-branch: 4942 | p3_2@659@01 | live]
(push) ; 32
; [then-branch: 4942 | !(p3_2@659@01)]
(assert (not p3_2@659@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4942 | p3_2@659@01]
(assert p3_2@659@01)
; [eval] !break1_0
(push) ; 33
; [then-branch: 4943 | False | live]
; [else-branch: 4943 | True | live]
(push) ; 34
; [then-branch: 4943 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 4943 | True]
; [eval] !except1_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 4944 | False | dead]
; [else-branch: 4944 | True | live]
(push) ; 31
; [else-branch: 4944 | True]
(pop) ; 31
; [eval] !(p3_2 && (!break1_0 && !except1_0))
; [eval] p3_2 && (!break1_0 && !except1_0)
(push) ; 31
; [then-branch: 4945 | !(p3_2@659@01) | live]
; [else-branch: 4945 | p3_2@659@01 | live]
(push) ; 32
; [then-branch: 4945 | !(p3_2@659@01)]
(assert (not p3_2@659@01))
(pop) ; 32
(push) ; 32
; [else-branch: 4945 | p3_2@659@01]
(assert p3_2@659@01)
; [eval] !break1_0
(push) ; 33
; [then-branch: 4946 | False | live]
; [else-branch: 4946 | True | live]
(push) ; 34
; [then-branch: 4946 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 4946 | True]
; [eval] !except1_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4947 | True | live]
; [else-branch: 4947 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 4947 | True]
; [eval] p4_2 && (!break2_0 && !except2_0)
(push) ; 32
; [then-branch: 4948 | !(p4_2@660@01) | live]
; [else-branch: 4948 | p4_2@660@01 | live]
(push) ; 33
; [then-branch: 4948 | !(p4_2@660@01)]
(assert (not p4_2@660@01))
(pop) ; 33
(push) ; 33
; [else-branch: 4948 | p4_2@660@01]
; [eval] !break2_0
(push) ; 34
; [then-branch: 4949 | False | live]
; [else-branch: 4949 | True | live]
(push) ; 35
; [then-branch: 4949 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 4949 | True]
; [eval] !except2_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not (not p4_2@660@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4950 | p4_2@660@01 | live]
; [else-branch: 4950 | !(p4_2@660@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 4950 | p4_2@660@01]
; [exec]
; break2_0 := true
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 33
; [then-branch: 4951 | !(p1_4@475@01) | live]
; [else-branch: 4951 | p1_4@475@01 | live]
(push) ; 34
; [then-branch: 4951 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 34
(push) ; 34
; [else-branch: 4951 | p1_4@475@01]
; [eval] !break1_0
(push) ; 35
; [then-branch: 4952 | False | live]
; [else-branch: 4952 | True | live]
(push) ; 36
; [then-branch: 4952 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 4952 | True]
; [eval] !except1_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 4953 | False | dead]
; [else-branch: 4953 | True | live]
(push) ; 33
; [else-branch: 4953 | True]
(pop) ; 33
; [eval] !(p1_5 && (!break1_0 && !except1_0))
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 33
; [then-branch: 4954 | !(p1_4@475@01) | live]
; [else-branch: 4954 | p1_4@475@01 | live]
(push) ; 34
; [then-branch: 4954 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 34
(push) ; 34
; [else-branch: 4954 | p1_4@475@01]
; [eval] !break1_0
(push) ; 35
; [then-branch: 4955 | False | live]
; [else-branch: 4955 | True | live]
(push) ; 36
; [then-branch: 4955 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 4955 | True]
; [eval] !except1_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4956 | True | live]
; [else-branch: 4956 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 4956 | True]
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 34
; [then-branch: 4957 | !(p2_4@476@01) | live]
; [else-branch: 4957 | p2_4@476@01 | live]
(push) ; 35
; [then-branch: 4957 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4957 | p2_4@476@01]
; [eval] !break2_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
; [then-branch: 4958 | False | dead]
; [else-branch: 4958 | True | live]
(push) ; 34
; [else-branch: 4958 | True]
(pop) ; 34
; [eval] !(p2_5 && (!break2_0 && !except2_0))
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 34
; [then-branch: 4959 | !(p2_4@476@01) | live]
; [else-branch: 4959 | p2_4@476@01 | live]
(push) ; 35
; [then-branch: 4959 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 35
(push) ; 35
; [else-branch: 4959 | p2_4@476@01]
; [eval] !break2_0
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4960 | True | live]
; [else-branch: 4960 | False | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 4960 | True]
; [exec]
; assert (p1_5 && (!break1_0 && !except1_0) ==>
;   _loop_termination_flag_0 ==> !true) &&
;   (p2_5 && (!break2_0 && !except2_0) ==>
;   _loop_termination_flag_0_0 ==> !true)
; [eval] p1_5 && (!break1_0 && !except1_0) ==> _loop_termination_flag_0 ==> !true
; [eval] p1_5 && (!break1_0 && !except1_0)
(push) ; 35
; [then-branch: 4961 | !(p1_4@475@01) | live]
; [else-branch: 4961 | p1_4@475@01 | live]
(push) ; 36
; [then-branch: 4961 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 36
(push) ; 36
; [else-branch: 4961 | p1_4@475@01]
; [eval] !break1_0
(push) ; 37
; [then-branch: 4962 | False | live]
; [else-branch: 4962 | True | live]
(push) ; 38
; [then-branch: 4962 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 4962 | True]
; [eval] !except1_0
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
; [then-branch: 4963 | False | dead]
; [else-branch: 4963 | True | live]
(push) ; 36
; [else-branch: 4963 | True]
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p2_5 && (!break2_0 && !except2_0) ==> _loop_termination_flag_0_0 ==> !true
; [eval] p2_5 && (!break2_0 && !except2_0)
(push) ; 35
; [then-branch: 4964 | !(p2_4@476@01) | live]
; [else-branch: 4964 | p2_4@476@01 | live]
(push) ; 36
; [then-branch: 4964 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 36
(push) ; 36
; [else-branch: 4964 | p2_4@476@01]
; [eval] !break2_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
; [then-branch: 4965 | False | dead]
; [else-branch: 4965 | True | live]
(push) ; 36
; [else-branch: 4965 | True]
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [exec]
; inhale !p1_5 || !(!break1_0 && !except1_0)
(declare-const $t@671@01 $Snap)
(assert (= $t@671@01 $Snap.unit))
; [eval] !p1_5 || !(!break1_0 && !except1_0)
; [eval] !p1_5
(push) ; 35
; [then-branch: 4966 | !(p1_4@475@01) | live]
; [else-branch: 4966 | p1_4@475@01 | live]
(push) ; 36
; [then-branch: 4966 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 36
(push) ; 36
; [else-branch: 4966 | p1_4@475@01]
; [eval] !(!break1_0 && !except1_0)
; [eval] !break1_0 && !except1_0
; [eval] !break1_0
(push) ; 37
; [then-branch: 4967 | False | live]
; [else-branch: 4967 | True | live]
(push) ; 38
; [then-branch: 4967 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 4967 | True]
; [eval] !except1_0
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !p2_5 || !(!break2_0 && !except2_0)
(declare-const $t@672@01 $Snap)
(assert (= $t@672@01 $Snap.unit))
; [eval] !p2_5 || !(!break2_0 && !except2_0)
; [eval] !p2_5
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4968 | !(p2_4@476@01) | live]
; [else-branch: 4968 | p2_4@476@01 | live]
(push) ; 36
; [then-branch: 4968 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 36
(push) ; 36
; [else-branch: 4968 | p2_4@476@01]
; [eval] !(!break2_0 && !except2_0)
; [eval] !break2_0 && !except2_0
; [eval] !break2_0
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] !bypass1_0
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not bypass1_0@542@01))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (not bypass1_0@542@01)))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4969 | !(bypass1_0@542@01) | live]
; [else-branch: 4969 | bypass1_0@542@01 | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 4969 | !(bypass1_0@542@01)]
(assert (not bypass1_0@542@01))
; [exec]
; break1_0 := false
; [eval] !bypass2_0
(push) ; 36
(set-option :timeout 10)
(assert (not bypass2_0@543@01))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (not bypass2_0@543@01)))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4970 | !(bypass2_0@543@01) | live]
; [else-branch: 4970 | bypass2_0@543@01 | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 4970 | !(bypass2_0@543@01)]
(assert (not bypass2_0@543@01))
; [exec]
; break2_0 := false
; [eval] p1_4 && (!break1_0 && !except1_0)
(push) ; 37
; [then-branch: 4971 | !(p1_4@475@01) | live]
; [else-branch: 4971 | p1_4@475@01 | live]
(push) ; 38
; [then-branch: 4971 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 38
(push) ; 38
; [else-branch: 4971 | p1_4@475@01]
; [eval] !break1_0
(push) ; 39
; [then-branch: 4972 | False | live]
; [else-branch: 4972 | True | live]
(push) ; 40
; [then-branch: 4972 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 4972 | True]
; [eval] !except1_0
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
; [then-branch: 4973 | False | dead]
; [else-branch: 4973 | True | live]
(push) ; 37
; [else-branch: 4973 | True]
(pop) ; 37
; [eval] !(p1_4 && (!break1_0 && !except1_0))
; [eval] p1_4 && (!break1_0 && !except1_0)
(push) ; 37
; [then-branch: 4974 | !(p1_4@475@01) | live]
; [else-branch: 4974 | p1_4@475@01 | live]
(push) ; 38
; [then-branch: 4974 | !(p1_4@475@01)]
(assert (not p1_4@475@01))
(pop) ; 38
(push) ; 38
; [else-branch: 4974 | p1_4@475@01]
; [eval] !break1_0
(push) ; 39
; [then-branch: 4975 | False | live]
; [else-branch: 4975 | True | live]
(push) ; 40
; [then-branch: 4975 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 4975 | True]
; [eval] !except1_0
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4976 | True | live]
; [else-branch: 4976 | False | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 4976 | True]
; [eval] p2_4 && (!break2_0 && !except2_0)
(push) ; 38
; [then-branch: 4977 | !(p2_4@476@01) | live]
; [else-branch: 4977 | p2_4@476@01 | live]
(push) ; 39
; [then-branch: 4977 | !(p2_4@476@01)]
(assert (not p2_4@476@01))
(pop) ; 39
(push) ; 39
; [else-branch: 4977 | p2_4@476@01]
; [eval] !break2_0
(push) ; 40
; [then-branch: 4978 | False | live]
; [else-branch: 4978 | True | live]
(push) ; 41
; [then-branch: 4978 | False]
(assert false)
(pop) ; 41
(push) ; 41
; [else-branch: 4978 | True]
; [eval] !except2_0
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4979 | p2_4@476@01 | live]
; [else-branch: 4979 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 4979 | p2_4@476@01]
; [exec]
; exhale perm(MustTerminate_0(_cthread_158_0)) > none ==>
;   acc(MustTerminate_0(_cthread_158_0), perm(MustTerminate_0(_cthread_158_0)) -
;   _loop_original_must_terminate_0_0)
; [eval] perm(MustTerminate_0(_cthread_158_0)) > none
; [eval] perm(MustTerminate_0(_cthread_158_0))
; [then-branch: 4980 | False | dead]
; [else-branch: 4980 | True | live]
(push) ; 39
; [else-branch: 4980 | True]
; [exec]
; _err_1 := null
; [eval] p1_4 ==> true
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4981 | p1_4@475@01 | live]
; [else-branch: 4981 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4981 | p1_4@475@01]
(pop) ; 41
(pop) ; 40
; Joined path conditions
; [eval] p2_4 ==> true
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4982 | p2_4@476@01 | live]
; [else-branch: 4982 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 4982 | p2_4@476@01]
(pop) ; 41
(pop) ; 40
; Joined path conditions
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_4@475@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4983 | p1_4@475@01 | live]
; [else-branch: 4983 | !(p1_4@475@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 4983 | p1_4@475@01]
; [eval] _err == null
; [then-branch: 4984 | tmp_0@668@01 == Null | dead]
; [else-branch: 4984 | tmp_0@668@01 != Null | live]
(push) ; 41
; [else-branch: 4984 | tmp_0@668@01 != Null]
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4985 | p2_4@476@01 | live]
; [else-branch: 4985 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 4985 | p2_4@476@01]
; [eval] _err_1 == null
(push) ; 43
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4986 | True | live]
; [else-branch: 4986 | False | dead]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 4986 | True]
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@670@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@670@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(push) ; 44
(assert (__prim__int___box__%precondition $Snap.unit 9))
(pop) ; 44
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 9))
(push) ; 44
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 45
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9)))
(pop) ; 44
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9))))
(push) ; 44
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 44
(pop) ; 44
; Joined path conditions
(push) ; 44
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 44
; Joined path conditions
(push) ; 44
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 44
(pop) ; 44
; Joined path conditions
(push) ; 44
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 44
; Joined path conditions
(push) ; 44
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 44
(pop) ; 44
; Joined path conditions
(push) ; 44
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 44
; Joined path conditions
(push) ; 44
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(pop) ; 43
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _err_1 == null
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4987 | True | live]
; [else-branch: 4987 | False | dead]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 4987 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(set-option :timeout 0)
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@670@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@670@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(push) ; 44
(assert (__prim__int___box__%precondition $Snap.unit 9))
(pop) ; 44
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 9))
(push) ; 44
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 45
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9)))
(pop) ; 44
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9))))
(push) ; 44
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 44
(pop) ; 44
; Joined path conditions
(push) ; 44
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 44
; Joined path conditions
(push) ; 44
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 44
(pop) ; 44
; Joined path conditions
(push) ; 44
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 44
; Joined path conditions
(push) ; 44
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 44
(pop) ; 44
; Joined path conditions
(push) ; 44
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 44
; Joined path conditions
(push) ; 44
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(pop) ; 43
(pop) ; 42
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_4@476@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4988 | p2_4@476@01 | live]
; [else-branch: 4988 | !(p2_4@476@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 4988 | p2_4@476@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _err_1 == null
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4989 | True | live]
; [else-branch: 4989 | False | dead]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 4989 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(set-option :timeout 0)
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@670@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@670@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(push) ; 44
(assert (__prim__int___box__%precondition $Snap.unit 9))
(pop) ; 44
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 9))
(push) ; 44
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 45
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9)))
(pop) ; 44
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9))))
(push) ; 44
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 44
(pop) ; 44
; Joined path conditions
(push) ; 44
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 44
; Joined path conditions
(push) ; 44
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 44
(pop) ; 44
; Joined path conditions
(push) ; 44
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 44
; Joined path conditions
(push) ; 44
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 44
(pop) ; 44
; Joined path conditions
(push) ; 44
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 44
; Joined path conditions
(push) ; 44
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(pop) ; 43
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _err_1 == null
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4990 | True | live]
; [else-branch: 4990 | False | dead]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 4990 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] issubtype(typeof(c_0_0.Container_valuep), int())
; [eval] typeof(c_0_0.Container_valuep)
; [eval] int()
(set-option :timeout 0)
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@670@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@670@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(push) ; 44
(assert (__prim__int___box__%precondition $Snap.unit 9))
(pop) ; 44
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 9))
(push) ; 44
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 45
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9)))
(pop) ; 44
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9))))
(push) ; 44
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 44
(pop) ; 44
; Joined path conditions
(push) ; 44
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 44
; Joined path conditions
(push) ; 44
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 44
(pop) ; 44
; Joined path conditions
(push) ; 44
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 44
; Joined path conditions
(push) ; 44
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_0_0.Container_valuep, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 44
(pop) ; 44
; Joined path conditions
(push) ; 44
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 44
; Joined path conditions
(push) ; 44
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@670@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(pop) ; 43
(pop) ; 42
(pop) ; 41
(pop) ; 40
(pop) ; 39
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- break_out_exception_3 ----------
(declare-const p1_9@673@01 Bool)
(declare-const p2_9@674@01 Bool)
(declare-const _cthread_159@675@01 $Ref)
(declare-const _cthread_159_0@676@01 $Ref)
(declare-const _caller_measures_159@677@01 Seq<Measure$>)
(declare-const _caller_measures_159_0@678@01 Seq<Measure$>)
(declare-const _residue_159@679@01 $Perm)
(declare-const _residue_159_0@680@01 $Perm)
(declare-const c_1@681@01 $Ref)
(declare-const c_1_0@682@01 $Ref)
(declare-const b_1@683@01 $Ref)
(declare-const b_1_0@684@01 $Ref)
(declare-const _current_wait_level_159@685@01 $Perm)
(declare-const _current_wait_level_159_0@686@01 $Perm)
(declare-const _err@687@01 $Ref)
(declare-const _err_2@688@01 $Ref)
(declare-const p1_9@689@01 Bool)
(declare-const p2_9@690@01 Bool)
(declare-const _cthread_159@691@01 $Ref)
(declare-const _cthread_159_0@692@01 $Ref)
(declare-const _caller_measures_159@693@01 Seq<Measure$>)
(declare-const _caller_measures_159_0@694@01 Seq<Measure$>)
(declare-const _residue_159@695@01 $Perm)
(declare-const _residue_159_0@696@01 $Perm)
(declare-const c_1@697@01 $Ref)
(declare-const c_1_0@698@01 $Ref)
(declare-const b_1@699@01 $Ref)
(declare-const b_1_0@700@01 $Ref)
(declare-const _current_wait_level_159@701@01 $Perm)
(declare-const _current_wait_level_159_0@702@01 $Perm)
(declare-const _err@703@01 $Ref)
(declare-const _err_2@704@01 $Ref)
(push) ; 1
(declare-const $t@705@01 $Snap)
(assert (= $t@705@01 ($Snap.combine ($Snap.first $t@705@01) ($Snap.second $t@705@01))))
(assert (= ($Snap.first $t@705@01) $Snap.unit))
; [eval] p1_9 ==> _cthread_159 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_9@689@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4991 | p1_9@689@01 | live]
; [else-branch: 4991 | !(p1_9@689@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4991 | p1_9@689@01]
(assert p1_9@689@01)
; [eval] _cthread_159 != null
(pop) ; 3
(push) ; 3
; [else-branch: 4991 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_9@689@01) p1_9@689@01))
(assert (=> p1_9@689@01 (not (= _cthread_159@691@01 $Ref.null))))
(assert (=
  ($Snap.second $t@705@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@705@01))
    ($Snap.second ($Snap.second $t@705@01)))))
(assert (= ($Snap.first ($Snap.second $t@705@01)) $Snap.unit))
; [eval] p2_9 ==> _cthread_159_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_9@690@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4992 | p2_9@690@01 | live]
; [else-branch: 4992 | !(p2_9@690@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4992 | p2_9@690@01]
(assert p2_9@690@01)
; [eval] _cthread_159_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 4992 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_9@690@01) p2_9@690@01))
(assert (=> p2_9@690@01 (not (= _cthread_159_0@692@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@705@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@705@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@705@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@705@01))) $Snap.unit))
; [eval] p1_9 ==> issubtype(typeof(_cthread_159), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_9@689@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4993 | p1_9@689@01 | live]
; [else-branch: 4993 | !(p1_9@689@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4993 | p1_9@689@01]
(assert p1_9@689@01)
; [eval] issubtype(typeof(_cthread_159), Thread_0())
; [eval] typeof(_cthread_159)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 4993 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_9@689@01
  (issubtype<Bool> (typeof<PyType> _cthread_159@691@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@705@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@705@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@705@01))))
  $Snap.unit))
; [eval] p2_9 ==> issubtype(typeof(_cthread_159_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_9@690@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4994 | p2_9@690@01 | live]
; [else-branch: 4994 | !(p2_9@690@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4994 | p2_9@690@01]
(assert p2_9@690@01)
; [eval] issubtype(typeof(_cthread_159_0), Thread_0())
; [eval] typeof(_cthread_159_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 4994 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_9@690@01
  (issubtype<Bool> (typeof<PyType> _cthread_159_0@692@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))
  $Snap.unit))
; [eval] p1_9 ==> issubtype(typeof(c_1), Container())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_9@689@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4995 | p1_9@689@01 | live]
; [else-branch: 4995 | !(p1_9@689@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4995 | p1_9@689@01]
(assert p1_9@689@01)
; [eval] issubtype(typeof(c_1), Container())
; [eval] typeof(c_1)
; [eval] Container()
(pop) ; 3
(push) ; 3
; [else-branch: 4995 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_9@689@01
  (issubtype<Bool> (typeof<PyType> c_1@697@01) (as Container<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01))))))
  $Snap.unit))
; [eval] p2_9 ==> issubtype(typeof(c_1_0), Container())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_9@690@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4996 | p2_9@690@01 | live]
; [else-branch: 4996 | !(p2_9@690@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4996 | p2_9@690@01]
(assert p2_9@690@01)
; [eval] issubtype(typeof(c_1_0), Container())
; [eval] typeof(c_1_0)
; [eval] Container()
(pop) ; 3
(push) ; 3
; [else-branch: 4996 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_9@690@01
  (issubtype<Bool> (typeof<PyType> c_1_0@698@01) (as Container<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))))
  $Snap.unit))
; [eval] p1_9 ==> issubtype(typeof(b_1), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_9@689@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4997 | p1_9@689@01 | live]
; [else-branch: 4997 | !(p1_9@689@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4997 | p1_9@689@01]
(assert p1_9@689@01)
; [eval] issubtype(typeof(b_1), bool())
; [eval] typeof(b_1)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 4997 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_9@689@01
  (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01))))))))
  $Snap.unit))
; [eval] p2_9 ==> issubtype(typeof(b_1_0), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_9@690@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4998 | p2_9@690@01 | live]
; [else-branch: 4998 | !(p2_9@690@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4998 | p2_9@690@01]
(assert p2_9@690@01)
; [eval] issubtype(typeof(b_1_0), bool())
; [eval] typeof(b_1_0)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 4998 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_9@690@01
  (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01))))))))))))
(push) ; 2
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not p1_9@689@01))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4999 | p1_9@689@01 | live]
; [else-branch: 4999 | !(p1_9@689@01) | live]
(set-option :timeout 0)
(push) ; 2
; [then-branch: 4999 | p1_9@689@01]
(assert p1_9@689@01)
(assert (not (= c_1@697@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_9@690@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5000 | p2_9@690@01 | live]
; [else-branch: 5000 | !(p2_9@690@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 5000 | p2_9@690@01]
(assert p2_9@690@01)
(assert (not (= c_1_0@698@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))))))))
  $Snap.unit))
; [eval] p1_9 ==> issubtype(typeof(c_1.Container_value), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5001 | p1_9@689@01 | live]
; [else-branch: 5001 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 5001 | p1_9@689@01]
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p1_9@689@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01))))))))))))
  $Snap.unit))
; [eval] p2_9 ==> issubtype(typeof(c_1_0.Container_valuep), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5002 | p2_9@690@01 | live]
; [else-branch: 5002 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 5002 | p2_9@690@01]
; [eval] issubtype(typeof(c_1_0.Container_valuep), int())
; [eval] typeof(c_1_0.Container_valuep)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p2_9@690@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))))))))))
  $Snap.unit))
; [eval] p1_9 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5003 | p1_9@689@01 | live]
; [else-branch: 5003 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 5003 | p1_9@689@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))))))))))
  $Snap.unit))
; [eval] p2_9 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5004 | p2_9@690@01 | live]
; [else-branch: 5004 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 5004 | p2_9@690@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@706@01 $Snap)
(assert (= $t@706@01 ($Snap.combine ($Snap.first $t@706@01) ($Snap.second $t@706@01))))
(assert (= ($Snap.first $t@706@01) $Snap.unit))
; [eval] p1_9 ==> (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_159) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_159) && _residue_159 <= _current_wait_level_159)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5005 | p1_9@689@01 | live]
; [else-branch: 5005 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 5005 | p1_9@689@01]
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_159) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_159) && _residue_159 <= _current_wait_level_159)
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_159)
(push) ; 7
; [then-branch: 5006 | False | live]
; [else-branch: 5006 | True | live]
(push) ; 8
; [then-branch: 5006 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 5006 | True]
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_159)
(push) ; 9
; [then-branch: 5007 | False | live]
; [else-branch: 5007 | True | live]
(push) ; 10
; [then-branch: 5007 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 5007 | True]
; [eval] _residue_159 <= _current_wait_level_159
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p1_9@689@01 (<= _residue_159@695@01 _current_wait_level_159@701@01)))
(assert (=
  ($Snap.second $t@706@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@706@01))
    ($Snap.second ($Snap.second $t@706@01)))))
(assert (= ($Snap.first ($Snap.second $t@706@01)) $Snap.unit))
; [eval] p2_9 ==> (forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: Level(_r_11) <= _current_wait_level_159_0) && ((forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: Level(_r_11) <= _current_wait_level_159_0) && _residue_159_0 <= _current_wait_level_159_0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5008 | p2_9@690@01 | live]
; [else-branch: 5008 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 5008 | p2_9@690@01]
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: Level(_r_11) <= _current_wait_level_159_0) && ((forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: Level(_r_11) <= _current_wait_level_159_0) && _residue_159_0 <= _current_wait_level_159_0)
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: Level(_r_11) <= _current_wait_level_159_0)
(push) ; 7
; [then-branch: 5009 | False | live]
; [else-branch: 5009 | True | live]
(push) ; 8
; [then-branch: 5009 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 5009 | True]
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: Level(_r_11) <= _current_wait_level_159_0)
(push) ; 9
; [then-branch: 5010 | False | live]
; [else-branch: 5010 | True | live]
(push) ; 10
; [then-branch: 5010 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 5010 | True]
; [eval] _residue_159_0 <= _current_wait_level_159_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p2_9@690@01 (<= _residue_159_0@696@01 _current_wait_level_159_0@702@01)))
(assert (=
  ($Snap.second ($Snap.second $t@706@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@706@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5011 | p1_9@689@01 | live]
; [else-branch: 5011 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 5011 | p1_9@689@01]
; [eval] _err == null
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@703@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@703@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5012 | _err@703@01 == Null | live]
; [else-branch: 5012 | _err@703@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 5012 | _err@703@01 == Null]
(assert (= _err@703@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second $t@706@01)))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@706@01))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@706@01)))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@706@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@706@01)))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@706@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@706@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@706@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@706@01)))))
  $Snap.unit))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(8))
; [eval] __prim__int___box__(8)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@706@01))))) (__prim__int___box__ $Snap.unit 8)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@706@01))))) (__prim__int___box__ $Snap.unit 8))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@706@01))))) (__prim__int___box__ $Snap.unit 8)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@706@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5013 | p2_9@690@01 | live]
; [else-branch: 5013 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 5013 | p2_9@690@01]
; [eval] _err_2 == null
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err_2@704@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err_2@704@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5014 | _err_2@704@01 == Null | live]
; [else-branch: 5014 | _err_2@704@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 5014 | _err_2@704@01 == Null]
(assert (= _err_2@704@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_1_0.Container_valuep), int())
; [eval] typeof(c_1_0.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  $Snap.unit))
; [eval] int___eq__(c_1_0.Container_valuep, __prim__int___box__(8))
; [eval] __prim__int___box__(8)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))) (__prim__int___box__ $Snap.unit 8)))
(pop) ; 9
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))) (__prim__int___box__ $Snap.unit 8)))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))) (__prim__int___box__ $Snap.unit 8)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5015 | p1_9@689@01 | live]
; [else-branch: 5015 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5015 | p1_9@689@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 10
; [then-branch: 5016 | _err@703@01 == Null | live]
; [else-branch: 5016 | _err@703@01 != Null | live]
(push) ; 11
; [then-branch: 5016 | _err@703@01 == Null]
(pop) ; 11
(push) ; 11
; [else-branch: 5016 | _err@703@01 != Null]
(assert (not (= _err@703@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@703@01 $Ref.null)) (= _err@703@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@703@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@703@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5017 | _err@703@01 != Null && issubtype[Bool](typeof[PyType](_err@703@01), Exception[PyType]) | dead]
; [else-branch: 5017 | !(_err@703@01 != Null && issubtype[Bool](typeof[PyType](_err@703@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 5017 | !(_err@703@01 != Null && issubtype[Bool](typeof[PyType](_err@703@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err@703@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@703@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5018 | p2_9@690@01 | live]
; [else-branch: 5018 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 5018 | p2_9@690@01]
; [eval] _err_2 != null && issubtype(typeof(_err_2), Exception())
; [eval] _err_2 != null
(push) ; 12
; [then-branch: 5019 | _err_2@704@01 == Null | live]
; [else-branch: 5019 | _err_2@704@01 != Null | live]
(push) ; 13
; [then-branch: 5019 | _err_2@704@01 == Null]
(pop) ; 13
(push) ; 13
; [else-branch: 5019 | _err_2@704@01 != Null]
(assert (not (= _err_2@704@01 $Ref.null)))
; [eval] issubtype(typeof(_err_2), Exception())
; [eval] typeof(_err_2)
; [eval] Exception()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_2@704@01 $Ref.null)) (= _err_2@704@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_2@704@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5020 | _err_2@704@01 != Null && issubtype[Bool](typeof[PyType](_err_2@704@01), Exception[PyType]) | dead]
; [else-branch: 5020 | !(_err_2@704@01 != Null && issubtype[Bool](typeof[PyType](_err_2@704@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 5020 | !(_err_2@704@01 != Null && issubtype[Bool](typeof[PyType](_err_2@704@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err_2@704@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  $Snap.unit))
; [eval] p1_9 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5021 | p1_9@689@01 | live]
; [else-branch: 5021 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5021 | p1_9@689@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
; [then-branch: 5022 | _err@703@01 != Null | dead]
; [else-branch: 5022 | _err@703@01 == Null | live]
(push) ; 16
; [else-branch: 5022 | _err@703@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  $Snap.unit))
; [eval] p2_9 ==> _err_2 != null ==> issubtype(typeof(_err_2), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5023 | p2_9@690@01 | live]
; [else-branch: 5023 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5023 | p2_9@690@01]
; [eval] _err_2 != null ==> issubtype(typeof(_err_2), Exception())
; [eval] _err_2 != null
(push) ; 15
; [then-branch: 5024 | _err_2@704@01 != Null | dead]
; [else-branch: 5024 | _err_2@704@01 == Null | live]
(push) ; 16
; [else-branch: 5024 | _err_2@704@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
  $Snap.unit))
; [eval] p1_9 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5025 | p1_9@689@01 | live]
; [else-branch: 5025 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5025 | p1_9@689@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
  $Snap.unit))
; [eval] p2_9 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5026 | p2_9@690@01 | live]
; [else-branch: 5026 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5026 | p2_9@690@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 5014 | _err_2@704@01 != Null]
(assert (not (= _err_2@704@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5027 | p1_9@689@01 | live]
; [else-branch: 5027 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5027 | p1_9@689@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 10
; [then-branch: 5028 | _err@703@01 == Null | live]
; [else-branch: 5028 | _err@703@01 != Null | live]
(push) ; 11
; [then-branch: 5028 | _err@703@01 == Null]
(pop) ; 11
(push) ; 11
; [else-branch: 5028 | _err@703@01 != Null]
(assert (not (= _err@703@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@703@01 $Ref.null)) (= _err@703@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@703@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@703@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5029 | _err@703@01 != Null && issubtype[Bool](typeof[PyType](_err@703@01), Exception[PyType]) | dead]
; [else-branch: 5029 | !(_err@703@01 != Null && issubtype[Bool](typeof[PyType](_err@703@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 5029 | !(_err@703@01 != Null && issubtype[Bool](typeof[PyType](_err@703@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err@703@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@703@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5030 | p2_9@690@01 | live]
; [else-branch: 5030 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 5030 | p2_9@690@01]
; [eval] _err_2 != null && issubtype(typeof(_err_2), Exception())
; [eval] _err_2 != null
(push) ; 12
; [then-branch: 5031 | _err_2@704@01 == Null | live]
; [else-branch: 5031 | _err_2@704@01 != Null | live]
(push) ; 13
; [then-branch: 5031 | _err_2@704@01 == Null]
(assert (= _err_2@704@01 $Ref.null))
(pop) ; 13
(push) ; 13
; [else-branch: 5031 | _err_2@704@01 != Null]
; [eval] issubtype(typeof(_err_2), Exception())
; [eval] typeof(_err_2)
; [eval] Exception()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_2@704@01 $Ref.null)) (= _err_2@704@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_2@704@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  (not (= _err_2@704@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5032 | _err_2@704@01 != Null && issubtype[Bool](typeof[PyType](_err_2@704@01), Exception[PyType]) | live]
; [else-branch: 5032 | !(_err_2@704@01 != Null && issubtype[Bool](typeof[PyType](_err_2@704@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 5032 | _err_2@704@01 != Null && issubtype[Bool](typeof[PyType](_err_2@704@01), Exception[PyType])]
(assert (and
  (not (= _err_2@704@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_1_0.Container_valuep), int())
; [eval] typeof(c_1_0.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  $Snap.unit))
; [eval] int___eq__(c_1_0.Container_valuep, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit 9))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 9))
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))) (__prim__int___box__ $Snap.unit 9)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))) (__prim__int___box__ $Snap.unit 9))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))) (__prim__int___box__ $Snap.unit 9)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  $Snap.unit))
; [eval] p1_9 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5033 | p1_9@689@01 | live]
; [else-branch: 5033 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5033 | p1_9@689@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
; [then-branch: 5034 | _err@703@01 != Null | dead]
; [else-branch: 5034 | _err@703@01 == Null | live]
(push) ; 16
; [else-branch: 5034 | _err@703@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  $Snap.unit))
; [eval] p2_9 ==> _err_2 != null ==> issubtype(typeof(_err_2), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5035 | p2_9@690@01 | live]
; [else-branch: 5035 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5035 | p2_9@690@01]
; [eval] _err_2 != null ==> issubtype(typeof(_err_2), Exception())
; [eval] _err_2 != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err_2@704@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5036 | _err_2@704@01 != Null | live]
; [else-branch: 5036 | _err_2@704@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 5036 | _err_2@704@01 != Null]
; [eval] issubtype(typeof(_err_2), Exception())
; [eval] typeof(_err_2)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p2_9@690@01 (not (= _err_2@704@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
  $Snap.unit))
; [eval] p1_9 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5037 | p1_9@689@01 | live]
; [else-branch: 5037 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5037 | p1_9@689@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
  $Snap.unit))
; [eval] p2_9 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5038 | p2_9@690@01 | live]
; [else-branch: 5038 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5038 | p2_9@690@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 5032 | !(_err_2@704@01 != Null && issubtype[Bool](typeof[PyType](_err_2@704@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err_2@704@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  $Snap.unit))
; [eval] p1_9 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5039 | p1_9@689@01 | live]
; [else-branch: 5039 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5039 | p1_9@689@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
; [then-branch: 5040 | _err@703@01 != Null | dead]
; [else-branch: 5040 | _err@703@01 == Null | live]
(push) ; 16
; [else-branch: 5040 | _err@703@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  $Snap.unit))
; [eval] p2_9 ==> _err_2 != null ==> issubtype(typeof(_err_2), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5041 | p2_9@690@01 | live]
; [else-branch: 5041 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5041 | p2_9@690@01]
; [eval] _err_2 != null ==> issubtype(typeof(_err_2), Exception())
; [eval] _err_2 != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err_2@704@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err_2@704@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5042 | _err_2@704@01 != Null | live]
; [else-branch: 5042 | _err_2@704@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 5042 | _err_2@704@01 != Null]
(assert (not (= _err_2@704@01 $Ref.null)))
; [eval] issubtype(typeof(_err_2), Exception())
; [eval] typeof(_err_2)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err_2@704@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p2_9@690@01 (not (= _err_2@704@01 $Ref.null))))
(assert (=>
  (and p2_9@690@01 (not (= _err_2@704@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
  $Snap.unit))
; [eval] p1_9 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5043 | p1_9@689@01 | dead]
; [else-branch: 5043 | !(p1_9@689@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 5043 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1_9@689@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
  $Snap.unit))
; [eval] p2_9 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5044 | p2_9@690@01 | dead]
; [else-branch: 5044 | !(p2_9@690@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 5044 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2_9@690@01))
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 5012 | _err@703@01 != Null]
(assert (not (= _err@703@01 $Ref.null)))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@706@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@706@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5045 | p2_9@690@01 | live]
; [else-branch: 5045 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 5045 | p2_9@690@01]
; [eval] _err_2 == null
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err_2@704@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err_2@704@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5046 | _err_2@704@01 == Null | live]
; [else-branch: 5046 | _err_2@704@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 5046 | _err_2@704@01 == Null]
(assert (= _err_2@704@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_1_0.Container_valuep), int())
; [eval] typeof(c_1_0.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  $Snap.unit))
; [eval] int___eq__(c_1_0.Container_valuep, __prim__int___box__(8))
; [eval] __prim__int___box__(8)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))) (__prim__int___box__ $Snap.unit 8)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))) (__prim__int___box__ $Snap.unit 8))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))) (__prim__int___box__ $Snap.unit 8)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5047 | p1_9@689@01 | live]
; [else-branch: 5047 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5047 | p1_9@689@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 10
; [then-branch: 5048 | _err@703@01 == Null | live]
; [else-branch: 5048 | _err@703@01 != Null | live]
(push) ; 11
; [then-branch: 5048 | _err@703@01 == Null]
(assert (= _err@703@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 5048 | _err@703@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@703@01 $Ref.null)) (= _err@703@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@703@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@703@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (not (= _err@703@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@703@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5049 | _err@703@01 != Null && issubtype[Bool](typeof[PyType](_err@703@01), Exception[PyType]) | live]
; [else-branch: 5049 | !(_err@703@01 != Null && issubtype[Bool](typeof[PyType](_err@703@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 5049 | _err@703@01 != Null && issubtype[Bool](typeof[PyType](_err@703@01), Exception[PyType])]
(assert (and
  (not (= _err@703@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@703@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  $Snap.unit))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 9))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 9))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))) (__prim__int___box__ $Snap.unit 9)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))) (__prim__int___box__ $Snap.unit 9))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))) (__prim__int___box__ $Snap.unit 9)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5050 | p2_9@690@01 | live]
; [else-branch: 5050 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 5050 | p2_9@690@01]
; [eval] _err_2 != null && issubtype(typeof(_err_2), Exception())
; [eval] _err_2 != null
(push) ; 12
; [then-branch: 5051 | _err_2@704@01 == Null | live]
; [else-branch: 5051 | _err_2@704@01 != Null | live]
(push) ; 13
; [then-branch: 5051 | _err_2@704@01 == Null]
(pop) ; 13
(push) ; 13
; [else-branch: 5051 | _err_2@704@01 != Null]
(assert (not (= _err_2@704@01 $Ref.null)))
; [eval] issubtype(typeof(_err_2), Exception())
; [eval] typeof(_err_2)
; [eval] Exception()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_2@704@01 $Ref.null)) (= _err_2@704@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_2@704@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5052 | _err_2@704@01 != Null && issubtype[Bool](typeof[PyType](_err_2@704@01), Exception[PyType]) | dead]
; [else-branch: 5052 | !(_err_2@704@01 != Null && issubtype[Bool](typeof[PyType](_err_2@704@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 5052 | !(_err_2@704@01 != Null && issubtype[Bool](typeof[PyType](_err_2@704@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err_2@704@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  $Snap.unit))
; [eval] p1_9 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5053 | p1_9@689@01 | live]
; [else-branch: 5053 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5053 | p1_9@689@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@703@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5054 | _err@703@01 != Null | live]
; [else-branch: 5054 | _err@703@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 5054 | _err@703@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p1_9@689@01 (not (= _err@703@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@703@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  $Snap.unit))
; [eval] p2_9 ==> _err_2 != null ==> issubtype(typeof(_err_2), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5055 | p2_9@690@01 | live]
; [else-branch: 5055 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5055 | p2_9@690@01]
; [eval] _err_2 != null ==> issubtype(typeof(_err_2), Exception())
; [eval] _err_2 != null
(push) ; 15
; [then-branch: 5056 | _err_2@704@01 != Null | dead]
; [else-branch: 5056 | _err_2@704@01 == Null | live]
(push) ; 16
; [else-branch: 5056 | _err_2@704@01 == Null]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
  $Snap.unit))
; [eval] p1_9 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5057 | p1_9@689@01 | live]
; [else-branch: 5057 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5057 | p1_9@689@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
  $Snap.unit))
; [eval] p2_9 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5058 | p2_9@690@01 | live]
; [else-branch: 5058 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5058 | p2_9@690@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 5049 | !(_err@703@01 != Null && issubtype[Bool](typeof[PyType](_err@703@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err@703@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@703@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5059 | p2_9@690@01 | live]
; [else-branch: 5059 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 5059 | p2_9@690@01]
; [eval] _err_2 != null && issubtype(typeof(_err_2), Exception())
; [eval] _err_2 != null
(push) ; 12
; [then-branch: 5060 | _err_2@704@01 == Null | live]
; [else-branch: 5060 | _err_2@704@01 != Null | live]
(push) ; 13
; [then-branch: 5060 | _err_2@704@01 == Null]
(pop) ; 13
(push) ; 13
; [else-branch: 5060 | _err_2@704@01 != Null]
(assert (not (= _err_2@704@01 $Ref.null)))
; [eval] issubtype(typeof(_err_2), Exception())
; [eval] typeof(_err_2)
; [eval] Exception()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_2@704@01 $Ref.null)) (= _err_2@704@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_2@704@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5061 | _err_2@704@01 != Null && issubtype[Bool](typeof[PyType](_err_2@704@01), Exception[PyType]) | dead]
; [else-branch: 5061 | !(_err_2@704@01 != Null && issubtype[Bool](typeof[PyType](_err_2@704@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 5061 | !(_err_2@704@01 != Null && issubtype[Bool](typeof[PyType](_err_2@704@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err_2@704@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  $Snap.unit))
; [eval] p1_9 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5062 | p1_9@689@01 | live]
; [else-branch: 5062 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5062 | p1_9@689@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@703@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err@703@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5063 | _err@703@01 != Null | live]
; [else-branch: 5063 | _err@703@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 5063 | _err@703@01 != Null]
(assert (not (= _err@703@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err@703@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p1_9@689@01 (not (= _err@703@01 $Ref.null))))
(assert (=>
  (and p1_9@689@01 (not (= _err@703@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@703@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  $Snap.unit))
; [eval] p2_9 ==> _err_2 != null ==> issubtype(typeof(_err_2), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5064 | p2_9@690@01 | dead]
; [else-branch: 5064 | !(p2_9@690@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 5064 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2_9@690@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
  $Snap.unit))
; [eval] p1_9 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5065 | p1_9@689@01 | dead]
; [else-branch: 5065 | !(p1_9@689@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 5065 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1_9@689@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
  $Snap.unit))
; [eval] p2_9 ==> true
(push) ; 13
; [then-branch: 5066 | p2_9@690@01 | dead]
; [else-branch: 5066 | !(p2_9@690@01) | live]
(push) ; 14
; [else-branch: 5066 | !(p2_9@690@01)]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 5046 | _err_2@704@01 != Null]
(assert (not (= _err_2@704@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@706@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5067 | p1_9@689@01 | live]
; [else-branch: 5067 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 5067 | p1_9@689@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 10
; [then-branch: 5068 | _err@703@01 == Null | live]
; [else-branch: 5068 | _err@703@01 != Null | live]
(push) ; 11
; [then-branch: 5068 | _err@703@01 == Null]
(assert (= _err@703@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 5068 | _err@703@01 != Null]
(assert (not (= _err@703@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@703@01 $Ref.null)) (= _err@703@01 $Ref.null)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@703@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@703@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (not (= _err@703@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@703@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5069 | _err@703@01 != Null && issubtype[Bool](typeof[PyType](_err@703@01), Exception[PyType]) | live]
; [else-branch: 5069 | !(_err@703@01 != Null && issubtype[Bool](typeof[PyType](_err@703@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 5069 | _err@703@01 != Null && issubtype[Bool](typeof[PyType](_err@703@01), Exception[PyType])]
(assert (and
  (not (= _err@703@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@703@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  $Snap.unit))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 9))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 9))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))) (__prim__int___box__ $Snap.unit 9)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))) (__prim__int___box__ $Snap.unit 9))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))) (__prim__int___box__ $Snap.unit 9)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5070 | p2_9@690@01 | live]
; [else-branch: 5070 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 5070 | p2_9@690@01]
; [eval] _err_2 != null && issubtype(typeof(_err_2), Exception())
; [eval] _err_2 != null
(push) ; 12
; [then-branch: 5071 | _err_2@704@01 == Null | live]
; [else-branch: 5071 | _err_2@704@01 != Null | live]
(push) ; 13
; [then-branch: 5071 | _err_2@704@01 == Null]
(assert (= _err_2@704@01 $Ref.null))
(pop) ; 13
(push) ; 13
; [else-branch: 5071 | _err_2@704@01 != Null]
; [eval] issubtype(typeof(_err_2), Exception())
; [eval] typeof(_err_2)
; [eval] Exception()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_2@704@01 $Ref.null)) (= _err_2@704@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_2@704@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  (not (= _err_2@704@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5072 | _err_2@704@01 != Null && issubtype[Bool](typeof[PyType](_err_2@704@01), Exception[PyType]) | live]
; [else-branch: 5072 | !(_err_2@704@01 != Null && issubtype[Bool](typeof[PyType](_err_2@704@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 5072 | _err_2@704@01 != Null && issubtype[Bool](typeof[PyType](_err_2@704@01), Exception[PyType])]
(assert (and
  (not (= _err_2@704@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_1_0.Container_valuep), int())
; [eval] typeof(c_1_0.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  $Snap.unit))
; [eval] int___eq__(c_1_0.Container_valuep, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))) (__prim__int___box__ $Snap.unit 9)))
(pop) ; 13
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))) (__prim__int___box__ $Snap.unit 9)))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))) (__prim__int___box__ $Snap.unit 9)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  $Snap.unit))
; [eval] p1_9 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5073 | p1_9@689@01 | live]
; [else-branch: 5073 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5073 | p1_9@689@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@703@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5074 | _err@703@01 != Null | live]
; [else-branch: 5074 | _err@703@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 5074 | _err@703@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p1_9@689@01 (not (= _err@703@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@703@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  $Snap.unit))
; [eval] p2_9 ==> _err_2 != null ==> issubtype(typeof(_err_2), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5075 | p2_9@690@01 | live]
; [else-branch: 5075 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5075 | p2_9@690@01]
; [eval] _err_2 != null ==> issubtype(typeof(_err_2), Exception())
; [eval] _err_2 != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err_2@704@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5076 | _err_2@704@01 != Null | live]
; [else-branch: 5076 | _err_2@704@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 5076 | _err_2@704@01 != Null]
; [eval] issubtype(typeof(_err_2), Exception())
; [eval] typeof(_err_2)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p2_9@690@01 (not (= _err_2@704@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
  $Snap.unit))
; [eval] p1_9 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5077 | p1_9@689@01 | live]
; [else-branch: 5077 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5077 | p1_9@689@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
  $Snap.unit))
; [eval] p2_9 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5078 | p2_9@690@01 | live]
; [else-branch: 5078 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5078 | p2_9@690@01]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 5072 | !(_err_2@704@01 != Null && issubtype[Bool](typeof[PyType](_err_2@704@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err_2@704@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  $Snap.unit))
; [eval] p1_9 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5079 | p1_9@689@01 | live]
; [else-branch: 5079 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5079 | p1_9@689@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@703@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5080 | _err@703@01 != Null | live]
; [else-branch: 5080 | _err@703@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 5080 | _err@703@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p1_9@689@01 (not (= _err@703@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@703@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  $Snap.unit))
; [eval] p2_9 ==> _err_2 != null ==> issubtype(typeof(_err_2), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5081 | p2_9@690@01 | live]
; [else-branch: 5081 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5081 | p2_9@690@01]
; [eval] _err_2 != null ==> issubtype(typeof(_err_2), Exception())
; [eval] _err_2 != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err_2@704@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err_2@704@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5082 | _err_2@704@01 != Null | live]
; [else-branch: 5082 | _err_2@704@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 5082 | _err_2@704@01 != Null]
(assert (not (= _err_2@704@01 $Ref.null)))
; [eval] issubtype(typeof(_err_2), Exception())
; [eval] typeof(_err_2)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err_2@704@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p2_9@690@01 (not (= _err_2@704@01 $Ref.null))))
(assert (=>
  (and p2_9@690@01 (not (= _err_2@704@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
  $Snap.unit))
; [eval] p1_9 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5083 | p1_9@689@01 | dead]
; [else-branch: 5083 | !(p1_9@689@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 5083 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1_9@689@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
  $Snap.unit))
; [eval] p2_9 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5084 | p2_9@690@01 | dead]
; [else-branch: 5084 | !(p2_9@690@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 5084 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2_9@690@01))
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 5069 | !(_err@703@01 != Null && issubtype[Bool](typeof[PyType](_err@703@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err@703@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@703@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5085 | p2_9@690@01 | live]
; [else-branch: 5085 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 5085 | p2_9@690@01]
; [eval] _err_2 != null && issubtype(typeof(_err_2), Exception())
; [eval] _err_2 != null
(push) ; 12
; [then-branch: 5086 | _err_2@704@01 == Null | live]
; [else-branch: 5086 | _err_2@704@01 != Null | live]
(push) ; 13
; [then-branch: 5086 | _err_2@704@01 == Null]
(assert (= _err_2@704@01 $Ref.null))
(pop) ; 13
(push) ; 13
; [else-branch: 5086 | _err_2@704@01 != Null]
(assert (not (= _err_2@704@01 $Ref.null)))
; [eval] issubtype(typeof(_err_2), Exception())
; [eval] typeof(_err_2)
; [eval] Exception()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err_2@704@01 $Ref.null)) (= _err_2@704@01 $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err_2@704@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  (not (= _err_2@704@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5087 | _err_2@704@01 != Null && issubtype[Bool](typeof[PyType](_err_2@704@01), Exception[PyType]) | live]
; [else-branch: 5087 | !(_err_2@704@01 != Null && issubtype[Bool](typeof[PyType](_err_2@704@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 5087 | _err_2@704@01 != Null && issubtype[Bool](typeof[PyType](_err_2@704@01), Exception[PyType])]
(assert (and
  (not (= _err_2@704@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_1_0.Container_valuep), int())
; [eval] typeof(c_1_0.Container_valuep)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  $Snap.unit))
; [eval] int___eq__(c_1_0.Container_valuep, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit 9))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 9))
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))) (__prim__int___box__ $Snap.unit 9)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))) (__prim__int___box__ $Snap.unit 9))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))) (__prim__int___box__ $Snap.unit 9)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  $Snap.unit))
; [eval] p1_9 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5088 | p1_9@689@01 | live]
; [else-branch: 5088 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5088 | p1_9@689@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@703@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err@703@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5089 | _err@703@01 != Null | live]
; [else-branch: 5089 | _err@703@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 5089 | _err@703@01 != Null]
(assert (not (= _err@703@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err@703@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p1_9@689@01 (not (= _err@703@01 $Ref.null))))
(assert (=>
  (and p1_9@689@01 (not (= _err@703@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@703@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  $Snap.unit))
; [eval] p2_9 ==> _err_2 != null ==> issubtype(typeof(_err_2), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5090 | p2_9@690@01 | dead]
; [else-branch: 5090 | !(p2_9@690@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 5090 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2_9@690@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
  $Snap.unit))
; [eval] p1_9 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5091 | p1_9@689@01 | dead]
; [else-branch: 5091 | !(p1_9@689@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 5091 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1_9@689@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
  $Snap.unit))
; [eval] p2_9 ==> true
(push) ; 13
; [then-branch: 5092 | p2_9@690@01 | dead]
; [else-branch: 5092 | !(p2_9@690@01) | live]
(push) ; 14
; [else-branch: 5092 | !(p2_9@690@01)]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 5087 | !(_err_2@704@01 != Null && issubtype[Bool](typeof[PyType](_err_2@704@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err_2@704@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err_2@704@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  $Snap.unit))
; [eval] p1_9 ==> _err != null ==> issubtype(typeof(_err), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5093 | p1_9@689@01 | live]
; [else-branch: 5093 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5093 | p1_9@689@01]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= _err@703@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= _err@703@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5094 | _err@703@01 != Null | live]
; [else-branch: 5094 | _err@703@01 == Null | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 5094 | _err@703@01 != Null]
(assert (not (= _err@703@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not (= _err@703@01 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=> p1_9@689@01 (not (= _err@703@01 $Ref.null))))
(assert (=>
  (and p1_9@689@01 (not (= _err@703@01 $Ref.null)))
  (issubtype<Bool> (typeof<PyType> _err@703@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  $Snap.unit))
; [eval] p2_9 ==> _err_2 != null ==> issubtype(typeof(_err_2), Exception())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5095 | p2_9@690@01 | dead]
; [else-branch: 5095 | !(p2_9@690@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 5095 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p2_9@690@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
  $Snap.unit))
; [eval] p1_9 ==> true
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5096 | p1_9@689@01 | dead]
; [else-branch: 5096 | !(p1_9@689@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 5096 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not p1_9@689@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@706@01)))))))))
  $Snap.unit))
; [eval] p2_9 ==> true
(push) ; 13
; [then-branch: 5097 | p2_9@690@01 | dead]
; [else-branch: 5097 | !(p2_9@690@01) | live]
(push) ; 14
; [else-branch: 5097 | !(p2_9@690@01)]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var break1_1: Bool
(declare-const break1_1@707@01 Bool)
; [exec]
; var break2_1: Bool
(declare-const break2_1@708@01 Bool)
; [exec]
; var except1_1: Bool
(declare-const except1_1@709@01 Bool)
; [exec]
; var except2_1: Bool
(declare-const except2_1@710@01 Bool)
; [exec]
; var c_6: Ref
(declare-const c_6@711@01 $Ref)
; [exec]
; var c_6_0: Ref
(declare-const c_6_0@712@01 $Ref)
; [exec]
; var b_6: Ref
(declare-const b_6@713@01 $Ref)
; [exec]
; var b_6_0: Ref
(declare-const b_6_0@714@01 $Ref)
; [exec]
; var _loop_measures_1: Seq[Measure$]
(declare-const _loop_measures_1@715@01 Seq<Measure$>)
; [exec]
; var _loop_measures_1_0: Seq[Measure$]
(declare-const _loop_measures_1_0@716@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_1: Bool
(declare-const _loop_check_before_1@717@01 Bool)
; [exec]
; var _loop_check_before_1_0: Bool
(declare-const _loop_check_before_1_0@718@01 Bool)
; [exec]
; var _loop_termination_flag_1: Bool
(declare-const _loop_termination_flag_1@719@01 Bool)
; [exec]
; var _loop_termination_flag_1_0: Bool
(declare-const _loop_termination_flag_1_0@720@01 Bool)
; [exec]
; var _loop_original_must_terminate_1: Perm
(declare-const _loop_original_must_terminate_1@721@01 $Perm)
; [exec]
; var _loop_original_must_terminate_1_0: Perm
(declare-const _loop_original_must_terminate_1_0@722@01 $Perm)
; [exec]
; var _residue_164: Perm
(declare-const _residue_164@723@01 $Perm)
; [exec]
; var _residue_164_0: Perm
(declare-const _residue_164_0@724@01 $Perm)
; [exec]
; var Exception_res_1: Ref
(declare-const Exception_res_1@725@01 $Ref)
; [exec]
; var Exception_res_1_0: Ref
(declare-const Exception_res_1_0@726@01 $Ref)
; [exec]
; var _cwl_159: Perm
(declare-const _cwl_159@727@01 $Perm)
; [exec]
; var _cwl_159_0: Perm
(declare-const _cwl_159_0@728@01 $Perm)
; [exec]
; var _method_measures_159: Seq[Measure$]
(declare-const _method_measures_159@729@01 Seq<Measure$>)
; [exec]
; var _method_measures_159_0: Seq[Measure$]
(declare-const _method_measures_159_0@730@01 Seq<Measure$>)
; [exec]
; var bypass1_1: Bool
(declare-const bypass1_1@731@01 Bool)
; [exec]
; var bypass2_1: Bool
(declare-const bypass2_1@732@01 Bool)
; [exec]
; var tmp1_11: Seq[Measure$]
(declare-const tmp1_11@733@01 Seq<Measure$>)
; [exec]
; var tmp2_11: Seq[Measure$]
(declare-const tmp2_11@734@01 Seq<Measure$>)
; [exec]
; var tmp1_12: Ref
(declare-const tmp1_12@735@01 $Ref)
; [exec]
; var tmp2_12: Ref
(declare-const tmp2_12@736@01 $Ref)
; [exec]
; var tmp1_13: Bool
(declare-const tmp1_13@737@01 Bool)
; [exec]
; var tmp2_13: Bool
(declare-const tmp2_13@738@01 Bool)
; [exec]
; var tmp1_14: Ref
(declare-const tmp1_14@739@01 $Ref)
; [exec]
; var tmp2_14: Ref
(declare-const tmp2_14@740@01 $Ref)
; [exec]
; var tmp1_15: Bool
(declare-const tmp1_15@741@01 Bool)
; [exec]
; var tmp2_15: Bool
(declare-const tmp2_15@742@01 Bool)
; [exec]
; var tmp1_16: Bool
(declare-const tmp1_16@743@01 Bool)
; [exec]
; var tmp2_16: Bool
(declare-const tmp2_16@744@01 Bool)
; [exec]
; var oldbreak1_1: Bool
(declare-const oldbreak1_1@745@01 Bool)
; [exec]
; var oldbreak2_1: Bool
(declare-const oldbreak2_1@746@01 Bool)
; [exec]
; var oldexcept1_1: Bool
(declare-const oldexcept1_1@747@01 Bool)
; [exec]
; var oldexcept2_1: Bool
(declare-const oldexcept2_1@748@01 Bool)
; [exec]
; var p1_10: Bool
(declare-const p1_10@749@01 Bool)
; [exec]
; var p2_10: Bool
(declare-const p2_10@750@01 Bool)
; [exec]
; var idle1_1: Bool
(declare-const idle1_1@751@01 Bool)
; [exec]
; var idle2_1: Bool
(declare-const idle2_1@752@01 Bool)
; [exec]
; inhale p1_9
(declare-const $t@753@01 $Snap)
(assert (= $t@753@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; break1_1 := false
; [exec]
; break2_1 := false
; [exec]
; except1_1 := false
; [exec]
; except2_1 := false
; [eval] p1_9 && (!break1_1 && !except1_1)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 5098 | !(p1_9@689@01) | live]
; [else-branch: 5098 | p1_9@689@01 | live]
(push) ; 6
; [then-branch: 5098 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 6
(push) ; 6
; [else-branch: 5098 | p1_9@689@01]
; [eval] !break1_1
(push) ; 7
; [then-branch: 5099 | False | live]
; [else-branch: 5099 | True | live]
(push) ; 8
; [then-branch: 5099 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 5099 | True]
; [eval] !except1_1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_9@689@01 (not p1_9@689@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5100 | p1_9@689@01 | live]
; [else-branch: 5100 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 5100 | p1_9@689@01]
; [exec]
; _method_measures_159 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; c_6 := c_1
; [exec]
; b_6 := b_1
; [exec]
; _loop_original_must_terminate_1 := perm(MustTerminate(_cthread_159))
; [eval] perm(MustTerminate(_cthread_159))
(declare-const _loop_original_must_terminate_1@754@01 $Perm)
(assert (= _loop_original_must_terminate_1@754@01 $Perm.No))
; [exec]
; _loop_termination_flag_1 := false
; [exec]
; _loop_check_before_1 := true
; [eval] p2_9 && (!break2_1 && !except2_1)
(push) ; 6
; [then-branch: 5101 | !(p2_9@690@01) | live]
; [else-branch: 5101 | p2_9@690@01 | live]
(push) ; 7
; [then-branch: 5101 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 7
(push) ; 7
; [else-branch: 5101 | p2_9@690@01]
; [eval] !break2_1
(push) ; 8
; [then-branch: 5102 | False | live]
; [else-branch: 5102 | True | live]
(push) ; 9
; [then-branch: 5102 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 5102 | True]
; [eval] !except2_1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_9@690@01 (not p2_9@690@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5103 | p2_9@690@01 | live]
; [else-branch: 5103 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 5103 | p2_9@690@01]
; [exec]
; _method_measures_159_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err_2 := null
; [exec]
; c_6_0 := c_1_0
; [exec]
; b_6_0 := b_1_0
; [exec]
; _loop_original_must_terminate_1_0 := perm(MustTerminate_0(_cthread_159_0))
; [eval] perm(MustTerminate_0(_cthread_159_0))
(declare-const _loop_original_must_terminate_1_0@755@01 $Perm)
(assert (= _loop_original_must_terminate_1_0@755@01 $Perm.No))
; [exec]
; _loop_termination_flag_1_0 := false
; [exec]
; _loop_check_before_1_0 := true
; [exec]
; bypass1_1 := !(p1_9 && (!break1_1 && !except1_1))
; [eval] !(p1_9 && (!break1_1 && !except1_1))
; [eval] p1_9 && (!break1_1 && !except1_1)
(push) ; 7
; [then-branch: 5104 | !(p1_9@689@01) | live]
; [else-branch: 5104 | p1_9@689@01 | live]
(push) ; 8
; [then-branch: 5104 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 8
(push) ; 8
; [else-branch: 5104 | p1_9@689@01]
; [eval] !break1_1
(push) ; 9
; [then-branch: 5105 | False | live]
; [else-branch: 5105 | True | live]
(push) ; 10
; [then-branch: 5105 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 5105 | True]
; [eval] !except1_1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass1_1@756@01 Bool)
(assert (= bypass1_1@756@01 (not p1_9@689@01)))
; [exec]
; bypass2_1 := !(p2_9 && (!break2_1 && !except2_1))
; [eval] !(p2_9 && (!break2_1 && !except2_1))
; [eval] p2_9 && (!break2_1 && !except2_1)
(push) ; 7
; [then-branch: 5106 | !(p2_9@690@01) | live]
; [else-branch: 5106 | p2_9@690@01 | live]
(push) ; 8
; [then-branch: 5106 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 8
(push) ; 8
; [else-branch: 5106 | p2_9@690@01]
; [eval] !break2_1
(push) ; 9
; [then-branch: 5107 | False | live]
; [else-branch: 5107 | True | live]
(push) ; 10
; [then-branch: 5107 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 5107 | True]
; [eval] !except2_1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass2_1@757@01 Bool)
(assert (= bypass2_1@757@01 (not p2_9@690@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (not bypass1_1@756@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5108 | bypass1_1@756@01 | dead]
; [else-branch: 5108 | !(bypass1_1@756@01) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 5108 | !(bypass1_1@756@01)]
(assert (not bypass1_1@756@01))
(pop) ; 7
; [eval] !bypass1_1
(push) ; 7
(set-option :timeout 10)
(assert (not bypass1_1@756@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not bypass1_1@756@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5109 | !(bypass1_1@756@01) | live]
; [else-branch: 5109 | bypass1_1@756@01 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 5109 | !(bypass1_1@756@01)]
(assert (not bypass1_1@756@01))
(push) ; 8
(set-option :timeout 10)
(assert (not (not bypass2_1@757@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5110 | bypass2_1@757@01 | dead]
; [else-branch: 5110 | !(bypass2_1@757@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 5110 | !(bypass2_1@757@01)]
(assert (not bypass2_1@757@01))
(pop) ; 8
; [eval] !bypass2_1
(push) ; 8
(set-option :timeout 10)
(assert (not bypass2_1@757@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not bypass2_1@757@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5111 | !(bypass2_1@757@01) | live]
; [else-branch: 5111 | bypass2_1@757@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 5111 | !(bypass2_1@757@01)]
(assert (not bypass2_1@757@01))
; [exec]
; oldbreak1_1 := break1_1
; [exec]
; oldbreak2_1 := break2_1
; [exec]
; oldexcept1_1 := except1_1
; [exec]
; oldexcept2_1 := except2_1
; [exec]
; idle1_1 := false
; [exec]
; idle2_1 := false
(declare-const p1_10@758@01 Bool)
(declare-const p2_10@759@01 Bool)
(declare-const idle1_1@760@01 Bool)
(declare-const idle2_1@761@01 Bool)
(declare-const _loop_measures_1@762@01 Seq<Measure$>)
(declare-const _loop_measures_1_0@763@01 Seq<Measure$>)
(declare-const p1_11@764@01 Bool)
(declare-const p2_11@765@01 Bool)
(declare-const p3_5@766@01 Bool)
(declare-const p4_5@767@01 Bool)
(declare-const p1_12@768@01 Bool)
(declare-const p2_12@769@01 Bool)
(declare-const p3_6@770@01 Bool)
(declare-const p4_6@771@01 Bool)
(declare-const tmp_1@772@01 $Ref)
(declare-const Exception_res_1@773@01 $Ref)
(declare-const Exception_res_1_0@774@01 $Ref)
(declare-const _err@775@01 $Ref)
(declare-const except1_1@776@01 Bool)
(declare-const _err_2@777@01 $Ref)
(declare-const except2_1@778@01 Bool)
(declare-const p1_13@779@01 Bool)
(declare-const p2_13@780@01 Bool)
(declare-const p3_7@781@01 Bool)
(declare-const p4_7@782@01 Bool)
(declare-const break1_1@783@01 Bool)
(declare-const break2_1@784@01 Bool)
(declare-const _loop_check_before_1@785@01 Bool)
(declare-const _loop_check_before_1_0@786@01 Bool)
(push) ; 9
; Loop head block: Check well-definedness of invariant
(declare-const $t@787@01 $Snap)
(assert (= $t@787@01 ($Snap.combine ($Snap.first $t@787@01) ($Snap.second $t@787@01))))
(assert (= ($Snap.first $t@787@01) $Snap.unit))
; [eval] p1_9 && !bypass1_1 ==> (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) <= _residue_164) && ((forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) <= _residue_164) && _residue_159 <= _residue_164)
; [eval] p1_9 && !bypass1_1
(push) ; 10
; [then-branch: 5112 | !(p1_9@689@01) | live]
; [else-branch: 5112 | p1_9@689@01 | live]
(push) ; 11
; [then-branch: 5112 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 11
(push) ; 11
; [else-branch: 5112 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5113 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5113 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 5113 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) <= _residue_164) && ((forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) <= _residue_164) && _residue_159 <= _residue_164)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) <= _residue_164)
(push) ; 12
; [then-branch: 5114 | False | live]
; [else-branch: 5114 | True | live]
(push) ; 13
; [then-branch: 5114 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 5114 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) <= _residue_164)
(push) ; 14
; [then-branch: 5115 | False | live]
; [else-branch: 5115 | True | live]
(push) ; 15
; [then-branch: 5115 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 5115 | True]
; [eval] _residue_159 <= _residue_164
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (<= _residue_159@695@01 _residue_164@723@01)))
(assert (=
  ($Snap.second $t@787@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@787@01))
    ($Snap.second ($Snap.second $t@787@01)))))
(assert (= ($Snap.first ($Snap.second $t@787@01)) $Snap.unit))
; [eval] p2_9 && !bypass2_1 ==> (forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: Level(_r_9) <= _residue_164_0) && ((forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: Level(_r_9) <= _residue_164_0) && _residue_159_0 <= _residue_164_0)
; [eval] p2_9 && !bypass2_1
(push) ; 10
; [then-branch: 5116 | !(p2_9@690@01) | live]
; [else-branch: 5116 | p2_9@690@01 | live]
(push) ; 11
; [then-branch: 5116 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 11
(push) ; 11
; [else-branch: 5116 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5117 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5117 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 5117 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: Level(_r_9) <= _residue_164_0) && ((forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: Level(_r_9) <= _residue_164_0) && _residue_159_0 <= _residue_164_0)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: Level(_r_9) <= _residue_164_0)
(push) ; 12
; [then-branch: 5118 | False | live]
; [else-branch: 5118 | True | live]
(push) ; 13
; [then-branch: 5118 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 5118 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: Level(_r_9) <= _residue_164_0)
(push) ; 14
; [then-branch: 5119 | False | live]
; [else-branch: 5119 | True | live]
(push) ; 15
; [then-branch: 5119 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 5119 | True]
; [eval] _residue_159_0 <= _residue_164_0
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (<= _residue_159_0@696@01 _residue_164_0@724@01)))
(assert (=
  ($Snap.second ($Snap.second $t@787@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@787@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))
; [eval] p1_9 && !bypass1_1
(push) ; 10
; [then-branch: 5120 | !(p1_9@689@01) | live]
; [else-branch: 5120 | p1_9@689@01 | live]
(push) ; 11
; [then-branch: 5120 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 11
(push) ; 11
; [else-branch: 5120 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5121 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5121 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 5121 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@787@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@787@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))
; [eval] p2_9 && !bypass2_1
(push) ; 11
; [then-branch: 5122 | !(p2_9@690@01) | live]
; [else-branch: 5122 | p2_9@690@01 | live]
(push) ; 12
; [then-branch: 5122 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 12
(push) ; 12
; [else-branch: 5122 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5123 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5123 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 5123 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))
  $Snap.unit))
; [eval] p1_9 && !bypass1_1 ==> issubtype(typeof(c_6.Container_value), int())
; [eval] p1_9 && !bypass1_1
(push) ; 12
; [then-branch: 5124 | !(p1_9@689@01) | live]
; [else-branch: 5124 | p1_9@689@01 | live]
(push) ; 13
; [then-branch: 5124 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5124 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5125 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5125 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 5125 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] issubtype(typeof(c_6.Container_value), int())
; [eval] typeof(c_6.Container_value)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@787@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))
  $Snap.unit))
; [eval] p2_9 && !bypass2_1 ==> issubtype(typeof(c_6_0.Container_valuep), int())
; [eval] p2_9 && !bypass2_1
(push) ; 12
; [then-branch: 5126 | !(p2_9@690@01) | live]
; [else-branch: 5126 | p2_9@690@01 | live]
(push) ; 13
; [then-branch: 5126 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5126 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5127 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5127 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 5127 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] issubtype(typeof(c_6_0.Container_valuep), int())
; [eval] typeof(c_6_0.Container_valuep)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))
  $Snap.unit))
; [eval] p1_9 && !bypass1_1 ==> true
; [eval] p1_9 && !bypass1_1
(push) ; 12
; [then-branch: 5128 | !(p1_9@689@01) | live]
; [else-branch: 5128 | p1_9@689@01 | live]
(push) ; 13
; [then-branch: 5128 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5128 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5129 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5129 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 5129 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))
  $Snap.unit))
; [eval] p2_9 && !bypass2_1 ==> true
; [eval] p2_9 && !bypass2_1
(push) ; 12
; [then-branch: 5130 | !(p2_9@690@01) | live]
; [else-branch: 5130 | p2_9@690@01 | live]
(push) ; 13
; [then-branch: 5130 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5130 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5131 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5131 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 5131 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))
  $Snap.unit))
; [eval] p1_9 && !bypass1_1 ==> true
; [eval] p1_9 && !bypass1_1
(push) ; 12
; [then-branch: 5132 | !(p1_9@689@01) | live]
; [else-branch: 5132 | p1_9@689@01 | live]
(push) ; 13
; [then-branch: 5132 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5132 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5133 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5133 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 5133 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))
  $Snap.unit))
; [eval] p2_9 && !bypass2_1 ==> true
; [eval] p2_9 && !bypass2_1
(push) ; 12
; [then-branch: 5134 | !(p2_9@690@01) | live]
; [else-branch: 5134 | p2_9@690@01 | live]
(push) ; 13
; [then-branch: 5134 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5134 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5135 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5135 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 5135 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))
  $Snap.unit))
; [eval] bypass1_1 ==> tmp1_13 == except1_1
(push) ; 12
; [then-branch: 5136 | bypass1_1@756@01 | dead]
; [else-branch: 5136 | !(bypass1_1@756@01) | live]
(push) ; 13
; [else-branch: 5136 | !(bypass1_1@756@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))
  $Snap.unit))
; [eval] bypass1_1 ==> tmp1_16 == break1_1
(push) ; 12
; [then-branch: 5137 | bypass1_1@756@01 | dead]
; [else-branch: 5137 | !(bypass1_1@756@01) | live]
(push) ; 13
; [else-branch: 5137 | !(bypass1_1@756@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))
  $Snap.unit))
; [eval] bypass1_1 ==> tmp1_11 == _loop_measures_1
(push) ; 12
; [then-branch: 5138 | bypass1_1@756@01 | dead]
; [else-branch: 5138 | !(bypass1_1@756@01) | live]
(push) ; 13
; [else-branch: 5138 | !(bypass1_1@756@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))
  $Snap.unit))
; [eval] bypass1_1 ==> tmp1_14 == _err
(push) ; 12
; [then-branch: 5139 | bypass1_1@756@01 | dead]
; [else-branch: 5139 | !(bypass1_1@756@01) | live]
(push) ; 13
; [else-branch: 5139 | !(bypass1_1@756@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))
  $Snap.unit))
; [eval] bypass1_1 ==> tmp1_15 == _loop_check_before_1
(push) ; 12
; [then-branch: 5140 | bypass1_1@756@01 | dead]
; [else-branch: 5140 | !(bypass1_1@756@01) | live]
(push) ; 13
; [else-branch: 5140 | !(bypass1_1@756@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))
  $Snap.unit))
; [eval] bypass1_1 ==> tmp1_12 == Exception_res_1
(push) ; 12
; [then-branch: 5141 | bypass1_1@756@01 | dead]
; [else-branch: 5141 | !(bypass1_1@756@01) | live]
(push) ; 13
; [else-branch: 5141 | !(bypass1_1@756@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))
  $Snap.unit))
; [eval] bypass2_1 ==> tmp2_11 == _loop_measures_1_0
(push) ; 12
; [then-branch: 5142 | bypass2_1@757@01 | dead]
; [else-branch: 5142 | !(bypass2_1@757@01) | live]
(push) ; 13
; [else-branch: 5142 | !(bypass2_1@757@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_1 ==> tmp2_15 == _loop_check_before_1_0
(push) ; 12
; [then-branch: 5143 | bypass2_1@757@01 | dead]
; [else-branch: 5143 | !(bypass2_1@757@01) | live]
(push) ; 13
; [else-branch: 5143 | !(bypass2_1@757@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_1 ==> tmp2_12 == Exception_res_1_0
(push) ; 12
; [then-branch: 5144 | bypass2_1@757@01 | dead]
; [else-branch: 5144 | !(bypass2_1@757@01) | live]
(push) ; 13
; [else-branch: 5144 | !(bypass2_1@757@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_1 ==> tmp2_14 == _err_2
(push) ; 12
; [then-branch: 5145 | bypass2_1@757@01 | dead]
; [else-branch: 5145 | !(bypass2_1@757@01) | live]
(push) ; 13
; [else-branch: 5145 | !(bypass2_1@757@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_1 ==> tmp2_13 == except2_1
(push) ; 12
; [then-branch: 5146 | bypass2_1@757@01 | dead]
; [else-branch: 5146 | !(bypass2_1@757@01) | live]
(push) ; 13
; [else-branch: 5146 | !(bypass2_1@757@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_1 ==> tmp2_16 == break2_1
(push) ; 12
; [then-branch: 5147 | bypass2_1@757@01 | dead]
; [else-branch: 5147 | !(bypass2_1@757@01) | live]
(push) ; 13
; [else-branch: 5147 | !(bypass2_1@757@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
(pop) ; 9
(push) ; 9
; Loop head block: Establish invariant
; [eval] p1_9 && !bypass1_1 ==> true
; [eval] p1_9 && !bypass1_1
(push) ; 10
; [then-branch: 5148 | !(p1_9@689@01) | live]
; [else-branch: 5148 | p1_9@689@01 | live]
(push) ; 11
; [then-branch: 5148 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 11
(push) ; 11
; [else-branch: 5148 | p1_9@689@01]
(assert p1_9@689@01)
; [eval] !bypass1_1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5149 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5149 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 5149 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> true
; [eval] p2_9 && !bypass2_1
(push) ; 10
; [then-branch: 5150 | !(p2_9@690@01) | live]
; [else-branch: 5150 | p2_9@690@01 | live]
(push) ; 11
; [then-branch: 5150 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 11
(push) ; 11
; [else-branch: 5150 | p2_9@690@01]
(assert p2_9@690@01)
; [eval] !bypass2_1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5151 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5151 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 5151 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1
(push) ; 10
; [then-branch: 5152 | !(p1_9@689@01) | live]
; [else-branch: 5152 | p1_9@689@01 | live]
(push) ; 11
; [then-branch: 5152 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 11
(push) ; 11
; [else-branch: 5152 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5153 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5153 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 5153 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1
(push) ; 11
; [then-branch: 5154 | !(p2_9@690@01) | live]
; [else-branch: 5154 | p2_9@690@01 | live]
(push) ; 12
; [then-branch: 5154 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 12
(push) ; 12
; [else-branch: 5154 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5155 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5155 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 5155 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1 ==> issubtype(typeof(c_6.Container_value), int())
; [eval] p1_9 && !bypass1_1
(push) ; 12
; [then-branch: 5156 | !(p1_9@689@01) | live]
; [else-branch: 5156 | p1_9@689@01 | live]
(push) ; 13
; [then-branch: 5156 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5156 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5157 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5157 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 5157 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] issubtype(typeof(c_6.Container_value), int())
; [eval] typeof(c_6.Container_value)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(push) ; 12
(assert (not (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01))))))))))) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01))))))))))) (as int<PyType>  PyType))))
; [eval] p2_9 && !bypass2_1 ==> issubtype(typeof(c_6_0.Container_valuep), int())
; [eval] p2_9 && !bypass2_1
(push) ; 12
; [then-branch: 5158 | !(p2_9@690@01) | live]
; [else-branch: 5158 | p2_9@690@01 | live]
(push) ; 13
; [then-branch: 5158 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5158 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5159 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5159 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 5159 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] issubtype(typeof(c_6_0.Container_valuep), int())
; [eval] typeof(c_6_0.Container_valuep)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(push) ; 12
(assert (not (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))))))))) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@705@01)))))))))))) (as int<PyType>  PyType))))
; [eval] p1_9 && !bypass1_1 ==> !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] p1_9 && !bypass1_1
(push) ; 12
; [then-branch: 5160 | !(p1_9@689@01) | live]
; [else-branch: 5160 | p1_9@689@01 | live]
(push) ; 13
; [then-branch: 5160 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5160 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5161 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5161 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 5161 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] !idle1_1
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5162 | True | live]
; [else-branch: 5162 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 5162 | True]
; [eval] _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5163 | True | live]
; [else-branch: 5163 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 5163 | True]
; [eval] _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
(push) ; 18
; [then-branch: 5164 | False | live]
; [else-branch: 5164 | True | live]
(push) ; 19
; [then-branch: 5164 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 5164 | True]
; [eval] perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_159)) == none
; [eval] perm(MustTerminate(_cthread_159))
(push) ; 20
; [then-branch: 5165 | False | live]
; [else-branch: 5165 | True | live]
(push) ; 21
; [then-branch: 5165 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 5165 | True]
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
(push) ; 22
; [then-branch: 5166 | False | live]
; [else-branch: 5166 | True | live]
(push) ; 23
; [then-branch: 5166 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 5166 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
(push) ; 24
; [then-branch: 5167 | False | live]
; [else-branch: 5167 | True | live]
(push) ; 25
; [then-branch: 5167 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 5167 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
(push) ; 26
; [then-branch: 5168 | False | live]
; [else-branch: 5168 | True | live]
(push) ; 27
; [then-branch: 5168 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 5168 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] p2_9 && !bypass2_1
(push) ; 12
; [then-branch: 5169 | !(p2_9@690@01) | live]
; [else-branch: 5169 | p2_9@690@01 | live]
(push) ; 13
; [then-branch: 5169 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5169 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5170 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5170 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 5170 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_1
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5171 | True | live]
; [else-branch: 5171 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 5171 | True]
; [eval] _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5172 | True | live]
; [else-branch: 5172 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 5172 | True]
; [eval] _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
(push) ; 18
; [then-branch: 5173 | False | live]
; [else-branch: 5173 | True | live]
(push) ; 19
; [then-branch: 5173 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 5173 | True]
; [eval] perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_159_0)) == none
; [eval] perm(MustTerminate_0(_cthread_159_0))
(push) ; 20
; [then-branch: 5174 | False | live]
; [else-branch: 5174 | True | live]
(push) ; 21
; [then-branch: 5174 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 5174 | True]
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false)
(push) ; 22
; [then-branch: 5175 | False | live]
; [else-branch: 5175 | True | live]
(push) ; 23
; [then-branch: 5175 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 5175 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false)
(push) ; 24
; [then-branch: 5176 | False | live]
; [else-branch: 5176 | True | live]
(push) ; 25
; [then-branch: 5176 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 5176 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false)
(push) ; 26
; [then-branch: 5177 | False | live]
; [else-branch: 5177 | True | live]
(push) ; 27
; [then-branch: 5177 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 5177 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1 ==> !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] p1_9 && !bypass1_1
(push) ; 12
; [then-branch: 5178 | !(p1_9@689@01) | live]
; [else-branch: 5178 | p1_9@689@01 | live]
(push) ; 13
; [then-branch: 5178 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5178 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5179 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5179 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 5179 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] !idle1_1
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5180 | True | live]
; [else-branch: 5180 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 5180 | True]
; [eval] !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_1
(push) ; 16
; [then-branch: 5181 | False | dead]
; [else-branch: 5181 | True | live]
(push) ; 17
; [else-branch: 5181 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] p2_9 && !bypass2_1
(push) ; 12
; [then-branch: 5182 | !(p2_9@690@01) | live]
; [else-branch: 5182 | p2_9@690@01 | live]
(push) ; 13
; [then-branch: 5182 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 13
(push) ; 13
; [else-branch: 5182 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5183 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5183 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 5183 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_1
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5184 | True | live]
; [else-branch: 5184 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 5184 | True]
; [eval] !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_1_0
(push) ; 16
; [then-branch: 5185 | False | dead]
; [else-branch: 5185 | True | live]
(push) ; 17
; [else-branch: 5185 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] bypass1_1 ==> tmp1_13 == except1_1
(push) ; 12
; [then-branch: 5186 | bypass1_1@756@01 | dead]
; [else-branch: 5186 | !(bypass1_1@756@01) | live]
(push) ; 13
; [else-branch: 5186 | !(bypass1_1@756@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_16 == break1_1
(push) ; 12
; [then-branch: 5187 | bypass1_1@756@01 | dead]
; [else-branch: 5187 | !(bypass1_1@756@01) | live]
(push) ; 13
; [else-branch: 5187 | !(bypass1_1@756@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_11 == _loop_measures_1
(push) ; 12
; [then-branch: 5188 | bypass1_1@756@01 | dead]
; [else-branch: 5188 | !(bypass1_1@756@01) | live]
(push) ; 13
; [else-branch: 5188 | !(bypass1_1@756@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_14 == _err
(push) ; 12
; [then-branch: 5189 | bypass1_1@756@01 | dead]
; [else-branch: 5189 | !(bypass1_1@756@01) | live]
(push) ; 13
; [else-branch: 5189 | !(bypass1_1@756@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_15 == _loop_check_before_1
(push) ; 12
; [then-branch: 5190 | bypass1_1@756@01 | dead]
; [else-branch: 5190 | !(bypass1_1@756@01) | live]
(push) ; 13
; [else-branch: 5190 | !(bypass1_1@756@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_12 == Exception_res_1
(push) ; 12
; [then-branch: 5191 | bypass1_1@756@01 | dead]
; [else-branch: 5191 | !(bypass1_1@756@01) | live]
(push) ; 13
; [else-branch: 5191 | !(bypass1_1@756@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_11 == _loop_measures_1_0
(push) ; 12
; [then-branch: 5192 | bypass2_1@757@01 | dead]
; [else-branch: 5192 | !(bypass2_1@757@01) | live]
(push) ; 13
; [else-branch: 5192 | !(bypass2_1@757@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_15 == _loop_check_before_1_0
(push) ; 12
; [then-branch: 5193 | bypass2_1@757@01 | dead]
; [else-branch: 5193 | !(bypass2_1@757@01) | live]
(push) ; 13
; [else-branch: 5193 | !(bypass2_1@757@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_12 == Exception_res_1_0
(push) ; 12
; [then-branch: 5194 | bypass2_1@757@01 | dead]
; [else-branch: 5194 | !(bypass2_1@757@01) | live]
(push) ; 13
; [else-branch: 5194 | !(bypass2_1@757@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_14 == _err_2
(push) ; 12
; [then-branch: 5195 | bypass2_1@757@01 | dead]
; [else-branch: 5195 | !(bypass2_1@757@01) | live]
(push) ; 13
; [else-branch: 5195 | !(bypass2_1@757@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_13 == except2_1
(push) ; 12
; [then-branch: 5196 | bypass2_1@757@01 | dead]
; [else-branch: 5196 | !(bypass2_1@757@01) | live]
(push) ; 13
; [else-branch: 5196 | !(bypass2_1@757@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_16 == break2_1
(push) ; 12
; [then-branch: 5197 | bypass2_1@757@01 | dead]
; [else-branch: 5197 | !(bypass2_1@757@01) | live]
(push) ; 13
; [else-branch: 5197 | !(bypass2_1@757@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 12
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))
  $Snap.unit))
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@787@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))
  $Snap.unit))
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@787@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@787@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@787@01)))))))
(assert (= $t@787@01 ($Snap.combine ($Snap.first $t@787@01) ($Snap.second $t@787@01))))
(assert (= ($Snap.first $t@787@01) $Snap.unit))
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (<= _residue_159@695@01 _residue_164@723@01)))
(assert (=
  ($Snap.second $t@787@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@787@01))
    ($Snap.second ($Snap.second $t@787@01)))))
(assert (= ($Snap.first ($Snap.second $t@787@01)) $Snap.unit))
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (<= _residue_159_0@696@01 _residue_164_0@724@01)))
(assert (=
  ($Snap.second ($Snap.second $t@787@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@787@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 13
; [eval] p1_9 && (!break1_1 && !except1_1 && (!bypass1_1 && true)) || p2_9 && (!break2_1 && !except2_1 && (!bypass2_1 && true))
; [eval] p1_9 && (!break1_1 && !except1_1 && (!bypass1_1 && true))
(push) ; 14
; [then-branch: 5198 | !(p1_9@689@01) | live]
; [else-branch: 5198 | p1_9@689@01 | live]
(push) ; 15
; [then-branch: 5198 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 15
(push) ; 15
; [else-branch: 5198 | p1_9@689@01]
; [eval] !break1_1
(push) ; 16
; [then-branch: 5199 | break1_1@783@01 | live]
; [else-branch: 5199 | !(break1_1@783@01) | live]
(push) ; 17
; [then-branch: 5199 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5199 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 18
; [then-branch: 5200 | except1_1@776@01 | live]
; [else-branch: 5200 | !(except1_1@776@01) | live]
(push) ; 19
; [then-branch: 5200 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5200 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] !bypass1_1
(push) ; 20
; [then-branch: 5201 | bypass1_1@756@01 | live]
; [else-branch: 5201 | !(bypass1_1@756@01) | live]
(push) ; 21
; [then-branch: 5201 | bypass1_1@756@01]
(assert bypass1_1@756@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5201 | !(bypass1_1@756@01)]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1_1@756@01) bypass1_1@756@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_1@776@01)
  (and (not except1_1@776@01) (or (not bypass1_1@756@01) bypass1_1@756@01))))
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and
    (not break1_1@783@01)
    (=>
      (not except1_1@776@01)
      (and (not except1_1@776@01) (or (not bypass1_1@756@01) bypass1_1@756@01)))
    (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_9@689@01
  (and
    (=>
      (not break1_1@783@01)
      (and
        (not break1_1@783@01)
        (=>
          (not except1_1@776@01)
          (and
            (not except1_1@776@01)
            (or (not bypass1_1@756@01) bypass1_1@756@01)))
        (or (not except1_1@776@01) except1_1@776@01)))
    (or (not break1_1@783@01) break1_1@783@01))))
(push) ; 14
; [then-branch: 5202 | p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01) | live]
; [else-branch: 5202 | !(p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01)) | live]
(push) ; 15
; [then-branch: 5202 | p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01)]
(assert (and
  p1_9@689@01
  (and (not break1_1@783@01) (and (not except1_1@776@01) (not bypass1_1@756@01)))))
(pop) ; 15
(push) ; 15
; [else-branch: 5202 | !(p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01))]
(assert (not
  (and
    p1_9@689@01
    (and
      (not break1_1@783@01)
      (and (not except1_1@776@01) (not bypass1_1@756@01))))))
; [eval] p2_9 && (!break2_1 && !except2_1 && (!bypass2_1 && true))
(push) ; 16
; [then-branch: 5203 | !(p2_9@690@01) | live]
; [else-branch: 5203 | p2_9@690@01 | live]
(push) ; 17
; [then-branch: 5203 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 17
(push) ; 17
; [else-branch: 5203 | p2_9@690@01]
; [eval] !break2_1
(push) ; 18
; [then-branch: 5204 | break2_1@784@01 | live]
; [else-branch: 5204 | !(break2_1@784@01) | live]
(push) ; 19
; [then-branch: 5204 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5204 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(push) ; 20
; [then-branch: 5205 | except2_1@778@01 | live]
; [else-branch: 5205 | !(except2_1@778@01) | live]
(push) ; 21
; [then-branch: 5205 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5205 | !(except2_1@778@01)]
(assert (not except2_1@778@01))
; [eval] !bypass2_1
(push) ; 22
; [then-branch: 5206 | bypass2_1@757@01 | live]
; [else-branch: 5206 | !(bypass2_1@757@01) | live]
(push) ; 23
; [then-branch: 5206 | bypass2_1@757@01]
(assert bypass2_1@757@01)
(pop) ; 23
(push) ; 23
; [else-branch: 5206 | !(bypass2_1@757@01)]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2_1@757@01) bypass2_1@757@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_1@778@01)
  (and (not except2_1@778@01) (or (not bypass2_1@757@01) bypass2_1@757@01))))
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and
    (not break2_1@784@01)
    (=>
      (not except2_1@778@01)
      (and (not except2_1@778@01) (or (not bypass2_1@757@01) bypass2_1@757@01)))
    (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_9@690@01
  (and
    (=>
      (not break2_1@784@01)
      (and
        (not break2_1@784@01)
        (=>
          (not except2_1@778@01)
          (and
            (not except2_1@778@01)
            (or (not bypass2_1@757@01) bypass2_1@757@01)))
        (or (not except2_1@778@01) except2_1@778@01)))
    (or (not break2_1@784@01) break2_1@784@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (and
    p1_9@689@01
    (and
      (not break1_1@783@01)
      (and (not except1_1@776@01) (not bypass1_1@756@01))))
  (and
    p1_9@689@01
    (not break1_1@783@01)
    (not except1_1@776@01)
    (not bypass1_1@756@01))))
; Joined path conditions
(assert (=>
  (not
    (and
      p1_9@689@01
      (and
        (not break1_1@783@01)
        (and (not except1_1@776@01) (not bypass1_1@756@01)))))
  (and
    (not
      (and
        p1_9@689@01
        (and
          (not break1_1@783@01)
          (and (not except1_1@776@01) (not bypass1_1@756@01)))))
    (=>
      p2_9@690@01
      (and
        (=>
          (not break2_1@784@01)
          (and
            (not break2_1@784@01)
            (=>
              (not except2_1@778@01)
              (and
                (not except2_1@778@01)
                (or (not bypass2_1@757@01) bypass2_1@757@01)))
            (or (not except2_1@778@01) except2_1@778@01)))
        (or (not break2_1@784@01) break2_1@784@01))))))
(assert (or
  (not
    (and
      p1_9@689@01
      (and
        (not break1_1@783@01)
        (and (not except1_1@776@01) (not bypass1_1@756@01)))))
  (and
    p1_9@689@01
    (and
      (not break1_1@783@01)
      (and (not except1_1@776@01) (not bypass1_1@756@01))))))
(pop) ; 13
(push) ; 13
; [eval] !(p1_9 && (!break1_1 && !except1_1 && (!bypass1_1 && true)) || p2_9 && (!break2_1 && !except2_1 && (!bypass2_1 && true)))
; [eval] p1_9 && (!break1_1 && !except1_1 && (!bypass1_1 && true)) || p2_9 && (!break2_1 && !except2_1 && (!bypass2_1 && true))
; [eval] p1_9 && (!break1_1 && !except1_1 && (!bypass1_1 && true))
(push) ; 14
; [then-branch: 5207 | !(p1_9@689@01) | live]
; [else-branch: 5207 | p1_9@689@01 | live]
(push) ; 15
; [then-branch: 5207 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 15
(push) ; 15
; [else-branch: 5207 | p1_9@689@01]
(assert p1_9@689@01)
; [eval] !break1_1
(push) ; 16
; [then-branch: 5208 | break1_1@783@01 | live]
; [else-branch: 5208 | !(break1_1@783@01) | live]
(push) ; 17
; [then-branch: 5208 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5208 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 18
; [then-branch: 5209 | except1_1@776@01 | live]
; [else-branch: 5209 | !(except1_1@776@01) | live]
(push) ; 19
; [then-branch: 5209 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5209 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] !bypass1_1
(push) ; 20
; [then-branch: 5210 | bypass1_1@756@01 | live]
; [else-branch: 5210 | !(bypass1_1@756@01) | live]
(push) ; 21
; [then-branch: 5210 | bypass1_1@756@01]
(assert bypass1_1@756@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5210 | !(bypass1_1@756@01)]
(assert (not bypass1_1@756@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1_1@756@01) bypass1_1@756@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_1@776@01)
  (and (not except1_1@776@01) (or (not bypass1_1@756@01) bypass1_1@756@01))))
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and
    (not break1_1@783@01)
    (=>
      (not except1_1@776@01)
      (and (not except1_1@776@01) (or (not bypass1_1@756@01) bypass1_1@756@01)))
    (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_9@689@01
  (and
    p1_9@689@01
    (=>
      (not break1_1@783@01)
      (and
        (not break1_1@783@01)
        (=>
          (not except1_1@776@01)
          (and
            (not except1_1@776@01)
            (or (not bypass1_1@756@01) bypass1_1@756@01)))
        (or (not except1_1@776@01) except1_1@776@01)))
    (or (not break1_1@783@01) break1_1@783@01))))
(push) ; 14
; [then-branch: 5211 | p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01) | live]
; [else-branch: 5211 | !(p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01)) | live]
(push) ; 15
; [then-branch: 5211 | p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01)]
(assert (and
  p1_9@689@01
  (and (not break1_1@783@01) (and (not except1_1@776@01) (not bypass1_1@756@01)))))
(pop) ; 15
(push) ; 15
; [else-branch: 5211 | !(p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01))]
(assert (not
  (and
    p1_9@689@01
    (and
      (not break1_1@783@01)
      (and (not except1_1@776@01) (not bypass1_1@756@01))))))
; [eval] p2_9 && (!break2_1 && !except2_1 && (!bypass2_1 && true))
(push) ; 16
; [then-branch: 5212 | !(p2_9@690@01) | live]
; [else-branch: 5212 | p2_9@690@01 | live]
(push) ; 17
; [then-branch: 5212 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 17
(push) ; 17
; [else-branch: 5212 | p2_9@690@01]
; [eval] !break2_1
(push) ; 18
; [then-branch: 5213 | break2_1@784@01 | live]
; [else-branch: 5213 | !(break2_1@784@01) | live]
(push) ; 19
; [then-branch: 5213 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5213 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(push) ; 20
; [then-branch: 5214 | except2_1@778@01 | live]
; [else-branch: 5214 | !(except2_1@778@01) | live]
(push) ; 21
; [then-branch: 5214 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5214 | !(except2_1@778@01)]
(assert (not except2_1@778@01))
; [eval] !bypass2_1
(push) ; 22
; [then-branch: 5215 | bypass2_1@757@01 | live]
; [else-branch: 5215 | !(bypass2_1@757@01) | live]
(push) ; 23
; [then-branch: 5215 | bypass2_1@757@01]
(assert bypass2_1@757@01)
(pop) ; 23
(push) ; 23
; [else-branch: 5215 | !(bypass2_1@757@01)]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2_1@757@01) bypass2_1@757@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_1@778@01)
  (and (not except2_1@778@01) (or (not bypass2_1@757@01) bypass2_1@757@01))))
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and
    (not break2_1@784@01)
    (=>
      (not except2_1@778@01)
      (and (not except2_1@778@01) (or (not bypass2_1@757@01) bypass2_1@757@01)))
    (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_9@690@01
  (and
    (=>
      (not break2_1@784@01)
      (and
        (not break2_1@784@01)
        (=>
          (not except2_1@778@01)
          (and
            (not except2_1@778@01)
            (or (not bypass2_1@757@01) bypass2_1@757@01)))
        (or (not except2_1@778@01) except2_1@778@01)))
    (or (not break2_1@784@01) break2_1@784@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (and
    p1_9@689@01
    (and
      (not break1_1@783@01)
      (and (not except1_1@776@01) (not bypass1_1@756@01))))
  (and
    p1_9@689@01
    (not break1_1@783@01)
    (not except1_1@776@01)
    (not bypass1_1@756@01))))
; Joined path conditions
(assert (=>
  (not
    (and
      p1_9@689@01
      (and
        (not break1_1@783@01)
        (and (not except1_1@776@01) (not bypass1_1@756@01)))))
  (and
    (not
      (and
        p1_9@689@01
        (and
          (not break1_1@783@01)
          (and (not except1_1@776@01) (not bypass1_1@756@01)))))
    (=>
      p2_9@690@01
      (and
        (=>
          (not break2_1@784@01)
          (and
            (not break2_1@784@01)
            (=>
              (not except2_1@778@01)
              (and
                (not except2_1@778@01)
                (or (not bypass2_1@757@01) bypass2_1@757@01)))
            (or (not except2_1@778@01) except2_1@778@01)))
        (or (not break2_1@784@01) break2_1@784@01))))))
(assert (or
  (not
    (and
      p1_9@689@01
      (and
        (not break1_1@783@01)
        (and (not except1_1@776@01) (not bypass1_1@756@01)))))
  (and
    p1_9@689@01
    (and
      (not break1_1@783@01)
      (and (not except1_1@776@01) (not bypass1_1@756@01))))))
(pop) ; 13
; Loop head block: Follow loop-internal edges
; [eval] p1_9 && (!break1_1 && !except1_1 && (!bypass1_1 && true)) || p2_9 && (!break2_1 && !except2_1 && (!bypass2_1 && true))
; [eval] p1_9 && (!break1_1 && !except1_1 && (!bypass1_1 && true))
(push) ; 13
; [then-branch: 5216 | !(p1_9@689@01) | live]
; [else-branch: 5216 | p1_9@689@01 | live]
(push) ; 14
; [then-branch: 5216 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 14
(push) ; 14
; [else-branch: 5216 | p1_9@689@01]
(assert p1_9@689@01)
; [eval] !break1_1
(push) ; 15
; [then-branch: 5217 | break1_1@783@01 | live]
; [else-branch: 5217 | !(break1_1@783@01) | live]
(push) ; 16
; [then-branch: 5217 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 16
(push) ; 16
; [else-branch: 5217 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 17
; [then-branch: 5218 | except1_1@776@01 | live]
; [else-branch: 5218 | !(except1_1@776@01) | live]
(push) ; 18
; [then-branch: 5218 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 18
(push) ; 18
; [else-branch: 5218 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] !bypass1_1
(push) ; 19
; [then-branch: 5219 | bypass1_1@756@01 | live]
; [else-branch: 5219 | !(bypass1_1@756@01) | live]
(push) ; 20
; [then-branch: 5219 | bypass1_1@756@01]
(assert bypass1_1@756@01)
(pop) ; 20
(push) ; 20
; [else-branch: 5219 | !(bypass1_1@756@01)]
(assert (not bypass1_1@756@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1_1@756@01) bypass1_1@756@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_1@776@01)
  (and (not except1_1@776@01) (or (not bypass1_1@756@01) bypass1_1@756@01))))
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and
    (not break1_1@783@01)
    (=>
      (not except1_1@776@01)
      (and (not except1_1@776@01) (or (not bypass1_1@756@01) bypass1_1@756@01)))
    (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_9@689@01
  (and
    p1_9@689@01
    (=>
      (not break1_1@783@01)
      (and
        (not break1_1@783@01)
        (=>
          (not except1_1@776@01)
          (and
            (not except1_1@776@01)
            (or (not bypass1_1@756@01) bypass1_1@756@01)))
        (or (not except1_1@776@01) except1_1@776@01)))
    (or (not break1_1@783@01) break1_1@783@01))))
(push) ; 13
; [then-branch: 5220 | p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01) | live]
; [else-branch: 5220 | !(p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01)) | live]
(push) ; 14
; [then-branch: 5220 | p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01)]
(assert (and
  p1_9@689@01
  (and (not break1_1@783@01) (and (not except1_1@776@01) (not bypass1_1@756@01)))))
(pop) ; 14
(push) ; 14
; [else-branch: 5220 | !(p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01))]
(assert (not
  (and
    p1_9@689@01
    (and
      (not break1_1@783@01)
      (and (not except1_1@776@01) (not bypass1_1@756@01))))))
; [eval] p2_9 && (!break2_1 && !except2_1 && (!bypass2_1 && true))
(push) ; 15
; [then-branch: 5221 | !(p2_9@690@01) | live]
; [else-branch: 5221 | p2_9@690@01 | live]
(push) ; 16
; [then-branch: 5221 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 16
(push) ; 16
; [else-branch: 5221 | p2_9@690@01]
; [eval] !break2_1
(push) ; 17
; [then-branch: 5222 | break2_1@784@01 | live]
; [else-branch: 5222 | !(break2_1@784@01) | live]
(push) ; 18
; [then-branch: 5222 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 18
(push) ; 18
; [else-branch: 5222 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(push) ; 19
; [then-branch: 5223 | except2_1@778@01 | live]
; [else-branch: 5223 | !(except2_1@778@01) | live]
(push) ; 20
; [then-branch: 5223 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 20
(push) ; 20
; [else-branch: 5223 | !(except2_1@778@01)]
(assert (not except2_1@778@01))
; [eval] !bypass2_1
(push) ; 21
; [then-branch: 5224 | bypass2_1@757@01 | live]
; [else-branch: 5224 | !(bypass2_1@757@01) | live]
(push) ; 22
; [then-branch: 5224 | bypass2_1@757@01]
(assert bypass2_1@757@01)
(pop) ; 22
(push) ; 22
; [else-branch: 5224 | !(bypass2_1@757@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2_1@757@01) bypass2_1@757@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_1@778@01)
  (and (not except2_1@778@01) (or (not bypass2_1@757@01) bypass2_1@757@01))))
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and
    (not break2_1@784@01)
    (=>
      (not except2_1@778@01)
      (and (not except2_1@778@01) (or (not bypass2_1@757@01) bypass2_1@757@01)))
    (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_9@690@01
  (and
    (=>
      (not break2_1@784@01)
      (and
        (not break2_1@784@01)
        (=>
          (not except2_1@778@01)
          (and
            (not except2_1@778@01)
            (or (not bypass2_1@757@01) bypass2_1@757@01)))
        (or (not except2_1@778@01) except2_1@778@01)))
    (or (not break2_1@784@01) break2_1@784@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and
    p1_9@689@01
    (and
      (not break1_1@783@01)
      (and (not except1_1@776@01) (not bypass1_1@756@01))))
  (and
    p1_9@689@01
    (not break1_1@783@01)
    (not except1_1@776@01)
    (not bypass1_1@756@01))))
; Joined path conditions
(assert (=>
  (not
    (and
      p1_9@689@01
      (and
        (not break1_1@783@01)
        (and (not except1_1@776@01) (not bypass1_1@756@01)))))
  (and
    (not
      (and
        p1_9@689@01
        (and
          (not break1_1@783@01)
          (and (not except1_1@776@01) (not bypass1_1@756@01)))))
    (=>
      p2_9@690@01
      (and
        (=>
          (not break2_1@784@01)
          (and
            (not break2_1@784@01)
            (=>
              (not except2_1@778@01)
              (and
                (not except2_1@778@01)
                (or (not bypass2_1@757@01) bypass2_1@757@01)))
            (or (not except2_1@778@01) except2_1@778@01)))
        (or (not break2_1@784@01) break2_1@784@01))))))
(assert (or
  (not
    (and
      p1_9@689@01
      (and
        (not break1_1@783@01)
        (and (not except1_1@776@01) (not bypass1_1@756@01)))))
  (and
    p1_9@689@01
    (and
      (not break1_1@783@01)
      (and (not except1_1@776@01) (not bypass1_1@756@01))))))
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (or
    (and
      p1_9@689@01
      (and
        (not break1_1@783@01)
        (and (not except1_1@776@01) (not bypass1_1@756@01))))
    (and
      p2_9@690@01
      (and
        (not break2_1@784@01)
        (and (not except2_1@778@01) (not bypass2_1@757@01))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (or
  (and
    p1_9@689@01
    (and
      (not break1_1@783@01)
      (and (not except1_1@776@01) (not bypass1_1@756@01))))
  (and
    p2_9@690@01
    (and
      (not break2_1@784@01)
      (and (not except2_1@778@01) (not bypass2_1@757@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5225 | p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01) || p2_9@690@01 && !(break2_1@784@01) && !(except2_1@778@01) && !(bypass2_1@757@01) | live]
; [else-branch: 5225 | !(p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01) || p2_9@690@01 && !(break2_1@784@01) && !(except2_1@778@01) && !(bypass2_1@757@01)) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 5225 | p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01) || p2_9@690@01 && !(break2_1@784@01) && !(except2_1@778@01) && !(bypass2_1@757@01)]
(assert (or
  (and
    p1_9@689@01
    (and
      (not break1_1@783@01)
      (and (not except1_1@776@01) (not bypass1_1@756@01))))
  (and
    p2_9@690@01
    (and
      (not break2_1@784@01)
      (and (not except2_1@778@01) (not bypass2_1@757@01))))))
; [exec]
; var p1_11: Bool
(declare-const p1_11@788@01 Bool)
; [exec]
; var p2_11: Bool
(declare-const p2_11@789@01 Bool)
; [exec]
; var p3_5: Bool
(declare-const p3_5@790@01 Bool)
; [exec]
; var p4_5: Bool
(declare-const p4_5@791@01 Bool)
; [exec]
; var p1_12: Bool
(declare-const p1_12@792@01 Bool)
; [exec]
; var p2_12: Bool
(declare-const p2_12@793@01 Bool)
; [exec]
; var p3_6: Bool
(declare-const p3_6@794@01 Bool)
; [exec]
; var p4_6: Bool
(declare-const p4_6@795@01 Bool)
; [exec]
; var tmp_1: Ref
(declare-const tmp_1@796@01 $Ref)
; [exec]
; var p1_13: Bool
(declare-const p1_13@797@01 Bool)
; [exec]
; var p2_13: Bool
(declare-const p2_13@798@01 Bool)
; [exec]
; var p3_7: Bool
(declare-const p3_7@799@01 Bool)
; [exec]
; var p4_7: Bool
(declare-const p4_7@800@01 Bool)
; [exec]
; p1_10 := p1_9 && (!break1_1 && !except1_1 && true)
; [eval] p1_9 && (!break1_1 && !except1_1 && true)
(push) ; 14
; [then-branch: 5226 | !(p1_9@689@01) | live]
; [else-branch: 5226 | p1_9@689@01 | live]
(push) ; 15
; [then-branch: 5226 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 15
(push) ; 15
; [else-branch: 5226 | p1_9@689@01]
(assert p1_9@689@01)
; [eval] !break1_1
(push) ; 16
; [then-branch: 5227 | break1_1@783@01 | live]
; [else-branch: 5227 | !(break1_1@783@01) | live]
(push) ; 17
; [then-branch: 5227 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5227 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 18
; [then-branch: 5228 | except1_1@776@01 | live]
; [else-branch: 5228 | !(except1_1@776@01) | live]
(push) ; 19
; [then-branch: 5228 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5228 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_9@689@01
  (and
    p1_9@689@01
    (=>
      (not break1_1@783@01)
      (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01)))
    (or (not break1_1@783@01) break1_1@783@01))))
(declare-const p1_10@801@01 Bool)
(assert (=
  p1_10@801@01
  (and p1_9@689@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
; [exec]
; p2_10 := p2_9 && (!break2_1 && !except2_1 && true)
; [eval] p2_9 && (!break2_1 && !except2_1 && true)
(push) ; 14
; [then-branch: 5229 | !(p2_9@690@01) | live]
; [else-branch: 5229 | p2_9@690@01 | live]
(push) ; 15
; [then-branch: 5229 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 15
(push) ; 15
; [else-branch: 5229 | p2_9@690@01]
; [eval] !break2_1
(push) ; 16
; [then-branch: 5230 | break2_1@784@01 | live]
; [else-branch: 5230 | !(break2_1@784@01) | live]
(push) ; 17
; [then-branch: 5230 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5230 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(push) ; 18
; [then-branch: 5231 | except2_1@778@01 | live]
; [else-branch: 5231 | !(except2_1@778@01) | live]
(push) ; 19
; [then-branch: 5231 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5231 | !(except2_1@778@01)]
(assert (not except2_1@778@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_9@690@01
  (and
    (=>
      (not break2_1@784@01)
      (and (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01)))
    (or (not break2_1@784@01) break2_1@784@01))))
(declare-const p2_10@802@01 Bool)
(assert (=
  p2_10@802@01
  (and p2_9@690@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
; [exec]
; idle1_1 := p1_9 && (!break1_1 && !except1_1 && !true)
; [eval] p1_9 && (!break1_1 && !except1_1 && !true)
(push) ; 14
; [then-branch: 5232 | !(p1_9@689@01) | live]
; [else-branch: 5232 | p1_9@689@01 | live]
(push) ; 15
; [then-branch: 5232 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 15
(push) ; 15
; [else-branch: 5232 | p1_9@689@01]
(assert p1_9@689@01)
; [eval] !break1_1
(push) ; 16
; [then-branch: 5233 | break1_1@783@01 | live]
; [else-branch: 5233 | !(break1_1@783@01) | live]
(push) ; 17
; [then-branch: 5233 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5233 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 18
; [then-branch: 5234 | except1_1@776@01 | live]
; [else-branch: 5234 | !(except1_1@776@01) | live]
(push) ; 19
; [then-branch: 5234 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5234 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] !true
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [exec]
; idle2_1 := p2_9 && (!break2_1 && !except2_1 && !true)
; [eval] p2_9 && (!break2_1 && !except2_1 && !true)
(push) ; 14
; [then-branch: 5235 | !(p2_9@690@01) | live]
; [else-branch: 5235 | p2_9@690@01 | live]
(push) ; 15
; [then-branch: 5235 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 15
(push) ; 15
; [else-branch: 5235 | p2_9@690@01]
; [eval] !break2_1
(push) ; 16
; [then-branch: 5236 | break2_1@784@01 | live]
; [else-branch: 5236 | !(break2_1@784@01) | live]
(push) ; 17
; [then-branch: 5236 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5236 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(push) ; 18
; [then-branch: 5237 | except2_1@778@01 | live]
; [else-branch: 5237 | !(except2_1@778@01) | live]
(push) ; 19
; [then-branch: 5237 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5237 | !(except2_1@778@01)]
(assert (not except2_1@778@01))
; [eval] !true
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 14
; [then-branch: 5238 | !(p1_10@801@01) | live]
; [else-branch: 5238 | p1_10@801@01 | live]
(push) ; 15
; [then-branch: 5238 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 15
(push) ; 15
; [else-branch: 5238 | p1_10@801@01]
(assert p1_10@801@01)
; [eval] !break1_1
(push) ; 16
; [then-branch: 5239 | break1_1@783@01 | live]
; [else-branch: 5239 | !(break1_1@783@01) | live]
(push) ; 17
; [then-branch: 5239 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 17
(push) ; 17
; [else-branch: 5239 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=> p1_10@801@01 (and p1_10@801@01 (or (not break1_1@783@01) break1_1@783@01))))
(assert (or p1_10@801@01 (not p1_10@801@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (not (and p1_10@801@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and p1_10@801@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5240 | p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
; [else-branch: 5240 | !(p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 5240 | p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_10@801@01 (and (not break1_1@783@01) (not except1_1@776@01))))
; [exec]
; _loop_measures_1 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 15
; [then-branch: 5241 | !(p2_10@802@01) | live]
; [else-branch: 5241 | p2_10@802@01 | live]
(push) ; 16
; [then-branch: 5241 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 16
(push) ; 16
; [else-branch: 5241 | p2_10@802@01]
(assert p2_10@802@01)
; [eval] !break2_1
(push) ; 17
; [then-branch: 5242 | break2_1@784@01 | live]
; [else-branch: 5242 | !(break2_1@784@01) | live]
(push) ; 18
; [then-branch: 5242 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 18
(push) ; 18
; [else-branch: 5242 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=> p2_10@802@01 (and p2_10@802@01 (or (not break2_1@784@01) break2_1@784@01))))
(assert (or p2_10@802@01 (not p2_10@802@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and p2_10@802@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (and p2_10@802@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5243 | p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
; [else-branch: 5243 | !(p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 5243 | p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_10@802@01 (and (not break2_1@784@01) (not except2_1@778@01))))
; [exec]
; _loop_measures_1_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; p1_11 := p1_10 && (!break1_1 && !except1_1 && bool___unbox__(b_6))
; [eval] p1_10 && (!break1_1 && !except1_1 && bool___unbox__(b_6))
(push) ; 16
; [then-branch: 5244 | !(p1_10@801@01) | live]
; [else-branch: 5244 | p1_10@801@01 | live]
(push) ; 17
; [then-branch: 5244 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 17
(push) ; 17
; [else-branch: 5244 | p1_10@801@01]
; [eval] !break1_1
(push) ; 18
; [then-branch: 5245 | break1_1@783@01 | live]
; [else-branch: 5245 | !(break1_1@783@01) | live]
(push) ; 19
; [then-branch: 5245 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5245 | !(break1_1@783@01)]
; [eval] !except1_1
(push) ; 20
; [then-branch: 5246 | except1_1@776@01 | live]
; [else-branch: 5246 | !(except1_1@776@01) | live]
(push) ; 21
; [then-branch: 5246 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5246 | !(except1_1@776@01)]
; [eval] bool___unbox__(b_6)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@699@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@699@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_1@776@01)
  (and
    (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@699@01))))
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and
    (=>
      (not except1_1@776@01)
      (and
        (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_1@699@01)))
    (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_10@801@01
  (and
    (=>
      (not break1_1@783@01)
      (and
        (=>
          (not except1_1@776@01)
          (and
            (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
            (bool___unbox__%precondition $Snap.unit b_1@699@01)))
        (or (not except1_1@776@01) except1_1@776@01)))
    (or (not break1_1@783@01) break1_1@783@01))))
(declare-const p1_11@803@01 Bool)
(assert (=
  p1_11@803@01
  (and
    p1_10@801@01
    (and
      (not break1_1@783@01)
      (and (not except1_1@776@01) (bool___unbox__ $Snap.unit b_1@699@01))))))
; [exec]
; p2_11 := p2_10 && (!break2_1 && !except2_1 && bool___unbox__(b_6_0))
; [eval] p2_10 && (!break2_1 && !except2_1 && bool___unbox__(b_6_0))
(push) ; 16
; [then-branch: 5247 | !(p2_10@802@01) | live]
; [else-branch: 5247 | p2_10@802@01 | live]
(push) ; 17
; [then-branch: 5247 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 17
(push) ; 17
; [else-branch: 5247 | p2_10@802@01]
; [eval] !break2_1
(push) ; 18
; [then-branch: 5248 | break2_1@784@01 | live]
; [else-branch: 5248 | !(break2_1@784@01) | live]
(push) ; 19
; [then-branch: 5248 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5248 | !(break2_1@784@01)]
; [eval] !except2_1
(push) ; 20
; [then-branch: 5249 | except2_1@778@01 | live]
; [else-branch: 5249 | !(except2_1@778@01) | live]
(push) ; 21
; [then-branch: 5249 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5249 | !(except2_1@778@01)]
; [eval] bool___unbox__(b_6_0)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1_0@700@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@700@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_1@778@01)
  (and
    (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1_0@700@01))))
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and
    (=>
      (not except2_1@778@01)
      (and
        (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_1_0@700@01)))
    (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_10@802@01
  (and
    (=>
      (not break2_1@784@01)
      (and
        (=>
          (not except2_1@778@01)
          (and
            (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
            (bool___unbox__%precondition $Snap.unit b_1_0@700@01)))
        (or (not except2_1@778@01) except2_1@778@01)))
    (or (not break2_1@784@01) break2_1@784@01))))
(declare-const p2_11@804@01 Bool)
(assert (=
  p2_11@804@01
  (and
    p2_10@802@01
    (and
      (not break2_1@784@01)
      (and (not except2_1@778@01) (bool___unbox__ $Snap.unit b_1_0@700@01))))))
; [exec]
; p3_5 := p1_10 && (!break1_1 && !except1_1 && !bool___unbox__(b_6))
; [eval] p1_10 && (!break1_1 && !except1_1 && !bool___unbox__(b_6))
(push) ; 16
; [then-branch: 5250 | !(p1_10@801@01) | live]
; [else-branch: 5250 | p1_10@801@01 | live]
(push) ; 17
; [then-branch: 5250 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 17
(push) ; 17
; [else-branch: 5250 | p1_10@801@01]
; [eval] !break1_1
(push) ; 18
; [then-branch: 5251 | break1_1@783@01 | live]
; [else-branch: 5251 | !(break1_1@783@01) | live]
(push) ; 19
; [then-branch: 5251 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5251 | !(break1_1@783@01)]
; [eval] !except1_1
(push) ; 20
; [then-branch: 5252 | except1_1@776@01 | live]
; [else-branch: 5252 | !(except1_1@776@01) | live]
(push) ; 21
; [then-branch: 5252 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5252 | !(except1_1@776@01)]
; [eval] !bool___unbox__(b_6)
; [eval] bool___unbox__(b_6)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@699@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@699@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_1@776@01)
  (and
    (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@699@01))))
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and
    (=>
      (not except1_1@776@01)
      (and
        (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_1@699@01)))
    (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3_5@805@01 Bool)
(assert (=
  p3_5@805@01
  (and
    p1_10@801@01
    (and
      (not break1_1@783@01)
      (and (not except1_1@776@01) (not (bool___unbox__ $Snap.unit b_1@699@01)))))))
; [exec]
; p4_5 := p2_10 && (!break2_1 && !except2_1 && !bool___unbox__(b_6_0))
; [eval] p2_10 && (!break2_1 && !except2_1 && !bool___unbox__(b_6_0))
(push) ; 16
; [then-branch: 5253 | !(p2_10@802@01) | live]
; [else-branch: 5253 | p2_10@802@01 | live]
(push) ; 17
; [then-branch: 5253 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 17
(push) ; 17
; [else-branch: 5253 | p2_10@802@01]
; [eval] !break2_1
(push) ; 18
; [then-branch: 5254 | break2_1@784@01 | live]
; [else-branch: 5254 | !(break2_1@784@01) | live]
(push) ; 19
; [then-branch: 5254 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5254 | !(break2_1@784@01)]
; [eval] !except2_1
(push) ; 20
; [then-branch: 5255 | except2_1@778@01 | live]
; [else-branch: 5255 | !(except2_1@778@01) | live]
(push) ; 21
; [then-branch: 5255 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5255 | !(except2_1@778@01)]
; [eval] !bool___unbox__(b_6_0)
; [eval] bool___unbox__(b_6_0)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1_0@700@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@700@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_1@778@01)
  (and
    (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1_0@700@01))))
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and
    (=>
      (not except2_1@778@01)
      (and
        (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_1_0@700@01)))
    (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4_5@806@01 Bool)
(assert (=
  p4_5@806@01
  (and
    p2_10@802@01
    (and
      (not break2_1@784@01)
      (and (not except2_1@778@01) (not (bool___unbox__ $Snap.unit b_1_0@700@01)))))))
; [exec]
; p1_12 := p1_11 &&
;   (!break1_1 && !except1_1 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p1_11 && (!break1_1 && !except1_1 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 5256 | !(p1_11@803@01) | live]
; [else-branch: 5256 | p1_11@803@01 | live]
(push) ; 17
; [then-branch: 5256 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 17
(push) ; 17
; [else-branch: 5256 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 18
; [then-branch: 5257 | break1_1@783@01 | live]
; [else-branch: 5257 | !(break1_1@783@01) | live]
(push) ; 19
; [then-branch: 5257 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5257 | !(break1_1@783@01)]
; [eval] !except1_1
(push) ; 20
; [then-branch: 5258 | except1_1@776@01 | live]
; [else-branch: 5258 | !(except1_1@776@01) | live]
(push) ; 21
; [then-branch: 5258 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5258 | !(except1_1@776@01)]
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01)))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_11@803@01
  (and
    p1_11@803@01
    (=> (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01))
    (or (not break1_1@783@01) break1_1@783@01))))
(assert (or p1_11@803@01 (not p1_11@803@01)))
; [exec]
; p2_12 := p2_11 &&
;   (!break2_1 && !except2_1 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_11 && (!break2_1 && !except2_1 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 5259 | !(p2_11@804@01) | live]
; [else-branch: 5259 | p2_11@804@01 | live]
(push) ; 17
; [then-branch: 5259 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 17
(push) ; 17
; [else-branch: 5259 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 18
; [then-branch: 5260 | break2_1@784@01 | live]
; [else-branch: 5260 | !(break2_1@784@01) | live]
(push) ; 19
; [then-branch: 5260 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5260 | !(break2_1@784@01)]
; [eval] !except2_1
(push) ; 20
; [then-branch: 5261 | except2_1@778@01 | live]
; [else-branch: 5261 | !(except2_1@778@01) | live]
(push) ; 21
; [then-branch: 5261 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5261 | !(except2_1@778@01)]
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01)))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_11@804@01
  (and
    p2_11@804@01
    (=> (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01))
    (or (not break2_1@784@01) break2_1@784@01))))
(assert (or p2_11@804@01 (not p2_11@804@01)))
; [exec]
; p3_6 := p1_11 &&
;   (!break1_1 && !except1_1 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p1_11 && (!break1_1 && !except1_1 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 5262 | !(p1_11@803@01) | live]
; [else-branch: 5262 | p1_11@803@01 | live]
(push) ; 17
; [then-branch: 5262 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 17
(push) ; 17
; [else-branch: 5262 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 18
; [then-branch: 5263 | break1_1@783@01 | live]
; [else-branch: 5263 | !(break1_1@783@01) | live]
(push) ; 19
; [then-branch: 5263 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5263 | !(break1_1@783@01)]
; [eval] !except1_1
(push) ; 20
; [then-branch: 5264 | except1_1@776@01 | live]
; [else-branch: 5264 | !(except1_1@776@01) | live]
(push) ; 21
; [then-branch: 5264 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5264 | !(except1_1@776@01)]
; [eval] !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01)))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3_6@807@01 Bool)
(assert (=
  p3_6@807@01
  (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
; [exec]
; p4_6 := p2_11 &&
;   (!break2_1 && !except2_1 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_11 && (!break2_1 && !except2_1 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 5265 | !(p2_11@804@01) | live]
; [else-branch: 5265 | p2_11@804@01 | live]
(push) ; 17
; [then-branch: 5265 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 17
(push) ; 17
; [else-branch: 5265 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 18
; [then-branch: 5266 | break2_1@784@01 | live]
; [else-branch: 5266 | !(break2_1@784@01) | live]
(push) ; 19
; [then-branch: 5266 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5266 | !(break2_1@784@01)]
; [eval] !except2_1
(push) ; 20
; [then-branch: 5267 | except2_1@778@01 | live]
; [else-branch: 5267 | !(except2_1@778@01) | live]
(push) ; 21
; [then-branch: 5267 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5267 | !(except2_1@778@01)]
; [eval] !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01)))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4_6@808@01 Bool)
(assert (=
  p4_6@808@01
  (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
; [eval] p1_12 && (!break1_1 && !except1_1)
; [then-branch: 5268 | False | dead]
; [else-branch: 5268 | True | live]
(push) ; 16
; [else-branch: 5268 | True]
(pop) ; 16
; [eval] !(p1_12 && (!break1_1 && !except1_1))
; [eval] p1_12 && (!break1_1 && !except1_1)
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5269 | True | live]
; [else-branch: 5269 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 5269 | True]
; [eval] p2_12 && (!break2_1 && !except2_1)
; [then-branch: 5270 | False | dead]
; [else-branch: 5270 | True | live]
(push) ; 17
; [else-branch: 5270 | True]
(pop) ; 17
; [eval] !(p2_12 && (!break2_1 && !except2_1))
; [eval] p2_12 && (!break2_1 && !except2_1)
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5271 | True | live]
; [else-branch: 5271 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 5271 | True]
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 18
; [then-branch: 5272 | !(p1_11@803@01) | live]
; [else-branch: 5272 | p1_11@803@01 | live]
(push) ; 19
; [then-branch: 5272 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 19
(push) ; 19
; [else-branch: 5272 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 20
; [then-branch: 5273 | break1_1@783@01 | live]
; [else-branch: 5273 | !(break1_1@783@01) | live]
(push) ; 21
; [then-branch: 5273 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5273 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> p1_11@803@01 (and p1_11@803@01 (or (not break1_1@783@01) break1_1@783@01))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5274 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
; [else-branch: 5274 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 5274 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))
; [exec]
; c_6.Container_value := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 19
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 19
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(declare-const Container_value@809@01 $Ref)
(assert (= Container_value@809@01 (__prim__int___box__ $Snap.unit 7)))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 19
; [then-branch: 5275 | !(p2_11@804@01) | live]
; [else-branch: 5275 | p2_11@804@01 | live]
(push) ; 20
; [then-branch: 5275 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 20
(push) ; 20
; [else-branch: 5275 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 21
; [then-branch: 5276 | break2_1@784@01 | live]
; [else-branch: 5276 | !(break2_1@784@01) | live]
(push) ; 22
; [then-branch: 5276 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 22
(push) ; 22
; [else-branch: 5276 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=> p2_11@804@01 (and p2_11@804@01 (or (not break2_1@784@01) break2_1@784@01))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5277 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
; [else-branch: 5277 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 5277 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))
; [exec]
; c_6_0.Container_valuep := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 20
(pop) ; 20
; Joined path conditions
(declare-const Container_valuep@810@01 $Ref)
(assert (= Container_valuep@810@01 (__prim__int___box__ $Snap.unit 7)))
; [exec]
; tmp_1 := new()
(declare-const tmp_1@811@01 $Ref)
(assert (not (= tmp_1@811@01 $Ref.null)))
(assert (not (= tmp_1@811@01 c_1@697@01)))
(assert (not (= tmp_1@811@01 tmp2_14@740@01)))
(assert (not (= tmp_1@811@01 c_1_0@698@01)))
(assert (not (= tmp_1@811@01 tmp1_12@735@01)))
(assert (not (= tmp_1@811@01 tmp1_14@739@01)))
(assert (not (= tmp_1@811@01 _cthread_159_0@692@01)))
(assert (not (= tmp_1@811@01 _err@775@01)))
(assert (not (= tmp_1@811@01 Exception_res_1_0@774@01)))
(assert (not (= tmp_1@811@01 b_1@699@01)))
(assert (not (= tmp_1@811@01 _err_2@777@01)))
(assert (not (= tmp_1@811@01 Exception_res_1@773@01)))
(assert (not (= tmp_1@811@01 Container_value@809@01)))
(assert (not (= tmp_1@811@01 tmp2_12@736@01)))
(assert (not (= tmp_1@811@01 b_1_0@700@01)))
(assert (not (= tmp_1@811@01 _cthread_159@691@01)))
(assert (not (= tmp_1@811@01 Container_valuep@810@01)))
(assert (not (= tmp_1@811@01 tmp_1@796@01)))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 20
; [then-branch: 5278 | !(p1_11@803@01) | live]
; [else-branch: 5278 | p1_11@803@01 | live]
(push) ; 21
; [then-branch: 5278 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 21
(push) ; 21
; [else-branch: 5278 | p1_11@803@01]
; [eval] !break1_1
(push) ; 22
; [then-branch: 5279 | break1_1@783@01 | live]
; [else-branch: 5279 | !(break1_1@783@01) | live]
(push) ; 23
; [then-branch: 5279 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 23
(push) ; 23
; [else-branch: 5279 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=> p1_11@803@01 (or (not break1_1@783@01) break1_1@783@01)))
(push) ; 20
(set-option :timeout 10)
(assert (not (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5280 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
; [else-branch: 5280 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 5280 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))
; [exec]
; Exception_res_1 := tmp_1
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 21
; [then-branch: 5281 | !(p2_11@804@01) | live]
; [else-branch: 5281 | p2_11@804@01 | live]
(push) ; 22
; [then-branch: 5281 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 22
(push) ; 22
; [else-branch: 5281 | p2_11@804@01]
; [eval] !break2_1
(push) ; 23
; [then-branch: 5282 | break2_1@784@01 | live]
; [else-branch: 5282 | !(break2_1@784@01) | live]
(push) ; 24
; [then-branch: 5282 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 24
(push) ; 24
; [else-branch: 5282 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (=> p2_11@804@01 (or (not break2_1@784@01) break2_1@784@01)))
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5283 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
; [else-branch: 5283 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 5283 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))
; [exec]
; Exception_res_1_0 := tmp_1
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 22
; [then-branch: 5284 | !(p1_11@803@01) | live]
; [else-branch: 5284 | p1_11@803@01 | live]
(push) ; 23
; [then-branch: 5284 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 23
(push) ; 23
; [else-branch: 5284 | p1_11@803@01]
; [eval] !break1_1
(push) ; 24
; [then-branch: 5285 | break1_1@783@01 | live]
; [else-branch: 5285 | !(break1_1@783@01) | live]
(push) ; 25
; [then-branch: 5285 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 25
(push) ; 25
; [else-branch: 5285 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5286 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
; [else-branch: 5286 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 5286 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))
; [exec]
; inhale typeof(Exception_res_1) == Exception()
(declare-const $t@812@01 $Snap)
(assert (= $t@812@01 $Snap.unit))
; [eval] typeof(Exception_res_1) == Exception()
; [eval] typeof(Exception_res_1)
; [eval] Exception()
(assert (= (typeof<PyType> tmp_1@811@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_11 && (!break2_1 && !except2_1)
(set-option :timeout 0)
(push) ; 23
; [then-branch: 5287 | !(p2_11@804@01) | live]
; [else-branch: 5287 | p2_11@804@01 | live]
(push) ; 24
; [then-branch: 5287 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 24
(push) ; 24
; [else-branch: 5287 | p2_11@804@01]
; [eval] !break2_1
(push) ; 25
; [then-branch: 5288 | break2_1@784@01 | live]
; [else-branch: 5288 | !(break2_1@784@01) | live]
(push) ; 26
; [then-branch: 5288 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 26
(push) ; 26
; [else-branch: 5288 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5289 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
; [else-branch: 5289 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 5289 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))
; [exec]
; inhale typeof(Exception_res_1_0) == Exception()
(declare-const $t@813@01 $Snap)
(assert (= $t@813@01 $Snap.unit))
; [eval] typeof(Exception_res_1_0) == Exception()
; [eval] typeof(Exception_res_1_0)
; [eval] Exception()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_11 && (!break1_1 && !except1_1)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 5290 | !(p1_11@803@01) | live]
; [else-branch: 5290 | p1_11@803@01 | live]
(push) ; 25
; [then-branch: 5290 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5290 | p1_11@803@01]
; [eval] !break1_1
(push) ; 26
; [then-branch: 5291 | break1_1@783@01 | live]
; [else-branch: 5291 | !(break1_1@783@01) | live]
(push) ; 27
; [then-branch: 5291 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 27
(push) ; 27
; [else-branch: 5291 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5292 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
; [else-branch: 5292 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 5292 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))
; [exec]
; _err := Exception_res_1
; [exec]
; except1_1 := true
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 25
; [then-branch: 5293 | !(p2_11@804@01) | live]
; [else-branch: 5293 | p2_11@804@01 | live]
(push) ; 26
; [then-branch: 5293 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 26
(push) ; 26
; [else-branch: 5293 | p2_11@804@01]
; [eval] !break2_1
(push) ; 27
; [then-branch: 5294 | break2_1@784@01 | live]
; [else-branch: 5294 | !(break2_1@784@01) | live]
(push) ; 28
; [then-branch: 5294 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 28
(push) ; 28
; [else-branch: 5294 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5295 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
; [else-branch: 5295 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5295 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))
; [exec]
; _err_2 := Exception_res_1_0
; [exec]
; except2_1 := true
; [exec]
; p1_13 := p3_5 &&
;   (!break1_1 && !except1_1 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p3_5 && (!break1_1 && !except1_1 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 5296 | !(p3_5@805@01) | live]
; [else-branch: 5296 | p3_5@805@01 | live]
(push) ; 27
; [then-branch: 5296 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5296 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 28
; [then-branch: 5297 | break1_1@783@01 | live]
; [else-branch: 5297 | !(break1_1@783@01) | live]
(push) ; 29
; [then-branch: 5297 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 29
(push) ; 29
; [else-branch: 5297 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=> p3_5@805@01 (and p3_5@805@01 (or (not break1_1@783@01) break1_1@783@01))))
(assert (or p3_5@805@01 (not p3_5@805@01)))
; [exec]
; p2_13 := p4_5 &&
;   (!break2_1 && !except2_1 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_5 && (!break2_1 && !except2_1 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 5298 | !(p4_5@806@01) | live]
; [else-branch: 5298 | p4_5@806@01 | live]
(push) ; 27
; [then-branch: 5298 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5298 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 28
; [then-branch: 5299 | break2_1@784@01 | live]
; [else-branch: 5299 | !(break2_1@784@01) | live]
(push) ; 29
; [then-branch: 5299 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 29
(push) ; 29
; [else-branch: 5299 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=> p4_5@806@01 (and p4_5@806@01 (or (not break2_1@784@01) break2_1@784@01))))
(assert (or p4_5@806@01 (not p4_5@806@01)))
; [exec]
; p3_7 := p3_5 &&
;   (!break1_1 && !except1_1 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p3_5 && (!break1_1 && !except1_1 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 5300 | !(p3_5@805@01) | live]
; [else-branch: 5300 | p3_5@805@01 | live]
(push) ; 27
; [then-branch: 5300 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5300 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 28
; [then-branch: 5301 | break1_1@783@01 | live]
; [else-branch: 5301 | !(break1_1@783@01) | live]
(push) ; 29
; [then-branch: 5301 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 29
(push) ; 29
; [else-branch: 5301 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [exec]
; p4_7 := p4_5 &&
;   (!break2_1 && !except2_1 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_5 && (!break2_1 && !except2_1 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 5302 | !(p4_5@806@01) | live]
; [else-branch: 5302 | p4_5@806@01 | live]
(push) ; 27
; [then-branch: 5302 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5302 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 28
; [then-branch: 5303 | break2_1@784@01 | live]
; [else-branch: 5303 | !(break2_1@784@01) | live]
(push) ; 29
; [then-branch: 5303 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 29
(push) ; 29
; [else-branch: 5303 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [eval] p1_13 && (!break1_1 && !except1_1)
; [then-branch: 5304 | False | dead]
; [else-branch: 5304 | True | live]
(push) ; 26
; [else-branch: 5304 | True]
(pop) ; 26
; [eval] !(p1_13 && (!break1_1 && !except1_1))
; [eval] p1_13 && (!break1_1 && !except1_1)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5305 | True | live]
; [else-branch: 5305 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 5305 | True]
; [eval] p2_13 && (!break2_1 && !except2_1)
; [then-branch: 5306 | False | dead]
; [else-branch: 5306 | True | live]
(push) ; 27
; [else-branch: 5306 | True]
(pop) ; 27
; [eval] !(p2_13 && (!break2_1 && !except2_1))
; [eval] p2_13 && (!break2_1 && !except2_1)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5307 | True | live]
; [else-branch: 5307 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 5307 | True]
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 28
; [then-branch: 5308 | !(p3_5@805@01) | live]
; [else-branch: 5308 | p3_5@805@01 | live]
(push) ; 29
; [then-branch: 5308 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 29
(push) ; 29
; [else-branch: 5308 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 30
; [then-branch: 5309 | break1_1@783@01 | live]
; [else-branch: 5309 | !(break1_1@783@01) | live]
(push) ; 31
; [then-branch: 5309 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 31
(push) ; 31
; [else-branch: 5309 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 5310 | False | dead]
; [else-branch: 5310 | True | live]
(push) ; 28
; [else-branch: 5310 | True]
(pop) ; 28
; [eval] !(p3_5 && (!break1_1 && !except1_1))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 28
; [then-branch: 5311 | !(p3_5@805@01) | live]
; [else-branch: 5311 | p3_5@805@01 | live]
(push) ; 29
; [then-branch: 5311 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 29
(push) ; 29
; [else-branch: 5311 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 30
; [then-branch: 5312 | break1_1@783@01 | live]
; [else-branch: 5312 | !(break1_1@783@01) | live]
(push) ; 31
; [then-branch: 5312 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 31
(push) ; 31
; [else-branch: 5312 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5313 | True | live]
; [else-branch: 5313 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 5313 | True]
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 29
; [then-branch: 5314 | !(p4_5@806@01) | live]
; [else-branch: 5314 | p4_5@806@01 | live]
(push) ; 30
; [then-branch: 5314 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 30
(push) ; 30
; [else-branch: 5314 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 31
; [then-branch: 5315 | break2_1@784@01 | live]
; [else-branch: 5315 | !(break2_1@784@01) | live]
(push) ; 32
; [then-branch: 5315 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 32
(push) ; 32
; [else-branch: 5315 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 5316 | False | dead]
; [else-branch: 5316 | True | live]
(push) ; 29
; [else-branch: 5316 | True]
(pop) ; 29
; [eval] !(p4_5 && (!break2_1 && !except2_1))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 29
; [then-branch: 5317 | !(p4_5@806@01) | live]
; [else-branch: 5317 | p4_5@806@01 | live]
(push) ; 30
; [then-branch: 5317 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 30
(push) ; 30
; [else-branch: 5317 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 31
; [then-branch: 5318 | break2_1@784@01 | live]
; [else-branch: 5318 | !(break2_1@784@01) | live]
(push) ; 32
; [then-branch: 5318 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 32
(push) ; 32
; [else-branch: 5318 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5319 | True | live]
; [else-branch: 5319 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 5319 | True]
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 30
; [then-branch: 5320 | !(p3_5@805@01) | live]
; [else-branch: 5320 | p3_5@805@01 | live]
(push) ; 31
; [then-branch: 5320 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 31
(push) ; 31
; [else-branch: 5320 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 32
; [then-branch: 5321 | break1_1@783@01 | live]
; [else-branch: 5321 | !(break1_1@783@01) | live]
(push) ; 33
; [then-branch: 5321 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 33
(push) ; 33
; [else-branch: 5321 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 5322 | False | dead]
; [else-branch: 5322 | True | live]
(push) ; 30
; [else-branch: 5322 | True]
(pop) ; 30
; [eval] !(p3_5 && (!break1_1 && !except1_1))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 30
; [then-branch: 5323 | !(p3_5@805@01) | live]
; [else-branch: 5323 | p3_5@805@01 | live]
(push) ; 31
; [then-branch: 5323 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 31
(push) ; 31
; [else-branch: 5323 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 32
; [then-branch: 5324 | break1_1@783@01 | live]
; [else-branch: 5324 | !(break1_1@783@01) | live]
(push) ; 33
; [then-branch: 5324 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 33
(push) ; 33
; [else-branch: 5324 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5325 | True | live]
; [else-branch: 5325 | False | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 5325 | True]
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 31
; [then-branch: 5326 | !(p4_5@806@01) | live]
; [else-branch: 5326 | p4_5@806@01 | live]
(push) ; 32
; [then-branch: 5326 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 32
(push) ; 32
; [else-branch: 5326 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 33
; [then-branch: 5327 | break2_1@784@01 | live]
; [else-branch: 5327 | !(break2_1@784@01) | live]
(push) ; 34
; [then-branch: 5327 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 34
(push) ; 34
; [else-branch: 5327 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 5328 | False | dead]
; [else-branch: 5328 | True | live]
(push) ; 31
; [else-branch: 5328 | True]
(pop) ; 31
; [eval] !(p4_5 && (!break2_1 && !except2_1))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 31
; [then-branch: 5329 | !(p4_5@806@01) | live]
; [else-branch: 5329 | p4_5@806@01 | live]
(push) ; 32
; [then-branch: 5329 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 32
(push) ; 32
; [else-branch: 5329 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 33
; [then-branch: 5330 | break2_1@784@01 | live]
; [else-branch: 5330 | !(break2_1@784@01) | live]
(push) ; 34
; [then-branch: 5330 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 34
(push) ; 34
; [else-branch: 5330 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5331 | True | live]
; [else-branch: 5331 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 5331 | True]
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 32
; [then-branch: 5332 | !(p1_10@801@01) | live]
; [else-branch: 5332 | p1_10@801@01 | live]
(push) ; 33
; [then-branch: 5332 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 33
(push) ; 33
; [else-branch: 5332 | p1_10@801@01]
; [eval] !break1_1
(push) ; 34
; [then-branch: 5333 | break1_1@783@01 | live]
; [else-branch: 5333 | !(break1_1@783@01) | live]
(push) ; 35
; [then-branch: 5333 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 35
(push) ; 35
; [else-branch: 5333 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (=> p1_10@801@01 (or (not break1_1@783@01) break1_1@783@01)))
; [then-branch: 5334 | False | dead]
; [else-branch: 5334 | True | live]
(push) ; 32
; [else-branch: 5334 | True]
(pop) ; 32
; [eval] !(p1_10 && (!break1_1 && !except1_1))
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 32
; [then-branch: 5335 | !(p1_10@801@01) | live]
; [else-branch: 5335 | p1_10@801@01 | live]
(push) ; 33
; [then-branch: 5335 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 33
(push) ; 33
; [else-branch: 5335 | p1_10@801@01]
; [eval] !break1_1
(push) ; 34
; [then-branch: 5336 | break1_1@783@01 | live]
; [else-branch: 5336 | !(break1_1@783@01) | live]
(push) ; 35
; [then-branch: 5336 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 35
(push) ; 35
; [else-branch: 5336 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5337 | True | live]
; [else-branch: 5337 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 5337 | True]
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 33
; [then-branch: 5338 | !(p2_10@802@01) | live]
; [else-branch: 5338 | p2_10@802@01 | live]
(push) ; 34
; [then-branch: 5338 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 34
(push) ; 34
; [else-branch: 5338 | p2_10@802@01]
; [eval] !break2_1
(push) ; 35
; [then-branch: 5339 | break2_1@784@01 | live]
; [else-branch: 5339 | !(break2_1@784@01) | live]
(push) ; 36
; [then-branch: 5339 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 36
(push) ; 36
; [else-branch: 5339 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (=> p2_10@802@01 (or (not break2_1@784@01) break2_1@784@01)))
; [then-branch: 5340 | False | dead]
; [else-branch: 5340 | True | live]
(push) ; 33
; [else-branch: 5340 | True]
(pop) ; 33
; [eval] !(p2_10 && (!break2_1 && !except2_1))
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 33
; [then-branch: 5341 | !(p2_10@802@01) | live]
; [else-branch: 5341 | p2_10@802@01 | live]
(push) ; 34
; [then-branch: 5341 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 34
(push) ; 34
; [else-branch: 5341 | p2_10@802@01]
; [eval] !break2_1
(push) ; 35
; [then-branch: 5342 | break2_1@784@01 | live]
; [else-branch: 5342 | !(break2_1@784@01) | live]
(push) ; 36
; [then-branch: 5342 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 36
(push) ; 36
; [else-branch: 5342 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5343 | True | live]
; [else-branch: 5343 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 5343 | True]
; [exec]
; assert (p1_10 && (!break1_1 && !except1_1) ==>
;   _loop_termination_flag_1 ==> !true) &&
;   (p2_10 && (!break2_1 && !except2_1) ==>
;   _loop_termination_flag_1_0 ==> !true)
; [eval] p1_10 && (!break1_1 && !except1_1) ==> _loop_termination_flag_1 ==> !true
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 34
; [then-branch: 5344 | !(p1_10@801@01) | live]
; [else-branch: 5344 | p1_10@801@01 | live]
(push) ; 35
; [then-branch: 5344 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5344 | p1_10@801@01]
; [eval] !break1_1
(push) ; 36
; [then-branch: 5345 | break1_1@783@01 | live]
; [else-branch: 5345 | !(break1_1@783@01) | live]
(push) ; 37
; [then-branch: 5345 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 37
(push) ; 37
; [else-branch: 5345 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 5346 | False | dead]
; [else-branch: 5346 | True | live]
(push) ; 35
; [else-branch: 5346 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_10 && (!break2_1 && !except2_1) ==> _loop_termination_flag_1_0 ==> !true
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 34
; [then-branch: 5347 | !(p2_10@802@01) | live]
; [else-branch: 5347 | p2_10@802@01 | live]
(push) ; 35
; [then-branch: 5347 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5347 | p2_10@802@01]
; [eval] !break2_1
(push) ; 36
; [then-branch: 5348 | break2_1@784@01 | live]
; [else-branch: 5348 | !(break2_1@784@01) | live]
(push) ; 37
; [then-branch: 5348 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 37
(push) ; 37
; [else-branch: 5348 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 5349 | False | dead]
; [else-branch: 5349 | True | live]
(push) ; 35
; [else-branch: 5349 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_9 && !bypass1_1 ==> true
; [eval] p1_9 && !bypass1_1
(push) ; 34
; [then-branch: 5350 | !(p1_9@689@01) | live]
; [else-branch: 5350 | p1_9@689@01 | live]
(push) ; 35
; [then-branch: 5350 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5350 | p1_9@689@01]
(assert p1_9@689@01)
; [eval] !bypass1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5351 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5351 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 5351 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> true
; [eval] p2_9 && !bypass2_1
(push) ; 34
; [then-branch: 5352 | !(p2_9@690@01) | live]
; [else-branch: 5352 | p2_9@690@01 | live]
(push) ; 35
; [then-branch: 5352 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5352 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5353 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5353 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 5353 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1
(push) ; 34
; [then-branch: 5354 | !(p1_9@689@01) | live]
; [else-branch: 5354 | p1_9@689@01 | live]
(push) ; 35
; [then-branch: 5354 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5354 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5355 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5355 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 5355 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1
(push) ; 35
; [then-branch: 5356 | !(p2_9@690@01) | live]
; [else-branch: 5356 | p2_9@690@01 | live]
(push) ; 36
; [then-branch: 5356 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 36
(push) ; 36
; [else-branch: 5356 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5357 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5357 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 5357 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1 ==> issubtype(typeof(c_6.Container_value), int())
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 5358 | !(p1_9@689@01) | live]
; [else-branch: 5358 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 5358 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5358 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5359 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5359 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5359 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] issubtype(typeof(c_6.Container_value), int())
; [eval] typeof(c_6.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(push) ; 36
(assert (not (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (issubtype<Bool> (typeof<PyType> Container_value@809@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (issubtype<Bool> (typeof<PyType> Container_value@809@01) (as int<PyType>  PyType))))
; [eval] p2_9 && !bypass2_1 ==> issubtype(typeof(c_6_0.Container_valuep), int())
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 5360 | !(p2_9@690@01) | live]
; [else-branch: 5360 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 5360 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5360 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5361 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5361 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5361 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] issubtype(typeof(c_6_0.Container_valuep), int())
; [eval] typeof(c_6_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(push) ; 36
(assert (not (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@810@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@810@01) (as int<PyType>  PyType))))
; [eval] p1_9 && !bypass1_1 ==> !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 5362 | !(p1_9@689@01) | live]
; [else-branch: 5362 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 5362 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5362 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5363 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5363 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5363 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] !idle1_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5364 | True | live]
; [else-branch: 5364 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 5364 | True]
; [eval] _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1@785@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1@785@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5365 | _loop_check_before_1@785@01 | live]
; [else-branch: 5365 | !(_loop_check_before_1@785@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 5365 | _loop_check_before_1@785@01]
(assert _loop_check_before_1@785@01)
; [eval] _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 5366 | False | live]
; [else-branch: 5366 | True | live]
(push) ; 43
; [then-branch: 5366 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 5366 | True]
; [eval] perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_159)) == none
; [eval] perm(MustTerminate(_cthread_159))
(push) ; 44
; [then-branch: 5367 | False | live]
; [else-branch: 5367 | True | live]
(push) ; 45
; [then-branch: 5367 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 5367 | True]
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
(push) ; 46
; [then-branch: 5368 | False | live]
; [else-branch: 5368 | True | live]
(push) ; 47
; [then-branch: 5368 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 5368 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
(push) ; 48
; [then-branch: 5369 | False | live]
; [else-branch: 5369 | True | live]
(push) ; 49
; [then-branch: 5369 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 5369 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 5370 | False | live]
; [else-branch: 5370 | True | live]
(push) ; 51
; [then-branch: 5370 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 5370 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 5365 | !(_loop_check_before_1@785@01)]
(assert (not _loop_check_before_1@785@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (and
    p1_9@689@01
    (not bypass1_1@756@01)
    (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))))
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 5371 | !(p2_9@690@01) | live]
; [else-branch: 5371 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 5371 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5371 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5372 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5372 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5372 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5373 | True | live]
; [else-branch: 5373 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 5373 | True]
; [eval] _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1_0@786@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1_0@786@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5374 | _loop_check_before_1_0@786@01 | live]
; [else-branch: 5374 | !(_loop_check_before_1_0@786@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 5374 | _loop_check_before_1_0@786@01]
(assert _loop_check_before_1_0@786@01)
; [eval] _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 5375 | False | live]
; [else-branch: 5375 | True | live]
(push) ; 43
; [then-branch: 5375 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 5375 | True]
; [eval] perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_159_0)) == none
; [eval] perm(MustTerminate_0(_cthread_159_0))
(push) ; 44
; [then-branch: 5376 | False | live]
; [else-branch: 5376 | True | live]
(push) ; 45
; [then-branch: 5376 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 5376 | True]
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false)
(push) ; 46
; [then-branch: 5377 | False | live]
; [else-branch: 5377 | True | live]
(push) ; 47
; [then-branch: 5377 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 5377 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false)
(push) ; 48
; [then-branch: 5378 | False | live]
; [else-branch: 5378 | True | live]
(push) ; 49
; [then-branch: 5378 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 5378 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 5379 | False | live]
; [else-branch: 5379 | True | live]
(push) ; 51
; [then-branch: 5379 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 5379 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 5374 | !(_loop_check_before_1_0@786@01)]
(assert (not _loop_check_before_1_0@786@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (and
    p2_9@690@01
    (not bypass2_1@757@01)
    (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))))
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1 ==> !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 5380 | !(p1_9@689@01) | live]
; [else-branch: 5380 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 5380 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5380 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5381 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5381 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5381 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] !idle1_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5382 | True | live]
; [else-branch: 5382 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 5382 | True]
; [eval] !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_1
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1@785@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1@785@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5383 | !(_loop_check_before_1@785@01) | live]
; [else-branch: 5383 | _loop_check_before_1@785@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 5383 | !(_loop_check_before_1@785@01)]
(assert (not _loop_check_before_1@785@01))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
(push) ; 42
; [then-branch: 5384 | False | live]
; [else-branch: 5384 | True | live]
(push) ; 43
; [then-branch: 5384 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 5384 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
(push) ; 44
; [then-branch: 5385 | False | live]
; [else-branch: 5385 | True | live]
(push) ; 45
; [then-branch: 5385 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 5385 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 5386 | False | live]
; [else-branch: 5386 | True | live]
(push) ; 47
; [then-branch: 5386 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 5386 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 5383 | _loop_check_before_1@785@01]
(assert _loop_check_before_1@785@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (and
    p1_9@689@01
    (not bypass1_1@756@01)
    (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))))
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 5387 | !(p2_9@690@01) | live]
; [else-branch: 5387 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 5387 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5387 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5388 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5388 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5388 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5389 | True | live]
; [else-branch: 5389 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 5389 | True]
; [eval] !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_1_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1_0@786@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1_0@786@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5390 | !(_loop_check_before_1_0@786@01) | live]
; [else-branch: 5390 | _loop_check_before_1_0@786@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 5390 | !(_loop_check_before_1_0@786@01)]
(assert (not _loop_check_before_1_0@786@01))
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false)
(push) ; 42
; [then-branch: 5391 | False | live]
; [else-branch: 5391 | True | live]
(push) ; 43
; [then-branch: 5391 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 5391 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false)
(push) ; 44
; [then-branch: 5392 | False | live]
; [else-branch: 5392 | True | live]
(push) ; 45
; [then-branch: 5392 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 5392 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 5393 | False | live]
; [else-branch: 5393 | True | live]
(push) ; 47
; [then-branch: 5393 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 5393 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 5390 | _loop_check_before_1_0@786@01]
(assert _loop_check_before_1_0@786@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (and
    p2_9@690@01
    (not bypass2_1@757@01)
    (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))))
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] bypass1_1 ==> tmp1_13 == except1_1
(push) ; 36
; [then-branch: 5394 | bypass1_1@756@01 | dead]
; [else-branch: 5394 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5394 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_16 == break1_1
(push) ; 36
; [then-branch: 5395 | bypass1_1@756@01 | dead]
; [else-branch: 5395 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5395 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_11 == _loop_measures_1
(push) ; 36
; [then-branch: 5396 | bypass1_1@756@01 | dead]
; [else-branch: 5396 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5396 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_14 == _err
(push) ; 36
; [then-branch: 5397 | bypass1_1@756@01 | dead]
; [else-branch: 5397 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5397 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_15 == _loop_check_before_1
(push) ; 36
; [then-branch: 5398 | bypass1_1@756@01 | dead]
; [else-branch: 5398 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5398 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_12 == Exception_res_1
(push) ; 36
; [then-branch: 5399 | bypass1_1@756@01 | dead]
; [else-branch: 5399 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5399 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_11 == _loop_measures_1_0
(push) ; 36
; [then-branch: 5400 | bypass2_1@757@01 | dead]
; [else-branch: 5400 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5400 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_15 == _loop_check_before_1_0
(push) ; 36
; [then-branch: 5401 | bypass2_1@757@01 | dead]
; [else-branch: 5401 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5401 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_12 == Exception_res_1_0
(push) ; 36
; [then-branch: 5402 | bypass2_1@757@01 | dead]
; [else-branch: 5402 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5402 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_14 == _err_2
(push) ; 36
; [then-branch: 5403 | bypass2_1@757@01 | dead]
; [else-branch: 5403 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5403 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_13 == except2_1
(push) ; 36
; [then-branch: 5404 | bypass2_1@757@01 | dead]
; [else-branch: 5404 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5404 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_16 == break2_1
(push) ; 36
; [then-branch: 5405 | bypass2_1@757@01 | dead]
; [else-branch: 5405 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5405 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 25
; [then-branch: 5406 | !(p2_11@804@01) | live]
; [else-branch: 5406 | p2_11@804@01 | live]
(push) ; 26
; [then-branch: 5406 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 26
(push) ; 26
; [else-branch: 5406 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 27
; [then-branch: 5407 | break2_1@784@01 | live]
; [else-branch: 5407 | !(break2_1@784@01) | live]
(push) ; 28
; [then-branch: 5407 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 28
(push) ; 28
; [else-branch: 5407 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5408 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
; [else-branch: 5408 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 5408 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))
(pop) ; 25
(pop) ; 24
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 24
; [then-branch: 5409 | !(p1_11@803@01) | live]
; [else-branch: 5409 | p1_11@803@01 | live]
(push) ; 25
; [then-branch: 5409 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5409 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 26
; [then-branch: 5410 | break1_1@783@01 | live]
; [else-branch: 5410 | !(break1_1@783@01) | live]
(push) ; 27
; [then-branch: 5410 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 27
(push) ; 27
; [else-branch: 5410 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5411 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
; [else-branch: 5411 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 5411 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))
(pop) ; 24
(pop) ; 23
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 23
; [then-branch: 5412 | !(p2_11@804@01) | live]
; [else-branch: 5412 | p2_11@804@01 | live]
(push) ; 24
; [then-branch: 5412 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 24
(push) ; 24
; [else-branch: 5412 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 25
; [then-branch: 5413 | break2_1@784@01 | live]
; [else-branch: 5413 | !(break2_1@784@01) | live]
(push) ; 26
; [then-branch: 5413 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 26
(push) ; 26
; [else-branch: 5413 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5414 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
; [else-branch: 5414 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 5414 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))
(pop) ; 23
(pop) ; 22
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 22
; [then-branch: 5415 | !(p1_11@803@01) | live]
; [else-branch: 5415 | p1_11@803@01 | live]
(push) ; 23
; [then-branch: 5415 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 23
(push) ; 23
; [else-branch: 5415 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 24
; [then-branch: 5416 | break1_1@783@01 | live]
; [else-branch: 5416 | !(break1_1@783@01) | live]
(push) ; 25
; [then-branch: 5416 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 25
(push) ; 25
; [else-branch: 5416 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5417 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
; [else-branch: 5417 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 5417 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))
(pop) ; 22
(pop) ; 21
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 21
; [then-branch: 5418 | !(p2_11@804@01) | live]
; [else-branch: 5418 | p2_11@804@01 | live]
(push) ; 22
; [then-branch: 5418 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 22
(push) ; 22
; [else-branch: 5418 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 23
; [then-branch: 5419 | break2_1@784@01 | live]
; [else-branch: 5419 | !(break2_1@784@01) | live]
(push) ; 24
; [then-branch: 5419 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 24
(push) ; 24
; [else-branch: 5419 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5420 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
; [else-branch: 5420 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
(set-option :timeout 0)
(push) ; 21
; [else-branch: 5420 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))
(pop) ; 21
(pop) ; 20
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 20
; [then-branch: 5421 | !(p1_11@803@01) | live]
; [else-branch: 5421 | p1_11@803@01 | live]
(push) ; 21
; [then-branch: 5421 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 21
(push) ; 21
; [else-branch: 5421 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 22
; [then-branch: 5422 | break1_1@783@01 | live]
; [else-branch: 5422 | !(break1_1@783@01) | live]
(push) ; 23
; [then-branch: 5422 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 23
(push) ; 23
; [else-branch: 5422 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5423 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
; [else-branch: 5423 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 5423 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 5277 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(pop) ; 19
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 19
; [then-branch: 5424 | !(p2_11@804@01) | live]
; [else-branch: 5424 | p2_11@804@01 | live]
(push) ; 20
; [then-branch: 5424 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 20
(push) ; 20
; [else-branch: 5424 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 21
; [then-branch: 5425 | break2_1@784@01 | live]
; [else-branch: 5425 | !(break2_1@784@01) | live]
(push) ; 22
; [then-branch: 5425 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 22
(push) ; 22
; [else-branch: 5425 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5426 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 5426 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 5426 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
; [exec]
; tmp_1 := new()
(declare-const tmp_1@814@01 $Ref)
(assert (not (= tmp_1@814@01 $Ref.null)))
(assert (not (= tmp_1@814@01 c_1@697@01)))
(assert (not (= tmp_1@814@01 tmp2_14@740@01)))
(assert (not (= tmp_1@814@01 c_1_0@698@01)))
(assert (not (= tmp_1@814@01 tmp1_12@735@01)))
(assert (not (= tmp_1@814@01 tmp1_14@739@01)))
(assert (not (= tmp_1@814@01 _cthread_159_0@692@01)))
(assert (not (= tmp_1@814@01 _err@775@01)))
(assert (not (= tmp_1@814@01 Exception_res_1_0@774@01)))
(assert (not (= tmp_1@814@01 b_1@699@01)))
(assert (not (= tmp_1@814@01 _err_2@777@01)))
(assert (not (= tmp_1@814@01 Exception_res_1@773@01)))
(assert (not (= tmp_1@814@01 Container_value@809@01)))
(assert (not (= tmp_1@814@01 tmp2_12@736@01)))
(assert (not
  (=
    tmp_1@814@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))
(assert (not (= tmp_1@814@01 b_1_0@700@01)))
(assert (not (= tmp_1@814@01 _cthread_159@691@01)))
(assert (not (= tmp_1@814@01 tmp_1@796@01)))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 20
; [then-branch: 5427 | !(p1_11@803@01) | live]
; [else-branch: 5427 | p1_11@803@01 | live]
(push) ; 21
; [then-branch: 5427 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 21
(push) ; 21
; [else-branch: 5427 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 22
; [then-branch: 5428 | break1_1@783@01 | live]
; [else-branch: 5428 | !(break1_1@783@01) | live]
(push) ; 23
; [then-branch: 5428 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 23
(push) ; 23
; [else-branch: 5428 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5429 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
; [else-branch: 5429 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 5429 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))
; [exec]
; Exception_res_1 := tmp_1
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 21
; [then-branch: 5430 | !(p2_11@804@01) | live]
; [else-branch: 5430 | p2_11@804@01 | live]
(push) ; 22
; [then-branch: 5430 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 22
(push) ; 22
; [else-branch: 5430 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 23
; [then-branch: 5431 | break2_1@784@01 | live]
; [else-branch: 5431 | !(break2_1@784@01) | live]
(push) ; 24
; [then-branch: 5431 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 24
(push) ; 24
; [else-branch: 5431 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 5432 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 5432 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(push) ; 21
; [else-branch: 5432 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(pop) ; 21
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 21
; [then-branch: 5433 | !(p2_11@804@01) | live]
; [else-branch: 5433 | p2_11@804@01 | live]
(push) ; 22
; [then-branch: 5433 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 22
(push) ; 22
; [else-branch: 5433 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 23
; [then-branch: 5434 | break2_1@784@01 | live]
; [else-branch: 5434 | !(break2_1@784@01) | live]
(push) ; 24
; [then-branch: 5434 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 24
(push) ; 24
; [else-branch: 5434 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5435 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 5435 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 5435 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01))]
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 22
; [then-branch: 5436 | !(p1_11@803@01) | live]
; [else-branch: 5436 | p1_11@803@01 | live]
(push) ; 23
; [then-branch: 5436 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 23
(push) ; 23
; [else-branch: 5436 | p1_11@803@01]
; [eval] !break1_1
(push) ; 24
; [then-branch: 5437 | break1_1@783@01 | live]
; [else-branch: 5437 | !(break1_1@783@01) | live]
(push) ; 25
; [then-branch: 5437 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 25
(push) ; 25
; [else-branch: 5437 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (=> p1_11@803@01 (or (not break1_1@783@01) break1_1@783@01)))
(push) ; 22
(set-option :timeout 10)
(assert (not (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5438 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
; [else-branch: 5438 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 5438 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))
; [exec]
; inhale typeof(Exception_res_1) == Exception()
(declare-const $t@815@01 $Snap)
(assert (= $t@815@01 $Snap.unit))
; [eval] typeof(Exception_res_1) == Exception()
; [eval] typeof(Exception_res_1)
; [eval] Exception()
(assert (= (typeof<PyType> tmp_1@814@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_11 && (!break2_1 && !except2_1)
(set-option :timeout 0)
(push) ; 23
; [then-branch: 5439 | !(p2_11@804@01) | live]
; [else-branch: 5439 | p2_11@804@01 | live]
(push) ; 24
; [then-branch: 5439 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 24
(push) ; 24
; [else-branch: 5439 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 25
; [then-branch: 5440 | break2_1@784@01 | live]
; [else-branch: 5440 | !(break2_1@784@01) | live]
(push) ; 26
; [then-branch: 5440 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 26
(push) ; 26
; [else-branch: 5440 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 5441 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 5441 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(push) ; 23
; [else-branch: 5441 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(pop) ; 23
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 23
; [then-branch: 5442 | !(p2_11@804@01) | live]
; [else-branch: 5442 | p2_11@804@01 | live]
(push) ; 24
; [then-branch: 5442 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 24
(push) ; 24
; [else-branch: 5442 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 25
; [then-branch: 5443 | break2_1@784@01 | live]
; [else-branch: 5443 | !(break2_1@784@01) | live]
(push) ; 26
; [then-branch: 5443 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 26
(push) ; 26
; [else-branch: 5443 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5444 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 5444 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 5444 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01))]
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 24
; [then-branch: 5445 | !(p1_11@803@01) | live]
; [else-branch: 5445 | p1_11@803@01 | live]
(push) ; 25
; [then-branch: 5445 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5445 | p1_11@803@01]
; [eval] !break1_1
(push) ; 26
; [then-branch: 5446 | break1_1@783@01 | live]
; [else-branch: 5446 | !(break1_1@783@01) | live]
(push) ; 27
; [then-branch: 5446 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 27
(push) ; 27
; [else-branch: 5446 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5447 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
; [else-branch: 5447 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 5447 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))
; [exec]
; _err := Exception_res_1
; [exec]
; except1_1 := true
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 25
; [then-branch: 5448 | !(p2_11@804@01) | live]
; [else-branch: 5448 | p2_11@804@01 | live]
(push) ; 26
; [then-branch: 5448 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 26
(push) ; 26
; [else-branch: 5448 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 27
; [then-branch: 5449 | break2_1@784@01 | live]
; [else-branch: 5449 | !(break2_1@784@01) | live]
(push) ; 28
; [then-branch: 5449 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 28
(push) ; 28
; [else-branch: 5449 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 5450 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 5450 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(push) ; 25
; [else-branch: 5450 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(pop) ; 25
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 25
; [then-branch: 5451 | !(p2_11@804@01) | live]
; [else-branch: 5451 | p2_11@804@01 | live]
(push) ; 26
; [then-branch: 5451 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 26
(push) ; 26
; [else-branch: 5451 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 27
; [then-branch: 5452 | break2_1@784@01 | live]
; [else-branch: 5452 | !(break2_1@784@01) | live]
(push) ; 28
; [then-branch: 5452 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 28
(push) ; 28
; [else-branch: 5452 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5453 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 5453 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5453 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01))]
; [exec]
; p1_13 := p3_5 &&
;   (!break1_1 && !except1_1 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p3_5 && (!break1_1 && !except1_1 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 5454 | !(p3_5@805@01) | live]
; [else-branch: 5454 | p3_5@805@01 | live]
(push) ; 27
; [then-branch: 5454 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5454 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 28
; [then-branch: 5455 | break1_1@783@01 | live]
; [else-branch: 5455 | !(break1_1@783@01) | live]
(push) ; 29
; [then-branch: 5455 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 29
(push) ; 29
; [else-branch: 5455 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=> p3_5@805@01 (and p3_5@805@01 (or (not break1_1@783@01) break1_1@783@01))))
(assert (or p3_5@805@01 (not p3_5@805@01)))
; [exec]
; p2_13 := p4_5 &&
;   (!break2_1 && !except2_1 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_5 && (!break2_1 && !except2_1 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 5456 | !(p4_5@806@01) | live]
; [else-branch: 5456 | p4_5@806@01 | live]
(push) ; 27
; [then-branch: 5456 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5456 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 28
; [then-branch: 5457 | break2_1@784@01 | live]
; [else-branch: 5457 | !(break2_1@784@01) | live]
(push) ; 29
; [then-branch: 5457 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 29
(push) ; 29
; [else-branch: 5457 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(push) ; 30
; [then-branch: 5458 | except2_1@778@01 | live]
; [else-branch: 5458 | !(except2_1@778@01) | live]
(push) ; 31
; [then-branch: 5458 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 31
(push) ; 31
; [else-branch: 5458 | !(except2_1@778@01)]
(assert (not except2_1@778@01))
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p4_5@806@01
  (and
    p4_5@806@01
    (=>
      (not break2_1@784@01)
      (and (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01)))
    (or (not break2_1@784@01) break2_1@784@01))))
(assert (or p4_5@806@01 (not p4_5@806@01)))
; [exec]
; p3_7 := p3_5 &&
;   (!break1_1 && !except1_1 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p3_5 && (!break1_1 && !except1_1 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 5459 | !(p3_5@805@01) | live]
; [else-branch: 5459 | p3_5@805@01 | live]
(push) ; 27
; [then-branch: 5459 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5459 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 28
; [then-branch: 5460 | break1_1@783@01 | live]
; [else-branch: 5460 | !(break1_1@783@01) | live]
(push) ; 29
; [then-branch: 5460 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 29
(push) ; 29
; [else-branch: 5460 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [exec]
; p4_7 := p4_5 &&
;   (!break2_1 && !except2_1 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_5 && (!break2_1 && !except2_1 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 5461 | !(p4_5@806@01) | live]
; [else-branch: 5461 | p4_5@806@01 | live]
(push) ; 27
; [then-branch: 5461 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5461 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 28
; [then-branch: 5462 | break2_1@784@01 | live]
; [else-branch: 5462 | !(break2_1@784@01) | live]
(push) ; 29
; [then-branch: 5462 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 29
(push) ; 29
; [else-branch: 5462 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(push) ; 30
; [then-branch: 5463 | except2_1@778@01 | live]
; [else-branch: 5463 | !(except2_1@778@01) | live]
(push) ; 31
; [then-branch: 5463 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 31
(push) ; 31
; [else-branch: 5463 | !(except2_1@778@01)]
(assert (not except2_1@778@01))
; [eval] !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p4_7@816@01 Bool)
(assert (=
  p4_7@816@01
  (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
; [eval] p1_13 && (!break1_1 && !except1_1)
; [then-branch: 5464 | False | dead]
; [else-branch: 5464 | True | live]
(push) ; 26
; [else-branch: 5464 | True]
(pop) ; 26
; [eval] !(p1_13 && (!break1_1 && !except1_1))
; [eval] p1_13 && (!break1_1 && !except1_1)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5465 | True | live]
; [else-branch: 5465 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 5465 | True]
; [eval] p2_13 && (!break2_1 && !except2_1)
; [then-branch: 5466 | False | dead]
; [else-branch: 5466 | True | live]
(push) ; 27
; [else-branch: 5466 | True]
(pop) ; 27
; [eval] !(p2_13 && (!break2_1 && !except2_1))
; [eval] p2_13 && (!break2_1 && !except2_1)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5467 | True | live]
; [else-branch: 5467 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 5467 | True]
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 28
; [then-branch: 5468 | !(p3_5@805@01) | live]
; [else-branch: 5468 | p3_5@805@01 | live]
(push) ; 29
; [then-branch: 5468 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 29
(push) ; 29
; [else-branch: 5468 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 30
; [then-branch: 5469 | break1_1@783@01 | live]
; [else-branch: 5469 | !(break1_1@783@01) | live]
(push) ; 31
; [then-branch: 5469 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 31
(push) ; 31
; [else-branch: 5469 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 5470 | False | dead]
; [else-branch: 5470 | True | live]
(push) ; 28
; [else-branch: 5470 | True]
(pop) ; 28
; [eval] !(p3_5 && (!break1_1 && !except1_1))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 28
; [then-branch: 5471 | !(p3_5@805@01) | live]
; [else-branch: 5471 | p3_5@805@01 | live]
(push) ; 29
; [then-branch: 5471 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 29
(push) ; 29
; [else-branch: 5471 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 30
; [then-branch: 5472 | break1_1@783@01 | live]
; [else-branch: 5472 | !(break1_1@783@01) | live]
(push) ; 31
; [then-branch: 5472 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 31
(push) ; 31
; [else-branch: 5472 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5473 | True | live]
; [else-branch: 5473 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 5473 | True]
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 29
; [then-branch: 5474 | !(p4_5@806@01) | live]
; [else-branch: 5474 | p4_5@806@01 | live]
(push) ; 30
; [then-branch: 5474 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 30
(push) ; 30
; [else-branch: 5474 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 31
; [then-branch: 5475 | break2_1@784@01 | live]
; [else-branch: 5475 | !(break2_1@784@01) | live]
(push) ; 32
; [then-branch: 5475 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 32
(push) ; 32
; [else-branch: 5475 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p4_5@806@01 (and p4_5@806@01 (or (not break2_1@784@01) break2_1@784@01))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5476 | p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
; [else-branch: 5476 | !(p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 5476 | p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01))))
; [exec]
; c_6_0.Container_valuep := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 30
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 30
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_valuep@817@01 $Ref)
(assert (= Container_valuep@817@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 30
; [then-branch: 5477 | !(p3_5@805@01) | live]
; [else-branch: 5477 | p3_5@805@01 | live]
(push) ; 31
; [then-branch: 5477 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 31
(push) ; 31
; [else-branch: 5477 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 32
; [then-branch: 5478 | break1_1@783@01 | live]
; [else-branch: 5478 | !(break1_1@783@01) | live]
(push) ; 33
; [then-branch: 5478 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 33
(push) ; 33
; [else-branch: 5478 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 5479 | False | dead]
; [else-branch: 5479 | True | live]
(push) ; 30
; [else-branch: 5479 | True]
(pop) ; 30
; [eval] !(p3_5 && (!break1_1 && !except1_1))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 30
; [then-branch: 5480 | !(p3_5@805@01) | live]
; [else-branch: 5480 | p3_5@805@01 | live]
(push) ; 31
; [then-branch: 5480 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 31
(push) ; 31
; [else-branch: 5480 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 32
; [then-branch: 5481 | break1_1@783@01 | live]
; [else-branch: 5481 | !(break1_1@783@01) | live]
(push) ; 33
; [then-branch: 5481 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 33
(push) ; 33
; [else-branch: 5481 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5482 | True | live]
; [else-branch: 5482 | False | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 5482 | True]
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 31
; [then-branch: 5483 | !(p4_5@806@01) | live]
; [else-branch: 5483 | p4_5@806@01 | live]
(push) ; 32
; [then-branch: 5483 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 32
(push) ; 32
; [else-branch: 5483 | p4_5@806@01]
; [eval] !break2_1
(push) ; 33
; [then-branch: 5484 | break2_1@784@01 | live]
; [else-branch: 5484 | !(break2_1@784@01) | live]
(push) ; 34
; [then-branch: 5484 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 34
(push) ; 34
; [else-branch: 5484 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (=> p4_5@806@01 (or (not break2_1@784@01) break2_1@784@01)))
(push) ; 31
(set-option :timeout 10)
(assert (not (not (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5485 | p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
; [else-branch: 5485 | !(p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 5485 | p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01))))
; [exec]
; break2_1 := true
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 32
; [then-branch: 5486 | !(p1_10@801@01) | live]
; [else-branch: 5486 | p1_10@801@01 | live]
(push) ; 33
; [then-branch: 5486 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 33
(push) ; 33
; [else-branch: 5486 | p1_10@801@01]
; [eval] !break1_1
(push) ; 34
; [then-branch: 5487 | break1_1@783@01 | live]
; [else-branch: 5487 | !(break1_1@783@01) | live]
(push) ; 35
; [then-branch: 5487 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 35
(push) ; 35
; [else-branch: 5487 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (=> p1_10@801@01 (or (not break1_1@783@01) break1_1@783@01)))
; [then-branch: 5488 | False | dead]
; [else-branch: 5488 | True | live]
(push) ; 32
; [else-branch: 5488 | True]
(pop) ; 32
; [eval] !(p1_10 && (!break1_1 && !except1_1))
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 32
; [then-branch: 5489 | !(p1_10@801@01) | live]
; [else-branch: 5489 | p1_10@801@01 | live]
(push) ; 33
; [then-branch: 5489 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 33
(push) ; 33
; [else-branch: 5489 | p1_10@801@01]
; [eval] !break1_1
(push) ; 34
; [then-branch: 5490 | break1_1@783@01 | live]
; [else-branch: 5490 | !(break1_1@783@01) | live]
(push) ; 35
; [then-branch: 5490 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 35
(push) ; 35
; [else-branch: 5490 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5491 | True | live]
; [else-branch: 5491 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 5491 | True]
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 33
; [then-branch: 5492 | !(p2_10@802@01) | live]
; [else-branch: 5492 | p2_10@802@01 | live]
(push) ; 34
; [then-branch: 5492 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 34
(push) ; 34
; [else-branch: 5492 | p2_10@802@01]
; [eval] !break2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 5493 | False | dead]
; [else-branch: 5493 | True | live]
(push) ; 33
; [else-branch: 5493 | True]
(pop) ; 33
; [eval] !(p2_10 && (!break2_1 && !except2_1))
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 33
; [then-branch: 5494 | !(p2_10@802@01) | live]
; [else-branch: 5494 | p2_10@802@01 | live]
(push) ; 34
; [then-branch: 5494 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 34
(push) ; 34
; [else-branch: 5494 | p2_10@802@01]
; [eval] !break2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5495 | True | live]
; [else-branch: 5495 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 5495 | True]
; [exec]
; assert (p1_10 && (!break1_1 && !except1_1) ==>
;   _loop_termination_flag_1 ==> !true) &&
;   (p2_10 && (!break2_1 && !except2_1) ==>
;   _loop_termination_flag_1_0 ==> !true)
; [eval] p1_10 && (!break1_1 && !except1_1) ==> _loop_termination_flag_1 ==> !true
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 34
; [then-branch: 5496 | !(p1_10@801@01) | live]
; [else-branch: 5496 | p1_10@801@01 | live]
(push) ; 35
; [then-branch: 5496 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5496 | p1_10@801@01]
; [eval] !break1_1
(push) ; 36
; [then-branch: 5497 | break1_1@783@01 | live]
; [else-branch: 5497 | !(break1_1@783@01) | live]
(push) ; 37
; [then-branch: 5497 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 37
(push) ; 37
; [else-branch: 5497 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 5498 | False | dead]
; [else-branch: 5498 | True | live]
(push) ; 35
; [else-branch: 5498 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_10 && (!break2_1 && !except2_1) ==> _loop_termination_flag_1_0 ==> !true
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 34
; [then-branch: 5499 | !(p2_10@802@01) | live]
; [else-branch: 5499 | p2_10@802@01 | live]
(push) ; 35
; [then-branch: 5499 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5499 | p2_10@802@01]
; [eval] !break2_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 5500 | False | dead]
; [else-branch: 5500 | True | live]
(push) ; 35
; [else-branch: 5500 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_9 && !bypass1_1 ==> true
; [eval] p1_9 && !bypass1_1
(push) ; 34
; [then-branch: 5501 | !(p1_9@689@01) | live]
; [else-branch: 5501 | p1_9@689@01 | live]
(push) ; 35
; [then-branch: 5501 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5501 | p1_9@689@01]
(assert p1_9@689@01)
; [eval] !bypass1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5502 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5502 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 5502 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> true
; [eval] p2_9 && !bypass2_1
(push) ; 34
; [then-branch: 5503 | !(p2_9@690@01) | live]
; [else-branch: 5503 | p2_9@690@01 | live]
(push) ; 35
; [then-branch: 5503 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5503 | p2_9@690@01]
(assert p2_9@690@01)
; [eval] !bypass2_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5504 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5504 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 5504 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1
(push) ; 34
; [then-branch: 5505 | !(p1_9@689@01) | live]
; [else-branch: 5505 | p1_9@689@01 | live]
(push) ; 35
; [then-branch: 5505 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5505 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5506 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5506 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 5506 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1
(push) ; 35
; [then-branch: 5507 | !(p2_9@690@01) | live]
; [else-branch: 5507 | p2_9@690@01 | live]
(push) ; 36
; [then-branch: 5507 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 36
(push) ; 36
; [else-branch: 5507 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5508 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5508 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 5508 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1 ==> issubtype(typeof(c_6.Container_value), int())
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 5509 | !(p1_9@689@01) | live]
; [else-branch: 5509 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 5509 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5509 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5510 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5510 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5510 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] issubtype(typeof(c_6.Container_value), int())
; [eval] typeof(c_6.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(push) ; 36
(assert (not (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (issubtype<Bool> (typeof<PyType> Container_value@809@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (issubtype<Bool> (typeof<PyType> Container_value@809@01) (as int<PyType>  PyType))))
; [eval] p2_9 && !bypass2_1 ==> issubtype(typeof(c_6_0.Container_valuep), int())
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 5511 | !(p2_9@690@01) | live]
; [else-branch: 5511 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 5511 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5511 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5512 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5512 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5512 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] issubtype(typeof(c_6_0.Container_valuep), int())
; [eval] typeof(c_6_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(push) ; 36
(assert (not (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@817@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@817@01) (as int<PyType>  PyType))))
; [eval] p1_9 && !bypass1_1 ==> !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 5513 | !(p1_9@689@01) | live]
; [else-branch: 5513 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 5513 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5513 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5514 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5514 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5514 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] !idle1_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5515 | True | live]
; [else-branch: 5515 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 5515 | True]
; [eval] _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1@785@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1@785@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5516 | _loop_check_before_1@785@01 | live]
; [else-branch: 5516 | !(_loop_check_before_1@785@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 5516 | _loop_check_before_1@785@01]
(assert _loop_check_before_1@785@01)
; [eval] _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 5517 | False | live]
; [else-branch: 5517 | True | live]
(push) ; 43
; [then-branch: 5517 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 5517 | True]
; [eval] perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_159)) == none
; [eval] perm(MustTerminate(_cthread_159))
(push) ; 44
; [then-branch: 5518 | False | live]
; [else-branch: 5518 | True | live]
(push) ; 45
; [then-branch: 5518 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 5518 | True]
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
(push) ; 46
; [then-branch: 5519 | False | live]
; [else-branch: 5519 | True | live]
(push) ; 47
; [then-branch: 5519 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 5519 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
(push) ; 48
; [then-branch: 5520 | False | live]
; [else-branch: 5520 | True | live]
(push) ; 49
; [then-branch: 5520 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 5520 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 5521 | False | live]
; [else-branch: 5521 | True | live]
(push) ; 51
; [then-branch: 5521 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 5521 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 5516 | !(_loop_check_before_1@785@01)]
(assert (not _loop_check_before_1@785@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (and
    p1_9@689@01
    (not bypass1_1@756@01)
    (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))))
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 5522 | !(p2_9@690@01) | live]
; [else-branch: 5522 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 5522 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5522 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5523 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5523 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5523 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5524 | True | live]
; [else-branch: 5524 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 5524 | True]
; [eval] _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1_0@786@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1_0@786@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5525 | _loop_check_before_1_0@786@01 | live]
; [else-branch: 5525 | !(_loop_check_before_1_0@786@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 5525 | _loop_check_before_1_0@786@01]
(assert _loop_check_before_1_0@786@01)
; [eval] _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 5526 | False | live]
; [else-branch: 5526 | True | live]
(push) ; 43
; [then-branch: 5526 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 5526 | True]
; [eval] perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_159_0)) == none
; [eval] perm(MustTerminate_0(_cthread_159_0))
(push) ; 44
; [then-branch: 5527 | False | live]
; [else-branch: 5527 | True | live]
(push) ; 45
; [then-branch: 5527 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 5527 | True]
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false)
(push) ; 46
; [then-branch: 5528 | False | live]
; [else-branch: 5528 | True | live]
(push) ; 47
; [then-branch: 5528 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 5528 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false)
(push) ; 48
; [then-branch: 5529 | False | live]
; [else-branch: 5529 | True | live]
(push) ; 49
; [then-branch: 5529 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 5529 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 5530 | False | live]
; [else-branch: 5530 | True | live]
(push) ; 51
; [then-branch: 5530 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 5530 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 5525 | !(_loop_check_before_1_0@786@01)]
(assert (not _loop_check_before_1_0@786@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (and
    p2_9@690@01
    (not bypass2_1@757@01)
    (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))))
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1 ==> !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 5531 | !(p1_9@689@01) | live]
; [else-branch: 5531 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 5531 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5531 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5532 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5532 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5532 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] !idle1_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5533 | True | live]
; [else-branch: 5533 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 5533 | True]
; [eval] !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_1
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1@785@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1@785@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5534 | !(_loop_check_before_1@785@01) | live]
; [else-branch: 5534 | _loop_check_before_1@785@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 5534 | !(_loop_check_before_1@785@01)]
(assert (not _loop_check_before_1@785@01))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
(push) ; 42
; [then-branch: 5535 | False | live]
; [else-branch: 5535 | True | live]
(push) ; 43
; [then-branch: 5535 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 5535 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
(push) ; 44
; [then-branch: 5536 | False | live]
; [else-branch: 5536 | True | live]
(push) ; 45
; [then-branch: 5536 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 5536 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 5537 | False | live]
; [else-branch: 5537 | True | live]
(push) ; 47
; [then-branch: 5537 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 5537 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 5534 | _loop_check_before_1@785@01]
(assert _loop_check_before_1@785@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (and
    p1_9@689@01
    (not bypass1_1@756@01)
    (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))))
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 5538 | !(p2_9@690@01) | live]
; [else-branch: 5538 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 5538 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5538 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5539 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5539 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5539 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5540 | True | live]
; [else-branch: 5540 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 5540 | True]
; [eval] !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_1_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1_0@786@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1_0@786@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5541 | !(_loop_check_before_1_0@786@01) | live]
; [else-branch: 5541 | _loop_check_before_1_0@786@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 5541 | !(_loop_check_before_1_0@786@01)]
(assert (not _loop_check_before_1_0@786@01))
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false)
(push) ; 42
; [then-branch: 5542 | False | live]
; [else-branch: 5542 | True | live]
(push) ; 43
; [then-branch: 5542 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 5542 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false)
(push) ; 44
; [then-branch: 5543 | False | live]
; [else-branch: 5543 | True | live]
(push) ; 45
; [then-branch: 5543 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 5543 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 5544 | False | live]
; [else-branch: 5544 | True | live]
(push) ; 47
; [then-branch: 5544 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 5544 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 5541 | _loop_check_before_1_0@786@01]
(assert _loop_check_before_1_0@786@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (and
    p2_9@690@01
    (not bypass2_1@757@01)
    (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))))
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] bypass1_1 ==> tmp1_13 == except1_1
(push) ; 36
; [then-branch: 5545 | bypass1_1@756@01 | dead]
; [else-branch: 5545 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5545 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_16 == break1_1
(push) ; 36
; [then-branch: 5546 | bypass1_1@756@01 | dead]
; [else-branch: 5546 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5546 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_11 == _loop_measures_1
(push) ; 36
; [then-branch: 5547 | bypass1_1@756@01 | dead]
; [else-branch: 5547 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5547 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_14 == _err
(push) ; 36
; [then-branch: 5548 | bypass1_1@756@01 | dead]
; [else-branch: 5548 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5548 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_15 == _loop_check_before_1
(push) ; 36
; [then-branch: 5549 | bypass1_1@756@01 | dead]
; [else-branch: 5549 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5549 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_12 == Exception_res_1
(push) ; 36
; [then-branch: 5550 | bypass1_1@756@01 | dead]
; [else-branch: 5550 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5550 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_11 == _loop_measures_1_0
(push) ; 36
; [then-branch: 5551 | bypass2_1@757@01 | dead]
; [else-branch: 5551 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5551 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_15 == _loop_check_before_1_0
(push) ; 36
; [then-branch: 5552 | bypass2_1@757@01 | dead]
; [else-branch: 5552 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5552 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_12 == Exception_res_1_0
(push) ; 36
; [then-branch: 5553 | bypass2_1@757@01 | dead]
; [else-branch: 5553 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5553 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_14 == _err_2
(push) ; 36
; [then-branch: 5554 | bypass2_1@757@01 | dead]
; [else-branch: 5554 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5554 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_13 == except2_1
(push) ; 36
; [then-branch: 5555 | bypass2_1@757@01 | dead]
; [else-branch: 5555 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5555 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_16 == break2_1
(push) ; 36
; [then-branch: 5556 | bypass2_1@757@01 | dead]
; [else-branch: 5556 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5556 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
; [eval] !(p4_5 && (!break2_1 && !except2_1))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 31
; [then-branch: 5557 | !(p4_5@806@01) | live]
; [else-branch: 5557 | p4_5@806@01 | live]
(push) ; 32
; [then-branch: 5557 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 32
(push) ; 32
; [else-branch: 5557 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 33
; [then-branch: 5558 | break2_1@784@01 | live]
; [else-branch: 5558 | !(break2_1@784@01) | live]
(push) ; 34
; [then-branch: 5558 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 34
(push) ; 34
; [else-branch: 5558 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5559 | !(p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
; [else-branch: 5559 | p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
(set-option :timeout 0)
(push) ; 31
; [else-branch: 5559 | p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01))))
(pop) ; 31
(pop) ; 30
(pop) ; 29
; [eval] !(p4_5 && (!break2_1 && !except2_1))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 29
; [then-branch: 5560 | !(p4_5@806@01) | live]
; [else-branch: 5560 | p4_5@806@01 | live]
(push) ; 30
; [then-branch: 5560 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 30
(push) ; 30
; [else-branch: 5560 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 31
; [then-branch: 5561 | break2_1@784@01 | live]
; [else-branch: 5561 | !(break2_1@784@01) | live]
(push) ; 32
; [then-branch: 5561 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 32
(push) ; 32
; [else-branch: 5561 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5562 | !(p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
; [else-branch: 5562 | p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 5562 | p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01))))
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 24
; [then-branch: 5563 | !(p1_11@803@01) | live]
; [else-branch: 5563 | p1_11@803@01 | live]
(push) ; 25
; [then-branch: 5563 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5563 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 26
; [then-branch: 5564 | break1_1@783@01 | live]
; [else-branch: 5564 | !(break1_1@783@01) | live]
(push) ; 27
; [then-branch: 5564 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 27
(push) ; 27
; [else-branch: 5564 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5565 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
; [else-branch: 5565 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 5565 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))
(pop) ; 24
(pop) ; 23
(pop) ; 22
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 22
; [then-branch: 5566 | !(p1_11@803@01) | live]
; [else-branch: 5566 | p1_11@803@01 | live]
(push) ; 23
; [then-branch: 5566 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 23
(push) ; 23
; [else-branch: 5566 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 24
; [then-branch: 5567 | break1_1@783@01 | live]
; [else-branch: 5567 | !(break1_1@783@01) | live]
(push) ; 25
; [then-branch: 5567 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 25
(push) ; 25
; [else-branch: 5567 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5568 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
; [else-branch: 5568 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 5568 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))
(pop) ; 22
(pop) ; 21
(pop) ; 20
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 20
; [then-branch: 5569 | !(p1_11@803@01) | live]
; [else-branch: 5569 | p1_11@803@01 | live]
(push) ; 21
; [then-branch: 5569 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 21
(push) ; 21
; [else-branch: 5569 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 22
; [then-branch: 5570 | break1_1@783@01 | live]
; [else-branch: 5570 | !(break1_1@783@01) | live]
(push) ; 23
; [then-branch: 5570 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 23
(push) ; 23
; [else-branch: 5570 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5571 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
; [else-branch: 5571 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 5571 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 5426 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))
(pop) ; 19
(pop) ; 18
(push) ; 18
; [else-branch: 5274 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(pop) ; 18
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 18
; [then-branch: 5572 | !(p1_11@803@01) | live]
; [else-branch: 5572 | p1_11@803@01 | live]
(push) ; 19
; [then-branch: 5572 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 19
(push) ; 19
; [else-branch: 5572 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 20
; [then-branch: 5573 | break1_1@783@01 | live]
; [else-branch: 5573 | !(break1_1@783@01) | live]
(push) ; 21
; [then-branch: 5573 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5573 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5574 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 5574 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 5574 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 19
; [then-branch: 5575 | !(p2_11@804@01) | live]
; [else-branch: 5575 | p2_11@804@01 | live]
(push) ; 20
; [then-branch: 5575 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 20
(push) ; 20
; [else-branch: 5575 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 21
; [then-branch: 5576 | break2_1@784@01 | live]
; [else-branch: 5576 | !(break2_1@784@01) | live]
(push) ; 22
; [then-branch: 5576 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 22
(push) ; 22
; [else-branch: 5576 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=> p2_11@804@01 (and p2_11@804@01 (or (not break2_1@784@01) break2_1@784@01))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5577 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
; [else-branch: 5577 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 5577 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))
; [exec]
; c_6_0.Container_valuep := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(declare-const Container_valuep@818@01 $Ref)
(assert (= Container_valuep@818@01 (__prim__int___box__ $Snap.unit 7)))
; [exec]
; tmp_1 := new()
(declare-const tmp_1@819@01 $Ref)
(assert (not (= tmp_1@819@01 $Ref.null)))
(assert (not (= tmp_1@819@01 c_1@697@01)))
(assert (not (= tmp_1@819@01 tmp2_14@740@01)))
(assert (not (= tmp_1@819@01 c_1_0@698@01)))
(assert (not (= tmp_1@819@01 tmp1_12@735@01)))
(assert (not (= tmp_1@819@01 tmp1_14@739@01)))
(assert (not (= tmp_1@819@01 _cthread_159_0@692@01)))
(assert (not (= tmp_1@819@01 _err@775@01)))
(assert (not (= tmp_1@819@01 Exception_res_1_0@774@01)))
(assert (not (= tmp_1@819@01 Container_valuep@818@01)))
(assert (not (= tmp_1@819@01 b_1@699@01)))
(assert (not (= tmp_1@819@01 _err_2@777@01)))
(assert (not (= tmp_1@819@01 Exception_res_1@773@01)))
(assert (not (= tmp_1@819@01 tmp2_12@736@01)))
(assert (not
  (=
    tmp_1@819@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@787@01)))))))
(assert (not (= tmp_1@819@01 b_1_0@700@01)))
(assert (not (= tmp_1@819@01 _cthread_159@691@01)))
(assert (not (= tmp_1@819@01 tmp_1@796@01)))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 20
; [then-branch: 5578 | !(p1_11@803@01) | live]
; [else-branch: 5578 | p1_11@803@01 | live]
(push) ; 21
; [then-branch: 5578 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 21
(push) ; 21
; [else-branch: 5578 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 22
; [then-branch: 5579 | break1_1@783@01 | live]
; [else-branch: 5579 | !(break1_1@783@01) | live]
(push) ; 23
; [then-branch: 5579 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 23
(push) ; 23
; [else-branch: 5579 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 5580 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 5580 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(push) ; 20
; [else-branch: 5580 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(pop) ; 20
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 20
; [then-branch: 5581 | !(p1_11@803@01) | live]
; [else-branch: 5581 | p1_11@803@01 | live]
(push) ; 21
; [then-branch: 5581 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 21
(push) ; 21
; [else-branch: 5581 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 22
; [then-branch: 5582 | break1_1@783@01 | live]
; [else-branch: 5582 | !(break1_1@783@01) | live]
(push) ; 23
; [then-branch: 5582 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 23
(push) ; 23
; [else-branch: 5582 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5583 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 5583 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 5583 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01))]
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 21
; [then-branch: 5584 | !(p2_11@804@01) | live]
; [else-branch: 5584 | p2_11@804@01 | live]
(push) ; 22
; [then-branch: 5584 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 22
(push) ; 22
; [else-branch: 5584 | p2_11@804@01]
; [eval] !break2_1
(push) ; 23
; [then-branch: 5585 | break2_1@784@01 | live]
; [else-branch: 5585 | !(break2_1@784@01) | live]
(push) ; 24
; [then-branch: 5585 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 24
(push) ; 24
; [else-branch: 5585 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (=> p2_11@804@01 (or (not break2_1@784@01) break2_1@784@01)))
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5586 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
; [else-branch: 5586 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 5586 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))
; [exec]
; Exception_res_1_0 := tmp_1
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 22
; [then-branch: 5587 | !(p1_11@803@01) | live]
; [else-branch: 5587 | p1_11@803@01 | live]
(push) ; 23
; [then-branch: 5587 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 23
(push) ; 23
; [else-branch: 5587 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 24
; [then-branch: 5588 | break1_1@783@01 | live]
; [else-branch: 5588 | !(break1_1@783@01) | live]
(push) ; 25
; [then-branch: 5588 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 25
(push) ; 25
; [else-branch: 5588 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 5589 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 5589 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(push) ; 22
; [else-branch: 5589 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(pop) ; 22
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 22
; [then-branch: 5590 | !(p1_11@803@01) | live]
; [else-branch: 5590 | p1_11@803@01 | live]
(push) ; 23
; [then-branch: 5590 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 23
(push) ; 23
; [else-branch: 5590 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 24
; [then-branch: 5591 | break1_1@783@01 | live]
; [else-branch: 5591 | !(break1_1@783@01) | live]
(push) ; 25
; [then-branch: 5591 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 25
(push) ; 25
; [else-branch: 5591 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5592 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 5592 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 5592 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01))]
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 23
; [then-branch: 5593 | !(p2_11@804@01) | live]
; [else-branch: 5593 | p2_11@804@01 | live]
(push) ; 24
; [then-branch: 5593 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 24
(push) ; 24
; [else-branch: 5593 | p2_11@804@01]
; [eval] !break2_1
(push) ; 25
; [then-branch: 5594 | break2_1@784@01 | live]
; [else-branch: 5594 | !(break2_1@784@01) | live]
(push) ; 26
; [then-branch: 5594 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 26
(push) ; 26
; [else-branch: 5594 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5595 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
; [else-branch: 5595 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 5595 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))
; [exec]
; inhale typeof(Exception_res_1_0) == Exception()
(declare-const $t@820@01 $Snap)
(assert (= $t@820@01 $Snap.unit))
; [eval] typeof(Exception_res_1_0) == Exception()
; [eval] typeof(Exception_res_1_0)
; [eval] Exception()
(assert (= (typeof<PyType> tmp_1@819@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_11 && (!break1_1 && !except1_1)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 5596 | !(p1_11@803@01) | live]
; [else-branch: 5596 | p1_11@803@01 | live]
(push) ; 25
; [then-branch: 5596 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5596 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 26
; [then-branch: 5597 | break1_1@783@01 | live]
; [else-branch: 5597 | !(break1_1@783@01) | live]
(push) ; 27
; [then-branch: 5597 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 27
(push) ; 27
; [else-branch: 5597 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 5598 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 5598 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(push) ; 24
; [else-branch: 5598 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(pop) ; 24
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 24
; [then-branch: 5599 | !(p1_11@803@01) | live]
; [else-branch: 5599 | p1_11@803@01 | live]
(push) ; 25
; [then-branch: 5599 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5599 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 26
; [then-branch: 5600 | break1_1@783@01 | live]
; [else-branch: 5600 | !(break1_1@783@01) | live]
(push) ; 27
; [then-branch: 5600 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 27
(push) ; 27
; [else-branch: 5600 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5601 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 5601 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 5601 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01))]
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 25
; [then-branch: 5602 | !(p2_11@804@01) | live]
; [else-branch: 5602 | p2_11@804@01 | live]
(push) ; 26
; [then-branch: 5602 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 26
(push) ; 26
; [else-branch: 5602 | p2_11@804@01]
; [eval] !break2_1
(push) ; 27
; [then-branch: 5603 | break2_1@784@01 | live]
; [else-branch: 5603 | !(break2_1@784@01) | live]
(push) ; 28
; [then-branch: 5603 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 28
(push) ; 28
; [else-branch: 5603 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5604 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
; [else-branch: 5604 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5604 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))
; [exec]
; _err_2 := Exception_res_1_0
; [exec]
; except2_1 := true
; [exec]
; p1_13 := p3_5 &&
;   (!break1_1 && !except1_1 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p3_5 && (!break1_1 && !except1_1 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 5605 | !(p3_5@805@01) | live]
; [else-branch: 5605 | p3_5@805@01 | live]
(push) ; 27
; [then-branch: 5605 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5605 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 28
; [then-branch: 5606 | break1_1@783@01 | live]
; [else-branch: 5606 | !(break1_1@783@01) | live]
(push) ; 29
; [then-branch: 5606 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 29
(push) ; 29
; [else-branch: 5606 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 30
; [then-branch: 5607 | except1_1@776@01 | live]
; [else-branch: 5607 | !(except1_1@776@01) | live]
(push) ; 31
; [then-branch: 5607 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 31
(push) ; 31
; [else-branch: 5607 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p3_5@805@01
  (and
    p3_5@805@01
    (=>
      (not break1_1@783@01)
      (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01)))
    (or (not break1_1@783@01) break1_1@783@01))))
(assert (or p3_5@805@01 (not p3_5@805@01)))
; [exec]
; p2_13 := p4_5 &&
;   (!break2_1 && !except2_1 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_5 && (!break2_1 && !except2_1 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 5608 | !(p4_5@806@01) | live]
; [else-branch: 5608 | p4_5@806@01 | live]
(push) ; 27
; [then-branch: 5608 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5608 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 28
; [then-branch: 5609 | break2_1@784@01 | live]
; [else-branch: 5609 | !(break2_1@784@01) | live]
(push) ; 29
; [then-branch: 5609 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 29
(push) ; 29
; [else-branch: 5609 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=> p4_5@806@01 (and p4_5@806@01 (or (not break2_1@784@01) break2_1@784@01))))
(assert (or p4_5@806@01 (not p4_5@806@01)))
; [exec]
; p3_7 := p3_5 &&
;   (!break1_1 && !except1_1 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p3_5 && (!break1_1 && !except1_1 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 5610 | !(p3_5@805@01) | live]
; [else-branch: 5610 | p3_5@805@01 | live]
(push) ; 27
; [then-branch: 5610 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5610 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 28
; [then-branch: 5611 | break1_1@783@01 | live]
; [else-branch: 5611 | !(break1_1@783@01) | live]
(push) ; 29
; [then-branch: 5611 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 29
(push) ; 29
; [else-branch: 5611 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 30
; [then-branch: 5612 | except1_1@776@01 | live]
; [else-branch: 5612 | !(except1_1@776@01) | live]
(push) ; 31
; [then-branch: 5612 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 31
(push) ; 31
; [else-branch: 5612 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p3_7@821@01 Bool)
(assert (=
  p3_7@821@01
  (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
; [exec]
; p4_7 := p4_5 &&
;   (!break2_1 && !except2_1 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_5 && (!break2_1 && !except2_1 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 5613 | !(p4_5@806@01) | live]
; [else-branch: 5613 | p4_5@806@01 | live]
(push) ; 27
; [then-branch: 5613 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5613 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 28
; [then-branch: 5614 | break2_1@784@01 | live]
; [else-branch: 5614 | !(break2_1@784@01) | live]
(push) ; 29
; [then-branch: 5614 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 29
(push) ; 29
; [else-branch: 5614 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [eval] p1_13 && (!break1_1 && !except1_1)
; [then-branch: 5615 | False | dead]
; [else-branch: 5615 | True | live]
(push) ; 26
; [else-branch: 5615 | True]
(pop) ; 26
; [eval] !(p1_13 && (!break1_1 && !except1_1))
; [eval] p1_13 && (!break1_1 && !except1_1)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5616 | True | live]
; [else-branch: 5616 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 5616 | True]
; [eval] p2_13 && (!break2_1 && !except2_1)
; [then-branch: 5617 | False | dead]
; [else-branch: 5617 | True | live]
(push) ; 27
; [else-branch: 5617 | True]
(pop) ; 27
; [eval] !(p2_13 && (!break2_1 && !except2_1))
; [eval] p2_13 && (!break2_1 && !except2_1)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5618 | True | live]
; [else-branch: 5618 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 5618 | True]
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 28
; [then-branch: 5619 | !(p3_5@805@01) | live]
; [else-branch: 5619 | p3_5@805@01 | live]
(push) ; 29
; [then-branch: 5619 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 29
(push) ; 29
; [else-branch: 5619 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 30
; [then-branch: 5620 | break1_1@783@01 | live]
; [else-branch: 5620 | !(break1_1@783@01) | live]
(push) ; 31
; [then-branch: 5620 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 31
(push) ; 31
; [else-branch: 5620 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=> p3_5@805@01 (and p3_5@805@01 (or (not break1_1@783@01) break1_1@783@01))))
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5621 | p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
; [else-branch: 5621 | !(p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 5621 | p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01))))
; [exec]
; c_6.Container_value := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 29
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 29
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_value@822@01 $Ref)
(assert (= Container_value@822@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 29
; [then-branch: 5622 | !(p4_5@806@01) | live]
; [else-branch: 5622 | p4_5@806@01 | live]
(push) ; 30
; [then-branch: 5622 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 30
(push) ; 30
; [else-branch: 5622 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 31
; [then-branch: 5623 | break2_1@784@01 | live]
; [else-branch: 5623 | !(break2_1@784@01) | live]
(push) ; 32
; [then-branch: 5623 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 32
(push) ; 32
; [else-branch: 5623 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 5624 | False | dead]
; [else-branch: 5624 | True | live]
(push) ; 29
; [else-branch: 5624 | True]
(pop) ; 29
; [eval] !(p4_5 && (!break2_1 && !except2_1))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 29
; [then-branch: 5625 | !(p4_5@806@01) | live]
; [else-branch: 5625 | p4_5@806@01 | live]
(push) ; 30
; [then-branch: 5625 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 30
(push) ; 30
; [else-branch: 5625 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 31
; [then-branch: 5626 | break2_1@784@01 | live]
; [else-branch: 5626 | !(break2_1@784@01) | live]
(push) ; 32
; [then-branch: 5626 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 32
(push) ; 32
; [else-branch: 5626 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5627 | True | live]
; [else-branch: 5627 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 5627 | True]
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 30
; [then-branch: 5628 | !(p3_5@805@01) | live]
; [else-branch: 5628 | p3_5@805@01 | live]
(push) ; 31
; [then-branch: 5628 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 31
(push) ; 31
; [else-branch: 5628 | p3_5@805@01]
; [eval] !break1_1
(push) ; 32
; [then-branch: 5629 | break1_1@783@01 | live]
; [else-branch: 5629 | !(break1_1@783@01) | live]
(push) ; 33
; [then-branch: 5629 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 33
(push) ; 33
; [else-branch: 5629 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (=> p3_5@805@01 (or (not break1_1@783@01) break1_1@783@01)))
(push) ; 30
(set-option :timeout 10)
(assert (not (not (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5630 | p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
; [else-branch: 5630 | !(p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 5630 | p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01))))
; [exec]
; break1_1 := true
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 31
; [then-branch: 5631 | !(p4_5@806@01) | live]
; [else-branch: 5631 | p4_5@806@01 | live]
(push) ; 32
; [then-branch: 5631 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 32
(push) ; 32
; [else-branch: 5631 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 33
; [then-branch: 5632 | break2_1@784@01 | live]
; [else-branch: 5632 | !(break2_1@784@01) | live]
(push) ; 34
; [then-branch: 5632 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 34
(push) ; 34
; [else-branch: 5632 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 5633 | False | dead]
; [else-branch: 5633 | True | live]
(push) ; 31
; [else-branch: 5633 | True]
(pop) ; 31
; [eval] !(p4_5 && (!break2_1 && !except2_1))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 31
; [then-branch: 5634 | !(p4_5@806@01) | live]
; [else-branch: 5634 | p4_5@806@01 | live]
(push) ; 32
; [then-branch: 5634 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 32
(push) ; 32
; [else-branch: 5634 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 33
; [then-branch: 5635 | break2_1@784@01 | live]
; [else-branch: 5635 | !(break2_1@784@01) | live]
(push) ; 34
; [then-branch: 5635 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 34
(push) ; 34
; [else-branch: 5635 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5636 | True | live]
; [else-branch: 5636 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 5636 | True]
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 32
; [then-branch: 5637 | !(p1_10@801@01) | live]
; [else-branch: 5637 | p1_10@801@01 | live]
(push) ; 33
; [then-branch: 5637 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 33
(push) ; 33
; [else-branch: 5637 | p1_10@801@01]
; [eval] !break1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 5638 | False | dead]
; [else-branch: 5638 | True | live]
(push) ; 32
; [else-branch: 5638 | True]
(pop) ; 32
; [eval] !(p1_10 && (!break1_1 && !except1_1))
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 32
; [then-branch: 5639 | !(p1_10@801@01) | live]
; [else-branch: 5639 | p1_10@801@01 | live]
(push) ; 33
; [then-branch: 5639 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 33
(push) ; 33
; [else-branch: 5639 | p1_10@801@01]
; [eval] !break1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5640 | True | live]
; [else-branch: 5640 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 5640 | True]
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 33
; [then-branch: 5641 | !(p2_10@802@01) | live]
; [else-branch: 5641 | p2_10@802@01 | live]
(push) ; 34
; [then-branch: 5641 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 34
(push) ; 34
; [else-branch: 5641 | p2_10@802@01]
; [eval] !break2_1
(push) ; 35
; [then-branch: 5642 | break2_1@784@01 | live]
; [else-branch: 5642 | !(break2_1@784@01) | live]
(push) ; 36
; [then-branch: 5642 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 36
(push) ; 36
; [else-branch: 5642 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (=> p2_10@802@01 (or (not break2_1@784@01) break2_1@784@01)))
; [then-branch: 5643 | False | dead]
; [else-branch: 5643 | True | live]
(push) ; 33
; [else-branch: 5643 | True]
(pop) ; 33
; [eval] !(p2_10 && (!break2_1 && !except2_1))
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 33
; [then-branch: 5644 | !(p2_10@802@01) | live]
; [else-branch: 5644 | p2_10@802@01 | live]
(push) ; 34
; [then-branch: 5644 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 34
(push) ; 34
; [else-branch: 5644 | p2_10@802@01]
; [eval] !break2_1
(push) ; 35
; [then-branch: 5645 | break2_1@784@01 | live]
; [else-branch: 5645 | !(break2_1@784@01) | live]
(push) ; 36
; [then-branch: 5645 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 36
(push) ; 36
; [else-branch: 5645 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5646 | True | live]
; [else-branch: 5646 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 5646 | True]
; [exec]
; assert (p1_10 && (!break1_1 && !except1_1) ==>
;   _loop_termination_flag_1 ==> !true) &&
;   (p2_10 && (!break2_1 && !except2_1) ==>
;   _loop_termination_flag_1_0 ==> !true)
; [eval] p1_10 && (!break1_1 && !except1_1) ==> _loop_termination_flag_1 ==> !true
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 34
; [then-branch: 5647 | !(p1_10@801@01) | live]
; [else-branch: 5647 | p1_10@801@01 | live]
(push) ; 35
; [then-branch: 5647 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5647 | p1_10@801@01]
; [eval] !break1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 5648 | False | dead]
; [else-branch: 5648 | True | live]
(push) ; 35
; [else-branch: 5648 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_10 && (!break2_1 && !except2_1) ==> _loop_termination_flag_1_0 ==> !true
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 34
; [then-branch: 5649 | !(p2_10@802@01) | live]
; [else-branch: 5649 | p2_10@802@01 | live]
(push) ; 35
; [then-branch: 5649 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5649 | p2_10@802@01]
; [eval] !break2_1
(push) ; 36
; [then-branch: 5650 | break2_1@784@01 | live]
; [else-branch: 5650 | !(break2_1@784@01) | live]
(push) ; 37
; [then-branch: 5650 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 37
(push) ; 37
; [else-branch: 5650 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 5651 | False | dead]
; [else-branch: 5651 | True | live]
(push) ; 35
; [else-branch: 5651 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_9 && !bypass1_1 ==> true
; [eval] p1_9 && !bypass1_1
(push) ; 34
; [then-branch: 5652 | !(p1_9@689@01) | live]
; [else-branch: 5652 | p1_9@689@01 | live]
(push) ; 35
; [then-branch: 5652 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5652 | p1_9@689@01]
(assert p1_9@689@01)
; [eval] !bypass1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5653 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5653 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 5653 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> true
; [eval] p2_9 && !bypass2_1
(push) ; 34
; [then-branch: 5654 | !(p2_9@690@01) | live]
; [else-branch: 5654 | p2_9@690@01 | live]
(push) ; 35
; [then-branch: 5654 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5654 | p2_9@690@01]
(assert p2_9@690@01)
; [eval] !bypass2_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5655 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5655 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 5655 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1
(push) ; 34
; [then-branch: 5656 | !(p1_9@689@01) | live]
; [else-branch: 5656 | p1_9@689@01 | live]
(push) ; 35
; [then-branch: 5656 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5656 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5657 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5657 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 5657 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1
(push) ; 35
; [then-branch: 5658 | !(p2_9@690@01) | live]
; [else-branch: 5658 | p2_9@690@01 | live]
(push) ; 36
; [then-branch: 5658 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 36
(push) ; 36
; [else-branch: 5658 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5659 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5659 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 5659 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1 ==> issubtype(typeof(c_6.Container_value), int())
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 5660 | !(p1_9@689@01) | live]
; [else-branch: 5660 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 5660 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5660 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5661 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5661 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5661 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] issubtype(typeof(c_6.Container_value), int())
; [eval] typeof(c_6.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(push) ; 36
(assert (not (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (issubtype<Bool> (typeof<PyType> Container_value@822@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (issubtype<Bool> (typeof<PyType> Container_value@822@01) (as int<PyType>  PyType))))
; [eval] p2_9 && !bypass2_1 ==> issubtype(typeof(c_6_0.Container_valuep), int())
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 5662 | !(p2_9@690@01) | live]
; [else-branch: 5662 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 5662 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5662 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5663 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5663 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5663 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] issubtype(typeof(c_6_0.Container_valuep), int())
; [eval] typeof(c_6_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(push) ; 36
(assert (not (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@818@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@818@01) (as int<PyType>  PyType))))
; [eval] p1_9 && !bypass1_1 ==> !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 5664 | !(p1_9@689@01) | live]
; [else-branch: 5664 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 5664 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5664 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5665 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5665 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5665 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] !idle1_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5666 | True | live]
; [else-branch: 5666 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 5666 | True]
; [eval] _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1@785@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1@785@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5667 | _loop_check_before_1@785@01 | live]
; [else-branch: 5667 | !(_loop_check_before_1@785@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 5667 | _loop_check_before_1@785@01]
(assert _loop_check_before_1@785@01)
; [eval] _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 5668 | False | live]
; [else-branch: 5668 | True | live]
(push) ; 43
; [then-branch: 5668 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 5668 | True]
; [eval] perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_159)) == none
; [eval] perm(MustTerminate(_cthread_159))
(push) ; 44
; [then-branch: 5669 | False | live]
; [else-branch: 5669 | True | live]
(push) ; 45
; [then-branch: 5669 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 5669 | True]
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
(push) ; 46
; [then-branch: 5670 | False | live]
; [else-branch: 5670 | True | live]
(push) ; 47
; [then-branch: 5670 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 5670 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
(push) ; 48
; [then-branch: 5671 | False | live]
; [else-branch: 5671 | True | live]
(push) ; 49
; [then-branch: 5671 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 5671 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 5672 | False | live]
; [else-branch: 5672 | True | live]
(push) ; 51
; [then-branch: 5672 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 5672 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 5667 | !(_loop_check_before_1@785@01)]
(assert (not _loop_check_before_1@785@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (and
    p1_9@689@01
    (not bypass1_1@756@01)
    (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))))
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 5673 | !(p2_9@690@01) | live]
; [else-branch: 5673 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 5673 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5673 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5674 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5674 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5674 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5675 | True | live]
; [else-branch: 5675 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 5675 | True]
; [eval] _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1_0@786@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1_0@786@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5676 | _loop_check_before_1_0@786@01 | live]
; [else-branch: 5676 | !(_loop_check_before_1_0@786@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 5676 | _loop_check_before_1_0@786@01]
(assert _loop_check_before_1_0@786@01)
; [eval] _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 5677 | False | live]
; [else-branch: 5677 | True | live]
(push) ; 43
; [then-branch: 5677 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 5677 | True]
; [eval] perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_159_0)) == none
; [eval] perm(MustTerminate_0(_cthread_159_0))
(push) ; 44
; [then-branch: 5678 | False | live]
; [else-branch: 5678 | True | live]
(push) ; 45
; [then-branch: 5678 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 5678 | True]
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false)
(push) ; 46
; [then-branch: 5679 | False | live]
; [else-branch: 5679 | True | live]
(push) ; 47
; [then-branch: 5679 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 5679 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false)
(push) ; 48
; [then-branch: 5680 | False | live]
; [else-branch: 5680 | True | live]
(push) ; 49
; [then-branch: 5680 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 5680 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 5681 | False | live]
; [else-branch: 5681 | True | live]
(push) ; 51
; [then-branch: 5681 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 5681 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 5676 | !(_loop_check_before_1_0@786@01)]
(assert (not _loop_check_before_1_0@786@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (and
    p2_9@690@01
    (not bypass2_1@757@01)
    (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))))
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1 ==> !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 5682 | !(p1_9@689@01) | live]
; [else-branch: 5682 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 5682 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5682 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5683 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5683 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5683 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] !idle1_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5684 | True | live]
; [else-branch: 5684 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 5684 | True]
; [eval] !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_1
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1@785@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1@785@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5685 | !(_loop_check_before_1@785@01) | live]
; [else-branch: 5685 | _loop_check_before_1@785@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 5685 | !(_loop_check_before_1@785@01)]
(assert (not _loop_check_before_1@785@01))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
(push) ; 42
; [then-branch: 5686 | False | live]
; [else-branch: 5686 | True | live]
(push) ; 43
; [then-branch: 5686 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 5686 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
(push) ; 44
; [then-branch: 5687 | False | live]
; [else-branch: 5687 | True | live]
(push) ; 45
; [then-branch: 5687 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 5687 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 5688 | False | live]
; [else-branch: 5688 | True | live]
(push) ; 47
; [then-branch: 5688 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 5688 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 5685 | _loop_check_before_1@785@01]
(assert _loop_check_before_1@785@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (and
    p1_9@689@01
    (not bypass1_1@756@01)
    (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))))
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 5689 | !(p2_9@690@01) | live]
; [else-branch: 5689 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 5689 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5689 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5690 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5690 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5690 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5691 | True | live]
; [else-branch: 5691 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 5691 | True]
; [eval] !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_1_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1_0@786@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1_0@786@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5692 | !(_loop_check_before_1_0@786@01) | live]
; [else-branch: 5692 | _loop_check_before_1_0@786@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 5692 | !(_loop_check_before_1_0@786@01)]
(assert (not _loop_check_before_1_0@786@01))
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false)
(push) ; 42
; [then-branch: 5693 | False | live]
; [else-branch: 5693 | True | live]
(push) ; 43
; [then-branch: 5693 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 5693 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false)
(push) ; 44
; [then-branch: 5694 | False | live]
; [else-branch: 5694 | True | live]
(push) ; 45
; [then-branch: 5694 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 5694 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 5695 | False | live]
; [else-branch: 5695 | True | live]
(push) ; 47
; [then-branch: 5695 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 5695 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 5692 | _loop_check_before_1_0@786@01]
(assert _loop_check_before_1_0@786@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (and
    p2_9@690@01
    (not bypass2_1@757@01)
    (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))))
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] bypass1_1 ==> tmp1_13 == except1_1
(push) ; 36
; [then-branch: 5696 | bypass1_1@756@01 | dead]
; [else-branch: 5696 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5696 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_16 == break1_1
(push) ; 36
; [then-branch: 5697 | bypass1_1@756@01 | dead]
; [else-branch: 5697 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5697 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_11 == _loop_measures_1
(push) ; 36
; [then-branch: 5698 | bypass1_1@756@01 | dead]
; [else-branch: 5698 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5698 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_14 == _err
(push) ; 36
; [then-branch: 5699 | bypass1_1@756@01 | dead]
; [else-branch: 5699 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5699 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_15 == _loop_check_before_1
(push) ; 36
; [then-branch: 5700 | bypass1_1@756@01 | dead]
; [else-branch: 5700 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5700 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_12 == Exception_res_1
(push) ; 36
; [then-branch: 5701 | bypass1_1@756@01 | dead]
; [else-branch: 5701 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5701 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_11 == _loop_measures_1_0
(push) ; 36
; [then-branch: 5702 | bypass2_1@757@01 | dead]
; [else-branch: 5702 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5702 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_15 == _loop_check_before_1_0
(push) ; 36
; [then-branch: 5703 | bypass2_1@757@01 | dead]
; [else-branch: 5703 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5703 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_12 == Exception_res_1_0
(push) ; 36
; [then-branch: 5704 | bypass2_1@757@01 | dead]
; [else-branch: 5704 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5704 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_14 == _err_2
(push) ; 36
; [then-branch: 5705 | bypass2_1@757@01 | dead]
; [else-branch: 5705 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5705 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_13 == except2_1
(push) ; 36
; [then-branch: 5706 | bypass2_1@757@01 | dead]
; [else-branch: 5706 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5706 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_16 == break2_1
(push) ; 36
; [then-branch: 5707 | bypass2_1@757@01 | dead]
; [else-branch: 5707 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5707 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
; [eval] !(p3_5 && (!break1_1 && !except1_1))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 30
; [then-branch: 5708 | !(p3_5@805@01) | live]
; [else-branch: 5708 | p3_5@805@01 | live]
(push) ; 31
; [then-branch: 5708 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 31
(push) ; 31
; [else-branch: 5708 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 32
; [then-branch: 5709 | break1_1@783@01 | live]
; [else-branch: 5709 | !(break1_1@783@01) | live]
(push) ; 33
; [then-branch: 5709 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 33
(push) ; 33
; [else-branch: 5709 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5710 | !(p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
; [else-branch: 5710 | p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 5710 | p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01))))
(pop) ; 30
(pop) ; 29
(pop) ; 28
; [eval] !(p3_5 && (!break1_1 && !except1_1))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 28
; [then-branch: 5711 | !(p3_5@805@01) | live]
; [else-branch: 5711 | p3_5@805@01 | live]
(push) ; 29
; [then-branch: 5711 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 29
(push) ; 29
; [else-branch: 5711 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 30
; [then-branch: 5712 | break1_1@783@01 | live]
; [else-branch: 5712 | !(break1_1@783@01) | live]
(push) ; 31
; [then-branch: 5712 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 31
(push) ; 31
; [else-branch: 5712 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5713 | !(p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
; [else-branch: 5713 | p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 5713 | p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01))))
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 25
; [then-branch: 5714 | !(p2_11@804@01) | live]
; [else-branch: 5714 | p2_11@804@01 | live]
(push) ; 26
; [then-branch: 5714 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 26
(push) ; 26
; [else-branch: 5714 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 27
; [then-branch: 5715 | break2_1@784@01 | live]
; [else-branch: 5715 | !(break2_1@784@01) | live]
(push) ; 28
; [then-branch: 5715 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 28
(push) ; 28
; [else-branch: 5715 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5716 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
; [else-branch: 5716 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 5716 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))
(pop) ; 25
(pop) ; 24
(pop) ; 23
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 23
; [then-branch: 5717 | !(p2_11@804@01) | live]
; [else-branch: 5717 | p2_11@804@01 | live]
(push) ; 24
; [then-branch: 5717 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 24
(push) ; 24
; [else-branch: 5717 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 25
; [then-branch: 5718 | break2_1@784@01 | live]
; [else-branch: 5718 | !(break2_1@784@01) | live]
(push) ; 26
; [then-branch: 5718 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 26
(push) ; 26
; [else-branch: 5718 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5719 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
; [else-branch: 5719 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 5719 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))
(pop) ; 23
(pop) ; 22
(pop) ; 21
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 21
; [then-branch: 5720 | !(p2_11@804@01) | live]
; [else-branch: 5720 | p2_11@804@01 | live]
(push) ; 22
; [then-branch: 5720 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 22
(push) ; 22
; [else-branch: 5720 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 23
; [then-branch: 5721 | break2_1@784@01 | live]
; [else-branch: 5721 | !(break2_1@784@01) | live]
(push) ; 24
; [then-branch: 5721 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 24
(push) ; 24
; [else-branch: 5721 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5722 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
; [else-branch: 5722 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
(set-option :timeout 0)
(push) ; 21
; [else-branch: 5722 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))
(pop) ; 21
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 5577 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(pop) ; 19
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 19
; [then-branch: 5723 | !(p2_11@804@01) | live]
; [else-branch: 5723 | p2_11@804@01 | live]
(push) ; 20
; [then-branch: 5723 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 20
(push) ; 20
; [else-branch: 5723 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 21
; [then-branch: 5724 | break2_1@784@01 | live]
; [else-branch: 5724 | !(break2_1@784@01) | live]
(push) ; 22
; [then-branch: 5724 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 22
(push) ; 22
; [else-branch: 5724 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5725 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 5725 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 5725 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
; [exec]
; tmp_1 := new()
(declare-const tmp_1@823@01 $Ref)
(assert (not (= tmp_1@823@01 $Ref.null)))
(assert (not (= tmp_1@823@01 c_1@697@01)))
(assert (not (= tmp_1@823@01 tmp2_14@740@01)))
(assert (not (= tmp_1@823@01 c_1_0@698@01)))
(assert (not (= tmp_1@823@01 tmp1_12@735@01)))
(assert (not (= tmp_1@823@01 tmp1_14@739@01)))
(assert (not (= tmp_1@823@01 _cthread_159_0@692@01)))
(assert (not (= tmp_1@823@01 _err@775@01)))
(assert (not (= tmp_1@823@01 Exception_res_1_0@774@01)))
(assert (not (= tmp_1@823@01 b_1@699@01)))
(assert (not (= tmp_1@823@01 _err_2@777@01)))
(assert (not (= tmp_1@823@01 Exception_res_1@773@01)))
(assert (not (= tmp_1@823@01 tmp2_12@736@01)))
(assert (not
  (=
    tmp_1@823@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))
(assert (not
  (=
    tmp_1@823@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@787@01)))))))
(assert (not (= tmp_1@823@01 b_1_0@700@01)))
(assert (not (= tmp_1@823@01 _cthread_159@691@01)))
(assert (not (= tmp_1@823@01 tmp_1@796@01)))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 20
; [then-branch: 5726 | !(p1_11@803@01) | live]
; [else-branch: 5726 | p1_11@803@01 | live]
(push) ; 21
; [then-branch: 5726 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 21
(push) ; 21
; [else-branch: 5726 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 22
; [then-branch: 5727 | break1_1@783@01 | live]
; [else-branch: 5727 | !(break1_1@783@01) | live]
(push) ; 23
; [then-branch: 5727 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 23
(push) ; 23
; [else-branch: 5727 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 5728 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 5728 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(push) ; 20
; [else-branch: 5728 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(pop) ; 20
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 20
; [then-branch: 5729 | !(p1_11@803@01) | live]
; [else-branch: 5729 | p1_11@803@01 | live]
(push) ; 21
; [then-branch: 5729 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 21
(push) ; 21
; [else-branch: 5729 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 22
; [then-branch: 5730 | break1_1@783@01 | live]
; [else-branch: 5730 | !(break1_1@783@01) | live]
(push) ; 23
; [then-branch: 5730 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 23
(push) ; 23
; [else-branch: 5730 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5731 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 5731 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 5731 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01))]
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 21
; [then-branch: 5732 | !(p2_11@804@01) | live]
; [else-branch: 5732 | p2_11@804@01 | live]
(push) ; 22
; [then-branch: 5732 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 22
(push) ; 22
; [else-branch: 5732 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 23
; [then-branch: 5733 | break2_1@784@01 | live]
; [else-branch: 5733 | !(break2_1@784@01) | live]
(push) ; 24
; [then-branch: 5733 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 24
(push) ; 24
; [else-branch: 5733 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 5734 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 5734 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(push) ; 21
; [else-branch: 5734 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(pop) ; 21
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 21
; [then-branch: 5735 | !(p2_11@804@01) | live]
; [else-branch: 5735 | p2_11@804@01 | live]
(push) ; 22
; [then-branch: 5735 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 22
(push) ; 22
; [else-branch: 5735 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 23
; [then-branch: 5736 | break2_1@784@01 | live]
; [else-branch: 5736 | !(break2_1@784@01) | live]
(push) ; 24
; [then-branch: 5736 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 24
(push) ; 24
; [else-branch: 5736 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5737 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 5737 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 5737 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01))]
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 22
; [then-branch: 5738 | !(p1_11@803@01) | live]
; [else-branch: 5738 | p1_11@803@01 | live]
(push) ; 23
; [then-branch: 5738 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 23
(push) ; 23
; [else-branch: 5738 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 24
; [then-branch: 5739 | break1_1@783@01 | live]
; [else-branch: 5739 | !(break1_1@783@01) | live]
(push) ; 25
; [then-branch: 5739 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 25
(push) ; 25
; [else-branch: 5739 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 5740 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 5740 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(push) ; 22
; [else-branch: 5740 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(pop) ; 22
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 22
; [then-branch: 5741 | !(p1_11@803@01) | live]
; [else-branch: 5741 | p1_11@803@01 | live]
(push) ; 23
; [then-branch: 5741 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 23
(push) ; 23
; [else-branch: 5741 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 24
; [then-branch: 5742 | break1_1@783@01 | live]
; [else-branch: 5742 | !(break1_1@783@01) | live]
(push) ; 25
; [then-branch: 5742 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 25
(push) ; 25
; [else-branch: 5742 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5743 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 5743 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 5743 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01))]
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 23
; [then-branch: 5744 | !(p2_11@804@01) | live]
; [else-branch: 5744 | p2_11@804@01 | live]
(push) ; 24
; [then-branch: 5744 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 24
(push) ; 24
; [else-branch: 5744 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 25
; [then-branch: 5745 | break2_1@784@01 | live]
; [else-branch: 5745 | !(break2_1@784@01) | live]
(push) ; 26
; [then-branch: 5745 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 26
(push) ; 26
; [else-branch: 5745 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 5746 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 5746 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(push) ; 23
; [else-branch: 5746 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(pop) ; 23
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 23
; [then-branch: 5747 | !(p2_11@804@01) | live]
; [else-branch: 5747 | p2_11@804@01 | live]
(push) ; 24
; [then-branch: 5747 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 24
(push) ; 24
; [else-branch: 5747 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 25
; [then-branch: 5748 | break2_1@784@01 | live]
; [else-branch: 5748 | !(break2_1@784@01) | live]
(push) ; 26
; [then-branch: 5748 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 26
(push) ; 26
; [else-branch: 5748 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5749 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 5749 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 5749 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01))]
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 24
; [then-branch: 5750 | !(p1_11@803@01) | live]
; [else-branch: 5750 | p1_11@803@01 | live]
(push) ; 25
; [then-branch: 5750 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5750 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 26
; [then-branch: 5751 | break1_1@783@01 | live]
; [else-branch: 5751 | !(break1_1@783@01) | live]
(push) ; 27
; [then-branch: 5751 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 27
(push) ; 27
; [else-branch: 5751 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 5752 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 5752 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(push) ; 24
; [else-branch: 5752 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(pop) ; 24
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 24
; [then-branch: 5753 | !(p1_11@803@01) | live]
; [else-branch: 5753 | p1_11@803@01 | live]
(push) ; 25
; [then-branch: 5753 | !(p1_11@803@01)]
(assert (not p1_11@803@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5753 | p1_11@803@01]
(assert p1_11@803@01)
; [eval] !break1_1
(push) ; 26
; [then-branch: 5754 | break1_1@783@01 | live]
; [else-branch: 5754 | !(break1_1@783@01) | live]
(push) ; 27
; [then-branch: 5754 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 27
(push) ; 27
; [else-branch: 5754 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5755 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 5755 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 5755 | !(p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01))]
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 25
; [then-branch: 5756 | !(p2_11@804@01) | live]
; [else-branch: 5756 | p2_11@804@01 | live]
(push) ; 26
; [then-branch: 5756 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 26
(push) ; 26
; [else-branch: 5756 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 27
; [then-branch: 5757 | break2_1@784@01 | live]
; [else-branch: 5757 | !(break2_1@784@01) | live]
(push) ; 28
; [then-branch: 5757 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 28
(push) ; 28
; [else-branch: 5757 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 5758 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 5758 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(push) ; 25
; [else-branch: 5758 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(pop) ; 25
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 25
; [then-branch: 5759 | !(p2_11@804@01) | live]
; [else-branch: 5759 | p2_11@804@01 | live]
(push) ; 26
; [then-branch: 5759 | !(p2_11@804@01)]
(assert (not p2_11@804@01))
(pop) ; 26
(push) ; 26
; [else-branch: 5759 | p2_11@804@01]
(assert p2_11@804@01)
; [eval] !break2_1
(push) ; 27
; [then-branch: 5760 | break2_1@784@01 | live]
; [else-branch: 5760 | !(break2_1@784@01) | live]
(push) ; 28
; [then-branch: 5760 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 28
(push) ; 28
; [else-branch: 5760 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5761 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 5761 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5761 | !(p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01))]
; [exec]
; p1_13 := p3_5 &&
;   (!break1_1 && !except1_1 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p3_5 && (!break1_1 && !except1_1 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 5762 | !(p3_5@805@01) | live]
; [else-branch: 5762 | p3_5@805@01 | live]
(push) ; 27
; [then-branch: 5762 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5762 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 28
; [then-branch: 5763 | break1_1@783@01 | live]
; [else-branch: 5763 | !(break1_1@783@01) | live]
(push) ; 29
; [then-branch: 5763 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 29
(push) ; 29
; [else-branch: 5763 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 30
; [then-branch: 5764 | except1_1@776@01 | live]
; [else-branch: 5764 | !(except1_1@776@01) | live]
(push) ; 31
; [then-branch: 5764 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 31
(push) ; 31
; [else-branch: 5764 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p3_5@805@01
  (and
    p3_5@805@01
    (=>
      (not break1_1@783@01)
      (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01)))
    (or (not break1_1@783@01) break1_1@783@01))))
(assert (or p3_5@805@01 (not p3_5@805@01)))
; [exec]
; p2_13 := p4_5 &&
;   (!break2_1 && !except2_1 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_5 && (!break2_1 && !except2_1 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 5765 | !(p4_5@806@01) | live]
; [else-branch: 5765 | p4_5@806@01 | live]
(push) ; 27
; [then-branch: 5765 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5765 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 28
; [then-branch: 5766 | break2_1@784@01 | live]
; [else-branch: 5766 | !(break2_1@784@01) | live]
(push) ; 29
; [then-branch: 5766 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 29
(push) ; 29
; [else-branch: 5766 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(push) ; 30
; [then-branch: 5767 | except2_1@778@01 | live]
; [else-branch: 5767 | !(except2_1@778@01) | live]
(push) ; 31
; [then-branch: 5767 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 31
(push) ; 31
; [else-branch: 5767 | !(except2_1@778@01)]
(assert (not except2_1@778@01))
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p4_5@806@01
  (and
    p4_5@806@01
    (=>
      (not break2_1@784@01)
      (and (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01)))
    (or (not break2_1@784@01) break2_1@784@01))))
(assert (or p4_5@806@01 (not p4_5@806@01)))
; [exec]
; p3_7 := p3_5 &&
;   (!break1_1 && !except1_1 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p3_5 && (!break1_1 && !except1_1 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 5768 | !(p3_5@805@01) | live]
; [else-branch: 5768 | p3_5@805@01 | live]
(push) ; 27
; [then-branch: 5768 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5768 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 28
; [then-branch: 5769 | break1_1@783@01 | live]
; [else-branch: 5769 | !(break1_1@783@01) | live]
(push) ; 29
; [then-branch: 5769 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 29
(push) ; 29
; [else-branch: 5769 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 30
; [then-branch: 5770 | except1_1@776@01 | live]
; [else-branch: 5770 | !(except1_1@776@01) | live]
(push) ; 31
; [then-branch: 5770 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 31
(push) ; 31
; [else-branch: 5770 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p3_7@824@01 Bool)
(assert (=
  p3_7@824@01
  (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
; [exec]
; p4_7 := p4_5 &&
;   (!break2_1 && !except2_1 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_5 && (!break2_1 && !except2_1 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 5771 | !(p4_5@806@01) | live]
; [else-branch: 5771 | p4_5@806@01 | live]
(push) ; 27
; [then-branch: 5771 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5771 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 28
; [then-branch: 5772 | break2_1@784@01 | live]
; [else-branch: 5772 | !(break2_1@784@01) | live]
(push) ; 29
; [then-branch: 5772 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 29
(push) ; 29
; [else-branch: 5772 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(push) ; 30
; [then-branch: 5773 | except2_1@778@01 | live]
; [else-branch: 5773 | !(except2_1@778@01) | live]
(push) ; 31
; [then-branch: 5773 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 31
(push) ; 31
; [else-branch: 5773 | !(except2_1@778@01)]
(assert (not except2_1@778@01))
; [eval] !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p4_7@825@01 Bool)
(assert (=
  p4_7@825@01
  (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
; [eval] p1_13 && (!break1_1 && !except1_1)
; [then-branch: 5774 | False | dead]
; [else-branch: 5774 | True | live]
(push) ; 26
; [else-branch: 5774 | True]
(pop) ; 26
; [eval] !(p1_13 && (!break1_1 && !except1_1))
; [eval] p1_13 && (!break1_1 && !except1_1)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5775 | True | live]
; [else-branch: 5775 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 5775 | True]
; [eval] p2_13 && (!break2_1 && !except2_1)
; [then-branch: 5776 | False | dead]
; [else-branch: 5776 | True | live]
(push) ; 27
; [else-branch: 5776 | True]
(pop) ; 27
; [eval] !(p2_13 && (!break2_1 && !except2_1))
; [eval] p2_13 && (!break2_1 && !except2_1)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5777 | True | live]
; [else-branch: 5777 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 5777 | True]
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 28
; [then-branch: 5778 | !(p3_5@805@01) | live]
; [else-branch: 5778 | p3_5@805@01 | live]
(push) ; 29
; [then-branch: 5778 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 29
(push) ; 29
; [else-branch: 5778 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 30
; [then-branch: 5779 | break1_1@783@01 | live]
; [else-branch: 5779 | !(break1_1@783@01) | live]
(push) ; 31
; [then-branch: 5779 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 31
(push) ; 31
; [else-branch: 5779 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=> p3_5@805@01 (and p3_5@805@01 (or (not break1_1@783@01) break1_1@783@01))))
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5780 | p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
; [else-branch: 5780 | !(p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 5780 | p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01))))
; [exec]
; c_6.Container_value := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 29
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 29
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_value@826@01 $Ref)
(assert (= Container_value@826@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 29
; [then-branch: 5781 | !(p4_5@806@01) | live]
; [else-branch: 5781 | p4_5@806@01 | live]
(push) ; 30
; [then-branch: 5781 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 30
(push) ; 30
; [else-branch: 5781 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 31
; [then-branch: 5782 | break2_1@784@01 | live]
; [else-branch: 5782 | !(break2_1@784@01) | live]
(push) ; 32
; [then-branch: 5782 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 32
(push) ; 32
; [else-branch: 5782 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p4_5@806@01 (and p4_5@806@01 (or (not break2_1@784@01) break2_1@784@01))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5783 | p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
; [else-branch: 5783 | !(p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 5783 | p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01))))
; [exec]
; c_6_0.Container_valuep := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 30
(pop) ; 30
; Joined path conditions
(declare-const Container_valuep@827@01 $Ref)
(assert (= Container_valuep@827@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 30
; [then-branch: 5784 | !(p3_5@805@01) | live]
; [else-branch: 5784 | p3_5@805@01 | live]
(push) ; 31
; [then-branch: 5784 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 31
(push) ; 31
; [else-branch: 5784 | p3_5@805@01]
; [eval] !break1_1
(push) ; 32
; [then-branch: 5785 | break1_1@783@01 | live]
; [else-branch: 5785 | !(break1_1@783@01) | live]
(push) ; 33
; [then-branch: 5785 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 33
(push) ; 33
; [else-branch: 5785 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (=> p3_5@805@01 (or (not break1_1@783@01) break1_1@783@01)))
(push) ; 30
(set-option :timeout 10)
(assert (not (not (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5786 | p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
; [else-branch: 5786 | !(p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 5786 | p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01))))
; [exec]
; break1_1 := true
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 31
; [then-branch: 5787 | !(p4_5@806@01) | live]
; [else-branch: 5787 | p4_5@806@01 | live]
(push) ; 32
; [then-branch: 5787 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 32
(push) ; 32
; [else-branch: 5787 | p4_5@806@01]
; [eval] !break2_1
(push) ; 33
; [then-branch: 5788 | break2_1@784@01 | live]
; [else-branch: 5788 | !(break2_1@784@01) | live]
(push) ; 34
; [then-branch: 5788 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 34
(push) ; 34
; [else-branch: 5788 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (=> p4_5@806@01 (or (not break2_1@784@01) break2_1@784@01)))
(push) ; 31
(set-option :timeout 10)
(assert (not (not (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5789 | p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
; [else-branch: 5789 | !(p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 5789 | p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01))))
; [exec]
; break2_1 := true
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 32
; [then-branch: 5790 | !(p1_10@801@01) | live]
; [else-branch: 5790 | p1_10@801@01 | live]
(push) ; 33
; [then-branch: 5790 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 33
(push) ; 33
; [else-branch: 5790 | p1_10@801@01]
; [eval] !break1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 5791 | False | dead]
; [else-branch: 5791 | True | live]
(push) ; 32
; [else-branch: 5791 | True]
(pop) ; 32
; [eval] !(p1_10 && (!break1_1 && !except1_1))
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 32
; [then-branch: 5792 | !(p1_10@801@01) | live]
; [else-branch: 5792 | p1_10@801@01 | live]
(push) ; 33
; [then-branch: 5792 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 33
(push) ; 33
; [else-branch: 5792 | p1_10@801@01]
; [eval] !break1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5793 | True | live]
; [else-branch: 5793 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 5793 | True]
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 33
; [then-branch: 5794 | !(p2_10@802@01) | live]
; [else-branch: 5794 | p2_10@802@01 | live]
(push) ; 34
; [then-branch: 5794 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 34
(push) ; 34
; [else-branch: 5794 | p2_10@802@01]
; [eval] !break2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 5795 | False | dead]
; [else-branch: 5795 | True | live]
(push) ; 33
; [else-branch: 5795 | True]
(pop) ; 33
; [eval] !(p2_10 && (!break2_1 && !except2_1))
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 33
; [then-branch: 5796 | !(p2_10@802@01) | live]
; [else-branch: 5796 | p2_10@802@01 | live]
(push) ; 34
; [then-branch: 5796 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 34
(push) ; 34
; [else-branch: 5796 | p2_10@802@01]
; [eval] !break2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5797 | True | live]
; [else-branch: 5797 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 5797 | True]
; [exec]
; assert (p1_10 && (!break1_1 && !except1_1) ==>
;   _loop_termination_flag_1 ==> !true) &&
;   (p2_10 && (!break2_1 && !except2_1) ==>
;   _loop_termination_flag_1_0 ==> !true)
; [eval] p1_10 && (!break1_1 && !except1_1) ==> _loop_termination_flag_1 ==> !true
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 34
; [then-branch: 5798 | !(p1_10@801@01) | live]
; [else-branch: 5798 | p1_10@801@01 | live]
(push) ; 35
; [then-branch: 5798 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5798 | p1_10@801@01]
; [eval] !break1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 5799 | False | dead]
; [else-branch: 5799 | True | live]
(push) ; 35
; [else-branch: 5799 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_10 && (!break2_1 && !except2_1) ==> _loop_termination_flag_1_0 ==> !true
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 34
; [then-branch: 5800 | !(p2_10@802@01) | live]
; [else-branch: 5800 | p2_10@802@01 | live]
(push) ; 35
; [then-branch: 5800 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5800 | p2_10@802@01]
; [eval] !break2_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 5801 | False | dead]
; [else-branch: 5801 | True | live]
(push) ; 35
; [else-branch: 5801 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_9 && !bypass1_1 ==> true
; [eval] p1_9 && !bypass1_1
(push) ; 34
; [then-branch: 5802 | !(p1_9@689@01) | live]
; [else-branch: 5802 | p1_9@689@01 | live]
(push) ; 35
; [then-branch: 5802 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5802 | p1_9@689@01]
(assert p1_9@689@01)
; [eval] !bypass1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5803 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5803 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 5803 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> true
; [eval] p2_9 && !bypass2_1
(push) ; 34
; [then-branch: 5804 | !(p2_9@690@01) | live]
; [else-branch: 5804 | p2_9@690@01 | live]
(push) ; 35
; [then-branch: 5804 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5804 | p2_9@690@01]
(assert p2_9@690@01)
; [eval] !bypass2_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5805 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5805 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 5805 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1
(push) ; 34
; [then-branch: 5806 | !(p1_9@689@01) | live]
; [else-branch: 5806 | p1_9@689@01 | live]
(push) ; 35
; [then-branch: 5806 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5806 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5807 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5807 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 5807 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1
(push) ; 35
; [then-branch: 5808 | !(p2_9@690@01) | live]
; [else-branch: 5808 | p2_9@690@01 | live]
(push) ; 36
; [then-branch: 5808 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 36
(push) ; 36
; [else-branch: 5808 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5809 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5809 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 5809 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1 ==> issubtype(typeof(c_6.Container_value), int())
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 5810 | !(p1_9@689@01) | live]
; [else-branch: 5810 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 5810 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5810 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5811 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5811 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5811 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] issubtype(typeof(c_6.Container_value), int())
; [eval] typeof(c_6.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(push) ; 36
(assert (not (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (issubtype<Bool> (typeof<PyType> Container_value@826@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (issubtype<Bool> (typeof<PyType> Container_value@826@01) (as int<PyType>  PyType))))
; [eval] p2_9 && !bypass2_1 ==> issubtype(typeof(c_6_0.Container_valuep), int())
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 5812 | !(p2_9@690@01) | live]
; [else-branch: 5812 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 5812 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5812 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5813 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5813 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5813 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] issubtype(typeof(c_6_0.Container_valuep), int())
; [eval] typeof(c_6_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(push) ; 36
(assert (not (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@827@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@827@01) (as int<PyType>  PyType))))
; [eval] p1_9 && !bypass1_1 ==> !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 5814 | !(p1_9@689@01) | live]
; [else-branch: 5814 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 5814 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5814 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5815 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5815 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5815 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] !idle1_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5816 | True | live]
; [else-branch: 5816 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 5816 | True]
; [eval] _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1@785@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1@785@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5817 | _loop_check_before_1@785@01 | live]
; [else-branch: 5817 | !(_loop_check_before_1@785@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 5817 | _loop_check_before_1@785@01]
(assert _loop_check_before_1@785@01)
; [eval] _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 5818 | False | live]
; [else-branch: 5818 | True | live]
(push) ; 43
; [then-branch: 5818 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 5818 | True]
; [eval] perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_159)) == none
; [eval] perm(MustTerminate(_cthread_159))
(push) ; 44
; [then-branch: 5819 | False | live]
; [else-branch: 5819 | True | live]
(push) ; 45
; [then-branch: 5819 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 5819 | True]
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
(push) ; 46
; [then-branch: 5820 | False | live]
; [else-branch: 5820 | True | live]
(push) ; 47
; [then-branch: 5820 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 5820 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
(push) ; 48
; [then-branch: 5821 | False | live]
; [else-branch: 5821 | True | live]
(push) ; 49
; [then-branch: 5821 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 5821 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 5822 | False | live]
; [else-branch: 5822 | True | live]
(push) ; 51
; [then-branch: 5822 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 5822 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 5817 | !(_loop_check_before_1@785@01)]
(assert (not _loop_check_before_1@785@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (and
    p1_9@689@01
    (not bypass1_1@756@01)
    (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))))
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 5823 | !(p2_9@690@01) | live]
; [else-branch: 5823 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 5823 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5823 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5824 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5824 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5824 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5825 | True | live]
; [else-branch: 5825 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 5825 | True]
; [eval] _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1_0@786@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1_0@786@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5826 | _loop_check_before_1_0@786@01 | live]
; [else-branch: 5826 | !(_loop_check_before_1_0@786@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 5826 | _loop_check_before_1_0@786@01]
(assert _loop_check_before_1_0@786@01)
; [eval] _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 5827 | False | live]
; [else-branch: 5827 | True | live]
(push) ; 43
; [then-branch: 5827 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 5827 | True]
; [eval] perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_159_0)) == none
; [eval] perm(MustTerminate_0(_cthread_159_0))
(push) ; 44
; [then-branch: 5828 | False | live]
; [else-branch: 5828 | True | live]
(push) ; 45
; [then-branch: 5828 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 5828 | True]
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false)
(push) ; 46
; [then-branch: 5829 | False | live]
; [else-branch: 5829 | True | live]
(push) ; 47
; [then-branch: 5829 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 5829 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false)
(push) ; 48
; [then-branch: 5830 | False | live]
; [else-branch: 5830 | True | live]
(push) ; 49
; [then-branch: 5830 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 5830 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 5831 | False | live]
; [else-branch: 5831 | True | live]
(push) ; 51
; [then-branch: 5831 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 5831 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 5826 | !(_loop_check_before_1_0@786@01)]
(assert (not _loop_check_before_1_0@786@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (and
    p2_9@690@01
    (not bypass2_1@757@01)
    (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))))
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1 ==> !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 5832 | !(p1_9@689@01) | live]
; [else-branch: 5832 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 5832 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5832 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5833 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5833 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5833 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] !idle1_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5834 | True | live]
; [else-branch: 5834 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 5834 | True]
; [eval] !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_1
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1@785@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1@785@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5835 | !(_loop_check_before_1@785@01) | live]
; [else-branch: 5835 | _loop_check_before_1@785@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 5835 | !(_loop_check_before_1@785@01)]
(assert (not _loop_check_before_1@785@01))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
(push) ; 42
; [then-branch: 5836 | False | live]
; [else-branch: 5836 | True | live]
(push) ; 43
; [then-branch: 5836 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 5836 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
(push) ; 44
; [then-branch: 5837 | False | live]
; [else-branch: 5837 | True | live]
(push) ; 45
; [then-branch: 5837 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 5837 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 5838 | False | live]
; [else-branch: 5838 | True | live]
(push) ; 47
; [then-branch: 5838 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 5838 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 5835 | _loop_check_before_1@785@01]
(assert _loop_check_before_1@785@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (and
    p1_9@689@01
    (not bypass1_1@756@01)
    (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))))
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 5839 | !(p2_9@690@01) | live]
; [else-branch: 5839 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 5839 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 5839 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5840 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5840 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 5840 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5841 | True | live]
; [else-branch: 5841 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 5841 | True]
; [eval] !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_1_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1_0@786@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1_0@786@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5842 | !(_loop_check_before_1_0@786@01) | live]
; [else-branch: 5842 | _loop_check_before_1_0@786@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 5842 | !(_loop_check_before_1_0@786@01)]
(assert (not _loop_check_before_1_0@786@01))
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false)
(push) ; 42
; [then-branch: 5843 | False | live]
; [else-branch: 5843 | True | live]
(push) ; 43
; [then-branch: 5843 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 5843 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false)
(push) ; 44
; [then-branch: 5844 | False | live]
; [else-branch: 5844 | True | live]
(push) ; 45
; [then-branch: 5844 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 5844 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 5845 | False | live]
; [else-branch: 5845 | True | live]
(push) ; 47
; [then-branch: 5845 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 5845 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 5842 | _loop_check_before_1_0@786@01]
(assert _loop_check_before_1_0@786@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (and
    p2_9@690@01
    (not bypass2_1@757@01)
    (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))))
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] bypass1_1 ==> tmp1_13 == except1_1
(push) ; 36
; [then-branch: 5846 | bypass1_1@756@01 | dead]
; [else-branch: 5846 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5846 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_16 == break1_1
(push) ; 36
; [then-branch: 5847 | bypass1_1@756@01 | dead]
; [else-branch: 5847 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5847 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_11 == _loop_measures_1
(push) ; 36
; [then-branch: 5848 | bypass1_1@756@01 | dead]
; [else-branch: 5848 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5848 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_14 == _err
(push) ; 36
; [then-branch: 5849 | bypass1_1@756@01 | dead]
; [else-branch: 5849 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5849 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_15 == _loop_check_before_1
(push) ; 36
; [then-branch: 5850 | bypass1_1@756@01 | dead]
; [else-branch: 5850 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5850 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_12 == Exception_res_1
(push) ; 36
; [then-branch: 5851 | bypass1_1@756@01 | dead]
; [else-branch: 5851 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 5851 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_11 == _loop_measures_1_0
(push) ; 36
; [then-branch: 5852 | bypass2_1@757@01 | dead]
; [else-branch: 5852 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5852 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_15 == _loop_check_before_1_0
(push) ; 36
; [then-branch: 5853 | bypass2_1@757@01 | dead]
; [else-branch: 5853 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5853 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_12 == Exception_res_1_0
(push) ; 36
; [then-branch: 5854 | bypass2_1@757@01 | dead]
; [else-branch: 5854 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5854 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_14 == _err_2
(push) ; 36
; [then-branch: 5855 | bypass2_1@757@01 | dead]
; [else-branch: 5855 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5855 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_13 == except2_1
(push) ; 36
; [then-branch: 5856 | bypass2_1@757@01 | dead]
; [else-branch: 5856 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5856 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_16 == break2_1
(push) ; 36
; [then-branch: 5857 | bypass2_1@757@01 | dead]
; [else-branch: 5857 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 5857 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
; [eval] !(p4_5 && (!break2_1 && !except2_1))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 31
; [then-branch: 5858 | !(p4_5@806@01) | live]
; [else-branch: 5858 | p4_5@806@01 | live]
(push) ; 32
; [then-branch: 5858 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 32
(push) ; 32
; [else-branch: 5858 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 33
; [then-branch: 5859 | break2_1@784@01 | live]
; [else-branch: 5859 | !(break2_1@784@01) | live]
(push) ; 34
; [then-branch: 5859 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 34
(push) ; 34
; [else-branch: 5859 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5860 | !(p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
; [else-branch: 5860 | p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
(set-option :timeout 0)
(push) ; 31
; [else-branch: 5860 | p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01))))
(pop) ; 31
(pop) ; 30
; [eval] !(p3_5 && (!break1_1 && !except1_1))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 30
; [then-branch: 5861 | !(p3_5@805@01) | live]
; [else-branch: 5861 | p3_5@805@01 | live]
(push) ; 31
; [then-branch: 5861 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 31
(push) ; 31
; [else-branch: 5861 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 32
; [then-branch: 5862 | break1_1@783@01 | live]
; [else-branch: 5862 | !(break1_1@783@01) | live]
(push) ; 33
; [then-branch: 5862 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 33
(push) ; 33
; [else-branch: 5862 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5863 | !(p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
; [else-branch: 5863 | p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 5863 | p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01))))
(pop) ; 30
(pop) ; 29
; [eval] !(p4_5 && (!break2_1 && !except2_1))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 29
; [then-branch: 5864 | !(p4_5@806@01) | live]
; [else-branch: 5864 | p4_5@806@01 | live]
(push) ; 30
; [then-branch: 5864 | !(p4_5@806@01)]
(assert (not p4_5@806@01))
(pop) ; 30
(push) ; 30
; [else-branch: 5864 | p4_5@806@01]
(assert p4_5@806@01)
; [eval] !break2_1
(push) ; 31
; [then-branch: 5865 | break2_1@784@01 | live]
; [else-branch: 5865 | !(break2_1@784@01) | live]
(push) ; 32
; [then-branch: 5865 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 32
(push) ; 32
; [else-branch: 5865 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5866 | !(p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
; [else-branch: 5866 | p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 5866 | p4_5@806@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p4_5@806@01 (and (not break2_1@784@01) (not except2_1@778@01))))
(pop) ; 29
(pop) ; 28
; [eval] !(p3_5 && (!break1_1 && !except1_1))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 28
; [then-branch: 5867 | !(p3_5@805@01) | live]
; [else-branch: 5867 | p3_5@805@01 | live]
(push) ; 29
; [then-branch: 5867 | !(p3_5@805@01)]
(assert (not p3_5@805@01))
(pop) ; 29
(push) ; 29
; [else-branch: 5867 | p3_5@805@01]
(assert p3_5@805@01)
; [eval] !break1_1
(push) ; 30
; [then-branch: 5868 | break1_1@783@01 | live]
; [else-branch: 5868 | !(break1_1@783@01) | live]
(push) ; 31
; [then-branch: 5868 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 31
(push) ; 31
; [else-branch: 5868 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5869 | !(p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
; [else-branch: 5869 | p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 5869 | p3_5@805@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p3_5@805@01 (and (not break1_1@783@01) (not except1_1@776@01))))
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 5725 | p2_11@804@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@804@01 (and (not break2_1@784@01) (not except2_1@778@01))))
(pop) ; 19
(pop) ; 18
(push) ; 18
; [else-branch: 5574 | p1_11@803@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@803@01 (and (not break1_1@783@01) (not except1_1@776@01))))
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 5243 | !(p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(assert (not (and p2_10@802@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(pop) ; 15
; [eval] !(p2_10 && (!break2_1 && !except2_1))
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 15
; [then-branch: 5870 | !(p2_10@802@01) | live]
; [else-branch: 5870 | p2_10@802@01 | live]
(push) ; 16
; [then-branch: 5870 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 16
(push) ; 16
; [else-branch: 5870 | p2_10@802@01]
(assert p2_10@802@01)
; [eval] !break2_1
(push) ; 17
; [then-branch: 5871 | break2_1@784@01 | live]
; [else-branch: 5871 | !(break2_1@784@01) | live]
(push) ; 18
; [then-branch: 5871 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 18
(push) ; 18
; [else-branch: 5871 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (and p2_10@802@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and p2_10@802@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5872 | !(p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 5872 | p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 5872 | !(p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(assert (not (and p2_10@802@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
; [exec]
; p1_11 := p1_10 && (!break1_1 && !except1_1 && bool___unbox__(b_6))
; [eval] p1_10 && (!break1_1 && !except1_1 && bool___unbox__(b_6))
(push) ; 16
; [then-branch: 5873 | !(p1_10@801@01) | live]
; [else-branch: 5873 | p1_10@801@01 | live]
(push) ; 17
; [then-branch: 5873 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 17
(push) ; 17
; [else-branch: 5873 | p1_10@801@01]
; [eval] !break1_1
(push) ; 18
; [then-branch: 5874 | break1_1@783@01 | live]
; [else-branch: 5874 | !(break1_1@783@01) | live]
(push) ; 19
; [then-branch: 5874 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5874 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 20
; [then-branch: 5875 | except1_1@776@01 | live]
; [else-branch: 5875 | !(except1_1@776@01) | live]
(push) ; 21
; [then-branch: 5875 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5875 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] bool___unbox__(b_6)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@699@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@699@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_1@776@01)
  (and
    (not except1_1@776@01)
    (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@699@01))))
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and
    (not break1_1@783@01)
    (=>
      (not except1_1@776@01)
      (and
        (not except1_1@776@01)
        (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_1@699@01)))
    (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_10@801@01
  (and
    (=>
      (not break1_1@783@01)
      (and
        (not break1_1@783@01)
        (=>
          (not except1_1@776@01)
          (and
            (not except1_1@776@01)
            (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
            (bool___unbox__%precondition $Snap.unit b_1@699@01)))
        (or (not except1_1@776@01) except1_1@776@01)))
    (or (not break1_1@783@01) break1_1@783@01))))
(declare-const p1_11@828@01 Bool)
(assert (=
  p1_11@828@01
  (and
    p1_10@801@01
    (and
      (not break1_1@783@01)
      (and (not except1_1@776@01) (bool___unbox__ $Snap.unit b_1@699@01))))))
; [exec]
; p2_11 := p2_10 && (!break2_1 && !except2_1 && bool___unbox__(b_6_0))
; [eval] p2_10 && (!break2_1 && !except2_1 && bool___unbox__(b_6_0))
(push) ; 16
; [then-branch: 5876 | !(p2_10@802@01) | live]
; [else-branch: 5876 | p2_10@802@01 | live]
(push) ; 17
; [then-branch: 5876 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 17
(push) ; 17
; [else-branch: 5876 | p2_10@802@01]
(assert p2_10@802@01)
; [eval] !break2_1
(push) ; 18
; [then-branch: 5877 | break2_1@784@01 | live]
; [else-branch: 5877 | !(break2_1@784@01) | live]
(push) ; 19
; [then-branch: 5877 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5877 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(push) ; 20
; [then-branch: 5878 | except2_1@778@01 | live]
; [else-branch: 5878 | !(except2_1@778@01) | live]
(push) ; 21
; [then-branch: 5878 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5878 | !(except2_1@778@01)]
(assert (not except2_1@778@01))
; [eval] bool___unbox__(b_6_0)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1_0@700@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@700@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_1@778@01)
  (and
    (not except2_1@778@01)
    (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1_0@700@01))))
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and
    (not break2_1@784@01)
    (=>
      (not except2_1@778@01)
      (and
        (not except2_1@778@01)
        (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_1_0@700@01)))
    (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_10@802@01
  (and
    p2_10@802@01
    (=>
      (not break2_1@784@01)
      (and
        (not break2_1@784@01)
        (=>
          (not except2_1@778@01)
          (and
            (not except2_1@778@01)
            (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
            (bool___unbox__%precondition $Snap.unit b_1_0@700@01)))
        (or (not except2_1@778@01) except2_1@778@01)))
    (or (not break2_1@784@01) break2_1@784@01))))
(declare-const p2_11@829@01 Bool)
(assert (=
  p2_11@829@01
  (and
    p2_10@802@01
    (and
      (not break2_1@784@01)
      (and (not except2_1@778@01) (bool___unbox__ $Snap.unit b_1_0@700@01))))))
; [exec]
; p3_5 := p1_10 && (!break1_1 && !except1_1 && !bool___unbox__(b_6))
; [eval] p1_10 && (!break1_1 && !except1_1 && !bool___unbox__(b_6))
(push) ; 16
; [then-branch: 5879 | !(p1_10@801@01) | live]
; [else-branch: 5879 | p1_10@801@01 | live]
(push) ; 17
; [then-branch: 5879 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 17
(push) ; 17
; [else-branch: 5879 | p1_10@801@01]
; [eval] !break1_1
(push) ; 18
; [then-branch: 5880 | break1_1@783@01 | live]
; [else-branch: 5880 | !(break1_1@783@01) | live]
(push) ; 19
; [then-branch: 5880 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5880 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 20
; [then-branch: 5881 | except1_1@776@01 | live]
; [else-branch: 5881 | !(except1_1@776@01) | live]
(push) ; 21
; [then-branch: 5881 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5881 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] !bool___unbox__(b_6)
; [eval] bool___unbox__(b_6)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@699@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@699@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_1@776@01)
  (and
    (not except1_1@776@01)
    (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@699@01))))
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and
    (not break1_1@783@01)
    (=>
      (not except1_1@776@01)
      (and
        (not except1_1@776@01)
        (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_1@699@01)))
    (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3_5@830@01 Bool)
(assert (=
  p3_5@830@01
  (and
    p1_10@801@01
    (and
      (not break1_1@783@01)
      (and (not except1_1@776@01) (not (bool___unbox__ $Snap.unit b_1@699@01)))))))
; [exec]
; p4_5 := p2_10 && (!break2_1 && !except2_1 && !bool___unbox__(b_6_0))
; [eval] p2_10 && (!break2_1 && !except2_1 && !bool___unbox__(b_6_0))
(push) ; 16
; [then-branch: 5882 | !(p2_10@802@01) | live]
; [else-branch: 5882 | p2_10@802@01 | live]
(push) ; 17
; [then-branch: 5882 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 17
(push) ; 17
; [else-branch: 5882 | p2_10@802@01]
(assert p2_10@802@01)
; [eval] !break2_1
(push) ; 18
; [then-branch: 5883 | break2_1@784@01 | live]
; [else-branch: 5883 | !(break2_1@784@01) | live]
(push) ; 19
; [then-branch: 5883 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5883 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(push) ; 20
; [then-branch: 5884 | except2_1@778@01 | live]
; [else-branch: 5884 | !(except2_1@778@01) | live]
(push) ; 21
; [then-branch: 5884 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5884 | !(except2_1@778@01)]
(assert (not except2_1@778@01))
; [eval] !bool___unbox__(b_6_0)
; [eval] bool___unbox__(b_6_0)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1_0@700@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@700@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_1@778@01)
  (and
    (not except2_1@778@01)
    (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1_0@700@01))))
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and
    (not break2_1@784@01)
    (=>
      (not except2_1@778@01)
      (and
        (not except2_1@778@01)
        (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_1_0@700@01)))
    (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4_5@831@01 Bool)
(assert (=
  p4_5@831@01
  (and
    p2_10@802@01
    (and
      (not break2_1@784@01)
      (and (not except2_1@778@01) (not (bool___unbox__ $Snap.unit b_1_0@700@01)))))))
; [exec]
; p1_12 := p1_11 &&
;   (!break1_1 && !except1_1 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p1_11 && (!break1_1 && !except1_1 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 5885 | !(p1_11@828@01) | live]
; [else-branch: 5885 | p1_11@828@01 | live]
(push) ; 17
; [then-branch: 5885 | !(p1_11@828@01)]
(assert (not p1_11@828@01))
(pop) ; 17
(push) ; 17
; [else-branch: 5885 | p1_11@828@01]
(assert p1_11@828@01)
; [eval] !break1_1
(push) ; 18
; [then-branch: 5886 | break1_1@783@01 | live]
; [else-branch: 5886 | !(break1_1@783@01) | live]
(push) ; 19
; [then-branch: 5886 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5886 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 20
; [then-branch: 5887 | except1_1@776@01 | live]
; [else-branch: 5887 | !(except1_1@776@01) | live]
(push) ; 21
; [then-branch: 5887 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5887 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_11@828@01
  (and
    p1_11@828@01
    (=>
      (not break1_1@783@01)
      (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01)))
    (or (not break1_1@783@01) break1_1@783@01))))
(assert (or p1_11@828@01 (not p1_11@828@01)))
; [exec]
; p2_12 := p2_11 &&
;   (!break2_1 && !except2_1 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_11 && (!break2_1 && !except2_1 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 5888 | !(p2_11@829@01) | live]
; [else-branch: 5888 | p2_11@829@01 | live]
(push) ; 17
; [then-branch: 5888 | !(p2_11@829@01)]
(assert (not p2_11@829@01))
(pop) ; 17
(push) ; 17
; [else-branch: 5888 | p2_11@829@01]
(assert p2_11@829@01)
; [eval] !break2_1
(push) ; 18
; [then-branch: 5889 | break2_1@784@01 | live]
; [else-branch: 5889 | !(break2_1@784@01) | live]
(push) ; 19
; [then-branch: 5889 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5889 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(push) ; 20
; [then-branch: 5890 | except2_1@778@01 | live]
; [else-branch: 5890 | !(except2_1@778@01) | live]
(push) ; 21
; [then-branch: 5890 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5890 | !(except2_1@778@01)]
(assert (not except2_1@778@01))
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_11@829@01
  (and
    p2_11@829@01
    (=>
      (not break2_1@784@01)
      (and (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01)))
    (or (not break2_1@784@01) break2_1@784@01))))
(assert (or p2_11@829@01 (not p2_11@829@01)))
; [exec]
; p3_6 := p1_11 &&
;   (!break1_1 && !except1_1 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p1_11 && (!break1_1 && !except1_1 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 5891 | !(p1_11@828@01) | live]
; [else-branch: 5891 | p1_11@828@01 | live]
(push) ; 17
; [then-branch: 5891 | !(p1_11@828@01)]
(assert (not p1_11@828@01))
(pop) ; 17
(push) ; 17
; [else-branch: 5891 | p1_11@828@01]
(assert p1_11@828@01)
; [eval] !break1_1
(push) ; 18
; [then-branch: 5892 | break1_1@783@01 | live]
; [else-branch: 5892 | !(break1_1@783@01) | live]
(push) ; 19
; [then-branch: 5892 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5892 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 20
; [then-branch: 5893 | except1_1@776@01 | live]
; [else-branch: 5893 | !(except1_1@776@01) | live]
(push) ; 21
; [then-branch: 5893 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5893 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3_6@832@01 Bool)
(assert (=
  p3_6@832@01
  (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
; [exec]
; p4_6 := p2_11 &&
;   (!break2_1 && !except2_1 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_11 && (!break2_1 && !except2_1 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 5894 | !(p2_11@829@01) | live]
; [else-branch: 5894 | p2_11@829@01 | live]
(push) ; 17
; [then-branch: 5894 | !(p2_11@829@01)]
(assert (not p2_11@829@01))
(pop) ; 17
(push) ; 17
; [else-branch: 5894 | p2_11@829@01]
(assert p2_11@829@01)
; [eval] !break2_1
(push) ; 18
; [then-branch: 5895 | break2_1@784@01 | live]
; [else-branch: 5895 | !(break2_1@784@01) | live]
(push) ; 19
; [then-branch: 5895 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 19
(push) ; 19
; [else-branch: 5895 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(push) ; 20
; [then-branch: 5896 | except2_1@778@01 | live]
; [else-branch: 5896 | !(except2_1@778@01) | live]
(push) ; 21
; [then-branch: 5896 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5896 | !(except2_1@778@01)]
(assert (not except2_1@778@01))
; [eval] !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4_6@833@01 Bool)
(assert (=
  p4_6@833@01
  (and p2_11@829@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
; [eval] p1_12 && (!break1_1 && !except1_1)
; [then-branch: 5897 | False | dead]
; [else-branch: 5897 | True | live]
(push) ; 16
; [else-branch: 5897 | True]
(pop) ; 16
; [eval] !(p1_12 && (!break1_1 && !except1_1))
; [eval] p1_12 && (!break1_1 && !except1_1)
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5898 | True | live]
; [else-branch: 5898 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 5898 | True]
; [eval] p2_12 && (!break2_1 && !except2_1)
; [then-branch: 5899 | False | dead]
; [else-branch: 5899 | True | live]
(push) ; 17
; [else-branch: 5899 | True]
(pop) ; 17
; [eval] !(p2_12 && (!break2_1 && !except2_1))
; [eval] p2_12 && (!break2_1 && !except2_1)
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5900 | True | live]
; [else-branch: 5900 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 5900 | True]
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 18
; [then-branch: 5901 | !(p1_11@828@01) | live]
; [else-branch: 5901 | p1_11@828@01 | live]
(push) ; 19
; [then-branch: 5901 | !(p1_11@828@01)]
(assert (not p1_11@828@01))
(pop) ; 19
(push) ; 19
; [else-branch: 5901 | p1_11@828@01]
(assert p1_11@828@01)
; [eval] !break1_1
(push) ; 20
; [then-branch: 5902 | break1_1@783@01 | live]
; [else-branch: 5902 | !(break1_1@783@01) | live]
(push) ; 21
; [then-branch: 5902 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 21
(push) ; 21
; [else-branch: 5902 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> p1_11@828@01 (and p1_11@828@01 (or (not break1_1@783@01) break1_1@783@01))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5903 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
; [else-branch: 5903 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 5903 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01))))
; [exec]
; c_6.Container_value := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 19
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 19
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(declare-const Container_value@834@01 $Ref)
(assert (= Container_value@834@01 (__prim__int___box__ $Snap.unit 7)))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 19
; [then-branch: 5904 | !(p2_11@829@01) | live]
; [else-branch: 5904 | p2_11@829@01 | live]
(push) ; 20
; [then-branch: 5904 | !(p2_11@829@01)]
(assert (not p2_11@829@01))
(pop) ; 20
(push) ; 20
; [else-branch: 5904 | p2_11@829@01]
(assert p2_11@829@01)
; [eval] !break2_1
(push) ; 21
; [then-branch: 5905 | break2_1@784@01 | live]
; [else-branch: 5905 | !(break2_1@784@01) | live]
(push) ; 22
; [then-branch: 5905 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 22
(push) ; 22
; [else-branch: 5905 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=> p2_11@829@01 (and p2_11@829@01 (or (not break2_1@784@01) break2_1@784@01))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_11@829@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5906 | p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 5906 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(set-option :timeout 0)
(push) ; 19
; [else-branch: 5906 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(assert (not (and p2_11@829@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(pop) ; 19
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 19
; [then-branch: 5907 | !(p2_11@829@01) | live]
; [else-branch: 5907 | p2_11@829@01 | live]
(push) ; 20
; [then-branch: 5907 | !(p2_11@829@01)]
(assert (not p2_11@829@01))
(pop) ; 20
(push) ; 20
; [else-branch: 5907 | p2_11@829@01]
(assert p2_11@829@01)
; [eval] !break2_1
(push) ; 21
; [then-branch: 5908 | break2_1@784@01 | live]
; [else-branch: 5908 | !(break2_1@784@01) | live]
(push) ; 22
; [then-branch: 5908 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 22
(push) ; 22
; [else-branch: 5908 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_11@829@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_11@829@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5909 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 5909 | p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 5909 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(assert (not (and p2_11@829@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
; [exec]
; tmp_1 := new()
(declare-const tmp_1@835@01 $Ref)
(assert (not (= tmp_1@835@01 $Ref.null)))
(assert (not (= tmp_1@835@01 c_1@697@01)))
(assert (not (= tmp_1@835@01 tmp2_14@740@01)))
(assert (not (= tmp_1@835@01 c_1_0@698@01)))
(assert (not (= tmp_1@835@01 tmp1_12@735@01)))
(assert (not (= tmp_1@835@01 tmp1_14@739@01)))
(assert (not (= tmp_1@835@01 _cthread_159_0@692@01)))
(assert (not (= tmp_1@835@01 _err@775@01)))
(assert (not (= tmp_1@835@01 Exception_res_1_0@774@01)))
(assert (not (= tmp_1@835@01 b_1@699@01)))
(assert (not (= tmp_1@835@01 _err_2@777@01)))
(assert (not (= tmp_1@835@01 Exception_res_1@773@01)))
(assert (not (= tmp_1@835@01 tmp2_12@736@01)))
(assert (not
  (=
    tmp_1@835@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))
(assert (not (= tmp_1@835@01 b_1_0@700@01)))
(assert (not (= tmp_1@835@01 _cthread_159@691@01)))
(assert (not (= tmp_1@835@01 tmp_1@796@01)))
(assert (not (= tmp_1@835@01 Container_value@834@01)))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 20
; [then-branch: 5910 | !(p1_11@828@01) | live]
; [else-branch: 5910 | p1_11@828@01 | live]
(push) ; 21
; [then-branch: 5910 | !(p1_11@828@01)]
(assert (not p1_11@828@01))
(pop) ; 21
(push) ; 21
; [else-branch: 5910 | p1_11@828@01]
; [eval] !break1_1
(push) ; 22
; [then-branch: 5911 | break1_1@783@01 | live]
; [else-branch: 5911 | !(break1_1@783@01) | live]
(push) ; 23
; [then-branch: 5911 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 23
(push) ; 23
; [else-branch: 5911 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=> p1_11@828@01 (or (not break1_1@783@01) break1_1@783@01)))
(push) ; 20
(set-option :timeout 10)
(assert (not (not (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5912 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
; [else-branch: 5912 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 5912 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01))))
; [exec]
; Exception_res_1 := tmp_1
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 21
; [then-branch: 5913 | !(p2_11@829@01) | live]
; [else-branch: 5913 | p2_11@829@01 | live]
(push) ; 22
; [then-branch: 5913 | !(p2_11@829@01)]
(assert (not p2_11@829@01))
(pop) ; 22
(push) ; 22
; [else-branch: 5913 | p2_11@829@01]
(assert p2_11@829@01)
; [eval] !break2_1
(push) ; 23
; [then-branch: 5914 | break2_1@784@01 | live]
; [else-branch: 5914 | !(break2_1@784@01) | live]
(push) ; 24
; [then-branch: 5914 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 24
(push) ; 24
; [else-branch: 5914 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 5915 | p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 5915 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(push) ; 21
; [else-branch: 5915 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(pop) ; 21
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 21
; [then-branch: 5916 | !(p2_11@829@01) | live]
; [else-branch: 5916 | p2_11@829@01 | live]
(push) ; 22
; [then-branch: 5916 | !(p2_11@829@01)]
(assert (not p2_11@829@01))
(pop) ; 22
(push) ; 22
; [else-branch: 5916 | p2_11@829@01]
(assert p2_11@829@01)
; [eval] !break2_1
(push) ; 23
; [then-branch: 5917 | break2_1@784@01 | live]
; [else-branch: 5917 | !(break2_1@784@01) | live]
(push) ; 24
; [then-branch: 5917 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 24
(push) ; 24
; [else-branch: 5917 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_11@829@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5918 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 5918 | p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 5918 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01))]
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 22
; [then-branch: 5919 | !(p1_11@828@01) | live]
; [else-branch: 5919 | p1_11@828@01 | live]
(push) ; 23
; [then-branch: 5919 | !(p1_11@828@01)]
(assert (not p1_11@828@01))
(pop) ; 23
(push) ; 23
; [else-branch: 5919 | p1_11@828@01]
; [eval] !break1_1
(push) ; 24
; [then-branch: 5920 | break1_1@783@01 | live]
; [else-branch: 5920 | !(break1_1@783@01) | live]
(push) ; 25
; [then-branch: 5920 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 25
(push) ; 25
; [else-branch: 5920 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5921 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
; [else-branch: 5921 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 5921 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01))))
; [exec]
; inhale typeof(Exception_res_1) == Exception()
(declare-const $t@836@01 $Snap)
(assert (= $t@836@01 $Snap.unit))
; [eval] typeof(Exception_res_1) == Exception()
; [eval] typeof(Exception_res_1)
; [eval] Exception()
(assert (= (typeof<PyType> tmp_1@835@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_11 && (!break2_1 && !except2_1)
(set-option :timeout 0)
(push) ; 23
; [then-branch: 5922 | !(p2_11@829@01) | live]
; [else-branch: 5922 | p2_11@829@01 | live]
(push) ; 24
; [then-branch: 5922 | !(p2_11@829@01)]
(assert (not p2_11@829@01))
(pop) ; 24
(push) ; 24
; [else-branch: 5922 | p2_11@829@01]
(assert p2_11@829@01)
; [eval] !break2_1
(push) ; 25
; [then-branch: 5923 | break2_1@784@01 | live]
; [else-branch: 5923 | !(break2_1@784@01) | live]
(push) ; 26
; [then-branch: 5923 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 26
(push) ; 26
; [else-branch: 5923 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 5924 | p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 5924 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(push) ; 23
; [else-branch: 5924 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(pop) ; 23
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 23
; [then-branch: 5925 | !(p2_11@829@01) | live]
; [else-branch: 5925 | p2_11@829@01 | live]
(push) ; 24
; [then-branch: 5925 | !(p2_11@829@01)]
(assert (not p2_11@829@01))
(pop) ; 24
(push) ; 24
; [else-branch: 5925 | p2_11@829@01]
(assert p2_11@829@01)
; [eval] !break2_1
(push) ; 25
; [then-branch: 5926 | break2_1@784@01 | live]
; [else-branch: 5926 | !(break2_1@784@01) | live]
(push) ; 26
; [then-branch: 5926 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 26
(push) ; 26
; [else-branch: 5926 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_11@829@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5927 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 5927 | p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 5927 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01))]
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 24
; [then-branch: 5928 | !(p1_11@828@01) | live]
; [else-branch: 5928 | p1_11@828@01 | live]
(push) ; 25
; [then-branch: 5928 | !(p1_11@828@01)]
(assert (not p1_11@828@01))
(pop) ; 25
(push) ; 25
; [else-branch: 5928 | p1_11@828@01]
; [eval] !break1_1
(push) ; 26
; [then-branch: 5929 | break1_1@783@01 | live]
; [else-branch: 5929 | !(break1_1@783@01) | live]
(push) ; 27
; [then-branch: 5929 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 27
(push) ; 27
; [else-branch: 5929 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5930 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
; [else-branch: 5930 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 5930 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01))))
; [exec]
; _err := Exception_res_1
; [exec]
; except1_1 := true
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 25
; [then-branch: 5931 | !(p2_11@829@01) | live]
; [else-branch: 5931 | p2_11@829@01 | live]
(push) ; 26
; [then-branch: 5931 | !(p2_11@829@01)]
(assert (not p2_11@829@01))
(pop) ; 26
(push) ; 26
; [else-branch: 5931 | p2_11@829@01]
(assert p2_11@829@01)
; [eval] !break2_1
(push) ; 27
; [then-branch: 5932 | break2_1@784@01 | live]
; [else-branch: 5932 | !(break2_1@784@01) | live]
(push) ; 28
; [then-branch: 5932 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 28
(push) ; 28
; [else-branch: 5932 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 5933 | p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 5933 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(push) ; 25
; [else-branch: 5933 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(pop) ; 25
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 25
; [then-branch: 5934 | !(p2_11@829@01) | live]
; [else-branch: 5934 | p2_11@829@01 | live]
(push) ; 26
; [then-branch: 5934 | !(p2_11@829@01)]
(assert (not p2_11@829@01))
(pop) ; 26
(push) ; 26
; [else-branch: 5934 | p2_11@829@01]
(assert p2_11@829@01)
; [eval] !break2_1
(push) ; 27
; [then-branch: 5935 | break2_1@784@01 | live]
; [else-branch: 5935 | !(break2_1@784@01) | live]
(push) ; 28
; [then-branch: 5935 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 28
(push) ; 28
; [else-branch: 5935 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_11@829@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5936 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 5936 | p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 5936 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01))]
; [exec]
; p1_13 := p3_5 &&
;   (!break1_1 && !except1_1 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p3_5 && (!break1_1 && !except1_1 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 5937 | !(p3_5@830@01) | live]
; [else-branch: 5937 | p3_5@830@01 | live]
(push) ; 27
; [then-branch: 5937 | !(p3_5@830@01)]
(assert (not p3_5@830@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5937 | p3_5@830@01]
(assert p3_5@830@01)
; [eval] !break1_1
(push) ; 28
; [then-branch: 5938 | break1_1@783@01 | live]
; [else-branch: 5938 | !(break1_1@783@01) | live]
(push) ; 29
; [then-branch: 5938 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 29
(push) ; 29
; [else-branch: 5938 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=> p3_5@830@01 (and p3_5@830@01 (or (not break1_1@783@01) break1_1@783@01))))
(assert (or p3_5@830@01 (not p3_5@830@01)))
; [exec]
; p2_13 := p4_5 &&
;   (!break2_1 && !except2_1 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_5 && (!break2_1 && !except2_1 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 5939 | !(p4_5@831@01) | live]
; [else-branch: 5939 | p4_5@831@01 | live]
(push) ; 27
; [then-branch: 5939 | !(p4_5@831@01)]
(assert (not p4_5@831@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5939 | p4_5@831@01]
(assert p4_5@831@01)
; [eval] !break2_1
(push) ; 28
; [then-branch: 5940 | break2_1@784@01 | live]
; [else-branch: 5940 | !(break2_1@784@01) | live]
(push) ; 29
; [then-branch: 5940 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 29
(push) ; 29
; [else-branch: 5940 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(push) ; 30
; [then-branch: 5941 | except2_1@778@01 | live]
; [else-branch: 5941 | !(except2_1@778@01) | live]
(push) ; 31
; [then-branch: 5941 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 31
(push) ; 31
; [else-branch: 5941 | !(except2_1@778@01)]
(assert (not except2_1@778@01))
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p4_5@831@01
  (and
    p4_5@831@01
    (=>
      (not break2_1@784@01)
      (and (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01)))
    (or (not break2_1@784@01) break2_1@784@01))))
(assert (or p4_5@831@01 (not p4_5@831@01)))
; [exec]
; p3_7 := p3_5 &&
;   (!break1_1 && !except1_1 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p3_5 && (!break1_1 && !except1_1 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 5942 | !(p3_5@830@01) | live]
; [else-branch: 5942 | p3_5@830@01 | live]
(push) ; 27
; [then-branch: 5942 | !(p3_5@830@01)]
(assert (not p3_5@830@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5942 | p3_5@830@01]
(assert p3_5@830@01)
; [eval] !break1_1
(push) ; 28
; [then-branch: 5943 | break1_1@783@01 | live]
; [else-branch: 5943 | !(break1_1@783@01) | live]
(push) ; 29
; [then-branch: 5943 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 29
(push) ; 29
; [else-branch: 5943 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [exec]
; p4_7 := p4_5 &&
;   (!break2_1 && !except2_1 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_5 && (!break2_1 && !except2_1 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 5944 | !(p4_5@831@01) | live]
; [else-branch: 5944 | p4_5@831@01 | live]
(push) ; 27
; [then-branch: 5944 | !(p4_5@831@01)]
(assert (not p4_5@831@01))
(pop) ; 27
(push) ; 27
; [else-branch: 5944 | p4_5@831@01]
(assert p4_5@831@01)
; [eval] !break2_1
(push) ; 28
; [then-branch: 5945 | break2_1@784@01 | live]
; [else-branch: 5945 | !(break2_1@784@01) | live]
(push) ; 29
; [then-branch: 5945 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 29
(push) ; 29
; [else-branch: 5945 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(push) ; 30
; [then-branch: 5946 | except2_1@778@01 | live]
; [else-branch: 5946 | !(except2_1@778@01) | live]
(push) ; 31
; [then-branch: 5946 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 31
(push) ; 31
; [else-branch: 5946 | !(except2_1@778@01)]
(assert (not except2_1@778@01))
; [eval] !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p4_7@837@01 Bool)
(assert (=
  p4_7@837@01
  (and p4_5@831@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
; [eval] p1_13 && (!break1_1 && !except1_1)
; [then-branch: 5947 | False | dead]
; [else-branch: 5947 | True | live]
(push) ; 26
; [else-branch: 5947 | True]
(pop) ; 26
; [eval] !(p1_13 && (!break1_1 && !except1_1))
; [eval] p1_13 && (!break1_1 && !except1_1)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5948 | True | live]
; [else-branch: 5948 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 5948 | True]
; [eval] p2_13 && (!break2_1 && !except2_1)
; [then-branch: 5949 | False | dead]
; [else-branch: 5949 | True | live]
(push) ; 27
; [else-branch: 5949 | True]
(pop) ; 27
; [eval] !(p2_13 && (!break2_1 && !except2_1))
; [eval] p2_13 && (!break2_1 && !except2_1)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5950 | True | live]
; [else-branch: 5950 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 5950 | True]
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 28
; [then-branch: 5951 | !(p3_5@830@01) | live]
; [else-branch: 5951 | p3_5@830@01 | live]
(push) ; 29
; [then-branch: 5951 | !(p3_5@830@01)]
(assert (not p3_5@830@01))
(pop) ; 29
(push) ; 29
; [else-branch: 5951 | p3_5@830@01]
(assert p3_5@830@01)
; [eval] !break1_1
(push) ; 30
; [then-branch: 5952 | break1_1@783@01 | live]
; [else-branch: 5952 | !(break1_1@783@01) | live]
(push) ; 31
; [then-branch: 5952 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 31
(push) ; 31
; [else-branch: 5952 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 5953 | False | dead]
; [else-branch: 5953 | True | live]
(push) ; 28
; [else-branch: 5953 | True]
(pop) ; 28
; [eval] !(p3_5 && (!break1_1 && !except1_1))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 28
; [then-branch: 5954 | !(p3_5@830@01) | live]
; [else-branch: 5954 | p3_5@830@01 | live]
(push) ; 29
; [then-branch: 5954 | !(p3_5@830@01)]
(assert (not p3_5@830@01))
(pop) ; 29
(push) ; 29
; [else-branch: 5954 | p3_5@830@01]
(assert p3_5@830@01)
; [eval] !break1_1
(push) ; 30
; [then-branch: 5955 | break1_1@783@01 | live]
; [else-branch: 5955 | !(break1_1@783@01) | live]
(push) ; 31
; [then-branch: 5955 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 31
(push) ; 31
; [else-branch: 5955 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5956 | True | live]
; [else-branch: 5956 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 5956 | True]
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 29
; [then-branch: 5957 | !(p4_5@831@01) | live]
; [else-branch: 5957 | p4_5@831@01 | live]
(push) ; 30
; [then-branch: 5957 | !(p4_5@831@01)]
(assert (not p4_5@831@01))
(pop) ; 30
(push) ; 30
; [else-branch: 5957 | p4_5@831@01]
(assert p4_5@831@01)
; [eval] !break2_1
(push) ; 31
; [then-branch: 5958 | break2_1@784@01 | live]
; [else-branch: 5958 | !(break2_1@784@01) | live]
(push) ; 32
; [then-branch: 5958 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 32
(push) ; 32
; [else-branch: 5958 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p4_5@831@01 (and p4_5@831@01 (or (not break2_1@784@01) break2_1@784@01))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4_5@831@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5959 | p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 5959 | !(p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 5959 | !(p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(assert (not (and p4_5@831@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(pop) ; 29
; [eval] !(p4_5 && (!break2_1 && !except2_1))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 29
; [then-branch: 5960 | !(p4_5@831@01) | live]
; [else-branch: 5960 | p4_5@831@01 | live]
(push) ; 30
; [then-branch: 5960 | !(p4_5@831@01)]
(assert (not p4_5@831@01))
(pop) ; 30
(push) ; 30
; [else-branch: 5960 | p4_5@831@01]
(assert p4_5@831@01)
; [eval] !break2_1
(push) ; 31
; [then-branch: 5961 | break2_1@784@01 | live]
; [else-branch: 5961 | !(break2_1@784@01) | live]
(push) ; 32
; [then-branch: 5961 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 32
(push) ; 32
; [else-branch: 5961 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4_5@831@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4_5@831@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5962 | !(p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 5962 | p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 5962 | !(p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(assert (not (and p4_5@831@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 30
; [then-branch: 5963 | !(p3_5@830@01) | live]
; [else-branch: 5963 | p3_5@830@01 | live]
(push) ; 31
; [then-branch: 5963 | !(p3_5@830@01)]
(assert (not p3_5@830@01))
(pop) ; 31
(push) ; 31
; [else-branch: 5963 | p3_5@830@01]
(assert p3_5@830@01)
; [eval] !break1_1
(push) ; 32
; [then-branch: 5964 | break1_1@783@01 | live]
; [else-branch: 5964 | !(break1_1@783@01) | live]
(push) ; 33
; [then-branch: 5964 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 33
(push) ; 33
; [else-branch: 5964 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 5965 | False | dead]
; [else-branch: 5965 | True | live]
(push) ; 30
; [else-branch: 5965 | True]
(pop) ; 30
; [eval] !(p3_5 && (!break1_1 && !except1_1))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 30
; [then-branch: 5966 | !(p3_5@830@01) | live]
; [else-branch: 5966 | p3_5@830@01 | live]
(push) ; 31
; [then-branch: 5966 | !(p3_5@830@01)]
(assert (not p3_5@830@01))
(pop) ; 31
(push) ; 31
; [else-branch: 5966 | p3_5@830@01]
(assert p3_5@830@01)
; [eval] !break1_1
(push) ; 32
; [then-branch: 5967 | break1_1@783@01 | live]
; [else-branch: 5967 | !(break1_1@783@01) | live]
(push) ; 33
; [then-branch: 5967 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 33
(push) ; 33
; [else-branch: 5967 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5968 | True | live]
; [else-branch: 5968 | False | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 5968 | True]
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 31
; [then-branch: 5969 | !(p4_5@831@01) | live]
; [else-branch: 5969 | p4_5@831@01 | live]
(push) ; 32
; [then-branch: 5969 | !(p4_5@831@01)]
(assert (not p4_5@831@01))
(pop) ; 32
(push) ; 32
; [else-branch: 5969 | p4_5@831@01]
(assert p4_5@831@01)
; [eval] !break2_1
(push) ; 33
; [then-branch: 5970 | break2_1@784@01 | live]
; [else-branch: 5970 | !(break2_1@784@01) | live]
(push) ; 34
; [then-branch: 5970 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 34
(push) ; 34
; [else-branch: 5970 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 5971 | p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 5971 | !(p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(push) ; 31
; [else-branch: 5971 | !(p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(pop) ; 31
; [eval] !(p4_5 && (!break2_1 && !except2_1))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 31
; [then-branch: 5972 | !(p4_5@831@01) | live]
; [else-branch: 5972 | p4_5@831@01 | live]
(push) ; 32
; [then-branch: 5972 | !(p4_5@831@01)]
(assert (not p4_5@831@01))
(pop) ; 32
(push) ; 32
; [else-branch: 5972 | p4_5@831@01]
(assert p4_5@831@01)
; [eval] !break2_1
(push) ; 33
; [then-branch: 5973 | break2_1@784@01 | live]
; [else-branch: 5973 | !(break2_1@784@01) | live]
(push) ; 34
; [then-branch: 5973 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 34
(push) ; 34
; [else-branch: 5973 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4_5@831@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5974 | !(p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 5974 | p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 5974 | !(p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01))]
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 32
; [then-branch: 5975 | !(p1_10@801@01) | live]
; [else-branch: 5975 | p1_10@801@01 | live]
(push) ; 33
; [then-branch: 5975 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 33
(push) ; 33
; [else-branch: 5975 | p1_10@801@01]
; [eval] !break1_1
(push) ; 34
; [then-branch: 5976 | break1_1@783@01 | live]
; [else-branch: 5976 | !(break1_1@783@01) | live]
(push) ; 35
; [then-branch: 5976 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 35
(push) ; 35
; [else-branch: 5976 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (=> p1_10@801@01 (or (not break1_1@783@01) break1_1@783@01)))
; [then-branch: 5977 | False | dead]
; [else-branch: 5977 | True | live]
(push) ; 32
; [else-branch: 5977 | True]
(pop) ; 32
; [eval] !(p1_10 && (!break1_1 && !except1_1))
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 32
; [then-branch: 5978 | !(p1_10@801@01) | live]
; [else-branch: 5978 | p1_10@801@01 | live]
(push) ; 33
; [then-branch: 5978 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 33
(push) ; 33
; [else-branch: 5978 | p1_10@801@01]
; [eval] !break1_1
(push) ; 34
; [then-branch: 5979 | break1_1@783@01 | live]
; [else-branch: 5979 | !(break1_1@783@01) | live]
(push) ; 35
; [then-branch: 5979 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 35
(push) ; 35
; [else-branch: 5979 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5980 | True | live]
; [else-branch: 5980 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 5980 | True]
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 33
; [then-branch: 5981 | !(p2_10@802@01) | live]
; [else-branch: 5981 | p2_10@802@01 | live]
(push) ; 34
; [then-branch: 5981 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 34
(push) ; 34
; [else-branch: 5981 | p2_10@802@01]
(assert p2_10@802@01)
; [eval] !break2_1
(push) ; 35
; [then-branch: 5982 | break2_1@784@01 | live]
; [else-branch: 5982 | !(break2_1@784@01) | live]
(push) ; 36
; [then-branch: 5982 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 36
(push) ; 36
; [else-branch: 5982 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 5983 | p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 5983 | !(p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(push) ; 33
; [else-branch: 5983 | !(p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(pop) ; 33
; [eval] !(p2_10 && (!break2_1 && !except2_1))
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 33
; [then-branch: 5984 | !(p2_10@802@01) | live]
; [else-branch: 5984 | p2_10@802@01 | live]
(push) ; 34
; [then-branch: 5984 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 34
(push) ; 34
; [else-branch: 5984 | p2_10@802@01]
(assert p2_10@802@01)
; [eval] !break2_1
(push) ; 35
; [then-branch: 5985 | break2_1@784@01 | live]
; [else-branch: 5985 | !(break2_1@784@01) | live]
(push) ; 36
; [then-branch: 5985 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 36
(push) ; 36
; [else-branch: 5985 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not (and p2_10@802@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5986 | !(p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 5986 | p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 5986 | !(p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01))]
; [exec]
; assert (p1_10 && (!break1_1 && !except1_1) ==>
;   _loop_termination_flag_1 ==> !true) &&
;   (p2_10 && (!break2_1 && !except2_1) ==>
;   _loop_termination_flag_1_0 ==> !true)
; [eval] p1_10 && (!break1_1 && !except1_1) ==> _loop_termination_flag_1 ==> !true
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 34
; [then-branch: 5987 | !(p1_10@801@01) | live]
; [else-branch: 5987 | p1_10@801@01 | live]
(push) ; 35
; [then-branch: 5987 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5987 | p1_10@801@01]
; [eval] !break1_1
(push) ; 36
; [then-branch: 5988 | break1_1@783@01 | live]
; [else-branch: 5988 | !(break1_1@783@01) | live]
(push) ; 37
; [then-branch: 5988 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 37
(push) ; 37
; [else-branch: 5988 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 5989 | False | dead]
; [else-branch: 5989 | True | live]
(push) ; 35
; [else-branch: 5989 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_10 && (!break2_1 && !except2_1) ==> _loop_termination_flag_1_0 ==> !true
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 34
; [then-branch: 5990 | !(p2_10@802@01) | live]
; [else-branch: 5990 | p2_10@802@01 | live]
(push) ; 35
; [then-branch: 5990 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5990 | p2_10@802@01]
(assert p2_10@802@01)
; [eval] !break2_1
(push) ; 36
; [then-branch: 5991 | break2_1@784@01 | live]
; [else-branch: 5991 | !(break2_1@784@01) | live]
(push) ; 37
; [then-branch: 5991 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 37
(push) ; 37
; [else-branch: 5991 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 5992 | p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 5992 | !(p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(push) ; 35
; [else-branch: 5992 | !(p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_9 && !bypass1_1 ==> true
; [eval] p1_9 && !bypass1_1
(push) ; 34
; [then-branch: 5993 | !(p1_9@689@01) | live]
; [else-branch: 5993 | p1_9@689@01 | live]
(push) ; 35
; [then-branch: 5993 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5993 | p1_9@689@01]
(assert p1_9@689@01)
; [eval] !bypass1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5994 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5994 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 5994 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> true
; [eval] p2_9 && !bypass2_1
(push) ; 34
; [then-branch: 5995 | !(p2_9@690@01) | live]
; [else-branch: 5995 | p2_9@690@01 | live]
(push) ; 35
; [then-branch: 5995 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5995 | p2_9@690@01]
(assert p2_9@690@01)
; [eval] !bypass2_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5996 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 5996 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 5996 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1
(push) ; 34
; [then-branch: 5997 | !(p1_9@689@01) | live]
; [else-branch: 5997 | p1_9@689@01 | live]
(push) ; 35
; [then-branch: 5997 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 35
(push) ; 35
; [else-branch: 5997 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5998 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 5998 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 5998 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1
(push) ; 35
; [then-branch: 5999 | !(p2_9@690@01) | live]
; [else-branch: 5999 | p2_9@690@01 | live]
(push) ; 36
; [then-branch: 5999 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 36
(push) ; 36
; [else-branch: 5999 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6000 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 6000 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 6000 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1 ==> issubtype(typeof(c_6.Container_value), int())
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 6001 | !(p1_9@689@01) | live]
; [else-branch: 6001 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 6001 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6001 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6002 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 6002 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6002 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] issubtype(typeof(c_6.Container_value), int())
; [eval] typeof(c_6.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(push) ; 36
(assert (not (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (issubtype<Bool> (typeof<PyType> Container_value@834@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (issubtype<Bool> (typeof<PyType> Container_value@834@01) (as int<PyType>  PyType))))
; [eval] p2_9 && !bypass2_1 ==> issubtype(typeof(c_6_0.Container_valuep), int())
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 6003 | !(p2_9@690@01) | live]
; [else-branch: 6003 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 6003 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6003 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6004 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 6004 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6004 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] issubtype(typeof(c_6_0.Container_valuep), int())
; [eval] typeof(c_6_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1 ==> !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 6005 | !(p1_9@689@01) | live]
; [else-branch: 6005 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 6005 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6005 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6006 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 6006 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6006 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] !idle1_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6007 | True | live]
; [else-branch: 6007 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 6007 | True]
; [eval] _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1@785@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1@785@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6008 | _loop_check_before_1@785@01 | live]
; [else-branch: 6008 | !(_loop_check_before_1@785@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 6008 | _loop_check_before_1@785@01]
(assert _loop_check_before_1@785@01)
; [eval] _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 6009 | False | live]
; [else-branch: 6009 | True | live]
(push) ; 43
; [then-branch: 6009 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 6009 | True]
; [eval] perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_159)) == none
; [eval] perm(MustTerminate(_cthread_159))
(push) ; 44
; [then-branch: 6010 | False | live]
; [else-branch: 6010 | True | live]
(push) ; 45
; [then-branch: 6010 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 6010 | True]
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
(push) ; 46
; [then-branch: 6011 | False | live]
; [else-branch: 6011 | True | live]
(push) ; 47
; [then-branch: 6011 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 6011 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
(push) ; 48
; [then-branch: 6012 | False | live]
; [else-branch: 6012 | True | live]
(push) ; 49
; [then-branch: 6012 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 6012 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 6013 | False | live]
; [else-branch: 6013 | True | live]
(push) ; 51
; [then-branch: 6013 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 6013 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 6008 | !(_loop_check_before_1@785@01)]
(assert (not _loop_check_before_1@785@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (and
    p1_9@689@01
    (not bypass1_1@756@01)
    (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))))
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 6014 | !(p2_9@690@01) | live]
; [else-branch: 6014 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 6014 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6014 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6015 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 6015 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6015 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6016 | True | live]
; [else-branch: 6016 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 6016 | True]
; [eval] _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1_0@786@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1_0@786@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6017 | _loop_check_before_1_0@786@01 | live]
; [else-branch: 6017 | !(_loop_check_before_1_0@786@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 6017 | _loop_check_before_1_0@786@01]
(assert _loop_check_before_1_0@786@01)
; [eval] _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 6018 | False | live]
; [else-branch: 6018 | True | live]
(push) ; 43
; [then-branch: 6018 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 6018 | True]
; [eval] perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_159_0)) == none
; [eval] perm(MustTerminate_0(_cthread_159_0))
(push) ; 44
; [then-branch: 6019 | False | live]
; [else-branch: 6019 | True | live]
(push) ; 45
; [then-branch: 6019 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 6019 | True]
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false)
(push) ; 46
; [then-branch: 6020 | False | live]
; [else-branch: 6020 | True | live]
(push) ; 47
; [then-branch: 6020 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 6020 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false)
(push) ; 48
; [then-branch: 6021 | False | live]
; [else-branch: 6021 | True | live]
(push) ; 49
; [then-branch: 6021 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 6021 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 6022 | False | live]
; [else-branch: 6022 | True | live]
(push) ; 51
; [then-branch: 6022 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 6022 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 6017 | !(_loop_check_before_1_0@786@01)]
(assert (not _loop_check_before_1_0@786@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (and
    p2_9@690@01
    (not bypass2_1@757@01)
    (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))))
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1 ==> !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 6023 | !(p1_9@689@01) | live]
; [else-branch: 6023 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 6023 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6023 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6024 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 6024 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6024 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] !idle1_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6025 | True | live]
; [else-branch: 6025 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 6025 | True]
; [eval] !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_1
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1@785@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1@785@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6026 | !(_loop_check_before_1@785@01) | live]
; [else-branch: 6026 | _loop_check_before_1@785@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 6026 | !(_loop_check_before_1@785@01)]
(assert (not _loop_check_before_1@785@01))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
(push) ; 42
; [then-branch: 6027 | False | live]
; [else-branch: 6027 | True | live]
(push) ; 43
; [then-branch: 6027 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 6027 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
(push) ; 44
; [then-branch: 6028 | False | live]
; [else-branch: 6028 | True | live]
(push) ; 45
; [then-branch: 6028 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 6028 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 6029 | False | live]
; [else-branch: 6029 | True | live]
(push) ; 47
; [then-branch: 6029 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 6029 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 6026 | _loop_check_before_1@785@01]
(assert _loop_check_before_1@785@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (and
    p1_9@689@01
    (not bypass1_1@756@01)
    (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))))
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 6030 | !(p2_9@690@01) | live]
; [else-branch: 6030 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 6030 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6030 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6031 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 6031 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6031 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6032 | True | live]
; [else-branch: 6032 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 6032 | True]
; [eval] !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_1_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1_0@786@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1_0@786@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6033 | !(_loop_check_before_1_0@786@01) | live]
; [else-branch: 6033 | _loop_check_before_1_0@786@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 6033 | !(_loop_check_before_1_0@786@01)]
(assert (not _loop_check_before_1_0@786@01))
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false)
(push) ; 42
; [then-branch: 6034 | False | live]
; [else-branch: 6034 | True | live]
(push) ; 43
; [then-branch: 6034 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 6034 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false)
(push) ; 44
; [then-branch: 6035 | False | live]
; [else-branch: 6035 | True | live]
(push) ; 45
; [then-branch: 6035 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 6035 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 6036 | False | live]
; [else-branch: 6036 | True | live]
(push) ; 47
; [then-branch: 6036 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 6036 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 6033 | _loop_check_before_1_0@786@01]
(assert _loop_check_before_1_0@786@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (and
    p2_9@690@01
    (not bypass2_1@757@01)
    (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))))
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] bypass1_1 ==> tmp1_13 == except1_1
(push) ; 36
; [then-branch: 6037 | bypass1_1@756@01 | dead]
; [else-branch: 6037 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6037 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_16 == break1_1
(push) ; 36
; [then-branch: 6038 | bypass1_1@756@01 | dead]
; [else-branch: 6038 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6038 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_11 == _loop_measures_1
(push) ; 36
; [then-branch: 6039 | bypass1_1@756@01 | dead]
; [else-branch: 6039 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6039 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_14 == _err
(push) ; 36
; [then-branch: 6040 | bypass1_1@756@01 | dead]
; [else-branch: 6040 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6040 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_15 == _loop_check_before_1
(push) ; 36
; [then-branch: 6041 | bypass1_1@756@01 | dead]
; [else-branch: 6041 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6041 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_12 == Exception_res_1
(push) ; 36
; [then-branch: 6042 | bypass1_1@756@01 | dead]
; [else-branch: 6042 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6042 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_11 == _loop_measures_1_0
(push) ; 36
; [then-branch: 6043 | bypass2_1@757@01 | dead]
; [else-branch: 6043 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6043 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_15 == _loop_check_before_1_0
(push) ; 36
; [then-branch: 6044 | bypass2_1@757@01 | dead]
; [else-branch: 6044 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6044 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_12 == Exception_res_1_0
(push) ; 36
; [then-branch: 6045 | bypass2_1@757@01 | dead]
; [else-branch: 6045 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6045 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_14 == _err_2
(push) ; 36
; [then-branch: 6046 | bypass2_1@757@01 | dead]
; [else-branch: 6046 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6046 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_13 == except2_1
(push) ; 36
; [then-branch: 6047 | bypass2_1@757@01 | dead]
; [else-branch: 6047 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6047 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_16 == break2_1
(push) ; 36
; [then-branch: 6048 | bypass2_1@757@01 | dead]
; [else-branch: 6048 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6048 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 24
; [then-branch: 6049 | !(p1_11@828@01) | live]
; [else-branch: 6049 | p1_11@828@01 | live]
(push) ; 25
; [then-branch: 6049 | !(p1_11@828@01)]
(assert (not p1_11@828@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6049 | p1_11@828@01]
(assert p1_11@828@01)
; [eval] !break1_1
(push) ; 26
; [then-branch: 6050 | break1_1@783@01 | live]
; [else-branch: 6050 | !(break1_1@783@01) | live]
(push) ; 27
; [then-branch: 6050 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 27
(push) ; 27
; [else-branch: 6050 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6051 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
; [else-branch: 6051 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 6051 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01))))
(pop) ; 24
(pop) ; 23
(pop) ; 22
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 22
; [then-branch: 6052 | !(p1_11@828@01) | live]
; [else-branch: 6052 | p1_11@828@01 | live]
(push) ; 23
; [then-branch: 6052 | !(p1_11@828@01)]
(assert (not p1_11@828@01))
(pop) ; 23
(push) ; 23
; [else-branch: 6052 | p1_11@828@01]
(assert p1_11@828@01)
; [eval] !break1_1
(push) ; 24
; [then-branch: 6053 | break1_1@783@01 | live]
; [else-branch: 6053 | !(break1_1@783@01) | live]
(push) ; 25
; [then-branch: 6053 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 25
(push) ; 25
; [else-branch: 6053 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6054 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
; [else-branch: 6054 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 6054 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01))))
(pop) ; 22
(pop) ; 21
(pop) ; 20
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 20
; [then-branch: 6055 | !(p1_11@828@01) | live]
; [else-branch: 6055 | p1_11@828@01 | live]
(push) ; 21
; [then-branch: 6055 | !(p1_11@828@01)]
(assert (not p1_11@828@01))
(pop) ; 21
(push) ; 21
; [else-branch: 6055 | p1_11@828@01]
(assert p1_11@828@01)
; [eval] !break1_1
(push) ; 22
; [then-branch: 6056 | break1_1@783@01 | live]
; [else-branch: 6056 | !(break1_1@783@01) | live]
(push) ; 23
; [then-branch: 6056 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 23
(push) ; 23
; [else-branch: 6056 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6057 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
; [else-branch: 6057 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 6057 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01))))
(pop) ; 20
(pop) ; 19
(pop) ; 18
(push) ; 18
; [else-branch: 5903 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(assert (not (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(pop) ; 18
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 18
; [then-branch: 6058 | !(p1_11@828@01) | live]
; [else-branch: 6058 | p1_11@828@01 | live]
(push) ; 19
; [then-branch: 6058 | !(p1_11@828@01)]
(assert (not p1_11@828@01))
(pop) ; 19
(push) ; 19
; [else-branch: 6058 | p1_11@828@01]
(assert p1_11@828@01)
; [eval] !break1_1
(push) ; 20
; [then-branch: 6059 | break1_1@783@01 | live]
; [else-branch: 6059 | !(break1_1@783@01) | live]
(push) ; 21
; [then-branch: 6059 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6059 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6060 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 6060 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 6060 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(assert (not (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 19
; [then-branch: 6061 | !(p2_11@829@01) | live]
; [else-branch: 6061 | p2_11@829@01 | live]
(push) ; 20
; [then-branch: 6061 | !(p2_11@829@01)]
(assert (not p2_11@829@01))
(pop) ; 20
(push) ; 20
; [else-branch: 6061 | p2_11@829@01]
(assert p2_11@829@01)
; [eval] !break2_1
(push) ; 21
; [then-branch: 6062 | break2_1@784@01 | live]
; [else-branch: 6062 | !(break2_1@784@01) | live]
(push) ; 22
; [then-branch: 6062 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6062 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=> p2_11@829@01 (and p2_11@829@01 (or (not break2_1@784@01) break2_1@784@01))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_11@829@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6063 | p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 6063 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(set-option :timeout 0)
(push) ; 19
; [else-branch: 6063 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(assert (not (and p2_11@829@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(pop) ; 19
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 19
; [then-branch: 6064 | !(p2_11@829@01) | live]
; [else-branch: 6064 | p2_11@829@01 | live]
(push) ; 20
; [then-branch: 6064 | !(p2_11@829@01)]
(assert (not p2_11@829@01))
(pop) ; 20
(push) ; 20
; [else-branch: 6064 | p2_11@829@01]
(assert p2_11@829@01)
; [eval] !break2_1
(push) ; 21
; [then-branch: 6065 | break2_1@784@01 | live]
; [else-branch: 6065 | !(break2_1@784@01) | live]
(push) ; 22
; [then-branch: 6065 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6065 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_11@829@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_11@829@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6066 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 6066 | p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 6066 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(assert (not (and p2_11@829@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
; [exec]
; tmp_1 := new()
(declare-const tmp_1@838@01 $Ref)
(assert (not (= tmp_1@838@01 $Ref.null)))
(assert (not (= tmp_1@838@01 c_1@697@01)))
(assert (not (= tmp_1@838@01 tmp2_14@740@01)))
(assert (not (= tmp_1@838@01 c_1_0@698@01)))
(assert (not (= tmp_1@838@01 tmp1_12@735@01)))
(assert (not (= tmp_1@838@01 tmp1_14@739@01)))
(assert (not (= tmp_1@838@01 _cthread_159_0@692@01)))
(assert (not (= tmp_1@838@01 _err@775@01)))
(assert (not (= tmp_1@838@01 Exception_res_1_0@774@01)))
(assert (not (= tmp_1@838@01 b_1@699@01)))
(assert (not (= tmp_1@838@01 _err_2@777@01)))
(assert (not (= tmp_1@838@01 Exception_res_1@773@01)))
(assert (not (= tmp_1@838@01 tmp2_12@736@01)))
(assert (not
  (=
    tmp_1@838@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))
(assert (not
  (=
    tmp_1@838@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@787@01)))))))
(assert (not (= tmp_1@838@01 b_1_0@700@01)))
(assert (not (= tmp_1@838@01 _cthread_159@691@01)))
(assert (not (= tmp_1@838@01 tmp_1@796@01)))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 20
; [then-branch: 6067 | !(p1_11@828@01) | live]
; [else-branch: 6067 | p1_11@828@01 | live]
(push) ; 21
; [then-branch: 6067 | !(p1_11@828@01)]
(assert (not p1_11@828@01))
(pop) ; 21
(push) ; 21
; [else-branch: 6067 | p1_11@828@01]
(assert p1_11@828@01)
; [eval] !break1_1
(push) ; 22
; [then-branch: 6068 | break1_1@783@01 | live]
; [else-branch: 6068 | !(break1_1@783@01) | live]
(push) ; 23
; [then-branch: 6068 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 23
(push) ; 23
; [else-branch: 6068 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 6069 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 6069 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(push) ; 20
; [else-branch: 6069 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(pop) ; 20
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 20
; [then-branch: 6070 | !(p1_11@828@01) | live]
; [else-branch: 6070 | p1_11@828@01 | live]
(push) ; 21
; [then-branch: 6070 | !(p1_11@828@01)]
(assert (not p1_11@828@01))
(pop) ; 21
(push) ; 21
; [else-branch: 6070 | p1_11@828@01]
(assert p1_11@828@01)
; [eval] !break1_1
(push) ; 22
; [then-branch: 6071 | break1_1@783@01 | live]
; [else-branch: 6071 | !(break1_1@783@01) | live]
(push) ; 23
; [then-branch: 6071 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 23
(push) ; 23
; [else-branch: 6071 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6072 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 6072 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 6072 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01))]
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 21
; [then-branch: 6073 | !(p2_11@829@01) | live]
; [else-branch: 6073 | p2_11@829@01 | live]
(push) ; 22
; [then-branch: 6073 | !(p2_11@829@01)]
(assert (not p2_11@829@01))
(pop) ; 22
(push) ; 22
; [else-branch: 6073 | p2_11@829@01]
(assert p2_11@829@01)
; [eval] !break2_1
(push) ; 23
; [then-branch: 6074 | break2_1@784@01 | live]
; [else-branch: 6074 | !(break2_1@784@01) | live]
(push) ; 24
; [then-branch: 6074 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 24
(push) ; 24
; [else-branch: 6074 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 6075 | p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 6075 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(push) ; 21
; [else-branch: 6075 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(pop) ; 21
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 21
; [then-branch: 6076 | !(p2_11@829@01) | live]
; [else-branch: 6076 | p2_11@829@01 | live]
(push) ; 22
; [then-branch: 6076 | !(p2_11@829@01)]
(assert (not p2_11@829@01))
(pop) ; 22
(push) ; 22
; [else-branch: 6076 | p2_11@829@01]
(assert p2_11@829@01)
; [eval] !break2_1
(push) ; 23
; [then-branch: 6077 | break2_1@784@01 | live]
; [else-branch: 6077 | !(break2_1@784@01) | live]
(push) ; 24
; [then-branch: 6077 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 24
(push) ; 24
; [else-branch: 6077 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_11@829@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6078 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 6078 | p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 6078 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01))]
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 22
; [then-branch: 6079 | !(p1_11@828@01) | live]
; [else-branch: 6079 | p1_11@828@01 | live]
(push) ; 23
; [then-branch: 6079 | !(p1_11@828@01)]
(assert (not p1_11@828@01))
(pop) ; 23
(push) ; 23
; [else-branch: 6079 | p1_11@828@01]
(assert p1_11@828@01)
; [eval] !break1_1
(push) ; 24
; [then-branch: 6080 | break1_1@783@01 | live]
; [else-branch: 6080 | !(break1_1@783@01) | live]
(push) ; 25
; [then-branch: 6080 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 25
(push) ; 25
; [else-branch: 6080 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 6081 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 6081 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(push) ; 22
; [else-branch: 6081 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(pop) ; 22
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 22
; [then-branch: 6082 | !(p1_11@828@01) | live]
; [else-branch: 6082 | p1_11@828@01 | live]
(push) ; 23
; [then-branch: 6082 | !(p1_11@828@01)]
(assert (not p1_11@828@01))
(pop) ; 23
(push) ; 23
; [else-branch: 6082 | p1_11@828@01]
(assert p1_11@828@01)
; [eval] !break1_1
(push) ; 24
; [then-branch: 6083 | break1_1@783@01 | live]
; [else-branch: 6083 | !(break1_1@783@01) | live]
(push) ; 25
; [then-branch: 6083 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 25
(push) ; 25
; [else-branch: 6083 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6084 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 6084 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 6084 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01))]
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 23
; [then-branch: 6085 | !(p2_11@829@01) | live]
; [else-branch: 6085 | p2_11@829@01 | live]
(push) ; 24
; [then-branch: 6085 | !(p2_11@829@01)]
(assert (not p2_11@829@01))
(pop) ; 24
(push) ; 24
; [else-branch: 6085 | p2_11@829@01]
(assert p2_11@829@01)
; [eval] !break2_1
(push) ; 25
; [then-branch: 6086 | break2_1@784@01 | live]
; [else-branch: 6086 | !(break2_1@784@01) | live]
(push) ; 26
; [then-branch: 6086 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 26
(push) ; 26
; [else-branch: 6086 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 6087 | p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 6087 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(push) ; 23
; [else-branch: 6087 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(pop) ; 23
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 23
; [then-branch: 6088 | !(p2_11@829@01) | live]
; [else-branch: 6088 | p2_11@829@01 | live]
(push) ; 24
; [then-branch: 6088 | !(p2_11@829@01)]
(assert (not p2_11@829@01))
(pop) ; 24
(push) ; 24
; [else-branch: 6088 | p2_11@829@01]
(assert p2_11@829@01)
; [eval] !break2_1
(push) ; 25
; [then-branch: 6089 | break2_1@784@01 | live]
; [else-branch: 6089 | !(break2_1@784@01) | live]
(push) ; 26
; [then-branch: 6089 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 26
(push) ; 26
; [else-branch: 6089 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_11@829@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6090 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 6090 | p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 6090 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01))]
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 24
; [then-branch: 6091 | !(p1_11@828@01) | live]
; [else-branch: 6091 | p1_11@828@01 | live]
(push) ; 25
; [then-branch: 6091 | !(p1_11@828@01)]
(assert (not p1_11@828@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6091 | p1_11@828@01]
(assert p1_11@828@01)
; [eval] !break1_1
(push) ; 26
; [then-branch: 6092 | break1_1@783@01 | live]
; [else-branch: 6092 | !(break1_1@783@01) | live]
(push) ; 27
; [then-branch: 6092 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 27
(push) ; 27
; [else-branch: 6092 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 6093 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 6093 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(push) ; 24
; [else-branch: 6093 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(pop) ; 24
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 24
; [then-branch: 6094 | !(p1_11@828@01) | live]
; [else-branch: 6094 | p1_11@828@01 | live]
(push) ; 25
; [then-branch: 6094 | !(p1_11@828@01)]
(assert (not p1_11@828@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6094 | p1_11@828@01]
(assert p1_11@828@01)
; [eval] !break1_1
(push) ; 26
; [then-branch: 6095 | break1_1@783@01 | live]
; [else-branch: 6095 | !(break1_1@783@01) | live]
(push) ; 27
; [then-branch: 6095 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 27
(push) ; 27
; [else-branch: 6095 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6096 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 6096 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 6096 | !(p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01))]
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 25
; [then-branch: 6097 | !(p2_11@829@01) | live]
; [else-branch: 6097 | p2_11@829@01 | live]
(push) ; 26
; [then-branch: 6097 | !(p2_11@829@01)]
(assert (not p2_11@829@01))
(pop) ; 26
(push) ; 26
; [else-branch: 6097 | p2_11@829@01]
(assert p2_11@829@01)
; [eval] !break2_1
(push) ; 27
; [then-branch: 6098 | break2_1@784@01 | live]
; [else-branch: 6098 | !(break2_1@784@01) | live]
(push) ; 28
; [then-branch: 6098 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 28
(push) ; 28
; [else-branch: 6098 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 6099 | p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 6099 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(push) ; 25
; [else-branch: 6099 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(pop) ; 25
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 25
; [then-branch: 6100 | !(p2_11@829@01) | live]
; [else-branch: 6100 | p2_11@829@01 | live]
(push) ; 26
; [then-branch: 6100 | !(p2_11@829@01)]
(assert (not p2_11@829@01))
(pop) ; 26
(push) ; 26
; [else-branch: 6100 | p2_11@829@01]
(assert p2_11@829@01)
; [eval] !break2_1
(push) ; 27
; [then-branch: 6101 | break2_1@784@01 | live]
; [else-branch: 6101 | !(break2_1@784@01) | live]
(push) ; 28
; [then-branch: 6101 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 28
(push) ; 28
; [else-branch: 6101 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_11@829@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6102 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 6102 | p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6102 | !(p2_11@829@01 && !(break2_1@784@01) && !(except2_1@778@01))]
; [exec]
; p1_13 := p3_5 &&
;   (!break1_1 && !except1_1 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p3_5 && (!break1_1 && !except1_1 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 6103 | !(p3_5@830@01) | live]
; [else-branch: 6103 | p3_5@830@01 | live]
(push) ; 27
; [then-branch: 6103 | !(p3_5@830@01)]
(assert (not p3_5@830@01))
(pop) ; 27
(push) ; 27
; [else-branch: 6103 | p3_5@830@01]
(assert p3_5@830@01)
; [eval] !break1_1
(push) ; 28
; [then-branch: 6104 | break1_1@783@01 | live]
; [else-branch: 6104 | !(break1_1@783@01) | live]
(push) ; 29
; [then-branch: 6104 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 29
(push) ; 29
; [else-branch: 6104 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 30
; [then-branch: 6105 | except1_1@776@01 | live]
; [else-branch: 6105 | !(except1_1@776@01) | live]
(push) ; 31
; [then-branch: 6105 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 31
(push) ; 31
; [else-branch: 6105 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p3_5@830@01
  (and
    p3_5@830@01
    (=>
      (not break1_1@783@01)
      (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01)))
    (or (not break1_1@783@01) break1_1@783@01))))
(assert (or p3_5@830@01 (not p3_5@830@01)))
; [exec]
; p2_13 := p4_5 &&
;   (!break2_1 && !except2_1 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_5 && (!break2_1 && !except2_1 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 6106 | !(p4_5@831@01) | live]
; [else-branch: 6106 | p4_5@831@01 | live]
(push) ; 27
; [then-branch: 6106 | !(p4_5@831@01)]
(assert (not p4_5@831@01))
(pop) ; 27
(push) ; 27
; [else-branch: 6106 | p4_5@831@01]
(assert p4_5@831@01)
; [eval] !break2_1
(push) ; 28
; [then-branch: 6107 | break2_1@784@01 | live]
; [else-branch: 6107 | !(break2_1@784@01) | live]
(push) ; 29
; [then-branch: 6107 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 29
(push) ; 29
; [else-branch: 6107 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(push) ; 30
; [then-branch: 6108 | except2_1@778@01 | live]
; [else-branch: 6108 | !(except2_1@778@01) | live]
(push) ; 31
; [then-branch: 6108 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 31
(push) ; 31
; [else-branch: 6108 | !(except2_1@778@01)]
(assert (not except2_1@778@01))
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p4_5@831@01
  (and
    p4_5@831@01
    (=>
      (not break2_1@784@01)
      (and (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01)))
    (or (not break2_1@784@01) break2_1@784@01))))
(assert (or p4_5@831@01 (not p4_5@831@01)))
; [exec]
; p3_7 := p3_5 &&
;   (!break1_1 && !except1_1 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p3_5 && (!break1_1 && !except1_1 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 6109 | !(p3_5@830@01) | live]
; [else-branch: 6109 | p3_5@830@01 | live]
(push) ; 27
; [then-branch: 6109 | !(p3_5@830@01)]
(assert (not p3_5@830@01))
(pop) ; 27
(push) ; 27
; [else-branch: 6109 | p3_5@830@01]
(assert p3_5@830@01)
; [eval] !break1_1
(push) ; 28
; [then-branch: 6110 | break1_1@783@01 | live]
; [else-branch: 6110 | !(break1_1@783@01) | live]
(push) ; 29
; [then-branch: 6110 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 29
(push) ; 29
; [else-branch: 6110 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 30
; [then-branch: 6111 | except1_1@776@01 | live]
; [else-branch: 6111 | !(except1_1@776@01) | live]
(push) ; 31
; [then-branch: 6111 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 31
(push) ; 31
; [else-branch: 6111 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p3_7@839@01 Bool)
(assert (=
  p3_7@839@01
  (and p3_5@830@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
; [exec]
; p4_7 := p4_5 &&
;   (!break2_1 && !except2_1 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_5 && (!break2_1 && !except2_1 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 6112 | !(p4_5@831@01) | live]
; [else-branch: 6112 | p4_5@831@01 | live]
(push) ; 27
; [then-branch: 6112 | !(p4_5@831@01)]
(assert (not p4_5@831@01))
(pop) ; 27
(push) ; 27
; [else-branch: 6112 | p4_5@831@01]
(assert p4_5@831@01)
; [eval] !break2_1
(push) ; 28
; [then-branch: 6113 | break2_1@784@01 | live]
; [else-branch: 6113 | !(break2_1@784@01) | live]
(push) ; 29
; [then-branch: 6113 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 29
(push) ; 29
; [else-branch: 6113 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(push) ; 30
; [then-branch: 6114 | except2_1@778@01 | live]
; [else-branch: 6114 | !(except2_1@778@01) | live]
(push) ; 31
; [then-branch: 6114 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 31
(push) ; 31
; [else-branch: 6114 | !(except2_1@778@01)]
(assert (not except2_1@778@01))
; [eval] !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p4_7@840@01 Bool)
(assert (=
  p4_7@840@01
  (and p4_5@831@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
; [eval] p1_13 && (!break1_1 && !except1_1)
; [then-branch: 6115 | False | dead]
; [else-branch: 6115 | True | live]
(push) ; 26
; [else-branch: 6115 | True]
(pop) ; 26
; [eval] !(p1_13 && (!break1_1 && !except1_1))
; [eval] p1_13 && (!break1_1 && !except1_1)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6116 | True | live]
; [else-branch: 6116 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 6116 | True]
; [eval] p2_13 && (!break2_1 && !except2_1)
; [then-branch: 6117 | False | dead]
; [else-branch: 6117 | True | live]
(push) ; 27
; [else-branch: 6117 | True]
(pop) ; 27
; [eval] !(p2_13 && (!break2_1 && !except2_1))
; [eval] p2_13 && (!break2_1 && !except2_1)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6118 | True | live]
; [else-branch: 6118 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6118 | True]
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 28
; [then-branch: 6119 | !(p3_5@830@01) | live]
; [else-branch: 6119 | p3_5@830@01 | live]
(push) ; 29
; [then-branch: 6119 | !(p3_5@830@01)]
(assert (not p3_5@830@01))
(pop) ; 29
(push) ; 29
; [else-branch: 6119 | p3_5@830@01]
(assert p3_5@830@01)
; [eval] !break1_1
(push) ; 30
; [then-branch: 6120 | break1_1@783@01 | live]
; [else-branch: 6120 | !(break1_1@783@01) | live]
(push) ; 31
; [then-branch: 6120 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 31
(push) ; 31
; [else-branch: 6120 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=> p3_5@830@01 (and p3_5@830@01 (or (not break1_1@783@01) break1_1@783@01))))
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3_5@830@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3_5@830@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6121 | p3_5@830@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
; [else-branch: 6121 | !(p3_5@830@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 6121 | p3_5@830@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p3_5@830@01 (and (not break1_1@783@01) (not except1_1@776@01))))
; [exec]
; c_6.Container_value := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 29
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 29
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_value@841@01 $Ref)
(assert (= Container_value@841@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 29
; [then-branch: 6122 | !(p4_5@831@01) | live]
; [else-branch: 6122 | p4_5@831@01 | live]
(push) ; 30
; [then-branch: 6122 | !(p4_5@831@01)]
(assert (not p4_5@831@01))
(pop) ; 30
(push) ; 30
; [else-branch: 6122 | p4_5@831@01]
(assert p4_5@831@01)
; [eval] !break2_1
(push) ; 31
; [then-branch: 6123 | break2_1@784@01 | live]
; [else-branch: 6123 | !(break2_1@784@01) | live]
(push) ; 32
; [then-branch: 6123 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 32
(push) ; 32
; [else-branch: 6123 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p4_5@831@01 (and p4_5@831@01 (or (not break2_1@784@01) break2_1@784@01))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4_5@831@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6124 | p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 6124 | !(p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 6124 | !(p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(assert (not (and p4_5@831@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(pop) ; 29
; [eval] !(p4_5 && (!break2_1 && !except2_1))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 29
; [then-branch: 6125 | !(p4_5@831@01) | live]
; [else-branch: 6125 | p4_5@831@01 | live]
(push) ; 30
; [then-branch: 6125 | !(p4_5@831@01)]
(assert (not p4_5@831@01))
(pop) ; 30
(push) ; 30
; [else-branch: 6125 | p4_5@831@01]
(assert p4_5@831@01)
; [eval] !break2_1
(push) ; 31
; [then-branch: 6126 | break2_1@784@01 | live]
; [else-branch: 6126 | !(break2_1@784@01) | live]
(push) ; 32
; [then-branch: 6126 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 32
(push) ; 32
; [else-branch: 6126 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4_5@831@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4_5@831@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6127 | !(p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 6127 | p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6127 | !(p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(assert (not (and p4_5@831@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 30
; [then-branch: 6128 | !(p3_5@830@01) | live]
; [else-branch: 6128 | p3_5@830@01 | live]
(push) ; 31
; [then-branch: 6128 | !(p3_5@830@01)]
(assert (not p3_5@830@01))
(pop) ; 31
(push) ; 31
; [else-branch: 6128 | p3_5@830@01]
; [eval] !break1_1
(push) ; 32
; [then-branch: 6129 | break1_1@783@01 | live]
; [else-branch: 6129 | !(break1_1@783@01) | live]
(push) ; 33
; [then-branch: 6129 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 33
(push) ; 33
; [else-branch: 6129 | !(break1_1@783@01)]
; [eval] !except1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (=> p3_5@830@01 (or (not break1_1@783@01) break1_1@783@01)))
(push) ; 30
(set-option :timeout 10)
(assert (not (not (and p3_5@830@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3_5@830@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6130 | p3_5@830@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
; [else-branch: 6130 | !(p3_5@830@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 6130 | p3_5@830@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p3_5@830@01 (and (not break1_1@783@01) (not except1_1@776@01))))
; [exec]
; break1_1 := true
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 31
; [then-branch: 6131 | !(p4_5@831@01) | live]
; [else-branch: 6131 | p4_5@831@01 | live]
(push) ; 32
; [then-branch: 6131 | !(p4_5@831@01)]
(assert (not p4_5@831@01))
(pop) ; 32
(push) ; 32
; [else-branch: 6131 | p4_5@831@01]
(assert p4_5@831@01)
; [eval] !break2_1
(push) ; 33
; [then-branch: 6132 | break2_1@784@01 | live]
; [else-branch: 6132 | !(break2_1@784@01) | live]
(push) ; 34
; [then-branch: 6132 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 34
(push) ; 34
; [else-branch: 6132 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 6133 | p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 6133 | !(p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(push) ; 31
; [else-branch: 6133 | !(p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(pop) ; 31
; [eval] !(p4_5 && (!break2_1 && !except2_1))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 31
; [then-branch: 6134 | !(p4_5@831@01) | live]
; [else-branch: 6134 | p4_5@831@01 | live]
(push) ; 32
; [then-branch: 6134 | !(p4_5@831@01)]
(assert (not p4_5@831@01))
(pop) ; 32
(push) ; 32
; [else-branch: 6134 | p4_5@831@01]
(assert p4_5@831@01)
; [eval] !break2_1
(push) ; 33
; [then-branch: 6135 | break2_1@784@01 | live]
; [else-branch: 6135 | !(break2_1@784@01) | live]
(push) ; 34
; [then-branch: 6135 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 34
(push) ; 34
; [else-branch: 6135 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4_5@831@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6136 | !(p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 6136 | p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 6136 | !(p4_5@831@01 && !(break2_1@784@01) && !(except2_1@778@01))]
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 32
; [then-branch: 6137 | !(p1_10@801@01) | live]
; [else-branch: 6137 | p1_10@801@01 | live]
(push) ; 33
; [then-branch: 6137 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 33
(push) ; 33
; [else-branch: 6137 | p1_10@801@01]
; [eval] !break1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 6138 | False | dead]
; [else-branch: 6138 | True | live]
(push) ; 32
; [else-branch: 6138 | True]
(pop) ; 32
; [eval] !(p1_10 && (!break1_1 && !except1_1))
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 32
; [then-branch: 6139 | !(p1_10@801@01) | live]
; [else-branch: 6139 | p1_10@801@01 | live]
(push) ; 33
; [then-branch: 6139 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 33
(push) ; 33
; [else-branch: 6139 | p1_10@801@01]
; [eval] !break1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6140 | True | live]
; [else-branch: 6140 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 6140 | True]
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 33
; [then-branch: 6141 | !(p2_10@802@01) | live]
; [else-branch: 6141 | p2_10@802@01 | live]
(push) ; 34
; [then-branch: 6141 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 34
(push) ; 34
; [else-branch: 6141 | p2_10@802@01]
(assert p2_10@802@01)
; [eval] !break2_1
(push) ; 35
; [then-branch: 6142 | break2_1@784@01 | live]
; [else-branch: 6142 | !(break2_1@784@01) | live]
(push) ; 36
; [then-branch: 6142 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 36
(push) ; 36
; [else-branch: 6142 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 6143 | p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 6143 | !(p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(push) ; 33
; [else-branch: 6143 | !(p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(pop) ; 33
; [eval] !(p2_10 && (!break2_1 && !except2_1))
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 33
; [then-branch: 6144 | !(p2_10@802@01) | live]
; [else-branch: 6144 | p2_10@802@01 | live]
(push) ; 34
; [then-branch: 6144 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 34
(push) ; 34
; [else-branch: 6144 | p2_10@802@01]
(assert p2_10@802@01)
; [eval] !break2_1
(push) ; 35
; [then-branch: 6145 | break2_1@784@01 | live]
; [else-branch: 6145 | !(break2_1@784@01) | live]
(push) ; 36
; [then-branch: 6145 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 36
(push) ; 36
; [else-branch: 6145 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not (and p2_10@802@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6146 | !(p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 6146 | p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 6146 | !(p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01))]
; [exec]
; assert (p1_10 && (!break1_1 && !except1_1) ==>
;   _loop_termination_flag_1 ==> !true) &&
;   (p2_10 && (!break2_1 && !except2_1) ==>
;   _loop_termination_flag_1_0 ==> !true)
; [eval] p1_10 && (!break1_1 && !except1_1) ==> _loop_termination_flag_1 ==> !true
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 34
; [then-branch: 6147 | !(p1_10@801@01) | live]
; [else-branch: 6147 | p1_10@801@01 | live]
(push) ; 35
; [then-branch: 6147 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 35
(push) ; 35
; [else-branch: 6147 | p1_10@801@01]
; [eval] !break1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 6148 | False | dead]
; [else-branch: 6148 | True | live]
(push) ; 35
; [else-branch: 6148 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_10 && (!break2_1 && !except2_1) ==> _loop_termination_flag_1_0 ==> !true
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 34
; [then-branch: 6149 | !(p2_10@802@01) | live]
; [else-branch: 6149 | p2_10@802@01 | live]
(push) ; 35
; [then-branch: 6149 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 35
(push) ; 35
; [else-branch: 6149 | p2_10@802@01]
(assert p2_10@802@01)
; [eval] !break2_1
(push) ; 36
; [then-branch: 6150 | break2_1@784@01 | live]
; [else-branch: 6150 | !(break2_1@784@01) | live]
(push) ; 37
; [then-branch: 6150 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 37
(push) ; 37
; [else-branch: 6150 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 6151 | p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 6151 | !(p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(push) ; 35
; [else-branch: 6151 | !(p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_9 && !bypass1_1 ==> true
; [eval] p1_9 && !bypass1_1
(push) ; 34
; [then-branch: 6152 | !(p1_9@689@01) | live]
; [else-branch: 6152 | p1_9@689@01 | live]
(push) ; 35
; [then-branch: 6152 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 35
(push) ; 35
; [else-branch: 6152 | p1_9@689@01]
(assert p1_9@689@01)
; [eval] !bypass1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6153 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 6153 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 6153 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> true
; [eval] p2_9 && !bypass2_1
(push) ; 34
; [then-branch: 6154 | !(p2_9@690@01) | live]
; [else-branch: 6154 | p2_9@690@01 | live]
(push) ; 35
; [then-branch: 6154 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 35
(push) ; 35
; [else-branch: 6154 | p2_9@690@01]
(assert p2_9@690@01)
; [eval] !bypass2_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6155 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 6155 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 6155 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1
(push) ; 34
; [then-branch: 6156 | !(p1_9@689@01) | live]
; [else-branch: 6156 | p1_9@689@01 | live]
(push) ; 35
; [then-branch: 6156 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 35
(push) ; 35
; [else-branch: 6156 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6157 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 6157 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 6157 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1
(push) ; 35
; [then-branch: 6158 | !(p2_9@690@01) | live]
; [else-branch: 6158 | p2_9@690@01 | live]
(push) ; 36
; [then-branch: 6158 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 36
(push) ; 36
; [else-branch: 6158 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6159 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 6159 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 6159 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1 ==> issubtype(typeof(c_6.Container_value), int())
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 6160 | !(p1_9@689@01) | live]
; [else-branch: 6160 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 6160 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6160 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6161 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 6161 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6161 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] issubtype(typeof(c_6.Container_value), int())
; [eval] typeof(c_6.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(push) ; 36
(assert (not (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (issubtype<Bool> (typeof<PyType> Container_value@841@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (issubtype<Bool> (typeof<PyType> Container_value@841@01) (as int<PyType>  PyType))))
; [eval] p2_9 && !bypass2_1 ==> issubtype(typeof(c_6_0.Container_valuep), int())
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 6162 | !(p2_9@690@01) | live]
; [else-branch: 6162 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 6162 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6162 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6163 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 6163 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6163 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] issubtype(typeof(c_6_0.Container_valuep), int())
; [eval] typeof(c_6_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1 ==> !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 6164 | !(p1_9@689@01) | live]
; [else-branch: 6164 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 6164 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6164 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6165 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 6165 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6165 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] !idle1_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6166 | True | live]
; [else-branch: 6166 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 6166 | True]
; [eval] _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1@785@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1@785@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6167 | _loop_check_before_1@785@01 | live]
; [else-branch: 6167 | !(_loop_check_before_1@785@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 6167 | _loop_check_before_1@785@01]
(assert _loop_check_before_1@785@01)
; [eval] _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 6168 | False | live]
; [else-branch: 6168 | True | live]
(push) ; 43
; [then-branch: 6168 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 6168 | True]
; [eval] perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_159)) == none
; [eval] perm(MustTerminate(_cthread_159))
(push) ; 44
; [then-branch: 6169 | False | live]
; [else-branch: 6169 | True | live]
(push) ; 45
; [then-branch: 6169 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 6169 | True]
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
(push) ; 46
; [then-branch: 6170 | False | live]
; [else-branch: 6170 | True | live]
(push) ; 47
; [then-branch: 6170 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 6170 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
(push) ; 48
; [then-branch: 6171 | False | live]
; [else-branch: 6171 | True | live]
(push) ; 49
; [then-branch: 6171 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 6171 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 6172 | False | live]
; [else-branch: 6172 | True | live]
(push) ; 51
; [then-branch: 6172 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 6172 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 6167 | !(_loop_check_before_1@785@01)]
(assert (not _loop_check_before_1@785@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (and
    p1_9@689@01
    (not bypass1_1@756@01)
    (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))))
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 6173 | !(p2_9@690@01) | live]
; [else-branch: 6173 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 6173 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6173 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6174 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 6174 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6174 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6175 | True | live]
; [else-branch: 6175 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 6175 | True]
; [eval] _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1_0@786@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1_0@786@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6176 | _loop_check_before_1_0@786@01 | live]
; [else-branch: 6176 | !(_loop_check_before_1_0@786@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 6176 | _loop_check_before_1_0@786@01]
(assert _loop_check_before_1_0@786@01)
; [eval] _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 6177 | False | live]
; [else-branch: 6177 | True | live]
(push) ; 43
; [then-branch: 6177 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 6177 | True]
; [eval] perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_159_0)) == none
; [eval] perm(MustTerminate_0(_cthread_159_0))
(push) ; 44
; [then-branch: 6178 | False | live]
; [else-branch: 6178 | True | live]
(push) ; 45
; [then-branch: 6178 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 6178 | True]
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false)
(push) ; 46
; [then-branch: 6179 | False | live]
; [else-branch: 6179 | True | live]
(push) ; 47
; [then-branch: 6179 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 6179 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false)
(push) ; 48
; [then-branch: 6180 | False | live]
; [else-branch: 6180 | True | live]
(push) ; 49
; [then-branch: 6180 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 6180 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 6181 | False | live]
; [else-branch: 6181 | True | live]
(push) ; 51
; [then-branch: 6181 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 6181 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 6176 | !(_loop_check_before_1_0@786@01)]
(assert (not _loop_check_before_1_0@786@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (and
    p2_9@690@01
    (not bypass2_1@757@01)
    (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))))
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1 ==> !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 6182 | !(p1_9@689@01) | live]
; [else-branch: 6182 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 6182 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6182 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6183 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 6183 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6183 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] !idle1_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6184 | True | live]
; [else-branch: 6184 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 6184 | True]
; [eval] !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_1
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1@785@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1@785@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6185 | !(_loop_check_before_1@785@01) | live]
; [else-branch: 6185 | _loop_check_before_1@785@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 6185 | !(_loop_check_before_1@785@01)]
(assert (not _loop_check_before_1@785@01))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
(push) ; 42
; [then-branch: 6186 | False | live]
; [else-branch: 6186 | True | live]
(push) ; 43
; [then-branch: 6186 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 6186 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
(push) ; 44
; [then-branch: 6187 | False | live]
; [else-branch: 6187 | True | live]
(push) ; 45
; [then-branch: 6187 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 6187 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 6188 | False | live]
; [else-branch: 6188 | True | live]
(push) ; 47
; [then-branch: 6188 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 6188 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 6185 | _loop_check_before_1@785@01]
(assert _loop_check_before_1@785@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (and
    p1_9@689@01
    (not bypass1_1@756@01)
    (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))))
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 6189 | !(p2_9@690@01) | live]
; [else-branch: 6189 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 6189 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6189 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6190 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 6190 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6190 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6191 | True | live]
; [else-branch: 6191 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 6191 | True]
; [eval] !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_1_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1_0@786@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1_0@786@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6192 | !(_loop_check_before_1_0@786@01) | live]
; [else-branch: 6192 | _loop_check_before_1_0@786@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 6192 | !(_loop_check_before_1_0@786@01)]
(assert (not _loop_check_before_1_0@786@01))
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false)
(push) ; 42
; [then-branch: 6193 | False | live]
; [else-branch: 6193 | True | live]
(push) ; 43
; [then-branch: 6193 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 6193 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false)
(push) ; 44
; [then-branch: 6194 | False | live]
; [else-branch: 6194 | True | live]
(push) ; 45
; [then-branch: 6194 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 6194 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 6195 | False | live]
; [else-branch: 6195 | True | live]
(push) ; 47
; [then-branch: 6195 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 6195 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 6192 | _loop_check_before_1_0@786@01]
(assert _loop_check_before_1_0@786@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (and
    p2_9@690@01
    (not bypass2_1@757@01)
    (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))))
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] bypass1_1 ==> tmp1_13 == except1_1
(push) ; 36
; [then-branch: 6196 | bypass1_1@756@01 | dead]
; [else-branch: 6196 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6196 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_16 == break1_1
(push) ; 36
; [then-branch: 6197 | bypass1_1@756@01 | dead]
; [else-branch: 6197 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6197 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_11 == _loop_measures_1
(push) ; 36
; [then-branch: 6198 | bypass1_1@756@01 | dead]
; [else-branch: 6198 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6198 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_14 == _err
(push) ; 36
; [then-branch: 6199 | bypass1_1@756@01 | dead]
; [else-branch: 6199 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6199 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_15 == _loop_check_before_1
(push) ; 36
; [then-branch: 6200 | bypass1_1@756@01 | dead]
; [else-branch: 6200 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6200 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_12 == Exception_res_1
(push) ; 36
; [then-branch: 6201 | bypass1_1@756@01 | dead]
; [else-branch: 6201 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6201 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_11 == _loop_measures_1_0
(push) ; 36
; [then-branch: 6202 | bypass2_1@757@01 | dead]
; [else-branch: 6202 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6202 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_15 == _loop_check_before_1_0
(push) ; 36
; [then-branch: 6203 | bypass2_1@757@01 | dead]
; [else-branch: 6203 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6203 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_12 == Exception_res_1_0
(push) ; 36
; [then-branch: 6204 | bypass2_1@757@01 | dead]
; [else-branch: 6204 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6204 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_14 == _err_2
(push) ; 36
; [then-branch: 6205 | bypass2_1@757@01 | dead]
; [else-branch: 6205 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6205 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_13 == except2_1
(push) ; 36
; [then-branch: 6206 | bypass2_1@757@01 | dead]
; [else-branch: 6206 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6206 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_16 == break2_1
(push) ; 36
; [then-branch: 6207 | bypass2_1@757@01 | dead]
; [else-branch: 6207 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6207 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
; [eval] !(p3_5 && (!break1_1 && !except1_1))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 30
; [then-branch: 6208 | !(p3_5@830@01) | live]
; [else-branch: 6208 | p3_5@830@01 | live]
(push) ; 31
; [then-branch: 6208 | !(p3_5@830@01)]
(assert (not p3_5@830@01))
(pop) ; 31
(push) ; 31
; [else-branch: 6208 | p3_5@830@01]
(assert p3_5@830@01)
; [eval] !break1_1
(push) ; 32
; [then-branch: 6209 | break1_1@783@01 | live]
; [else-branch: 6209 | !(break1_1@783@01) | live]
(push) ; 33
; [then-branch: 6209 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 33
(push) ; 33
; [else-branch: 6209 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3_5@830@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6210 | !(p3_5@830@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
; [else-branch: 6210 | p3_5@830@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 6210 | p3_5@830@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p3_5@830@01 (and (not break1_1@783@01) (not except1_1@776@01))))
(pop) ; 30
(pop) ; 29
(pop) ; 28
; [eval] !(p3_5 && (!break1_1 && !except1_1))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 28
; [then-branch: 6211 | !(p3_5@830@01) | live]
; [else-branch: 6211 | p3_5@830@01 | live]
(push) ; 29
; [then-branch: 6211 | !(p3_5@830@01)]
(assert (not p3_5@830@01))
(pop) ; 29
(push) ; 29
; [else-branch: 6211 | p3_5@830@01]
(assert p3_5@830@01)
; [eval] !break1_1
(push) ; 30
; [then-branch: 6212 | break1_1@783@01 | live]
; [else-branch: 6212 | !(break1_1@783@01) | live]
(push) ; 31
; [then-branch: 6212 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 31
(push) ; 31
; [else-branch: 6212 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3_5@830@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6213 | !(p3_5@830@01 && !(break1_1@783@01) && !(except1_1@776@01)) | dead]
; [else-branch: 6213 | p3_5@830@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 6213 | p3_5@830@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p3_5@830@01 (and (not break1_1@783@01) (not except1_1@776@01))))
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(push) ; 18
; [else-branch: 6060 | p1_11@828@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_11@828@01 (and (not break1_1@783@01) (not except1_1@776@01))))
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 5872 | p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_10@802@01 (and (not break2_1@784@01) (not except2_1@778@01))))
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 5240 | !(p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(assert (not (and p1_10@801@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(pop) ; 14
; [eval] !(p1_10 && (!break1_1 && !except1_1))
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 14
; [then-branch: 6214 | !(p1_10@801@01) | live]
; [else-branch: 6214 | p1_10@801@01 | live]
(push) ; 15
; [then-branch: 6214 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6214 | p1_10@801@01]
(assert p1_10@801@01)
; [eval] !break1_1
(push) ; 16
; [then-branch: 6215 | break1_1@783@01 | live]
; [else-branch: 6215 | !(break1_1@783@01) | live]
(push) ; 17
; [then-branch: 6215 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6215 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (and p1_10@801@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (and p1_10@801@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6216 | !(p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 6216 | p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 6216 | !(p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(assert (not (and p1_10@801@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 15
; [then-branch: 6217 | !(p2_10@802@01) | live]
; [else-branch: 6217 | p2_10@802@01 | live]
(push) ; 16
; [then-branch: 6217 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6217 | p2_10@802@01]
(assert p2_10@802@01)
; [eval] !break2_1
(push) ; 17
; [then-branch: 6218 | break2_1@784@01 | live]
; [else-branch: 6218 | !(break2_1@784@01) | live]
(push) ; 18
; [then-branch: 6218 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6218 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=> p2_10@802@01 (and p2_10@802@01 (or (not break2_1@784@01) break2_1@784@01))))
(assert (or p2_10@802@01 (not p2_10@802@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and p2_10@802@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (and p2_10@802@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6219 | p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
; [else-branch: 6219 | !(p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 6219 | p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_10@802@01 (and (not break2_1@784@01) (not except2_1@778@01))))
; [exec]
; _loop_measures_1_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; p1_11 := p1_10 && (!break1_1 && !except1_1 && bool___unbox__(b_6))
; [eval] p1_10 && (!break1_1 && !except1_1 && bool___unbox__(b_6))
(push) ; 16
; [then-branch: 6220 | !(p1_10@801@01) | live]
; [else-branch: 6220 | p1_10@801@01 | live]
(push) ; 17
; [then-branch: 6220 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6220 | p1_10@801@01]
(assert p1_10@801@01)
; [eval] !break1_1
(push) ; 18
; [then-branch: 6221 | break1_1@783@01 | live]
; [else-branch: 6221 | !(break1_1@783@01) | live]
(push) ; 19
; [then-branch: 6221 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6221 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 20
; [then-branch: 6222 | except1_1@776@01 | live]
; [else-branch: 6222 | !(except1_1@776@01) | live]
(push) ; 21
; [then-branch: 6222 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6222 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] bool___unbox__(b_6)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@699@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@699@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_1@776@01)
  (and
    (not except1_1@776@01)
    (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@699@01))))
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and
    (not break1_1@783@01)
    (=>
      (not except1_1@776@01)
      (and
        (not except1_1@776@01)
        (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_1@699@01)))
    (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_10@801@01
  (and
    p1_10@801@01
    (=>
      (not break1_1@783@01)
      (and
        (not break1_1@783@01)
        (=>
          (not except1_1@776@01)
          (and
            (not except1_1@776@01)
            (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
            (bool___unbox__%precondition $Snap.unit b_1@699@01)))
        (or (not except1_1@776@01) except1_1@776@01)))
    (or (not break1_1@783@01) break1_1@783@01))))
(declare-const p1_11@842@01 Bool)
(assert (=
  p1_11@842@01
  (and
    p1_10@801@01
    (and
      (not break1_1@783@01)
      (and (not except1_1@776@01) (bool___unbox__ $Snap.unit b_1@699@01))))))
; [exec]
; p2_11 := p2_10 && (!break2_1 && !except2_1 && bool___unbox__(b_6_0))
; [eval] p2_10 && (!break2_1 && !except2_1 && bool___unbox__(b_6_0))
(push) ; 16
; [then-branch: 6223 | !(p2_10@802@01) | live]
; [else-branch: 6223 | p2_10@802@01 | live]
(push) ; 17
; [then-branch: 6223 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6223 | p2_10@802@01]
; [eval] !break2_1
(push) ; 18
; [then-branch: 6224 | break2_1@784@01 | live]
; [else-branch: 6224 | !(break2_1@784@01) | live]
(push) ; 19
; [then-branch: 6224 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6224 | !(break2_1@784@01)]
; [eval] !except2_1
(push) ; 20
; [then-branch: 6225 | except2_1@778@01 | live]
; [else-branch: 6225 | !(except2_1@778@01) | live]
(push) ; 21
; [then-branch: 6225 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6225 | !(except2_1@778@01)]
; [eval] bool___unbox__(b_6_0)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1_0@700@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@700@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_1@778@01)
  (and
    (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1_0@700@01))))
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and
    (=>
      (not except2_1@778@01)
      (and
        (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_1_0@700@01)))
    (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_10@802@01
  (and
    (=>
      (not break2_1@784@01)
      (and
        (=>
          (not except2_1@778@01)
          (and
            (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
            (bool___unbox__%precondition $Snap.unit b_1_0@700@01)))
        (or (not except2_1@778@01) except2_1@778@01)))
    (or (not break2_1@784@01) break2_1@784@01))))
(declare-const p2_11@843@01 Bool)
(assert (=
  p2_11@843@01
  (and
    p2_10@802@01
    (and
      (not break2_1@784@01)
      (and (not except2_1@778@01) (bool___unbox__ $Snap.unit b_1_0@700@01))))))
; [exec]
; p3_5 := p1_10 && (!break1_1 && !except1_1 && !bool___unbox__(b_6))
; [eval] p1_10 && (!break1_1 && !except1_1 && !bool___unbox__(b_6))
(push) ; 16
; [then-branch: 6226 | !(p1_10@801@01) | live]
; [else-branch: 6226 | p1_10@801@01 | live]
(push) ; 17
; [then-branch: 6226 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6226 | p1_10@801@01]
(assert p1_10@801@01)
; [eval] !break1_1
(push) ; 18
; [then-branch: 6227 | break1_1@783@01 | live]
; [else-branch: 6227 | !(break1_1@783@01) | live]
(push) ; 19
; [then-branch: 6227 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6227 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 20
; [then-branch: 6228 | except1_1@776@01 | live]
; [else-branch: 6228 | !(except1_1@776@01) | live]
(push) ; 21
; [then-branch: 6228 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6228 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] !bool___unbox__(b_6)
; [eval] bool___unbox__(b_6)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@699@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@699@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_1@776@01)
  (and
    (not except1_1@776@01)
    (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@699@01))))
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and
    (not break1_1@783@01)
    (=>
      (not except1_1@776@01)
      (and
        (not except1_1@776@01)
        (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_1@699@01)))
    (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3_5@844@01 Bool)
(assert (=
  p3_5@844@01
  (and
    p1_10@801@01
    (and
      (not break1_1@783@01)
      (and (not except1_1@776@01) (not (bool___unbox__ $Snap.unit b_1@699@01)))))))
; [exec]
; p4_5 := p2_10 && (!break2_1 && !except2_1 && !bool___unbox__(b_6_0))
; [eval] p2_10 && (!break2_1 && !except2_1 && !bool___unbox__(b_6_0))
(push) ; 16
; [then-branch: 6229 | !(p2_10@802@01) | live]
; [else-branch: 6229 | p2_10@802@01 | live]
(push) ; 17
; [then-branch: 6229 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6229 | p2_10@802@01]
; [eval] !break2_1
(push) ; 18
; [then-branch: 6230 | break2_1@784@01 | live]
; [else-branch: 6230 | !(break2_1@784@01) | live]
(push) ; 19
; [then-branch: 6230 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6230 | !(break2_1@784@01)]
; [eval] !except2_1
(push) ; 20
; [then-branch: 6231 | except2_1@778@01 | live]
; [else-branch: 6231 | !(except2_1@778@01) | live]
(push) ; 21
; [then-branch: 6231 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6231 | !(except2_1@778@01)]
; [eval] !bool___unbox__(b_6_0)
; [eval] bool___unbox__(b_6_0)
(push) ; 22
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1_0@700@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@700@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_1@778@01)
  (and
    (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1_0@700@01))))
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and
    (=>
      (not except2_1@778@01)
      (and
        (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
        (bool___unbox__%precondition $Snap.unit b_1_0@700@01)))
    (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4_5@845@01 Bool)
(assert (=
  p4_5@845@01
  (and
    p2_10@802@01
    (and
      (not break2_1@784@01)
      (and (not except2_1@778@01) (not (bool___unbox__ $Snap.unit b_1_0@700@01)))))))
; [exec]
; p1_12 := p1_11 &&
;   (!break1_1 && !except1_1 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p1_11 && (!break1_1 && !except1_1 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 6232 | !(p1_11@842@01) | live]
; [else-branch: 6232 | p1_11@842@01 | live]
(push) ; 17
; [then-branch: 6232 | !(p1_11@842@01)]
(assert (not p1_11@842@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6232 | p1_11@842@01]
(assert p1_11@842@01)
; [eval] !break1_1
(push) ; 18
; [then-branch: 6233 | break1_1@783@01 | live]
; [else-branch: 6233 | !(break1_1@783@01) | live]
(push) ; 19
; [then-branch: 6233 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6233 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 20
; [then-branch: 6234 | except1_1@776@01 | live]
; [else-branch: 6234 | !(except1_1@776@01) | live]
(push) ; 21
; [then-branch: 6234 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6234 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_11@842@01
  (and
    p1_11@842@01
    (=>
      (not break1_1@783@01)
      (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01)))
    (or (not break1_1@783@01) break1_1@783@01))))
(assert (or p1_11@842@01 (not p1_11@842@01)))
; [exec]
; p2_12 := p2_11 &&
;   (!break2_1 && !except2_1 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_11 && (!break2_1 && !except2_1 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 6235 | !(p2_11@843@01) | live]
; [else-branch: 6235 | p2_11@843@01 | live]
(push) ; 17
; [then-branch: 6235 | !(p2_11@843@01)]
(assert (not p2_11@843@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6235 | p2_11@843@01]
(assert p2_11@843@01)
; [eval] !break2_1
(push) ; 18
; [then-branch: 6236 | break2_1@784@01 | live]
; [else-branch: 6236 | !(break2_1@784@01) | live]
(push) ; 19
; [then-branch: 6236 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6236 | !(break2_1@784@01)]
; [eval] !except2_1
(push) ; 20
; [then-branch: 6237 | except2_1@778@01 | live]
; [else-branch: 6237 | !(except2_1@778@01) | live]
(push) ; 21
; [then-branch: 6237 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6237 | !(except2_1@778@01)]
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01)))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_11@843@01
  (and
    p2_11@843@01
    (=> (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01))
    (or (not break2_1@784@01) break2_1@784@01))))
(assert (or p2_11@843@01 (not p2_11@843@01)))
; [exec]
; p3_6 := p1_11 &&
;   (!break1_1 && !except1_1 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p1_11 && (!break1_1 && !except1_1 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 6238 | !(p1_11@842@01) | live]
; [else-branch: 6238 | p1_11@842@01 | live]
(push) ; 17
; [then-branch: 6238 | !(p1_11@842@01)]
(assert (not p1_11@842@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6238 | p1_11@842@01]
(assert p1_11@842@01)
; [eval] !break1_1
(push) ; 18
; [then-branch: 6239 | break1_1@783@01 | live]
; [else-branch: 6239 | !(break1_1@783@01) | live]
(push) ; 19
; [then-branch: 6239 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6239 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 20
; [then-branch: 6240 | except1_1@776@01 | live]
; [else-branch: 6240 | !(except1_1@776@01) | live]
(push) ; 21
; [then-branch: 6240 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6240 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3_6@846@01 Bool)
(assert (=
  p3_6@846@01
  (and p1_11@842@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
; [exec]
; p4_6 := p2_11 &&
;   (!break2_1 && !except2_1 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_11 && (!break2_1 && !except2_1 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 6241 | !(p2_11@843@01) | live]
; [else-branch: 6241 | p2_11@843@01 | live]
(push) ; 17
; [then-branch: 6241 | !(p2_11@843@01)]
(assert (not p2_11@843@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6241 | p2_11@843@01]
(assert p2_11@843@01)
; [eval] !break2_1
(push) ; 18
; [then-branch: 6242 | break2_1@784@01 | live]
; [else-branch: 6242 | !(break2_1@784@01) | live]
(push) ; 19
; [then-branch: 6242 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6242 | !(break2_1@784@01)]
; [eval] !except2_1
(push) ; 20
; [then-branch: 6243 | except2_1@778@01 | live]
; [else-branch: 6243 | !(except2_1@778@01) | live]
(push) ; 21
; [then-branch: 6243 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6243 | !(except2_1@778@01)]
; [eval] !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01)))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4_6@847@01 Bool)
(assert (=
  p4_6@847@01
  (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
; [eval] p1_12 && (!break1_1 && !except1_1)
; [then-branch: 6244 | False | dead]
; [else-branch: 6244 | True | live]
(push) ; 16
; [else-branch: 6244 | True]
(pop) ; 16
; [eval] !(p1_12 && (!break1_1 && !except1_1))
; [eval] p1_12 && (!break1_1 && !except1_1)
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6245 | True | live]
; [else-branch: 6245 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 6245 | True]
; [eval] p2_12 && (!break2_1 && !except2_1)
; [then-branch: 6246 | False | dead]
; [else-branch: 6246 | True | live]
(push) ; 17
; [else-branch: 6246 | True]
(pop) ; 17
; [eval] !(p2_12 && (!break2_1 && !except2_1))
; [eval] p2_12 && (!break2_1 && !except2_1)
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6247 | True | live]
; [else-branch: 6247 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 6247 | True]
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 18
; [then-branch: 6248 | !(p1_11@842@01) | live]
; [else-branch: 6248 | p1_11@842@01 | live]
(push) ; 19
; [then-branch: 6248 | !(p1_11@842@01)]
(assert (not p1_11@842@01))
(pop) ; 19
(push) ; 19
; [else-branch: 6248 | p1_11@842@01]
(assert p1_11@842@01)
; [eval] !break1_1
(push) ; 20
; [then-branch: 6249 | break1_1@783@01 | live]
; [else-branch: 6249 | !(break1_1@783@01) | live]
(push) ; 21
; [then-branch: 6249 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6249 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> p1_11@842@01 (and p1_11@842@01 (or (not break1_1@783@01) break1_1@783@01))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_11@842@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6250 | p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 6250 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 6250 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(assert (not (and p1_11@842@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(pop) ; 18
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 18
; [then-branch: 6251 | !(p1_11@842@01) | live]
; [else-branch: 6251 | p1_11@842@01 | live]
(push) ; 19
; [then-branch: 6251 | !(p1_11@842@01)]
(assert (not p1_11@842@01))
(pop) ; 19
(push) ; 19
; [else-branch: 6251 | p1_11@842@01]
(assert p1_11@842@01)
; [eval] !break1_1
(push) ; 20
; [then-branch: 6252 | break1_1@783@01 | live]
; [else-branch: 6252 | !(break1_1@783@01) | live]
(push) ; 21
; [then-branch: 6252 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6252 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_11@842@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_11@842@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6253 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 6253 | p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 6253 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(assert (not (and p1_11@842@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 19
; [then-branch: 6254 | !(p2_11@843@01) | live]
; [else-branch: 6254 | p2_11@843@01 | live]
(push) ; 20
; [then-branch: 6254 | !(p2_11@843@01)]
(assert (not p2_11@843@01))
(pop) ; 20
(push) ; 20
; [else-branch: 6254 | p2_11@843@01]
(assert p2_11@843@01)
; [eval] !break2_1
(push) ; 21
; [then-branch: 6255 | break2_1@784@01 | live]
; [else-branch: 6255 | !(break2_1@784@01) | live]
(push) ; 22
; [then-branch: 6255 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6255 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=> p2_11@843@01 (and p2_11@843@01 (or (not break2_1@784@01) break2_1@784@01))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6256 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
; [else-branch: 6256 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 6256 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01))))
; [exec]
; c_6_0.Container_valuep := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(declare-const Container_valuep@848@01 $Ref)
(assert (= Container_valuep@848@01 (__prim__int___box__ $Snap.unit 7)))
; [exec]
; tmp_1 := new()
(declare-const tmp_1@849@01 $Ref)
(assert (not (= tmp_1@849@01 $Ref.null)))
(assert (not (= tmp_1@849@01 c_1@697@01)))
(assert (not (= tmp_1@849@01 tmp2_14@740@01)))
(assert (not (= tmp_1@849@01 c_1_0@698@01)))
(assert (not (= tmp_1@849@01 Container_valuep@848@01)))
(assert (not (= tmp_1@849@01 tmp1_12@735@01)))
(assert (not (= tmp_1@849@01 tmp1_14@739@01)))
(assert (not (= tmp_1@849@01 _cthread_159_0@692@01)))
(assert (not (= tmp_1@849@01 _err@775@01)))
(assert (not (= tmp_1@849@01 Exception_res_1_0@774@01)))
(assert (not (= tmp_1@849@01 b_1@699@01)))
(assert (not (= tmp_1@849@01 _err_2@777@01)))
(assert (not (= tmp_1@849@01 Exception_res_1@773@01)))
(assert (not (= tmp_1@849@01 tmp2_12@736@01)))
(assert (not
  (=
    tmp_1@849@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@787@01)))))))
(assert (not (= tmp_1@849@01 b_1_0@700@01)))
(assert (not (= tmp_1@849@01 _cthread_159@691@01)))
(assert (not (= tmp_1@849@01 tmp_1@796@01)))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 20
; [then-branch: 6257 | !(p1_11@842@01) | live]
; [else-branch: 6257 | p1_11@842@01 | live]
(push) ; 21
; [then-branch: 6257 | !(p1_11@842@01)]
(assert (not p1_11@842@01))
(pop) ; 21
(push) ; 21
; [else-branch: 6257 | p1_11@842@01]
(assert p1_11@842@01)
; [eval] !break1_1
(push) ; 22
; [then-branch: 6258 | break1_1@783@01 | live]
; [else-branch: 6258 | !(break1_1@783@01) | live]
(push) ; 23
; [then-branch: 6258 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 23
(push) ; 23
; [else-branch: 6258 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 6259 | p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 6259 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(push) ; 20
; [else-branch: 6259 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(pop) ; 20
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 20
; [then-branch: 6260 | !(p1_11@842@01) | live]
; [else-branch: 6260 | p1_11@842@01 | live]
(push) ; 21
; [then-branch: 6260 | !(p1_11@842@01)]
(assert (not p1_11@842@01))
(pop) ; 21
(push) ; 21
; [else-branch: 6260 | p1_11@842@01]
(assert p1_11@842@01)
; [eval] !break1_1
(push) ; 22
; [then-branch: 6261 | break1_1@783@01 | live]
; [else-branch: 6261 | !(break1_1@783@01) | live]
(push) ; 23
; [then-branch: 6261 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 23
(push) ; 23
; [else-branch: 6261 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_11@842@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6262 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 6262 | p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 6262 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01))]
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 21
; [then-branch: 6263 | !(p2_11@843@01) | live]
; [else-branch: 6263 | p2_11@843@01 | live]
(push) ; 22
; [then-branch: 6263 | !(p2_11@843@01)]
(assert (not p2_11@843@01))
(pop) ; 22
(push) ; 22
; [else-branch: 6263 | p2_11@843@01]
; [eval] !break2_1
(push) ; 23
; [then-branch: 6264 | break2_1@784@01 | live]
; [else-branch: 6264 | !(break2_1@784@01) | live]
(push) ; 24
; [then-branch: 6264 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 24
(push) ; 24
; [else-branch: 6264 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (=> p2_11@843@01 (or (not break2_1@784@01) break2_1@784@01)))
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6265 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
; [else-branch: 6265 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 6265 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01))))
; [exec]
; Exception_res_1_0 := tmp_1
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 22
; [then-branch: 6266 | !(p1_11@842@01) | live]
; [else-branch: 6266 | p1_11@842@01 | live]
(push) ; 23
; [then-branch: 6266 | !(p1_11@842@01)]
(assert (not p1_11@842@01))
(pop) ; 23
(push) ; 23
; [else-branch: 6266 | p1_11@842@01]
(assert p1_11@842@01)
; [eval] !break1_1
(push) ; 24
; [then-branch: 6267 | break1_1@783@01 | live]
; [else-branch: 6267 | !(break1_1@783@01) | live]
(push) ; 25
; [then-branch: 6267 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 25
(push) ; 25
; [else-branch: 6267 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 6268 | p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 6268 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(push) ; 22
; [else-branch: 6268 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(pop) ; 22
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 22
; [then-branch: 6269 | !(p1_11@842@01) | live]
; [else-branch: 6269 | p1_11@842@01 | live]
(push) ; 23
; [then-branch: 6269 | !(p1_11@842@01)]
(assert (not p1_11@842@01))
(pop) ; 23
(push) ; 23
; [else-branch: 6269 | p1_11@842@01]
(assert p1_11@842@01)
; [eval] !break1_1
(push) ; 24
; [then-branch: 6270 | break1_1@783@01 | live]
; [else-branch: 6270 | !(break1_1@783@01) | live]
(push) ; 25
; [then-branch: 6270 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 25
(push) ; 25
; [else-branch: 6270 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_11@842@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6271 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 6271 | p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 6271 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01))]
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 23
; [then-branch: 6272 | !(p2_11@843@01) | live]
; [else-branch: 6272 | p2_11@843@01 | live]
(push) ; 24
; [then-branch: 6272 | !(p2_11@843@01)]
(assert (not p2_11@843@01))
(pop) ; 24
(push) ; 24
; [else-branch: 6272 | p2_11@843@01]
; [eval] !break2_1
(push) ; 25
; [then-branch: 6273 | break2_1@784@01 | live]
; [else-branch: 6273 | !(break2_1@784@01) | live]
(push) ; 26
; [then-branch: 6273 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 26
(push) ; 26
; [else-branch: 6273 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6274 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
; [else-branch: 6274 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 6274 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01))))
; [exec]
; inhale typeof(Exception_res_1_0) == Exception()
(declare-const $t@850@01 $Snap)
(assert (= $t@850@01 $Snap.unit))
; [eval] typeof(Exception_res_1_0) == Exception()
; [eval] typeof(Exception_res_1_0)
; [eval] Exception()
(assert (= (typeof<PyType> tmp_1@849@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_11 && (!break1_1 && !except1_1)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 6275 | !(p1_11@842@01) | live]
; [else-branch: 6275 | p1_11@842@01 | live]
(push) ; 25
; [then-branch: 6275 | !(p1_11@842@01)]
(assert (not p1_11@842@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6275 | p1_11@842@01]
(assert p1_11@842@01)
; [eval] !break1_1
(push) ; 26
; [then-branch: 6276 | break1_1@783@01 | live]
; [else-branch: 6276 | !(break1_1@783@01) | live]
(push) ; 27
; [then-branch: 6276 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 27
(push) ; 27
; [else-branch: 6276 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 6277 | p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 6277 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(push) ; 24
; [else-branch: 6277 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(pop) ; 24
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 24
; [then-branch: 6278 | !(p1_11@842@01) | live]
; [else-branch: 6278 | p1_11@842@01 | live]
(push) ; 25
; [then-branch: 6278 | !(p1_11@842@01)]
(assert (not p1_11@842@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6278 | p1_11@842@01]
(assert p1_11@842@01)
; [eval] !break1_1
(push) ; 26
; [then-branch: 6279 | break1_1@783@01 | live]
; [else-branch: 6279 | !(break1_1@783@01) | live]
(push) ; 27
; [then-branch: 6279 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 27
(push) ; 27
; [else-branch: 6279 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_11@842@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6280 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 6280 | p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 6280 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01))]
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 25
; [then-branch: 6281 | !(p2_11@843@01) | live]
; [else-branch: 6281 | p2_11@843@01 | live]
(push) ; 26
; [then-branch: 6281 | !(p2_11@843@01)]
(assert (not p2_11@843@01))
(pop) ; 26
(push) ; 26
; [else-branch: 6281 | p2_11@843@01]
; [eval] !break2_1
(push) ; 27
; [then-branch: 6282 | break2_1@784@01 | live]
; [else-branch: 6282 | !(break2_1@784@01) | live]
(push) ; 28
; [then-branch: 6282 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 28
(push) ; 28
; [else-branch: 6282 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6283 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
; [else-branch: 6283 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6283 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01))))
; [exec]
; _err_2 := Exception_res_1_0
; [exec]
; except2_1 := true
; [exec]
; p1_13 := p3_5 &&
;   (!break1_1 && !except1_1 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p3_5 && (!break1_1 && !except1_1 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 6284 | !(p3_5@844@01) | live]
; [else-branch: 6284 | p3_5@844@01 | live]
(push) ; 27
; [then-branch: 6284 | !(p3_5@844@01)]
(assert (not p3_5@844@01))
(pop) ; 27
(push) ; 27
; [else-branch: 6284 | p3_5@844@01]
(assert p3_5@844@01)
; [eval] !break1_1
(push) ; 28
; [then-branch: 6285 | break1_1@783@01 | live]
; [else-branch: 6285 | !(break1_1@783@01) | live]
(push) ; 29
; [then-branch: 6285 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 29
(push) ; 29
; [else-branch: 6285 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 30
; [then-branch: 6286 | except1_1@776@01 | live]
; [else-branch: 6286 | !(except1_1@776@01) | live]
(push) ; 31
; [then-branch: 6286 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 31
(push) ; 31
; [else-branch: 6286 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p3_5@844@01
  (and
    p3_5@844@01
    (=>
      (not break1_1@783@01)
      (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01)))
    (or (not break1_1@783@01) break1_1@783@01))))
(assert (or p3_5@844@01 (not p3_5@844@01)))
; [exec]
; p2_13 := p4_5 &&
;   (!break2_1 && !except2_1 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_5 && (!break2_1 && !except2_1 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 6287 | !(p4_5@845@01) | live]
; [else-branch: 6287 | p4_5@845@01 | live]
(push) ; 27
; [then-branch: 6287 | !(p4_5@845@01)]
(assert (not p4_5@845@01))
(pop) ; 27
(push) ; 27
; [else-branch: 6287 | p4_5@845@01]
(assert p4_5@845@01)
; [eval] !break2_1
(push) ; 28
; [then-branch: 6288 | break2_1@784@01 | live]
; [else-branch: 6288 | !(break2_1@784@01) | live]
(push) ; 29
; [then-branch: 6288 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 29
(push) ; 29
; [else-branch: 6288 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=> p4_5@845@01 (and p4_5@845@01 (or (not break2_1@784@01) break2_1@784@01))))
(assert (or p4_5@845@01 (not p4_5@845@01)))
; [exec]
; p3_7 := p3_5 &&
;   (!break1_1 && !except1_1 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p3_5 && (!break1_1 && !except1_1 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 6289 | !(p3_5@844@01) | live]
; [else-branch: 6289 | p3_5@844@01 | live]
(push) ; 27
; [then-branch: 6289 | !(p3_5@844@01)]
(assert (not p3_5@844@01))
(pop) ; 27
(push) ; 27
; [else-branch: 6289 | p3_5@844@01]
(assert p3_5@844@01)
; [eval] !break1_1
(push) ; 28
; [then-branch: 6290 | break1_1@783@01 | live]
; [else-branch: 6290 | !(break1_1@783@01) | live]
(push) ; 29
; [then-branch: 6290 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 29
(push) ; 29
; [else-branch: 6290 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 30
; [then-branch: 6291 | except1_1@776@01 | live]
; [else-branch: 6291 | !(except1_1@776@01) | live]
(push) ; 31
; [then-branch: 6291 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 31
(push) ; 31
; [else-branch: 6291 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p3_7@851@01 Bool)
(assert (=
  p3_7@851@01
  (and p3_5@844@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
; [exec]
; p4_7 := p4_5 &&
;   (!break2_1 && !except2_1 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_5 && (!break2_1 && !except2_1 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 6292 | !(p4_5@845@01) | live]
; [else-branch: 6292 | p4_5@845@01 | live]
(push) ; 27
; [then-branch: 6292 | !(p4_5@845@01)]
(assert (not p4_5@845@01))
(pop) ; 27
(push) ; 27
; [else-branch: 6292 | p4_5@845@01]
(assert p4_5@845@01)
; [eval] !break2_1
(push) ; 28
; [then-branch: 6293 | break2_1@784@01 | live]
; [else-branch: 6293 | !(break2_1@784@01) | live]
(push) ; 29
; [then-branch: 6293 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 29
(push) ; 29
; [else-branch: 6293 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [eval] p1_13 && (!break1_1 && !except1_1)
; [then-branch: 6294 | False | dead]
; [else-branch: 6294 | True | live]
(push) ; 26
; [else-branch: 6294 | True]
(pop) ; 26
; [eval] !(p1_13 && (!break1_1 && !except1_1))
; [eval] p1_13 && (!break1_1 && !except1_1)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6295 | True | live]
; [else-branch: 6295 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 6295 | True]
; [eval] p2_13 && (!break2_1 && !except2_1)
; [then-branch: 6296 | False | dead]
; [else-branch: 6296 | True | live]
(push) ; 27
; [else-branch: 6296 | True]
(pop) ; 27
; [eval] !(p2_13 && (!break2_1 && !except2_1))
; [eval] p2_13 && (!break2_1 && !except2_1)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6297 | True | live]
; [else-branch: 6297 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6297 | True]
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 28
; [then-branch: 6298 | !(p3_5@844@01) | live]
; [else-branch: 6298 | p3_5@844@01 | live]
(push) ; 29
; [then-branch: 6298 | !(p3_5@844@01)]
(assert (not p3_5@844@01))
(pop) ; 29
(push) ; 29
; [else-branch: 6298 | p3_5@844@01]
(assert p3_5@844@01)
; [eval] !break1_1
(push) ; 30
; [then-branch: 6299 | break1_1@783@01 | live]
; [else-branch: 6299 | !(break1_1@783@01) | live]
(push) ; 31
; [then-branch: 6299 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 31
(push) ; 31
; [else-branch: 6299 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=> p3_5@844@01 (and p3_5@844@01 (or (not break1_1@783@01) break1_1@783@01))))
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3_5@844@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6300 | p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 6300 | !(p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 6300 | !(p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(assert (not (and p3_5@844@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(pop) ; 28
; [eval] !(p3_5 && (!break1_1 && !except1_1))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 28
; [then-branch: 6301 | !(p3_5@844@01) | live]
; [else-branch: 6301 | p3_5@844@01 | live]
(push) ; 29
; [then-branch: 6301 | !(p3_5@844@01)]
(assert (not p3_5@844@01))
(pop) ; 29
(push) ; 29
; [else-branch: 6301 | p3_5@844@01]
(assert p3_5@844@01)
; [eval] !break1_1
(push) ; 30
; [then-branch: 6302 | break1_1@783@01 | live]
; [else-branch: 6302 | !(break1_1@783@01) | live]
(push) ; 31
; [then-branch: 6302 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 31
(push) ; 31
; [else-branch: 6302 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3_5@844@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3_5@844@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6303 | !(p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 6303 | p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 6303 | !(p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(assert (not (and p3_5@844@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 29
; [then-branch: 6304 | !(p4_5@845@01) | live]
; [else-branch: 6304 | p4_5@845@01 | live]
(push) ; 30
; [then-branch: 6304 | !(p4_5@845@01)]
(assert (not p4_5@845@01))
(pop) ; 30
(push) ; 30
; [else-branch: 6304 | p4_5@845@01]
(assert p4_5@845@01)
; [eval] !break2_1
(push) ; 31
; [then-branch: 6305 | break2_1@784@01 | live]
; [else-branch: 6305 | !(break2_1@784@01) | live]
(push) ; 32
; [then-branch: 6305 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 32
(push) ; 32
; [else-branch: 6305 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 6306 | False | dead]
; [else-branch: 6306 | True | live]
(push) ; 29
; [else-branch: 6306 | True]
(pop) ; 29
; [eval] !(p4_5 && (!break2_1 && !except2_1))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 29
; [then-branch: 6307 | !(p4_5@845@01) | live]
; [else-branch: 6307 | p4_5@845@01 | live]
(push) ; 30
; [then-branch: 6307 | !(p4_5@845@01)]
(assert (not p4_5@845@01))
(pop) ; 30
(push) ; 30
; [else-branch: 6307 | p4_5@845@01]
(assert p4_5@845@01)
; [eval] !break2_1
(push) ; 31
; [then-branch: 6308 | break2_1@784@01 | live]
; [else-branch: 6308 | !(break2_1@784@01) | live]
(push) ; 32
; [then-branch: 6308 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 32
(push) ; 32
; [else-branch: 6308 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6309 | True | live]
; [else-branch: 6309 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6309 | True]
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 30
; [then-branch: 6310 | !(p3_5@844@01) | live]
; [else-branch: 6310 | p3_5@844@01 | live]
(push) ; 31
; [then-branch: 6310 | !(p3_5@844@01)]
(assert (not p3_5@844@01))
(pop) ; 31
(push) ; 31
; [else-branch: 6310 | p3_5@844@01]
(assert p3_5@844@01)
; [eval] !break1_1
(push) ; 32
; [then-branch: 6311 | break1_1@783@01 | live]
; [else-branch: 6311 | !(break1_1@783@01) | live]
(push) ; 33
; [then-branch: 6311 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 33
(push) ; 33
; [else-branch: 6311 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 6312 | p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 6312 | !(p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(push) ; 30
; [else-branch: 6312 | !(p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(pop) ; 30
; [eval] !(p3_5 && (!break1_1 && !except1_1))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 30
; [then-branch: 6313 | !(p3_5@844@01) | live]
; [else-branch: 6313 | p3_5@844@01 | live]
(push) ; 31
; [then-branch: 6313 | !(p3_5@844@01)]
(assert (not p3_5@844@01))
(pop) ; 31
(push) ; 31
; [else-branch: 6313 | p3_5@844@01]
(assert p3_5@844@01)
; [eval] !break1_1
(push) ; 32
; [then-branch: 6314 | break1_1@783@01 | live]
; [else-branch: 6314 | !(break1_1@783@01) | live]
(push) ; 33
; [then-branch: 6314 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 33
(push) ; 33
; [else-branch: 6314 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3_5@844@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6315 | !(p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 6315 | p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 6315 | !(p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01))]
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 31
; [then-branch: 6316 | !(p4_5@845@01) | live]
; [else-branch: 6316 | p4_5@845@01 | live]
(push) ; 32
; [then-branch: 6316 | !(p4_5@845@01)]
(assert (not p4_5@845@01))
(pop) ; 32
(push) ; 32
; [else-branch: 6316 | p4_5@845@01]
(assert p4_5@845@01)
; [eval] !break2_1
(push) ; 33
; [then-branch: 6317 | break2_1@784@01 | live]
; [else-branch: 6317 | !(break2_1@784@01) | live]
(push) ; 34
; [then-branch: 6317 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 34
(push) ; 34
; [else-branch: 6317 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 6318 | False | dead]
; [else-branch: 6318 | True | live]
(push) ; 31
; [else-branch: 6318 | True]
(pop) ; 31
; [eval] !(p4_5 && (!break2_1 && !except2_1))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 31
; [then-branch: 6319 | !(p4_5@845@01) | live]
; [else-branch: 6319 | p4_5@845@01 | live]
(push) ; 32
; [then-branch: 6319 | !(p4_5@845@01)]
(assert (not p4_5@845@01))
(pop) ; 32
(push) ; 32
; [else-branch: 6319 | p4_5@845@01]
(assert p4_5@845@01)
; [eval] !break2_1
(push) ; 33
; [then-branch: 6320 | break2_1@784@01 | live]
; [else-branch: 6320 | !(break2_1@784@01) | live]
(push) ; 34
; [then-branch: 6320 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 34
(push) ; 34
; [else-branch: 6320 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6321 | True | live]
; [else-branch: 6321 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 6321 | True]
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 32
; [then-branch: 6322 | !(p1_10@801@01) | live]
; [else-branch: 6322 | p1_10@801@01 | live]
(push) ; 33
; [then-branch: 6322 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 33
(push) ; 33
; [else-branch: 6322 | p1_10@801@01]
(assert p1_10@801@01)
; [eval] !break1_1
(push) ; 34
; [then-branch: 6323 | break1_1@783@01 | live]
; [else-branch: 6323 | !(break1_1@783@01) | live]
(push) ; 35
; [then-branch: 6323 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 35
(push) ; 35
; [else-branch: 6323 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 6324 | p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 6324 | !(p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(push) ; 32
; [else-branch: 6324 | !(p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(pop) ; 32
; [eval] !(p1_10 && (!break1_1 && !except1_1))
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 32
; [then-branch: 6325 | !(p1_10@801@01) | live]
; [else-branch: 6325 | p1_10@801@01 | live]
(push) ; 33
; [then-branch: 6325 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 33
(push) ; 33
; [else-branch: 6325 | p1_10@801@01]
(assert p1_10@801@01)
; [eval] !break1_1
(push) ; 34
; [then-branch: 6326 | break1_1@783@01 | live]
; [else-branch: 6326 | !(break1_1@783@01) | live]
(push) ; 35
; [then-branch: 6326 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 35
(push) ; 35
; [else-branch: 6326 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not (and p1_10@801@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6327 | !(p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 6327 | p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 6327 | !(p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01))]
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 33
; [then-branch: 6328 | !(p2_10@802@01) | live]
; [else-branch: 6328 | p2_10@802@01 | live]
(push) ; 34
; [then-branch: 6328 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 34
(push) ; 34
; [else-branch: 6328 | p2_10@802@01]
; [eval] !break2_1
(push) ; 35
; [then-branch: 6329 | break2_1@784@01 | live]
; [else-branch: 6329 | !(break2_1@784@01) | live]
(push) ; 36
; [then-branch: 6329 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 36
(push) ; 36
; [else-branch: 6329 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (=> p2_10@802@01 (or (not break2_1@784@01) break2_1@784@01)))
; [then-branch: 6330 | False | dead]
; [else-branch: 6330 | True | live]
(push) ; 33
; [else-branch: 6330 | True]
(pop) ; 33
; [eval] !(p2_10 && (!break2_1 && !except2_1))
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 33
; [then-branch: 6331 | !(p2_10@802@01) | live]
; [else-branch: 6331 | p2_10@802@01 | live]
(push) ; 34
; [then-branch: 6331 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 34
(push) ; 34
; [else-branch: 6331 | p2_10@802@01]
; [eval] !break2_1
(push) ; 35
; [then-branch: 6332 | break2_1@784@01 | live]
; [else-branch: 6332 | !(break2_1@784@01) | live]
(push) ; 36
; [then-branch: 6332 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 36
(push) ; 36
; [else-branch: 6332 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6333 | True | live]
; [else-branch: 6333 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 6333 | True]
; [exec]
; assert (p1_10 && (!break1_1 && !except1_1) ==>
;   _loop_termination_flag_1 ==> !true) &&
;   (p2_10 && (!break2_1 && !except2_1) ==>
;   _loop_termination_flag_1_0 ==> !true)
; [eval] p1_10 && (!break1_1 && !except1_1) ==> _loop_termination_flag_1 ==> !true
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 34
; [then-branch: 6334 | !(p1_10@801@01) | live]
; [else-branch: 6334 | p1_10@801@01 | live]
(push) ; 35
; [then-branch: 6334 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 35
(push) ; 35
; [else-branch: 6334 | p1_10@801@01]
(assert p1_10@801@01)
; [eval] !break1_1
(push) ; 36
; [then-branch: 6335 | break1_1@783@01 | live]
; [else-branch: 6335 | !(break1_1@783@01) | live]
(push) ; 37
; [then-branch: 6335 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 37
(push) ; 37
; [else-branch: 6335 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 6336 | p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 6336 | !(p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(push) ; 35
; [else-branch: 6336 | !(p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_10 && (!break2_1 && !except2_1) ==> _loop_termination_flag_1_0 ==> !true
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 34
; [then-branch: 6337 | !(p2_10@802@01) | live]
; [else-branch: 6337 | p2_10@802@01 | live]
(push) ; 35
; [then-branch: 6337 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 35
(push) ; 35
; [else-branch: 6337 | p2_10@802@01]
; [eval] !break2_1
(push) ; 36
; [then-branch: 6338 | break2_1@784@01 | live]
; [else-branch: 6338 | !(break2_1@784@01) | live]
(push) ; 37
; [then-branch: 6338 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 37
(push) ; 37
; [else-branch: 6338 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 6339 | False | dead]
; [else-branch: 6339 | True | live]
(push) ; 35
; [else-branch: 6339 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_9 && !bypass1_1 ==> true
; [eval] p1_9 && !bypass1_1
(push) ; 34
; [then-branch: 6340 | !(p1_9@689@01) | live]
; [else-branch: 6340 | p1_9@689@01 | live]
(push) ; 35
; [then-branch: 6340 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 35
(push) ; 35
; [else-branch: 6340 | p1_9@689@01]
(assert p1_9@689@01)
; [eval] !bypass1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6341 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 6341 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 6341 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> true
; [eval] p2_9 && !bypass2_1
(push) ; 34
; [then-branch: 6342 | !(p2_9@690@01) | live]
; [else-branch: 6342 | p2_9@690@01 | live]
(push) ; 35
; [then-branch: 6342 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 35
(push) ; 35
; [else-branch: 6342 | p2_9@690@01]
(assert p2_9@690@01)
; [eval] !bypass2_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6343 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 6343 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 6343 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1
(push) ; 34
; [then-branch: 6344 | !(p1_9@689@01) | live]
; [else-branch: 6344 | p1_9@689@01 | live]
(push) ; 35
; [then-branch: 6344 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 35
(push) ; 35
; [else-branch: 6344 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6345 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 6345 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 6345 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1
(push) ; 35
; [then-branch: 6346 | !(p2_9@690@01) | live]
; [else-branch: 6346 | p2_9@690@01 | live]
(push) ; 36
; [then-branch: 6346 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 36
(push) ; 36
; [else-branch: 6346 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6347 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 6347 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 6347 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1 ==> issubtype(typeof(c_6.Container_value), int())
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 6348 | !(p1_9@689@01) | live]
; [else-branch: 6348 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 6348 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6348 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6349 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 6349 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6349 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] issubtype(typeof(c_6.Container_value), int())
; [eval] typeof(c_6.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> issubtype(typeof(c_6_0.Container_valuep), int())
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 6350 | !(p2_9@690@01) | live]
; [else-branch: 6350 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 6350 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6350 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6351 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 6351 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6351 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] issubtype(typeof(c_6_0.Container_valuep), int())
; [eval] typeof(c_6_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(push) ; 36
(assert (not (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@848@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@848@01) (as int<PyType>  PyType))))
; [eval] p1_9 && !bypass1_1 ==> !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 6352 | !(p1_9@689@01) | live]
; [else-branch: 6352 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 6352 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6352 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6353 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 6353 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6353 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] !idle1_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6354 | True | live]
; [else-branch: 6354 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 6354 | True]
; [eval] _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1@785@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1@785@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6355 | _loop_check_before_1@785@01 | live]
; [else-branch: 6355 | !(_loop_check_before_1@785@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 6355 | _loop_check_before_1@785@01]
(assert _loop_check_before_1@785@01)
; [eval] _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 6356 | False | live]
; [else-branch: 6356 | True | live]
(push) ; 43
; [then-branch: 6356 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 6356 | True]
; [eval] perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_159)) == none
; [eval] perm(MustTerminate(_cthread_159))
(push) ; 44
; [then-branch: 6357 | False | live]
; [else-branch: 6357 | True | live]
(push) ; 45
; [then-branch: 6357 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 6357 | True]
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
(push) ; 46
; [then-branch: 6358 | False | live]
; [else-branch: 6358 | True | live]
(push) ; 47
; [then-branch: 6358 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 6358 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
(push) ; 48
; [then-branch: 6359 | False | live]
; [else-branch: 6359 | True | live]
(push) ; 49
; [then-branch: 6359 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 6359 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 6360 | False | live]
; [else-branch: 6360 | True | live]
(push) ; 51
; [then-branch: 6360 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 6360 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 6355 | !(_loop_check_before_1@785@01)]
(assert (not _loop_check_before_1@785@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (and
    p1_9@689@01
    (not bypass1_1@756@01)
    (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))))
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 6361 | !(p2_9@690@01) | live]
; [else-branch: 6361 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 6361 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6361 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6362 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 6362 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6362 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6363 | True | live]
; [else-branch: 6363 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 6363 | True]
; [eval] _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1_0@786@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1_0@786@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6364 | _loop_check_before_1_0@786@01 | live]
; [else-branch: 6364 | !(_loop_check_before_1_0@786@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 6364 | _loop_check_before_1_0@786@01]
(assert _loop_check_before_1_0@786@01)
; [eval] _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 6365 | False | live]
; [else-branch: 6365 | True | live]
(push) ; 43
; [then-branch: 6365 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 6365 | True]
; [eval] perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_159_0)) == none
; [eval] perm(MustTerminate_0(_cthread_159_0))
(push) ; 44
; [then-branch: 6366 | False | live]
; [else-branch: 6366 | True | live]
(push) ; 45
; [then-branch: 6366 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 6366 | True]
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false)
(push) ; 46
; [then-branch: 6367 | False | live]
; [else-branch: 6367 | True | live]
(push) ; 47
; [then-branch: 6367 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 6367 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false)
(push) ; 48
; [then-branch: 6368 | False | live]
; [else-branch: 6368 | True | live]
(push) ; 49
; [then-branch: 6368 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 6368 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 6369 | False | live]
; [else-branch: 6369 | True | live]
(push) ; 51
; [then-branch: 6369 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 6369 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 6364 | !(_loop_check_before_1_0@786@01)]
(assert (not _loop_check_before_1_0@786@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (and
    p2_9@690@01
    (not bypass2_1@757@01)
    (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))))
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1 ==> !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 6370 | !(p1_9@689@01) | live]
; [else-branch: 6370 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 6370 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6370 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6371 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 6371 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6371 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] !idle1_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6372 | True | live]
; [else-branch: 6372 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 6372 | True]
; [eval] !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_1
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1@785@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1@785@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6373 | !(_loop_check_before_1@785@01) | live]
; [else-branch: 6373 | _loop_check_before_1@785@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 6373 | !(_loop_check_before_1@785@01)]
(assert (not _loop_check_before_1@785@01))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
(push) ; 42
; [then-branch: 6374 | False | live]
; [else-branch: 6374 | True | live]
(push) ; 43
; [then-branch: 6374 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 6374 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
(push) ; 44
; [then-branch: 6375 | False | live]
; [else-branch: 6375 | True | live]
(push) ; 45
; [then-branch: 6375 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 6375 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 6376 | False | live]
; [else-branch: 6376 | True | live]
(push) ; 47
; [then-branch: 6376 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 6376 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 6373 | _loop_check_before_1@785@01]
(assert _loop_check_before_1@785@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (and
    p1_9@689@01
    (not bypass1_1@756@01)
    (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))))
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 6377 | !(p2_9@690@01) | live]
; [else-branch: 6377 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 6377 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6377 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6378 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 6378 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6378 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6379 | True | live]
; [else-branch: 6379 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 6379 | True]
; [eval] !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_1_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1_0@786@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1_0@786@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6380 | !(_loop_check_before_1_0@786@01) | live]
; [else-branch: 6380 | _loop_check_before_1_0@786@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 6380 | !(_loop_check_before_1_0@786@01)]
(assert (not _loop_check_before_1_0@786@01))
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false)
(push) ; 42
; [then-branch: 6381 | False | live]
; [else-branch: 6381 | True | live]
(push) ; 43
; [then-branch: 6381 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 6381 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false)
(push) ; 44
; [then-branch: 6382 | False | live]
; [else-branch: 6382 | True | live]
(push) ; 45
; [then-branch: 6382 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 6382 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 6383 | False | live]
; [else-branch: 6383 | True | live]
(push) ; 47
; [then-branch: 6383 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 6383 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 6380 | _loop_check_before_1_0@786@01]
(assert _loop_check_before_1_0@786@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (and
    p2_9@690@01
    (not bypass2_1@757@01)
    (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))))
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] bypass1_1 ==> tmp1_13 == except1_1
(push) ; 36
; [then-branch: 6384 | bypass1_1@756@01 | dead]
; [else-branch: 6384 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6384 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_16 == break1_1
(push) ; 36
; [then-branch: 6385 | bypass1_1@756@01 | dead]
; [else-branch: 6385 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6385 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_11 == _loop_measures_1
(push) ; 36
; [then-branch: 6386 | bypass1_1@756@01 | dead]
; [else-branch: 6386 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6386 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_14 == _err
(push) ; 36
; [then-branch: 6387 | bypass1_1@756@01 | dead]
; [else-branch: 6387 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6387 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_15 == _loop_check_before_1
(push) ; 36
; [then-branch: 6388 | bypass1_1@756@01 | dead]
; [else-branch: 6388 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6388 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_12 == Exception_res_1
(push) ; 36
; [then-branch: 6389 | bypass1_1@756@01 | dead]
; [else-branch: 6389 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6389 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_11 == _loop_measures_1_0
(push) ; 36
; [then-branch: 6390 | bypass2_1@757@01 | dead]
; [else-branch: 6390 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6390 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_15 == _loop_check_before_1_0
(push) ; 36
; [then-branch: 6391 | bypass2_1@757@01 | dead]
; [else-branch: 6391 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6391 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_12 == Exception_res_1_0
(push) ; 36
; [then-branch: 6392 | bypass2_1@757@01 | dead]
; [else-branch: 6392 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6392 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_14 == _err_2
(push) ; 36
; [then-branch: 6393 | bypass2_1@757@01 | dead]
; [else-branch: 6393 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6393 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_13 == except2_1
(push) ; 36
; [then-branch: 6394 | bypass2_1@757@01 | dead]
; [else-branch: 6394 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6394 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_16 == break2_1
(push) ; 36
; [then-branch: 6395 | bypass2_1@757@01 | dead]
; [else-branch: 6395 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6395 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 25
; [then-branch: 6396 | !(p2_11@843@01) | live]
; [else-branch: 6396 | p2_11@843@01 | live]
(push) ; 26
; [then-branch: 6396 | !(p2_11@843@01)]
(assert (not p2_11@843@01))
(pop) ; 26
(push) ; 26
; [else-branch: 6396 | p2_11@843@01]
(assert p2_11@843@01)
; [eval] !break2_1
(push) ; 27
; [then-branch: 6397 | break2_1@784@01 | live]
; [else-branch: 6397 | !(break2_1@784@01) | live]
(push) ; 28
; [then-branch: 6397 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 28
(push) ; 28
; [else-branch: 6397 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6398 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
; [else-branch: 6398 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 6398 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01))))
(pop) ; 25
(pop) ; 24
(pop) ; 23
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 23
; [then-branch: 6399 | !(p2_11@843@01) | live]
; [else-branch: 6399 | p2_11@843@01 | live]
(push) ; 24
; [then-branch: 6399 | !(p2_11@843@01)]
(assert (not p2_11@843@01))
(pop) ; 24
(push) ; 24
; [else-branch: 6399 | p2_11@843@01]
(assert p2_11@843@01)
; [eval] !break2_1
(push) ; 25
; [then-branch: 6400 | break2_1@784@01 | live]
; [else-branch: 6400 | !(break2_1@784@01) | live]
(push) ; 26
; [then-branch: 6400 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 26
(push) ; 26
; [else-branch: 6400 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6401 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
; [else-branch: 6401 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 6401 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01))))
(pop) ; 23
(pop) ; 22
(pop) ; 21
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 21
; [then-branch: 6402 | !(p2_11@843@01) | live]
; [else-branch: 6402 | p2_11@843@01 | live]
(push) ; 22
; [then-branch: 6402 | !(p2_11@843@01)]
(assert (not p2_11@843@01))
(pop) ; 22
(push) ; 22
; [else-branch: 6402 | p2_11@843@01]
(assert p2_11@843@01)
; [eval] !break2_1
(push) ; 23
; [then-branch: 6403 | break2_1@784@01 | live]
; [else-branch: 6403 | !(break2_1@784@01) | live]
(push) ; 24
; [then-branch: 6403 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 24
(push) ; 24
; [else-branch: 6403 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6404 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
; [else-branch: 6404 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
(set-option :timeout 0)
(push) ; 21
; [else-branch: 6404 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01))))
(pop) ; 21
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 6256 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(assert (not (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(pop) ; 19
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 19
; [then-branch: 6405 | !(p2_11@843@01) | live]
; [else-branch: 6405 | p2_11@843@01 | live]
(push) ; 20
; [then-branch: 6405 | !(p2_11@843@01)]
(assert (not p2_11@843@01))
(pop) ; 20
(push) ; 20
; [else-branch: 6405 | p2_11@843@01]
(assert p2_11@843@01)
; [eval] !break2_1
(push) ; 21
; [then-branch: 6406 | break2_1@784@01 | live]
; [else-branch: 6406 | !(break2_1@784@01) | live]
(push) ; 22
; [then-branch: 6406 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6406 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6407 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 6407 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 6407 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(assert (not (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
; [exec]
; tmp_1 := new()
(declare-const tmp_1@852@01 $Ref)
(assert (not (= tmp_1@852@01 $Ref.null)))
(assert (not (= tmp_1@852@01 c_1@697@01)))
(assert (not (= tmp_1@852@01 tmp2_14@740@01)))
(assert (not (= tmp_1@852@01 c_1_0@698@01)))
(assert (not (= tmp_1@852@01 tmp1_12@735@01)))
(assert (not (= tmp_1@852@01 tmp1_14@739@01)))
(assert (not (= tmp_1@852@01 _cthread_159_0@692@01)))
(assert (not (= tmp_1@852@01 _err@775@01)))
(assert (not (= tmp_1@852@01 Exception_res_1_0@774@01)))
(assert (not (= tmp_1@852@01 b_1@699@01)))
(assert (not (= tmp_1@852@01 _err_2@777@01)))
(assert (not (= tmp_1@852@01 Exception_res_1@773@01)))
(assert (not (= tmp_1@852@01 tmp2_12@736@01)))
(assert (not
  (=
    tmp_1@852@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@787@01))))))))
(assert (not
  (=
    tmp_1@852@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@787@01)))))))
(assert (not (= tmp_1@852@01 b_1_0@700@01)))
(assert (not (= tmp_1@852@01 _cthread_159@691@01)))
(assert (not (= tmp_1@852@01 tmp_1@796@01)))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 20
; [then-branch: 6408 | !(p1_11@842@01) | live]
; [else-branch: 6408 | p1_11@842@01 | live]
(push) ; 21
; [then-branch: 6408 | !(p1_11@842@01)]
(assert (not p1_11@842@01))
(pop) ; 21
(push) ; 21
; [else-branch: 6408 | p1_11@842@01]
(assert p1_11@842@01)
; [eval] !break1_1
(push) ; 22
; [then-branch: 6409 | break1_1@783@01 | live]
; [else-branch: 6409 | !(break1_1@783@01) | live]
(push) ; 23
; [then-branch: 6409 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 23
(push) ; 23
; [else-branch: 6409 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 6410 | p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 6410 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(push) ; 20
; [else-branch: 6410 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(pop) ; 20
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 20
; [then-branch: 6411 | !(p1_11@842@01) | live]
; [else-branch: 6411 | p1_11@842@01 | live]
(push) ; 21
; [then-branch: 6411 | !(p1_11@842@01)]
(assert (not p1_11@842@01))
(pop) ; 21
(push) ; 21
; [else-branch: 6411 | p1_11@842@01]
(assert p1_11@842@01)
; [eval] !break1_1
(push) ; 22
; [then-branch: 6412 | break1_1@783@01 | live]
; [else-branch: 6412 | !(break1_1@783@01) | live]
(push) ; 23
; [then-branch: 6412 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 23
(push) ; 23
; [else-branch: 6412 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_11@842@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6413 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 6413 | p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 6413 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01))]
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 21
; [then-branch: 6414 | !(p2_11@843@01) | live]
; [else-branch: 6414 | p2_11@843@01 | live]
(push) ; 22
; [then-branch: 6414 | !(p2_11@843@01)]
(assert (not p2_11@843@01))
(pop) ; 22
(push) ; 22
; [else-branch: 6414 | p2_11@843@01]
(assert p2_11@843@01)
; [eval] !break2_1
(push) ; 23
; [then-branch: 6415 | break2_1@784@01 | live]
; [else-branch: 6415 | !(break2_1@784@01) | live]
(push) ; 24
; [then-branch: 6415 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 24
(push) ; 24
; [else-branch: 6415 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 6416 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 6416 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(push) ; 21
; [else-branch: 6416 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(pop) ; 21
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 21
; [then-branch: 6417 | !(p2_11@843@01) | live]
; [else-branch: 6417 | p2_11@843@01 | live]
(push) ; 22
; [then-branch: 6417 | !(p2_11@843@01)]
(assert (not p2_11@843@01))
(pop) ; 22
(push) ; 22
; [else-branch: 6417 | p2_11@843@01]
(assert p2_11@843@01)
; [eval] !break2_1
(push) ; 23
; [then-branch: 6418 | break2_1@784@01 | live]
; [else-branch: 6418 | !(break2_1@784@01) | live]
(push) ; 24
; [then-branch: 6418 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 24
(push) ; 24
; [else-branch: 6418 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6419 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 6419 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 6419 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01))]
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 22
; [then-branch: 6420 | !(p1_11@842@01) | live]
; [else-branch: 6420 | p1_11@842@01 | live]
(push) ; 23
; [then-branch: 6420 | !(p1_11@842@01)]
(assert (not p1_11@842@01))
(pop) ; 23
(push) ; 23
; [else-branch: 6420 | p1_11@842@01]
(assert p1_11@842@01)
; [eval] !break1_1
(push) ; 24
; [then-branch: 6421 | break1_1@783@01 | live]
; [else-branch: 6421 | !(break1_1@783@01) | live]
(push) ; 25
; [then-branch: 6421 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 25
(push) ; 25
; [else-branch: 6421 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 6422 | p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 6422 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(push) ; 22
; [else-branch: 6422 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(pop) ; 22
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 22
; [then-branch: 6423 | !(p1_11@842@01) | live]
; [else-branch: 6423 | p1_11@842@01 | live]
(push) ; 23
; [then-branch: 6423 | !(p1_11@842@01)]
(assert (not p1_11@842@01))
(pop) ; 23
(push) ; 23
; [else-branch: 6423 | p1_11@842@01]
(assert p1_11@842@01)
; [eval] !break1_1
(push) ; 24
; [then-branch: 6424 | break1_1@783@01 | live]
; [else-branch: 6424 | !(break1_1@783@01) | live]
(push) ; 25
; [then-branch: 6424 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 25
(push) ; 25
; [else-branch: 6424 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_11@842@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6425 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 6425 | p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 6425 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01))]
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 23
; [then-branch: 6426 | !(p2_11@843@01) | live]
; [else-branch: 6426 | p2_11@843@01 | live]
(push) ; 24
; [then-branch: 6426 | !(p2_11@843@01)]
(assert (not p2_11@843@01))
(pop) ; 24
(push) ; 24
; [else-branch: 6426 | p2_11@843@01]
(assert p2_11@843@01)
; [eval] !break2_1
(push) ; 25
; [then-branch: 6427 | break2_1@784@01 | live]
; [else-branch: 6427 | !(break2_1@784@01) | live]
(push) ; 26
; [then-branch: 6427 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 26
(push) ; 26
; [else-branch: 6427 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 6428 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 6428 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(push) ; 23
; [else-branch: 6428 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(pop) ; 23
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 23
; [then-branch: 6429 | !(p2_11@843@01) | live]
; [else-branch: 6429 | p2_11@843@01 | live]
(push) ; 24
; [then-branch: 6429 | !(p2_11@843@01)]
(assert (not p2_11@843@01))
(pop) ; 24
(push) ; 24
; [else-branch: 6429 | p2_11@843@01]
(assert p2_11@843@01)
; [eval] !break2_1
(push) ; 25
; [then-branch: 6430 | break2_1@784@01 | live]
; [else-branch: 6430 | !(break2_1@784@01) | live]
(push) ; 26
; [then-branch: 6430 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 26
(push) ; 26
; [else-branch: 6430 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6431 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 6431 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 6431 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01))]
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 24
; [then-branch: 6432 | !(p1_11@842@01) | live]
; [else-branch: 6432 | p1_11@842@01 | live]
(push) ; 25
; [then-branch: 6432 | !(p1_11@842@01)]
(assert (not p1_11@842@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6432 | p1_11@842@01]
(assert p1_11@842@01)
; [eval] !break1_1
(push) ; 26
; [then-branch: 6433 | break1_1@783@01 | live]
; [else-branch: 6433 | !(break1_1@783@01) | live]
(push) ; 27
; [then-branch: 6433 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 27
(push) ; 27
; [else-branch: 6433 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 6434 | p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 6434 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(push) ; 24
; [else-branch: 6434 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(pop) ; 24
; [eval] !(p1_11 && (!break1_1 && !except1_1))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 24
; [then-branch: 6435 | !(p1_11@842@01) | live]
; [else-branch: 6435 | p1_11@842@01 | live]
(push) ; 25
; [then-branch: 6435 | !(p1_11@842@01)]
(assert (not p1_11@842@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6435 | p1_11@842@01]
(assert p1_11@842@01)
; [eval] !break1_1
(push) ; 26
; [then-branch: 6436 | break1_1@783@01 | live]
; [else-branch: 6436 | !(break1_1@783@01) | live]
(push) ; 27
; [then-branch: 6436 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 27
(push) ; 27
; [else-branch: 6436 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_11@842@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6437 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 6437 | p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 6437 | !(p1_11@842@01 && !(break1_1@783@01) && !(except1_1@776@01))]
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 25
; [then-branch: 6438 | !(p2_11@843@01) | live]
; [else-branch: 6438 | p2_11@843@01 | live]
(push) ; 26
; [then-branch: 6438 | !(p2_11@843@01)]
(assert (not p2_11@843@01))
(pop) ; 26
(push) ; 26
; [else-branch: 6438 | p2_11@843@01]
(assert p2_11@843@01)
; [eval] !break2_1
(push) ; 27
; [then-branch: 6439 | break2_1@784@01 | live]
; [else-branch: 6439 | !(break2_1@784@01) | live]
(push) ; 28
; [then-branch: 6439 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 28
(push) ; 28
; [else-branch: 6439 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 6440 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
; [else-branch: 6440 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
(push) ; 25
; [else-branch: 6440 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01))]
(pop) ; 25
; [eval] !(p2_11 && (!break2_1 && !except2_1))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 25
; [then-branch: 6441 | !(p2_11@843@01) | live]
; [else-branch: 6441 | p2_11@843@01 | live]
(push) ; 26
; [then-branch: 6441 | !(p2_11@843@01)]
(assert (not p2_11@843@01))
(pop) ; 26
(push) ; 26
; [else-branch: 6441 | p2_11@843@01]
(assert p2_11@843@01)
; [eval] !break2_1
(push) ; 27
; [then-branch: 6442 | break2_1@784@01 | live]
; [else-branch: 6442 | !(break2_1@784@01) | live]
(push) ; 28
; [then-branch: 6442 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 28
(push) ; 28
; [else-branch: 6442 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6443 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)) | live]
; [else-branch: 6443 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6443 | !(p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01))]
; [exec]
; p1_13 := p3_5 &&
;   (!break1_1 && !except1_1 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p3_5 && (!break1_1 && !except1_1 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 6444 | !(p3_5@844@01) | live]
; [else-branch: 6444 | p3_5@844@01 | live]
(push) ; 27
; [then-branch: 6444 | !(p3_5@844@01)]
(assert (not p3_5@844@01))
(pop) ; 27
(push) ; 27
; [else-branch: 6444 | p3_5@844@01]
(assert p3_5@844@01)
; [eval] !break1_1
(push) ; 28
; [then-branch: 6445 | break1_1@783@01 | live]
; [else-branch: 6445 | !(break1_1@783@01) | live]
(push) ; 29
; [then-branch: 6445 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 29
(push) ; 29
; [else-branch: 6445 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 30
; [then-branch: 6446 | except1_1@776@01 | live]
; [else-branch: 6446 | !(except1_1@776@01) | live]
(push) ; 31
; [then-branch: 6446 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 31
(push) ; 31
; [else-branch: 6446 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p3_5@844@01
  (and
    p3_5@844@01
    (=>
      (not break1_1@783@01)
      (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01)))
    (or (not break1_1@783@01) break1_1@783@01))))
(assert (or p3_5@844@01 (not p3_5@844@01)))
; [exec]
; p2_13 := p4_5 &&
;   (!break2_1 && !except2_1 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_5 && (!break2_1 && !except2_1 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 26
; [then-branch: 6447 | !(p4_5@845@01) | live]
; [else-branch: 6447 | p4_5@845@01 | live]
(push) ; 27
; [then-branch: 6447 | !(p4_5@845@01)]
(assert (not p4_5@845@01))
(pop) ; 27
(push) ; 27
; [else-branch: 6447 | p4_5@845@01]
(assert p4_5@845@01)
; [eval] !break2_1
(push) ; 28
; [then-branch: 6448 | break2_1@784@01 | live]
; [else-branch: 6448 | !(break2_1@784@01) | live]
(push) ; 29
; [then-branch: 6448 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 29
(push) ; 29
; [else-branch: 6448 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(push) ; 30
; [then-branch: 6449 | except2_1@778@01 | live]
; [else-branch: 6449 | !(except2_1@778@01) | live]
(push) ; 31
; [then-branch: 6449 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 31
(push) ; 31
; [else-branch: 6449 | !(except2_1@778@01)]
(assert (not except2_1@778@01))
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  p4_5@845@01
  (and
    p4_5@845@01
    (=>
      (not break2_1@784@01)
      (and (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01)))
    (or (not break2_1@784@01) break2_1@784@01))))
(assert (or p4_5@845@01 (not p4_5@845@01)))
; [exec]
; p3_7 := p3_5 &&
;   (!break1_1 && !except1_1 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p3_5 && (!break1_1 && !except1_1 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 6450 | !(p3_5@844@01) | live]
; [else-branch: 6450 | p3_5@844@01 | live]
(push) ; 27
; [then-branch: 6450 | !(p3_5@844@01)]
(assert (not p3_5@844@01))
(pop) ; 27
(push) ; 27
; [else-branch: 6450 | p3_5@844@01]
(assert p3_5@844@01)
; [eval] !break1_1
(push) ; 28
; [then-branch: 6451 | break1_1@783@01 | live]
; [else-branch: 6451 | !(break1_1@783@01) | live]
(push) ; 29
; [then-branch: 6451 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 29
(push) ; 29
; [else-branch: 6451 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 30
; [then-branch: 6452 | except1_1@776@01 | live]
; [else-branch: 6452 | !(except1_1@776@01) | live]
(push) ; 31
; [then-branch: 6452 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 31
(push) ; 31
; [else-branch: 6452 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and (not break1_1@783@01) (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p3_7@853@01 Bool)
(assert (=
  p3_7@853@01
  (and p3_5@844@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
; [exec]
; p4_7 := p4_5 &&
;   (!break2_1 && !except2_1 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_5 && (!break2_1 && !except2_1 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 26
; [then-branch: 6453 | !(p4_5@845@01) | live]
; [else-branch: 6453 | p4_5@845@01 | live]
(push) ; 27
; [then-branch: 6453 | !(p4_5@845@01)]
(assert (not p4_5@845@01))
(pop) ; 27
(push) ; 27
; [else-branch: 6453 | p4_5@845@01]
(assert p4_5@845@01)
; [eval] !break2_1
(push) ; 28
; [then-branch: 6454 | break2_1@784@01 | live]
; [else-branch: 6454 | !(break2_1@784@01) | live]
(push) ; 29
; [then-branch: 6454 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 29
(push) ; 29
; [else-branch: 6454 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(push) ; 30
; [then-branch: 6455 | except2_1@778@01 | live]
; [else-branch: 6455 | !(except2_1@778@01) | live]
(push) ; 31
; [then-branch: 6455 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 31
(push) ; 31
; [else-branch: 6455 | !(except2_1@778@01)]
(assert (not except2_1@778@01))
; [eval] !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and (not break2_1@784@01) (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(declare-const p4_7@854@01 Bool)
(assert (=
  p4_7@854@01
  (and p4_5@845@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
; [eval] p1_13 && (!break1_1 && !except1_1)
; [then-branch: 6456 | False | dead]
; [else-branch: 6456 | True | live]
(push) ; 26
; [else-branch: 6456 | True]
(pop) ; 26
; [eval] !(p1_13 && (!break1_1 && !except1_1))
; [eval] p1_13 && (!break1_1 && !except1_1)
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6457 | True | live]
; [else-branch: 6457 | False | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 6457 | True]
; [eval] p2_13 && (!break2_1 && !except2_1)
; [then-branch: 6458 | False | dead]
; [else-branch: 6458 | True | live]
(push) ; 27
; [else-branch: 6458 | True]
(pop) ; 27
; [eval] !(p2_13 && (!break2_1 && !except2_1))
; [eval] p2_13 && (!break2_1 && !except2_1)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6459 | True | live]
; [else-branch: 6459 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6459 | True]
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 28
; [then-branch: 6460 | !(p3_5@844@01) | live]
; [else-branch: 6460 | p3_5@844@01 | live]
(push) ; 29
; [then-branch: 6460 | !(p3_5@844@01)]
(assert (not p3_5@844@01))
(pop) ; 29
(push) ; 29
; [else-branch: 6460 | p3_5@844@01]
(assert p3_5@844@01)
; [eval] !break1_1
(push) ; 30
; [then-branch: 6461 | break1_1@783@01 | live]
; [else-branch: 6461 | !(break1_1@783@01) | live]
(push) ; 31
; [then-branch: 6461 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 31
(push) ; 31
; [else-branch: 6461 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (=> p3_5@844@01 (and p3_5@844@01 (or (not break1_1@783@01) break1_1@783@01))))
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3_5@844@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6462 | p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 6462 | !(p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 6462 | !(p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(assert (not (and p3_5@844@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(pop) ; 28
; [eval] !(p3_5 && (!break1_1 && !except1_1))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 28
; [then-branch: 6463 | !(p3_5@844@01) | live]
; [else-branch: 6463 | p3_5@844@01 | live]
(push) ; 29
; [then-branch: 6463 | !(p3_5@844@01)]
(assert (not p3_5@844@01))
(pop) ; 29
(push) ; 29
; [else-branch: 6463 | p3_5@844@01]
(assert p3_5@844@01)
; [eval] !break1_1
(push) ; 30
; [then-branch: 6464 | break1_1@783@01 | live]
; [else-branch: 6464 | !(break1_1@783@01) | live]
(push) ; 31
; [then-branch: 6464 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 31
(push) ; 31
; [else-branch: 6464 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (and p3_5@844@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (not (and p3_5@844@01 (and (not break1_1@783@01) (not except1_1@776@01))))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6465 | !(p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 6465 | p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 6465 | !(p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(assert (not (and p3_5@844@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 29
; [then-branch: 6466 | !(p4_5@845@01) | live]
; [else-branch: 6466 | p4_5@845@01 | live]
(push) ; 30
; [then-branch: 6466 | !(p4_5@845@01)]
(assert (not p4_5@845@01))
(pop) ; 30
(push) ; 30
; [else-branch: 6466 | p4_5@845@01]
(assert p4_5@845@01)
; [eval] !break2_1
(push) ; 31
; [then-branch: 6467 | break2_1@784@01 | live]
; [else-branch: 6467 | !(break2_1@784@01) | live]
(push) ; 32
; [then-branch: 6467 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 32
(push) ; 32
; [else-branch: 6467 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=> p4_5@845@01 (and p4_5@845@01 (or (not break2_1@784@01) break2_1@784@01))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not (and p4_5@845@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4_5@845@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6468 | p4_5@845@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
; [else-branch: 6468 | !(p4_5@845@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6468 | p4_5@845@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p4_5@845@01 (and (not break2_1@784@01) (not except2_1@778@01))))
; [exec]
; c_6_0.Container_valuep := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 30
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 30
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_valuep@855@01 $Ref)
(assert (= Container_valuep@855@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 30
; [then-branch: 6469 | !(p3_5@844@01) | live]
; [else-branch: 6469 | p3_5@844@01 | live]
(push) ; 31
; [then-branch: 6469 | !(p3_5@844@01)]
(assert (not p3_5@844@01))
(pop) ; 31
(push) ; 31
; [else-branch: 6469 | p3_5@844@01]
(assert p3_5@844@01)
; [eval] !break1_1
(push) ; 32
; [then-branch: 6470 | break1_1@783@01 | live]
; [else-branch: 6470 | !(break1_1@783@01) | live]
(push) ; 33
; [then-branch: 6470 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 33
(push) ; 33
; [else-branch: 6470 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 6471 | p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 6471 | !(p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(push) ; 30
; [else-branch: 6471 | !(p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(pop) ; 30
; [eval] !(p3_5 && (!break1_1 && !except1_1))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 30
; [then-branch: 6472 | !(p3_5@844@01) | live]
; [else-branch: 6472 | p3_5@844@01 | live]
(push) ; 31
; [then-branch: 6472 | !(p3_5@844@01)]
(assert (not p3_5@844@01))
(pop) ; 31
(push) ; 31
; [else-branch: 6472 | p3_5@844@01]
(assert p3_5@844@01)
; [eval] !break1_1
(push) ; 32
; [then-branch: 6473 | break1_1@783@01 | live]
; [else-branch: 6473 | !(break1_1@783@01) | live]
(push) ; 33
; [then-branch: 6473 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 33
(push) ; 33
; [else-branch: 6473 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (and p3_5@844@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6474 | !(p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 6474 | p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 6474 | !(p3_5@844@01 && !(break1_1@783@01) && !(except1_1@776@01))]
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 31
; [then-branch: 6475 | !(p4_5@845@01) | live]
; [else-branch: 6475 | p4_5@845@01 | live]
(push) ; 32
; [then-branch: 6475 | !(p4_5@845@01)]
(assert (not p4_5@845@01))
(pop) ; 32
(push) ; 32
; [else-branch: 6475 | p4_5@845@01]
; [eval] !break2_1
(push) ; 33
; [then-branch: 6476 | break2_1@784@01 | live]
; [else-branch: 6476 | !(break2_1@784@01) | live]
(push) ; 34
; [then-branch: 6476 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 34
(push) ; 34
; [else-branch: 6476 | !(break2_1@784@01)]
; [eval] !except2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (=> p4_5@845@01 (or (not break2_1@784@01) break2_1@784@01)))
(push) ; 31
(set-option :timeout 10)
(assert (not (not (and p4_5@845@01 (and (not break2_1@784@01) (not except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4_5@845@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6477 | p4_5@845@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
; [else-branch: 6477 | !(p4_5@845@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 6477 | p4_5@845@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p4_5@845@01 (and (not break2_1@784@01) (not except2_1@778@01))))
; [exec]
; break2_1 := true
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 32
; [then-branch: 6478 | !(p1_10@801@01) | live]
; [else-branch: 6478 | p1_10@801@01 | live]
(push) ; 33
; [then-branch: 6478 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 33
(push) ; 33
; [else-branch: 6478 | p1_10@801@01]
(assert p1_10@801@01)
; [eval] !break1_1
(push) ; 34
; [then-branch: 6479 | break1_1@783@01 | live]
; [else-branch: 6479 | !(break1_1@783@01) | live]
(push) ; 35
; [then-branch: 6479 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 35
(push) ; 35
; [else-branch: 6479 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 6480 | p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 6480 | !(p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(push) ; 32
; [else-branch: 6480 | !(p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(pop) ; 32
; [eval] !(p1_10 && (!break1_1 && !except1_1))
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 32
; [then-branch: 6481 | !(p1_10@801@01) | live]
; [else-branch: 6481 | p1_10@801@01 | live]
(push) ; 33
; [then-branch: 6481 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 33
(push) ; 33
; [else-branch: 6481 | p1_10@801@01]
(assert p1_10@801@01)
; [eval] !break1_1
(push) ; 34
; [then-branch: 6482 | break1_1@783@01 | live]
; [else-branch: 6482 | !(break1_1@783@01) | live]
(push) ; 35
; [then-branch: 6482 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 35
(push) ; 35
; [else-branch: 6482 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not (and p1_10@801@01 (and (not break1_1@783@01) (not except1_1@776@01)))))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6483 | !(p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
; [else-branch: 6483 | p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 6483 | !(p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01))]
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 33
; [then-branch: 6484 | !(p2_10@802@01) | live]
; [else-branch: 6484 | p2_10@802@01 | live]
(push) ; 34
; [then-branch: 6484 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 34
(push) ; 34
; [else-branch: 6484 | p2_10@802@01]
; [eval] !break2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 6485 | False | dead]
; [else-branch: 6485 | True | live]
(push) ; 33
; [else-branch: 6485 | True]
(pop) ; 33
; [eval] !(p2_10 && (!break2_1 && !except2_1))
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 33
; [then-branch: 6486 | !(p2_10@802@01) | live]
; [else-branch: 6486 | p2_10@802@01 | live]
(push) ; 34
; [then-branch: 6486 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 34
(push) ; 34
; [else-branch: 6486 | p2_10@802@01]
; [eval] !break2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6487 | True | live]
; [else-branch: 6487 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 6487 | True]
; [exec]
; assert (p1_10 && (!break1_1 && !except1_1) ==>
;   _loop_termination_flag_1 ==> !true) &&
;   (p2_10 && (!break2_1 && !except2_1) ==>
;   _loop_termination_flag_1_0 ==> !true)
; [eval] p1_10 && (!break1_1 && !except1_1) ==> _loop_termination_flag_1 ==> !true
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 34
; [then-branch: 6488 | !(p1_10@801@01) | live]
; [else-branch: 6488 | p1_10@801@01 | live]
(push) ; 35
; [then-branch: 6488 | !(p1_10@801@01)]
(assert (not p1_10@801@01))
(pop) ; 35
(push) ; 35
; [else-branch: 6488 | p1_10@801@01]
(assert p1_10@801@01)
; [eval] !break1_1
(push) ; 36
; [then-branch: 6489 | break1_1@783@01 | live]
; [else-branch: 6489 | !(break1_1@783@01) | live]
(push) ; 37
; [then-branch: 6489 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 37
(push) ; 37
; [else-branch: 6489 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 6490 | p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01) | dead]
; [else-branch: 6490 | !(p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01)) | live]
(push) ; 35
; [else-branch: 6490 | !(p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01))]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; [eval] p2_10 && (!break2_1 && !except2_1) ==> _loop_termination_flag_1_0 ==> !true
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 34
; [then-branch: 6491 | !(p2_10@802@01) | live]
; [else-branch: 6491 | p2_10@802@01 | live]
(push) ; 35
; [then-branch: 6491 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 35
(push) ; 35
; [else-branch: 6491 | p2_10@802@01]
; [eval] !break2_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
; [then-branch: 6492 | False | dead]
; [else-branch: 6492 | True | live]
(push) ; 35
; [else-branch: 6492 | True]
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_9 && !bypass1_1 ==> true
; [eval] p1_9 && !bypass1_1
(push) ; 34
; [then-branch: 6493 | !(p1_9@689@01) | live]
; [else-branch: 6493 | p1_9@689@01 | live]
(push) ; 35
; [then-branch: 6493 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 35
(push) ; 35
; [else-branch: 6493 | p1_9@689@01]
(assert p1_9@689@01)
; [eval] !bypass1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6494 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 6494 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 6494 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> true
; [eval] p2_9 && !bypass2_1
(push) ; 34
; [then-branch: 6495 | !(p2_9@690@01) | live]
; [else-branch: 6495 | p2_9@690@01 | live]
(push) ; 35
; [then-branch: 6495 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 35
(push) ; 35
; [else-branch: 6495 | p2_9@690@01]
(assert p2_9@690@01)
; [eval] !bypass2_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6496 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 6496 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 6496 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(pop) ; 35
(pop) ; 34
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1
(push) ; 34
; [then-branch: 6497 | !(p1_9@689@01) | live]
; [else-branch: 6497 | p1_9@689@01 | live]
(push) ; 35
; [then-branch: 6497 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 35
(push) ; 35
; [else-branch: 6497 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6498 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 6498 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 6498 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1
(push) ; 35
; [then-branch: 6499 | !(p2_9@690@01) | live]
; [else-branch: 6499 | p2_9@690@01 | live]
(push) ; 36
; [then-branch: 6499 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 36
(push) ; 36
; [else-branch: 6499 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6500 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 6500 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 6500 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1 ==> issubtype(typeof(c_6.Container_value), int())
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 6501 | !(p1_9@689@01) | live]
; [else-branch: 6501 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 6501 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6501 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6502 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 6502 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6502 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] issubtype(typeof(c_6.Container_value), int())
; [eval] typeof(c_6.Container_value)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> issubtype(typeof(c_6_0.Container_valuep), int())
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 6503 | !(p2_9@690@01) | live]
; [else-branch: 6503 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 6503 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6503 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6504 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 6504 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6504 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] issubtype(typeof(c_6_0.Container_valuep), int())
; [eval] typeof(c_6_0.Container_valuep)
; [eval] int()
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
(push) ; 36
(assert (not (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@855@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@855@01) (as int<PyType>  PyType))))
; [eval] p1_9 && !bypass1_1 ==> !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 6505 | !(p1_9@689@01) | live]
; [else-branch: 6505 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 6505 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6505 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6506 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 6506 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6506 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] !idle1_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6507 | True | live]
; [else-branch: 6507 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 6507 | True]
; [eval] _loop_check_before_1 ==> _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1@785@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1@785@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6508 | _loop_check_before_1@785@01 | live]
; [else-branch: 6508 | !(_loop_check_before_1@785@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 6508 | _loop_check_before_1@785@01]
(assert _loop_check_before_1@785@01)
; [eval] _loop_termination_flag_1 || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
(push) ; 42
; [then-branch: 6509 | False | live]
; [else-branch: 6509 | True | live]
(push) ; 43
; [then-branch: 6509 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 6509 | True]
; [eval] perm(MustTerminate(_cthread_159)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_159)) == none
; [eval] perm(MustTerminate(_cthread_159))
(push) ; 44
; [then-branch: 6510 | False | live]
; [else-branch: 6510 | True | live]
(push) ; 45
; [then-branch: 6510 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 6510 | True]
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
(push) ; 46
; [then-branch: 6511 | False | live]
; [else-branch: 6511 | True | live]
(push) ; 47
; [then-branch: 6511 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 6511 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
(push) ; 48
; [then-branch: 6512 | False | live]
; [else-branch: 6512 | True | live]
(push) ; 49
; [then-branch: 6512 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 6512 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
(push) ; 50
; [then-branch: 6513 | False | live]
; [else-branch: 6513 | True | live]
(push) ; 51
; [then-branch: 6513 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 6513 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 6508 | !(_loop_check_before_1@785@01)]
(assert (not _loop_check_before_1@785@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (and
    p1_9@689@01
    (not bypass1_1@756@01)
    (or (not _loop_check_before_1@785@01) _loop_check_before_1@785@01))))
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 6514 | !(p2_9@690@01) | live]
; [else-branch: 6514 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 6514 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6514 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6515 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 6515 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6515 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6516 | True | live]
; [else-branch: 6516 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 6516 | True]
; [eval] _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1_0@786@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1_0@786@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6517 | _loop_check_before_1_0@786@01 | live]
; [else-branch: 6517 | !(_loop_check_before_1_0@786@01) | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 6517 | _loop_check_before_1_0@786@01]
(assert _loop_check_before_1_0@786@01)
; [eval] _loop_termination_flag_1_0 || perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
(push) ; 42
; [then-branch: 6518 | False | live]
; [else-branch: 6518 | True | live]
(push) ; 43
; [then-branch: 6518 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 6518 | True]
; [eval] perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_159_0)) == none
; [eval] perm(MustTerminate_0(_cthread_159_0))
(push) ; 44
; [then-branch: 6519 | False | live]
; [else-branch: 6519 | True | live]
(push) ; 45
; [then-branch: 6519 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 6519 | True]
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false)
(push) ; 46
; [then-branch: 6520 | False | live]
; [else-branch: 6520 | True | live]
(push) ; 47
; [then-branch: 6520 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 6520 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false)
(push) ; 48
; [then-branch: 6521 | False | live]
; [else-branch: 6521 | True | live]
(push) ; 49
; [then-branch: 6521 | False]
(assert false)
(pop) ; 49
(push) ; 49
; [else-branch: 6521 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false)
(push) ; 50
; [then-branch: 6522 | False | live]
; [else-branch: 6522 | True | live]
(push) ; 51
; [then-branch: 6522 | False]
(assert false)
(pop) ; 51
(push) ; 51
; [else-branch: 6522 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 6517 | !(_loop_check_before_1_0@786@01)]
(assert (not _loop_check_before_1_0@786@01))
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (and
    p2_9@690@01
    (not bypass2_1@757@01)
    (or (not _loop_check_before_1_0@786@01) _loop_check_before_1_0@786@01))))
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] p1_9 && !bypass1_1 ==> !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] p1_9 && !bypass1_1
(push) ; 36
; [then-branch: 6523 | !(p1_9@689@01) | live]
; [else-branch: 6523 | p1_9@689@01 | live]
(push) ; 37
; [then-branch: 6523 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6523 | p1_9@689@01]
; [eval] !bypass1_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p1_9@689@01 (not bypass1_1@756@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p1_9@689@01 (not bypass1_1@756@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6524 | p1_9@689@01 && !(bypass1_1@756@01) | live]
; [else-branch: 6524 | !(p1_9@689@01 && !(bypass1_1@756@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6524 | p1_9@689@01 && !(bypass1_1@756@01)]
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] !idle1_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6525 | True | live]
; [else-branch: 6525 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 6525 | True]
; [eval] !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_1
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1@785@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1@785@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6526 | !(_loop_check_before_1@785@01) | live]
; [else-branch: 6526 | _loop_check_before_1@785@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 6526 | !(_loop_check_before_1@785@01)]
(assert (not _loop_check_before_1@785@01))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
(push) ; 42
; [then-branch: 6527 | False | live]
; [else-branch: 6527 | True | live]
(push) ; 43
; [then-branch: 6527 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 6527 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
(push) ; 44
; [then-branch: 6528 | False | live]
; [else-branch: 6528 | True | live]
(push) ; 45
; [then-branch: 6528 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 6528 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
(push) ; 46
; [then-branch: 6529 | False | live]
; [else-branch: 6529 | True | live]
(push) ; 47
; [then-branch: 6529 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 6529 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 6526 | _loop_check_before_1@785@01]
(assert _loop_check_before_1@785@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p1_9@689@01 (not bypass1_1@756@01))
  (and
    p1_9@689@01
    (not bypass1_1@756@01)
    (or _loop_check_before_1@785@01 (not _loop_check_before_1@785@01)))))
(assert (and p1_9@689@01 (not bypass1_1@756@01)))
; [eval] p2_9 && !bypass2_1 ==> !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] p2_9 && !bypass2_1
(push) ; 36
; [then-branch: 6530 | !(p2_9@690@01) | live]
; [else-branch: 6530 | p2_9@690@01 | live]
(push) ; 37
; [then-branch: 6530 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 37
(push) ; 37
; [else-branch: 6530 | p2_9@690@01]
; [eval] !bypass2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(push) ; 37
(set-option :timeout 10)
(assert (not (not (and p2_9@690@01 (not bypass2_1@757@01)))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (and p2_9@690@01 (not bypass2_1@757@01))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6531 | p2_9@690@01 && !(bypass2_1@757@01) | live]
; [else-branch: 6531 | !(p2_9@690@01 && !(bypass2_1@757@01)) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6531 | p2_9@690@01 && !(bypass2_1@757@01)]
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_1
(push) ; 38
(push) ; 39
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6532 | True | live]
; [else-branch: 6532 | False | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 6532 | True]
; [eval] !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_1_0
(push) ; 40
(push) ; 41
(set-option :timeout 10)
(assert (not _loop_check_before_1_0@786@01))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not _loop_check_before_1_0@786@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6533 | !(_loop_check_before_1_0@786@01) | live]
; [else-branch: 6533 | _loop_check_before_1_0@786@01 | live]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 6533 | !(_loop_check_before_1_0@786@01)]
(assert (not _loop_check_before_1_0@786@01))
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false)
(push) ; 42
; [then-branch: 6534 | False | live]
; [else-branch: 6534 | True | live]
(push) ; 43
; [then-branch: 6534 | False]
(assert false)
(pop) ; 43
(push) ; 43
; [else-branch: 6534 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false)
(push) ; 44
; [then-branch: 6535 | False | live]
; [else-branch: 6535 | True | live]
(push) ; 45
; [then-branch: 6535 | False]
(assert false)
(pop) ; 45
(push) ; 45
; [else-branch: 6535 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false)
(push) ; 46
; [then-branch: 6536 | False | live]
; [else-branch: 6536 | True | live]
(push) ; 47
; [then-branch: 6536 | False]
(assert false)
(pop) ; 47
(push) ; 47
; [else-branch: 6536 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(pop) ; 41
(push) ; 41
; [else-branch: 6533 | _loop_check_before_1_0@786@01]
(assert _loop_check_before_1_0@786@01)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))
(pop) ; 39
(pop) ; 38
; Joined path conditions
(assert (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))
(pop) ; 37
(pop) ; 36
; Joined path conditions
(assert (=>
  (and p2_9@690@01 (not bypass2_1@757@01))
  (and
    p2_9@690@01
    (not bypass2_1@757@01)
    (or _loop_check_before_1_0@786@01 (not _loop_check_before_1_0@786@01)))))
(assert (and p2_9@690@01 (not bypass2_1@757@01)))
; [eval] bypass1_1 ==> tmp1_13 == except1_1
(push) ; 36
; [then-branch: 6537 | bypass1_1@756@01 | dead]
; [else-branch: 6537 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6537 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_16 == break1_1
(push) ; 36
; [then-branch: 6538 | bypass1_1@756@01 | dead]
; [else-branch: 6538 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6538 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_11 == _loop_measures_1
(push) ; 36
; [then-branch: 6539 | bypass1_1@756@01 | dead]
; [else-branch: 6539 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6539 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_14 == _err
(push) ; 36
; [then-branch: 6540 | bypass1_1@756@01 | dead]
; [else-branch: 6540 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6540 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_15 == _loop_check_before_1
(push) ; 36
; [then-branch: 6541 | bypass1_1@756@01 | dead]
; [else-branch: 6541 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6541 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass1_1 ==> tmp1_12 == Exception_res_1
(push) ; 36
; [then-branch: 6542 | bypass1_1@756@01 | dead]
; [else-branch: 6542 | !(bypass1_1@756@01) | live]
(push) ; 37
; [else-branch: 6542 | !(bypass1_1@756@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_11 == _loop_measures_1_0
(push) ; 36
; [then-branch: 6543 | bypass2_1@757@01 | dead]
; [else-branch: 6543 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6543 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_15 == _loop_check_before_1_0
(push) ; 36
; [then-branch: 6544 | bypass2_1@757@01 | dead]
; [else-branch: 6544 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6544 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_12 == Exception_res_1_0
(push) ; 36
; [then-branch: 6545 | bypass2_1@757@01 | dead]
; [else-branch: 6545 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6545 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_14 == _err_2
(push) ; 36
; [then-branch: 6546 | bypass2_1@757@01 | dead]
; [else-branch: 6546 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6546 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_13 == except2_1
(push) ; 36
; [then-branch: 6547 | bypass2_1@757@01 | dead]
; [else-branch: 6547 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6547 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
; [eval] bypass2_1 ==> tmp2_16 == break2_1
(push) ; 36
; [then-branch: 6548 | bypass2_1@757@01 | dead]
; [else-branch: 6548 | !(bypass2_1@757@01) | live]
(push) ; 37
; [else-branch: 6548 | !(bypass2_1@757@01)]
(pop) ; 37
(pop) ; 36
; Joined path conditions
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
; [eval] !(p4_5 && (!break2_1 && !except2_1))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 31
; [then-branch: 6549 | !(p4_5@845@01) | live]
; [else-branch: 6549 | p4_5@845@01 | live]
(push) ; 32
; [then-branch: 6549 | !(p4_5@845@01)]
(assert (not p4_5@845@01))
(pop) ; 32
(push) ; 32
; [else-branch: 6549 | p4_5@845@01]
(assert p4_5@845@01)
; [eval] !break2_1
(push) ; 33
; [then-branch: 6550 | break2_1@784@01 | live]
; [else-branch: 6550 | !(break2_1@784@01) | live]
(push) ; 34
; [then-branch: 6550 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 34
(push) ; 34
; [else-branch: 6550 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (and p4_5@845@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6551 | !(p4_5@845@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
; [else-branch: 6551 | p4_5@845@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
(set-option :timeout 0)
(push) ; 31
; [else-branch: 6551 | p4_5@845@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p4_5@845@01 (and (not break2_1@784@01) (not except2_1@778@01))))
(pop) ; 31
(pop) ; 30
(pop) ; 29
; [eval] !(p4_5 && (!break2_1 && !except2_1))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 29
; [then-branch: 6552 | !(p4_5@845@01) | live]
; [else-branch: 6552 | p4_5@845@01 | live]
(push) ; 30
; [then-branch: 6552 | !(p4_5@845@01)]
(assert (not p4_5@845@01))
(pop) ; 30
(push) ; 30
; [else-branch: 6552 | p4_5@845@01]
(assert p4_5@845@01)
; [eval] !break2_1
(push) ; 31
; [then-branch: 6553 | break2_1@784@01 | live]
; [else-branch: 6553 | !(break2_1@784@01) | live]
(push) ; 32
; [then-branch: 6553 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 32
(push) ; 32
; [else-branch: 6553 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (and p4_5@845@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6554 | !(p4_5@845@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
; [else-branch: 6554 | p4_5@845@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 6554 | p4_5@845@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p4_5@845@01 (and (not break2_1@784@01) (not except2_1@778@01))))
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 6407 | p2_11@843@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_11@843@01 (and (not break2_1@784@01) (not except2_1@778@01))))
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [eval] !(p2_10 && (!break2_1 && !except2_1))
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 15
; [then-branch: 6555 | !(p2_10@802@01) | live]
; [else-branch: 6555 | p2_10@802@01 | live]
(push) ; 16
; [then-branch: 6555 | !(p2_10@802@01)]
(assert (not p2_10@802@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6555 | p2_10@802@01]
(assert p2_10@802@01)
; [eval] !break2_1
(push) ; 17
; [then-branch: 6556 | break2_1@784@01 | live]
; [else-branch: 6556 | !(break2_1@784@01) | live]
(push) ; 18
; [then-branch: 6556 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6556 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (and p2_10@802@01 (and (not break2_1@784@01) (not except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6557 | !(p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01)) | dead]
; [else-branch: 6557 | p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01) | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 6557 | p2_10@802@01 && !(break2_1@784@01) && !(except2_1@778@01)]
(assert (and p2_10@802@01 (and (not break2_1@784@01) (not except2_1@778@01))))
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 6216 | p1_10@801@01 && !(break1_1@783@01) && !(except1_1@776@01)]
(assert (and p1_10@801@01 (and (not break1_1@783@01) (not except1_1@776@01))))
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 5225 | !(p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01) || p2_9@690@01 && !(break2_1@784@01) && !(except2_1@778@01) && !(bypass2_1@757@01))]
(assert (not
  (or
    (and
      p1_9@689@01
      (and
        (not break1_1@783@01)
        (and (not except1_1@776@01) (not bypass1_1@756@01))))
    (and
      p2_9@690@01
      (and
        (not break2_1@784@01)
        (and (not except2_1@778@01) (not bypass2_1@757@01)))))))
(pop) ; 13
; [eval] !(p1_9 && (!break1_1 && !except1_1 && (!bypass1_1 && true)) || p2_9 && (!break2_1 && !except2_1 && (!bypass2_1 && true)))
; [eval] p1_9 && (!break1_1 && !except1_1 && (!bypass1_1 && true)) || p2_9 && (!break2_1 && !except2_1 && (!bypass2_1 && true))
; [eval] p1_9 && (!break1_1 && !except1_1 && (!bypass1_1 && true))
(push) ; 13
; [then-branch: 6558 | !(p1_9@689@01) | live]
; [else-branch: 6558 | p1_9@689@01 | live]
(push) ; 14
; [then-branch: 6558 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 14
(push) ; 14
; [else-branch: 6558 | p1_9@689@01]
(assert p1_9@689@01)
; [eval] !break1_1
(push) ; 15
; [then-branch: 6559 | break1_1@783@01 | live]
; [else-branch: 6559 | !(break1_1@783@01) | live]
(push) ; 16
; [then-branch: 6559 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 16
(push) ; 16
; [else-branch: 6559 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
; [eval] !except1_1
(push) ; 17
; [then-branch: 6560 | except1_1@776@01 | live]
; [else-branch: 6560 | !(except1_1@776@01) | live]
(push) ; 18
; [then-branch: 6560 | except1_1@776@01]
(assert except1_1@776@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6560 | !(except1_1@776@01)]
(assert (not except1_1@776@01))
; [eval] !bypass1_1
(push) ; 19
; [then-branch: 6561 | bypass1_1@756@01 | live]
; [else-branch: 6561 | !(bypass1_1@756@01) | live]
(push) ; 20
; [then-branch: 6561 | bypass1_1@756@01]
(assert bypass1_1@756@01)
(pop) ; 20
(push) ; 20
; [else-branch: 6561 | !(bypass1_1@756@01)]
(assert (not bypass1_1@756@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1_1@756@01) bypass1_1@756@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except1_1@776@01)
  (and (not except1_1@776@01) (or (not bypass1_1@756@01) bypass1_1@756@01))))
(assert (or (not except1_1@776@01) except1_1@776@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_1@783@01)
  (and
    (not break1_1@783@01)
    (=>
      (not except1_1@776@01)
      (and (not except1_1@776@01) (or (not bypass1_1@756@01) bypass1_1@756@01)))
    (or (not except1_1@776@01) except1_1@776@01))))
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 6562 | p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01) | live]
; [else-branch: 6562 | !(p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01)) | live]
(push) ; 14
; [then-branch: 6562 | p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01)]
(assert (and
  p1_9@689@01
  (and (not break1_1@783@01) (and (not except1_1@776@01) (not bypass1_1@756@01)))))
(pop) ; 14
(push) ; 14
; [else-branch: 6562 | !(p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01))]
(assert (not
  (and
    p1_9@689@01
    (and
      (not break1_1@783@01)
      (and (not except1_1@776@01) (not bypass1_1@756@01))))))
; [eval] p2_9 && (!break2_1 && !except2_1 && (!bypass2_1 && true))
(push) ; 15
; [then-branch: 6563 | !(p2_9@690@01) | live]
; [else-branch: 6563 | p2_9@690@01 | live]
(push) ; 16
; [then-branch: 6563 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6563 | p2_9@690@01]
(assert p2_9@690@01)
; [eval] !break2_1
(push) ; 17
; [then-branch: 6564 | break2_1@784@01 | live]
; [else-branch: 6564 | !(break2_1@784@01) | live]
(push) ; 18
; [then-branch: 6564 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6564 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
; [eval] !except2_1
(push) ; 19
; [then-branch: 6565 | except2_1@778@01 | live]
; [else-branch: 6565 | !(except2_1@778@01) | live]
(push) ; 20
; [then-branch: 6565 | except2_1@778@01]
(assert except2_1@778@01)
(pop) ; 20
(push) ; 20
; [else-branch: 6565 | !(except2_1@778@01)]
(assert (not except2_1@778@01))
; [eval] !bypass2_1
(push) ; 21
; [then-branch: 6566 | bypass2_1@757@01 | live]
; [else-branch: 6566 | !(bypass2_1@757@01) | live]
(push) ; 22
; [then-branch: 6566 | bypass2_1@757@01]
(assert bypass2_1@757@01)
(pop) ; 22
(push) ; 22
; [else-branch: 6566 | !(bypass2_1@757@01)]
(assert (not bypass2_1@757@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2_1@757@01) bypass2_1@757@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=>
  (not except2_1@778@01)
  (and (not except2_1@778@01) (or (not bypass2_1@757@01) bypass2_1@757@01))))
(assert (or (not except2_1@778@01) except2_1@778@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_1@784@01)
  (and
    (not break2_1@784@01)
    (=>
      (not except2_1@778@01)
      (and (not except2_1@778@01) (or (not bypass2_1@757@01) bypass2_1@757@01)))
    (or (not except2_1@778@01) except2_1@778@01))))
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_9@690@01
  (and
    p2_9@690@01
    (=>
      (not break2_1@784@01)
      (and
        (not break2_1@784@01)
        (=>
          (not except2_1@778@01)
          (and
            (not except2_1@778@01)
            (or (not bypass2_1@757@01) bypass2_1@757@01)))
        (or (not except2_1@778@01) except2_1@778@01)))
    (or (not break2_1@784@01) break2_1@784@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      p1_9@689@01
      (and
        (not break1_1@783@01)
        (and (not except1_1@776@01) (not bypass1_1@756@01)))))
  (and
    (not
      (and
        p1_9@689@01
        (and
          (not break1_1@783@01)
          (and (not except1_1@776@01) (not bypass1_1@756@01)))))
    (=>
      p2_9@690@01
      (and
        p2_9@690@01
        (=>
          (not break2_1@784@01)
          (and
            (not break2_1@784@01)
            (=>
              (not except2_1@778@01)
              (and
                (not except2_1@778@01)
                (or (not bypass2_1@757@01) bypass2_1@757@01)))
            (or (not except2_1@778@01) except2_1@778@01)))
        (or (not break2_1@784@01) break2_1@784@01))))))
(push) ; 13
(set-option :timeout 10)
(assert (not (or
  (and
    p1_9@689@01
    (and
      (not break1_1@783@01)
      (and (not except1_1@776@01) (not bypass1_1@756@01))))
  (and
    p2_9@690@01
    (and
      (not break2_1@784@01)
      (and (not except2_1@778@01) (not bypass2_1@757@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (or
    (and
      p1_9@689@01
      (and
        (not break1_1@783@01)
        (and (not except1_1@776@01) (not bypass1_1@756@01))))
    (and
      p2_9@690@01
      (and
        (not break2_1@784@01)
        (and (not except2_1@778@01) (not bypass2_1@757@01))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6567 | !(p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01) || p2_9@690@01 && !(break2_1@784@01) && !(except2_1@778@01) && !(bypass2_1@757@01)) | live]
; [else-branch: 6567 | p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01) || p2_9@690@01 && !(break2_1@784@01) && !(except2_1@778@01) && !(bypass2_1@757@01) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 6567 | !(p1_9@689@01 && !(break1_1@783@01) && !(except1_1@776@01) && !(bypass1_1@756@01) || p2_9@690@01 && !(break2_1@784@01) && !(except2_1@778@01) && !(bypass2_1@757@01))]
(assert (not
  (or
    (and
      p1_9@689@01
      (and
        (not break1_1@783@01)
        (and (not except1_1@776@01) (not bypass1_1@756@01))))
    (and
      p2_9@690@01
      (and
        (not break2_1@784@01)
        (and (not except2_1@778@01) (not bypass2_1@757@01)))))))
; [eval] !bypass1_1 && (break1_1 || except1_1) || !bypass2_1 && (break2_1 || except2_1)
; [eval] !bypass1_1 && (break1_1 || except1_1)
; [eval] !bypass1_1
(push) ; 14
; [then-branch: 6568 | bypass1_1@756@01 | live]
; [else-branch: 6568 | !(bypass1_1@756@01) | live]
(push) ; 15
; [then-branch: 6568 | bypass1_1@756@01]
(assert bypass1_1@756@01)
(pop) ; 15
(push) ; 15
; [else-branch: 6568 | !(bypass1_1@756@01)]
(assert (not bypass1_1@756@01))
; [eval] break1_1 || except1_1
(push) ; 16
; [then-branch: 6569 | break1_1@783@01 | live]
; [else-branch: 6569 | !(break1_1@783@01) | live]
(push) ; 17
; [then-branch: 6569 | break1_1@783@01]
(assert break1_1@783@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6569 | !(break1_1@783@01)]
(assert (not break1_1@783@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1_1@783@01) break1_1@783@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not bypass1_1@756@01)
  (and (not bypass1_1@756@01) (or (not break1_1@783@01) break1_1@783@01))))
(assert (or (not bypass1_1@756@01) bypass1_1@756@01))
(push) ; 14
; [then-branch: 6570 | !(bypass1_1@756@01) && break1_1@783@01 || except1_1@776@01 | live]
; [else-branch: 6570 | !(!(bypass1_1@756@01) && break1_1@783@01 || except1_1@776@01) | live]
(push) ; 15
; [then-branch: 6570 | !(bypass1_1@756@01) && break1_1@783@01 || except1_1@776@01]
(assert (and (not bypass1_1@756@01) (or break1_1@783@01 except1_1@776@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 6570 | !(!(bypass1_1@756@01) && break1_1@783@01 || except1_1@776@01)]
(assert (not (and (not bypass1_1@756@01) (or break1_1@783@01 except1_1@776@01))))
; [eval] !bypass2_1 && (break2_1 || except2_1)
; [eval] !bypass2_1
(push) ; 16
; [then-branch: 6571 | bypass2_1@757@01 | live]
; [else-branch: 6571 | !(bypass2_1@757@01) | live]
(push) ; 17
; [then-branch: 6571 | bypass2_1@757@01]
(assert bypass2_1@757@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6571 | !(bypass2_1@757@01)]
(assert (not bypass2_1@757@01))
; [eval] break2_1 || except2_1
(push) ; 18
; [then-branch: 6572 | break2_1@784@01 | live]
; [else-branch: 6572 | !(break2_1@784@01) | live]
(push) ; 19
; [then-branch: 6572 | break2_1@784@01]
(assert break2_1@784@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6572 | !(break2_1@784@01)]
(assert (not break2_1@784@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break2_1@784@01) break2_1@784@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not bypass2_1@757@01)
  (and (not bypass2_1@757@01) (or (not break2_1@784@01) break2_1@784@01))))
(assert (or (not bypass2_1@757@01) bypass2_1@757@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (and (not bypass1_1@756@01) (or break1_1@783@01 except1_1@776@01)))
  (and
    (not (and (not bypass1_1@756@01) (or break1_1@783@01 except1_1@776@01)))
    (=>
      (not bypass2_1@757@01)
      (and (not bypass2_1@757@01) (or (not break2_1@784@01) break2_1@784@01)))
    (or (not bypass2_1@757@01) bypass2_1@757@01))))
(assert (or
  (not (and (not bypass1_1@756@01) (or break1_1@783@01 except1_1@776@01)))
  (and (not bypass1_1@756@01) (or break1_1@783@01 except1_1@776@01))))
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (or
    (and (not bypass1_1@756@01) (or break1_1@783@01 except1_1@776@01))
    (and (not bypass2_1@757@01) (or break2_1@784@01 except2_1@778@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (or
  (and (not bypass1_1@756@01) (or break1_1@783@01 except1_1@776@01))
  (and (not bypass2_1@757@01) (or break2_1@784@01 except2_1@778@01)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6573 | !(bypass1_1@756@01) && break1_1@783@01 || except1_1@776@01 || !(bypass2_1@757@01) && break2_1@784@01 || except2_1@778@01 | live]
; [else-branch: 6573 | !(!(bypass1_1@756@01) && break1_1@783@01 || except1_1@776@01 || !(bypass2_1@757@01) && break2_1@784@01 || except2_1@778@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 6573 | !(bypass1_1@756@01) && break1_1@783@01 || except1_1@776@01 || !(bypass2_1@757@01) && break2_1@784@01 || except2_1@778@01]
(assert (or
  (and (not bypass1_1@756@01) (or break1_1@783@01 except1_1@776@01))
  (and (not bypass2_1@757@01) (or break2_1@784@01 except2_1@778@01))))
; [exec]
; var p1_11: Bool
(declare-const p1_11@856@01 Bool)
; [exec]
; var p2_11: Bool
(declare-const p2_11@857@01 Bool)
; [exec]
; var p3_5: Bool
(declare-const p3_5@858@01 Bool)
; [exec]
; var p4_5: Bool
(declare-const p4_5@859@01 Bool)
; [exec]
; var p1_12: Bool
(declare-const p1_12@860@01 Bool)
; [exec]
; var p2_12: Bool
(declare-const p2_12@861@01 Bool)
; [exec]
; var p3_6: Bool
(declare-const p3_6@862@01 Bool)
; [exec]
; var p4_6: Bool
(declare-const p4_6@863@01 Bool)
; [exec]
; var tmp_1: Ref
(declare-const tmp_1@864@01 $Ref)
; [exec]
; var p1_13: Bool
(declare-const p1_13@865@01 Bool)
; [exec]
; var p2_13: Bool
(declare-const p2_13@866@01 Bool)
; [exec]
; var p3_7: Bool
(declare-const p3_7@867@01 Bool)
; [exec]
; var p4_7: Bool
(declare-const p4_7@868@01 Bool)
; [exec]
; break1_1 := oldbreak1_1
; [exec]
; break2_1 := oldbreak2_1
; [exec]
; except1_1 := oldexcept1_1
; [exec]
; except2_1 := oldexcept2_1
; [exec]
; inhale p1_9 && (!break1_1 && !except1_1) ==> true
(declare-const $t@869@01 $Snap)
(assert (= $t@869@01 $Snap.unit))
; [eval] p1_9 && (!break1_1 && !except1_1) ==> true
; [eval] p1_9 && (!break1_1 && !except1_1)
(push) ; 15
; [then-branch: 6574 | !(p1_9@689@01) | live]
; [else-branch: 6574 | p1_9@689@01 | live]
(push) ; 16
; [then-branch: 6574 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6574 | p1_9@689@01]
(assert p1_9@689@01)
; [eval] !break1_1
(push) ; 17
; [then-branch: 6575 | False | live]
; [else-branch: 6575 | True | live]
(push) ; 18
; [then-branch: 6575 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 6575 | True]
; [eval] !except1_1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not p1_9@689@01))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6576 | p1_9@689@01 | live]
; [else-branch: 6576 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 6576 | p1_9@689@01]
(assert p1_9@689@01)
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert p1_9@689@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale p2_9 && (!break1_1 && !except1_1) ==> true
(declare-const $t@870@01 $Snap)
(assert (= $t@870@01 $Snap.unit))
; [eval] p2_9 && (!break1_1 && !except1_1) ==> true
; [eval] p2_9 && (!break1_1 && !except1_1)
(set-option :timeout 0)
(push) ; 15
; [then-branch: 6577 | !(p2_9@690@01) | live]
; [else-branch: 6577 | p2_9@690@01 | live]
(push) ; 16
; [then-branch: 6577 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6577 | p2_9@690@01]
(assert p2_9@690@01)
; [eval] !break1_1
(push) ; 17
; [then-branch: 6578 | False | live]
; [else-branch: 6578 | True | live]
(push) ; 18
; [then-branch: 6578 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 6578 | True]
; [eval] !except1_1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not p2_9@690@01))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6579 | p2_9@690@01 | live]
; [else-branch: 6579 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 6579 | p2_9@690@01]
(assert p2_9@690@01)
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert p2_9@690@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; p1_10 := p1_9 && (!break1_1 && !except1_1 && true)
; [eval] p1_9 && (!break1_1 && !except1_1 && true)
(set-option :timeout 0)
(push) ; 15
; [then-branch: 6580 | !(p1_9@689@01) | live]
; [else-branch: 6580 | p1_9@689@01 | live]
(push) ; 16
; [then-branch: 6580 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6580 | p1_9@689@01]
; [eval] !break1_1
(push) ; 17
; [then-branch: 6581 | False | live]
; [else-branch: 6581 | True | live]
(push) ; 18
; [then-branch: 6581 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 6581 | True]
; [eval] !except1_1
(push) ; 19
; [then-branch: 6582 | False | live]
; [else-branch: 6582 | True | live]
(push) ; 20
; [then-branch: 6582 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 6582 | True]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; p2_10 := p2_9 && (!break2_1 && !except2_1 && true)
; [eval] p2_9 && (!break2_1 && !except2_1 && true)
(push) ; 15
; [then-branch: 6583 | !(p2_9@690@01) | live]
; [else-branch: 6583 | p2_9@690@01 | live]
(push) ; 16
; [then-branch: 6583 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6583 | p2_9@690@01]
; [eval] !break2_1
(push) ; 17
; [then-branch: 6584 | False | live]
; [else-branch: 6584 | True | live]
(push) ; 18
; [then-branch: 6584 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 6584 | True]
; [eval] !except2_1
(push) ; 19
; [then-branch: 6585 | False | live]
; [else-branch: 6585 | True | live]
(push) ; 20
; [then-branch: 6585 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 6585 | True]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; idle1_1 := p1_9 && (!break1_1 && !except1_1 && !true)
; [eval] p1_9 && (!break1_1 && !except1_1 && !true)
(push) ; 15
; [then-branch: 6586 | !(p1_9@689@01) | live]
; [else-branch: 6586 | p1_9@689@01 | live]
(push) ; 16
; [then-branch: 6586 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6586 | p1_9@689@01]
; [eval] !break1_1
(push) ; 17
; [then-branch: 6587 | False | live]
; [else-branch: 6587 | True | live]
(push) ; 18
; [then-branch: 6587 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 6587 | True]
; [eval] !except1_1
(push) ; 19
; [then-branch: 6588 | False | live]
; [else-branch: 6588 | True | live]
(push) ; 20
; [then-branch: 6588 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 6588 | True]
; [eval] !true
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; idle2_1 := p2_9 && (!break2_1 && !except2_1 && !true)
; [eval] p2_9 && (!break2_1 && !except2_1 && !true)
(push) ; 15
; [then-branch: 6589 | !(p2_9@690@01) | live]
; [else-branch: 6589 | p2_9@690@01 | live]
(push) ; 16
; [then-branch: 6589 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6589 | p2_9@690@01]
; [eval] !break2_1
(push) ; 17
; [then-branch: 6590 | False | live]
; [else-branch: 6590 | True | live]
(push) ; 18
; [then-branch: 6590 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 6590 | True]
; [eval] !except2_1
(push) ; 19
; [then-branch: 6591 | False | live]
; [else-branch: 6591 | True | live]
(push) ; 20
; [then-branch: 6591 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 6591 | True]
; [eval] !true
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 15
; [then-branch: 6592 | !(p1_9@689@01) | live]
; [else-branch: 6592 | p1_9@689@01 | live]
(push) ; 16
; [then-branch: 6592 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6592 | p1_9@689@01]
; [eval] !break1_1
(push) ; 17
; [then-branch: 6593 | False | live]
; [else-branch: 6593 | True | live]
(push) ; 18
; [then-branch: 6593 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 6593 | True]
; [eval] !except1_1
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6594 | p1_9@689@01 | live]
; [else-branch: 6594 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 6594 | p1_9@689@01]
; [exec]
; _loop_measures_1 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 16
; [then-branch: 6595 | !(p2_9@690@01) | live]
; [else-branch: 6595 | p2_9@690@01 | live]
(push) ; 17
; [then-branch: 6595 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6595 | p2_9@690@01]
; [eval] !break2_1
(push) ; 18
; [then-branch: 6596 | False | live]
; [else-branch: 6596 | True | live]
(push) ; 19
; [then-branch: 6596 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 6596 | True]
; [eval] !except2_1
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6597 | p2_9@690@01 | live]
; [else-branch: 6597 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 6597 | p2_9@690@01]
; [exec]
; _loop_measures_1_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; p1_11 := p1_10 && (!break1_1 && !except1_1 && bool___unbox__(b_6))
; [eval] p1_10 && (!break1_1 && !except1_1 && bool___unbox__(b_6))
(push) ; 17
; [then-branch: 6598 | !(p1_9@689@01) | live]
; [else-branch: 6598 | p1_9@689@01 | live]
(push) ; 18
; [then-branch: 6598 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 18
(push) ; 18
; [else-branch: 6598 | p1_9@689@01]
; [eval] !break1_1
(push) ; 19
; [then-branch: 6599 | False | live]
; [else-branch: 6599 | True | live]
(push) ; 20
; [then-branch: 6599 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 6599 | True]
; [eval] !except1_1
(push) ; 21
; [then-branch: 6600 | False | live]
; [else-branch: 6600 | True | live]
(push) ; 22
; [then-branch: 6600 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 6600 | True]
; [eval] bool___unbox__(b_6)
(push) ; 23
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@699@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@699@01)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@699@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@699@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_9@689@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1@699@01))))
(declare-const p1_11@871@01 Bool)
(assert (= p1_11@871@01 (and p1_9@689@01 (bool___unbox__ $Snap.unit b_1@699@01))))
; [exec]
; p2_11 := p2_10 && (!break2_1 && !except2_1 && bool___unbox__(b_6_0))
; [eval] p2_10 && (!break2_1 && !except2_1 && bool___unbox__(b_6_0))
(push) ; 17
; [then-branch: 6601 | !(p2_9@690@01) | live]
; [else-branch: 6601 | p2_9@690@01 | live]
(push) ; 18
; [then-branch: 6601 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 18
(push) ; 18
; [else-branch: 6601 | p2_9@690@01]
; [eval] !break2_1
(push) ; 19
; [then-branch: 6602 | False | live]
; [else-branch: 6602 | True | live]
(push) ; 20
; [then-branch: 6602 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 6602 | True]
; [eval] !except2_1
(push) ; 21
; [then-branch: 6603 | False | live]
; [else-branch: 6603 | True | live]
(push) ; 22
; [then-branch: 6603 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 6603 | True]
; [eval] bool___unbox__(b_6_0)
(push) ; 23
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1_0@700@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@700@01)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@700@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@700@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_9@690@01
  (and
    (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit b_1_0@700@01))))
(declare-const p2_11@872@01 Bool)
(assert (= p2_11@872@01 (and p2_9@690@01 (bool___unbox__ $Snap.unit b_1_0@700@01))))
; [exec]
; p3_5 := p1_10 && (!break1_1 && !except1_1 && !bool___unbox__(b_6))
; [eval] p1_10 && (!break1_1 && !except1_1 && !bool___unbox__(b_6))
(push) ; 17
; [then-branch: 6604 | !(p1_9@689@01) | live]
; [else-branch: 6604 | p1_9@689@01 | live]
(push) ; 18
; [then-branch: 6604 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 18
(push) ; 18
; [else-branch: 6604 | p1_9@689@01]
; [eval] !break1_1
(push) ; 19
; [then-branch: 6605 | False | live]
; [else-branch: 6605 | True | live]
(push) ; 20
; [then-branch: 6605 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 6605 | True]
; [eval] !except1_1
(push) ; 21
; [then-branch: 6606 | False | live]
; [else-branch: 6606 | True | live]
(push) ; 22
; [then-branch: 6606 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 6606 | True]
; [eval] !bool___unbox__(b_6)
; [eval] bool___unbox__(b_6)
(push) ; 23
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1@699@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@699@01)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@699@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1@699@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1@699@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(declare-const p3_5@873@01 Bool)
(assert (= p3_5@873@01 (and p1_9@689@01 (not (bool___unbox__ $Snap.unit b_1@699@01)))))
; [exec]
; p4_5 := p2_10 && (!break2_1 && !except2_1 && !bool___unbox__(b_6_0))
; [eval] p2_10 && (!break2_1 && !except2_1 && !bool___unbox__(b_6_0))
(push) ; 17
; [then-branch: 6607 | !(p2_9@690@01) | live]
; [else-branch: 6607 | p2_9@690@01 | live]
(push) ; 18
; [then-branch: 6607 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 18
(push) ; 18
; [else-branch: 6607 | p2_9@690@01]
; [eval] !break2_1
(push) ; 19
; [then-branch: 6608 | False | live]
; [else-branch: 6608 | True | live]
(push) ; 20
; [then-branch: 6608 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 6608 | True]
; [eval] !except2_1
(push) ; 21
; [then-branch: 6609 | False | live]
; [else-branch: 6609 | True | live]
(push) ; 22
; [then-branch: 6609 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 6609 | True]
; [eval] !bool___unbox__(b_6_0)
; [eval] bool___unbox__(b_6_0)
(push) ; 23
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit b_1_0@700@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@700@01)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@700@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> b_1_0@700@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit b_1_0@700@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(declare-const p4_5@874@01 Bool)
(assert (= p4_5@874@01 (and p2_9@690@01 (not (bool___unbox__ $Snap.unit b_1_0@700@01)))))
; [exec]
; p1_12 := p1_11 &&
;   (!break1_1 && !except1_1 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p1_11 && (!break1_1 && !except1_1 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 17
; [then-branch: 6610 | !(p1_11@871@01) | live]
; [else-branch: 6610 | p1_11@871@01 | live]
(push) ; 18
; [then-branch: 6610 | !(p1_11@871@01)]
(assert (not p1_11@871@01))
(pop) ; 18
(push) ; 18
; [else-branch: 6610 | p1_11@871@01]
(assert p1_11@871@01)
; [eval] !break1_1
(push) ; 19
; [then-branch: 6611 | False | live]
; [else-branch: 6611 | True | live]
(push) ; 20
; [then-branch: 6611 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 6611 | True]
; [eval] !except1_1
(push) ; 21
; [then-branch: 6612 | False | live]
; [else-branch: 6612 | True | live]
(push) ; 22
; [then-branch: 6612 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 6612 | True]
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or p1_11@871@01 (not p1_11@871@01)))
; [exec]
; p2_12 := p2_11 &&
;   (!break2_1 && !except2_1 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_11 && (!break2_1 && !except2_1 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 17
; [then-branch: 6613 | !(p2_11@872@01) | live]
; [else-branch: 6613 | p2_11@872@01 | live]
(push) ; 18
; [then-branch: 6613 | !(p2_11@872@01)]
(assert (not p2_11@872@01))
(pop) ; 18
(push) ; 18
; [else-branch: 6613 | p2_11@872@01]
(assert p2_11@872@01)
; [eval] !break2_1
(push) ; 19
; [then-branch: 6614 | False | live]
; [else-branch: 6614 | True | live]
(push) ; 20
; [then-branch: 6614 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 6614 | True]
; [eval] !except2_1
(push) ; 21
; [then-branch: 6615 | False | live]
; [else-branch: 6615 | True | live]
(push) ; 22
; [then-branch: 6615 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 6615 | True]
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or p2_11@872@01 (not p2_11@872@01)))
; [exec]
; p3_6 := p1_11 &&
;   (!break1_1 && !except1_1 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p1_11 && (!break1_1 && !except1_1 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 17
; [then-branch: 6616 | !(p1_11@871@01) | live]
; [else-branch: 6616 | p1_11@871@01 | live]
(push) ; 18
; [then-branch: 6616 | !(p1_11@871@01)]
(assert (not p1_11@871@01))
(pop) ; 18
(push) ; 18
; [else-branch: 6616 | p1_11@871@01]
(assert p1_11@871@01)
; [eval] !break1_1
(push) ; 19
; [then-branch: 6617 | False | live]
; [else-branch: 6617 | True | live]
(push) ; 20
; [then-branch: 6617 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 6617 | True]
; [eval] !except1_1
(push) ; 21
; [then-branch: 6618 | False | live]
; [else-branch: 6618 | True | live]
(push) ; 22
; [then-branch: 6618 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 6618 | True]
; [eval] !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [exec]
; p4_6 := p2_11 &&
;   (!break2_1 && !except2_1 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_11 && (!break2_1 && !except2_1 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 17
; [then-branch: 6619 | !(p2_11@872@01) | live]
; [else-branch: 6619 | p2_11@872@01 | live]
(push) ; 18
; [then-branch: 6619 | !(p2_11@872@01)]
(assert (not p2_11@872@01))
(pop) ; 18
(push) ; 18
; [else-branch: 6619 | p2_11@872@01]
(assert p2_11@872@01)
; [eval] !break2_1
(push) ; 19
; [then-branch: 6620 | False | live]
; [else-branch: 6620 | True | live]
(push) ; 20
; [then-branch: 6620 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 6620 | True]
; [eval] !except2_1
(push) ; 21
; [then-branch: 6621 | False | live]
; [else-branch: 6621 | True | live]
(push) ; 22
; [then-branch: 6621 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 6621 | True]
; [eval] !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [eval] p1_12 && (!break1_1 && !except1_1)
; [then-branch: 6622 | False | dead]
; [else-branch: 6622 | True | live]
(push) ; 17
; [else-branch: 6622 | True]
(pop) ; 17
; [eval] !(p1_12 && (!break1_1 && !except1_1))
; [eval] p1_12 && (!break1_1 && !except1_1)
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6623 | True | live]
; [else-branch: 6623 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 6623 | True]
; [eval] p2_12 && (!break2_1 && !except2_1)
; [then-branch: 6624 | False | dead]
; [else-branch: 6624 | True | live]
(push) ; 18
; [else-branch: 6624 | True]
(pop) ; 18
; [eval] !(p2_12 && (!break2_1 && !except2_1))
; [eval] p2_12 && (!break2_1 && !except2_1)
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6625 | True | live]
; [else-branch: 6625 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 6625 | True]
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 19
; [then-branch: 6626 | !(p1_11@871@01) | live]
; [else-branch: 6626 | p1_11@871@01 | live]
(push) ; 20
; [then-branch: 6626 | !(p1_11@871@01)]
(assert (not p1_11@871@01))
(pop) ; 20
(push) ; 20
; [else-branch: 6626 | p1_11@871@01]
(assert p1_11@871@01)
; [eval] !break1_1
(push) ; 21
; [then-branch: 6627 | False | live]
; [else-branch: 6627 | True | live]
(push) ; 22
; [then-branch: 6627 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 6627 | True]
; [eval] !except1_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_11@871@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not p1_11@871@01))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6628 | p1_11@871@01 | live]
; [else-branch: 6628 | !(p1_11@871@01) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 6628 | p1_11@871@01]
(assert p1_11@871@01)
; [exec]
; c_6.Container_value := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
(declare-const Container_value@875@01 $Ref)
(assert (= Container_value@875@01 (__prim__int___box__ $Snap.unit 7)))
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 20
; [then-branch: 6629 | !(p2_11@872@01) | live]
; [else-branch: 6629 | p2_11@872@01 | live]
(push) ; 21
; [then-branch: 6629 | !(p2_11@872@01)]
(assert (not p2_11@872@01))
(pop) ; 21
(push) ; 21
; [else-branch: 6629 | p2_11@872@01]
(assert p2_11@872@01)
; [eval] !break2_1
(push) ; 22
; [then-branch: 6630 | False | live]
; [else-branch: 6630 | True | live]
(push) ; 23
; [then-branch: 6630 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 6630 | True]
; [eval] !except2_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_11@872@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not p2_11@872@01))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6631 | p2_11@872@01 | live]
; [else-branch: 6631 | !(p2_11@872@01) | live]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 6631 | p2_11@872@01]
(assert p2_11@872@01)
; [exec]
; c_6_0.Container_valuep := __prim__int___box__(7)
; [eval] __prim__int___box__(7)
(push) ; 21
(pop) ; 21
; Joined path conditions
(declare-const Container_valuep@876@01 $Ref)
(assert (= Container_valuep@876@01 (__prim__int___box__ $Snap.unit 7)))
; [exec]
; tmp_1 := new()
(declare-const tmp_1@877@01 $Ref)
(assert (not (= tmp_1@877@01 $Ref.null)))
(assert (not (= tmp_1@877@01 c_1@697@01)))
(assert (not (= tmp_1@877@01 tmp2_14@740@01)))
(assert (not (= tmp_1@877@01 c_1_0@698@01)))
(assert (not (= tmp_1@877@01 tmp1_12@735@01)))
(assert (not (= tmp_1@877@01 tmp1_14@739@01)))
(assert (not (= tmp_1@877@01 _cthread_159_0@692@01)))
(assert (not (= tmp_1@877@01 _err@775@01)))
(assert (not (= tmp_1@877@01 Exception_res_1_0@774@01)))
(assert (not (= tmp_1@877@01 Container_value@875@01)))
(assert (not (= tmp_1@877@01 tmp_1@864@01)))
(assert (not (= tmp_1@877@01 Container_valuep@876@01)))
(assert (not (= tmp_1@877@01 b_1@699@01)))
(assert (not (= tmp_1@877@01 _err_2@777@01)))
(assert (not (= tmp_1@877@01 Exception_res_1@773@01)))
(assert (not (= tmp_1@877@01 tmp2_12@736@01)))
(assert (not (= tmp_1@877@01 b_1_0@700@01)))
(assert (not (= tmp_1@877@01 _cthread_159@691@01)))
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 21
; [then-branch: 6632 | !(p1_11@871@01) | live]
; [else-branch: 6632 | p1_11@871@01 | live]
(push) ; 22
; [then-branch: 6632 | !(p1_11@871@01)]
(assert (not p1_11@871@01))
(pop) ; 22
(push) ; 22
; [else-branch: 6632 | p1_11@871@01]
; [eval] !break1_1
(push) ; 23
; [then-branch: 6633 | False | live]
; [else-branch: 6633 | True | live]
(push) ; 24
; [then-branch: 6633 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 6633 | True]
; [eval] !except1_1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_11@871@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6634 | p1_11@871@01 | live]
; [else-branch: 6634 | !(p1_11@871@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 6634 | p1_11@871@01]
; [exec]
; Exception_res_1 := tmp_1
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 22
; [then-branch: 6635 | !(p2_11@872@01) | live]
; [else-branch: 6635 | p2_11@872@01 | live]
(push) ; 23
; [then-branch: 6635 | !(p2_11@872@01)]
(assert (not p2_11@872@01))
(pop) ; 23
(push) ; 23
; [else-branch: 6635 | p2_11@872@01]
; [eval] !break2_1
(push) ; 24
; [then-branch: 6636 | False | live]
; [else-branch: 6636 | True | live]
(push) ; 25
; [then-branch: 6636 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 6636 | True]
; [eval] !except2_1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p2_11@872@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6637 | p2_11@872@01 | live]
; [else-branch: 6637 | !(p2_11@872@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 6637 | p2_11@872@01]
; [exec]
; Exception_res_1_0 := tmp_1
; [eval] p1_11 && (!break1_1 && !except1_1)
(push) ; 23
; [then-branch: 6638 | !(p1_11@871@01) | live]
; [else-branch: 6638 | p1_11@871@01 | live]
(push) ; 24
; [then-branch: 6638 | !(p1_11@871@01)]
(assert (not p1_11@871@01))
(pop) ; 24
(push) ; 24
; [else-branch: 6638 | p1_11@871@01]
; [eval] !break1_1
(push) ; 25
; [then-branch: 6639 | False | live]
; [else-branch: 6639 | True | live]
(push) ; 26
; [then-branch: 6639 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 6639 | True]
; [eval] !except1_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1_11@871@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6640 | p1_11@871@01 | live]
; [else-branch: 6640 | !(p1_11@871@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 6640 | p1_11@871@01]
; [exec]
; inhale typeof(Exception_res_1) == Exception()
(declare-const $t@878@01 $Snap)
(assert (= $t@878@01 $Snap.unit))
; [eval] typeof(Exception_res_1) == Exception()
; [eval] typeof(Exception_res_1)
; [eval] Exception()
(assert (= (typeof<PyType> tmp_1@877@01) (as Exception<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_11 && (!break2_1 && !except2_1)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 6641 | !(p2_11@872@01) | live]
; [else-branch: 6641 | p2_11@872@01 | live]
(push) ; 25
; [then-branch: 6641 | !(p2_11@872@01)]
(assert (not p2_11@872@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6641 | p2_11@872@01]
; [eval] !break2_1
(push) ; 26
; [then-branch: 6642 | False | live]
; [else-branch: 6642 | True | live]
(push) ; 27
; [then-branch: 6642 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 6642 | True]
; [eval] !except2_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p2_11@872@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6643 | p2_11@872@01 | live]
; [else-branch: 6643 | !(p2_11@872@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 6643 | p2_11@872@01]
; [exec]
; inhale typeof(Exception_res_1_0) == Exception()
(declare-const $t@879@01 $Snap)
(assert (= $t@879@01 $Snap.unit))
; [eval] typeof(Exception_res_1_0) == Exception()
; [eval] typeof(Exception_res_1_0)
; [eval] Exception()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_11 && (!break1_1 && !except1_1)
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6644 | !(p1_11@871@01) | live]
; [else-branch: 6644 | p1_11@871@01 | live]
(push) ; 26
; [then-branch: 6644 | !(p1_11@871@01)]
(assert (not p1_11@871@01))
(pop) ; 26
(push) ; 26
; [else-branch: 6644 | p1_11@871@01]
; [eval] !break1_1
(push) ; 27
; [then-branch: 6645 | False | live]
; [else-branch: 6645 | True | live]
(push) ; 28
; [then-branch: 6645 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 6645 | True]
; [eval] !except1_1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_11@871@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6646 | p1_11@871@01 | live]
; [else-branch: 6646 | !(p1_11@871@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6646 | p1_11@871@01]
; [exec]
; _err := Exception_res_1
; [exec]
; except1_1 := true
; [eval] p2_11 && (!break2_1 && !except2_1)
(push) ; 26
; [then-branch: 6647 | !(p2_11@872@01) | live]
; [else-branch: 6647 | p2_11@872@01 | live]
(push) ; 27
; [then-branch: 6647 | !(p2_11@872@01)]
(assert (not p2_11@872@01))
(pop) ; 27
(push) ; 27
; [else-branch: 6647 | p2_11@872@01]
; [eval] !break2_1
(push) ; 28
; [then-branch: 6648 | False | live]
; [else-branch: 6648 | True | live]
(push) ; 29
; [then-branch: 6648 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 6648 | True]
; [eval] !except2_1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_11@872@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6649 | p2_11@872@01 | live]
; [else-branch: 6649 | !(p2_11@872@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 6649 | p2_11@872@01]
; [exec]
; _err_2 := Exception_res_1_0
; [exec]
; except2_1 := true
; [exec]
; p1_13 := p3_5 &&
;   (!break1_1 && !except1_1 &&
;   perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] p3_5 && (!break1_1 && !except1_1 && perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 6650 | !(p3_5@873@01) | live]
; [else-branch: 6650 | p3_5@873@01 | live]
(push) ; 28
; [then-branch: 6650 | !(p3_5@873@01)]
(assert (not p3_5@873@01))
(pop) ; 28
(push) ; 28
; [else-branch: 6650 | p3_5@873@01]
(assert p3_5@873@01)
; [eval] !break1_1
(push) ; 29
; [then-branch: 6651 | False | live]
; [else-branch: 6651 | True | live]
(push) ; 30
; [then-branch: 6651 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 6651 | True]
; [eval] !except1_1
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or p3_5@873@01 (not p3_5@873@01)))
; [exec]
; p2_13 := p4_5 &&
;   (!break2_1 && !except2_1 &&
;   perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
; [eval] p4_5 && (!break2_1 && !except2_1 && perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none)
(push) ; 27
; [then-branch: 6652 | !(p4_5@874@01) | live]
; [else-branch: 6652 | p4_5@874@01 | live]
(push) ; 28
; [then-branch: 6652 | !(p4_5@874@01)]
(assert (not p4_5@874@01))
(pop) ; 28
(push) ; 28
; [else-branch: 6652 | p4_5@874@01]
(assert p4_5@874@01)
; [eval] !break2_1
(push) ; 29
; [then-branch: 6653 | False | live]
; [else-branch: 6653 | True | live]
(push) ; 30
; [then-branch: 6653 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 6653 | True]
; [eval] !except2_1
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or p4_5@874@01 (not p4_5@874@01)))
; [exec]
; p3_7 := p3_5 &&
;   (!break1_1 && !except1_1 &&
;   !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
; [eval] p3_5 && (!break1_1 && !except1_1 && !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 6654 | !(p3_5@873@01) | live]
; [else-branch: 6654 | p3_5@873@01 | live]
(push) ; 28
; [then-branch: 6654 | !(p3_5@873@01)]
(assert (not p3_5@873@01))
(pop) ; 28
(push) ; 28
; [else-branch: 6654 | p3_5@873@01]
(assert p3_5@873@01)
; [eval] !break1_1
(push) ; 29
; [then-branch: 6655 | False | live]
; [else-branch: 6655 | True | live]
(push) ; 30
; [then-branch: 6655 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 6655 | True]
; [eval] !except1_1
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [exec]
; p4_7 := p4_5 &&
;   (!break2_1 && !except2_1 &&
;   !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
; [eval] p4_5 && (!break2_1 && !except2_1 && !(perm(_MaySet_0(c_6_0, 526803611440346310908232101056638787)) > none))
(push) ; 27
; [then-branch: 6656 | !(p4_5@874@01) | live]
; [else-branch: 6656 | p4_5@874@01 | live]
(push) ; 28
; [then-branch: 6656 | !(p4_5@874@01)]
(assert (not p4_5@874@01))
(pop) ; 28
(push) ; 28
; [else-branch: 6656 | p4_5@874@01]
(assert p4_5@874@01)
; [eval] !break2_1
(push) ; 29
; [then-branch: 6657 | False | live]
; [else-branch: 6657 | True | live]
(push) ; 30
; [then-branch: 6657 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 6657 | True]
; [eval] !except2_1
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [eval] p1_13 && (!break1_1 && !except1_1)
; [then-branch: 6658 | False | dead]
; [else-branch: 6658 | True | live]
(push) ; 27
; [else-branch: 6658 | True]
(pop) ; 27
; [eval] !(p1_13 && (!break1_1 && !except1_1))
; [eval] p1_13 && (!break1_1 && !except1_1)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6659 | True | live]
; [else-branch: 6659 | False | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6659 | True]
; [eval] p2_13 && (!break2_1 && !except2_1)
; [then-branch: 6660 | False | dead]
; [else-branch: 6660 | True | live]
(push) ; 28
; [else-branch: 6660 | True]
(pop) ; 28
; [eval] !(p2_13 && (!break2_1 && !except2_1))
; [eval] p2_13 && (!break2_1 && !except2_1)
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6661 | True | live]
; [else-branch: 6661 | False | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 6661 | True]
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 29
; [then-branch: 6662 | !(p3_5@873@01) | live]
; [else-branch: 6662 | p3_5@873@01 | live]
(push) ; 30
; [then-branch: 6662 | !(p3_5@873@01)]
(assert (not p3_5@873@01))
(pop) ; 30
(push) ; 30
; [else-branch: 6662 | p3_5@873@01]
(assert p3_5@873@01)
; [eval] !break1_1
(push) ; 31
; [then-branch: 6663 | False | live]
; [else-branch: 6663 | True | live]
(push) ; 32
; [then-branch: 6663 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 6663 | True]
; [eval] !except1_1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 6664 | False | dead]
; [else-branch: 6664 | True | live]
(push) ; 29
; [else-branch: 6664 | True]
(pop) ; 29
; [eval] !(p3_5 && (!break1_1 && !except1_1))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 29
; [then-branch: 6665 | !(p3_5@873@01) | live]
; [else-branch: 6665 | p3_5@873@01 | live]
(push) ; 30
; [then-branch: 6665 | !(p3_5@873@01)]
(assert (not p3_5@873@01))
(pop) ; 30
(push) ; 30
; [else-branch: 6665 | p3_5@873@01]
(assert p3_5@873@01)
; [eval] !break1_1
(push) ; 31
; [then-branch: 6666 | False | live]
; [else-branch: 6666 | True | live]
(push) ; 32
; [then-branch: 6666 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 6666 | True]
; [eval] !except1_1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6667 | True | live]
; [else-branch: 6667 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6667 | True]
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 30
; [then-branch: 6668 | !(p4_5@874@01) | live]
; [else-branch: 6668 | p4_5@874@01 | live]
(push) ; 31
; [then-branch: 6668 | !(p4_5@874@01)]
(assert (not p4_5@874@01))
(pop) ; 31
(push) ; 31
; [else-branch: 6668 | p4_5@874@01]
(assert p4_5@874@01)
; [eval] !break2_1
(push) ; 32
; [then-branch: 6669 | False | live]
; [else-branch: 6669 | True | live]
(push) ; 33
; [then-branch: 6669 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 6669 | True]
; [eval] !except2_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 6670 | False | dead]
; [else-branch: 6670 | True | live]
(push) ; 30
; [else-branch: 6670 | True]
(pop) ; 30
; [eval] !(p4_5 && (!break2_1 && !except2_1))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 30
; [then-branch: 6671 | !(p4_5@874@01) | live]
; [else-branch: 6671 | p4_5@874@01 | live]
(push) ; 31
; [then-branch: 6671 | !(p4_5@874@01)]
(assert (not p4_5@874@01))
(pop) ; 31
(push) ; 31
; [else-branch: 6671 | p4_5@874@01]
(assert p4_5@874@01)
; [eval] !break2_1
(push) ; 32
; [then-branch: 6672 | False | live]
; [else-branch: 6672 | True | live]
(push) ; 33
; [then-branch: 6672 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 6672 | True]
; [eval] !except2_1
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6673 | True | live]
; [else-branch: 6673 | False | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 6673 | True]
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 31
; [then-branch: 6674 | !(p3_5@873@01) | live]
; [else-branch: 6674 | p3_5@873@01 | live]
(push) ; 32
; [then-branch: 6674 | !(p3_5@873@01)]
(assert (not p3_5@873@01))
(pop) ; 32
(push) ; 32
; [else-branch: 6674 | p3_5@873@01]
(assert p3_5@873@01)
; [eval] !break1_1
(push) ; 33
; [then-branch: 6675 | False | live]
; [else-branch: 6675 | True | live]
(push) ; 34
; [then-branch: 6675 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 6675 | True]
; [eval] !except1_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 6676 | False | dead]
; [else-branch: 6676 | True | live]
(push) ; 31
; [else-branch: 6676 | True]
(pop) ; 31
; [eval] !(p3_5 && (!break1_1 && !except1_1))
; [eval] p3_5 && (!break1_1 && !except1_1)
(push) ; 31
; [then-branch: 6677 | !(p3_5@873@01) | live]
; [else-branch: 6677 | p3_5@873@01 | live]
(push) ; 32
; [then-branch: 6677 | !(p3_5@873@01)]
(assert (not p3_5@873@01))
(pop) ; 32
(push) ; 32
; [else-branch: 6677 | p3_5@873@01]
(assert p3_5@873@01)
; [eval] !break1_1
(push) ; 33
; [then-branch: 6678 | False | live]
; [else-branch: 6678 | True | live]
(push) ; 34
; [then-branch: 6678 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 6678 | True]
; [eval] !except1_1
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6679 | True | live]
; [else-branch: 6679 | False | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 6679 | True]
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 32
; [then-branch: 6680 | !(p4_5@874@01) | live]
; [else-branch: 6680 | p4_5@874@01 | live]
(push) ; 33
; [then-branch: 6680 | !(p4_5@874@01)]
(assert (not p4_5@874@01))
(pop) ; 33
(push) ; 33
; [else-branch: 6680 | p4_5@874@01]
(assert p4_5@874@01)
; [eval] !break2_1
(push) ; 34
; [then-branch: 6681 | False | live]
; [else-branch: 6681 | True | live]
(push) ; 35
; [then-branch: 6681 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 6681 | True]
; [eval] !except2_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 6682 | False | dead]
; [else-branch: 6682 | True | live]
(push) ; 32
; [else-branch: 6682 | True]
(pop) ; 32
; [eval] !(p4_5 && (!break2_1 && !except2_1))
; [eval] p4_5 && (!break2_1 && !except2_1)
(push) ; 32
; [then-branch: 6683 | !(p4_5@874@01) | live]
; [else-branch: 6683 | p4_5@874@01 | live]
(push) ; 33
; [then-branch: 6683 | !(p4_5@874@01)]
(assert (not p4_5@874@01))
(pop) ; 33
(push) ; 33
; [else-branch: 6683 | p4_5@874@01]
(assert p4_5@874@01)
; [eval] !break2_1
(push) ; 34
; [then-branch: 6684 | False | live]
; [else-branch: 6684 | True | live]
(push) ; 35
; [then-branch: 6684 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 6684 | True]
; [eval] !except2_1
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6685 | True | live]
; [else-branch: 6685 | False | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 6685 | True]
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 33
; [then-branch: 6686 | !(p1_9@689@01) | live]
; [else-branch: 6686 | p1_9@689@01 | live]
(push) ; 34
; [then-branch: 6686 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 34
(push) ; 34
; [else-branch: 6686 | p1_9@689@01]
; [eval] !break1_1
(push) ; 35
; [then-branch: 6687 | False | live]
; [else-branch: 6687 | True | live]
(push) ; 36
; [then-branch: 6687 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 6687 | True]
; [eval] !except1_1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 6688 | False | dead]
; [else-branch: 6688 | True | live]
(push) ; 33
; [else-branch: 6688 | True]
(pop) ; 33
; [eval] !(p1_10 && (!break1_1 && !except1_1))
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 33
; [then-branch: 6689 | !(p1_9@689@01) | live]
; [else-branch: 6689 | p1_9@689@01 | live]
(push) ; 34
; [then-branch: 6689 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 34
(push) ; 34
; [else-branch: 6689 | p1_9@689@01]
; [eval] !break1_1
(push) ; 35
; [then-branch: 6690 | False | live]
; [else-branch: 6690 | True | live]
(push) ; 36
; [then-branch: 6690 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 6690 | True]
; [eval] !except1_1
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6691 | True | live]
; [else-branch: 6691 | False | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 6691 | True]
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 34
; [then-branch: 6692 | !(p2_9@690@01) | live]
; [else-branch: 6692 | p2_9@690@01 | live]
(push) ; 35
; [then-branch: 6692 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 35
(push) ; 35
; [else-branch: 6692 | p2_9@690@01]
; [eval] !break2_1
(push) ; 36
; [then-branch: 6693 | False | live]
; [else-branch: 6693 | True | live]
(push) ; 37
; [then-branch: 6693 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 6693 | True]
; [eval] !except2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
; [then-branch: 6694 | False | dead]
; [else-branch: 6694 | True | live]
(push) ; 34
; [else-branch: 6694 | True]
(pop) ; 34
; [eval] !(p2_10 && (!break2_1 && !except2_1))
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 34
; [then-branch: 6695 | !(p2_9@690@01) | live]
; [else-branch: 6695 | p2_9@690@01 | live]
(push) ; 35
; [then-branch: 6695 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 35
(push) ; 35
; [else-branch: 6695 | p2_9@690@01]
; [eval] !break2_1
(push) ; 36
; [then-branch: 6696 | False | live]
; [else-branch: 6696 | True | live]
(push) ; 37
; [then-branch: 6696 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 6696 | True]
; [eval] !except2_1
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6697 | True | live]
; [else-branch: 6697 | False | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 6697 | True]
; [exec]
; assert (p1_10 && (!break1_1 && !except1_1) ==>
;   _loop_termination_flag_1 ==> !true) &&
;   (p2_10 && (!break2_1 && !except2_1) ==>
;   _loop_termination_flag_1_0 ==> !true)
; [eval] p1_10 && (!break1_1 && !except1_1) ==> _loop_termination_flag_1 ==> !true
; [eval] p1_10 && (!break1_1 && !except1_1)
(push) ; 35
; [then-branch: 6698 | !(p1_9@689@01) | live]
; [else-branch: 6698 | p1_9@689@01 | live]
(push) ; 36
; [then-branch: 6698 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 36
(push) ; 36
; [else-branch: 6698 | p1_9@689@01]
; [eval] !break1_1
(push) ; 37
; [then-branch: 6699 | False | live]
; [else-branch: 6699 | True | live]
(push) ; 38
; [then-branch: 6699 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 6699 | True]
; [eval] !except1_1
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
; [then-branch: 6700 | False | dead]
; [else-branch: 6700 | True | live]
(push) ; 36
; [else-branch: 6700 | True]
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p2_10 && (!break2_1 && !except2_1) ==> _loop_termination_flag_1_0 ==> !true
; [eval] p2_10 && (!break2_1 && !except2_1)
(push) ; 35
; [then-branch: 6701 | !(p2_9@690@01) | live]
; [else-branch: 6701 | p2_9@690@01 | live]
(push) ; 36
; [then-branch: 6701 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 36
(push) ; 36
; [else-branch: 6701 | p2_9@690@01]
; [eval] !break2_1
(push) ; 37
; [then-branch: 6702 | False | live]
; [else-branch: 6702 | True | live]
(push) ; 38
; [then-branch: 6702 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 6702 | True]
; [eval] !except2_1
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
; [then-branch: 6703 | False | dead]
; [else-branch: 6703 | True | live]
(push) ; 36
; [else-branch: 6703 | True]
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [exec]
; inhale !p1_10 || !(!break1_1 && !except1_1)
(declare-const $t@880@01 $Snap)
(assert (= $t@880@01 $Snap.unit))
; [eval] !p1_10 || !(!break1_1 && !except1_1)
; [eval] !p1_10
(push) ; 35
; [then-branch: 6704 | !(p1_9@689@01) | live]
; [else-branch: 6704 | p1_9@689@01 | live]
(push) ; 36
; [then-branch: 6704 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 36
(push) ; 36
; [else-branch: 6704 | p1_9@689@01]
; [eval] !(!break1_1 && !except1_1)
; [eval] !break1_1 && !except1_1
; [eval] !break1_1
(push) ; 37
; [then-branch: 6705 | False | live]
; [else-branch: 6705 | True | live]
(push) ; 38
; [then-branch: 6705 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 6705 | True]
; [eval] !except1_1
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !p2_10 || !(!break2_1 && !except2_1)
(declare-const $t@881@01 $Snap)
(assert (= $t@881@01 $Snap.unit))
; [eval] !p2_10 || !(!break2_1 && !except2_1)
; [eval] !p2_10
(set-option :timeout 0)
(push) ; 35
; [then-branch: 6706 | !(p2_9@690@01) | live]
; [else-branch: 6706 | p2_9@690@01 | live]
(push) ; 36
; [then-branch: 6706 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 36
(push) ; 36
; [else-branch: 6706 | p2_9@690@01]
; [eval] !(!break2_1 && !except2_1)
; [eval] !break2_1 && !except2_1
; [eval] !break2_1
(push) ; 37
; [then-branch: 6707 | False | live]
; [else-branch: 6707 | True | live]
(push) ; 38
; [then-branch: 6707 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 6707 | True]
; [eval] !except2_1
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] !bypass1_1
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not bypass1_1@756@01))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (not bypass1_1@756@01)))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6708 | !(bypass1_1@756@01) | live]
; [else-branch: 6708 | bypass1_1@756@01 | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 6708 | !(bypass1_1@756@01)]
(assert (not bypass1_1@756@01))
; [exec]
; break1_1 := false
; [eval] !bypass2_1
(push) ; 36
(set-option :timeout 10)
(assert (not bypass2_1@757@01))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (not bypass2_1@757@01)))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6709 | !(bypass2_1@757@01) | live]
; [else-branch: 6709 | bypass2_1@757@01 | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 6709 | !(bypass2_1@757@01)]
(assert (not bypass2_1@757@01))
; [exec]
; break2_1 := false
; [eval] p1_9 && (!break1_1 && !except1_1)
(push) ; 37
; [then-branch: 6710 | !(p1_9@689@01) | live]
; [else-branch: 6710 | p1_9@689@01 | live]
(push) ; 38
; [then-branch: 6710 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 38
(push) ; 38
; [else-branch: 6710 | p1_9@689@01]
; [eval] !break1_1
(push) ; 39
; [then-branch: 6711 | False | live]
; [else-branch: 6711 | True | live]
(push) ; 40
; [then-branch: 6711 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 6711 | True]
; [eval] !except1_1
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
; [then-branch: 6712 | False | dead]
; [else-branch: 6712 | True | live]
(push) ; 37
; [else-branch: 6712 | True]
(pop) ; 37
; [eval] !(p1_9 && (!break1_1 && !except1_1))
; [eval] p1_9 && (!break1_1 && !except1_1)
(push) ; 37
; [then-branch: 6713 | !(p1_9@689@01) | live]
; [else-branch: 6713 | p1_9@689@01 | live]
(push) ; 38
; [then-branch: 6713 | !(p1_9@689@01)]
(assert (not p1_9@689@01))
(pop) ; 38
(push) ; 38
; [else-branch: 6713 | p1_9@689@01]
; [eval] !break1_1
(push) ; 39
; [then-branch: 6714 | False | live]
; [else-branch: 6714 | True | live]
(push) ; 40
; [then-branch: 6714 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 6714 | True]
; [eval] !except1_1
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6715 | True | live]
; [else-branch: 6715 | False | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 6715 | True]
; [eval] p2_9 && (!break2_1 && !except2_1)
(push) ; 38
; [then-branch: 6716 | !(p2_9@690@01) | live]
; [else-branch: 6716 | p2_9@690@01 | live]
(push) ; 39
; [then-branch: 6716 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 39
(push) ; 39
; [else-branch: 6716 | p2_9@690@01]
; [eval] !break2_1
(push) ; 40
; [then-branch: 6717 | False | live]
; [else-branch: 6717 | True | live]
(push) ; 41
; [then-branch: 6717 | False]
(assert false)
(pop) ; 41
(push) ; 41
; [else-branch: 6717 | True]
; [eval] !except2_1
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
; [then-branch: 6718 | False | dead]
; [else-branch: 6718 | True | live]
(push) ; 38
; [else-branch: 6718 | True]
(pop) ; 38
; [eval] !(p2_9 && (!break2_1 && !except2_1))
; [eval] p2_9 && (!break2_1 && !except2_1)
(push) ; 38
; [then-branch: 6719 | !(p2_9@690@01) | live]
; [else-branch: 6719 | p2_9@690@01 | live]
(push) ; 39
; [then-branch: 6719 | !(p2_9@690@01)]
(assert (not p2_9@690@01))
(pop) ; 39
(push) ; 39
; [else-branch: 6719 | p2_9@690@01]
; [eval] !break2_1
(push) ; 40
; [then-branch: 6720 | False | live]
; [else-branch: 6720 | True | live]
(push) ; 41
; [then-branch: 6720 | False]
(assert false)
(pop) ; 41
(push) ; 41
; [else-branch: 6720 | True]
; [eval] !except2_1
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6721 | True | live]
; [else-branch: 6721 | False | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 6721 | True]
; [eval] p1_9 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6722 | p1_9@689@01 | live]
; [else-branch: 6722 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 6722 | p1_9@689@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_9 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6723 | p2_9@690@01 | live]
; [else-branch: 6723 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 6723 | p2_9@690@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6724 | p1_9@689@01 | live]
; [else-branch: 6724 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 6724 | p1_9@689@01]
; [eval] _err == null
; [then-branch: 6725 | tmp_1@877@01 == Null | dead]
; [else-branch: 6725 | tmp_1@877@01 != Null | live]
(push) ; 40
; [else-branch: 6725 | tmp_1@877@01 != Null]
(push) ; 41
(set-option :timeout 10)
(assert (not (not p2_9@690@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6726 | p2_9@690@01 | live]
; [else-branch: 6726 | !(p2_9@690@01) | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 6726 | p2_9@690@01]
; [eval] _err_2 == null
; [then-branch: 6727 | tmp_1@877@01 == Null | dead]
; [else-branch: 6727 | tmp_1@877@01 != Null | live]
(push) ; 42
; [else-branch: 6727 | tmp_1@877@01 != Null]
(push) ; 43
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6728 | p1_9@689@01 | live]
; [else-branch: 6728 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 6728 | p1_9@689@01]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 44
; [then-branch: 6729 | tmp_1@877@01 == Null | live]
; [else-branch: 6729 | tmp_1@877@01 != Null | live]
(push) ; 45
; [then-branch: 6729 | tmp_1@877@01 == Null]
(assert (= tmp_1@877@01 $Ref.null))
(pop) ; 45
(push) ; 45
; [else-branch: 6729 | tmp_1@877@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(assert (or (not (= tmp_1@877@01 $Ref.null)) (= tmp_1@877@01 $Ref.null)))
(push) ; 44
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= tmp_1@877@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> tmp_1@877@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (and
  (not (= tmp_1@877@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_1@877@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6730 | tmp_1@877@01 != Null && issubtype[Bool](typeof[PyType](tmp_1@877@01), Exception[PyType]) | live]
; [else-branch: 6730 | !(tmp_1@877@01 != Null && issubtype[Bool](typeof[PyType](tmp_1@877@01), Exception[PyType])) | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 6730 | tmp_1@877@01 != Null && issubtype[Bool](typeof[PyType](tmp_1@877@01), Exception[PyType])]
(assert (and
  (not (= tmp_1@877@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_1@877@01) (as Exception<PyType>  PyType))))
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(push) ; 45
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@875@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@875@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(push) ; 45
(assert (__prim__int___box__%precondition $Snap.unit 9))
(pop) ; 45
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 9))
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9)))
(pop) ; 45
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9))))
(push) ; 45
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 45
; Joined path conditions
(push) ; 45
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 45
; Joined path conditions
(push) ; 45
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 45
; Joined path conditions
(push) ; 45
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(pop) ; 44
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(set-option :timeout 0)
(push) ; 44
; [then-branch: 6731 | tmp_1@877@01 == Null | live]
; [else-branch: 6731 | tmp_1@877@01 != Null | live]
(push) ; 45
; [then-branch: 6731 | tmp_1@877@01 == Null]
(assert (= tmp_1@877@01 $Ref.null))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 45
(set-option :timeout 0)
(push) ; 45
; [else-branch: 6731 | tmp_1@877@01 != Null]
(assert (not (= tmp_1@877@01 $Ref.null)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= tmp_1@877@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> tmp_1@877@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (and
  (not (= tmp_1@877@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_1@877@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6732 | tmp_1@877@01 != Null && issubtype[Bool](typeof[PyType](tmp_1@877@01), Exception[PyType]) | live]
; [else-branch: 6732 | !(tmp_1@877@01 != Null && issubtype[Bool](typeof[PyType](tmp_1@877@01), Exception[PyType])) | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 6732 | tmp_1@877@01 != Null && issubtype[Bool](typeof[PyType](tmp_1@877@01), Exception[PyType])]
(assert (and
  (not (= tmp_1@877@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_1@877@01) (as Exception<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(set-option :timeout 0)
(push) ; 45
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@875@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@875@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(push) ; 45
(assert (__prim__int___box__%precondition $Snap.unit 9))
(pop) ; 45
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 9))
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9)))
(pop) ; 45
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9))))
(push) ; 45
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 45
; Joined path conditions
(push) ; 45
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 45
; Joined path conditions
(push) ; 45
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 45
; Joined path conditions
(push) ; 45
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(pop) ; 44
(pop) ; 43
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not p1_9@689@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6733 | p1_9@689@01 | live]
; [else-branch: 6733 | !(p1_9@689@01) | dead]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 6733 | p1_9@689@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(set-option :timeout 0)
(push) ; 44
; [then-branch: 6734 | tmp_1@877@01 == Null | live]
; [else-branch: 6734 | tmp_1@877@01 != Null | live]
(push) ; 45
; [then-branch: 6734 | tmp_1@877@01 == Null]
(assert (= tmp_1@877@01 $Ref.null))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 45
(set-option :timeout 0)
(push) ; 45
; [else-branch: 6734 | tmp_1@877@01 != Null]
(assert (not (= tmp_1@877@01 $Ref.null)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(assert (or (not (= tmp_1@877@01 $Ref.null)) (= tmp_1@877@01 $Ref.null)))
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= tmp_1@877@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> tmp_1@877@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (and
  (not (= tmp_1@877@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_1@877@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6735 | tmp_1@877@01 != Null && issubtype[Bool](typeof[PyType](tmp_1@877@01), Exception[PyType]) | live]
; [else-branch: 6735 | !(tmp_1@877@01 != Null && issubtype[Bool](typeof[PyType](tmp_1@877@01), Exception[PyType])) | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 6735 | tmp_1@877@01 != Null && issubtype[Bool](typeof[PyType](tmp_1@877@01), Exception[PyType])]
(assert (and
  (not (= tmp_1@877@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_1@877@01) (as Exception<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(set-option :timeout 0)
(push) ; 45
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@875@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@875@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(push) ; 45
(assert (__prim__int___box__%precondition $Snap.unit 9))
(pop) ; 45
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 9))
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9)))
(pop) ; 45
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9))))
(push) ; 45
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 45
; Joined path conditions
(push) ; 45
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 45
; Joined path conditions
(push) ; 45
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 45
; Joined path conditions
(push) ; 45
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(pop) ; 44
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(set-option :timeout 0)
(push) ; 44
; [then-branch: 6736 | tmp_1@877@01 == Null | live]
; [else-branch: 6736 | tmp_1@877@01 != Null | live]
(push) ; 45
; [then-branch: 6736 | tmp_1@877@01 == Null]
(assert (= tmp_1@877@01 $Ref.null))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 45
(set-option :timeout 0)
(push) ; 45
; [else-branch: 6736 | tmp_1@877@01 != Null]
(assert (not (= tmp_1@877@01 $Ref.null)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= tmp_1@877@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> tmp_1@877@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (and
  (not (= tmp_1@877@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_1@877@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6737 | tmp_1@877@01 != Null && issubtype[Bool](typeof[PyType](tmp_1@877@01), Exception[PyType]) | live]
; [else-branch: 6737 | !(tmp_1@877@01 != Null && issubtype[Bool](typeof[PyType](tmp_1@877@01), Exception[PyType])) | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 6737 | tmp_1@877@01 != Null && issubtype[Bool](typeof[PyType](tmp_1@877@01), Exception[PyType])]
(assert (and
  (not (= tmp_1@877@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> tmp_1@877@01) (as Exception<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(set-option :timeout 0)
(push) ; 45
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@875@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@875@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(push) ; 45
(assert (__prim__int___box__%precondition $Snap.unit 9))
(pop) ; 45
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 9))
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 46
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9)))
(pop) ; 45
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9))))
(push) ; 45
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 45
; Joined path conditions
(push) ; 45
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 45
; Joined path conditions
(push) ; 45
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(9))
; [eval] __prim__int___box__(9)
(set-option :timeout 0)
(push) ; 45
(pop) ; 45
; Joined path conditions
(push) ; 45
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 45
; Joined path conditions
(push) ; 45
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@875@01 (__prim__int___box__ $Snap.unit 9))))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(pop) ; 44
(pop) ; 43
(pop) ; 42
(pop) ; 41
(pop) ; 40
(pop) ; 39
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- break_out ----------
(declare-const p1_14@882@01 Bool)
(declare-const p2_14@883@01 Bool)
(declare-const _cthread_160@884@01 $Ref)
(declare-const _cthread_160_0@885@01 $Ref)
(declare-const _caller_measures_160@886@01 Seq<Measure$>)
(declare-const _caller_measures_160_0@887@01 Seq<Measure$>)
(declare-const _residue_160@888@01 $Perm)
(declare-const _residue_160_0@889@01 $Perm)
(declare-const c_2@890@01 $Ref)
(declare-const c_2_0@891@01 $Ref)
(declare-const b_2@892@01 $Ref)
(declare-const b_2_0@893@01 $Ref)
(declare-const _current_wait_level_160@894@01 $Perm)
(declare-const _current_wait_level_160_0@895@01 $Perm)
(declare-const _res@896@01 $Ref)
(declare-const _res_0@897@01 $Ref)
(declare-const p1_14@898@01 Bool)
(declare-const p2_14@899@01 Bool)
(declare-const _cthread_160@900@01 $Ref)
(declare-const _cthread_160_0@901@01 $Ref)
(declare-const _caller_measures_160@902@01 Seq<Measure$>)
(declare-const _caller_measures_160_0@903@01 Seq<Measure$>)
(declare-const _residue_160@904@01 $Perm)
(declare-const _residue_160_0@905@01 $Perm)
(declare-const c_2@906@01 $Ref)
(declare-const c_2_0@907@01 $Ref)
(declare-const b_2@908@01 $Ref)
(declare-const b_2_0@909@01 $Ref)
(declare-const _current_wait_level_160@910@01 $Perm)
(declare-const _current_wait_level_160_0@911@01 $Perm)
(declare-const _res@912@01 $Ref)
(declare-const _res_0@913@01 $Ref)
(push) ; 1
(declare-const $t@914@01 $Snap)
(assert (= $t@914@01 ($Snap.combine ($Snap.first $t@914@01) ($Snap.second $t@914@01))))
(assert (= ($Snap.first $t@914@01) $Snap.unit))
; [eval] p1_14 ==> _cthread_160 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_14@898@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6738 | p1_14@898@01 | live]
; [else-branch: 6738 | !(p1_14@898@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 6738 | p1_14@898@01]
(assert p1_14@898@01)
; [eval] _cthread_160 != null
(pop) ; 3
(push) ; 3
; [else-branch: 6738 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_14@898@01) p1_14@898@01))
(assert (=> p1_14@898@01 (not (= _cthread_160@900@01 $Ref.null))))
(assert (=
  ($Snap.second $t@914@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@914@01))
    ($Snap.second ($Snap.second $t@914@01)))))
(assert (= ($Snap.first ($Snap.second $t@914@01)) $Snap.unit))
; [eval] p2_14 ==> _cthread_160_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_14@899@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6739 | p2_14@899@01 | live]
; [else-branch: 6739 | !(p2_14@899@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 6739 | p2_14@899@01]
(assert p2_14@899@01)
; [eval] _cthread_160_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 6739 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_14@899@01) p2_14@899@01))
(assert (=> p2_14@899@01 (not (= _cthread_160_0@901@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@914@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@914@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@914@01))) $Snap.unit))
; [eval] p1_14 ==> issubtype(typeof(_cthread_160), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_14@898@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6740 | p1_14@898@01 | live]
; [else-branch: 6740 | !(p1_14@898@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 6740 | p1_14@898@01]
(assert p1_14@898@01)
; [eval] issubtype(typeof(_cthread_160), Thread_0())
; [eval] typeof(_cthread_160)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 6740 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_14@898@01
  (issubtype<Bool> (typeof<PyType> _cthread_160@900@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@914@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@914@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@914@01))))
  $Snap.unit))
; [eval] p2_14 ==> issubtype(typeof(_cthread_160_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_14@899@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6741 | p2_14@899@01 | live]
; [else-branch: 6741 | !(p2_14@899@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 6741 | p2_14@899@01]
(assert p2_14@899@01)
; [eval] issubtype(typeof(_cthread_160_0), Thread_0())
; [eval] typeof(_cthread_160_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 6741 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_14@899@01
  (issubtype<Bool> (typeof<PyType> _cthread_160_0@901@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))
  $Snap.unit))
; [eval] p1_14 ==> issubtype(typeof(c_2), Container())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_14@898@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6742 | p1_14@898@01 | live]
; [else-branch: 6742 | !(p1_14@898@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 6742 | p1_14@898@01]
(assert p1_14@898@01)
; [eval] issubtype(typeof(c_2), Container())
; [eval] typeof(c_2)
; [eval] Container()
(pop) ; 3
(push) ; 3
; [else-branch: 6742 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_14@898@01
  (issubtype<Bool> (typeof<PyType> c_2@906@01) (as Container<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))
  $Snap.unit))
; [eval] p2_14 ==> issubtype(typeof(c_2_0), Container())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_14@899@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6743 | p2_14@899@01 | live]
; [else-branch: 6743 | !(p2_14@899@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 6743 | p2_14@899@01]
(assert p2_14@899@01)
; [eval] issubtype(typeof(c_2_0), Container())
; [eval] typeof(c_2_0)
; [eval] Container()
(pop) ; 3
(push) ; 3
; [else-branch: 6743 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_14@899@01
  (issubtype<Bool> (typeof<PyType> c_2_0@907@01) (as Container<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))
  $Snap.unit))
; [eval] p1_14 ==> issubtype(typeof(b_2), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_14@898@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6744 | p1_14@898@01 | live]
; [else-branch: 6744 | !(p1_14@898@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 6744 | p1_14@898@01]
(assert p1_14@898@01)
; [eval] issubtype(typeof(b_2), bool())
; [eval] typeof(b_2)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 6744 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_14@898@01
  (issubtype<Bool> (typeof<PyType> b_2@908@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))
  $Snap.unit))
; [eval] p2_14 ==> issubtype(typeof(b_2_0), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_14@899@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6745 | p2_14@899@01 | live]
; [else-branch: 6745 | !(p2_14@899@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 6745 | p2_14@899@01]
(assert p2_14@899@01)
; [eval] issubtype(typeof(b_2_0), bool())
; [eval] typeof(b_2_0)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 6745 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_14@899@01
  (issubtype<Bool> (typeof<PyType> b_2_0@909@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))))))
(push) ; 2
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not p1_14@898@01))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6746 | p1_14@898@01 | live]
; [else-branch: 6746 | !(p1_14@898@01) | live]
(set-option :timeout 0)
(push) ; 2
; [then-branch: 6746 | p1_14@898@01]
(assert p1_14@898@01)
(assert (not (= c_2@906@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_14@899@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6747 | p2_14@899@01 | live]
; [else-branch: 6747 | !(p2_14@899@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 6747 | p2_14@899@01]
(assert p2_14@899@01)
(assert (not (= c_2_0@907@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))))
  $Snap.unit))
; [eval] p1_14 ==> issubtype(typeof(c_2.Container_value), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6748 | p1_14@898@01 | live]
; [else-branch: 6748 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 6748 | p1_14@898@01]
; [eval] issubtype(typeof(c_2.Container_value), int())
; [eval] typeof(c_2.Container_value)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p1_14@898@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))))))
  $Snap.unit))
; [eval] p2_14 ==> issubtype(typeof(c_2_0.Container_valuep), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6749 | p2_14@899@01 | live]
; [else-branch: 6749 | !(p2_14@899@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 6749 | p2_14@899@01]
; [eval] issubtype(typeof(c_2_0.Container_valuep), int())
; [eval] typeof(c_2_0.Container_valuep)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p2_14@899@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))))))
  $Snap.unit))
; [eval] p1_14 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6750 | p1_14@898@01 | live]
; [else-branch: 6750 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 6750 | p1_14@898@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))))))
  $Snap.unit))
; [eval] p2_14 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6751 | p2_14@899@01 | live]
; [else-branch: 6751 | !(p2_14@899@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 6751 | p2_14@899@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@915@01 $Snap)
(assert (= $t@915@01 ($Snap.combine ($Snap.first $t@915@01) ($Snap.second $t@915@01))))
(assert (= ($Snap.first $t@915@01) $Snap.unit))
; [eval] p1_14 ==> (forperm _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <= _current_wait_level_160) && ((forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6752 | p1_14@898@01 | live]
; [else-branch: 6752 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 6752 | p1_14@898@01]
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <= _current_wait_level_160) && ((forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160)
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <= _current_wait_level_160)
(push) ; 7
; [then-branch: 6753 | False | live]
; [else-branch: 6753 | True | live]
(push) ; 8
; [then-branch: 6753 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 6753 | True]
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <= _current_wait_level_160)
(push) ; 9
; [then-branch: 6754 | False | live]
; [else-branch: 6754 | True | live]
(push) ; 10
; [then-branch: 6754 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 6754 | True]
; [eval] _residue_160 <= _current_wait_level_160
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p1_14@898@01 (<= _residue_160@904@01 _current_wait_level_160@910@01)))
(assert (=
  ($Snap.second $t@915@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@915@01))
    ($Snap.second ($Snap.second $t@915@01)))))
(assert (= ($Snap.first ($Snap.second $t@915@01)) $Snap.unit))
; [eval] p2_14 ==> (forperm _r_16: Ref [_r_16.MustReleaseBoundedp] :: Level(_r_16) <= _current_wait_level_160_0) && ((forperm _r_16: Ref [_r_16.MustReleaseUnboundedp] :: Level(_r_16) <= _current_wait_level_160_0) && _residue_160_0 <= _current_wait_level_160_0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6755 | p2_14@899@01 | live]
; [else-branch: 6755 | !(p2_14@899@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 6755 | p2_14@899@01]
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseBoundedp] :: Level(_r_16) <= _current_wait_level_160_0) && ((forperm _r_16: Ref [_r_16.MustReleaseUnboundedp] :: Level(_r_16) <= _current_wait_level_160_0) && _residue_160_0 <= _current_wait_level_160_0)
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseBoundedp] :: Level(_r_16) <= _current_wait_level_160_0)
(push) ; 7
; [then-branch: 6756 | False | live]
; [else-branch: 6756 | True | live]
(push) ; 8
; [then-branch: 6756 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 6756 | True]
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseUnboundedp] :: Level(_r_16) <= _current_wait_level_160_0)
(push) ; 9
; [then-branch: 6757 | False | live]
; [else-branch: 6757 | True | live]
(push) ; 10
; [then-branch: 6757 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 6757 | True]
; [eval] _residue_160_0 <= _current_wait_level_160_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p2_14@899@01 (<= _residue_160_0@905@01 _current_wait_level_160_0@911@01)))
(assert (=
  ($Snap.second ($Snap.second $t@915@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@915@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@915@01))) $Snap.unit))
; [eval] p1_14 ==> _res == null || issubtype(typeof(_res), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6758 | p1_14@898@01 | live]
; [else-branch: 6758 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 6758 | p1_14@898@01]
; [eval] _res == null || issubtype(typeof(_res), int())
; [eval] _res == null
(push) ; 7
; [then-branch: 6759 | _res@912@01 == Null | live]
; [else-branch: 6759 | _res@912@01 != Null | live]
(push) ; 8
; [then-branch: 6759 | _res@912@01 == Null]
(assert (= _res@912@01 $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 6759 | _res@912@01 != Null]
(assert (not (= _res@912@01 $Ref.null)))
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@912@01 $Ref.null)) (= _res@912@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p1_14@898@01 (or (not (= _res@912@01 $Ref.null)) (= _res@912@01 $Ref.null))))
(assert (=>
  p1_14@898@01
  (or
    (= _res@912@01 $Ref.null)
    (issubtype<Bool> (typeof<PyType> _res@912@01) (as int<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@915@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@915@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@915@01))))
  $Snap.unit))
; [eval] p2_14 ==> _res_0 == null || issubtype(typeof(_res_0), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6760 | p2_14@899@01 | live]
; [else-branch: 6760 | !(p2_14@899@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 6760 | p2_14@899@01]
; [eval] _res_0 == null || issubtype(typeof(_res_0), int())
; [eval] _res_0 == null
(push) ; 7
; [then-branch: 6761 | _res_0@913@01 == Null | live]
; [else-branch: 6761 | _res_0@913@01 != Null | live]
(push) ; 8
; [then-branch: 6761 | _res_0@913@01 == Null]
(assert (= _res_0@913@01 $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 6761 | _res_0@913@01 != Null]
(assert (not (= _res_0@913@01 $Ref.null)))
; [eval] issubtype(typeof(_res_0), int())
; [eval] typeof(_res_0)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res_0@913@01 $Ref.null)) (= _res_0@913@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  p2_14@899@01
  (or (not (= _res_0@913@01 $Ref.null)) (= _res_0@913@01 $Ref.null))))
(assert (=>
  p2_14@899@01
  (or
    (= _res_0@913@01 $Ref.null)
    (issubtype<Bool> (typeof<PyType> _res_0@913@01) (as int<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6762 | p1_14@898@01 | live]
; [else-branch: 6762 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 6762 | p1_14@898@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6763 | p2_14@899@01 | live]
; [else-branch: 6763 | !(p2_14@899@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 6763 | p2_14@899@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))))
  $Snap.unit))
; [eval] p1_14 ==> issubtype(typeof(c_2.Container_value), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6764 | p1_14@898@01 | live]
; [else-branch: 6764 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 6764 | p1_14@898@01]
; [eval] issubtype(typeof(c_2.Container_value), int())
; [eval] typeof(c_2.Container_value)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_14@898@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))))
  $Snap.unit))
; [eval] p2_14 ==> issubtype(typeof(c_2_0.Container_valuep), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6765 | p2_14@899@01 | live]
; [else-branch: 6765 | !(p2_14@899@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 6765 | p2_14@899@01]
; [eval] issubtype(typeof(c_2_0.Container_valuep), int())
; [eval] typeof(c_2_0.Container_valuep)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_14@899@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))))))
  $Snap.unit))
; [eval] p1_14 ==> int___eq__(c_2.Container_value, __prim__int___box__(8))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6766 | p1_14@898@01 | live]
; [else-branch: 6766 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 6766 | p1_14@898@01]
; [eval] int___eq__(c_2.Container_value, __prim__int___box__(8))
; [eval] __prim__int___box__(8)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))) (__prim__int___box__ $Snap.unit 8)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))) (__prim__int___box__ $Snap.unit 8))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_14@898@01
  (and
    (__prim__int___box__%precondition $Snap.unit 8)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))) (__prim__int___box__ $Snap.unit 8)))))
(assert (=>
  p1_14@898@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))) (__prim__int___box__ $Snap.unit 8))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))))))
  $Snap.unit))
; [eval] p2_14 ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(8))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6767 | p2_14@899@01 | live]
; [else-branch: 6767 | !(p2_14@899@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 6767 | p2_14@899@01]
; [eval] int___eq__(c_2_0.Container_valuep, __prim__int___box__(8))
; [eval] __prim__int___box__(8)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))) (__prim__int___box__ $Snap.unit 8)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))) (__prim__int___box__ $Snap.unit 8))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_14@899@01
  (and
    (__prim__int___box__%precondition $Snap.unit 8)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))) (__prim__int___box__ $Snap.unit 8)))))
(assert (=>
  p2_14@899@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))) (__prim__int___box__ $Snap.unit 8))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))))))))
  $Snap.unit))
; [eval] p1_14 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6768 | p1_14@898@01 | live]
; [else-branch: 6768 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 6768 | p1_14@898@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@915@01)))))))))))
  $Snap.unit))
; [eval] p2_14 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6769 | p2_14@899@01 | live]
; [else-branch: 6769 | !(p2_14@899@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 6769 | p2_14@899@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var break1_2: Bool
(declare-const break1_2@916@01 Bool)
; [exec]
; var break2_2: Bool
(declare-const break2_2@917@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@918@01 $Ref)
; [exec]
; var _err_3: Ref
(declare-const _err_3@919@01 $Ref)
; [exec]
; var c_7: Ref
(declare-const c_7@920@01 $Ref)
; [exec]
; var c_7_0: Ref
(declare-const c_7_0@921@01 $Ref)
; [exec]
; var b_7: Ref
(declare-const b_7@922@01 $Ref)
; [exec]
; var b_7_0: Ref
(declare-const b_7_0@923@01 $Ref)
; [exec]
; var _loop_measures_2: Seq[Measure$]
(declare-const _loop_measures_2@924@01 Seq<Measure$>)
; [exec]
; var _loop_measures_2_0: Seq[Measure$]
(declare-const _loop_measures_2_0@925@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_2: Bool
(declare-const _loop_check_before_2@926@01 Bool)
; [exec]
; var _loop_check_before_2_0: Bool
(declare-const _loop_check_before_2_0@927@01 Bool)
; [exec]
; var _loop_termination_flag_2: Bool
(declare-const _loop_termination_flag_2@928@01 Bool)
; [exec]
; var _loop_termination_flag_2_0: Bool
(declare-const _loop_termination_flag_2_0@929@01 Bool)
; [exec]
; var _loop_original_must_terminate_2: Perm
(declare-const _loop_original_must_terminate_2@930@01 $Perm)
; [exec]
; var _loop_original_must_terminate_2_0: Perm
(declare-const _loop_original_must_terminate_2_0@931@01 $Perm)
; [exec]
; var _residue_165: Perm
(declare-const _residue_165@932@01 $Perm)
; [exec]
; var _residue_165_0: Perm
(declare-const _residue_165_0@933@01 $Perm)
; [exec]
; var _cwl_160: Perm
(declare-const _cwl_160@934@01 $Perm)
; [exec]
; var _cwl_160_0: Perm
(declare-const _cwl_160_0@935@01 $Perm)
; [exec]
; var _method_measures_160: Seq[Measure$]
(declare-const _method_measures_160@936@01 Seq<Measure$>)
; [exec]
; var _method_measures_160_0: Seq[Measure$]
(declare-const _method_measures_160_0@937@01 Seq<Measure$>)
; [exec]
; var bypass1_2: Bool
(declare-const bypass1_2@938@01 Bool)
; [exec]
; var bypass2_2: Bool
(declare-const bypass2_2@939@01 Bool)
; [exec]
; var tmp1_17: Seq[Measure$]
(declare-const tmp1_17@940@01 Seq<Measure$>)
; [exec]
; var tmp2_17: Seq[Measure$]
(declare-const tmp2_17@941@01 Seq<Measure$>)
; [exec]
; var tmp1_18: Bool
(declare-const tmp1_18@942@01 Bool)
; [exec]
; var tmp2_18: Bool
(declare-const tmp2_18@943@01 Bool)
; [exec]
; var tmp1_19: Bool
(declare-const tmp1_19@944@01 Bool)
; [exec]
; var tmp2_19: Bool
(declare-const tmp2_19@945@01 Bool)
; [exec]
; var oldbreak1_2: Bool
(declare-const oldbreak1_2@946@01 Bool)
; [exec]
; var oldbreak2_2: Bool
(declare-const oldbreak2_2@947@01 Bool)
; [exec]
; var p1_15: Bool
(declare-const p1_15@948@01 Bool)
; [exec]
; var p2_15: Bool
(declare-const p2_15@949@01 Bool)
; [exec]
; var idle1_2: Bool
(declare-const idle1_2@950@01 Bool)
; [exec]
; var idle2_2: Bool
(declare-const idle2_2@951@01 Bool)
; [exec]
; inhale p1_14
(declare-const $t@952@01 $Snap)
(assert (= $t@952@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; break1_2 := false
; [exec]
; break2_2 := false
; [eval] p1_14 && !break1_2
(set-option :timeout 0)
(push) ; 5
; [then-branch: 6770 | !(p1_14@898@01) | live]
; [else-branch: 6770 | p1_14@898@01 | live]
(push) ; 6
; [then-branch: 6770 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 6
(push) ; 6
; [else-branch: 6770 | p1_14@898@01]
; [eval] !break1_2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_14@898@01 (not p1_14@898@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6771 | p1_14@898@01 | live]
; [else-branch: 6771 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 6771 | p1_14@898@01]
; [exec]
; _method_measures_160 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; c_7 := c_2
; [exec]
; b_7 := b_2
; [exec]
; _loop_original_must_terminate_2 := perm(MustTerminate(_cthread_160))
; [eval] perm(MustTerminate(_cthread_160))
(declare-const _loop_original_must_terminate_2@953@01 $Perm)
(assert (= _loop_original_must_terminate_2@953@01 $Perm.No))
; [exec]
; _loop_termination_flag_2 := false
; [exec]
; _loop_check_before_2 := true
; [eval] p2_14 && !break2_2
(push) ; 6
; [then-branch: 6772 | !(p2_14@899@01) | live]
; [else-branch: 6772 | p2_14@899@01 | live]
(push) ; 7
; [then-branch: 6772 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 7
(push) ; 7
; [else-branch: 6772 | p2_14@899@01]
; [eval] !break2_2
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_14@899@01 (not p2_14@899@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6773 | p2_14@899@01 | live]
; [else-branch: 6773 | !(p2_14@899@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 6773 | p2_14@899@01]
; [exec]
; _method_measures_160_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res_0 := null
; [exec]
; _err_3 := null
; [exec]
; c_7_0 := c_2_0
; [exec]
; b_7_0 := b_2_0
; [exec]
; _loop_original_must_terminate_2_0 := perm(MustTerminate_0(_cthread_160_0))
; [eval] perm(MustTerminate_0(_cthread_160_0))
(declare-const _loop_original_must_terminate_2_0@954@01 $Perm)
(assert (= _loop_original_must_terminate_2_0@954@01 $Perm.No))
; [exec]
; _loop_termination_flag_2_0 := false
; [exec]
; _loop_check_before_2_0 := true
; [exec]
; bypass1_2 := !(p1_14 && !break1_2)
; [eval] !(p1_14 && !break1_2)
; [eval] p1_14 && !break1_2
(push) ; 7
; [then-branch: 6774 | !(p1_14@898@01) | live]
; [else-branch: 6774 | p1_14@898@01 | live]
(push) ; 8
; [then-branch: 6774 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 8
(push) ; 8
; [else-branch: 6774 | p1_14@898@01]
; [eval] !break1_2
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass1_2@955@01 Bool)
(assert (= bypass1_2@955@01 (not p1_14@898@01)))
; [exec]
; bypass2_2 := !(p2_14 && !break2_2)
; [eval] !(p2_14 && !break2_2)
; [eval] p2_14 && !break2_2
(push) ; 7
; [then-branch: 6775 | !(p2_14@899@01) | live]
; [else-branch: 6775 | p2_14@899@01 | live]
(push) ; 8
; [then-branch: 6775 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 8
(push) ; 8
; [else-branch: 6775 | p2_14@899@01]
; [eval] !break2_2
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const bypass2_2@956@01 Bool)
(assert (= bypass2_2@956@01 (not p2_14@899@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (not bypass1_2@955@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6776 | bypass1_2@955@01 | dead]
; [else-branch: 6776 | !(bypass1_2@955@01) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 6776 | !(bypass1_2@955@01)]
(assert (not bypass1_2@955@01))
(pop) ; 7
; [eval] !bypass1_2
(push) ; 7
(set-option :timeout 10)
(assert (not bypass1_2@955@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not bypass1_2@955@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6777 | !(bypass1_2@955@01) | live]
; [else-branch: 6777 | bypass1_2@955@01 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 6777 | !(bypass1_2@955@01)]
(assert (not bypass1_2@955@01))
(push) ; 8
(set-option :timeout 10)
(assert (not (not bypass2_2@956@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6778 | bypass2_2@956@01 | dead]
; [else-branch: 6778 | !(bypass2_2@956@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 6778 | !(bypass2_2@956@01)]
(assert (not bypass2_2@956@01))
(pop) ; 8
; [eval] !bypass2_2
(push) ; 8
(set-option :timeout 10)
(assert (not bypass2_2@956@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not bypass2_2@956@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6779 | !(bypass2_2@956@01) | live]
; [else-branch: 6779 | bypass2_2@956@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 6779 | !(bypass2_2@956@01)]
(assert (not bypass2_2@956@01))
; [exec]
; oldbreak1_2 := break1_2
; [exec]
; oldbreak2_2 := break2_2
; [exec]
; idle1_2 := false
; [exec]
; idle2_2 := false
(declare-const p1_15@957@01 Bool)
(declare-const p2_15@958@01 Bool)
(declare-const idle1_2@959@01 Bool)
(declare-const idle2_2@960@01 Bool)
(declare-const _loop_measures_2@961@01 Seq<Measure$>)
(declare-const _loop_measures_2_0@962@01 Seq<Measure$>)
(declare-const p1_16@963@01 Bool)
(declare-const p2_16@964@01 Bool)
(declare-const p3_8@965@01 Bool)
(declare-const p4_8@966@01 Bool)
(declare-const break1_2@967@01 Bool)
(declare-const break2_2@968@01 Bool)
(declare-const _loop_check_before_2@969@01 Bool)
(declare-const _loop_check_before_2_0@970@01 Bool)
(push) ; 9
; Loop head block: Check well-definedness of invariant
(declare-const $t@971@01 $Snap)
(assert (= $t@971@01 ($Snap.combine ($Snap.first $t@971@01) ($Snap.second $t@971@01))))
(assert (= ($Snap.first $t@971@01) $Snap.unit))
; [eval] p1_14 && !bypass1_2 ==> (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _residue_165) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _residue_165) && _residue_160 <= _residue_165)
; [eval] p1_14 && !bypass1_2
(push) ; 10
; [then-branch: 6780 | !(p1_14@898@01) | live]
; [else-branch: 6780 | p1_14@898@01 | live]
(push) ; 11
; [then-branch: 6780 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 11
(push) ; 11
; [else-branch: 6780 | p1_14@898@01]
; [eval] !bypass1_2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6781 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 6781 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 6781 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _residue_165) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _residue_165) && _residue_160 <= _residue_165)
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _residue_165)
(push) ; 12
; [then-branch: 6782 | False | live]
; [else-branch: 6782 | True | live]
(push) ; 13
; [then-branch: 6782 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 6782 | True]
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _residue_165)
(push) ; 14
; [then-branch: 6783 | False | live]
; [else-branch: 6783 | True | live]
(push) ; 15
; [then-branch: 6783 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 6783 | True]
; [eval] _residue_160 <= _residue_165
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
(assert (=>
  (and p1_14@898@01 (not bypass1_2@955@01))
  (<= _residue_160@904@01 _residue_165@932@01)))
(assert (=
  ($Snap.second $t@971@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@971@01))
    ($Snap.second ($Snap.second $t@971@01)))))
(assert (= ($Snap.first ($Snap.second $t@971@01)) $Snap.unit))
; [eval] p2_14 && !bypass2_2 ==> (forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: Level(_r_14) <= _residue_165_0) && ((forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: Level(_r_14) <= _residue_165_0) && _residue_160_0 <= _residue_165_0)
; [eval] p2_14 && !bypass2_2
(push) ; 10
; [then-branch: 6784 | !(p2_14@899@01) | live]
; [else-branch: 6784 | p2_14@899@01 | live]
(push) ; 11
; [then-branch: 6784 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 11
(push) ; 11
; [else-branch: 6784 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6785 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 6785 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 6785 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: Level(_r_14) <= _residue_165_0) && ((forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: Level(_r_14) <= _residue_165_0) && _residue_160_0 <= _residue_165_0)
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: Level(_r_14) <= _residue_165_0)
(push) ; 12
; [then-branch: 6786 | False | live]
; [else-branch: 6786 | True | live]
(push) ; 13
; [then-branch: 6786 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 6786 | True]
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: Level(_r_14) <= _residue_165_0)
(push) ; 14
; [then-branch: 6787 | False | live]
; [else-branch: 6787 | True | live]
(push) ; 15
; [then-branch: 6787 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 6787 | True]
; [eval] _residue_160_0 <= _residue_165_0
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
(assert (=>
  (and p2_14@899@01 (not bypass2_2@956@01))
  (<= _residue_160_0@905@01 _residue_165_0@933@01)))
(assert (=
  ($Snap.second ($Snap.second $t@971@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@971@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))
; [eval] p1_14 && !bypass1_2
(push) ; 10
; [then-branch: 6788 | !(p1_14@898@01) | live]
; [else-branch: 6788 | p1_14@898@01 | live]
(push) ; 11
; [then-branch: 6788 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 11
(push) ; 11
; [else-branch: 6788 | p1_14@898@01]
; [eval] !bypass1_2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6789 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 6789 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 6789 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@971@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@971@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))
; [eval] p2_14 && !bypass2_2
(push) ; 11
; [then-branch: 6790 | !(p2_14@899@01) | live]
; [else-branch: 6790 | p2_14@899@01 | live]
(push) ; 12
; [then-branch: 6790 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 12
(push) ; 12
; [else-branch: 6790 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6791 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 6791 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 6791 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))
  $Snap.unit))
; [eval] p1_14 && !bypass1_2 ==> issubtype(typeof(c_7.Container_value), int())
; [eval] p1_14 && !bypass1_2
(push) ; 12
; [then-branch: 6792 | !(p1_14@898@01) | live]
; [else-branch: 6792 | p1_14@898@01 | live]
(push) ; 13
; [then-branch: 6792 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6792 | p1_14@898@01]
; [eval] !bypass1_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6793 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 6793 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 6793 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] issubtype(typeof(c_7.Container_value), int())
; [eval] typeof(c_7.Container_value)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
(assert (=>
  (and p1_14@898@01 (not bypass1_2@955@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@971@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))
  $Snap.unit))
; [eval] p2_14 && !bypass2_2 ==> issubtype(typeof(c_7_0.Container_valuep), int())
; [eval] p2_14 && !bypass2_2
(push) ; 12
; [then-branch: 6794 | !(p2_14@899@01) | live]
; [else-branch: 6794 | p2_14@899@01 | live]
(push) ; 13
; [then-branch: 6794 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6794 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6795 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 6795 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 6795 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] issubtype(typeof(c_7_0.Container_valuep), int())
; [eval] typeof(c_7_0.Container_valuep)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
(assert (=>
  (and p2_14@899@01 (not bypass2_2@956@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))
  $Snap.unit))
; [eval] p1_14 && !bypass1_2 ==> true
; [eval] p1_14 && !bypass1_2
(push) ; 12
; [then-branch: 6796 | !(p1_14@898@01) | live]
; [else-branch: 6796 | p1_14@898@01 | live]
(push) ; 13
; [then-branch: 6796 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6796 | p1_14@898@01]
; [eval] !bypass1_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6797 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 6797 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 6797 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))
  $Snap.unit))
; [eval] p2_14 && !bypass2_2 ==> true
; [eval] p2_14 && !bypass2_2
(push) ; 12
; [then-branch: 6798 | !(p2_14@899@01) | live]
; [else-branch: 6798 | p2_14@899@01 | live]
(push) ; 13
; [then-branch: 6798 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6798 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6799 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 6799 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 6799 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))
  $Snap.unit))
; [eval] p1_14 && !bypass1_2 ==> true
; [eval] p1_14 && !bypass1_2
(push) ; 12
; [then-branch: 6800 | !(p1_14@898@01) | live]
; [else-branch: 6800 | p1_14@898@01 | live]
(push) ; 13
; [then-branch: 6800 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6800 | p1_14@898@01]
; [eval] !bypass1_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6801 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 6801 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 6801 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))
  $Snap.unit))
; [eval] p2_14 && !bypass2_2 ==> true
; [eval] p2_14 && !bypass2_2
(push) ; 12
; [then-branch: 6802 | !(p2_14@899@01) | live]
; [else-branch: 6802 | p2_14@899@01 | live]
(push) ; 13
; [then-branch: 6802 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6802 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6803 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 6803 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 6803 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))
  $Snap.unit))
; [eval] bypass1_2 ==> tmp1_17 == _loop_measures_2
(push) ; 12
; [then-branch: 6804 | bypass1_2@955@01 | dead]
; [else-branch: 6804 | !(bypass1_2@955@01) | live]
(push) ; 13
; [else-branch: 6804 | !(bypass1_2@955@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))))
  $Snap.unit))
; [eval] bypass1_2 ==> tmp1_18 == _loop_check_before_2
(push) ; 12
; [then-branch: 6805 | bypass1_2@955@01 | dead]
; [else-branch: 6805 | !(bypass1_2@955@01) | live]
(push) ; 13
; [else-branch: 6805 | !(bypass1_2@955@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))))
  $Snap.unit))
; [eval] bypass1_2 ==> tmp1_19 == break1_2
(push) ; 12
; [then-branch: 6806 | bypass1_2@955@01 | dead]
; [else-branch: 6806 | !(bypass1_2@955@01) | live]
(push) ; 13
; [else-branch: 6806 | !(bypass1_2@955@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))))))
  $Snap.unit))
; [eval] bypass2_2 ==> tmp2_17 == _loop_measures_2_0
(push) ; 12
; [then-branch: 6807 | bypass2_2@956@01 | dead]
; [else-branch: 6807 | !(bypass2_2@956@01) | live]
(push) ; 13
; [else-branch: 6807 | !(bypass2_2@956@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))))))
  $Snap.unit))
; [eval] bypass2_2 ==> tmp2_18 == _loop_check_before_2_0
(push) ; 12
; [then-branch: 6808 | bypass2_2@956@01 | dead]
; [else-branch: 6808 | !(bypass2_2@956@01) | live]
(push) ; 13
; [else-branch: 6808 | !(bypass2_2@956@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))))))
  $Snap.unit))
; [eval] bypass2_2 ==> tmp2_19 == break2_2
(push) ; 12
; [then-branch: 6809 | bypass2_2@956@01 | dead]
; [else-branch: 6809 | !(bypass2_2@956@01) | live]
(push) ; 13
; [else-branch: 6809 | !(bypass2_2@956@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
(pop) ; 9
(push) ; 9
; Loop head block: Establish invariant
; [eval] p1_14 && !bypass1_2 ==> true
; [eval] p1_14 && !bypass1_2
(push) ; 10
; [then-branch: 6810 | !(p1_14@898@01) | live]
; [else-branch: 6810 | p1_14@898@01 | live]
(push) ; 11
; [then-branch: 6810 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 11
(push) ; 11
; [else-branch: 6810 | p1_14@898@01]
(assert p1_14@898@01)
; [eval] !bypass1_2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6811 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 6811 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 6811 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] p2_14 && !bypass2_2 ==> true
; [eval] p2_14 && !bypass2_2
(push) ; 10
; [then-branch: 6812 | !(p2_14@899@01) | live]
; [else-branch: 6812 | p2_14@899@01 | live]
(push) ; 11
; [then-branch: 6812 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 11
(push) ; 11
; [else-branch: 6812 | p2_14@899@01]
(assert p2_14@899@01)
; [eval] !bypass2_2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6813 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 6813 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 6813 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] p1_14 && !bypass1_2
(push) ; 10
; [then-branch: 6814 | !(p1_14@898@01) | live]
; [else-branch: 6814 | p1_14@898@01 | live]
(push) ; 11
; [then-branch: 6814 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 11
(push) ; 11
; [else-branch: 6814 | p1_14@898@01]
; [eval] !bypass1_2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6815 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 6815 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 6815 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] p2_14 && !bypass2_2
(push) ; 11
; [then-branch: 6816 | !(p2_14@899@01) | live]
; [else-branch: 6816 | p2_14@899@01 | live]
(push) ; 12
; [then-branch: 6816 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 12
(push) ; 12
; [else-branch: 6816 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6817 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 6817 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 6817 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] p1_14 && !bypass1_2 ==> issubtype(typeof(c_7.Container_value), int())
; [eval] p1_14 && !bypass1_2
(push) ; 12
; [then-branch: 6818 | !(p1_14@898@01) | live]
; [else-branch: 6818 | p1_14@898@01 | live]
(push) ; 13
; [then-branch: 6818 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6818 | p1_14@898@01]
; [eval] !bypass1_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6819 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 6819 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 6819 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] issubtype(typeof(c_7.Container_value), int())
; [eval] typeof(c_7.Container_value)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
(push) ; 12
(assert (not (=>
  (and p1_14@898@01 (not bypass1_2@955@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))))) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_14@898@01 (not bypass1_2@955@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))))) (as int<PyType>  PyType))))
; [eval] p2_14 && !bypass2_2 ==> issubtype(typeof(c_7_0.Container_valuep), int())
; [eval] p2_14 && !bypass2_2
(push) ; 12
; [then-branch: 6820 | !(p2_14@899@01) | live]
; [else-branch: 6820 | p2_14@899@01 | live]
(push) ; 13
; [then-branch: 6820 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6820 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6821 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 6821 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 6821 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] issubtype(typeof(c_7_0.Container_valuep), int())
; [eval] typeof(c_7_0.Container_valuep)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
(push) ; 12
(assert (not (=>
  (and p2_14@899@01 (not bypass2_2@956@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))))) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_14@899@01 (not bypass2_2@956@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))))) (as int<PyType>  PyType))))
; [eval] p1_14 && !bypass1_2 ==> !idle1_2 ==> _loop_check_before_2 ==> _loop_termination_flag_2 || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))
; [eval] p1_14 && !bypass1_2
(push) ; 12
; [then-branch: 6822 | !(p1_14@898@01) | live]
; [else-branch: 6822 | p1_14@898@01 | live]
(push) ; 13
; [then-branch: 6822 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6822 | p1_14@898@01]
; [eval] !bypass1_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6823 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 6823 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 6823 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] !idle1_2 ==> _loop_check_before_2 ==> _loop_termination_flag_2 || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))
; [eval] !idle1_2
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6824 | True | live]
; [else-branch: 6824 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 6824 | True]
; [eval] _loop_check_before_2 ==> _loop_termination_flag_2 || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6825 | True | live]
; [else-branch: 6825 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 6825 | True]
; [eval] _loop_termination_flag_2 || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))
(push) ; 18
; [then-branch: 6826 | False | live]
; [else-branch: 6826 | True | live]
(push) ; 19
; [then-branch: 6826 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 6826 | True]
; [eval] perm(MustTerminate(_cthread_160)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_160)) == none
; [eval] perm(MustTerminate(_cthread_160))
(push) ; 20
; [then-branch: 6827 | False | live]
; [else-branch: 6827 | True | live]
(push) ; 21
; [then-branch: 6827 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 6827 | True]
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 22
; [then-branch: 6828 | False | live]
; [else-branch: 6828 | True | live]
(push) ; 23
; [then-branch: 6828 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 6828 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 24
; [then-branch: 6829 | False | live]
; [else-branch: 6829 | True | live]
(push) ; 25
; [then-branch: 6829 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 6829 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 26
; [then-branch: 6830 | False | live]
; [else-branch: 6830 | True | live]
(push) ; 27
; [then-branch: 6830 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 6830 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] p2_14 && !bypass2_2 ==> !idle2_2 ==> _loop_check_before_2_0 ==> _loop_termination_flag_2_0 || perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))
; [eval] p2_14 && !bypass2_2
(push) ; 12
; [then-branch: 6831 | !(p2_14@899@01) | live]
; [else-branch: 6831 | p2_14@899@01 | live]
(push) ; 13
; [then-branch: 6831 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6831 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6832 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 6832 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 6832 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] !idle2_2 ==> _loop_check_before_2_0 ==> _loop_termination_flag_2_0 || perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_2
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6833 | True | live]
; [else-branch: 6833 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 6833 | True]
; [eval] _loop_check_before_2_0 ==> _loop_termination_flag_2_0 || perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6834 | True | live]
; [else-branch: 6834 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 6834 | True]
; [eval] _loop_termination_flag_2_0 || perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))
(push) ; 18
; [then-branch: 6835 | False | live]
; [else-branch: 6835 | True | live]
(push) ; 19
; [then-branch: 6835 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 6835 | True]
; [eval] perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_160_0)) == none
; [eval] perm(MustTerminate_0(_cthread_160_0))
(push) ; 20
; [then-branch: 6836 | False | live]
; [else-branch: 6836 | True | live]
(push) ; 21
; [then-branch: 6836 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 6836 | True]
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false)
(push) ; 22
; [then-branch: 6837 | False | live]
; [else-branch: 6837 | True | live]
(push) ; 23
; [then-branch: 6837 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 6837 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false)
(push) ; 24
; [then-branch: 6838 | False | live]
; [else-branch: 6838 | True | live]
(push) ; 25
; [then-branch: 6838 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 6838 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false)
(push) ; 26
; [then-branch: 6839 | False | live]
; [else-branch: 6839 | True | live]
(push) ; 27
; [then-branch: 6839 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 6839 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] p1_14 && !bypass1_2 ==> !idle1_2 ==> !_loop_check_before_2 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] p1_14 && !bypass1_2
(push) ; 12
; [then-branch: 6840 | !(p1_14@898@01) | live]
; [else-branch: 6840 | p1_14@898@01 | live]
(push) ; 13
; [then-branch: 6840 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6840 | p1_14@898@01]
; [eval] !bypass1_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6841 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 6841 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 6841 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] !idle1_2 ==> !_loop_check_before_2 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] !idle1_2
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6842 | True | live]
; [else-branch: 6842 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 6842 | True]
; [eval] !_loop_check_before_2 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_2
(push) ; 16
; [then-branch: 6843 | False | dead]
; [else-branch: 6843 | True | live]
(push) ; 17
; [else-branch: 6843 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] p2_14 && !bypass2_2 ==> !idle2_2 ==> !_loop_check_before_2_0 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] p2_14 && !bypass2_2
(push) ; 12
; [then-branch: 6844 | !(p2_14@899@01) | live]
; [else-branch: 6844 | p2_14@899@01 | live]
(push) ; 13
; [then-branch: 6844 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 13
(push) ; 13
; [else-branch: 6844 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6845 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 6845 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 6845 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] !idle2_2 ==> !_loop_check_before_2_0 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_2
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6846 | True | live]
; [else-branch: 6846 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 6846 | True]
; [eval] !_loop_check_before_2_0 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_2_0
(push) ; 16
; [then-branch: 6847 | False | dead]
; [else-branch: 6847 | True | live]
(push) ; 17
; [else-branch: 6847 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] bypass1_2 ==> tmp1_17 == _loop_measures_2
(push) ; 12
; [then-branch: 6848 | bypass1_2@955@01 | dead]
; [else-branch: 6848 | !(bypass1_2@955@01) | live]
(push) ; 13
; [else-branch: 6848 | !(bypass1_2@955@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1_2 ==> tmp1_18 == _loop_check_before_2
(push) ; 12
; [then-branch: 6849 | bypass1_2@955@01 | dead]
; [else-branch: 6849 | !(bypass1_2@955@01) | live]
(push) ; 13
; [else-branch: 6849 | !(bypass1_2@955@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass1_2 ==> tmp1_19 == break1_2
(push) ; 12
; [then-branch: 6850 | bypass1_2@955@01 | dead]
; [else-branch: 6850 | !(bypass1_2@955@01) | live]
(push) ; 13
; [else-branch: 6850 | !(bypass1_2@955@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2_2 ==> tmp2_17 == _loop_measures_2_0
(push) ; 12
; [then-branch: 6851 | bypass2_2@956@01 | dead]
; [else-branch: 6851 | !(bypass2_2@956@01) | live]
(push) ; 13
; [else-branch: 6851 | !(bypass2_2@956@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2_2 ==> tmp2_18 == _loop_check_before_2_0
(push) ; 12
; [then-branch: 6852 | bypass2_2@956@01 | dead]
; [else-branch: 6852 | !(bypass2_2@956@01) | live]
(push) ; 13
; [else-branch: 6852 | !(bypass2_2@956@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bypass2_2 ==> tmp2_19 == break2_2
(push) ; 12
; [then-branch: 6853 | bypass2_2@956@01 | dead]
; [else-branch: 6853 | !(bypass2_2@956@01) | live]
(push) ; 13
; [else-branch: 6853 | !(bypass2_2@956@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 12
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))
  $Snap.unit))
(assert (=>
  (and p1_14@898@01 (not bypass1_2@955@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@971@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))
  $Snap.unit))
(assert (=>
  (and p2_14@899@01 (not bypass2_2@956@01))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@971@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@971@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@971@01)))))))
(assert (= $t@971@01 ($Snap.combine ($Snap.first $t@971@01) ($Snap.second $t@971@01))))
(assert (= ($Snap.first $t@971@01) $Snap.unit))
(assert (=>
  (and p1_14@898@01 (not bypass1_2@955@01))
  (<= _residue_160@904@01 _residue_165@932@01)))
(assert (=
  ($Snap.second $t@971@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@971@01))
    ($Snap.second ($Snap.second $t@971@01)))))
(assert (= ($Snap.first ($Snap.second $t@971@01)) $Snap.unit))
(assert (=>
  (and p2_14@899@01 (not bypass2_2@956@01))
  (<= _residue_160_0@905@01 _residue_165_0@933@01)))
(assert (=
  ($Snap.second ($Snap.second $t@971@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@971@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@971@01))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 13
; [eval] p1_14 && (!break1_2 && (!bypass1_2 && true)) || p2_14 && (!break2_2 && (!bypass2_2 && true))
; [eval] p1_14 && (!break1_2 && (!bypass1_2 && true))
(push) ; 14
; [then-branch: 6854 | !(p1_14@898@01) | live]
; [else-branch: 6854 | p1_14@898@01 | live]
(push) ; 15
; [then-branch: 6854 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6854 | p1_14@898@01]
; [eval] !break1_2
(push) ; 16
; [then-branch: 6855 | break1_2@967@01 | live]
; [else-branch: 6855 | !(break1_2@967@01) | live]
(push) ; 17
; [then-branch: 6855 | break1_2@967@01]
(assert break1_2@967@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6855 | !(break1_2@967@01)]
(assert (not break1_2@967@01))
; [eval] !bypass1_2
(push) ; 18
; [then-branch: 6856 | bypass1_2@955@01 | live]
; [else-branch: 6856 | !(bypass1_2@955@01) | live]
(push) ; 19
; [then-branch: 6856 | bypass1_2@955@01]
(assert bypass1_2@955@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6856 | !(bypass1_2@955@01)]
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1_2@955@01) bypass1_2@955@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_2@967@01)
  (and (not break1_2@967@01) (or (not bypass1_2@955@01) bypass1_2@955@01))))
(assert (or (not break1_2@967@01) break1_2@967@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_14@898@01
  (and
    (=>
      (not break1_2@967@01)
      (and (not break1_2@967@01) (or (not bypass1_2@955@01) bypass1_2@955@01)))
    (or (not break1_2@967@01) break1_2@967@01))))
(push) ; 14
; [then-branch: 6857 | p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01) | live]
; [else-branch: 6857 | !(p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01)) | live]
(push) ; 15
; [then-branch: 6857 | p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01))))
(pop) ; 15
(push) ; 15
; [else-branch: 6857 | !(p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01))]
(assert (not (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01)))))
; [eval] p2_14 && (!break2_2 && (!bypass2_2 && true))
(push) ; 16
; [then-branch: 6858 | !(p2_14@899@01) | live]
; [else-branch: 6858 | p2_14@899@01 | live]
(push) ; 17
; [then-branch: 6858 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6858 | p2_14@899@01]
; [eval] !break2_2
(push) ; 18
; [then-branch: 6859 | break2_2@968@01 | live]
; [else-branch: 6859 | !(break2_2@968@01) | live]
(push) ; 19
; [then-branch: 6859 | break2_2@968@01]
(assert break2_2@968@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6859 | !(break2_2@968@01)]
(assert (not break2_2@968@01))
; [eval] !bypass2_2
(push) ; 20
; [then-branch: 6860 | bypass2_2@956@01 | live]
; [else-branch: 6860 | !(bypass2_2@956@01) | live]
(push) ; 21
; [then-branch: 6860 | bypass2_2@956@01]
(assert bypass2_2@956@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6860 | !(bypass2_2@956@01)]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2_2@956@01) bypass2_2@956@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_2@968@01)
  (and (not break2_2@968@01) (or (not bypass2_2@956@01) bypass2_2@956@01))))
(assert (or (not break2_2@968@01) break2_2@968@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_14@899@01
  (and
    (=>
      (not break2_2@968@01)
      (and (not break2_2@968@01) (or (not bypass2_2@956@01) bypass2_2@956@01)))
    (or (not break2_2@968@01) break2_2@968@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01)))
  (and p1_14@898@01 (not break1_2@967@01) (not bypass1_2@955@01))))
; Joined path conditions
(assert (=>
  (not (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01))))
  (and
    (not (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01))))
    (=>
      p2_14@899@01
      (and
        (=>
          (not break2_2@968@01)
          (and
            (not break2_2@968@01)
            (or (not bypass2_2@956@01) bypass2_2@956@01)))
        (or (not break2_2@968@01) break2_2@968@01))))))
(assert (or
  (not (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01))))
  (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01)))))
(pop) ; 13
(push) ; 13
; [eval] !(p1_14 && (!break1_2 && (!bypass1_2 && true)) || p2_14 && (!break2_2 && (!bypass2_2 && true)))
; [eval] p1_14 && (!break1_2 && (!bypass1_2 && true)) || p2_14 && (!break2_2 && (!bypass2_2 && true))
; [eval] p1_14 && (!break1_2 && (!bypass1_2 && true))
(push) ; 14
; [then-branch: 6861 | !(p1_14@898@01) | live]
; [else-branch: 6861 | p1_14@898@01 | live]
(push) ; 15
; [then-branch: 6861 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6861 | p1_14@898@01]
(assert p1_14@898@01)
; [eval] !break1_2
(push) ; 16
; [then-branch: 6862 | break1_2@967@01 | live]
; [else-branch: 6862 | !(break1_2@967@01) | live]
(push) ; 17
; [then-branch: 6862 | break1_2@967@01]
(assert break1_2@967@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6862 | !(break1_2@967@01)]
(assert (not break1_2@967@01))
; [eval] !bypass1_2
(push) ; 18
; [then-branch: 6863 | bypass1_2@955@01 | live]
; [else-branch: 6863 | !(bypass1_2@955@01) | live]
(push) ; 19
; [then-branch: 6863 | bypass1_2@955@01]
(assert bypass1_2@955@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6863 | !(bypass1_2@955@01)]
(assert (not bypass1_2@955@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1_2@955@01) bypass1_2@955@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_2@967@01)
  (and (not break1_2@967@01) (or (not bypass1_2@955@01) bypass1_2@955@01))))
(assert (or (not break1_2@967@01) break1_2@967@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_14@898@01
  (and
    p1_14@898@01
    (=>
      (not break1_2@967@01)
      (and (not break1_2@967@01) (or (not bypass1_2@955@01) bypass1_2@955@01)))
    (or (not break1_2@967@01) break1_2@967@01))))
(push) ; 14
; [then-branch: 6864 | p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01) | live]
; [else-branch: 6864 | !(p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01)) | live]
(push) ; 15
; [then-branch: 6864 | p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01))))
(pop) ; 15
(push) ; 15
; [else-branch: 6864 | !(p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01))]
(assert (not (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01)))))
; [eval] p2_14 && (!break2_2 && (!bypass2_2 && true))
(push) ; 16
; [then-branch: 6865 | !(p2_14@899@01) | live]
; [else-branch: 6865 | p2_14@899@01 | live]
(push) ; 17
; [then-branch: 6865 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6865 | p2_14@899@01]
; [eval] !break2_2
(push) ; 18
; [then-branch: 6866 | break2_2@968@01 | live]
; [else-branch: 6866 | !(break2_2@968@01) | live]
(push) ; 19
; [then-branch: 6866 | break2_2@968@01]
(assert break2_2@968@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6866 | !(break2_2@968@01)]
(assert (not break2_2@968@01))
; [eval] !bypass2_2
(push) ; 20
; [then-branch: 6867 | bypass2_2@956@01 | live]
; [else-branch: 6867 | !(bypass2_2@956@01) | live]
(push) ; 21
; [then-branch: 6867 | bypass2_2@956@01]
(assert bypass2_2@956@01)
(pop) ; 21
(push) ; 21
; [else-branch: 6867 | !(bypass2_2@956@01)]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2_2@956@01) bypass2_2@956@01))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_2@968@01)
  (and (not break2_2@968@01) (or (not bypass2_2@956@01) bypass2_2@956@01))))
(assert (or (not break2_2@968@01) break2_2@968@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_14@899@01
  (and
    (=>
      (not break2_2@968@01)
      (and (not break2_2@968@01) (or (not bypass2_2@956@01) bypass2_2@956@01)))
    (or (not break2_2@968@01) break2_2@968@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01)))
  (and p1_14@898@01 (not break1_2@967@01) (not bypass1_2@955@01))))
; Joined path conditions
(assert (=>
  (not (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01))))
  (and
    (not (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01))))
    (=>
      p2_14@899@01
      (and
        (=>
          (not break2_2@968@01)
          (and
            (not break2_2@968@01)
            (or (not bypass2_2@956@01) bypass2_2@956@01)))
        (or (not break2_2@968@01) break2_2@968@01))))))
(assert (or
  (not (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01))))
  (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01)))))
(pop) ; 13
; Loop head block: Follow loop-internal edges
; [eval] p1_14 && (!break1_2 && (!bypass1_2 && true)) || p2_14 && (!break2_2 && (!bypass2_2 && true))
; [eval] p1_14 && (!break1_2 && (!bypass1_2 && true))
(push) ; 13
; [then-branch: 6868 | !(p1_14@898@01) | live]
; [else-branch: 6868 | p1_14@898@01 | live]
(push) ; 14
; [then-branch: 6868 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 14
(push) ; 14
; [else-branch: 6868 | p1_14@898@01]
(assert p1_14@898@01)
; [eval] !break1_2
(push) ; 15
; [then-branch: 6869 | break1_2@967@01 | live]
; [else-branch: 6869 | !(break1_2@967@01) | live]
(push) ; 16
; [then-branch: 6869 | break1_2@967@01]
(assert break1_2@967@01)
(pop) ; 16
(push) ; 16
; [else-branch: 6869 | !(break1_2@967@01)]
(assert (not break1_2@967@01))
; [eval] !bypass1_2
(push) ; 17
; [then-branch: 6870 | bypass1_2@955@01 | live]
; [else-branch: 6870 | !(bypass1_2@955@01) | live]
(push) ; 18
; [then-branch: 6870 | bypass1_2@955@01]
(assert bypass1_2@955@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6870 | !(bypass1_2@955@01)]
(assert (not bypass1_2@955@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1_2@955@01) bypass1_2@955@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_2@967@01)
  (and (not break1_2@967@01) (or (not bypass1_2@955@01) bypass1_2@955@01))))
(assert (or (not break1_2@967@01) break1_2@967@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_14@898@01
  (and
    p1_14@898@01
    (=>
      (not break1_2@967@01)
      (and (not break1_2@967@01) (or (not bypass1_2@955@01) bypass1_2@955@01)))
    (or (not break1_2@967@01) break1_2@967@01))))
(push) ; 13
; [then-branch: 6871 | p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01) | live]
; [else-branch: 6871 | !(p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01)) | live]
(push) ; 14
; [then-branch: 6871 | p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01))))
(pop) ; 14
(push) ; 14
; [else-branch: 6871 | !(p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01))]
(assert (not (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01)))))
; [eval] p2_14 && (!break2_2 && (!bypass2_2 && true))
(push) ; 15
; [then-branch: 6872 | !(p2_14@899@01) | live]
; [else-branch: 6872 | p2_14@899@01 | live]
(push) ; 16
; [then-branch: 6872 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6872 | p2_14@899@01]
; [eval] !break2_2
(push) ; 17
; [then-branch: 6873 | break2_2@968@01 | live]
; [else-branch: 6873 | !(break2_2@968@01) | live]
(push) ; 18
; [then-branch: 6873 | break2_2@968@01]
(assert break2_2@968@01)
(pop) ; 18
(push) ; 18
; [else-branch: 6873 | !(break2_2@968@01)]
(assert (not break2_2@968@01))
; [eval] !bypass2_2
(push) ; 19
; [then-branch: 6874 | bypass2_2@956@01 | live]
; [else-branch: 6874 | !(bypass2_2@956@01) | live]
(push) ; 20
; [then-branch: 6874 | bypass2_2@956@01]
(assert bypass2_2@956@01)
(pop) ; 20
(push) ; 20
; [else-branch: 6874 | !(bypass2_2@956@01)]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2_2@956@01) bypass2_2@956@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_2@968@01)
  (and (not break2_2@968@01) (or (not bypass2_2@956@01) bypass2_2@956@01))))
(assert (or (not break2_2@968@01) break2_2@968@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_14@899@01
  (and
    (=>
      (not break2_2@968@01)
      (and (not break2_2@968@01) (or (not bypass2_2@956@01) bypass2_2@956@01)))
    (or (not break2_2@968@01) break2_2@968@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01)))
  (and p1_14@898@01 (not break1_2@967@01) (not bypass1_2@955@01))))
; Joined path conditions
(assert (=>
  (not (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01))))
  (and
    (not (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01))))
    (=>
      p2_14@899@01
      (and
        (=>
          (not break2_2@968@01)
          (and
            (not break2_2@968@01)
            (or (not bypass2_2@956@01) bypass2_2@956@01)))
        (or (not break2_2@968@01) break2_2@968@01))))))
(assert (or
  (not (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01))))
  (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01)))))
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (or
    (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01)))
    (and p2_14@899@01 (and (not break2_2@968@01) (not bypass2_2@956@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (or
  (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01)))
  (and p2_14@899@01 (and (not break2_2@968@01) (not bypass2_2@956@01))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6875 | p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01) || p2_14@899@01 && !(break2_2@968@01) && !(bypass2_2@956@01) | live]
; [else-branch: 6875 | !(p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01) || p2_14@899@01 && !(break2_2@968@01) && !(bypass2_2@956@01)) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 6875 | p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01) || p2_14@899@01 && !(break2_2@968@01) && !(bypass2_2@956@01)]
(assert (or
  (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01)))
  (and p2_14@899@01 (and (not break2_2@968@01) (not bypass2_2@956@01)))))
; [exec]
; var p1_16: Bool
(declare-const p1_16@972@01 Bool)
; [exec]
; var p2_16: Bool
(declare-const p2_16@973@01 Bool)
; [exec]
; var p3_8: Bool
(declare-const p3_8@974@01 Bool)
; [exec]
; var p4_8: Bool
(declare-const p4_8@975@01 Bool)
; [exec]
; p1_15 := p1_14 && (!break1_2 && true)
; [eval] p1_14 && (!break1_2 && true)
(push) ; 14
; [then-branch: 6876 | !(p1_14@898@01) | live]
; [else-branch: 6876 | p1_14@898@01 | live]
(push) ; 15
; [then-branch: 6876 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6876 | p1_14@898@01]
(assert p1_14@898@01)
; [eval] !break1_2
(push) ; 16
; [then-branch: 6877 | break1_2@967@01 | live]
; [else-branch: 6877 | !(break1_2@967@01) | live]
(push) ; 17
; [then-branch: 6877 | break1_2@967@01]
(assert break1_2@967@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6877 | !(break1_2@967@01)]
(assert (not break1_2@967@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1_2@967@01) break1_2@967@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=> p1_14@898@01 (and p1_14@898@01 (or (not break1_2@967@01) break1_2@967@01))))
(declare-const p1_15@976@01 Bool)
(assert (= p1_15@976@01 (and p1_14@898@01 (not break1_2@967@01))))
; [exec]
; p2_15 := p2_14 && (!break2_2 && true)
; [eval] p2_14 && (!break2_2 && true)
(push) ; 14
; [then-branch: 6878 | !(p2_14@899@01) | live]
; [else-branch: 6878 | p2_14@899@01 | live]
(push) ; 15
; [then-branch: 6878 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6878 | p2_14@899@01]
; [eval] !break2_2
(push) ; 16
; [then-branch: 6879 | break2_2@968@01 | live]
; [else-branch: 6879 | !(break2_2@968@01) | live]
(push) ; 17
; [then-branch: 6879 | break2_2@968@01]
(assert break2_2@968@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6879 | !(break2_2@968@01)]
(assert (not break2_2@968@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break2_2@968@01) break2_2@968@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=> p2_14@899@01 (or (not break2_2@968@01) break2_2@968@01)))
(declare-const p2_15@977@01 Bool)
(assert (= p2_15@977@01 (and p2_14@899@01 (not break2_2@968@01))))
; [exec]
; idle1_2 := p1_14 && (!break1_2 && !true)
; [eval] p1_14 && (!break1_2 && !true)
(push) ; 14
; [then-branch: 6880 | !(p1_14@898@01) | live]
; [else-branch: 6880 | p1_14@898@01 | live]
(push) ; 15
; [then-branch: 6880 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6880 | p1_14@898@01]
(assert p1_14@898@01)
; [eval] !break1_2
(push) ; 16
; [then-branch: 6881 | break1_2@967@01 | live]
; [else-branch: 6881 | !(break1_2@967@01) | live]
(push) ; 17
; [then-branch: 6881 | break1_2@967@01]
(assert break1_2@967@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6881 | !(break1_2@967@01)]
(assert (not break1_2@967@01))
; [eval] !true
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break1_2@967@01) break1_2@967@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [exec]
; idle2_2 := p2_14 && (!break2_2 && !true)
; [eval] p2_14 && (!break2_2 && !true)
(push) ; 14
; [then-branch: 6882 | !(p2_14@899@01) | live]
; [else-branch: 6882 | p2_14@899@01 | live]
(push) ; 15
; [then-branch: 6882 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6882 | p2_14@899@01]
; [eval] !break2_2
(push) ; 16
; [then-branch: 6883 | break2_2@968@01 | live]
; [else-branch: 6883 | !(break2_2@968@01) | live]
(push) ; 17
; [then-branch: 6883 | break2_2@968@01]
(assert break2_2@968@01)
(pop) ; 17
(push) ; 17
; [else-branch: 6883 | !(break2_2@968@01)]
(assert (not break2_2@968@01))
; [eval] !true
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not break2_2@968@01) break2_2@968@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [eval] p1_15 && !break1_2
(push) ; 14
; [then-branch: 6884 | !(p1_15@976@01) | live]
; [else-branch: 6884 | p1_15@976@01 | live]
(push) ; 15
; [then-branch: 6884 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 15
(push) ; 15
; [else-branch: 6884 | p1_15@976@01]
(assert p1_15@976@01)
; [eval] !break1_2
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or p1_15@976@01 (not p1_15@976@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (not (and p1_15@976@01 (not break1_2@967@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and p1_15@976@01 (not break1_2@967@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6885 | p1_15@976@01 && !(break1_2@967@01) | live]
; [else-branch: 6885 | !(p1_15@976@01 && !(break1_2@967@01)) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 6885 | p1_15@976@01 && !(break1_2@967@01)]
(assert (and p1_15@976@01 (not break1_2@967@01)))
; [exec]
; _loop_measures_2 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [eval] p2_15 && !break2_2
(push) ; 15
; [then-branch: 6886 | !(p2_15@977@01) | live]
; [else-branch: 6886 | p2_15@977@01 | live]
(push) ; 16
; [then-branch: 6886 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6886 | p2_15@977@01]
(assert p2_15@977@01)
; [eval] !break2_2
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or p2_15@977@01 (not p2_15@977@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and p2_15@977@01 (not break2_2@968@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (and p2_15@977@01 (not break2_2@968@01))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6887 | p2_15@977@01 && !(break2_2@968@01) | live]
; [else-branch: 6887 | !(p2_15@977@01 && !(break2_2@968@01)) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 6887 | p2_15@977@01 && !(break2_2@968@01)]
(assert (and p2_15@977@01 (not break2_2@968@01)))
; [exec]
; _loop_measures_2_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; p1_16 := p1_15 &&
;   (!break1_2 &&
;   perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none)
; [eval] p1_15 && (!break1_2 && perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 6888 | !(p1_15@976@01) | live]
; [else-branch: 6888 | p1_15@976@01 | live]
(push) ; 17
; [then-branch: 6888 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6888 | p1_15@976@01]
; [eval] !break1_2
(push) ; 18
; [then-branch: 6889 | break1_2@967@01 | live]
; [else-branch: 6889 | !(break1_2@967@01) | live]
(push) ; 19
; [then-branch: 6889 | break1_2@967@01]
(assert break1_2@967@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6889 | !(break1_2@967@01)]
; [eval] perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_7, 526803611440346310908232101056638787))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break1_2@967@01) break1_2@967@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=> p1_15@976@01 (or (not break1_2@967@01) break1_2@967@01)))
; [exec]
; p2_16 := p2_15 &&
;   (!break2_2 &&
;   perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_15 && (!break2_2 && perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 6890 | !(p2_15@977@01) | live]
; [else-branch: 6890 | p2_15@977@01 | live]
(push) ; 17
; [then-branch: 6890 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6890 | p2_15@977@01]
; [eval] !break2_2
(push) ; 18
; [then-branch: 6891 | break2_2@968@01 | live]
; [else-branch: 6891 | !(break2_2@968@01) | live]
(push) ; 19
; [then-branch: 6891 | break2_2@968@01]
(assert break2_2@968@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6891 | !(break2_2@968@01)]
; [eval] perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break2_2@968@01) break2_2@968@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=> p2_15@977@01 (or (not break2_2@968@01) break2_2@968@01)))
; [exec]
; p3_8 := p1_15 &&
;   (!break1_2 &&
;   !(perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none))
; [eval] p1_15 && (!break1_2 && !(perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 6892 | !(p1_15@976@01) | live]
; [else-branch: 6892 | p1_15@976@01 | live]
(push) ; 17
; [then-branch: 6892 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6892 | p1_15@976@01]
; [eval] !break1_2
(push) ; 18
; [then-branch: 6893 | break1_2@967@01 | live]
; [else-branch: 6893 | !(break1_2@967@01) | live]
(push) ; 19
; [then-branch: 6893 | break1_2@967@01]
(assert break1_2@967@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6893 | !(break1_2@967@01)]
; [eval] !(perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_7, 526803611440346310908232101056638787))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break1_2@967@01) break1_2@967@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3_8@978@01 Bool)
(assert (= p3_8@978@01 (and p1_15@976@01 (not break1_2@967@01))))
; [exec]
; p4_8 := p2_15 &&
;   (!break2_2 &&
;   !(perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_15 && (!break2_2 && !(perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 6894 | !(p2_15@977@01) | live]
; [else-branch: 6894 | p2_15@977@01 | live]
(push) ; 17
; [then-branch: 6894 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6894 | p2_15@977@01]
; [eval] !break2_2
(push) ; 18
; [then-branch: 6895 | break2_2@968@01 | live]
; [else-branch: 6895 | !(break2_2@968@01) | live]
(push) ; 19
; [then-branch: 6895 | break2_2@968@01]
(assert break2_2@968@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6895 | !(break2_2@968@01)]
; [eval] !(perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break2_2@968@01) break2_2@968@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4_8@979@01 Bool)
(assert (= p4_8@979@01 (and p2_15@977@01 (not break2_2@968@01))))
; [eval] p1_16 && !break1_2
; [then-branch: 6896 | False | dead]
; [else-branch: 6896 | True | live]
(push) ; 16
; [else-branch: 6896 | True]
(pop) ; 16
; [eval] !(p1_16 && !break1_2)
; [eval] p1_16 && !break1_2
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6897 | True | live]
; [else-branch: 6897 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 6897 | True]
; [eval] p2_16 && !break2_2
; [then-branch: 6898 | False | dead]
; [else-branch: 6898 | True | live]
(push) ; 17
; [else-branch: 6898 | True]
(pop) ; 17
; [eval] !(p2_16 && !break2_2)
; [eval] p2_16 && !break2_2
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6899 | True | live]
; [else-branch: 6899 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 6899 | True]
; [eval] p1_15 && !break1_2
(push) ; 18
; [then-branch: 6900 | !(p1_15@976@01) | live]
; [else-branch: 6900 | p1_15@976@01 | live]
(push) ; 19
; [then-branch: 6900 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 19
(push) ; 19
; [else-branch: 6900 | p1_15@976@01]
; [eval] !break1_2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_15@976@01 (not break1_2@967@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_15@976@01 (not break1_2@967@01))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6901 | p1_15@976@01 && !(break1_2@967@01) | live]
; [else-branch: 6901 | !(p1_15@976@01 && !(break1_2@967@01)) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 6901 | p1_15@976@01 && !(break1_2@967@01)]
(assert (and p1_15@976@01 (not break1_2@967@01)))
; [exec]
; c_7.Container_value := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 19
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 19
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_value@980@01 $Ref)
(assert (= Container_value@980@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p2_15 && !break2_2
(push) ; 19
; [then-branch: 6902 | !(p2_15@977@01) | live]
; [else-branch: 6902 | p2_15@977@01 | live]
(push) ; 20
; [then-branch: 6902 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 20
(push) ; 20
; [else-branch: 6902 | p2_15@977@01]
; [eval] !break2_2
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_15@977@01 (not break2_2@968@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_15@977@01 (not break2_2@968@01))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6903 | p2_15@977@01 && !(break2_2@968@01) | live]
; [else-branch: 6903 | !(p2_15@977@01 && !(break2_2@968@01)) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 6903 | p2_15@977@01 && !(break2_2@968@01)]
(assert (and p2_15@977@01 (not break2_2@968@01)))
; [exec]
; c_7_0.Container_valuep := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 20
(pop) ; 20
; Joined path conditions
(declare-const Container_valuep@981@01 $Ref)
(assert (= Container_valuep@981@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p1_15 && !break1_2
(push) ; 20
; [then-branch: 6904 | !(p1_15@976@01) | live]
; [else-branch: 6904 | p1_15@976@01 | live]
(push) ; 21
; [then-branch: 6904 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 21
(push) ; 21
; [else-branch: 6904 | p1_15@976@01]
; [eval] !break1_2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not (and p1_15@976@01 (not break1_2@967@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_15@976@01 (not break1_2@967@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6905 | p1_15@976@01 && !(break1_2@967@01) | live]
; [else-branch: 6905 | !(p1_15@976@01 && !(break1_2@967@01)) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 6905 | p1_15@976@01 && !(break1_2@967@01)]
(assert (and p1_15@976@01 (not break1_2@967@01)))
; [exec]
; break1_2 := true
; [eval] p2_15 && !break2_2
(push) ; 21
; [then-branch: 6906 | !(p2_15@977@01) | live]
; [else-branch: 6906 | p2_15@977@01 | live]
(push) ; 22
; [then-branch: 6906 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 22
(push) ; 22
; [else-branch: 6906 | p2_15@977@01]
; [eval] !break2_2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_15@977@01 (not break2_2@968@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_15@977@01 (not break2_2@968@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6907 | p2_15@977@01 && !(break2_2@968@01) | live]
; [else-branch: 6907 | !(p2_15@977@01 && !(break2_2@968@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 6907 | p2_15@977@01 && !(break2_2@968@01)]
(assert (and p2_15@977@01 (not break2_2@968@01)))
; [exec]
; break2_2 := true
; [eval] p1_15 && !break1_2
(push) ; 22
; [then-branch: 6908 | !(p1_15@976@01) | live]
; [else-branch: 6908 | p1_15@976@01 | live]
(push) ; 23
; [then-branch: 6908 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 23
(push) ; 23
; [else-branch: 6908 | p1_15@976@01]
; [eval] !break1_2
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 6909 | False | dead]
; [else-branch: 6909 | True | live]
(push) ; 22
; [else-branch: 6909 | True]
(pop) ; 22
; [eval] !(p1_15 && !break1_2)
; [eval] p1_15 && !break1_2
(push) ; 22
; [then-branch: 6910 | !(p1_15@976@01) | live]
; [else-branch: 6910 | p1_15@976@01 | live]
(push) ; 23
; [then-branch: 6910 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 23
(push) ; 23
; [else-branch: 6910 | p1_15@976@01]
; [eval] !break1_2
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6911 | True | live]
; [else-branch: 6911 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 6911 | True]
; [eval] p2_15 && !break2_2
(push) ; 23
; [then-branch: 6912 | !(p2_15@977@01) | live]
; [else-branch: 6912 | p2_15@977@01 | live]
(push) ; 24
; [then-branch: 6912 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 24
(push) ; 24
; [else-branch: 6912 | p2_15@977@01]
; [eval] !break2_2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 6913 | False | dead]
; [else-branch: 6913 | True | live]
(push) ; 23
; [else-branch: 6913 | True]
(pop) ; 23
; [eval] !(p2_15 && !break2_2)
; [eval] p2_15 && !break2_2
(push) ; 23
; [then-branch: 6914 | !(p2_15@977@01) | live]
; [else-branch: 6914 | p2_15@977@01 | live]
(push) ; 24
; [then-branch: 6914 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 24
(push) ; 24
; [else-branch: 6914 | p2_15@977@01]
; [eval] !break2_2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6915 | True | live]
; [else-branch: 6915 | False | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 6915 | True]
; [exec]
; assert (p1_15 && !break1_2 ==> _loop_termination_flag_2 ==> !true) &&
;   (p2_15 && !break2_2 ==> _loop_termination_flag_2_0 ==> !true)
; [eval] p1_15 && !break1_2 ==> _loop_termination_flag_2 ==> !true
; [eval] p1_15 && !break1_2
(push) ; 24
; [then-branch: 6916 | !(p1_15@976@01) | live]
; [else-branch: 6916 | p1_15@976@01 | live]
(push) ; 25
; [then-branch: 6916 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6916 | p1_15@976@01]
; [eval] !break1_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 6917 | False | dead]
; [else-branch: 6917 | True | live]
(push) ; 25
; [else-branch: 6917 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] p2_15 && !break2_2 ==> _loop_termination_flag_2_0 ==> !true
; [eval] p2_15 && !break2_2
(push) ; 24
; [then-branch: 6918 | !(p2_15@977@01) | live]
; [else-branch: 6918 | p2_15@977@01 | live]
(push) ; 25
; [then-branch: 6918 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6918 | p2_15@977@01]
; [eval] !break2_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 6919 | False | dead]
; [else-branch: 6919 | True | live]
(push) ; 25
; [else-branch: 6919 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_14 && !bypass1_2 ==> true
; [eval] p1_14 && !bypass1_2
(push) ; 24
; [then-branch: 6920 | !(p1_14@898@01) | live]
; [else-branch: 6920 | p1_14@898@01 | live]
(push) ; 25
; [then-branch: 6920 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6920 | p1_14@898@01]
(assert p1_14@898@01)
; [eval] !bypass1_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6921 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 6921 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6921 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] p2_14 && !bypass2_2 ==> true
; [eval] p2_14 && !bypass2_2
(push) ; 24
; [then-branch: 6922 | !(p2_14@899@01) | live]
; [else-branch: 6922 | p2_14@899@01 | live]
(push) ; 25
; [then-branch: 6922 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6922 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6923 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 6923 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6923 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] p1_14 && !bypass1_2
(push) ; 24
; [then-branch: 6924 | !(p1_14@898@01) | live]
; [else-branch: 6924 | p1_14@898@01 | live]
(push) ; 25
; [then-branch: 6924 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 25
(push) ; 25
; [else-branch: 6924 | p1_14@898@01]
; [eval] !bypass1_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6925 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 6925 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 6925 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] p2_14 && !bypass2_2
(push) ; 25
; [then-branch: 6926 | !(p2_14@899@01) | live]
; [else-branch: 6926 | p2_14@899@01 | live]
(push) ; 26
; [then-branch: 6926 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 26
(push) ; 26
; [else-branch: 6926 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6927 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 6927 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 6927 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] p1_14 && !bypass1_2 ==> issubtype(typeof(c_7.Container_value), int())
; [eval] p1_14 && !bypass1_2
(push) ; 26
; [then-branch: 6928 | !(p1_14@898@01) | live]
; [else-branch: 6928 | p1_14@898@01 | live]
(push) ; 27
; [then-branch: 6928 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 27
(push) ; 27
; [else-branch: 6928 | p1_14@898@01]
; [eval] !bypass1_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6929 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 6929 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6929 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] issubtype(typeof(c_7.Container_value), int())
; [eval] typeof(c_7.Container_value)
; [eval] int()
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
(push) ; 26
(assert (not (=>
  (and p1_14@898@01 (not bypass1_2@955@01))
  (issubtype<Bool> (typeof<PyType> Container_value@980@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_14@898@01 (not bypass1_2@955@01))
  (issubtype<Bool> (typeof<PyType> Container_value@980@01) (as int<PyType>  PyType))))
; [eval] p2_14 && !bypass2_2 ==> issubtype(typeof(c_7_0.Container_valuep), int())
; [eval] p2_14 && !bypass2_2
(push) ; 26
; [then-branch: 6930 | !(p2_14@899@01) | live]
; [else-branch: 6930 | p2_14@899@01 | live]
(push) ; 27
; [then-branch: 6930 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 27
(push) ; 27
; [else-branch: 6930 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6931 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 6931 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6931 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] issubtype(typeof(c_7_0.Container_valuep), int())
; [eval] typeof(c_7_0.Container_valuep)
; [eval] int()
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
(push) ; 26
(assert (not (=>
  (and p2_14@899@01 (not bypass2_2@956@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@981@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_14@899@01 (not bypass2_2@956@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@981@01) (as int<PyType>  PyType))))
; [eval] p1_14 && !bypass1_2 ==> !idle1_2 ==> _loop_check_before_2 ==> _loop_termination_flag_2 || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))
; [eval] p1_14 && !bypass1_2
(push) ; 26
; [then-branch: 6932 | !(p1_14@898@01) | live]
; [else-branch: 6932 | p1_14@898@01 | live]
(push) ; 27
; [then-branch: 6932 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 27
(push) ; 27
; [else-branch: 6932 | p1_14@898@01]
; [eval] !bypass1_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6933 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 6933 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6933 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] !idle1_2 ==> _loop_check_before_2 ==> _loop_termination_flag_2 || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))
; [eval] !idle1_2
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6934 | True | live]
; [else-branch: 6934 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6934 | True]
; [eval] _loop_check_before_2 ==> _loop_termination_flag_2 || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))
(push) ; 30
(push) ; 31
(set-option :timeout 10)
(assert (not (not _loop_check_before_2@969@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not _loop_check_before_2@969@01))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6935 | _loop_check_before_2@969@01 | live]
; [else-branch: 6935 | !(_loop_check_before_2@969@01) | live]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 6935 | _loop_check_before_2@969@01]
(assert _loop_check_before_2@969@01)
; [eval] _loop_termination_flag_2 || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))
(push) ; 32
; [then-branch: 6936 | False | live]
; [else-branch: 6936 | True | live]
(push) ; 33
; [then-branch: 6936 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 6936 | True]
; [eval] perm(MustTerminate(_cthread_160)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_160)) == none
; [eval] perm(MustTerminate(_cthread_160))
(push) ; 34
; [then-branch: 6937 | False | live]
; [else-branch: 6937 | True | live]
(push) ; 35
; [then-branch: 6937 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 6937 | True]
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 36
; [then-branch: 6938 | False | live]
; [else-branch: 6938 | True | live]
(push) ; 37
; [then-branch: 6938 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 6938 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 38
; [then-branch: 6939 | False | live]
; [else-branch: 6939 | True | live]
(push) ; 39
; [then-branch: 6939 | False]
(assert false)
(pop) ; 39
(push) ; 39
; [else-branch: 6939 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 40
; [then-branch: 6940 | False | live]
; [else-branch: 6940 | True | live]
(push) ; 41
; [then-branch: 6940 | False]
(assert false)
(pop) ; 41
(push) ; 41
; [else-branch: 6940 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(push) ; 31
; [else-branch: 6935 | !(_loop_check_before_2@969@01)]
(assert (not _loop_check_before_2@969@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_2@969@01) _loop_check_before_2@969@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
(assert (or (not _loop_check_before_2@969@01) _loop_check_before_2@969@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (=>
  (and p1_14@898@01 (not bypass1_2@955@01))
  (and
    p1_14@898@01
    (not bypass1_2@955@01)
    (or (not _loop_check_before_2@969@01) _loop_check_before_2@969@01))))
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] p2_14 && !bypass2_2 ==> !idle2_2 ==> _loop_check_before_2_0 ==> _loop_termination_flag_2_0 || perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))
; [eval] p2_14 && !bypass2_2
(push) ; 26
; [then-branch: 6941 | !(p2_14@899@01) | live]
; [else-branch: 6941 | p2_14@899@01 | live]
(push) ; 27
; [then-branch: 6941 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 27
(push) ; 27
; [else-branch: 6941 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6942 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 6942 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6942 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] !idle2_2 ==> _loop_check_before_2_0 ==> _loop_termination_flag_2_0 || perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_2
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6943 | True | live]
; [else-branch: 6943 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6943 | True]
; [eval] _loop_check_before_2_0 ==> _loop_termination_flag_2_0 || perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))
(push) ; 30
(push) ; 31
(set-option :timeout 10)
(assert (not (not _loop_check_before_2_0@970@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not _loop_check_before_2_0@970@01))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6944 | _loop_check_before_2_0@970@01 | live]
; [else-branch: 6944 | !(_loop_check_before_2_0@970@01) | live]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 6944 | _loop_check_before_2_0@970@01]
(assert _loop_check_before_2_0@970@01)
; [eval] _loop_termination_flag_2_0 || perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))
(push) ; 32
; [then-branch: 6945 | False | live]
; [else-branch: 6945 | True | live]
(push) ; 33
; [then-branch: 6945 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 6945 | True]
; [eval] perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_160_0)) == none
; [eval] perm(MustTerminate_0(_cthread_160_0))
(push) ; 34
; [then-branch: 6946 | False | live]
; [else-branch: 6946 | True | live]
(push) ; 35
; [then-branch: 6946 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 6946 | True]
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false)
(push) ; 36
; [then-branch: 6947 | False | live]
; [else-branch: 6947 | True | live]
(push) ; 37
; [then-branch: 6947 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 6947 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false)
(push) ; 38
; [then-branch: 6948 | False | live]
; [else-branch: 6948 | True | live]
(push) ; 39
; [then-branch: 6948 | False]
(assert false)
(pop) ; 39
(push) ; 39
; [else-branch: 6948 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false)
(push) ; 40
; [then-branch: 6949 | False | live]
; [else-branch: 6949 | True | live]
(push) ; 41
; [then-branch: 6949 | False]
(assert false)
(pop) ; 41
(push) ; 41
; [else-branch: 6949 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(push) ; 31
; [else-branch: 6944 | !(_loop_check_before_2_0@970@01)]
(assert (not _loop_check_before_2_0@970@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_2_0@970@01) _loop_check_before_2_0@970@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
(assert (or (not _loop_check_before_2_0@970@01) _loop_check_before_2_0@970@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (=>
  (and p2_14@899@01 (not bypass2_2@956@01))
  (and
    p2_14@899@01
    (not bypass2_2@956@01)
    (or (not _loop_check_before_2_0@970@01) _loop_check_before_2_0@970@01))))
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] p1_14 && !bypass1_2 ==> !idle1_2 ==> !_loop_check_before_2 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] p1_14 && !bypass1_2
(push) ; 26
; [then-branch: 6950 | !(p1_14@898@01) | live]
; [else-branch: 6950 | p1_14@898@01 | live]
(push) ; 27
; [then-branch: 6950 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 27
(push) ; 27
; [else-branch: 6950 | p1_14@898@01]
; [eval] !bypass1_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6951 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 6951 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6951 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] !idle1_2 ==> !_loop_check_before_2 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] !idle1_2
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6952 | True | live]
; [else-branch: 6952 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6952 | True]
; [eval] !_loop_check_before_2 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_2
(push) ; 30
(push) ; 31
(set-option :timeout 10)
(assert (not _loop_check_before_2@969@01))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not (not _loop_check_before_2@969@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6953 | !(_loop_check_before_2@969@01) | live]
; [else-branch: 6953 | _loop_check_before_2@969@01 | live]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 6953 | !(_loop_check_before_2@969@01)]
(assert (not _loop_check_before_2@969@01))
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 32
; [then-branch: 6954 | False | live]
; [else-branch: 6954 | True | live]
(push) ; 33
; [then-branch: 6954 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 6954 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 34
; [then-branch: 6955 | False | live]
; [else-branch: 6955 | True | live]
(push) ; 35
; [then-branch: 6955 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 6955 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 36
; [then-branch: 6956 | False | live]
; [else-branch: 6956 | True | live]
(push) ; 37
; [then-branch: 6956 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 6956 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(push) ; 31
; [else-branch: 6953 | _loop_check_before_2@969@01]
(assert _loop_check_before_2@969@01)
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_2@969@01 (not _loop_check_before_2@969@01)))
(pop) ; 29
(pop) ; 28
; Joined path conditions
(assert (or _loop_check_before_2@969@01 (not _loop_check_before_2@969@01)))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (=>
  (and p1_14@898@01 (not bypass1_2@955@01))
  (and
    p1_14@898@01
    (not bypass1_2@955@01)
    (or _loop_check_before_2@969@01 (not _loop_check_before_2@969@01)))))
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] p2_14 && !bypass2_2 ==> !idle2_2 ==> !_loop_check_before_2_0 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] p2_14 && !bypass2_2
(push) ; 26
; [then-branch: 6957 | !(p2_14@899@01) | live]
; [else-branch: 6957 | p2_14@899@01 | live]
(push) ; 27
; [then-branch: 6957 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 27
(push) ; 27
; [else-branch: 6957 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6958 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 6958 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 6958 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] !idle2_2 ==> !_loop_check_before_2_0 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_2
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6959 | True | live]
; [else-branch: 6959 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 6959 | True]
; [eval] !_loop_check_before_2_0 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_2_0
(push) ; 30
(push) ; 31
(set-option :timeout 10)
(assert (not _loop_check_before_2_0@970@01))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not (not _loop_check_before_2_0@970@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6960 | !(_loop_check_before_2_0@970@01) | live]
; [else-branch: 6960 | _loop_check_before_2_0@970@01 | live]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 6960 | !(_loop_check_before_2_0@970@01)]
(assert (not _loop_check_before_2_0@970@01))
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false)
(push) ; 32
; [then-branch: 6961 | False | live]
; [else-branch: 6961 | True | live]
(push) ; 33
; [then-branch: 6961 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 6961 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false)
(push) ; 34
; [then-branch: 6962 | False | live]
; [else-branch: 6962 | True | live]
(push) ; 35
; [then-branch: 6962 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 6962 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false)
(push) ; 36
; [then-branch: 6963 | False | live]
; [else-branch: 6963 | True | live]
(push) ; 37
; [then-branch: 6963 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 6963 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(push) ; 31
; [else-branch: 6960 | _loop_check_before_2_0@970@01]
(assert _loop_check_before_2_0@970@01)
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_2_0@970@01 (not _loop_check_before_2_0@970@01)))
(pop) ; 29
(pop) ; 28
; Joined path conditions
(assert (or _loop_check_before_2_0@970@01 (not _loop_check_before_2_0@970@01)))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (=>
  (and p2_14@899@01 (not bypass2_2@956@01))
  (and
    p2_14@899@01
    (not bypass2_2@956@01)
    (or _loop_check_before_2_0@970@01 (not _loop_check_before_2_0@970@01)))))
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] bypass1_2 ==> tmp1_17 == _loop_measures_2
(push) ; 26
; [then-branch: 6964 | bypass1_2@955@01 | dead]
; [else-branch: 6964 | !(bypass1_2@955@01) | live]
(push) ; 27
; [else-branch: 6964 | !(bypass1_2@955@01)]
(pop) ; 27
(pop) ; 26
; Joined path conditions
; [eval] bypass1_2 ==> tmp1_18 == _loop_check_before_2
(push) ; 26
; [then-branch: 6965 | bypass1_2@955@01 | dead]
; [else-branch: 6965 | !(bypass1_2@955@01) | live]
(push) ; 27
; [else-branch: 6965 | !(bypass1_2@955@01)]
(pop) ; 27
(pop) ; 26
; Joined path conditions
; [eval] bypass1_2 ==> tmp1_19 == break1_2
(push) ; 26
; [then-branch: 6966 | bypass1_2@955@01 | dead]
; [else-branch: 6966 | !(bypass1_2@955@01) | live]
(push) ; 27
; [else-branch: 6966 | !(bypass1_2@955@01)]
(pop) ; 27
(pop) ; 26
; Joined path conditions
; [eval] bypass2_2 ==> tmp2_17 == _loop_measures_2_0
(push) ; 26
; [then-branch: 6967 | bypass2_2@956@01 | dead]
; [else-branch: 6967 | !(bypass2_2@956@01) | live]
(push) ; 27
; [else-branch: 6967 | !(bypass2_2@956@01)]
(pop) ; 27
(pop) ; 26
; Joined path conditions
; [eval] bypass2_2 ==> tmp2_18 == _loop_check_before_2_0
(push) ; 26
; [then-branch: 6968 | bypass2_2@956@01 | dead]
; [else-branch: 6968 | !(bypass2_2@956@01) | live]
(push) ; 27
; [else-branch: 6968 | !(bypass2_2@956@01)]
(pop) ; 27
(pop) ; 26
; Joined path conditions
; [eval] bypass2_2 ==> tmp2_19 == break2_2
(push) ; 26
; [then-branch: 6969 | bypass2_2@956@01 | dead]
; [else-branch: 6969 | !(bypass2_2@956@01) | live]
(push) ; 27
; [else-branch: 6969 | !(bypass2_2@956@01)]
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
; [eval] !(p2_15 && !break2_2)
; [eval] p2_15 && !break2_2
(push) ; 21
; [then-branch: 6970 | !(p2_15@977@01) | live]
; [else-branch: 6970 | p2_15@977@01 | live]
(push) ; 22
; [then-branch: 6970 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 22
(push) ; 22
; [else-branch: 6970 | p2_15@977@01]
(assert p2_15@977@01)
; [eval] !break2_2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_15@977@01 (not break2_2@968@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6971 | !(p2_15@977@01 && !(break2_2@968@01)) | dead]
; [else-branch: 6971 | p2_15@977@01 && !(break2_2@968@01) | live]
(set-option :timeout 0)
(push) ; 21
; [else-branch: 6971 | p2_15@977@01 && !(break2_2@968@01)]
(assert (and p2_15@977@01 (not break2_2@968@01)))
(pop) ; 21
(pop) ; 20
; [eval] !(p1_15 && !break1_2)
; [eval] p1_15 && !break1_2
(push) ; 20
; [then-branch: 6972 | !(p1_15@976@01) | live]
; [else-branch: 6972 | p1_15@976@01 | live]
(push) ; 21
; [then-branch: 6972 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 21
(push) ; 21
; [else-branch: 6972 | p1_15@976@01]
(assert p1_15@976@01)
; [eval] !break1_2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_15@976@01 (not break1_2@967@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6973 | !(p1_15@976@01 && !(break1_2@967@01)) | dead]
; [else-branch: 6973 | p1_15@976@01 && !(break1_2@967@01) | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 6973 | p1_15@976@01 && !(break1_2@967@01)]
(assert (and p1_15@976@01 (not break1_2@967@01)))
(pop) ; 20
(pop) ; 19
; [eval] !(p2_15 && !break2_2)
; [eval] p2_15 && !break2_2
(push) ; 19
; [then-branch: 6974 | !(p2_15@977@01) | live]
; [else-branch: 6974 | p2_15@977@01 | live]
(push) ; 20
; [then-branch: 6974 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 20
(push) ; 20
; [else-branch: 6974 | p2_15@977@01]
(assert p2_15@977@01)
; [eval] !break2_2
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_15@977@01 (not break2_2@968@01))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6975 | !(p2_15@977@01 && !(break2_2@968@01)) | dead]
; [else-branch: 6975 | p2_15@977@01 && !(break2_2@968@01) | live]
(set-option :timeout 0)
(push) ; 19
; [else-branch: 6975 | p2_15@977@01 && !(break2_2@968@01)]
(assert (and p2_15@977@01 (not break2_2@968@01)))
(pop) ; 19
(pop) ; 18
; [eval] !(p1_15 && !break1_2)
; [eval] p1_15 && !break1_2
(push) ; 18
; [then-branch: 6976 | !(p1_15@976@01) | live]
; [else-branch: 6976 | p1_15@976@01 | live]
(push) ; 19
; [then-branch: 6976 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 19
(push) ; 19
; [else-branch: 6976 | p1_15@976@01]
(assert p1_15@976@01)
; [eval] !break1_2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_15@976@01 (not break1_2@967@01))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6977 | !(p1_15@976@01 && !(break1_2@967@01)) | dead]
; [else-branch: 6977 | p1_15@976@01 && !(break1_2@967@01) | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 6977 | p1_15@976@01 && !(break1_2@967@01)]
(assert (and p1_15@976@01 (not break1_2@967@01)))
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 6887 | !(p2_15@977@01 && !(break2_2@968@01))]
(assert (not (and p2_15@977@01 (not break2_2@968@01))))
(pop) ; 15
; [eval] !(p2_15 && !break2_2)
; [eval] p2_15 && !break2_2
(push) ; 15
; [then-branch: 6978 | !(p2_15@977@01) | live]
; [else-branch: 6978 | p2_15@977@01 | live]
(push) ; 16
; [then-branch: 6978 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 16
(push) ; 16
; [else-branch: 6978 | p2_15@977@01]
(assert p2_15@977@01)
; [eval] !break2_2
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (and p2_15@977@01 (not break2_2@968@01))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and p2_15@977@01 (not break2_2@968@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6979 | !(p2_15@977@01 && !(break2_2@968@01)) | live]
; [else-branch: 6979 | p2_15@977@01 && !(break2_2@968@01) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 6979 | !(p2_15@977@01 && !(break2_2@968@01))]
(assert (not (and p2_15@977@01 (not break2_2@968@01))))
; [exec]
; p1_16 := p1_15 &&
;   (!break1_2 &&
;   perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none)
; [eval] p1_15 && (!break1_2 && perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 6980 | !(p1_15@976@01) | live]
; [else-branch: 6980 | p1_15@976@01 | live]
(push) ; 17
; [then-branch: 6980 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6980 | p1_15@976@01]
(assert p1_15@976@01)
; [eval] !break1_2
(push) ; 18
; [then-branch: 6981 | break1_2@967@01 | live]
; [else-branch: 6981 | !(break1_2@967@01) | live]
(push) ; 19
; [then-branch: 6981 | break1_2@967@01]
(assert break1_2@967@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6981 | !(break1_2@967@01)]
(assert (not break1_2@967@01))
; [eval] perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_7, 526803611440346310908232101056638787))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break1_2@967@01) break1_2@967@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=> p1_15@976@01 (and p1_15@976@01 (or (not break1_2@967@01) break1_2@967@01))))
; [exec]
; p2_16 := p2_15 &&
;   (!break2_2 &&
;   perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_15 && (!break2_2 && perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 6982 | !(p2_15@977@01) | live]
; [else-branch: 6982 | p2_15@977@01 | live]
(push) ; 17
; [then-branch: 6982 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6982 | p2_15@977@01]
(assert p2_15@977@01)
; [eval] !break2_2
(push) ; 18
; [then-branch: 6983 | break2_2@968@01 | live]
; [else-branch: 6983 | !(break2_2@968@01) | live]
(push) ; 19
; [then-branch: 6983 | break2_2@968@01]
(assert break2_2@968@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6983 | !(break2_2@968@01)]
(assert (not break2_2@968@01))
; [eval] perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break2_2@968@01) break2_2@968@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=> p2_15@977@01 (and p2_15@977@01 (or (not break2_2@968@01) break2_2@968@01))))
; [exec]
; p3_8 := p1_15 &&
;   (!break1_2 &&
;   !(perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none))
; [eval] p1_15 && (!break1_2 && !(perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 6984 | !(p1_15@976@01) | live]
; [else-branch: 6984 | p1_15@976@01 | live]
(push) ; 17
; [then-branch: 6984 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6984 | p1_15@976@01]
(assert p1_15@976@01)
; [eval] !break1_2
(push) ; 18
; [then-branch: 6985 | break1_2@967@01 | live]
; [else-branch: 6985 | !(break1_2@967@01) | live]
(push) ; 19
; [then-branch: 6985 | break1_2@967@01]
(assert break1_2@967@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6985 | !(break1_2@967@01)]
(assert (not break1_2@967@01))
; [eval] !(perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_7, 526803611440346310908232101056638787))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break1_2@967@01) break1_2@967@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3_8@982@01 Bool)
(assert (= p3_8@982@01 (and p1_15@976@01 (not break1_2@967@01))))
; [exec]
; p4_8 := p2_15 &&
;   (!break2_2 &&
;   !(perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_15 && (!break2_2 && !(perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 6986 | !(p2_15@977@01) | live]
; [else-branch: 6986 | p2_15@977@01 | live]
(push) ; 17
; [then-branch: 6986 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 17
(push) ; 17
; [else-branch: 6986 | p2_15@977@01]
(assert p2_15@977@01)
; [eval] !break2_2
(push) ; 18
; [then-branch: 6987 | break2_2@968@01 | live]
; [else-branch: 6987 | !(break2_2@968@01) | live]
(push) ; 19
; [then-branch: 6987 | break2_2@968@01]
(assert break2_2@968@01)
(pop) ; 19
(push) ; 19
; [else-branch: 6987 | !(break2_2@968@01)]
(assert (not break2_2@968@01))
; [eval] !(perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break2_2@968@01) break2_2@968@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4_8@983@01 Bool)
(assert (= p4_8@983@01 (and p2_15@977@01 (not break2_2@968@01))))
; [eval] p1_16 && !break1_2
; [then-branch: 6988 | False | dead]
; [else-branch: 6988 | True | live]
(push) ; 16
; [else-branch: 6988 | True]
(pop) ; 16
; [eval] !(p1_16 && !break1_2)
; [eval] p1_16 && !break1_2
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6989 | True | live]
; [else-branch: 6989 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 6989 | True]
; [eval] p2_16 && !break2_2
; [then-branch: 6990 | False | dead]
; [else-branch: 6990 | True | live]
(push) ; 17
; [else-branch: 6990 | True]
(pop) ; 17
; [eval] !(p2_16 && !break2_2)
; [eval] p2_16 && !break2_2
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6991 | True | live]
; [else-branch: 6991 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 6991 | True]
; [eval] p1_15 && !break1_2
(push) ; 18
; [then-branch: 6992 | !(p1_15@976@01) | live]
; [else-branch: 6992 | p1_15@976@01 | live]
(push) ; 19
; [then-branch: 6992 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 19
(push) ; 19
; [else-branch: 6992 | p1_15@976@01]
(assert p1_15@976@01)
; [eval] !break1_2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (not (and p1_15@976@01 (not break1_2@967@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_15@976@01 (not break1_2@967@01))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6993 | p1_15@976@01 && !(break1_2@967@01) | live]
; [else-branch: 6993 | !(p1_15@976@01 && !(break1_2@967@01)) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 6993 | p1_15@976@01 && !(break1_2@967@01)]
(assert (and p1_15@976@01 (not break1_2@967@01)))
; [exec]
; c_7.Container_value := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 19
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 19
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_value@984@01 $Ref)
(assert (= Container_value@984@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p2_15 && !break2_2
(push) ; 19
; [then-branch: 6994 | !(p2_15@977@01) | live]
; [else-branch: 6994 | p2_15@977@01 | live]
(push) ; 20
; [then-branch: 6994 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 20
(push) ; 20
; [else-branch: 6994 | p2_15@977@01]
(assert p2_15@977@01)
; [eval] !break2_2
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 6995 | p2_15@977@01 && !(break2_2@968@01) | dead]
; [else-branch: 6995 | !(p2_15@977@01 && !(break2_2@968@01)) | live]
(push) ; 19
; [else-branch: 6995 | !(p2_15@977@01 && !(break2_2@968@01))]
(pop) ; 19
; [eval] !(p2_15 && !break2_2)
; [eval] p2_15 && !break2_2
(push) ; 19
; [then-branch: 6996 | !(p2_15@977@01) | live]
; [else-branch: 6996 | p2_15@977@01 | live]
(push) ; 20
; [then-branch: 6996 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 20
(push) ; 20
; [else-branch: 6996 | p2_15@977@01]
(assert p2_15@977@01)
; [eval] !break2_2
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_15@977@01 (not break2_2@968@01))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6997 | !(p2_15@977@01 && !(break2_2@968@01)) | live]
; [else-branch: 6997 | p2_15@977@01 && !(break2_2@968@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 6997 | !(p2_15@977@01 && !(break2_2@968@01))]
; [eval] p1_15 && !break1_2
(push) ; 20
; [then-branch: 6998 | !(p1_15@976@01) | live]
; [else-branch: 6998 | p1_15@976@01 | live]
(push) ; 21
; [then-branch: 6998 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 21
(push) ; 21
; [else-branch: 6998 | p1_15@976@01]
; [eval] !break1_2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not (and p1_15@976@01 (not break1_2@967@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_15@976@01 (not break1_2@967@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6999 | p1_15@976@01 && !(break1_2@967@01) | live]
; [else-branch: 6999 | !(p1_15@976@01 && !(break1_2@967@01)) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 6999 | p1_15@976@01 && !(break1_2@967@01)]
(assert (and p1_15@976@01 (not break1_2@967@01)))
; [exec]
; break1_2 := true
; [eval] p2_15 && !break2_2
(push) ; 21
; [then-branch: 7000 | !(p2_15@977@01) | live]
; [else-branch: 7000 | p2_15@977@01 | live]
(push) ; 22
; [then-branch: 7000 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 22
(push) ; 22
; [else-branch: 7000 | p2_15@977@01]
(assert p2_15@977@01)
; [eval] !break2_2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 7001 | p2_15@977@01 && !(break2_2@968@01) | dead]
; [else-branch: 7001 | !(p2_15@977@01 && !(break2_2@968@01)) | live]
(push) ; 21
; [else-branch: 7001 | !(p2_15@977@01 && !(break2_2@968@01))]
(pop) ; 21
; [eval] !(p2_15 && !break2_2)
; [eval] p2_15 && !break2_2
(push) ; 21
; [then-branch: 7002 | !(p2_15@977@01) | live]
; [else-branch: 7002 | p2_15@977@01 | live]
(push) ; 22
; [then-branch: 7002 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 22
(push) ; 22
; [else-branch: 7002 | p2_15@977@01]
(assert p2_15@977@01)
; [eval] !break2_2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_15@977@01 (not break2_2@968@01))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7003 | !(p2_15@977@01 && !(break2_2@968@01)) | live]
; [else-branch: 7003 | p2_15@977@01 && !(break2_2@968@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 7003 | !(p2_15@977@01 && !(break2_2@968@01))]
; [eval] p1_15 && !break1_2
(push) ; 22
; [then-branch: 7004 | !(p1_15@976@01) | live]
; [else-branch: 7004 | p1_15@976@01 | live]
(push) ; 23
; [then-branch: 7004 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 23
(push) ; 23
; [else-branch: 7004 | p1_15@976@01]
; [eval] !break1_2
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 7005 | False | dead]
; [else-branch: 7005 | True | live]
(push) ; 22
; [else-branch: 7005 | True]
(pop) ; 22
; [eval] !(p1_15 && !break1_2)
; [eval] p1_15 && !break1_2
(push) ; 22
; [then-branch: 7006 | !(p1_15@976@01) | live]
; [else-branch: 7006 | p1_15@976@01 | live]
(push) ; 23
; [then-branch: 7006 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 23
(push) ; 23
; [else-branch: 7006 | p1_15@976@01]
; [eval] !break1_2
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7007 | True | live]
; [else-branch: 7007 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 7007 | True]
; [eval] p2_15 && !break2_2
(push) ; 23
; [then-branch: 7008 | !(p2_15@977@01) | live]
; [else-branch: 7008 | p2_15@977@01 | live]
(push) ; 24
; [then-branch: 7008 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 24
(push) ; 24
; [else-branch: 7008 | p2_15@977@01]
(assert p2_15@977@01)
; [eval] !break2_2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 7009 | p2_15@977@01 && !(break2_2@968@01) | dead]
; [else-branch: 7009 | !(p2_15@977@01 && !(break2_2@968@01)) | live]
(push) ; 23
; [else-branch: 7009 | !(p2_15@977@01 && !(break2_2@968@01))]
(pop) ; 23
; [eval] !(p2_15 && !break2_2)
; [eval] p2_15 && !break2_2
(push) ; 23
; [then-branch: 7010 | !(p2_15@977@01) | live]
; [else-branch: 7010 | p2_15@977@01 | live]
(push) ; 24
; [then-branch: 7010 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 24
(push) ; 24
; [else-branch: 7010 | p2_15@977@01]
(assert p2_15@977@01)
; [eval] !break2_2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_15@977@01 (not break2_2@968@01))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7011 | !(p2_15@977@01 && !(break2_2@968@01)) | live]
; [else-branch: 7011 | p2_15@977@01 && !(break2_2@968@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 7011 | !(p2_15@977@01 && !(break2_2@968@01))]
; [exec]
; assert (p1_15 && !break1_2 ==> _loop_termination_flag_2 ==> !true) &&
;   (p2_15 && !break2_2 ==> _loop_termination_flag_2_0 ==> !true)
; [eval] p1_15 && !break1_2 ==> _loop_termination_flag_2 ==> !true
; [eval] p1_15 && !break1_2
(push) ; 24
; [then-branch: 7012 | !(p1_15@976@01) | live]
; [else-branch: 7012 | p1_15@976@01 | live]
(push) ; 25
; [then-branch: 7012 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 25
(push) ; 25
; [else-branch: 7012 | p1_15@976@01]
; [eval] !break1_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 7013 | False | dead]
; [else-branch: 7013 | True | live]
(push) ; 25
; [else-branch: 7013 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] p2_15 && !break2_2 ==> _loop_termination_flag_2_0 ==> !true
; [eval] p2_15 && !break2_2
(push) ; 24
; [then-branch: 7014 | !(p2_15@977@01) | live]
; [else-branch: 7014 | p2_15@977@01 | live]
(push) ; 25
; [then-branch: 7014 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 25
(push) ; 25
; [else-branch: 7014 | p2_15@977@01]
(assert p2_15@977@01)
; [eval] !break2_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 7015 | p2_15@977@01 && !(break2_2@968@01) | dead]
; [else-branch: 7015 | !(p2_15@977@01 && !(break2_2@968@01)) | live]
(push) ; 25
; [else-branch: 7015 | !(p2_15@977@01 && !(break2_2@968@01))]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_14 && !bypass1_2 ==> true
; [eval] p1_14 && !bypass1_2
(push) ; 24
; [then-branch: 7016 | !(p1_14@898@01) | live]
; [else-branch: 7016 | p1_14@898@01 | live]
(push) ; 25
; [then-branch: 7016 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 25
(push) ; 25
; [else-branch: 7016 | p1_14@898@01]
(assert p1_14@898@01)
; [eval] !bypass1_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7017 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 7017 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 7017 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] p2_14 && !bypass2_2 ==> true
; [eval] p2_14 && !bypass2_2
(push) ; 24
; [then-branch: 7018 | !(p2_14@899@01) | live]
; [else-branch: 7018 | p2_14@899@01 | live]
(push) ; 25
; [then-branch: 7018 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 25
(push) ; 25
; [else-branch: 7018 | p2_14@899@01]
(assert p2_14@899@01)
; [eval] !bypass2_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7019 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 7019 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 7019 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] p1_14 && !bypass1_2
(push) ; 24
; [then-branch: 7020 | !(p1_14@898@01) | live]
; [else-branch: 7020 | p1_14@898@01 | live]
(push) ; 25
; [then-branch: 7020 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 25
(push) ; 25
; [else-branch: 7020 | p1_14@898@01]
; [eval] !bypass1_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7021 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 7021 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 7021 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] p2_14 && !bypass2_2
(push) ; 25
; [then-branch: 7022 | !(p2_14@899@01) | live]
; [else-branch: 7022 | p2_14@899@01 | live]
(push) ; 26
; [then-branch: 7022 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 26
(push) ; 26
; [else-branch: 7022 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7023 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 7023 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 7023 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] p1_14 && !bypass1_2 ==> issubtype(typeof(c_7.Container_value), int())
; [eval] p1_14 && !bypass1_2
(push) ; 26
; [then-branch: 7024 | !(p1_14@898@01) | live]
; [else-branch: 7024 | p1_14@898@01 | live]
(push) ; 27
; [then-branch: 7024 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 27
(push) ; 27
; [else-branch: 7024 | p1_14@898@01]
; [eval] !bypass1_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7025 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 7025 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 7025 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] issubtype(typeof(c_7.Container_value), int())
; [eval] typeof(c_7.Container_value)
; [eval] int()
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
(push) ; 26
(assert (not (=>
  (and p1_14@898@01 (not bypass1_2@955@01))
  (issubtype<Bool> (typeof<PyType> Container_value@984@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_14@898@01 (not bypass1_2@955@01))
  (issubtype<Bool> (typeof<PyType> Container_value@984@01) (as int<PyType>  PyType))))
; [eval] p2_14 && !bypass2_2 ==> issubtype(typeof(c_7_0.Container_valuep), int())
; [eval] p2_14 && !bypass2_2
(push) ; 26
; [then-branch: 7026 | !(p2_14@899@01) | live]
; [else-branch: 7026 | p2_14@899@01 | live]
(push) ; 27
; [then-branch: 7026 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 27
(push) ; 27
; [else-branch: 7026 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7027 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 7027 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 7027 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] issubtype(typeof(c_7_0.Container_valuep), int())
; [eval] typeof(c_7_0.Container_valuep)
; [eval] int()
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] p1_14 && !bypass1_2 ==> !idle1_2 ==> _loop_check_before_2 ==> _loop_termination_flag_2 || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))
; [eval] p1_14 && !bypass1_2
(push) ; 26
; [then-branch: 7028 | !(p1_14@898@01) | live]
; [else-branch: 7028 | p1_14@898@01 | live]
(push) ; 27
; [then-branch: 7028 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 27
(push) ; 27
; [else-branch: 7028 | p1_14@898@01]
; [eval] !bypass1_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7029 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 7029 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 7029 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] !idle1_2 ==> _loop_check_before_2 ==> _loop_termination_flag_2 || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))
; [eval] !idle1_2
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7030 | True | live]
; [else-branch: 7030 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 7030 | True]
; [eval] _loop_check_before_2 ==> _loop_termination_flag_2 || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))
(push) ; 30
(push) ; 31
(set-option :timeout 10)
(assert (not (not _loop_check_before_2@969@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not _loop_check_before_2@969@01))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7031 | _loop_check_before_2@969@01 | live]
; [else-branch: 7031 | !(_loop_check_before_2@969@01) | live]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 7031 | _loop_check_before_2@969@01]
(assert _loop_check_before_2@969@01)
; [eval] _loop_termination_flag_2 || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))
(push) ; 32
; [then-branch: 7032 | False | live]
; [else-branch: 7032 | True | live]
(push) ; 33
; [then-branch: 7032 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 7032 | True]
; [eval] perm(MustTerminate(_cthread_160)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_160)) == none
; [eval] perm(MustTerminate(_cthread_160))
(push) ; 34
; [then-branch: 7033 | False | live]
; [else-branch: 7033 | True | live]
(push) ; 35
; [then-branch: 7033 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 7033 | True]
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 36
; [then-branch: 7034 | False | live]
; [else-branch: 7034 | True | live]
(push) ; 37
; [then-branch: 7034 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 7034 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 38
; [then-branch: 7035 | False | live]
; [else-branch: 7035 | True | live]
(push) ; 39
; [then-branch: 7035 | False]
(assert false)
(pop) ; 39
(push) ; 39
; [else-branch: 7035 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 40
; [then-branch: 7036 | False | live]
; [else-branch: 7036 | True | live]
(push) ; 41
; [then-branch: 7036 | False]
(assert false)
(pop) ; 41
(push) ; 41
; [else-branch: 7036 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(push) ; 31
; [else-branch: 7031 | !(_loop_check_before_2@969@01)]
(assert (not _loop_check_before_2@969@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_2@969@01) _loop_check_before_2@969@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
(assert (or (not _loop_check_before_2@969@01) _loop_check_before_2@969@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (=>
  (and p1_14@898@01 (not bypass1_2@955@01))
  (and
    p1_14@898@01
    (not bypass1_2@955@01)
    (or (not _loop_check_before_2@969@01) _loop_check_before_2@969@01))))
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] p2_14 && !bypass2_2 ==> !idle2_2 ==> _loop_check_before_2_0 ==> _loop_termination_flag_2_0 || perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))
; [eval] p2_14 && !bypass2_2
(push) ; 26
; [then-branch: 7037 | !(p2_14@899@01) | live]
; [else-branch: 7037 | p2_14@899@01 | live]
(push) ; 27
; [then-branch: 7037 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 27
(push) ; 27
; [else-branch: 7037 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7038 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 7038 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 7038 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] !idle2_2 ==> _loop_check_before_2_0 ==> _loop_termination_flag_2_0 || perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_2
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7039 | True | live]
; [else-branch: 7039 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 7039 | True]
; [eval] _loop_check_before_2_0 ==> _loop_termination_flag_2_0 || perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))
(push) ; 30
(push) ; 31
(set-option :timeout 10)
(assert (not (not _loop_check_before_2_0@970@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not _loop_check_before_2_0@970@01))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7040 | _loop_check_before_2_0@970@01 | live]
; [else-branch: 7040 | !(_loop_check_before_2_0@970@01) | live]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 7040 | _loop_check_before_2_0@970@01]
(assert _loop_check_before_2_0@970@01)
; [eval] _loop_termination_flag_2_0 || perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))
(push) ; 32
; [then-branch: 7041 | False | live]
; [else-branch: 7041 | True | live]
(push) ; 33
; [then-branch: 7041 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 7041 | True]
; [eval] perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_160_0)) == none
; [eval] perm(MustTerminate_0(_cthread_160_0))
(push) ; 34
; [then-branch: 7042 | False | live]
; [else-branch: 7042 | True | live]
(push) ; 35
; [then-branch: 7042 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 7042 | True]
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false)
(push) ; 36
; [then-branch: 7043 | False | live]
; [else-branch: 7043 | True | live]
(push) ; 37
; [then-branch: 7043 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 7043 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false)
(push) ; 38
; [then-branch: 7044 | False | live]
; [else-branch: 7044 | True | live]
(push) ; 39
; [then-branch: 7044 | False]
(assert false)
(pop) ; 39
(push) ; 39
; [else-branch: 7044 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false)
(push) ; 40
; [then-branch: 7045 | False | live]
; [else-branch: 7045 | True | live]
(push) ; 41
; [then-branch: 7045 | False]
(assert false)
(pop) ; 41
(push) ; 41
; [else-branch: 7045 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(push) ; 31
; [else-branch: 7040 | !(_loop_check_before_2_0@970@01)]
(assert (not _loop_check_before_2_0@970@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_2_0@970@01) _loop_check_before_2_0@970@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
(assert (or (not _loop_check_before_2_0@970@01) _loop_check_before_2_0@970@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (=>
  (and p2_14@899@01 (not bypass2_2@956@01))
  (and
    p2_14@899@01
    (not bypass2_2@956@01)
    (or (not _loop_check_before_2_0@970@01) _loop_check_before_2_0@970@01))))
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] p1_14 && !bypass1_2 ==> !idle1_2 ==> !_loop_check_before_2 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] p1_14 && !bypass1_2
(push) ; 26
; [then-branch: 7046 | !(p1_14@898@01) | live]
; [else-branch: 7046 | p1_14@898@01 | live]
(push) ; 27
; [then-branch: 7046 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 27
(push) ; 27
; [else-branch: 7046 | p1_14@898@01]
; [eval] !bypass1_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7047 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 7047 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 7047 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] !idle1_2 ==> !_loop_check_before_2 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] !idle1_2
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7048 | True | live]
; [else-branch: 7048 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 7048 | True]
; [eval] !_loop_check_before_2 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_2
(push) ; 30
(push) ; 31
(set-option :timeout 10)
(assert (not _loop_check_before_2@969@01))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not (not _loop_check_before_2@969@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7049 | !(_loop_check_before_2@969@01) | live]
; [else-branch: 7049 | _loop_check_before_2@969@01 | live]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 7049 | !(_loop_check_before_2@969@01)]
(assert (not _loop_check_before_2@969@01))
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 32
; [then-branch: 7050 | False | live]
; [else-branch: 7050 | True | live]
(push) ; 33
; [then-branch: 7050 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 7050 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 34
; [then-branch: 7051 | False | live]
; [else-branch: 7051 | True | live]
(push) ; 35
; [then-branch: 7051 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 7051 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 36
; [then-branch: 7052 | False | live]
; [else-branch: 7052 | True | live]
(push) ; 37
; [then-branch: 7052 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 7052 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(push) ; 31
; [else-branch: 7049 | _loop_check_before_2@969@01]
(assert _loop_check_before_2@969@01)
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_2@969@01 (not _loop_check_before_2@969@01)))
(pop) ; 29
(pop) ; 28
; Joined path conditions
(assert (or _loop_check_before_2@969@01 (not _loop_check_before_2@969@01)))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (=>
  (and p1_14@898@01 (not bypass1_2@955@01))
  (and
    p1_14@898@01
    (not bypass1_2@955@01)
    (or _loop_check_before_2@969@01 (not _loop_check_before_2@969@01)))))
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] p2_14 && !bypass2_2 ==> !idle2_2 ==> !_loop_check_before_2_0 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] p2_14 && !bypass2_2
(push) ; 26
; [then-branch: 7053 | !(p2_14@899@01) | live]
; [else-branch: 7053 | p2_14@899@01 | live]
(push) ; 27
; [then-branch: 7053 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 27
(push) ; 27
; [else-branch: 7053 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7054 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 7054 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 7054 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] !idle2_2 ==> !_loop_check_before_2_0 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_2
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7055 | True | live]
; [else-branch: 7055 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 7055 | True]
; [eval] !_loop_check_before_2_0 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_2_0
(push) ; 30
(push) ; 31
(set-option :timeout 10)
(assert (not _loop_check_before_2_0@970@01))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not (not _loop_check_before_2_0@970@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7056 | !(_loop_check_before_2_0@970@01) | live]
; [else-branch: 7056 | _loop_check_before_2_0@970@01 | live]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 7056 | !(_loop_check_before_2_0@970@01)]
(assert (not _loop_check_before_2_0@970@01))
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false)
(push) ; 32
; [then-branch: 7057 | False | live]
; [else-branch: 7057 | True | live]
(push) ; 33
; [then-branch: 7057 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 7057 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false)
(push) ; 34
; [then-branch: 7058 | False | live]
; [else-branch: 7058 | True | live]
(push) ; 35
; [then-branch: 7058 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 7058 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false)
(push) ; 36
; [then-branch: 7059 | False | live]
; [else-branch: 7059 | True | live]
(push) ; 37
; [then-branch: 7059 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 7059 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(push) ; 31
; [else-branch: 7056 | _loop_check_before_2_0@970@01]
(assert _loop_check_before_2_0@970@01)
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_2_0@970@01 (not _loop_check_before_2_0@970@01)))
(pop) ; 29
(pop) ; 28
; Joined path conditions
(assert (or _loop_check_before_2_0@970@01 (not _loop_check_before_2_0@970@01)))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (=>
  (and p2_14@899@01 (not bypass2_2@956@01))
  (and
    p2_14@899@01
    (not bypass2_2@956@01)
    (or _loop_check_before_2_0@970@01 (not _loop_check_before_2_0@970@01)))))
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] bypass1_2 ==> tmp1_17 == _loop_measures_2
(push) ; 26
; [then-branch: 7060 | bypass1_2@955@01 | dead]
; [else-branch: 7060 | !(bypass1_2@955@01) | live]
(push) ; 27
; [else-branch: 7060 | !(bypass1_2@955@01)]
(pop) ; 27
(pop) ; 26
; Joined path conditions
; [eval] bypass1_2 ==> tmp1_18 == _loop_check_before_2
(push) ; 26
; [then-branch: 7061 | bypass1_2@955@01 | dead]
; [else-branch: 7061 | !(bypass1_2@955@01) | live]
(push) ; 27
; [else-branch: 7061 | !(bypass1_2@955@01)]
(pop) ; 27
(pop) ; 26
; Joined path conditions
; [eval] bypass1_2 ==> tmp1_19 == break1_2
(push) ; 26
; [then-branch: 7062 | bypass1_2@955@01 | dead]
; [else-branch: 7062 | !(bypass1_2@955@01) | live]
(push) ; 27
; [else-branch: 7062 | !(bypass1_2@955@01)]
(pop) ; 27
(pop) ; 26
; Joined path conditions
; [eval] bypass2_2 ==> tmp2_17 == _loop_measures_2_0
(push) ; 26
; [then-branch: 7063 | bypass2_2@956@01 | dead]
; [else-branch: 7063 | !(bypass2_2@956@01) | live]
(push) ; 27
; [else-branch: 7063 | !(bypass2_2@956@01)]
(pop) ; 27
(pop) ; 26
; Joined path conditions
; [eval] bypass2_2 ==> tmp2_18 == _loop_check_before_2_0
(push) ; 26
; [then-branch: 7064 | bypass2_2@956@01 | dead]
; [else-branch: 7064 | !(bypass2_2@956@01) | live]
(push) ; 27
; [else-branch: 7064 | !(bypass2_2@956@01)]
(pop) ; 27
(pop) ; 26
; Joined path conditions
; [eval] bypass2_2 ==> tmp2_19 == break2_2
(push) ; 26
; [then-branch: 7065 | bypass2_2@956@01 | dead]
; [else-branch: 7065 | !(bypass2_2@956@01) | live]
(push) ; 27
; [else-branch: 7065 | !(bypass2_2@956@01)]
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
; [eval] !(p1_15 && !break1_2)
; [eval] p1_15 && !break1_2
(push) ; 20
; [then-branch: 7066 | !(p1_15@976@01) | live]
; [else-branch: 7066 | p1_15@976@01 | live]
(push) ; 21
; [then-branch: 7066 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 21
(push) ; 21
; [else-branch: 7066 | p1_15@976@01]
(assert p1_15@976@01)
; [eval] !break1_2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_15@976@01 (not break1_2@967@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7067 | !(p1_15@976@01 && !(break1_2@967@01)) | dead]
; [else-branch: 7067 | p1_15@976@01 && !(break1_2@967@01) | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 7067 | p1_15@976@01 && !(break1_2@967@01)]
(assert (and p1_15@976@01 (not break1_2@967@01)))
(pop) ; 20
(pop) ; 19
(pop) ; 18
; [eval] !(p1_15 && !break1_2)
; [eval] p1_15 && !break1_2
(push) ; 18
; [then-branch: 7068 | !(p1_15@976@01) | live]
; [else-branch: 7068 | p1_15@976@01 | live]
(push) ; 19
; [then-branch: 7068 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 19
(push) ; 19
; [else-branch: 7068 | p1_15@976@01]
(assert p1_15@976@01)
; [eval] !break1_2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_15@976@01 (not break1_2@967@01))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7069 | !(p1_15@976@01 && !(break1_2@967@01)) | dead]
; [else-branch: 7069 | p1_15@976@01 && !(break1_2@967@01) | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 7069 | p1_15@976@01 && !(break1_2@967@01)]
(assert (and p1_15@976@01 (not break1_2@967@01)))
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 6979 | p2_15@977@01 && !(break2_2@968@01)]
(assert (and p2_15@977@01 (not break2_2@968@01)))
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 6885 | !(p1_15@976@01 && !(break1_2@967@01))]
(assert (not (and p1_15@976@01 (not break1_2@967@01))))
(pop) ; 14
; [eval] !(p1_15 && !break1_2)
; [eval] p1_15 && !break1_2
(push) ; 14
; [then-branch: 7070 | !(p1_15@976@01) | live]
; [else-branch: 7070 | p1_15@976@01 | live]
(push) ; 15
; [then-branch: 7070 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 15
(push) ; 15
; [else-branch: 7070 | p1_15@976@01]
(assert p1_15@976@01)
; [eval] !break1_2
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (and p1_15@976@01 (not break1_2@967@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (and p1_15@976@01 (not break1_2@967@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7071 | !(p1_15@976@01 && !(break1_2@967@01)) | live]
; [else-branch: 7071 | p1_15@976@01 && !(break1_2@967@01) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 7071 | !(p1_15@976@01 && !(break1_2@967@01))]
(assert (not (and p1_15@976@01 (not break1_2@967@01))))
; [eval] p2_15 && !break2_2
(push) ; 15
; [then-branch: 7072 | !(p2_15@977@01) | live]
; [else-branch: 7072 | p2_15@977@01 | live]
(push) ; 16
; [then-branch: 7072 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 16
(push) ; 16
; [else-branch: 7072 | p2_15@977@01]
(assert p2_15@977@01)
; [eval] !break2_2
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or p2_15@977@01 (not p2_15@977@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and p2_15@977@01 (not break2_2@968@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (and p2_15@977@01 (not break2_2@968@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7073 | p2_15@977@01 && !(break2_2@968@01) | live]
; [else-branch: 7073 | !(p2_15@977@01 && !(break2_2@968@01)) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 7073 | p2_15@977@01 && !(break2_2@968@01)]
(assert (and p2_15@977@01 (not break2_2@968@01)))
; [exec]
; _loop_measures_2_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; p1_16 := p1_15 &&
;   (!break1_2 &&
;   perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none)
; [eval] p1_15 && (!break1_2 && perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 7074 | !(p1_15@976@01) | live]
; [else-branch: 7074 | p1_15@976@01 | live]
(push) ; 17
; [then-branch: 7074 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 17
(push) ; 17
; [else-branch: 7074 | p1_15@976@01]
(assert p1_15@976@01)
; [eval] !break1_2
(push) ; 18
; [then-branch: 7075 | break1_2@967@01 | live]
; [else-branch: 7075 | !(break1_2@967@01) | live]
(push) ; 19
; [then-branch: 7075 | break1_2@967@01]
(assert break1_2@967@01)
(pop) ; 19
(push) ; 19
; [else-branch: 7075 | !(break1_2@967@01)]
(assert (not break1_2@967@01))
; [eval] perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_7, 526803611440346310908232101056638787))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break1_2@967@01) break1_2@967@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=> p1_15@976@01 (and p1_15@976@01 (or (not break1_2@967@01) break1_2@967@01))))
; [exec]
; p2_16 := p2_15 &&
;   (!break2_2 &&
;   perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_15 && (!break2_2 && perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none)
(push) ; 16
; [then-branch: 7076 | !(p2_15@977@01) | live]
; [else-branch: 7076 | p2_15@977@01 | live]
(push) ; 17
; [then-branch: 7076 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 17
(push) ; 17
; [else-branch: 7076 | p2_15@977@01]
; [eval] !break2_2
(push) ; 18
; [then-branch: 7077 | break2_2@968@01 | live]
; [else-branch: 7077 | !(break2_2@968@01) | live]
(push) ; 19
; [then-branch: 7077 | break2_2@968@01]
(assert break2_2@968@01)
(pop) ; 19
(push) ; 19
; [else-branch: 7077 | !(break2_2@968@01)]
; [eval] perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break2_2@968@01) break2_2@968@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=> p2_15@977@01 (or (not break2_2@968@01) break2_2@968@01)))
; [exec]
; p3_8 := p1_15 &&
;   (!break1_2 &&
;   !(perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none))
; [eval] p1_15 && (!break1_2 && !(perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 7078 | !(p1_15@976@01) | live]
; [else-branch: 7078 | p1_15@976@01 | live]
(push) ; 17
; [then-branch: 7078 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 17
(push) ; 17
; [else-branch: 7078 | p1_15@976@01]
(assert p1_15@976@01)
; [eval] !break1_2
(push) ; 18
; [then-branch: 7079 | break1_2@967@01 | live]
; [else-branch: 7079 | !(break1_2@967@01) | live]
(push) ; 19
; [then-branch: 7079 | break1_2@967@01]
(assert break1_2@967@01)
(pop) ; 19
(push) ; 19
; [else-branch: 7079 | !(break1_2@967@01)]
(assert (not break1_2@967@01))
; [eval] !(perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_7, 526803611440346310908232101056638787))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break1_2@967@01) break1_2@967@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p3_8@985@01 Bool)
(assert (= p3_8@985@01 (and p1_15@976@01 (not break1_2@967@01))))
; [exec]
; p4_8 := p2_15 &&
;   (!break2_2 &&
;   !(perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_15 && (!break2_2 && !(perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none))
(push) ; 16
; [then-branch: 7080 | !(p2_15@977@01) | live]
; [else-branch: 7080 | p2_15@977@01 | live]
(push) ; 17
; [then-branch: 7080 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 17
(push) ; 17
; [else-branch: 7080 | p2_15@977@01]
; [eval] !break2_2
(push) ; 18
; [then-branch: 7081 | break2_2@968@01 | live]
; [else-branch: 7081 | !(break2_2@968@01) | live]
(push) ; 19
; [then-branch: 7081 | break2_2@968@01]
(assert break2_2@968@01)
(pop) ; 19
(push) ; 19
; [else-branch: 7081 | !(break2_2@968@01)]
; [eval] !(perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (not break2_2@968@01) break2_2@968@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(declare-const p4_8@986@01 Bool)
(assert (= p4_8@986@01 (and p2_15@977@01 (not break2_2@968@01))))
; [eval] p1_16 && !break1_2
; [then-branch: 7082 | False | dead]
; [else-branch: 7082 | True | live]
(push) ; 16
; [else-branch: 7082 | True]
(pop) ; 16
; [eval] !(p1_16 && !break1_2)
; [eval] p1_16 && !break1_2
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7083 | True | live]
; [else-branch: 7083 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 7083 | True]
; [eval] p2_16 && !break2_2
; [then-branch: 7084 | False | dead]
; [else-branch: 7084 | True | live]
(push) ; 17
; [else-branch: 7084 | True]
(pop) ; 17
; [eval] !(p2_16 && !break2_2)
; [eval] p2_16 && !break2_2
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7085 | True | live]
; [else-branch: 7085 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 7085 | True]
; [eval] p1_15 && !break1_2
(push) ; 18
; [then-branch: 7086 | !(p1_15@976@01) | live]
; [else-branch: 7086 | p1_15@976@01 | live]
(push) ; 19
; [then-branch: 7086 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 19
(push) ; 19
; [else-branch: 7086 | p1_15@976@01]
(assert p1_15@976@01)
; [eval] !break1_2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
; [then-branch: 7087 | p1_15@976@01 && !(break1_2@967@01) | dead]
; [else-branch: 7087 | !(p1_15@976@01 && !(break1_2@967@01)) | live]
(push) ; 18
; [else-branch: 7087 | !(p1_15@976@01 && !(break1_2@967@01))]
(pop) ; 18
; [eval] !(p1_15 && !break1_2)
; [eval] p1_15 && !break1_2
(push) ; 18
; [then-branch: 7088 | !(p1_15@976@01) | live]
; [else-branch: 7088 | p1_15@976@01 | live]
(push) ; 19
; [then-branch: 7088 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 19
(push) ; 19
; [else-branch: 7088 | p1_15@976@01]
(assert p1_15@976@01)
; [eval] !break1_2
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (and p1_15@976@01 (not break1_2@967@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7089 | !(p1_15@976@01 && !(break1_2@967@01)) | live]
; [else-branch: 7089 | p1_15@976@01 && !(break1_2@967@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 7089 | !(p1_15@976@01 && !(break1_2@967@01))]
; [eval] p2_15 && !break2_2
(push) ; 19
; [then-branch: 7090 | !(p2_15@977@01) | live]
; [else-branch: 7090 | p2_15@977@01 | live]
(push) ; 20
; [then-branch: 7090 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 20
(push) ; 20
; [else-branch: 7090 | p2_15@977@01]
; [eval] !break2_2
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and p2_15@977@01 (not break2_2@968@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_15@977@01 (not break2_2@968@01))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7091 | p2_15@977@01 && !(break2_2@968@01) | live]
; [else-branch: 7091 | !(p2_15@977@01 && !(break2_2@968@01)) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 7091 | p2_15@977@01 && !(break2_2@968@01)]
(assert (and p2_15@977@01 (not break2_2@968@01)))
; [exec]
; c_7_0.Container_valuep := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_valuep@987@01 $Ref)
(assert (= Container_valuep@987@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p1_15 && !break1_2
(push) ; 20
; [then-branch: 7092 | !(p1_15@976@01) | live]
; [else-branch: 7092 | p1_15@976@01 | live]
(push) ; 21
; [then-branch: 7092 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 21
(push) ; 21
; [else-branch: 7092 | p1_15@976@01]
(assert p1_15@976@01)
; [eval] !break1_2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 7093 | p1_15@976@01 && !(break1_2@967@01) | dead]
; [else-branch: 7093 | !(p1_15@976@01 && !(break1_2@967@01)) | live]
(push) ; 20
; [else-branch: 7093 | !(p1_15@976@01 && !(break1_2@967@01))]
(pop) ; 20
; [eval] !(p1_15 && !break1_2)
; [eval] p1_15 && !break1_2
(push) ; 20
; [then-branch: 7094 | !(p1_15@976@01) | live]
; [else-branch: 7094 | p1_15@976@01 | live]
(push) ; 21
; [then-branch: 7094 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 21
(push) ; 21
; [else-branch: 7094 | p1_15@976@01]
(assert p1_15@976@01)
; [eval] !break1_2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_15@976@01 (not break1_2@967@01))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7095 | !(p1_15@976@01 && !(break1_2@967@01)) | live]
; [else-branch: 7095 | p1_15@976@01 && !(break1_2@967@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 7095 | !(p1_15@976@01 && !(break1_2@967@01))]
; [eval] p2_15 && !break2_2
(push) ; 21
; [then-branch: 7096 | !(p2_15@977@01) | live]
; [else-branch: 7096 | p2_15@977@01 | live]
(push) ; 22
; [then-branch: 7096 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 22
(push) ; 22
; [else-branch: 7096 | p2_15@977@01]
; [eval] !break2_2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_15@977@01 (not break2_2@968@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_15@977@01 (not break2_2@968@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7097 | p2_15@977@01 && !(break2_2@968@01) | live]
; [else-branch: 7097 | !(p2_15@977@01 && !(break2_2@968@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 7097 | p2_15@977@01 && !(break2_2@968@01)]
(assert (and p2_15@977@01 (not break2_2@968@01)))
; [exec]
; break2_2 := true
; [eval] p1_15 && !break1_2
(push) ; 22
; [then-branch: 7098 | !(p1_15@976@01) | live]
; [else-branch: 7098 | p1_15@976@01 | live]
(push) ; 23
; [then-branch: 7098 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 23
(push) ; 23
; [else-branch: 7098 | p1_15@976@01]
(assert p1_15@976@01)
; [eval] !break1_2
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 7099 | p1_15@976@01 && !(break1_2@967@01) | dead]
; [else-branch: 7099 | !(p1_15@976@01 && !(break1_2@967@01)) | live]
(push) ; 22
; [else-branch: 7099 | !(p1_15@976@01 && !(break1_2@967@01))]
(pop) ; 22
; [eval] !(p1_15 && !break1_2)
; [eval] p1_15 && !break1_2
(push) ; 22
; [then-branch: 7100 | !(p1_15@976@01) | live]
; [else-branch: 7100 | p1_15@976@01 | live]
(push) ; 23
; [then-branch: 7100 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 23
(push) ; 23
; [else-branch: 7100 | p1_15@976@01]
(assert p1_15@976@01)
; [eval] !break1_2
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_15@976@01 (not break1_2@967@01))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7101 | !(p1_15@976@01 && !(break1_2@967@01)) | live]
; [else-branch: 7101 | p1_15@976@01 && !(break1_2@967@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 7101 | !(p1_15@976@01 && !(break1_2@967@01))]
; [eval] p2_15 && !break2_2
(push) ; 23
; [then-branch: 7102 | !(p2_15@977@01) | live]
; [else-branch: 7102 | p2_15@977@01 | live]
(push) ; 24
; [then-branch: 7102 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 24
(push) ; 24
; [else-branch: 7102 | p2_15@977@01]
; [eval] !break2_2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 7103 | False | dead]
; [else-branch: 7103 | True | live]
(push) ; 23
; [else-branch: 7103 | True]
(pop) ; 23
; [eval] !(p2_15 && !break2_2)
; [eval] p2_15 && !break2_2
(push) ; 23
; [then-branch: 7104 | !(p2_15@977@01) | live]
; [else-branch: 7104 | p2_15@977@01 | live]
(push) ; 24
; [then-branch: 7104 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 24
(push) ; 24
; [else-branch: 7104 | p2_15@977@01]
; [eval] !break2_2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7105 | True | live]
; [else-branch: 7105 | False | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 7105 | True]
; [exec]
; assert (p1_15 && !break1_2 ==> _loop_termination_flag_2 ==> !true) &&
;   (p2_15 && !break2_2 ==> _loop_termination_flag_2_0 ==> !true)
; [eval] p1_15 && !break1_2 ==> _loop_termination_flag_2 ==> !true
; [eval] p1_15 && !break1_2
(push) ; 24
; [then-branch: 7106 | !(p1_15@976@01) | live]
; [else-branch: 7106 | p1_15@976@01 | live]
(push) ; 25
; [then-branch: 7106 | !(p1_15@976@01)]
(assert (not p1_15@976@01))
(pop) ; 25
(push) ; 25
; [else-branch: 7106 | p1_15@976@01]
(assert p1_15@976@01)
; [eval] !break1_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 7107 | p1_15@976@01 && !(break1_2@967@01) | dead]
; [else-branch: 7107 | !(p1_15@976@01 && !(break1_2@967@01)) | live]
(push) ; 25
; [else-branch: 7107 | !(p1_15@976@01 && !(break1_2@967@01))]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] p2_15 && !break2_2 ==> _loop_termination_flag_2_0 ==> !true
; [eval] p2_15 && !break2_2
(push) ; 24
; [then-branch: 7108 | !(p2_15@977@01) | live]
; [else-branch: 7108 | p2_15@977@01 | live]
(push) ; 25
; [then-branch: 7108 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 25
(push) ; 25
; [else-branch: 7108 | p2_15@977@01]
; [eval] !break2_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 7109 | False | dead]
; [else-branch: 7109 | True | live]
(push) ; 25
; [else-branch: 7109 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_14 && !bypass1_2 ==> true
; [eval] p1_14 && !bypass1_2
(push) ; 24
; [then-branch: 7110 | !(p1_14@898@01) | live]
; [else-branch: 7110 | p1_14@898@01 | live]
(push) ; 25
; [then-branch: 7110 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 25
(push) ; 25
; [else-branch: 7110 | p1_14@898@01]
(assert p1_14@898@01)
; [eval] !bypass1_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7111 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 7111 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 7111 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] p2_14 && !bypass2_2 ==> true
; [eval] p2_14 && !bypass2_2
(push) ; 24
; [then-branch: 7112 | !(p2_14@899@01) | live]
; [else-branch: 7112 | p2_14@899@01 | live]
(push) ; 25
; [then-branch: 7112 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 25
(push) ; 25
; [else-branch: 7112 | p2_14@899@01]
(assert p2_14@899@01)
; [eval] !bypass2_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7113 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 7113 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 7113 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] p1_14 && !bypass1_2
(push) ; 24
; [then-branch: 7114 | !(p1_14@898@01) | live]
; [else-branch: 7114 | p1_14@898@01 | live]
(push) ; 25
; [then-branch: 7114 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 25
(push) ; 25
; [else-branch: 7114 | p1_14@898@01]
; [eval] !bypass1_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7115 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 7115 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 7115 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] p2_14 && !bypass2_2
(push) ; 25
; [then-branch: 7116 | !(p2_14@899@01) | live]
; [else-branch: 7116 | p2_14@899@01 | live]
(push) ; 26
; [then-branch: 7116 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 26
(push) ; 26
; [else-branch: 7116 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7117 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 7117 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 7117 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] p1_14 && !bypass1_2 ==> issubtype(typeof(c_7.Container_value), int())
; [eval] p1_14 && !bypass1_2
(push) ; 26
; [then-branch: 7118 | !(p1_14@898@01) | live]
; [else-branch: 7118 | p1_14@898@01 | live]
(push) ; 27
; [then-branch: 7118 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 27
(push) ; 27
; [else-branch: 7118 | p1_14@898@01]
; [eval] !bypass1_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7119 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 7119 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 7119 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] issubtype(typeof(c_7.Container_value), int())
; [eval] typeof(c_7.Container_value)
; [eval] int()
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] p2_14 && !bypass2_2 ==> issubtype(typeof(c_7_0.Container_valuep), int())
; [eval] p2_14 && !bypass2_2
(push) ; 26
; [then-branch: 7120 | !(p2_14@899@01) | live]
; [else-branch: 7120 | p2_14@899@01 | live]
(push) ; 27
; [then-branch: 7120 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 27
(push) ; 27
; [else-branch: 7120 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7121 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 7121 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 7121 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] issubtype(typeof(c_7_0.Container_valuep), int())
; [eval] typeof(c_7_0.Container_valuep)
; [eval] int()
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
(push) ; 26
(assert (not (=>
  (and p2_14@899@01 (not bypass2_2@956@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@987@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_14@899@01 (not bypass2_2@956@01))
  (issubtype<Bool> (typeof<PyType> Container_valuep@987@01) (as int<PyType>  PyType))))
; [eval] p1_14 && !bypass1_2 ==> !idle1_2 ==> _loop_check_before_2 ==> _loop_termination_flag_2 || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))
; [eval] p1_14 && !bypass1_2
(push) ; 26
; [then-branch: 7122 | !(p1_14@898@01) | live]
; [else-branch: 7122 | p1_14@898@01 | live]
(push) ; 27
; [then-branch: 7122 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 27
(push) ; 27
; [else-branch: 7122 | p1_14@898@01]
; [eval] !bypass1_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7123 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 7123 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 7123 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] !idle1_2 ==> _loop_check_before_2 ==> _loop_termination_flag_2 || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))
; [eval] !idle1_2
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7124 | True | live]
; [else-branch: 7124 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 7124 | True]
; [eval] _loop_check_before_2 ==> _loop_termination_flag_2 || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))
(push) ; 30
(push) ; 31
(set-option :timeout 10)
(assert (not (not _loop_check_before_2@969@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not _loop_check_before_2@969@01))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7125 | _loop_check_before_2@969@01 | live]
; [else-branch: 7125 | !(_loop_check_before_2@969@01) | live]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 7125 | _loop_check_before_2@969@01]
(assert _loop_check_before_2@969@01)
; [eval] _loop_termination_flag_2 || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))
(push) ; 32
; [then-branch: 7126 | False | live]
; [else-branch: 7126 | True | live]
(push) ; 33
; [then-branch: 7126 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 7126 | True]
; [eval] perm(MustTerminate(_cthread_160)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_160)) == none
; [eval] perm(MustTerminate(_cthread_160))
(push) ; 34
; [then-branch: 7127 | False | live]
; [else-branch: 7127 | True | live]
(push) ; 35
; [then-branch: 7127 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 7127 | True]
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 36
; [then-branch: 7128 | False | live]
; [else-branch: 7128 | True | live]
(push) ; 37
; [then-branch: 7128 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 7128 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 38
; [then-branch: 7129 | False | live]
; [else-branch: 7129 | True | live]
(push) ; 39
; [then-branch: 7129 | False]
(assert false)
(pop) ; 39
(push) ; 39
; [else-branch: 7129 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 40
; [then-branch: 7130 | False | live]
; [else-branch: 7130 | True | live]
(push) ; 41
; [then-branch: 7130 | False]
(assert false)
(pop) ; 41
(push) ; 41
; [else-branch: 7130 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(push) ; 31
; [else-branch: 7125 | !(_loop_check_before_2@969@01)]
(assert (not _loop_check_before_2@969@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_2@969@01) _loop_check_before_2@969@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
(assert (or (not _loop_check_before_2@969@01) _loop_check_before_2@969@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (=>
  (and p1_14@898@01 (not bypass1_2@955@01))
  (and
    p1_14@898@01
    (not bypass1_2@955@01)
    (or (not _loop_check_before_2@969@01) _loop_check_before_2@969@01))))
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] p2_14 && !bypass2_2 ==> !idle2_2 ==> _loop_check_before_2_0 ==> _loop_termination_flag_2_0 || perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))
; [eval] p2_14 && !bypass2_2
(push) ; 26
; [then-branch: 7131 | !(p2_14@899@01) | live]
; [else-branch: 7131 | p2_14@899@01 | live]
(push) ; 27
; [then-branch: 7131 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 27
(push) ; 27
; [else-branch: 7131 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7132 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 7132 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 7132 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] !idle2_2 ==> _loop_check_before_2_0 ==> _loop_termination_flag_2_0 || perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))
; [eval] !idle2_2
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7133 | True | live]
; [else-branch: 7133 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 7133 | True]
; [eval] _loop_check_before_2_0 ==> _loop_termination_flag_2_0 || perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))
(push) ; 30
(push) ; 31
(set-option :timeout 10)
(assert (not (not _loop_check_before_2_0@970@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not _loop_check_before_2_0@970@01))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7134 | _loop_check_before_2_0@970@01 | live]
; [else-branch: 7134 | !(_loop_check_before_2_0@970@01) | live]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 7134 | _loop_check_before_2_0@970@01]
(assert _loop_check_before_2_0@970@01)
; [eval] _loop_termination_flag_2_0 || perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))
(push) ; 32
; [then-branch: 7135 | False | live]
; [else-branch: 7135 | True | live]
(push) ; 33
; [then-branch: 7135 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 7135 | True]
; [eval] perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_160_0)) == none
; [eval] perm(MustTerminate_0(_cthread_160_0))
(push) ; 34
; [then-branch: 7136 | False | live]
; [else-branch: 7136 | True | live]
(push) ; 35
; [then-branch: 7136 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 7136 | True]
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false)
(push) ; 36
; [then-branch: 7137 | False | live]
; [else-branch: 7137 | True | live]
(push) ; 37
; [then-branch: 7137 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 7137 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false)
(push) ; 38
; [then-branch: 7138 | False | live]
; [else-branch: 7138 | True | live]
(push) ; 39
; [then-branch: 7138 | False]
(assert false)
(pop) ; 39
(push) ; 39
; [else-branch: 7138 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false)
(push) ; 40
; [then-branch: 7139 | False | live]
; [else-branch: 7139 | True | live]
(push) ; 41
; [then-branch: 7139 | False]
(assert false)
(pop) ; 41
(push) ; 41
; [else-branch: 7139 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(push) ; 31
; [else-branch: 7134 | !(_loop_check_before_2_0@970@01)]
(assert (not _loop_check_before_2_0@970@01))
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or (not _loop_check_before_2_0@970@01) _loop_check_before_2_0@970@01))
(pop) ; 29
(pop) ; 28
; Joined path conditions
(assert (or (not _loop_check_before_2_0@970@01) _loop_check_before_2_0@970@01))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (=>
  (and p2_14@899@01 (not bypass2_2@956@01))
  (and
    p2_14@899@01
    (not bypass2_2@956@01)
    (or (not _loop_check_before_2_0@970@01) _loop_check_before_2_0@970@01))))
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] p1_14 && !bypass1_2 ==> !idle1_2 ==> !_loop_check_before_2 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] p1_14 && !bypass1_2
(push) ; 26
; [then-branch: 7140 | !(p1_14@898@01) | live]
; [else-branch: 7140 | p1_14@898@01 | live]
(push) ; 27
; [then-branch: 7140 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 27
(push) ; 27
; [else-branch: 7140 | p1_14@898@01]
; [eval] !bypass1_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (and p1_14@898@01 (not bypass1_2@955@01)))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (and p1_14@898@01 (not bypass1_2@955@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7141 | p1_14@898@01 && !(bypass1_2@955@01) | live]
; [else-branch: 7141 | !(p1_14@898@01 && !(bypass1_2@955@01)) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 7141 | p1_14@898@01 && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] !idle1_2 ==> !_loop_check_before_2 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] !idle1_2
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7142 | True | live]
; [else-branch: 7142 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 7142 | True]
; [eval] !_loop_check_before_2 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_2
(push) ; 30
(push) ; 31
(set-option :timeout 10)
(assert (not _loop_check_before_2@969@01))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not (not _loop_check_before_2@969@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7143 | !(_loop_check_before_2@969@01) | live]
; [else-branch: 7143 | _loop_check_before_2@969@01 | live]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 7143 | !(_loop_check_before_2@969@01)]
(assert (not _loop_check_before_2@969@01))
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 32
; [then-branch: 7144 | False | live]
; [else-branch: 7144 | True | live]
(push) ; 33
; [then-branch: 7144 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 7144 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 34
; [then-branch: 7145 | False | live]
; [else-branch: 7145 | True | live]
(push) ; 35
; [then-branch: 7145 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 7145 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 36
; [then-branch: 7146 | False | live]
; [else-branch: 7146 | True | live]
(push) ; 37
; [then-branch: 7146 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 7146 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(push) ; 31
; [else-branch: 7143 | _loop_check_before_2@969@01]
(assert _loop_check_before_2@969@01)
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_2@969@01 (not _loop_check_before_2@969@01)))
(pop) ; 29
(pop) ; 28
; Joined path conditions
(assert (or _loop_check_before_2@969@01 (not _loop_check_before_2@969@01)))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (=>
  (and p1_14@898@01 (not bypass1_2@955@01))
  (and
    p1_14@898@01
    (not bypass1_2@955@01)
    (or _loop_check_before_2@969@01 (not _loop_check_before_2@969@01)))))
(assert (and p1_14@898@01 (not bypass1_2@955@01)))
; [eval] p2_14 && !bypass2_2 ==> !idle2_2 ==> !_loop_check_before_2_0 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] p2_14 && !bypass2_2
(push) ; 26
; [then-branch: 7147 | !(p2_14@899@01) | live]
; [else-branch: 7147 | p2_14@899@01 | live]
(push) ; 27
; [then-branch: 7147 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 27
(push) ; 27
; [else-branch: 7147 | p2_14@899@01]
; [eval] !bypass2_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (and p2_14@899@01 (not bypass2_2@956@01)))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (and p2_14@899@01 (not bypass2_2@956@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7148 | p2_14@899@01 && !(bypass2_2@956@01) | live]
; [else-branch: 7148 | !(p2_14@899@01 && !(bypass2_2@956@01)) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 7148 | p2_14@899@01 && !(bypass2_2@956@01)]
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] !idle2_2 ==> !_loop_check_before_2_0 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_2
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7149 | True | live]
; [else-branch: 7149 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 7149 | True]
; [eval] !_loop_check_before_2_0 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_2_0
(push) ; 30
(push) ; 31
(set-option :timeout 10)
(assert (not _loop_check_before_2_0@970@01))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not (not _loop_check_before_2_0@970@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7150 | !(_loop_check_before_2_0@970@01) | live]
; [else-branch: 7150 | _loop_check_before_2_0@970@01 | live]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 7150 | !(_loop_check_before_2_0@970@01)]
(assert (not _loop_check_before_2_0@970@01))
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false)
(push) ; 32
; [then-branch: 7151 | False | live]
; [else-branch: 7151 | True | live]
(push) ; 33
; [then-branch: 7151 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 7151 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false)
(push) ; 34
; [then-branch: 7152 | False | live]
; [else-branch: 7152 | True | live]
(push) ; 35
; [then-branch: 7152 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 7152 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false)
(push) ; 36
; [then-branch: 7153 | False | live]
; [else-branch: 7153 | True | live]
(push) ; 37
; [then-branch: 7153 | False]
(assert false)
(pop) ; 37
(push) ; 37
; [else-branch: 7153 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(push) ; 31
; [else-branch: 7150 | _loop_check_before_2_0@970@01]
(assert _loop_check_before_2_0@970@01)
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(assert (or _loop_check_before_2_0@970@01 (not _loop_check_before_2_0@970@01)))
(pop) ; 29
(pop) ; 28
; Joined path conditions
(assert (or _loop_check_before_2_0@970@01 (not _loop_check_before_2_0@970@01)))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (=>
  (and p2_14@899@01 (not bypass2_2@956@01))
  (and
    p2_14@899@01
    (not bypass2_2@956@01)
    (or _loop_check_before_2_0@970@01 (not _loop_check_before_2_0@970@01)))))
(assert (and p2_14@899@01 (not bypass2_2@956@01)))
; [eval] bypass1_2 ==> tmp1_17 == _loop_measures_2
(push) ; 26
; [then-branch: 7154 | bypass1_2@955@01 | dead]
; [else-branch: 7154 | !(bypass1_2@955@01) | live]
(push) ; 27
; [else-branch: 7154 | !(bypass1_2@955@01)]
(pop) ; 27
(pop) ; 26
; Joined path conditions
; [eval] bypass1_2 ==> tmp1_18 == _loop_check_before_2
(push) ; 26
; [then-branch: 7155 | bypass1_2@955@01 | dead]
; [else-branch: 7155 | !(bypass1_2@955@01) | live]
(push) ; 27
; [else-branch: 7155 | !(bypass1_2@955@01)]
(pop) ; 27
(pop) ; 26
; Joined path conditions
; [eval] bypass1_2 ==> tmp1_19 == break1_2
(push) ; 26
; [then-branch: 7156 | bypass1_2@955@01 | dead]
; [else-branch: 7156 | !(bypass1_2@955@01) | live]
(push) ; 27
; [else-branch: 7156 | !(bypass1_2@955@01)]
(pop) ; 27
(pop) ; 26
; Joined path conditions
; [eval] bypass2_2 ==> tmp2_17 == _loop_measures_2_0
(push) ; 26
; [then-branch: 7157 | bypass2_2@956@01 | dead]
; [else-branch: 7157 | !(bypass2_2@956@01) | live]
(push) ; 27
; [else-branch: 7157 | !(bypass2_2@956@01)]
(pop) ; 27
(pop) ; 26
; Joined path conditions
; [eval] bypass2_2 ==> tmp2_18 == _loop_check_before_2_0
(push) ; 26
; [then-branch: 7158 | bypass2_2@956@01 | dead]
; [else-branch: 7158 | !(bypass2_2@956@01) | live]
(push) ; 27
; [else-branch: 7158 | !(bypass2_2@956@01)]
(pop) ; 27
(pop) ; 26
; Joined path conditions
; [eval] bypass2_2 ==> tmp2_19 == break2_2
(push) ; 26
; [then-branch: 7159 | bypass2_2@956@01 | dead]
; [else-branch: 7159 | !(bypass2_2@956@01) | live]
(push) ; 27
; [else-branch: 7159 | !(bypass2_2@956@01)]
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
; [eval] !(p2_15 && !break2_2)
; [eval] p2_15 && !break2_2
(push) ; 21
; [then-branch: 7160 | !(p2_15@977@01) | live]
; [else-branch: 7160 | p2_15@977@01 | live]
(push) ; 22
; [then-branch: 7160 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 22
(push) ; 22
; [else-branch: 7160 | p2_15@977@01]
(assert p2_15@977@01)
; [eval] !break2_2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_15@977@01 (not break2_2@968@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7161 | !(p2_15@977@01 && !(break2_2@968@01)) | dead]
; [else-branch: 7161 | p2_15@977@01 && !(break2_2@968@01) | live]
(set-option :timeout 0)
(push) ; 21
; [else-branch: 7161 | p2_15@977@01 && !(break2_2@968@01)]
(assert (and p2_15@977@01 (not break2_2@968@01)))
(pop) ; 21
(pop) ; 20
(pop) ; 19
; [eval] !(p2_15 && !break2_2)
; [eval] p2_15 && !break2_2
(push) ; 19
; [then-branch: 7162 | !(p2_15@977@01) | live]
; [else-branch: 7162 | p2_15@977@01 | live]
(push) ; 20
; [then-branch: 7162 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 20
(push) ; 20
; [else-branch: 7162 | p2_15@977@01]
(assert p2_15@977@01)
; [eval] !break2_2
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (and p2_15@977@01 (not break2_2@968@01))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7163 | !(p2_15@977@01 && !(break2_2@968@01)) | dead]
; [else-branch: 7163 | p2_15@977@01 && !(break2_2@968@01) | live]
(set-option :timeout 0)
(push) ; 19
; [else-branch: 7163 | p2_15@977@01 && !(break2_2@968@01)]
(assert (and p2_15@977@01 (not break2_2@968@01)))
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [eval] !(p2_15 && !break2_2)
; [eval] p2_15 && !break2_2
(push) ; 15
; [then-branch: 7164 | !(p2_15@977@01) | live]
; [else-branch: 7164 | p2_15@977@01 | live]
(push) ; 16
; [then-branch: 7164 | !(p2_15@977@01)]
(assert (not p2_15@977@01))
(pop) ; 16
(push) ; 16
; [else-branch: 7164 | p2_15@977@01]
(assert p2_15@977@01)
; [eval] !break2_2
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (and p2_15@977@01 (not break2_2@968@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7165 | !(p2_15@977@01 && !(break2_2@968@01)) | dead]
; [else-branch: 7165 | p2_15@977@01 && !(break2_2@968@01) | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 7165 | p2_15@977@01 && !(break2_2@968@01)]
(assert (and p2_15@977@01 (not break2_2@968@01)))
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 7071 | p1_15@976@01 && !(break1_2@967@01)]
(assert (and p1_15@976@01 (not break1_2@967@01)))
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 6875 | !(p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01) || p2_14@899@01 && !(break2_2@968@01) && !(bypass2_2@956@01))]
(assert (not
  (or
    (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01)))
    (and p2_14@899@01 (and (not break2_2@968@01) (not bypass2_2@956@01))))))
(pop) ; 13
; [eval] !(p1_14 && (!break1_2 && (!bypass1_2 && true)) || p2_14 && (!break2_2 && (!bypass2_2 && true)))
; [eval] p1_14 && (!break1_2 && (!bypass1_2 && true)) || p2_14 && (!break2_2 && (!bypass2_2 && true))
; [eval] p1_14 && (!break1_2 && (!bypass1_2 && true))
(push) ; 13
; [then-branch: 7166 | !(p1_14@898@01) | live]
; [else-branch: 7166 | p1_14@898@01 | live]
(push) ; 14
; [then-branch: 7166 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 14
(push) ; 14
; [else-branch: 7166 | p1_14@898@01]
(assert p1_14@898@01)
; [eval] !break1_2
(push) ; 15
; [then-branch: 7167 | break1_2@967@01 | live]
; [else-branch: 7167 | !(break1_2@967@01) | live]
(push) ; 16
; [then-branch: 7167 | break1_2@967@01]
(assert break1_2@967@01)
(pop) ; 16
(push) ; 16
; [else-branch: 7167 | !(break1_2@967@01)]
(assert (not break1_2@967@01))
; [eval] !bypass1_2
(push) ; 17
; [then-branch: 7168 | bypass1_2@955@01 | live]
; [else-branch: 7168 | !(bypass1_2@955@01) | live]
(push) ; 18
; [then-branch: 7168 | bypass1_2@955@01]
(assert bypass1_2@955@01)
(pop) ; 18
(push) ; 18
; [else-branch: 7168 | !(bypass1_2@955@01)]
(assert (not bypass1_2@955@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1_2@955@01) bypass1_2@955@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break1_2@967@01)
  (and (not break1_2@967@01) (or (not bypass1_2@955@01) bypass1_2@955@01))))
(assert (or (not break1_2@967@01) break1_2@967@01))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 7169 | p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01) | live]
; [else-branch: 7169 | !(p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01)) | live]
(push) ; 14
; [then-branch: 7169 | p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01)]
(assert (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01))))
(pop) ; 14
(push) ; 14
; [else-branch: 7169 | !(p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01))]
(assert (not (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01)))))
; [eval] p2_14 && (!break2_2 && (!bypass2_2 && true))
(push) ; 15
; [then-branch: 7170 | !(p2_14@899@01) | live]
; [else-branch: 7170 | p2_14@899@01 | live]
(push) ; 16
; [then-branch: 7170 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 16
(push) ; 16
; [else-branch: 7170 | p2_14@899@01]
(assert p2_14@899@01)
; [eval] !break2_2
(push) ; 17
; [then-branch: 7171 | break2_2@968@01 | live]
; [else-branch: 7171 | !(break2_2@968@01) | live]
(push) ; 18
; [then-branch: 7171 | break2_2@968@01]
(assert break2_2@968@01)
(pop) ; 18
(push) ; 18
; [else-branch: 7171 | !(break2_2@968@01)]
(assert (not break2_2@968@01))
; [eval] !bypass2_2
(push) ; 19
; [then-branch: 7172 | bypass2_2@956@01 | live]
; [else-branch: 7172 | !(bypass2_2@956@01) | live]
(push) ; 20
; [then-branch: 7172 | bypass2_2@956@01]
(assert bypass2_2@956@01)
(pop) ; 20
(push) ; 20
; [else-branch: 7172 | !(bypass2_2@956@01)]
(assert (not bypass2_2@956@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2_2@956@01) bypass2_2@956@01))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not break2_2@968@01)
  (and (not break2_2@968@01) (or (not bypass2_2@956@01) bypass2_2@956@01))))
(assert (or (not break2_2@968@01) break2_2@968@01))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_14@899@01
  (and
    p2_14@899@01
    (=>
      (not break2_2@968@01)
      (and (not break2_2@968@01) (or (not bypass2_2@956@01) bypass2_2@956@01)))
    (or (not break2_2@968@01) break2_2@968@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01))))
  (and
    (not (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01))))
    (=>
      p2_14@899@01
      (and
        p2_14@899@01
        (=>
          (not break2_2@968@01)
          (and
            (not break2_2@968@01)
            (or (not bypass2_2@956@01) bypass2_2@956@01)))
        (or (not break2_2@968@01) break2_2@968@01))))))
(push) ; 13
(set-option :timeout 10)
(assert (not (or
  (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01)))
  (and p2_14@899@01 (and (not break2_2@968@01) (not bypass2_2@956@01))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (or
    (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01)))
    (and p2_14@899@01 (and (not break2_2@968@01) (not bypass2_2@956@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7173 | !(p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01) || p2_14@899@01 && !(break2_2@968@01) && !(bypass2_2@956@01)) | live]
; [else-branch: 7173 | p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01) || p2_14@899@01 && !(break2_2@968@01) && !(bypass2_2@956@01) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 7173 | !(p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01) || p2_14@899@01 && !(break2_2@968@01) && !(bypass2_2@956@01))]
(assert (not
  (or
    (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01)))
    (and p2_14@899@01 (and (not break2_2@968@01) (not bypass2_2@956@01))))))
; [eval] !bypass1_2 && break1_2 || !bypass2_2 && break2_2
; [eval] !bypass1_2 && break1_2
; [eval] !bypass1_2
(push) ; 14
; [then-branch: 7174 | bypass1_2@955@01 | live]
; [else-branch: 7174 | !(bypass1_2@955@01) | live]
(push) ; 15
; [then-branch: 7174 | bypass1_2@955@01]
(assert bypass1_2@955@01)
(pop) ; 15
(push) ; 15
; [else-branch: 7174 | !(bypass1_2@955@01)]
(assert (not bypass1_2@955@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or (not bypass1_2@955@01) bypass1_2@955@01))
(push) ; 14
; [then-branch: 7175 | !(bypass1_2@955@01) && break1_2@967@01 | live]
; [else-branch: 7175 | !(!(bypass1_2@955@01) && break1_2@967@01) | live]
(push) ; 15
; [then-branch: 7175 | !(bypass1_2@955@01) && break1_2@967@01]
(assert (and (not bypass1_2@955@01) break1_2@967@01))
(pop) ; 15
(push) ; 15
; [else-branch: 7175 | !(!(bypass1_2@955@01) && break1_2@967@01)]
(assert (not (and (not bypass1_2@955@01) break1_2@967@01)))
; [eval] !bypass2_2 && break2_2
; [eval] !bypass2_2
(push) ; 16
; [then-branch: 7176 | bypass2_2@956@01 | live]
; [else-branch: 7176 | !(bypass2_2@956@01) | live]
(push) ; 17
; [then-branch: 7176 | bypass2_2@956@01]
(assert bypass2_2@956@01)
(pop) ; 17
(push) ; 17
; [else-branch: 7176 | !(bypass2_2@956@01)]
(assert (not bypass2_2@956@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2_2@956@01) bypass2_2@956@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (and (not bypass1_2@955@01) break1_2@967@01))
  (and
    (not (and (not bypass1_2@955@01) break1_2@967@01))
    (or (not bypass2_2@956@01) bypass2_2@956@01))))
(assert (or
  (not (and (not bypass1_2@955@01) break1_2@967@01))
  (and (not bypass1_2@955@01) break1_2@967@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (or
    (and (not bypass1_2@955@01) break1_2@967@01)
    (and (not bypass2_2@956@01) break2_2@968@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (or
  (and (not bypass1_2@955@01) break1_2@967@01)
  (and (not bypass2_2@956@01) break2_2@968@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7177 | !(bypass1_2@955@01) && break1_2@967@01 || !(bypass2_2@956@01) && break2_2@968@01 | live]
; [else-branch: 7177 | !(!(bypass1_2@955@01) && break1_2@967@01 || !(bypass2_2@956@01) && break2_2@968@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 7177 | !(bypass1_2@955@01) && break1_2@967@01 || !(bypass2_2@956@01) && break2_2@968@01]
(assert (or
  (and (not bypass1_2@955@01) break1_2@967@01)
  (and (not bypass2_2@956@01) break2_2@968@01)))
; [exec]
; var p1_16: Bool
(declare-const p1_16@988@01 Bool)
; [exec]
; var p2_16: Bool
(declare-const p2_16@989@01 Bool)
; [exec]
; var p3_8: Bool
(declare-const p3_8@990@01 Bool)
; [exec]
; var p4_8: Bool
(declare-const p4_8@991@01 Bool)
; [exec]
; break1_2 := oldbreak1_2
; [exec]
; break2_2 := oldbreak2_2
; [exec]
; inhale p1_14 && !break1_2 ==> true
(declare-const $t@992@01 $Snap)
(assert (= $t@992@01 $Snap.unit))
; [eval] p1_14 && !break1_2 ==> true
; [eval] p1_14 && !break1_2
(push) ; 15
; [then-branch: 7178 | !(p1_14@898@01) | live]
; [else-branch: 7178 | p1_14@898@01 | live]
(push) ; 16
; [then-branch: 7178 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 16
(push) ; 16
; [else-branch: 7178 | p1_14@898@01]
(assert p1_14@898@01)
; [eval] !break1_2
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not p1_14@898@01))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7179 | p1_14@898@01 | live]
; [else-branch: 7179 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 7179 | p1_14@898@01]
(assert p1_14@898@01)
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert p1_14@898@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale p2_14 && !break1_2 ==> true
(declare-const $t@993@01 $Snap)
(assert (= $t@993@01 $Snap.unit))
; [eval] p2_14 && !break1_2 ==> true
; [eval] p2_14 && !break1_2
(set-option :timeout 0)
(push) ; 15
; [then-branch: 7180 | !(p2_14@899@01) | live]
; [else-branch: 7180 | p2_14@899@01 | live]
(push) ; 16
; [then-branch: 7180 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 16
(push) ; 16
; [else-branch: 7180 | p2_14@899@01]
(assert p2_14@899@01)
; [eval] !break1_2
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not p2_14@899@01))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7181 | p2_14@899@01 | live]
; [else-branch: 7181 | !(p2_14@899@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 7181 | p2_14@899@01]
(assert p2_14@899@01)
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert p2_14@899@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; p1_15 := p1_14 && (!break1_2 && true)
; [eval] p1_14 && (!break1_2 && true)
(set-option :timeout 0)
(push) ; 15
; [then-branch: 7182 | !(p1_14@898@01) | live]
; [else-branch: 7182 | p1_14@898@01 | live]
(push) ; 16
; [then-branch: 7182 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 16
(push) ; 16
; [else-branch: 7182 | p1_14@898@01]
; [eval] !break1_2
(push) ; 17
; [then-branch: 7183 | False | live]
; [else-branch: 7183 | True | live]
(push) ; 18
; [then-branch: 7183 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 7183 | True]
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; p2_15 := p2_14 && (!break2_2 && true)
; [eval] p2_14 && (!break2_2 && true)
(push) ; 15
; [then-branch: 7184 | !(p2_14@899@01) | live]
; [else-branch: 7184 | p2_14@899@01 | live]
(push) ; 16
; [then-branch: 7184 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 16
(push) ; 16
; [else-branch: 7184 | p2_14@899@01]
; [eval] !break2_2
(push) ; 17
; [then-branch: 7185 | False | live]
; [else-branch: 7185 | True | live]
(push) ; 18
; [then-branch: 7185 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 7185 | True]
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; idle1_2 := p1_14 && (!break1_2 && !true)
; [eval] p1_14 && (!break1_2 && !true)
(push) ; 15
; [then-branch: 7186 | !(p1_14@898@01) | live]
; [else-branch: 7186 | p1_14@898@01 | live]
(push) ; 16
; [then-branch: 7186 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 16
(push) ; 16
; [else-branch: 7186 | p1_14@898@01]
; [eval] !break1_2
(push) ; 17
; [then-branch: 7187 | False | live]
; [else-branch: 7187 | True | live]
(push) ; 18
; [then-branch: 7187 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 7187 | True]
; [eval] !true
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; idle2_2 := p2_14 && (!break2_2 && !true)
; [eval] p2_14 && (!break2_2 && !true)
(push) ; 15
; [then-branch: 7188 | !(p2_14@899@01) | live]
; [else-branch: 7188 | p2_14@899@01 | live]
(push) ; 16
; [then-branch: 7188 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 16
(push) ; 16
; [else-branch: 7188 | p2_14@899@01]
; [eval] !break2_2
(push) ; 17
; [then-branch: 7189 | False | live]
; [else-branch: 7189 | True | live]
(push) ; 18
; [then-branch: 7189 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 7189 | True]
; [eval] !true
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [eval] p1_15 && !break1_2
(push) ; 15
; [then-branch: 7190 | !(p1_14@898@01) | live]
; [else-branch: 7190 | p1_14@898@01 | live]
(push) ; 16
; [then-branch: 7190 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 16
(push) ; 16
; [else-branch: 7190 | p1_14@898@01]
; [eval] !break1_2
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7191 | p1_14@898@01 | live]
; [else-branch: 7191 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 7191 | p1_14@898@01]
; [exec]
; _loop_measures_2 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [eval] p2_15 && !break2_2
(push) ; 16
; [then-branch: 7192 | !(p2_14@899@01) | live]
; [else-branch: 7192 | p2_14@899@01 | live]
(push) ; 17
; [then-branch: 7192 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 17
(push) ; 17
; [else-branch: 7192 | p2_14@899@01]
; [eval] !break2_2
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7193 | p2_14@899@01 | live]
; [else-branch: 7193 | !(p2_14@899@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 7193 | p2_14@899@01]
; [exec]
; _loop_measures_2_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; p1_16 := p1_15 &&
;   (!break1_2 &&
;   perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none)
; [eval] p1_15 && (!break1_2 && perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none)
(push) ; 17
; [then-branch: 7194 | !(p1_14@898@01) | live]
; [else-branch: 7194 | p1_14@898@01 | live]
(push) ; 18
; [then-branch: 7194 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 18
(push) ; 18
; [else-branch: 7194 | p1_14@898@01]
; [eval] !break1_2
(push) ; 19
; [then-branch: 7195 | False | live]
; [else-branch: 7195 | True | live]
(push) ; 20
; [then-branch: 7195 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 7195 | True]
; [eval] perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_7, 526803611440346310908232101056638787))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [exec]
; p2_16 := p2_15 &&
;   (!break2_2 &&
;   perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none)
; [eval] p2_15 && (!break2_2 && perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none)
(push) ; 17
; [then-branch: 7196 | !(p2_14@899@01) | live]
; [else-branch: 7196 | p2_14@899@01 | live]
(push) ; 18
; [then-branch: 7196 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 18
(push) ; 18
; [else-branch: 7196 | p2_14@899@01]
; [eval] !break2_2
(push) ; 19
; [then-branch: 7197 | False | live]
; [else-branch: 7197 | True | live]
(push) ; 20
; [then-branch: 7197 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 7197 | True]
; [eval] perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [exec]
; p3_8 := p1_15 &&
;   (!break1_2 &&
;   !(perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none))
; [eval] p1_15 && (!break1_2 && !(perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none))
(push) ; 17
; [then-branch: 7198 | !(p1_14@898@01) | live]
; [else-branch: 7198 | p1_14@898@01 | live]
(push) ; 18
; [then-branch: 7198 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 18
(push) ; 18
; [else-branch: 7198 | p1_14@898@01]
; [eval] !break1_2
(push) ; 19
; [then-branch: 7199 | False | live]
; [else-branch: 7199 | True | live]
(push) ; 20
; [then-branch: 7199 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 7199 | True]
; [eval] !(perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_7, 526803611440346310908232101056638787))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [exec]
; p4_8 := p2_15 &&
;   (!break2_2 &&
;   !(perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none))
; [eval] p2_15 && (!break2_2 && !(perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none))
(push) ; 17
; [then-branch: 7200 | !(p2_14@899@01) | live]
; [else-branch: 7200 | p2_14@899@01 | live]
(push) ; 18
; [then-branch: 7200 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 18
(push) ; 18
; [else-branch: 7200 | p2_14@899@01]
; [eval] !break2_2
(push) ; 19
; [then-branch: 7201 | False | live]
; [else-branch: 7201 | True | live]
(push) ; 20
; [then-branch: 7201 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 7201 | True]
; [eval] !(perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet_0(c_7_0, 526803611440346310908232101056638787))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [eval] p1_16 && !break1_2
; [then-branch: 7202 | False | dead]
; [else-branch: 7202 | True | live]
(push) ; 17
; [else-branch: 7202 | True]
(pop) ; 17
; [eval] !(p1_16 && !break1_2)
; [eval] p1_16 && !break1_2
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7203 | True | live]
; [else-branch: 7203 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 7203 | True]
; [eval] p2_16 && !break2_2
; [then-branch: 7204 | False | dead]
; [else-branch: 7204 | True | live]
(push) ; 18
; [else-branch: 7204 | True]
(pop) ; 18
; [eval] !(p2_16 && !break2_2)
; [eval] p2_16 && !break2_2
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7205 | True | live]
; [else-branch: 7205 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 7205 | True]
; [eval] p1_15 && !break1_2
(push) ; 19
; [then-branch: 7206 | !(p1_14@898@01) | live]
; [else-branch: 7206 | p1_14@898@01 | live]
(push) ; 20
; [then-branch: 7206 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 20
(push) ; 20
; [else-branch: 7206 | p1_14@898@01]
; [eval] !break1_2
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7207 | p1_14@898@01 | live]
; [else-branch: 7207 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 7207 | p1_14@898@01]
; [exec]
; c_7.Container_value := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(declare-const Container_value@994@01 $Ref)
(assert (= Container_value@994@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p2_15 && !break2_2
(push) ; 20
; [then-branch: 7208 | !(p2_14@899@01) | live]
; [else-branch: 7208 | p2_14@899@01 | live]
(push) ; 21
; [then-branch: 7208 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 21
(push) ; 21
; [else-branch: 7208 | p2_14@899@01]
; [eval] !break2_2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7209 | p2_14@899@01 | live]
; [else-branch: 7209 | !(p2_14@899@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 7209 | p2_14@899@01]
; [exec]
; c_7_0.Container_valuep := __prim__int___box__(8)
; [eval] __prim__int___box__(8)
(push) ; 21
(pop) ; 21
; Joined path conditions
(declare-const Container_valuep@995@01 $Ref)
(assert (= Container_valuep@995@01 (__prim__int___box__ $Snap.unit 8)))
; [eval] p1_15 && !break1_2
(push) ; 21
; [then-branch: 7210 | !(p1_14@898@01) | live]
; [else-branch: 7210 | p1_14@898@01 | live]
(push) ; 22
; [then-branch: 7210 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 22
(push) ; 22
; [else-branch: 7210 | p1_14@898@01]
; [eval] !break1_2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7211 | p1_14@898@01 | live]
; [else-branch: 7211 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 7211 | p1_14@898@01]
; [exec]
; break1_2 := true
; [eval] p2_15 && !break2_2
(push) ; 22
; [then-branch: 7212 | !(p2_14@899@01) | live]
; [else-branch: 7212 | p2_14@899@01 | live]
(push) ; 23
; [then-branch: 7212 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 23
(push) ; 23
; [else-branch: 7212 | p2_14@899@01]
; [eval] !break2_2
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7213 | p2_14@899@01 | live]
; [else-branch: 7213 | !(p2_14@899@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 7213 | p2_14@899@01]
; [exec]
; break2_2 := true
; [eval] p1_15 && !break1_2
(push) ; 23
; [then-branch: 7214 | !(p1_14@898@01) | live]
; [else-branch: 7214 | p1_14@898@01 | live]
(push) ; 24
; [then-branch: 7214 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 24
(push) ; 24
; [else-branch: 7214 | p1_14@898@01]
; [eval] !break1_2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 7215 | False | dead]
; [else-branch: 7215 | True | live]
(push) ; 23
; [else-branch: 7215 | True]
(pop) ; 23
; [eval] !(p1_15 && !break1_2)
; [eval] p1_15 && !break1_2
(push) ; 23
; [then-branch: 7216 | !(p1_14@898@01) | live]
; [else-branch: 7216 | p1_14@898@01 | live]
(push) ; 24
; [then-branch: 7216 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 24
(push) ; 24
; [else-branch: 7216 | p1_14@898@01]
; [eval] !break1_2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7217 | True | live]
; [else-branch: 7217 | False | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 7217 | True]
; [eval] p2_15 && !break2_2
(push) ; 24
; [then-branch: 7218 | !(p2_14@899@01) | live]
; [else-branch: 7218 | p2_14@899@01 | live]
(push) ; 25
; [then-branch: 7218 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 25
(push) ; 25
; [else-branch: 7218 | p2_14@899@01]
; [eval] !break2_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 7219 | False | dead]
; [else-branch: 7219 | True | live]
(push) ; 24
; [else-branch: 7219 | True]
(pop) ; 24
; [eval] !(p2_15 && !break2_2)
; [eval] p2_15 && !break2_2
(push) ; 24
; [then-branch: 7220 | !(p2_14@899@01) | live]
; [else-branch: 7220 | p2_14@899@01 | live]
(push) ; 25
; [then-branch: 7220 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 25
(push) ; 25
; [else-branch: 7220 | p2_14@899@01]
; [eval] !break2_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7221 | True | live]
; [else-branch: 7221 | False | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 7221 | True]
; [exec]
; assert (p1_15 && !break1_2 ==> _loop_termination_flag_2 ==> !true) &&
;   (p2_15 && !break2_2 ==> _loop_termination_flag_2_0 ==> !true)
; [eval] p1_15 && !break1_2 ==> _loop_termination_flag_2 ==> !true
; [eval] p1_15 && !break1_2
(push) ; 25
; [then-branch: 7222 | !(p1_14@898@01) | live]
; [else-branch: 7222 | p1_14@898@01 | live]
(push) ; 26
; [then-branch: 7222 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 26
(push) ; 26
; [else-branch: 7222 | p1_14@898@01]
; [eval] !break1_2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
; [then-branch: 7223 | False | dead]
; [else-branch: 7223 | True | live]
(push) ; 26
; [else-branch: 7223 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [eval] p2_15 && !break2_2 ==> _loop_termination_flag_2_0 ==> !true
; [eval] p2_15 && !break2_2
(push) ; 25
; [then-branch: 7224 | !(p2_14@899@01) | live]
; [else-branch: 7224 | p2_14@899@01 | live]
(push) ; 26
; [then-branch: 7224 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 26
(push) ; 26
; [else-branch: 7224 | p2_14@899@01]
; [eval] !break2_2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
; [then-branch: 7225 | False | dead]
; [else-branch: 7225 | True | live]
(push) ; 26
; [else-branch: 7225 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; [exec]
; inhale !p1_15 || !!break1_2
(declare-const $t@996@01 $Snap)
(assert (= $t@996@01 $Snap.unit))
; [eval] !p1_15 || !!break1_2
; [eval] !p1_15
(push) ; 25
; [then-branch: 7226 | !(p1_14@898@01) | live]
; [else-branch: 7226 | p1_14@898@01 | live]
(push) ; 26
; [then-branch: 7226 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 26
(push) ; 26
; [else-branch: 7226 | p1_14@898@01]
; [eval] !!break1_2
; [eval] !break1_2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !p2_15 || !!break2_2
(declare-const $t@997@01 $Snap)
(assert (= $t@997@01 $Snap.unit))
; [eval] !p2_15 || !!break2_2
; [eval] !p2_15
(set-option :timeout 0)
(push) ; 25
; [then-branch: 7227 | !(p2_14@899@01) | live]
; [else-branch: 7227 | p2_14@899@01 | live]
(push) ; 26
; [then-branch: 7227 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 26
(push) ; 26
; [else-branch: 7227 | p2_14@899@01]
; [eval] !!break2_2
; [eval] !break2_2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] !bypass1_2
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not bypass1_2@955@01))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (not bypass1_2@955@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7228 | !(bypass1_2@955@01) | live]
; [else-branch: 7228 | bypass1_2@955@01 | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 7228 | !(bypass1_2@955@01)]
(assert (not bypass1_2@955@01))
; [exec]
; break1_2 := false
; [eval] !bypass2_2
(push) ; 26
(set-option :timeout 10)
(assert (not bypass2_2@956@01))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 26
(set-option :timeout 10)
(assert (not (not bypass2_2@956@01)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7229 | !(bypass2_2@956@01) | live]
; [else-branch: 7229 | bypass2_2@956@01 | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 7229 | !(bypass2_2@956@01)]
(assert (not bypass2_2@956@01))
; [exec]
; break2_2 := false
; [eval] p1_14 && !break1_2
(push) ; 27
; [then-branch: 7230 | !(p1_14@898@01) | live]
; [else-branch: 7230 | p1_14@898@01 | live]
(push) ; 28
; [then-branch: 7230 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 28
(push) ; 28
; [else-branch: 7230 | p1_14@898@01]
; [eval] !break1_2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(push) ; 27
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7231 | p1_14@898@01 | live]
; [else-branch: 7231 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 7231 | p1_14@898@01]
; [exec]
; exhale perm(MustTerminate(_cthread_160)) > none ==>
;   acc(MustTerminate(_cthread_160), perm(MustTerminate(_cthread_160)) -
;   _loop_original_must_terminate_2)
; [eval] perm(MustTerminate(_cthread_160)) > none
; [eval] perm(MustTerminate(_cthread_160))
; [then-branch: 7232 | False | dead]
; [else-branch: 7232 | True | live]
(push) ; 28
; [else-branch: 7232 | True]
; [exec]
; _res := null
; [eval] p2_14 && !break2_2
(push) ; 29
; [then-branch: 7233 | !(p2_14@899@01) | live]
; [else-branch: 7233 | p2_14@899@01 | live]
(push) ; 30
; [then-branch: 7233 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 30
(push) ; 30
; [else-branch: 7233 | p2_14@899@01]
; [eval] !break2_2
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7234 | p2_14@899@01 | live]
; [else-branch: 7234 | !(p2_14@899@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 7234 | p2_14@899@01]
; [exec]
; exhale perm(MustTerminate_0(_cthread_160_0)) > none ==>
;   acc(MustTerminate_0(_cthread_160_0), perm(MustTerminate_0(_cthread_160_0)) -
;   _loop_original_must_terminate_2_0)
; [eval] perm(MustTerminate_0(_cthread_160_0)) > none
; [eval] perm(MustTerminate_0(_cthread_160_0))
; [then-branch: 7235 | False | dead]
; [else-branch: 7235 | True | live]
(push) ; 30
; [else-branch: 7235 | True]
; [exec]
; _res_0 := null
; [exec]
; assert true
; [eval] p1_14 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7236 | p1_14@898@01 | live]
; [else-branch: 7236 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 7236 | p1_14@898@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_14 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7237 | p2_14@899@01 | live]
; [else-branch: 7237 | !(p2_14@899@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 7237 | p2_14@899@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p1_14 ==> _res == null || issubtype(typeof(_res), int())
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7238 | p1_14@898@01 | live]
; [else-branch: 7238 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 7238 | p1_14@898@01]
; [eval] _res == null || issubtype(typeof(_res), int())
; [eval] _res == null
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_14 ==> _res_0 == null || issubtype(typeof(_res_0), int())
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7239 | p2_14@899@01 | live]
; [else-branch: 7239 | !(p2_14@899@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 7239 | p2_14@899@01]
; [eval] _res_0 == null || issubtype(typeof(_res_0), int())
; [eval] _res_0 == null
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7240 | p1_14@898@01 | live]
; [else-branch: 7240 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 7240 | p1_14@898@01]
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7241 | p2_14@899@01 | live]
; [else-branch: 7241 | !(p2_14@899@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 7241 | p2_14@899@01]
; [eval] p1_14 ==> issubtype(typeof(c_2.Container_value), int())
(push) ; 33
(push) ; 34
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7242 | p1_14@898@01 | live]
; [else-branch: 7242 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 7242 | p1_14@898@01]
; [eval] issubtype(typeof(c_2.Container_value), int())
; [eval] typeof(c_2.Container_value)
; [eval] int()
(pop) ; 34
(pop) ; 33
; Joined path conditions
(push) ; 33
(assert (not (=>
  p1_14@898@01
  (issubtype<Bool> (typeof<PyType> Container_value@994@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_14@898@01
  (issubtype<Bool> (typeof<PyType> Container_value@994@01) (as int<PyType>  PyType))))
; [eval] p2_14 ==> issubtype(typeof(c_2_0.Container_valuep), int())
(push) ; 33
(push) ; 34
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7243 | p2_14@899@01 | live]
; [else-branch: 7243 | !(p2_14@899@01) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 7243 | p2_14@899@01]
; [eval] issubtype(typeof(c_2_0.Container_valuep), int())
; [eval] typeof(c_2_0.Container_valuep)
; [eval] int()
(pop) ; 34
(pop) ; 33
; Joined path conditions
(push) ; 33
(assert (not (=>
  p2_14@899@01
  (issubtype<Bool> (typeof<PyType> Container_valuep@995@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_14@899@01
  (issubtype<Bool> (typeof<PyType> Container_valuep@995@01) (as int<PyType>  PyType))))
; [eval] p1_14 ==> int___eq__(c_2.Container_value, __prim__int___box__(8))
(push) ; 33
(push) ; 34
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7244 | p1_14@898@01 | live]
; [else-branch: 7244 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 7244 | p1_14@898@01]
; [eval] int___eq__(c_2.Container_value, __prim__int___box__(8))
; [eval] __prim__int___box__(8)
(push) ; 35
(pop) ; 35
; Joined path conditions
(push) ; 35
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 36
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@994@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@994@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 36
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@994@01 (__prim__int___box__ $Snap.unit 8)))
(pop) ; 35
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@994@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@994@01 (__prim__int___box__ $Snap.unit 8))))
(pop) ; 34
(pop) ; 33
; Joined path conditions
(assert (=>
  p1_14@898@01
  (and
    (issubtype<Bool> (typeof<PyType> Container_value@994@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@994@01 (__prim__int___box__ $Snap.unit 8)))))
(push) ; 33
(assert (not (=>
  p1_14@898@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@994@01 (__prim__int___box__ $Snap.unit 8)))))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_14@898@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@994@01 (__prim__int___box__ $Snap.unit 8))))
; [eval] p2_14 ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(8))
(push) ; 33
(push) ; 34
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7245 | p2_14@899@01 | live]
; [else-branch: 7245 | !(p2_14@899@01) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 7245 | p2_14@899@01]
; [eval] int___eq__(c_2_0.Container_valuep, __prim__int___box__(8))
; [eval] __prim__int___box__(8)
(push) ; 35
(pop) ; 35
; Joined path conditions
(push) ; 35
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 36
(assert (not (issubtype<Bool> (typeof<PyType> Container_valuep@995@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_valuep@995@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 36
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@995@01 (__prim__int___box__ $Snap.unit 8)))
(pop) ; 35
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_valuep@995@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@995@01 (__prim__int___box__ $Snap.unit 8))))
(pop) ; 34
(pop) ; 33
; Joined path conditions
(assert (=>
  p2_14@899@01
  (and
    (issubtype<Bool> (typeof<PyType> Container_valuep@995@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@995@01 (__prim__int___box__ $Snap.unit 8)))))
(push) ; 33
(assert (not (=>
  p2_14@899@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@995@01 (__prim__int___box__ $Snap.unit 8)))))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_14@899@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_valuep@995@01 (__prim__int___box__ $Snap.unit 8))))
; [eval] p1_14 ==> (forperm _r_17: Ref [MustInvokeBounded(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBounded] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: false)))
(push) ; 33
(push) ; 34
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7246 | p1_14@898@01 | live]
; [else-branch: 7246 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 7246 | p1_14@898@01]
; [eval] (forperm _r_17: Ref [MustInvokeBounded(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBounded] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_17: Ref [MustInvokeBounded(_r_17)] :: false)
(push) ; 35
; [then-branch: 7247 | False | live]
; [else-branch: 7247 | True | live]
(push) ; 36
; [then-branch: 7247 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 7247 | True]
; [eval] (forperm _r_17: Ref [MustInvokeUnbounded(_r_17)] :: false)
(push) ; 37
; [then-branch: 7248 | False | live]
; [else-branch: 7248 | True | live]
(push) ; 38
; [then-branch: 7248 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 7248 | True]
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: false)
(push) ; 39
; [then-branch: 7249 | False | live]
; [else-branch: 7249 | True | live]
(push) ; 40
; [then-branch: 7249 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 7249 | True]
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: false)
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; [eval] p2_14 ==> (forperm _r_17: Ref [MustInvokeBounded_0(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded_0(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: false)))
(push) ; 33
(push) ; 34
(set-option :timeout 10)
(assert (not (not p2_14@899@01)))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7250 | p2_14@899@01 | live]
; [else-branch: 7250 | !(p2_14@899@01) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 7250 | p2_14@899@01]
; [eval] (forperm _r_17: Ref [MustInvokeBounded_0(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded_0(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_17: Ref [MustInvokeBounded_0(_r_17)] :: false)
(push) ; 35
; [then-branch: 7251 | False | live]
; [else-branch: 7251 | True | live]
(push) ; 36
; [then-branch: 7251 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 7251 | True]
; [eval] (forperm _r_17: Ref [MustInvokeUnbounded_0(_r_17)] :: false)
(push) ; 37
; [then-branch: 7252 | False | live]
; [else-branch: 7252 | True | live]
(push) ; 38
; [then-branch: 7252 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 7252 | True]
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: false)
(push) ; 39
; [then-branch: 7253 | False | live]
; [else-branch: 7253 | True | live]
(push) ; 40
; [then-branch: 7253 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 7253 | True]
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: false)
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
; [eval] !(p2_14 && !break2_2)
; [eval] p2_14 && !break2_2
(push) ; 29
; [then-branch: 7254 | !(p2_14@899@01) | live]
; [else-branch: 7254 | p2_14@899@01 | live]
(push) ; 30
; [then-branch: 7254 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 30
(push) ; 30
; [else-branch: 7254 | p2_14@899@01]
; [eval] !break2_2
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 7255 | !(p2_14@899@01) | dead]
; [else-branch: 7255 | p2_14@899@01 | live]
(push) ; 29
; [else-branch: 7255 | p2_14@899@01]
(pop) ; 29
(pop) ; 28
(pop) ; 27
; [eval] !(p1_14 && !break1_2)
; [eval] p1_14 && !break1_2
(push) ; 27
; [then-branch: 7256 | !(p1_14@898@01) | live]
; [else-branch: 7256 | p1_14@898@01 | live]
(push) ; 28
; [then-branch: 7256 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 28
(push) ; 28
; [else-branch: 7256 | p1_14@898@01]
; [eval] !break1_2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [then-branch: 7257 | !(p1_14@898@01) | dead]
; [else-branch: 7257 | p1_14@898@01 | live]
(push) ; 27
; [else-branch: 7257 | p1_14@898@01]
(pop) ; 27
(pop) ; 26
; [eval] !!bypass2_2
; [eval] !bypass2_2
(push) ; 26
(set-option :timeout 10)
(assert (not (not bypass2_2@956@01)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7258 | bypass2_2@956@01 | dead]
; [else-branch: 7258 | !(bypass2_2@956@01) | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 7258 | !(bypass2_2@956@01)]
(assert (not bypass2_2@956@01))
(pop) ; 26
(pop) ; 25
; [eval] !!bypass1_2
; [eval] !bypass1_2
(push) ; 25
(set-option :timeout 10)
(assert (not (not bypass1_2@955@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7259 | bypass1_2@955@01 | dead]
; [else-branch: 7259 | !(bypass1_2@955@01) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 7259 | !(bypass1_2@955@01)]
(assert (not bypass1_2@955@01))
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
; [eval] !(p2_15 && !break2_2)
; [eval] p2_15 && !break2_2
(push) ; 22
; [then-branch: 7260 | !(p2_14@899@01) | live]
; [else-branch: 7260 | p2_14@899@01 | live]
(push) ; 23
; [then-branch: 7260 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 23
(push) ; 23
; [else-branch: 7260 | p2_14@899@01]
; [eval] !break2_2
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 7261 | !(p2_14@899@01) | dead]
; [else-branch: 7261 | p2_14@899@01 | live]
(push) ; 22
; [else-branch: 7261 | p2_14@899@01]
(pop) ; 22
(pop) ; 21
; [eval] !(p1_15 && !break1_2)
; [eval] p1_15 && !break1_2
(push) ; 21
; [then-branch: 7262 | !(p1_14@898@01) | live]
; [else-branch: 7262 | p1_14@898@01 | live]
(push) ; 22
; [then-branch: 7262 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 22
(push) ; 22
; [else-branch: 7262 | p1_14@898@01]
; [eval] !break1_2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 7263 | !(p1_14@898@01) | dead]
; [else-branch: 7263 | p1_14@898@01 | live]
(push) ; 21
; [else-branch: 7263 | p1_14@898@01]
(pop) ; 21
(pop) ; 20
; [eval] !(p2_15 && !break2_2)
; [eval] p2_15 && !break2_2
(push) ; 20
; [then-branch: 7264 | !(p2_14@899@01) | live]
; [else-branch: 7264 | p2_14@899@01 | live]
(push) ; 21
; [then-branch: 7264 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 21
(push) ; 21
; [else-branch: 7264 | p2_14@899@01]
; [eval] !break2_2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 7265 | !(p2_14@899@01) | dead]
; [else-branch: 7265 | p2_14@899@01 | live]
(push) ; 20
; [else-branch: 7265 | p2_14@899@01]
(pop) ; 20
(pop) ; 19
; [eval] !(p1_15 && !break1_2)
; [eval] p1_15 && !break1_2
(push) ; 19
; [then-branch: 7266 | !(p1_14@898@01) | live]
; [else-branch: 7266 | p1_14@898@01 | live]
(push) ; 20
; [then-branch: 7266 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 20
(push) ; 20
; [else-branch: 7266 | p1_14@898@01]
; [eval] !break1_2
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 7267 | !(p1_14@898@01) | dead]
; [else-branch: 7267 | p1_14@898@01 | live]
(push) ; 19
; [else-branch: 7267 | p1_14@898@01]
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
; [eval] !(p2_15 && !break2_2)
; [eval] p2_15 && !break2_2
(push) ; 16
; [then-branch: 7268 | !(p2_14@899@01) | live]
; [else-branch: 7268 | p2_14@899@01 | live]
(push) ; 17
; [then-branch: 7268 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 17
(push) ; 17
; [else-branch: 7268 | p2_14@899@01]
; [eval] !break2_2
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 7269 | !(p2_14@899@01) | dead]
; [else-branch: 7269 | p2_14@899@01 | live]
(push) ; 16
; [else-branch: 7269 | p2_14@899@01]
(pop) ; 16
(pop) ; 15
; [eval] !(p1_15 && !break1_2)
; [eval] p1_15 && !break1_2
(push) ; 15
; [then-branch: 7270 | !(p1_14@898@01) | live]
; [else-branch: 7270 | p1_14@898@01 | live]
(push) ; 16
; [then-branch: 7270 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 16
(push) ; 16
; [else-branch: 7270 | p1_14@898@01]
; [eval] !break1_2
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 7271 | !(p1_14@898@01) | dead]
; [else-branch: 7271 | p1_14@898@01 | live]
(push) ; 15
; [else-branch: 7271 | p1_14@898@01]
(pop) ; 15
(pop) ; 14
; [eval] !(!bypass1_2 && break1_2 || !bypass2_2 && break2_2)
; [eval] !bypass1_2 && break1_2 || !bypass2_2 && break2_2
; [eval] !bypass1_2 && break1_2
; [eval] !bypass1_2
(push) ; 14
; [then-branch: 7272 | bypass1_2@955@01 | live]
; [else-branch: 7272 | !(bypass1_2@955@01) | live]
(push) ; 15
; [then-branch: 7272 | bypass1_2@955@01]
(assert bypass1_2@955@01)
(pop) ; 15
(push) ; 15
; [else-branch: 7272 | !(bypass1_2@955@01)]
(assert (not bypass1_2@955@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 7273 | !(bypass1_2@955@01) && break1_2@967@01 | live]
; [else-branch: 7273 | !(!(bypass1_2@955@01) && break1_2@967@01) | live]
(push) ; 15
; [then-branch: 7273 | !(bypass1_2@955@01) && break1_2@967@01]
(assert (and (not bypass1_2@955@01) break1_2@967@01))
(pop) ; 15
(push) ; 15
; [else-branch: 7273 | !(!(bypass1_2@955@01) && break1_2@967@01)]
(assert (not (and (not bypass1_2@955@01) break1_2@967@01)))
; [eval] !bypass2_2 && break2_2
; [eval] !bypass2_2
(push) ; 16
; [then-branch: 7274 | bypass2_2@956@01 | live]
; [else-branch: 7274 | !(bypass2_2@956@01) | live]
(push) ; 17
; [then-branch: 7274 | bypass2_2@956@01]
(assert bypass2_2@956@01)
(pop) ; 17
(push) ; 17
; [else-branch: 7274 | !(bypass2_2@956@01)]
(assert (not bypass2_2@956@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not bypass2_2@956@01) bypass2_2@956@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (or
  (and (not bypass1_2@955@01) break1_2@967@01)
  (and (not bypass2_2@956@01) break2_2@968@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7275 | !(!(bypass1_2@955@01) && break1_2@967@01 || !(bypass2_2@956@01) && break2_2@968@01) | dead]
; [else-branch: 7275 | !(bypass1_2@955@01) && break1_2@967@01 || !(bypass2_2@956@01) && break2_2@968@01 | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 7275 | !(bypass1_2@955@01) && break1_2@967@01 || !(bypass2_2@956@01) && break2_2@968@01]
(assert (or
  (and (not bypass1_2@955@01) break1_2@967@01)
  (and (not bypass2_2@956@01) break2_2@968@01)))
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 7173 | p1_14@898@01 && !(break1_2@967@01) && !(bypass1_2@955@01) || p2_14@899@01 && !(break2_2@968@01) && !(bypass2_2@956@01)]
(assert (or
  (and p1_14@898@01 (and (not break1_2@967@01) (not bypass1_2@955@01)))
  (and p2_14@899@01 (and (not break2_2@968@01) (not bypass2_2@956@01)))))
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
; [eval] !(p2_14 && !break2_2)
; [eval] p2_14 && !break2_2
(push) ; 6
; [then-branch: 7276 | !(p2_14@899@01) | live]
; [else-branch: 7276 | p2_14@899@01 | live]
(push) ; 7
; [then-branch: 7276 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(pop) ; 7
(push) ; 7
; [else-branch: 7276 | p2_14@899@01]
(assert p2_14@899@01)
; [eval] !break2_2
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_14@899@01))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7277 | !(p2_14@899@01) | dead]
; [else-branch: 7277 | p2_14@899@01 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 7277 | p2_14@899@01]
(assert p2_14@899@01)
(pop) ; 6
(pop) ; 5
; [eval] !(p1_14 && !break1_2)
; [eval] p1_14 && !break1_2
(push) ; 5
; [then-branch: 7278 | !(p1_14@898@01) | live]
; [else-branch: 7278 | p1_14@898@01 | live]
(push) ; 6
; [then-branch: 7278 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 6
(push) ; 6
; [else-branch: 7278 | p1_14@898@01]
(assert p1_14@898@01)
; [eval] !break1_2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not p1_14@898@01))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7279 | !(p1_14@898@01) | dead]
; [else-branch: 7279 | p1_14@898@01 | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 7279 | p1_14@898@01]
(assert p1_14@898@01)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 6747 | !(p2_14@899@01)]
(assert (not p2_14@899@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))))
  $Snap.unit))
; [eval] p1_14 ==> issubtype(typeof(c_2.Container_value), int())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not p1_14@898@01))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7280 | p1_14@898@01 | live]
; [else-branch: 7280 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 7280 | p1_14@898@01]
(assert p1_14@898@01)
; [eval] issubtype(typeof(c_2.Container_value), int())
; [eval] typeof(c_2.Container_value)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert p1_14@898@01)
(assert (=>
  p1_14@898@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))))))
  $Snap.unit))
; [eval] p2_14 ==> issubtype(typeof(c_2_0.Container_valuep), int())
(push) ; 4
; [then-branch: 7281 | p2_14@899@01 | dead]
; [else-branch: 7281 | !(p2_14@899@01) | live]
(push) ; 5
; [else-branch: 7281 | !(p2_14@899@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))))))
  $Snap.unit))
; [eval] p1_14 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7282 | p1_14@898@01 | live]
; [else-branch: 7282 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 7282 | p1_14@898@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@914@01)))))))))))))
  $Snap.unit))
; [eval] p2_14 ==> true
(push) ; 4
; [then-branch: 7283 | p2_14@899@01 | dead]
; [else-branch: 7283 | !(p2_14@899@01) | live]
(push) ; 5
; [else-branch: 7283 | !(p2_14@899@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@998@01 $Snap)
(assert (= $t@998@01 ($Snap.combine ($Snap.first $t@998@01) ($Snap.second $t@998@01))))
(assert (= ($Snap.first $t@998@01) $Snap.unit))
; [eval] p1_14 ==> (forperm _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <= _current_wait_level_160) && ((forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7284 | p1_14@898@01 | live]
; [else-branch: 7284 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 7284 | p1_14@898@01]
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <= _current_wait_level_160) && ((forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160)
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <= _current_wait_level_160)
(push) ; 7
; [then-branch: 7285 | False | live]
; [else-branch: 7285 | True | live]
(push) ; 8
; [then-branch: 7285 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 7285 | True]
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <= _current_wait_level_160)
(push) ; 9
; [then-branch: 7286 | False | live]
; [else-branch: 7286 | True | live]
(push) ; 10
; [then-branch: 7286 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 7286 | True]
; [eval] _residue_160 <= _current_wait_level_160
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p1_14@898@01 (<= _residue_160@904@01 _current_wait_level_160@910@01)))
(assert (=
  ($Snap.second $t@998@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@998@01))
    ($Snap.second ($Snap.second $t@998@01)))))
(assert (= ($Snap.first ($Snap.second $t@998@01)) $Snap.unit))
; [eval] p2_14 ==> (forperm _r_16: Ref [_r_16.MustReleaseBoundedp] :: Level(_r_16) <= _current_wait_level_160_0) && ((forperm _r_16: Ref [_r_16.MustReleaseUnboundedp] :: Level(_r_16) <= _current_wait_level_160_0) && _residue_160_0 <= _current_wait_level_160_0)
(push) ; 5
; [then-branch: 7287 | p2_14@899@01 | dead]
; [else-branch: 7287 | !(p2_14@899@01) | live]
(push) ; 6
; [else-branch: 7287 | !(p2_14@899@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@998@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@998@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@998@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@998@01))) $Snap.unit))
; [eval] p1_14 ==> _res == null || issubtype(typeof(_res), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7288 | p1_14@898@01 | live]
; [else-branch: 7288 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 7288 | p1_14@898@01]
; [eval] _res == null || issubtype(typeof(_res), int())
; [eval] _res == null
(push) ; 7
; [then-branch: 7289 | _res@912@01 == Null | live]
; [else-branch: 7289 | _res@912@01 != Null | live]
(push) ; 8
; [then-branch: 7289 | _res@912@01 == Null]
(assert (= _res@912@01 $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 7289 | _res@912@01 != Null]
(assert (not (= _res@912@01 $Ref.null)))
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@912@01 $Ref.null)) (= _res@912@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p1_14@898@01 (or (not (= _res@912@01 $Ref.null)) (= _res@912@01 $Ref.null))))
(assert (=>
  p1_14@898@01
  (or
    (= _res@912@01 $Ref.null)
    (issubtype<Bool> (typeof<PyType> _res@912@01) (as int<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@998@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@998@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@998@01))))
  $Snap.unit))
; [eval] p2_14 ==> _res_0 == null || issubtype(typeof(_res_0), int())
(push) ; 5
; [then-branch: 7290 | p2_14@899@01 | dead]
; [else-branch: 7290 | !(p2_14@899@01) | live]
(push) ; 6
; [else-branch: 7290 | !(p2_14@899@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7291 | p1_14@898@01 | live]
; [else-branch: 7291 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 7291 | p1_14@898@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01)))))))))
; [then-branch: 7292 | p2_14@899@01 | dead]
; [else-branch: 7292 | !(p2_14@899@01) | live]
(push) ; 6
; [else-branch: 7292 | !(p2_14@899@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01)))))))
  $Snap.unit))
; [eval] p1_14 ==> issubtype(typeof(c_2.Container_value), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7293 | p1_14@898@01 | live]
; [else-branch: 7293 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 7293 | p1_14@898@01]
; [eval] issubtype(typeof(c_2.Container_value), int())
; [eval] typeof(c_2.Container_value)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_14@898@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01))))))))
  $Snap.unit))
; [eval] p2_14 ==> issubtype(typeof(c_2_0.Container_valuep), int())
(push) ; 7
; [then-branch: 7294 | p2_14@899@01 | dead]
; [else-branch: 7294 | !(p2_14@899@01) | live]
(push) ; 8
; [else-branch: 7294 | !(p2_14@899@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01)))))))))
  $Snap.unit))
; [eval] p1_14 ==> int___eq__(c_2.Container_value, __prim__int___box__(8))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7295 | p1_14@898@01 | live]
; [else-branch: 7295 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 7295 | p1_14@898@01]
; [eval] int___eq__(c_2.Container_value, __prim__int___box__(8))
; [eval] __prim__int___box__(8)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01)))))) (__prim__int___box__ $Snap.unit 8)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01)))))) (__prim__int___box__ $Snap.unit 8))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_14@898@01
  (and
    (__prim__int___box__%precondition $Snap.unit 8)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01)))))) (__prim__int___box__ $Snap.unit 8)))))
(assert (=>
  p1_14@898@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01)))))) (__prim__int___box__ $Snap.unit 8))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01))))))))))
  $Snap.unit))
; [eval] p2_14 ==> int___eq__(c_2_0.Container_valuep, __prim__int___box__(8))
(push) ; 7
; [then-branch: 7296 | p2_14@899@01 | dead]
; [else-branch: 7296 | !(p2_14@899@01) | live]
(push) ; 8
; [else-branch: 7296 | !(p2_14@899@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01)))))))))))
  $Snap.unit))
; [eval] p1_14 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7297 | p1_14@898@01 | live]
; [else-branch: 7297 | !(p1_14@898@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 7297 | p1_14@898@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@998@01)))))))))))
  $Snap.unit))
; [eval] p2_14 ==> true
(push) ; 7
; [then-branch: 7298 | p2_14@899@01 | dead]
; [else-branch: 7298 | !(p2_14@899@01) | live]
(push) ; 8
; [else-branch: 7298 | !(p2_14@899@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var break1_2: Bool
(declare-const break1_2@999@01 Bool)
; [exec]
; var break2_2: Bool
(declare-const break2_2@1000@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@1001@01 $Ref)
; [exec]
; var _err_3: Ref
(declare-const _err_3@1002@01 $Ref)
; [exec]
; var c_7: Ref
(declare-const c_7@1003@01 $Ref)
; [exec]
; var c_7_0: Ref
(declare-const c_7_0@1004@01 $Ref)
; [exec]
; var b_7: Ref
(declare-const b_7@1005@01 $Ref)
; [exec]
; var b_7_0: Ref
(declare-const b_7_0@1006@01 $Ref)
; [exec]
; var _loop_measures_2: Seq[Measure$]
(declare-const _loop_measures_2@1007@01 Seq<Measure$>)
; [exec]
; var _loop_measures_2_0: Seq[Measure$]
(declare-const _loop_measures_2_0@1008@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_2: Bool
(declare-const _loop_check_before_2@1009@01 Bool)
; [exec]
; var _loop_check_before_2_0: Bool
(declare-const _loop_check_before_2_0@1010@01 Bool)
; [exec]
; var _loop_termination_flag_2: Bool
(declare-const _loop_termination_flag_2@1011@01 Bool)
; [exec]
; var _loop_termination_flag_2_0: Bool
(declare-const _loop_termination_flag_2_0@1012@01 Bool)
; [exec]
; var _loop_original_must_terminate_2: Perm
(declare-const _loop_original_must_terminate_2@1013@01 $Perm)
; [exec]
; var _loop_original_must_terminate_2_0: Perm
(declare-const _loop_original_must_terminate_2_0@1014@01 $Perm)
; [exec]
; var _residue_165: Perm
(declare-const _residue_165@1015@01 $Perm)
; [exec]
; var _residue_165_0: Perm
(declare-const _residue_165_0@1016@01 $Perm)
; [exec]
; var _cwl_160: Perm
(declare-const _cwl_160@1017@01 $Perm)
; [exec]
; var _cwl_160_0: Perm
(declare-const _cwl_160_0@1018@01 $Perm)
; [exec]
; var _method_measures_160: Seq[Measure$]
(declare-const _method_measures_160@1019@01 Seq<Measure$>)
; [exec]
; var _method_measures_160_0: Seq[Measure$]
(declare-const _method_measures_160_0@1020@01 Seq<Measure$>)
; [exec]
; var bypass1_2: Bool
(declare-const bypass1_2@1021@01 Bool)
; [exec]
; var bypass2_2: Bool
(declare-const bypass2_2@1022@01 Bool)
; [exec]
; var tmp1_17: Seq[Measure$]
(declare-const tmp1_17@1023@01 Seq<Measure$>)
; [exec]
; var tmp2_17: Seq[Measure$]
(declare-const tmp2_17@1024@01 Seq<Measure$>)
; [exec]
; var tmp1_18: Bool
(declare-const tmp1_18@1025@01 Bool)
; [exec]
; var tmp2_18: Bool
(declare-const tmp2_18@1026@01 Bool)
; [exec]
; var tmp1_19: Bool
(declare-const tmp1_19@1027@01 Bool)
; [exec]
; var tmp2_19: Bool
(declare-const tmp2_19@1028@01 Bool)
; [exec]
; var oldbreak1_2: Bool
(declare-const oldbreak1_2@1029@01 Bool)
; [exec]
; var oldbreak2_2: Bool
(declare-const oldbreak2_2@1030@01 Bool)
; [exec]
; var p1_15: Bool
(declare-const p1_15@1031@01 Bool)
; [exec]
; var p2_15: Bool
(declare-const p2_15@1032@01 Bool)
; [exec]
; var idle1_2: Bool
(declare-const idle1_2@1033@01 Bool)
; [exec]
; var idle2_2: Bool
(declare-const idle2_2@1034@01 Bool)
; [exec]
; inhale p1_14
(declare-const $t@1035@01 $Snap)
(assert (= $t@1035@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; break1_2 := false
; [exec]
; break2_2 := false
; [eval] p1_14 && !break1_2
(set-option :timeout 0)
(push) ; 5
; [then-branch: 7299 | !(p1_14@898@01) | live]
; [else-branch: 7299 | p1_14@898@01 | live]
(push) ; 6
; [then-branch: 7299 | !(p1_14@898@01)]
(assert (not p1_14@898@01))
(pop) ; 6
(push) ; 6
; [else-branch: 7299 | p1_14@898@01]
; [eval] !break1_2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_14@898@01 (not p1_14@898@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_14@898@01)))
(check-sat)
