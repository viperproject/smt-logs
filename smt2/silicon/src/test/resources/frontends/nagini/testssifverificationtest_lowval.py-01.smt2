(get-info :version)
; (:version "4.12.1")
; Started: 2025-01-08 21:13:20
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<PyType> 0)
(declare-sort Seq<Measure$> 0)
(declare-sort Seq<$Ref> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<_Name> 0)
(declare-sort PyType 0)
(declare-sort _list_ce_helper 0)
(declare-sort _Name 0)
(declare-sort Measure$ 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<PyType>To$Snap (Seq<PyType>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<PyType> ($Snap) Seq<PyType>)
(assert (forall ((x Seq<PyType>)) (!
    (= x ($SortWrappers.$SnapToSeq<PyType>($SortWrappers.Seq<PyType>To$Snap x)))
    :pattern (($SortWrappers.Seq<PyType>To$Snap x))
    :qid |$Snap.$SnapToSeq<PyType>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<PyType>To$Snap($SortWrappers.$SnapToSeq<PyType> x)))
    :pattern (($SortWrappers.$SnapToSeq<PyType> x))
    :qid |$Snap.Seq<PyType>To$SnapToSeq<PyType>|
    )))
(declare-fun $SortWrappers.Seq<Measure$>To$Snap (Seq<Measure$>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Measure$> ($Snap) Seq<Measure$>)
(assert (forall ((x Seq<Measure$>)) (!
    (= x ($SortWrappers.$SnapToSeq<Measure$>($SortWrappers.Seq<Measure$>To$Snap x)))
    :pattern (($SortWrappers.Seq<Measure$>To$Snap x))
    :qid |$Snap.$SnapToSeq<Measure$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Measure$>To$Snap($SortWrappers.$SnapToSeq<Measure$> x)))
    :pattern (($SortWrappers.$SnapToSeq<Measure$> x))
    :qid |$Snap.Seq<Measure$>To$SnapToSeq<Measure$>|
    )))
(declare-fun $SortWrappers.Seq<$Ref>To$Snap (Seq<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<$Ref> ($Snap) Seq<$Ref>)
(assert (forall ((x Seq<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSeq<$Ref>($SortWrappers.Seq<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Seq<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSeq<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<$Ref>To$Snap($SortWrappers.$SnapToSeq<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSeq<$Ref> x))
    :qid |$Snap.Seq<$Ref>To$SnapToSeq<$Ref>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<_Name>To$Snap (Set<_Name>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<_Name> ($Snap) Set<_Name>)
(assert (forall ((x Set<_Name>)) (!
    (= x ($SortWrappers.$SnapToSet<_Name>($SortWrappers.Set<_Name>To$Snap x)))
    :pattern (($SortWrappers.Set<_Name>To$Snap x))
    :qid |$Snap.$SnapToSet<_Name>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<_Name>To$Snap($SortWrappers.$SnapToSet<_Name> x)))
    :pattern (($SortWrappers.$SnapToSet<_Name> x))
    :qid |$Snap.Set<_Name>To$SnapToSet<_Name>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.PyTypeTo$Snap (PyType) $Snap)
(declare-fun $SortWrappers.$SnapToPyType ($Snap) PyType)
(assert (forall ((x PyType)) (!
    (= x ($SortWrappers.$SnapToPyType($SortWrappers.PyTypeTo$Snap x)))
    :pattern (($SortWrappers.PyTypeTo$Snap x))
    :qid |$Snap.$SnapToPyTypeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.PyTypeTo$Snap($SortWrappers.$SnapToPyType x)))
    :pattern (($SortWrappers.$SnapToPyType x))
    :qid |$Snap.PyTypeTo$SnapToPyType|
    )))
(declare-fun $SortWrappers._list_ce_helperTo$Snap (_list_ce_helper) $Snap)
(declare-fun $SortWrappers.$SnapTo_list_ce_helper ($Snap) _list_ce_helper)
(assert (forall ((x _list_ce_helper)) (!
    (= x ($SortWrappers.$SnapTo_list_ce_helper($SortWrappers._list_ce_helperTo$Snap x)))
    :pattern (($SortWrappers._list_ce_helperTo$Snap x))
    :qid |$Snap.$SnapTo_list_ce_helperTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._list_ce_helperTo$Snap($SortWrappers.$SnapTo_list_ce_helper x)))
    :pattern (($SortWrappers.$SnapTo_list_ce_helper x))
    :qid |$Snap._list_ce_helperTo$SnapTo_list_ce_helper|
    )))
(declare-fun $SortWrappers._NameTo$Snap (_Name) $Snap)
(declare-fun $SortWrappers.$SnapTo_Name ($Snap) _Name)
(assert (forall ((x _Name)) (!
    (= x ($SortWrappers.$SnapTo_Name($SortWrappers._NameTo$Snap x)))
    :pattern (($SortWrappers._NameTo$Snap x))
    :qid |$Snap.$SnapTo_NameTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._NameTo$Snap($SortWrappers.$SnapTo_Name x)))
    :pattern (($SortWrappers.$SnapTo_Name x))
    :qid |$Snap._NameTo$SnapTo_Name|
    )))
(declare-fun $SortWrappers.Measure$To$Snap (Measure$) $Snap)
(declare-fun $SortWrappers.$SnapToMeasure$ ($Snap) Measure$)
(assert (forall ((x Measure$)) (!
    (= x ($SortWrappers.$SnapToMeasure$($SortWrappers.Measure$To$Snap x)))
    :pattern (($SortWrappers.Measure$To$Snap x))
    :qid |$Snap.$SnapToMeasure$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Measure$To$Snap($SortWrappers.$SnapToMeasure$ x)))
    :pattern (($SortWrappers.$SnapToMeasure$ x))
    :qid |$Snap.Measure$To$SnapToMeasure$|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<_Name>) Int)
(declare-const Set_empty Set<_Name>)
(declare-fun Set_in (_Name Set<_Name>) Bool)
(declare-fun Set_singleton (_Name) Set<_Name>)
(declare-fun Set_unionone (Set<_Name> _Name) Set<_Name>)
(declare-fun Set_union (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_intersection (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_difference (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_subset (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_equal (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_skolem_diff (Set<_Name> Set<_Name>) _Name)
(declare-fun Seq_length (Seq<PyType>) Int)
(declare-const Seq_empty Seq<PyType>)
(declare-fun Seq_singleton (PyType) Seq<PyType>)
(declare-fun Seq_append (Seq<PyType> Seq<PyType>) Seq<PyType>)
(declare-fun Seq_index (Seq<PyType> Int) PyType)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<PyType> Int PyType) Seq<PyType>)
(declare-fun Seq_take (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_drop (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_contains (Seq<PyType> PyType) Bool)
(declare-fun Seq_contains_trigger (Seq<PyType> PyType) Bool)
(declare-fun Seq_skolem (Seq<PyType> PyType) Int)
(declare-fun Seq_equal (Seq<PyType> Seq<PyType>) Bool)
(declare-fun Seq_skolem_diff (Seq<PyType> Seq<PyType>) Int)
(declare-fun Seq_length (Seq<Measure$>) Int)
(declare-const Seq_empty Seq<Measure$>)
(declare-fun Seq_singleton (Measure$) Seq<Measure$>)
(declare-fun Seq_append (Seq<Measure$> Seq<Measure$>) Seq<Measure$>)
(declare-fun Seq_index (Seq<Measure$> Int) Measure$)
(declare-fun Seq_update (Seq<Measure$> Int Measure$) Seq<Measure$>)
(declare-fun Seq_take (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_drop (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_contains (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_contains_trigger (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_skolem (Seq<Measure$> Measure$) Int)
(declare-fun Seq_equal (Seq<Measure$> Seq<Measure$>) Bool)
(declare-fun Seq_skolem_diff (Seq<Measure$> Seq<Measure$>) Int)
(declare-fun Seq_length (Seq<$Ref>) Int)
(declare-const Seq_empty Seq<$Ref>)
(declare-fun Seq_singleton ($Ref) Seq<$Ref>)
(declare-fun Seq_append (Seq<$Ref> Seq<$Ref>) Seq<$Ref>)
(declare-fun Seq_index (Seq<$Ref> Int) $Ref)
(declare-fun Seq_update (Seq<$Ref> Int $Ref) Seq<$Ref>)
(declare-fun Seq_take (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_drop (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_contains (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_contains_trigger (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_skolem (Seq<$Ref> $Ref) Int)
(declare-fun Seq_equal (Seq<$Ref> Seq<$Ref>) Bool)
(declare-fun Seq_skolem_diff (Seq<$Ref> Seq<$Ref>) Int)
(declare-fun extends_<Bool> (PyType PyType) Bool)
(declare-fun issubtype<Bool> (PyType PyType) Bool)
(declare-fun isnotsubtype<Bool> (PyType PyType) Bool)
(declare-fun tuple_args<Seq<PyType>> (PyType) Seq<PyType>)
(declare-fun typeof<PyType> ($Ref) PyType)
(declare-fun get_basic<PyType> (PyType) PyType)
(declare-fun union_type_1<PyType> (PyType) PyType)
(declare-fun union_type_2<PyType> (PyType PyType) PyType)
(declare-fun union_type_3<PyType> (PyType PyType PyType) PyType)
(declare-fun union_type_4<PyType> (PyType PyType PyType PyType) PyType)
(declare-const object<PyType> PyType)
(declare-const list_basic<PyType> PyType)
(declare-fun list<PyType> (PyType) PyType)
(declare-fun list_arg<PyType> (PyType Int) PyType)
(declare-const set_basic<PyType> PyType)
(declare-fun set<PyType> (PyType) PyType)
(declare-fun set_arg<PyType> (PyType Int) PyType)
(declare-const dict_basic<PyType> PyType)
(declare-fun dict<PyType> (PyType PyType) PyType)
(declare-fun dict_arg<PyType> (PyType Int) PyType)
(declare-const int<PyType> PyType)
(declare-const float<PyType> PyType)
(declare-const bool<PyType> PyType)
(declare-const NoneType<PyType> PyType)
(declare-const Exception<PyType> PyType)
(declare-const ConnectionRefusedError<PyType> PyType)
(declare-const traceback<PyType> PyType)
(declare-const str<PyType> PyType)
(declare-const bytes<PyType> PyType)
(declare-const tuple_basic<PyType> PyType)
(declare-fun tuple<PyType> (Seq<PyType>) PyType)
(declare-fun tuple_arg<PyType> (PyType Int) PyType)
(declare-const PSeq_basic<PyType> PyType)
(declare-fun PSeq<PyType> (PyType) PyType)
(declare-fun PSeq_arg<PyType> (PyType Int) PyType)
(declare-const PSet_basic<PyType> PyType)
(declare-fun PSet<PyType> (PyType) PyType)
(declare-fun PSet_arg<PyType> (PyType Int) PyType)
(declare-const PMultiset_basic<PyType> PyType)
(declare-fun PMultiset<PyType> (PyType) PyType)
(declare-fun PMultiset_arg<PyType> (PyType Int) PyType)
(declare-const slice<PyType> PyType)
(declare-const py_range<PyType> PyType)
(declare-const Iterator_basic<PyType> PyType)
(declare-fun Iterator<PyType> (PyType) PyType)
(declare-fun Iterator_arg<PyType> (PyType Int) PyType)
(declare-const Thread_0<PyType> PyType)
(declare-const LevelType<PyType> PyType)
(declare-const type<PyType> PyType)
(declare-const Place<PyType> PyType)
(declare-const __prim__Seq_type<PyType> PyType)
(declare-const Example<PyType> PyType)
(declare-const StringContainer<PyType> PyType)
(declare-fun Measure$create<Measure$> (Bool $Ref Int) Measure$)
(declare-fun Measure$guard<Bool> (Measure$) Bool)
(declare-fun Measure$key<Ref> (Measure$) $Ref)
(declare-fun Measure$value<Int> (Measure$) Int)
(declare-fun seq_ref_length<Int> (Seq<$Ref>) Int)
(declare-fun seq_ref_index<Ref> (Seq<$Ref> Int) $Ref)
(declare-fun _combine<_Name> (_Name _Name) _Name)
(declare-fun _single<_Name> (Int) _Name)
(declare-fun _get_combined_prefix<_Name> (_Name) _Name)
(declare-fun _get_combined_name<_Name> (_Name) _Name)
(declare-fun _get_value<Int> (_Name) Int)
(declare-fun _name_type<Bool> (_Name) Bool)
(declare-fun _is_single<Bool> (_Name) Bool)
(declare-fun _is_combined<Bool> (_Name) Bool)
; Declaring symbols related to program functions (from program analysis)
(declare-fun tuple___val__ ($Snap $Ref) Seq<$Ref>)
(declare-fun tuple___val__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun tuple___val__%stateless ($Ref) Bool)
(declare-fun tuple___val__%precondition ($Snap $Ref) Bool)
(declare-fun tuple___len__ ($Snap $Ref) Int)
(declare-fun tuple___len__%limited ($Snap $Ref) Int)
(declare-fun tuple___len__%stateless ($Ref) Bool)
(declare-fun tuple___len__%precondition ($Snap $Ref) Bool)
(declare-fun str___val__ ($Snap $Ref) Int)
(declare-fun str___val__%limited ($Snap $Ref) Int)
(declare-fun str___val__%stateless ($Ref) Bool)
(declare-fun str___val__%precondition ($Snap $Ref) Bool)
(declare-fun str___len__ ($Snap $Ref) Int)
(declare-fun str___len__%limited ($Snap $Ref) Int)
(declare-fun str___len__%stateless ($Ref) Bool)
(declare-fun str___len__%precondition ($Snap $Ref) Bool)
(declare-fun tuple___getitem__ ($Snap $Ref Int) $Ref)
(declare-fun tuple___getitem__%limited ($Snap $Ref Int) $Ref)
(declare-fun tuple___getitem__%stateless ($Ref Int) Bool)
(declare-fun tuple___getitem__%precondition ($Snap $Ref Int) Bool)
(declare-fun _isDefined ($Snap Int) Bool)
(declare-fun _isDefined%limited ($Snap Int) Bool)
(declare-fun _isDefined%stateless (Int) Bool)
(declare-fun _isDefined%precondition ($Snap Int) Bool)
(declare-fun bool___unbox__ ($Snap $Ref) Bool)
(declare-fun bool___unbox__%limited ($Snap $Ref) Bool)
(declare-fun bool___unbox__%stateless ($Ref) Bool)
(declare-fun bool___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__bool___box__ ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%limited ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%stateless (Bool) Bool)
(declare-fun __prim__bool___box__%precondition ($Snap Bool) Bool)
(declare-fun int___unbox__ ($Snap $Ref) Int)
(declare-fun int___unbox__%limited ($Snap $Ref) Int)
(declare-fun int___unbox__%stateless ($Ref) Bool)
(declare-fun int___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__int___box__ ($Snap Int) $Ref)
(declare-fun __prim__int___box__%limited ($Snap Int) $Ref)
(declare-fun __prim__int___box__%stateless (Int) Bool)
(declare-fun __prim__int___box__%precondition ($Snap Int) Bool)
(declare-fun Level ($Snap $Ref) $Perm)
(declare-fun Level%limited ($Snap $Ref) $Perm)
(declare-fun Level%stateless ($Ref) Bool)
(declare-fun Level%precondition ($Snap $Ref) Bool)
(declare-fun str___create__ ($Snap Int Int) $Ref)
(declare-fun str___create__%limited ($Snap Int Int) $Ref)
(declare-fun str___create__%stateless (Int Int) Bool)
(declare-fun str___create__%precondition ($Snap Int Int) Bool)
(declare-fun tuple___create2__ ($Snap $Ref $Ref PyType PyType Int) $Ref)
(declare-fun tuple___create2__%limited ($Snap $Ref $Ref PyType PyType Int) $Ref)
(declare-fun tuple___create2__%stateless ($Ref $Ref PyType PyType Int) Bool)
(declare-fun tuple___create2__%precondition ($Snap $Ref $Ref PyType PyType Int) Bool)
(declare-fun str___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%stateless ($Ref $Ref) Bool)
(declare-fun str___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun int___add__ ($Snap Int Int) Int)
(declare-fun int___add__%limited ($Snap Int Int) Int)
(declare-fun int___add__%stateless (Int Int) Bool)
(declare-fun int___add__%precondition ($Snap Int Int) Bool)
(declare-fun tuple___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun tuple___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun tuple___eq__%stateless ($Ref $Ref) Bool)
(declare-fun tuple___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun __file__ ($Snap) $Ref)
(declare-fun __file__%limited ($Snap) $Ref)
(declare-const __file__%stateless Bool)
(declare-fun __file__%precondition ($Snap) Bool)
(declare-fun _checkDefined ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%limited ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%stateless ($Ref Int) Bool)
(declare-fun _checkDefined%precondition ($Snap $Ref Int) Bool)
(declare-fun int___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%stateless ($Ref $Ref) Bool)
(declare-fun int___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun __name__ ($Snap) $Ref)
(declare-fun __name__%limited ($Snap) $Ref)
(declare-const __name__%stateless Bool)
(declare-fun __name__%precondition ($Snap) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun MustTerminate%trigger ($Snap $Ref) Bool)
(declare-fun MustTerminate_0%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeBounded%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeBounded_0%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeUnbounded%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeUnbounded_0%trigger ($Snap $Ref) Bool)
(declare-fun _MaySet%trigger ($Snap $Ref Int) Bool)
(declare-fun _MaySet_0%trigger ($Snap $Ref Int) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct bool<PyType> float<PyType> slice<PyType> list_basic<PyType> set_basic<PyType> ConnectionRefusedError<PyType> PMultiset_basic<PyType> PSet_basic<PyType> Iterator_basic<PyType> PSeq_basic<PyType> object<PyType> StringContainer<PyType> bytes<PyType> dict_basic<PyType> type<PyType> Example<PyType> traceback<PyType> py_range<PyType> int<PyType> Exception<PyType> __prim__Seq_type<PyType> tuple_basic<PyType> str<PyType> Thread_0<PyType> Place<PyType> LevelType<PyType> NoneType<PyType>))
; ////////// Axioms
(assert (forall ((s Seq<PyType>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<PyType>)) 0))
(assert (forall ((s Seq<PyType>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (not (= s1 (as Seq_empty  Seq<PyType>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (x PyType)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<PyType>) (x PyType) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<PyType>) (b Seq<PyType>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x PyType) (y PyType)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Measure$>)) 0))
(assert (forall ((s Seq<Measure$>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (not (= s1 (as Seq_empty  Seq<Measure$>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Measure$>) (b Seq<Measure$>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Measure$) (y Measure$)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<$Ref>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<$Ref>)) 0))
(assert (forall ((s Seq<$Ref>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (not (= s1 (as Seq_empty  Seq<$Ref>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<$Ref>) (b Seq<$Ref>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x $Ref) (y $Ref)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<_Name>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o _Name)) (!
  (not (Set_in o (as Set_empty  Set<_Name>)))
  :pattern ((Set_in o (as Set_empty  Set<_Name>)))
  )))
(assert (forall ((s Set<_Name>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<_Name>)))
    (=> (not (= (Set_card s) 0)) (exists ((x _Name))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r _Name)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r _Name) (o _Name)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r _Name)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (o _Name)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (Set_subset a b)
    (forall ((o _Name)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (issubtype<Bool> middle super))
    (issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> sub middle) (issubtype<Bool> middle super))
  :qid |prog.issubtype_transitivity|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ type_)
  :pattern ((issubtype<Bool> type_ type_))
  :qid |prog.issubtype_reflexivity|)))
(assert (forall ((sub PyType) (sub2 PyType)) (!
  (=> (extends_<Bool> sub sub2) (issubtype<Bool> sub sub2))
  :pattern ((extends_<Bool> sub sub2))
  :qid |prog.extends_implies_subtype|)))
(assert (forall ((r $Ref)) (!
  (=
    (issubtype<Bool> (typeof<PyType> r) (as NoneType<PyType>  PyType))
    (= r $Ref.null))
  :pattern ((typeof<PyType> r))
  :qid |prog.null_nonetype|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ (as object<PyType>  PyType))
  :pattern ((issubtype<Bool> type_ (as object<PyType>  PyType)))
  :qid |prog.issubtype_object|)))
(assert (forall ((sub PyType) (sub2 PyType) (super PyType)) (!
  (=>
    (and
      (extends_<Bool> sub super)
      (and (extends_<Bool> sub2 super) (not (= sub sub2))))
    (and (isnotsubtype<Bool> sub sub2) (isnotsubtype<Bool> sub2 sub)))
  :pattern ((extends_<Bool> sub super) (extends_<Bool> sub2 super))
  :qid |prog.issubtype_exclusion|)))
(assert (forall ((sub PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub super) (not (= sub super)))
    (not (issubtype<Bool> super sub)))
  :pattern ((issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> super sub))
  :qid |prog.issubtype_exclusion_2|)))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
    (not (issubtype<Bool> sub super)))
  :pattern ((issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
  :qid |prog.issubtype_exclusion_propagation|)))
(assert (forall ((seq Seq<PyType>) (i Int) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (issubtype<Bool> (tuple_arg<PyType> Z i) (Seq_index seq i)))
  :pattern ((tuple<PyType> seq) (tuple_arg<PyType> Z i))
  :qid |prog.tuple_arg_def|)))
(assert (forall ((seq Seq<PyType>) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (= (Seq_length (tuple_args<Seq<PyType>> Z)) (Seq_length seq)))
  :pattern ((issubtype<Bool> Z (tuple<PyType> seq)))
  :qid |prog.tuple_args_def|)))
(assert (forall ((seq1 Seq<PyType>) (seq2 Seq<PyType>)) (!
  (=>
    (and
      (not (Seq_equal seq1 seq2))
      (and
        (= (Seq_length seq1) (Seq_length seq2))
        (forall ((i Int)) (!
          (=>
            (and (>= i 0) (< i (Seq_length seq1)))
            (issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          :pattern ((issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          ))))
    (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq1) (Seq_length seq2))
  :pattern ((Seq_length seq1) (tuple<PyType> seq2))
  :pattern ((Seq_length seq1) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq2) (Seq_length seq1))
  :pattern ((Seq_length seq2) (tuple<PyType> seq1))
  :pattern ((Seq_length seq2) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :qid |prog.tuple_self_subtype|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> X (union_type_1<PyType> arg_1)) (issubtype<Bool> X arg_1))
  :pattern ((issubtype<Bool> X (union_type_1<PyType> arg_1)))
  :qid |prog.union_subtype_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2))
    (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2)))
  :pattern ((issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2)))
  :qid |prog.union_subtype_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3))
    (or
      (issubtype<Bool> X arg_1)
      (or (issubtype<Bool> X arg_2) (issubtype<Bool> X arg_3))))
  :pattern ((issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3)))
  :qid |prog.union_subtype_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4))
    (or
      (issubtype<Bool> X arg_1)
      (or
        (issubtype<Bool> X arg_2)
        (or (issubtype<Bool> X arg_3) (issubtype<Bool> X arg_4)))))
  :pattern ((issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4)))
  :qid |prog.union_subtype_4|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> (union_type_1<PyType> arg_1) X) (issubtype<Bool> arg_1 X))
  :pattern ((issubtype<Bool> (union_type_1<PyType> arg_1) X))
  :qid |prog.subtype_union_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X)
    (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X)))
  :pattern ((issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X))
  :qid |prog.subtype_union_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and (issubtype<Bool> arg_2 X) (issubtype<Bool> arg_3 X))))
  :pattern ((issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X))
  :qid |prog.subtype_union_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and
        (issubtype<Bool> arg_2 X)
        (and (issubtype<Bool> arg_3 X) (issubtype<Bool> arg_4 X)))))
  :pattern ((issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X))
  :qid |prog.subtype_union_4|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (list<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (list<PyType> var0)) (as list_basic<PyType>  PyType)))
  :pattern ((list<PyType> var0))
  :qid |prog.subtype_list|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (list<PyType> arg0)) (= (list_arg<PyType> Z 0) arg0))
  :pattern ((list<PyType> arg0) (list_arg<PyType> Z 0))
  :qid |prog.list_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (set<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (set<PyType> var0)) (as set_basic<PyType>  PyType)))
  :pattern ((set<PyType> var0))
  :qid |prog.subtype_set|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (set<PyType> arg0)) (= (set_arg<PyType> Z 0) arg0))
  :pattern ((set<PyType> arg0) (set_arg<PyType> Z 0))
  :qid |prog.set_args0|)))
(assert (forall ((var0 PyType) (var1 PyType)) (!
  (and
    (extends_<Bool> (dict<PyType> var0 var1) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (dict<PyType> var0 var1))
      (as dict_basic<PyType>  PyType)))
  :pattern ((dict<PyType> var0 var1))
  :qid |prog.subtype_dict|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 0) arg0))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 0))
  :qid |prog.dict_args0|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 1) arg1))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 1))
  :qid |prog.dict_args1|)))
(assert (and
  (extends_<Bool> (as int<PyType>  PyType) (as float<PyType>  PyType))
  (= (get_basic<PyType> (as int<PyType>  PyType)) (as int<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as float<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as float<PyType>  PyType)) (as float<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bool<PyType>  PyType) (as int<PyType>  PyType))
  (= (get_basic<PyType> (as bool<PyType>  PyType)) (as bool<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as NoneType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as NoneType<PyType>  PyType))
    (as NoneType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Exception<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Exception<PyType>  PyType))
    (as Exception<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as ConnectionRefusedError<PyType>  PyType) (as Exception<PyType>  PyType))
  (=
    (get_basic<PyType> (as ConnectionRefusedError<PyType>  PyType))
    (as ConnectionRefusedError<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as traceback<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as traceback<PyType>  PyType))
    (as traceback<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as str<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as str<PyType>  PyType)) (as str<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bytes<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as bytes<PyType>  PyType)) (as bytes<PyType>  PyType))))
(assert (forall ((args Seq<PyType>)) (!
  (and
    (=>
      (forall ((e PyType)) (!
        (=> (Seq_contains args e) (= e (as object<PyType>  PyType)))
        :pattern ((Seq_contains args e))
        :pattern ((Seq_contains_trigger args e))
        ))
      (extends_<Bool> (tuple<PyType> args) (as object<PyType>  PyType)))
    (= (get_basic<PyType> (tuple<PyType> args)) (as tuple_basic<PyType>  PyType)))
  :pattern ((tuple<PyType> args))
  :qid |prog.subtype_tuple|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSeq<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSeq<PyType> var0)) (as PSeq_basic<PyType>  PyType)))
  :pattern ((PSeq<PyType> var0))
  :qid |prog.subtype_PSeq|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSeq<PyType> arg0)) (= (PSeq_arg<PyType> Z 0) arg0))
  :pattern ((PSeq<PyType> arg0) (PSeq_arg<PyType> Z 0))
  :qid |prog.PSeq_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSet<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSet<PyType> var0)) (as PSet_basic<PyType>  PyType)))
  :pattern ((PSet<PyType> var0))
  :qid |prog.subtype_PSet|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSet<PyType> arg0)) (= (PSet_arg<PyType> Z 0) arg0))
  :pattern ((PSet<PyType> arg0) (PSet_arg<PyType> Z 0))
  :qid |prog.PSet_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PMultiset<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (PMultiset<PyType> var0))
      (as PMultiset_basic<PyType>  PyType)))
  :pattern ((PMultiset<PyType> var0))
  :qid |prog.subtype_PMultiset|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (PMultiset<PyType> arg0))
    (= (PMultiset_arg<PyType> Z 0) arg0))
  :pattern ((PMultiset<PyType> arg0) (PMultiset_arg<PyType> Z 0))
  :qid |prog.PMultiset_args0|)))
(assert (and
  (extends_<Bool> (as slice<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as slice<PyType>  PyType)) (as slice<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as py_range<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as py_range<PyType>  PyType))
    (as py_range<PyType>  PyType))))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (Iterator<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (Iterator<PyType> var0))
      (as Iterator_basic<PyType>  PyType)))
  :pattern ((Iterator<PyType> var0))
  :qid |prog.subtype_Iterator|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (Iterator<PyType> arg0))
    (= (Iterator_arg<PyType> Z 0) arg0))
  :pattern ((Iterator<PyType> arg0) (Iterator_arg<PyType> Z 0))
  :qid |prog.Iterator_args0|)))
(assert (and
  (extends_<Bool> (as Thread_0<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Thread_0<PyType>  PyType))
    (as Thread_0<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as LevelType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as LevelType<PyType>  PyType))
    (as LevelType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as type<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as type<PyType>  PyType)) (as type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Place<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as Place<PyType>  PyType)) (as Place<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as __prim__Seq_type<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as __prim__Seq_type<PyType>  PyType))
    (as __prim__Seq_type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Example<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Example<PyType>  PyType))
    (as Example<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as StringContainer<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as StringContainer<PyType>  PyType))
    (as StringContainer<PyType>  PyType))))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$guard<Bool> (Measure$create<Measure$> g k v)) g)
  :pattern ((Measure$guard<Bool> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A0|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$key<Ref> (Measure$create<Measure$> g k v)) k)
  :pattern ((Measure$key<Ref> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A1|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$value<Int> (Measure$create<Measure$> g k v)) v)
  :pattern ((Measure$value<Int> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A2|)))
(assert (forall ((___s Seq<$Ref>)) (!
  (= (Seq_length ___s) (seq_ref_length<Int> ___s))
  :pattern ((Seq_length ___s))
  :qid |prog.relate_length|)))
(assert (forall ((___s Seq<$Ref>) (___i Int)) (!
  (= (Seq_index ___s ___i) (seq_ref_index<Ref> ___s ___i))
  :pattern ((Seq_index ___s ___i))
  :qid |prog.relate_index|)))
(assert (forall ((i Int)) (!
  (= (_get_value<Int> (_single<_Name> i)) i)
  :pattern ((_single<_Name> i))
  :qid |prog.decompose_single|)))
(assert (forall ((n _Name)) (!
  (=> (_is_single<Bool> n) (= n (_single<_Name> (_get_value<Int> n))))
  :pattern ((_get_value<Int> n))
  :qid |prog.compose_single|)))
(assert (forall ((i Int)) (!
  (_name_type<Bool> (_single<_Name> i))
  :pattern ((_single<_Name> i))
  :qid |prog.type_of_single|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (and
    (= (_get_combined_prefix<_Name> (_combine<_Name> n1 n2)) n1)
    (= (_get_combined_name<_Name> (_combine<_Name> n1 n2)) n2))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.decompose_combined|)))
(assert (forall ((n _Name)) (!
  (=>
    (_is_combined<Bool> n)
    (=
      n
      (_combine<_Name> (_get_combined_prefix<_Name> n) (_get_combined_name<_Name> n))))
  :pattern ((_get_combined_prefix<_Name> n))
  :pattern ((_get_combined_name<_Name> n))
  :qid |prog.compose_combined|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (not (_name_type<Bool> (_combine<_Name> n1 n2)))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.type_of_composed|)))
(assert (forall ((n _Name)) (!
  (= (_name_type<Bool> n) (_is_single<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_single|)))
(assert (forall ((n _Name)) (!
  (= (not (_name_type<Bool> n)) (_is_combined<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_combined|)))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun letvar@51@00 ($Snap $Ref Int) Int)
(declare-fun letvar@59@00 ($Snap $Ref $Ref PyType PyType Int) Int)
(declare-fun letvar@60@00 ($Snap $Ref $Ref PyType PyType Int) Int)
(declare-fun letvar@64@00 ($Snap $Ref $Ref Int) Int)
(declare-fun letvar@65@00 ($Snap $Ref $Ref Int) Int)
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (= (tuple___val__%limited s@$ self@0@00) (tuple___val__ s@$ self@0@00))
  :pattern ((tuple___val__ s@$ self@0@00))
  :qid |quant-u-3932|)))
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (tuple___val__%stateless self@0@00)
  :pattern ((tuple___val__%limited s@$ self@0@00))
  :qid |quant-u-3933|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (= (tuple___len__%limited s@$ self@2@00) (tuple___len__ s@$ self@2@00))
  :pattern ((tuple___len__ s@$ self@2@00))
  :qid |quant-u-3934|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (tuple___len__%stateless self@2@00)
  :pattern ((tuple___len__%limited s@$ self@2@00))
  :qid |quant-u-3935|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (tuple___len__%limited s@$ self@2@00))) (=>
    (tuple___len__%precondition s@$ self@2@00)
    (and
      (=
        result@3@00
        (Seq_length (tuple_args<Seq<PyType>> (typeof<PyType> self@2@00))))
      (= result@3@00 (Seq_length (tuple___val__ $Snap.unit self@2@00))))))
  :pattern ((tuple___len__%limited s@$ self@2@00))
  :qid |quant-u-3972|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (tuple___len__%limited s@$ self@2@00))) true)
  :pattern ((tuple___len__%limited s@$ self@2@00))
  :qid |quant-u-3973|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (tuple___len__%limited s@$ self@2@00))) (=>
    (tuple___len__%precondition s@$ self@2@00)
    (tuple___val__%precondition $Snap.unit self@2@00)))
  :pattern ((tuple___len__%limited s@$ self@2@00))
  :qid |quant-u-3974|)))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (= (str___val__%limited s@$ self@4@00) (str___val__ s@$ self@4@00))
  :pattern ((str___val__ s@$ self@4@00))
  :qid |quant-u-3936|)))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (str___val__%stateless self@4@00)
  :pattern ((str___val__%limited s@$ self@4@00))
  :qid |quant-u-3937|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref)) (!
  (= (str___len__%limited s@$ self@6@00) (str___len__ s@$ self@6@00))
  :pattern ((str___len__ s@$ self@6@00))
  :qid |quant-u-3938|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref)) (!
  (str___len__%stateless self@6@00)
  :pattern ((str___len__%limited s@$ self@6@00))
  :qid |quant-u-3939|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref)) (!
  (let ((result@7@00 (str___len__%limited s@$ self@6@00))) (=>
    (str___len__%precondition s@$ self@6@00)
    (>= result@7@00 0)))
  :pattern ((str___len__%limited s@$ self@6@00))
  :qid |quant-u-3975|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref)) (!
  (let ((result@7@00 (str___len__%limited s@$ self@6@00))) true)
  :pattern ((str___len__%limited s@$ self@6@00))
  :qid |quant-u-3976|)))
(assert (forall ((s@$ $Snap) (self@8@00 $Ref) (key@9@00 Int)) (!
  (=
    (tuple___getitem__%limited s@$ self@8@00 key@9@00)
    (tuple___getitem__ s@$ self@8@00 key@9@00))
  :pattern ((tuple___getitem__ s@$ self@8@00 key@9@00))
  :qid |quant-u-3940|)))
(assert (forall ((s@$ $Snap) (self@8@00 $Ref) (key@9@00 Int)) (!
  (tuple___getitem__%stateless self@8@00 key@9@00)
  :pattern ((tuple___getitem__%limited s@$ self@8@00 key@9@00))
  :qid |quant-u-3941|)))
(assert (forall ((s@$ $Snap) (self@8@00 $Ref) (key@9@00 Int)) (!
  (let ((result@10@00 (tuple___getitem__%limited s@$ self@8@00 key@9@00))) (=>
    (tuple___getitem__%precondition s@$ self@8@00 key@9@00)
    (and
      (=>
        (>= key@9@00 0)
        (issubtype<Bool> (typeof<PyType> result@10@00) (tuple_arg<PyType> (typeof<PyType> self@8@00) key@9@00)))
      (=>
        (< key@9@00 0)
        (issubtype<Bool> (typeof<PyType> result@10@00) (tuple_arg<PyType> (typeof<PyType> self@8@00) (+
          (tuple___len__ $Snap.unit self@8@00)
          key@9@00))))
      (=>
        (>= key@9@00 0)
        (=
          result@10@00
          (Seq_index (tuple___val__ $Snap.unit self@8@00) key@9@00)))
      (=>
        (< key@9@00 0)
        (=
          result@10@00
          (Seq_index
            (tuple___val__ $Snap.unit self@8@00)
            (+ (tuple___len__ $Snap.unit self@8@00) key@9@00)))))))
  :pattern ((tuple___getitem__%limited s@$ self@8@00 key@9@00))
  :qid |quant-u-3977|)))
(assert (forall ((s@$ $Snap) (self@8@00 $Ref) (key@9@00 Int)) (!
  (let ((result@10@00 (tuple___getitem__%limited s@$ self@8@00 key@9@00))) true)
  :pattern ((tuple___getitem__%limited s@$ self@8@00 key@9@00))
  :qid |quant-u-3978|)))
(assert (forall ((s@$ $Snap) (self@8@00 $Ref) (key@9@00 Int)) (!
  (let ((result@10@00 (tuple___getitem__%limited s@$ self@8@00 key@9@00))) (=>
    (and (tuple___getitem__%precondition s@$ self@8@00 key@9@00) (< key@9@00 0))
    (tuple___len__%precondition $Snap.unit self@8@00)))
  :pattern ((tuple___getitem__%limited s@$ self@8@00 key@9@00))
  :qid |quant-u-3979|)))
(assert (forall ((s@$ $Snap) (self@8@00 $Ref) (key@9@00 Int)) (!
  (let ((result@10@00 (tuple___getitem__%limited s@$ self@8@00 key@9@00))) (=>
    (and (tuple___getitem__%precondition s@$ self@8@00 key@9@00) (>= key@9@00 0))
    (tuple___val__%precondition $Snap.unit self@8@00)))
  :pattern ((tuple___getitem__%limited s@$ self@8@00 key@9@00))
  :qid |quant-u-3980|)))
(assert (forall ((s@$ $Snap) (self@8@00 $Ref) (key@9@00 Int)) (!
  (let ((result@10@00 (tuple___getitem__%limited s@$ self@8@00 key@9@00))) (=>
    (and (tuple___getitem__%precondition s@$ self@8@00 key@9@00) (< key@9@00 0))
    (and
      (tuple___val__%precondition $Snap.unit self@8@00)
      (tuple___len__%precondition $Snap.unit self@8@00))))
  :pattern ((tuple___getitem__%limited s@$ self@8@00 key@9@00))
  :qid |quant-u-3981|)))
(assert (forall ((s@$ $Snap) (id@11@00 Int)) (!
  (= (_isDefined%limited s@$ id@11@00) (_isDefined s@$ id@11@00))
  :pattern ((_isDefined s@$ id@11@00))
  :qid |quant-u-3942|)))
(assert (forall ((s@$ $Snap) (id@11@00 Int)) (!
  (_isDefined%stateless id@11@00)
  :pattern ((_isDefined%limited s@$ id@11@00))
  :qid |quant-u-3943|)))
(assert (forall ((s@$ $Snap) (box@13@00 $Ref)) (!
  (= (bool___unbox__%limited s@$ box@13@00) (bool___unbox__ s@$ box@13@00))
  :pattern ((bool___unbox__ s@$ box@13@00))
  :qid |quant-u-3944|)))
(assert (forall ((s@$ $Snap) (box@13@00 $Ref)) (!
  (bool___unbox__%stateless box@13@00)
  :pattern ((bool___unbox__%limited s@$ box@13@00))
  :qid |quant-u-3945|)))
(assert (forall ((s@$ $Snap) (box@13@00 $Ref)) (!
  (let ((result@14@00 (bool___unbox__%limited s@$ box@13@00))) (=>
    (bool___unbox__%precondition s@$ box@13@00)
    (= (__prim__bool___box__%limited $Snap.unit result@14@00) box@13@00)))
  :pattern ((bool___unbox__%limited s@$ box@13@00))
  :qid |quant-u-3982|)))
(assert (forall ((s@$ $Snap) (box@13@00 $Ref)) (!
  (let ((result@14@00 (bool___unbox__%limited s@$ box@13@00))) (=>
    (bool___unbox__%precondition s@$ box@13@00)
    (__prim__bool___box__%precondition $Snap.unit result@14@00)))
  :pattern ((bool___unbox__%limited s@$ box@13@00))
  :qid |quant-u-3983|)))
(assert (forall ((s@$ $Snap) (prim@15@00 Bool)) (!
  (=
    (__prim__bool___box__%limited s@$ prim@15@00)
    (__prim__bool___box__ s@$ prim@15@00))
  :pattern ((__prim__bool___box__ s@$ prim@15@00))
  :qid |quant-u-3946|)))
(assert (forall ((s@$ $Snap) (prim@15@00 Bool)) (!
  (__prim__bool___box__%stateless prim@15@00)
  :pattern ((__prim__bool___box__%limited s@$ prim@15@00))
  :qid |quant-u-3947|)))
(assert (forall ((s@$ $Snap) (prim@15@00 Bool)) (!
  (let ((result@16@00 (__prim__bool___box__%limited s@$ prim@15@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@15@00)
    (and
      (= (typeof<PyType> result@16@00) (as bool<PyType>  PyType))
      (= (bool___unbox__%limited $Snap.unit result@16@00) prim@15@00)
      (= (int___unbox__%limited $Snap.unit result@16@00) (ite prim@15@00 1 0)))))
  :pattern ((__prim__bool___box__%limited s@$ prim@15@00))
  :qid |quant-u-3984|)))
(assert (forall ((s@$ $Snap) (prim@15@00 Bool)) (!
  (let ((result@16@00 (__prim__bool___box__%limited s@$ prim@15@00))) true)
  :pattern ((__prim__bool___box__%limited s@$ prim@15@00))
  :qid |quant-u-3985|)))
(assert (forall ((s@$ $Snap) (prim@15@00 Bool)) (!
  (let ((result@16@00 (__prim__bool___box__%limited s@$ prim@15@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@15@00)
    (bool___unbox__%precondition $Snap.unit result@16@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@15@00))
  :qid |quant-u-3986|)))
(assert (forall ((s@$ $Snap) (prim@15@00 Bool)) (!
  (let ((result@16@00 (__prim__bool___box__%limited s@$ prim@15@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@15@00)
    (int___unbox__%precondition $Snap.unit result@16@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@15@00))
  :qid |quant-u-3987|)))
(assert (forall ((s@$ $Snap) (box@17@00 $Ref)) (!
  (= (int___unbox__%limited s@$ box@17@00) (int___unbox__ s@$ box@17@00))
  :pattern ((int___unbox__ s@$ box@17@00))
  :qid |quant-u-3948|)))
(assert (forall ((s@$ $Snap) (box@17@00 $Ref)) (!
  (int___unbox__%stateless box@17@00)
  :pattern ((int___unbox__%limited s@$ box@17@00))
  :qid |quant-u-3949|)))
(assert (forall ((s@$ $Snap) (box@17@00 $Ref)) (!
  (let ((result@18@00 (int___unbox__%limited s@$ box@17@00))) (=>
    (int___unbox__%precondition s@$ box@17@00)
    (and
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> box@17@00) (as bool<PyType>  PyType)))
        (= (__prim__int___box__%limited $Snap.unit result@18@00) box@17@00))
      (=>
        (issubtype<Bool> (typeof<PyType> box@17@00) (as bool<PyType>  PyType))
        (=
          (__prim__bool___box__%limited $Snap.unit (not (= result@18@00 0)))
          box@17@00)))))
  :pattern ((int___unbox__%limited s@$ box@17@00))
  :qid |quant-u-3988|)))
(assert (forall ((s@$ $Snap) (box@17@00 $Ref)) (!
  (let ((result@18@00 (int___unbox__%limited s@$ box@17@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@17@00)
      (not
        (issubtype<Bool> (typeof<PyType> box@17@00) (as bool<PyType>  PyType))))
    (__prim__int___box__%precondition $Snap.unit result@18@00)))
  :pattern ((int___unbox__%limited s@$ box@17@00))
  :qid |quant-u-3989|)))
(assert (forall ((s@$ $Snap) (box@17@00 $Ref)) (!
  (let ((result@18@00 (int___unbox__%limited s@$ box@17@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@17@00)
      (issubtype<Bool> (typeof<PyType> box@17@00) (as bool<PyType>  PyType)))
    (__prim__bool___box__%precondition $Snap.unit (not (= result@18@00 0)))))
  :pattern ((int___unbox__%limited s@$ box@17@00))
  :qid |quant-u-3990|)))
(assert (forall ((s@$ $Snap) (prim@19@00 Int)) (!
  (=
    (__prim__int___box__%limited s@$ prim@19@00)
    (__prim__int___box__ s@$ prim@19@00))
  :pattern ((__prim__int___box__ s@$ prim@19@00))
  :qid |quant-u-3950|)))
(assert (forall ((s@$ $Snap) (prim@19@00 Int)) (!
  (__prim__int___box__%stateless prim@19@00)
  :pattern ((__prim__int___box__%limited s@$ prim@19@00))
  :qid |quant-u-3951|)))
(assert (forall ((s@$ $Snap) (prim@19@00 Int)) (!
  (let ((result@20@00 (__prim__int___box__%limited s@$ prim@19@00))) (=>
    (__prim__int___box__%precondition s@$ prim@19@00)
    (and
      (= (typeof<PyType> result@20@00) (as int<PyType>  PyType))
      (= (int___unbox__%limited $Snap.unit result@20@00) prim@19@00))))
  :pattern ((__prim__int___box__%limited s@$ prim@19@00))
  :qid |quant-u-3991|)))
(assert (forall ((s@$ $Snap) (prim@19@00 Int)) (!
  (let ((result@20@00 (__prim__int___box__%limited s@$ prim@19@00))) true)
  :pattern ((__prim__int___box__%limited s@$ prim@19@00))
  :qid |quant-u-3992|)))
(assert (forall ((s@$ $Snap) (prim@19@00 Int)) (!
  (let ((result@20@00 (__prim__int___box__%limited s@$ prim@19@00))) (=>
    (__prim__int___box__%precondition s@$ prim@19@00)
    (int___unbox__%precondition $Snap.unit result@20@00)))
  :pattern ((__prim__int___box__%limited s@$ prim@19@00))
  :qid |quant-u-3993|)))
(assert (forall ((s@$ $Snap) (r@21@00 $Ref)) (!
  (= (Level%limited s@$ r@21@00) (Level s@$ r@21@00))
  :pattern ((Level s@$ r@21@00))
  :qid |quant-u-3952|)))
(assert (forall ((s@$ $Snap) (r@21@00 $Ref)) (!
  (Level%stateless r@21@00)
  :pattern ((Level%limited s@$ r@21@00))
  :qid |quant-u-3953|)))
(assert (forall ((s@$ $Snap) (len@23@00 Int) (value@24@00 Int)) (!
  (=
    (str___create__%limited s@$ len@23@00 value@24@00)
    (str___create__ s@$ len@23@00 value@24@00))
  :pattern ((str___create__ s@$ len@23@00 value@24@00))
  :qid |quant-u-3954|)))
(assert (forall ((s@$ $Snap) (len@23@00 Int) (value@24@00 Int)) (!
  (str___create__%stateless len@23@00 value@24@00)
  :pattern ((str___create__%limited s@$ len@23@00 value@24@00))
  :qid |quant-u-3955|)))
(assert (forall ((s@$ $Snap) (len@23@00 Int) (value@24@00 Int)) (!
  (let ((result@25@00 (str___create__%limited s@$ len@23@00 value@24@00))) (=>
    (str___create__%precondition s@$ len@23@00 value@24@00)
    (and
      (= (str___len__ $Snap.unit result@25@00) len@23@00)
      (= (str___val__ $Snap.unit result@25@00) value@24@00)
      (= (typeof<PyType> result@25@00) (as str<PyType>  PyType)))))
  :pattern ((str___create__%limited s@$ len@23@00 value@24@00))
  :qid |quant-u-3994|)))
(assert (forall ((s@$ $Snap) (len@23@00 Int) (value@24@00 Int)) (!
  (let ((result@25@00 (str___create__%limited s@$ len@23@00 value@24@00))) (=>
    (str___create__%precondition s@$ len@23@00 value@24@00)
    (str___len__%precondition $Snap.unit result@25@00)))
  :pattern ((str___create__%limited s@$ len@23@00 value@24@00))
  :qid |quant-u-3995|)))
(assert (forall ((s@$ $Snap) (len@23@00 Int) (value@24@00 Int)) (!
  (let ((result@25@00 (str___create__%limited s@$ len@23@00 value@24@00))) (=>
    (str___create__%precondition s@$ len@23@00 value@24@00)
    (str___val__%precondition $Snap.unit result@25@00)))
  :pattern ((str___create__%limited s@$ len@23@00 value@24@00))
  :qid |quant-u-3996|)))
(assert (forall ((s@$ $Snap) (len@23@00 Int) (value@24@00 Int)) (!
  (let ((result@25@00 (str___create__%limited s@$ len@23@00 value@24@00))) true)
  :pattern ((str___create__%limited s@$ len@23@00 value@24@00))
  :qid |quant-u-3997|)))
(assert (forall ((s@$ $Snap) (arg0@26@00 $Ref) (arg1@27@00 $Ref) (t0@28@00 PyType) (t1@29@00 PyType) (ctr@30@00 Int)) (!
  (=
    (tuple___create2__%limited s@$ arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00)
    (tuple___create2__ s@$ arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00))
  :pattern ((tuple___create2__ s@$ arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00))
  :qid |quant-u-3956|)))
(assert (forall ((s@$ $Snap) (arg0@26@00 $Ref) (arg1@27@00 $Ref) (t0@28@00 PyType) (t1@29@00 PyType) (ctr@30@00 Int)) (!
  (tuple___create2__%stateless arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00)
  :pattern ((tuple___create2__%limited s@$ arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00))
  :qid |quant-u-3957|)))
(assert (forall ((s@$ $Snap) (arg0@26@00 $Ref) (arg1@27@00 $Ref) (t0@28@00 PyType) (t1@29@00 PyType) (ctr@30@00 Int)) (!
  (let ((result@31@00 (tuple___create2__%limited s@$ arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00))) (=>
    (tuple___create2__%precondition s@$ arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00)
    (and
      (not (= result@31@00 $Ref.null))
      (=
        (typeof<PyType> result@31@00)
        (tuple<PyType> (Seq_append
          (Seq_singleton t0@28@00)
          (Seq_singleton t1@29@00))))
      (Seq_equal
        (tuple_args<Seq<PyType>> (typeof<PyType> result@31@00))
        (Seq_append (Seq_singleton t0@28@00) (Seq_singleton t1@29@00)))
      (Seq_equal
        (tuple___val__ $Snap.unit result@31@00)
        (Seq_append (Seq_singleton arg0@26@00) (Seq_singleton arg1@27@00)))
      (and
        (= (tuple___len__ $Snap.unit result@31@00) 2)
        (and
          (= (tuple___getitem__ $Snap.unit result@31@00 0) arg0@26@00)
          (= (tuple___getitem__ $Snap.unit result@31@00 1) arg1@27@00))))))
  :pattern ((tuple___create2__%limited s@$ arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00))
  :qid |quant-u-3998|)))
(assert (forall ((s@$ $Snap) (arg0@26@00 $Ref) (arg1@27@00 $Ref) (t0@28@00 PyType) (t1@29@00 PyType) (ctr@30@00 Int)) (!
  (let ((result@31@00 (tuple___create2__%limited s@$ arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00))) true)
  :pattern ((tuple___create2__%limited s@$ arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00))
  :qid |quant-u-3999|)))
(assert (forall ((s@$ $Snap) (arg0@26@00 $Ref) (arg1@27@00 $Ref) (t0@28@00 PyType) (t1@29@00 PyType) (ctr@30@00 Int)) (!
  (let ((result@31@00 (tuple___create2__%limited s@$ arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00))) true)
  :pattern ((tuple___create2__%limited s@$ arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00))
  :qid |quant-u-4000|)))
(assert (forall ((s@$ $Snap) (arg0@26@00 $Ref) (arg1@27@00 $Ref) (t0@28@00 PyType) (t1@29@00 PyType) (ctr@30@00 Int)) (!
  (let ((result@31@00 (tuple___create2__%limited s@$ arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00))) true)
  :pattern ((tuple___create2__%limited s@$ arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00))
  :qid |quant-u-4001|)))
(assert (forall ((s@$ $Snap) (arg0@26@00 $Ref) (arg1@27@00 $Ref) (t0@28@00 PyType) (t1@29@00 PyType) (ctr@30@00 Int)) (!
  (let ((result@31@00 (tuple___create2__%limited s@$ arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00))) true)
  :pattern ((tuple___create2__%limited s@$ arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00))
  :qid |quant-u-4002|)))
(assert (forall ((s@$ $Snap) (arg0@26@00 $Ref) (arg1@27@00 $Ref) (t0@28@00 PyType) (t1@29@00 PyType) (ctr@30@00 Int)) (!
  (let ((result@31@00 (tuple___create2__%limited s@$ arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00))) (=>
    (tuple___create2__%precondition s@$ arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00)
    (tuple___val__%precondition $Snap.unit result@31@00)))
  :pattern ((tuple___create2__%limited s@$ arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00))
  :qid |quant-u-4003|)))
(assert (forall ((s@$ $Snap) (arg0@26@00 $Ref) (arg1@27@00 $Ref) (t0@28@00 PyType) (t1@29@00 PyType) (ctr@30@00 Int)) (!
  (let ((result@31@00 (tuple___create2__%limited s@$ arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00))) (=>
    (tuple___create2__%precondition s@$ arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00)
    (and
      (tuple___len__%precondition $Snap.unit result@31@00)
      (=>
        (= (tuple___len__ $Snap.unit result@31@00) 2)
        (and
          (tuple___getitem__%precondition $Snap.unit result@31@00 0)
          (=>
            (= (tuple___getitem__ $Snap.unit result@31@00 0) arg0@26@00)
            (tuple___getitem__%precondition $Snap.unit result@31@00 1)))))))
  :pattern ((tuple___create2__%limited s@$ arg0@26@00 arg1@27@00 t0@28@00 t1@29@00 ctr@30@00))
  :qid |quant-u-4004|)))
(assert (forall ((s@$ $Snap) (self@32@00 $Ref) (other@33@00 $Ref)) (!
  (=
    (str___eq__%limited s@$ self@32@00 other@33@00)
    (str___eq__ s@$ self@32@00 other@33@00))
  :pattern ((str___eq__ s@$ self@32@00 other@33@00))
  :qid |quant-u-3958|)))
(assert (forall ((s@$ $Snap) (self@32@00 $Ref) (other@33@00 $Ref)) (!
  (str___eq__%stateless self@32@00 other@33@00)
  :pattern ((str___eq__%limited s@$ self@32@00 other@33@00))
  :qid |quant-u-3959|)))
(assert (forall ((s@$ $Snap) (self@32@00 $Ref) (other@33@00 $Ref)) (!
  (let ((result@34@00 (str___eq__%limited s@$ self@32@00 other@33@00))) (=>
    (str___eq__%precondition s@$ self@32@00 other@33@00)
    (and
      (=
        (=
          (str___val__ $Snap.unit self@32@00)
          (str___val__ $Snap.unit other@33@00))
        result@34@00)
      (=>
        result@34@00
        (=
          (str___len__ $Snap.unit self@32@00)
          (str___len__ $Snap.unit other@33@00))))))
  :pattern ((str___eq__%limited s@$ self@32@00 other@33@00))
  :qid |quant-u-4005|)))
(assert (forall ((s@$ $Snap) (self@32@00 $Ref) (other@33@00 $Ref)) (!
  (let ((result@34@00 (str___eq__%limited s@$ self@32@00 other@33@00))) (=>
    (str___eq__%precondition s@$ self@32@00 other@33@00)
    (and
      (str___val__%precondition $Snap.unit self@32@00)
      (str___val__%precondition $Snap.unit other@33@00))))
  :pattern ((str___eq__%limited s@$ self@32@00 other@33@00))
  :qid |quant-u-4006|)))
(assert (forall ((s@$ $Snap) (self@32@00 $Ref) (other@33@00 $Ref)) (!
  (let ((result@34@00 (str___eq__%limited s@$ self@32@00 other@33@00))) (=>
    (and (str___eq__%precondition s@$ self@32@00 other@33@00) result@34@00)
    (and
      (str___len__%precondition $Snap.unit self@32@00)
      (str___len__%precondition $Snap.unit other@33@00))))
  :pattern ((str___eq__%limited s@$ self@32@00 other@33@00))
  :qid |quant-u-4007|)))
(assert (forall ((s@$ $Snap) (self@35@00 Int) (other@36@00 Int)) (!
  (=
    (int___add__%limited s@$ self@35@00 other@36@00)
    (int___add__ s@$ self@35@00 other@36@00))
  :pattern ((int___add__ s@$ self@35@00 other@36@00))
  :qid |quant-u-3960|)))
(assert (forall ((s@$ $Snap) (self@35@00 Int) (other@36@00 Int)) (!
  (int___add__%stateless self@35@00 other@36@00)
  :pattern ((int___add__%limited s@$ self@35@00 other@36@00))
  :qid |quant-u-3961|)))
(assert (forall ((s@$ $Snap) (self@35@00 Int) (other@36@00 Int)) (!
  (=>
    (int___add__%precondition s@$ self@35@00 other@36@00)
    (= (int___add__ s@$ self@35@00 other@36@00) (+ self@35@00 other@36@00)))
  :pattern ((int___add__ s@$ self@35@00 other@36@00))
  :qid |quant-u-4008|)))
(assert (forall ((s@$ $Snap) (self@35@00 Int) (other@36@00 Int)) (!
  true
  :pattern ((int___add__ s@$ self@35@00 other@36@00))
  :qid |quant-u-4009|)))
(assert (forall ((s@$ $Snap) (self@38@00 $Ref) (other@39@00 $Ref)) (!
  (=
    (tuple___eq__%limited s@$ self@38@00 other@39@00)
    (tuple___eq__ s@$ self@38@00 other@39@00))
  :pattern ((tuple___eq__ s@$ self@38@00 other@39@00))
  :qid |quant-u-3962|)))
(assert (forall ((s@$ $Snap) (self@38@00 $Ref) (other@39@00 $Ref)) (!
  (tuple___eq__%stateless self@38@00 other@39@00)
  :pattern ((tuple___eq__%limited s@$ self@38@00 other@39@00))
  :qid |quant-u-3963|)))
(assert (forall ((s@$ $Snap) (self@38@00 $Ref) (other@39@00 $Ref)) (!
  (let ((result@40@00 (tuple___eq__%limited s@$ self@38@00 other@39@00))) (=>
    (and
      (tuple___eq__%precondition s@$ self@38@00 other@39@00)
      (and
        (=
          (tuple___len__ $Snap.unit self@38@00)
          (tuple___len__ $Snap.unit other@39@00))
        (forall ((i Int)) (!
          (=>
            (and (>= i 0) (< i (tuple___len__ $Snap.unit self@38@00)))
            (=
              (tuple___getitem__ $Snap.unit self@38@00 i)
              (tuple___getitem__ $Snap.unit other@39@00 i)))
          :pattern ((tuple___getitem__%limited $Snap.unit self@38@00 i) (tuple___getitem__%limited $Snap.unit other@39@00 i))
          ))))
    result@40@00))
  :pattern ((tuple___eq__%limited s@$ self@38@00 other@39@00))
  :qid |quant-u-4010|)))
(assert (forall ((s@$ $Snap) (self@38@00 $Ref) (other@39@00 $Ref)) (!
  (let ((result@40@00 (tuple___eq__%limited s@$ self@38@00 other@39@00))) (=>
    (tuple___eq__%precondition s@$ self@38@00 other@39@00)
    (and
      (and
        (tuple___len__%precondition $Snap.unit self@38@00)
        (tuple___len__%precondition $Snap.unit other@39@00))
      (=>
        (=
          (tuple___len__ $Snap.unit self@38@00)
          (tuple___len__ $Snap.unit other@39@00))
        (forall ((i Int)) (!
          (and
            (=> (>= i 0) (tuple___len__%precondition $Snap.unit self@38@00))
            (=>
              (and (>= i 0) (< i (tuple___len__ $Snap.unit self@38@00)))
              (and
                (tuple___getitem__%precondition $Snap.unit self@38@00 i)
                (tuple___getitem__%precondition $Snap.unit other@39@00 i))))
          :pattern ((tuple___getitem__%limited $Snap.unit self@38@00 i) (tuple___getitem__%limited $Snap.unit other@39@00 i))
          ))))))
  :pattern ((tuple___eq__%limited s@$ self@38@00 other@39@00))
  :qid |quant-u-4011|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__file__%limited s@$) (__file__ s@$))
  :pattern ((__file__ s@$))
  :qid |quant-u-3964|)))
(assert (forall ((s@$ $Snap)) (!
  (as __file__%stateless  Bool)
  :pattern ((__file__%limited s@$))
  :qid |quant-u-3965|)))
(assert (forall ((s@$ $Snap) (val@42@00 $Ref) (id@43@00 Int)) (!
  (=
    (_checkDefined%limited s@$ val@42@00 id@43@00)
    (_checkDefined s@$ val@42@00 id@43@00))
  :pattern ((_checkDefined s@$ val@42@00 id@43@00))
  :qid |quant-u-3966|)))
(assert (forall ((s@$ $Snap) (val@42@00 $Ref) (id@43@00 Int)) (!
  (_checkDefined%stateless val@42@00 id@43@00)
  :pattern ((_checkDefined%limited s@$ val@42@00 id@43@00))
  :qid |quant-u-3967|)))
(assert (forall ((s@$ $Snap) (val@42@00 $Ref) (id@43@00 Int)) (!
  (=>
    (_checkDefined%precondition s@$ val@42@00 id@43@00)
    (= (_checkDefined s@$ val@42@00 id@43@00) val@42@00))
  :pattern ((_checkDefined s@$ val@42@00 id@43@00))
  :qid |quant-u-4012|)))
(assert (forall ((s@$ $Snap) (val@42@00 $Ref) (id@43@00 Int)) (!
  true
  :pattern ((_checkDefined s@$ val@42@00 id@43@00))
  :qid |quant-u-4013|)))
(assert (forall ((s@$ $Snap) (self@45@00 $Ref) (other@46@00 $Ref)) (!
  (=
    (int___eq__%limited s@$ self@45@00 other@46@00)
    (int___eq__ s@$ self@45@00 other@46@00))
  :pattern ((int___eq__ s@$ self@45@00 other@46@00))
  :qid |quant-u-3968|)))
(assert (forall ((s@$ $Snap) (self@45@00 $Ref) (other@46@00 $Ref)) (!
  (int___eq__%stateless self@45@00 other@46@00)
  :pattern ((int___eq__%limited s@$ self@45@00 other@46@00))
  :qid |quant-u-3969|)))
(assert (forall ((s@$ $Snap) (self@45@00 $Ref) (other@46@00 $Ref)) (!
  (=>
    (int___eq__%precondition s@$ self@45@00 other@46@00)
    (=
      (int___eq__ s@$ self@45@00 other@46@00)
      (=
        (int___unbox__ $Snap.unit self@45@00)
        (int___unbox__ $Snap.unit other@46@00))))
  :pattern ((int___eq__ s@$ self@45@00 other@46@00))
  :qid |quant-u-4014|)))
(assert (forall ((s@$ $Snap) (self@45@00 $Ref) (other@46@00 $Ref)) (!
  (=>
    (int___eq__%precondition s@$ self@45@00 other@46@00)
    (and
      (int___unbox__%precondition $Snap.unit self@45@00)
      (int___unbox__%precondition $Snap.unit other@46@00)))
  :pattern ((int___eq__ s@$ self@45@00 other@46@00))
  :qid |quant-u-4015|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__name__%limited s@$) (__name__ s@$))
  :pattern ((__name__ s@$))
  :qid |quant-u-3970|)))
(assert (forall ((s@$ $Snap)) (!
  (as __name__%stateless  Bool)
  :pattern ((__name__%limited s@$))
  :qid |quant-u-3971|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- example_low ----------
(declare-const p1@0@01 Bool)
(declare-const p2@1@01 Bool)
(declare-const _cthread_158@2@01 $Ref)
(declare-const _cthread_158_0@3@01 $Ref)
(declare-const _caller_measures_158@4@01 Seq<Measure$>)
(declare-const _caller_measures_158_0@5@01 Seq<Measure$>)
(declare-const _residue_158@6@01 $Perm)
(declare-const _residue_158_0@7@01 $Perm)
(declare-const secret@8@01 $Ref)
(declare-const secret_23@9@01 $Ref)
(declare-const _current_wait_level_158@10@01 $Perm)
(declare-const _current_wait_level_158_0@11@01 $Perm)
(declare-const _res@12@01 $Ref)
(declare-const _res_0@13@01 $Ref)
(declare-const p1@14@01 Bool)
(declare-const p2@15@01 Bool)
(declare-const _cthread_158@16@01 $Ref)
(declare-const _cthread_158_0@17@01 $Ref)
(declare-const _caller_measures_158@18@01 Seq<Measure$>)
(declare-const _caller_measures_158_0@19@01 Seq<Measure$>)
(declare-const _residue_158@20@01 $Perm)
(declare-const _residue_158_0@21@01 $Perm)
(declare-const secret@22@01 $Ref)
(declare-const secret_23@23@01 $Ref)
(declare-const _current_wait_level_158@24@01 $Perm)
(declare-const _current_wait_level_158_0@25@01 $Perm)
(declare-const _res@26@01 $Ref)
(declare-const _res_0@27@01 $Ref)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@28@01 $Snap)
(assert (= $t@28@01 ($Snap.combine ($Snap.first $t@28@01) ($Snap.second $t@28@01))))
(assert (= ($Snap.first $t@28@01) $Snap.unit))
; [eval] p1 ==> _cthread_158 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1@14@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 0 | p1@14@01 | live]
; [else-branch: 0 | !(p1@14@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 0 | p1@14@01]
(assert p1@14@01)
; [eval] _cthread_158 != null
(pop) ; 3
(push) ; 3
; [else-branch: 0 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1@14@01) p1@14@01))
(assert (=> p1@14@01 (not (= _cthread_158@16@01 $Ref.null))))
(assert (=
  ($Snap.second $t@28@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@28@01))
    ($Snap.second ($Snap.second $t@28@01)))))
(assert (= ($Snap.first ($Snap.second $t@28@01)) $Snap.unit))
; [eval] p2 ==> _cthread_158_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1 | p2@15@01 | live]
; [else-branch: 1 | !(p2@15@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1 | p2@15@01]
(assert p2@15@01)
; [eval] _cthread_158_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 1 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2@15@01) p2@15@01))
(assert (=> p2@15@01 (not (= _cthread_158_0@17@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@28@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@28@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@28@01))) $Snap.unit))
; [eval] p1 ==> issubtype(typeof(_cthread_158), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1@14@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2 | p1@14@01 | live]
; [else-branch: 2 | !(p1@14@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2 | p1@14@01]
(assert p1@14@01)
; [eval] issubtype(typeof(_cthread_158), Thread_0())
; [eval] typeof(_cthread_158)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 2 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> _cthread_158@16@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@28@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(_cthread_158_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3 | p2@15@01 | live]
; [else-branch: 3 | !(p2@15@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3 | p2@15@01]
(assert p2@15@01)
; [eval] issubtype(typeof(_cthread_158_0), Thread_0())
; [eval] typeof(_cthread_158_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 3 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> _cthread_158_0@17@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
  $Snap.unit))
; [eval] p1 ==> issubtype(typeof(secret), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1@14@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4 | p1@14@01 | live]
; [else-branch: 4 | !(p1@14@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4 | p1@14@01]
(assert p1@14@01)
; [eval] issubtype(typeof(secret), bool())
; [eval] typeof(secret)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 4 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> secret@22@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(secret_23), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5 | p2@15@01 | live]
; [else-branch: 5 | !(p2@15@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 5 | p2@15@01]
(assert p2@15@01)
; [eval] issubtype(typeof(secret_23), bool())
; [eval] typeof(secret_23)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 5 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> secret_23@23@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1@14@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6 | p1@14@01 | live]
; [else-branch: 6 | !(p1@14@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 6 | p1@14@01]
(assert p1@14@01)
(pop) ; 3
(push) ; 3
; [else-branch: 6 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7 | p2@15@01 | live]
; [else-branch: 7 | !(p2@15@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 7 | p2@15@01]
(assert p2@15@01)
(pop) ; 3
(push) ; 3
; [else-branch: 7 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@29@01 $Snap)
(assert (= $t@29@01 ($Snap.combine ($Snap.first $t@29@01) ($Snap.second $t@29@01))))
(assert (= ($Snap.first $t@29@01) $Snap.unit))
; [eval] p1 ==> (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_158) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_158) && _residue_158 <= _current_wait_level_158)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1@14@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 8 | p1@14@01 | live]
; [else-branch: 8 | !(p1@14@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 8 | p1@14@01]
(assert p1@14@01)
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_158) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_158) && _residue_158 <= _current_wait_level_158)
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_158)
(push) ; 5
; [then-branch: 9 | False | live]
; [else-branch: 9 | True | live]
(push) ; 6
; [then-branch: 9 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 9 | True]
; [eval] (forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_158)
(push) ; 7
; [then-branch: 10 | False | live]
; [else-branch: 10 | True | live]
(push) ; 8
; [then-branch: 10 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 10 | True]
; [eval] _residue_158 <= _current_wait_level_158
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 8 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p1@14@01 (<= _residue_158@20@01 _current_wait_level_158@24@01)))
(assert (=
  ($Snap.second $t@29@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@29@01))
    ($Snap.second ($Snap.second $t@29@01)))))
(assert (= ($Snap.first ($Snap.second $t@29@01)) $Snap.unit))
; [eval] p2 ==> (forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _current_wait_level_158_0) && ((forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _current_wait_level_158_0) && _residue_158_0 <= _current_wait_level_158_0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 11 | p2@15@01 | live]
; [else-branch: 11 | !(p2@15@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 11 | p2@15@01]
(assert p2@15@01)
; [eval] (forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _current_wait_level_158_0) && ((forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _current_wait_level_158_0) && _residue_158_0 <= _current_wait_level_158_0)
; [eval] (forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _current_wait_level_158_0)
(push) ; 5
; [then-branch: 12 | False | live]
; [else-branch: 12 | True | live]
(push) ; 6
; [then-branch: 12 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 12 | True]
; [eval] (forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _current_wait_level_158_0)
(push) ; 7
; [then-branch: 13 | False | live]
; [else-branch: 13 | True | live]
(push) ; 8
; [then-branch: 13 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 13 | True]
; [eval] _residue_158_0 <= _current_wait_level_158_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 11 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p2@15@01 (<= _residue_158_0@21@01 _current_wait_level_158_0@25@01)))
(assert (=
  ($Snap.second ($Snap.second $t@29@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@29@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@29@01))) $Snap.unit))
; [eval] p1 ==> issubtype(typeof(_res), Example())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1@14@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 14 | p1@14@01 | live]
; [else-branch: 14 | !(p1@14@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 14 | p1@14@01]
(assert p1@14@01)
; [eval] issubtype(typeof(_res), Example())
; [eval] typeof(_res)
; [eval] Example()
(pop) ; 4
(push) ; 4
; [else-branch: 14 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> _res@26@01) (as Example<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@29@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@01))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(_res_0), Example())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 15 | p2@15@01 | live]
; [else-branch: 15 | !(p2@15@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 15 | p2@15@01]
(assert p2@15@01)
; [eval] issubtype(typeof(_res_0), Example())
; [eval] typeof(_res_0)
; [eval] Example()
(pop) ; 4
(push) ; 4
; [else-branch: 15 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> _res_0@27@01) (as Example<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1@14@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 16 | p1@14@01 | live]
; [else-branch: 16 | !(p1@14@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 16 | p1@14@01]
(assert p1@14@01)
(assert (not (= _res@26@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 17 | p2@15@01 | live]
; [else-branch: 17 | !(p2@15@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 17 | p2@15@01]
(assert p2@15@01)
(assert (not (= _res_0@27@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))
  $Snap.unit))
; [eval] p1 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 18 | p1@14@01 | live]
; [else-branch: 18 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 18 | p1@14@01]
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(_res_0.Example_fp), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 19 | p2@15@01 | live]
; [else-branch: 19 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 19 | p2@15@01]
; [eval] issubtype(typeof(_res_0.Example_fp), int())
; [eval] typeof(_res_0.Example_fp)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 20 | p1@14@01 | live]
; [else-branch: 20 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 20 | p1@14@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 21 | p2@15@01 | live]
; [else-branch: 21 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 21 | p2@15@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))
  $Snap.unit))
; [eval] p1 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 22 | p1@14@01 | live]
; [else-branch: 22 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 22 | p1@14@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(_res_0.Example_gp), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 23 | p2@15@01 | live]
; [else-branch: 23 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 23 | p2@15@01]
; [eval] issubtype(typeof(_res_0.Example_gp), int())
; [eval] typeof(_res_0.Example_gp)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))
  $Snap.unit))
; [eval] p1 && p2 ==> _res == _res_0
; [eval] p1 && p2
(push) ; 7
; [then-branch: 24 | !(p1@14@01) | live]
; [else-branch: 24 | p1@14@01 | live]
(push) ; 8
; [then-branch: 24 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 8
(push) ; 8
; [else-branch: 24 | p1@14@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1@14@01 (not p1@14@01)))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1@14@01 p2@15@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and p1@14@01 p2@15@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 25 | p1@14@01 && p2@15@01 | live]
; [else-branch: 25 | !(p1@14@01 && p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 25 | p1@14@01 && p2@15@01]
(assert (and p1@14@01 p2@15@01))
; [eval] _res == _res_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (and p1@14@01 p2@15@01))
(assert (=> (and p1@14@01 p2@15@01) (= _res@26@01 _res_0@27@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 26 | p1@14@01 | live]
; [else-branch: 26 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 26 | p1@14@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 27 | p2@15@01 | live]
; [else-branch: 27 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 27 | p2@15@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 17 | !(p2@15@01)]
(assert (not p2@15@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))
  $Snap.unit))
; [eval] p1 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not p1@14@01))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 28 | p1@14@01 | live]
; [else-branch: 28 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 28 | p1@14@01]
(assert p1@14@01)
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert p1@14@01)
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(_res_0.Example_fp), int())
(push) ; 5
; [then-branch: 29 | p2@15@01 | dead]
; [else-branch: 29 | !(p2@15@01) | live]
(push) ; 6
; [else-branch: 29 | !(p2@15@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 30 | p1@14@01 | live]
; [else-branch: 30 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 30 | p1@14@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))
; [then-branch: 31 | p2@15@01 | dead]
; [else-branch: 31 | !(p2@15@01) | live]
(push) ; 6
; [else-branch: 31 | !(p2@15@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))
  $Snap.unit))
; [eval] p1 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 32 | p1@14@01 | live]
; [else-branch: 32 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 32 | p1@14@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(_res_0.Example_gp), int())
(push) ; 7
; [then-branch: 33 | p2@15@01 | dead]
; [else-branch: 33 | !(p2@15@01) | live]
(push) ; 8
; [else-branch: 33 | !(p2@15@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))
  $Snap.unit))
; [eval] p1 && p2 ==> _res == _res_0
; [eval] p1 && p2
(push) ; 7
; [then-branch: 34 | !(p1@14@01) | live]
; [else-branch: 34 | p1@14@01 | live]
(push) ; 8
; [then-branch: 34 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 8
(push) ; 8
; [else-branch: 34 | p1@14@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1@14@01 (not p1@14@01)))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1@14@01 p2@15@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 35 | p1@14@01 && p2@15@01 | dead]
; [else-branch: 35 | !(p1@14@01 && p2@15@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 35 | !(p1@14@01 && p2@15@01)]
(assert (not (and p1@14@01 p2@15@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (and p1@14@01 p2@15@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 36 | p1@14@01 | live]
; [else-branch: 36 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 36 | p1@14@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 7
; [then-branch: 37 | p2@15@01 | dead]
; [else-branch: 37 | !(p2@15@01) | live]
(push) ; 8
; [else-branch: 37 | !(p2@15@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 16 | !(p1@14@01)]
(assert (not p1@14@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 38 | p2@15@01 | live]
; [else-branch: 38 | !(p2@15@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 38 | p2@15@01]
(assert p2@15@01)
(assert (not (= _res_0@27@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))
  $Snap.unit))
; [eval] p1 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 5
; [then-branch: 39 | p1@14@01 | dead]
; [else-branch: 39 | !(p1@14@01) | live]
(push) ; 6
; [else-branch: 39 | !(p1@14@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(_res_0.Example_fp), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 40 | p2@15@01 | live]
; [else-branch: 40 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 40 | p2@15@01]
; [eval] issubtype(typeof(_res_0.Example_fp), int())
; [eval] typeof(_res_0.Example_fp)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))
; [then-branch: 41 | p1@14@01 | dead]
; [else-branch: 41 | !(p1@14@01) | live]
(push) ; 5
; [else-branch: 41 | !(p1@14@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 42 | p2@15@01 | live]
; [else-branch: 42 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 42 | p2@15@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))
  $Snap.unit))
; [eval] p1 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 7
; [then-branch: 43 | p1@14@01 | dead]
; [else-branch: 43 | !(p1@14@01) | live]
(push) ; 8
; [else-branch: 43 | !(p1@14@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(_res_0.Example_gp), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 44 | p2@15@01 | live]
; [else-branch: 44 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 44 | p2@15@01]
; [eval] issubtype(typeof(_res_0.Example_gp), int())
; [eval] typeof(_res_0.Example_gp)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))
  $Snap.unit))
; [eval] p1 && p2 ==> _res == _res_0
; [eval] p1 && p2
(push) ; 7
; [then-branch: 45 | !(p1@14@01) | live]
; [else-branch: 45 | p1@14@01 | live]
(push) ; 8
; [then-branch: 45 | !(p1@14@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 45 | p1@14@01]
(assert p1@14@01)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1@14@01 (not p1@14@01)))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1@14@01 p2@15@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 46 | p1@14@01 && p2@15@01 | dead]
; [else-branch: 46 | !(p1@14@01 && p2@15@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 46 | !(p1@14@01 && p2@15@01)]
(assert (not (and p1@14@01 p2@15@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (and p1@14@01 p2@15@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 7
; [then-branch: 47 | p1@14@01 | dead]
; [else-branch: 47 | !(p1@14@01) | live]
(push) ; 8
; [else-branch: 47 | !(p1@14@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 48 | p2@15@01 | live]
; [else-branch: 48 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 48 | p2@15@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 38 | !(p2@15@01)]
(assert (not p2@15@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))
  $Snap.unit))
; [eval] p1 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 5
; [then-branch: 49 | p1@14@01 | dead]
; [else-branch: 49 | !(p1@14@01) | live]
(push) ; 6
; [else-branch: 49 | !(p1@14@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(_res_0.Example_fp), int())
(push) ; 5
; [then-branch: 50 | p2@15@01 | dead]
; [else-branch: 50 | !(p2@15@01) | live]
(push) ; 6
; [else-branch: 50 | !(p2@15@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))
; [then-branch: 51 | p1@14@01 | dead]
; [else-branch: 51 | !(p1@14@01) | live]
(push) ; 5
; [else-branch: 51 | !(p1@14@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))
; [then-branch: 52 | p2@15@01 | dead]
; [else-branch: 52 | !(p2@15@01) | live]
(push) ; 6
; [else-branch: 52 | !(p2@15@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))
  $Snap.unit))
; [eval] p1 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 7
; [then-branch: 53 | p1@14@01 | dead]
; [else-branch: 53 | !(p1@14@01) | live]
(push) ; 8
; [else-branch: 53 | !(p1@14@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(_res_0.Example_gp), int())
(push) ; 7
; [then-branch: 54 | p2@15@01 | dead]
; [else-branch: 54 | !(p2@15@01) | live]
(push) ; 8
; [else-branch: 54 | !(p2@15@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))
  $Snap.unit))
; [eval] p1 && p2 ==> _res == _res_0
; [eval] p1 && p2
(push) ; 7
; [then-branch: 55 | !(p1@14@01) | live]
; [else-branch: 55 | p1@14@01 | live]
(push) ; 8
; [then-branch: 55 | !(p1@14@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 55 | p1@14@01]
(assert p1@14@01)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1@14@01 (not p1@14@01)))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1@14@01 p2@15@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 56 | p1@14@01 && p2@15@01 | dead]
; [else-branch: 56 | !(p1@14@01 && p2@15@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 56 | !(p1@14@01 && p2@15@01)]
(assert (not (and p1@14@01 p2@15@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (and p1@14@01 p2@15@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 7
; [then-branch: 57 | p1@14@01 | dead]
; [else-branch: 57 | !(p1@14@01) | live]
(push) ; 8
; [else-branch: 57 | !(p1@14@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@01))))))))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 7
; [then-branch: 58 | p2@15@01 | dead]
; [else-branch: 58 | !(p2@15@01) | live]
(push) ; 8
; [else-branch: 58 | !(p2@15@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var ret1: Bool
(declare-const ret1@30@01 Bool)
; [exec]
; var ret2: Bool
(declare-const ret2@31@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@32@01 $Ref)
; [exec]
; var _err_0: Ref
(declare-const _err_0@33@01 $Ref)
; [exec]
; var a: Ref
(declare-const a@34@01 $Ref)
; [exec]
; var a_6: Ref
(declare-const a_6@35@01 $Ref)
; [exec]
; var b: Ref
(declare-const b@36@01 $Ref)
; [exec]
; var b_6: Ref
(declare-const b_6@37@01 $Ref)
; [exec]
; var secret_11: Ref
(declare-const secret_11@38@01 $Ref)
; [exec]
; var secret_11_0: Ref
(declare-const secret_11_0@39@01 $Ref)
; [exec]
; var Example_res: Ref
(declare-const Example_res@40@01 $Ref)
; [exec]
; var Example_res_9: Ref
(declare-const Example_res_9@41@01 $Ref)
; [exec]
; var Example_res_0: Ref
(declare-const Example_res_0@42@01 $Ref)
; [exec]
; var Example_res_0_0: Ref
(declare-const Example_res_0_0@43@01 $Ref)
; [exec]
; var _cwl_158: Perm
(declare-const _cwl_158@44@01 $Perm)
; [exec]
; var _cwl_158_0: Perm
(declare-const _cwl_158_0@45@01 $Perm)
; [exec]
; var _method_measures_158: Seq[Measure$]
(declare-const _method_measures_158@46@01 Seq<Measure$>)
; [exec]
; var _method_measures_158_0: Seq[Measure$]
(declare-const _method_measures_158_0@47@01 Seq<Measure$>)
; [exec]
; var tmp: Ref
(declare-const tmp@48@01 $Ref)
; [exec]
; var tmp_0: Ref
(declare-const tmp_0@49@01 $Ref)
; [exec]
; var p1_0: Bool
(declare-const p1_0@50@01 Bool)
; [exec]
; var p2_0: Bool
(declare-const p2_0@51@01 Bool)
; [exec]
; var p3: Bool
(declare-const p3@52@01 Bool)
; [exec]
; var p4: Bool
(declare-const p4@53@01 Bool)
; [exec]
; inhale p1
(declare-const $t@54@01 $Snap)
(assert (= $t@54@01 $Snap.unit))
(assert p1@14@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ret1 := false
; [exec]
; ret2 := false
; [eval] p1 && !ret1
(set-option :timeout 0)
(push) ; 3
; [then-branch: 59 | !(p1@14@01) | live]
; [else-branch: 59 | p1@14@01 | live]
(push) ; 4
; [then-branch: 59 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 4
(push) ; 4
; [else-branch: 59 | p1@14@01]
; [eval] !ret1
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1@14@01 (not p1@14@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 60 | p1@14@01 | live]
; [else-branch: 60 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 60 | p1@14@01]
; [exec]
; _method_measures_158 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; secret_11 := secret
; [eval] p2 && !ret2
(push) ; 4
; [then-branch: 61 | !(p2@15@01) | live]
; [else-branch: 61 | p2@15@01 | live]
(push) ; 5
; [then-branch: 61 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 5
(push) ; 5
; [else-branch: 61 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or p2@15@01 (not p2@15@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 62 | p2@15@01 | live]
; [else-branch: 62 | !(p2@15@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 62 | p2@15@01]
(assert p2@15@01)
; [exec]
; _method_measures_158_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res_0 := null
; [exec]
; _err_0 := null
; [exec]
; secret_11_0 := secret_23
; [exec]
; tmp := new()
(declare-const tmp@55@01 $Ref)
(assert (not (= tmp@55@01 $Ref.null)))
(assert (not (= tmp@55@01 Example_res@40@01)))
(assert (not (= tmp@55@01 secret_23@23@01)))
(assert (not (= tmp@55@01 secret@22@01)))
(assert (not (= tmp@55@01 tmp@48@01)))
(assert (not (= tmp@55@01 tmp_0@49@01)))
(assert (not (= tmp@55@01 Example_res_9@41@01)))
(assert (not (= tmp@55@01 a_6@35@01)))
(assert (not (= tmp@55@01 Example_res_0_0@43@01)))
(assert (not (= tmp@55@01 _cthread_158_0@17@01)))
(assert (not (= tmp@55@01 Example_res_0@42@01)))
(assert (not (= tmp@55@01 b@36@01)))
(assert (not (= tmp@55@01 b_6@37@01)))
(assert (not (= tmp@55@01 _cthread_158@16@01)))
(assert (not (= tmp@55@01 a@34@01)))
; [eval] p1 && !ret1
(push) ; 5
; [then-branch: 63 | !(p1@14@01) | live]
; [else-branch: 63 | p1@14@01 | live]
(push) ; 6
; [then-branch: 63 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 6
(push) ; 6
; [else-branch: 63 | p1@14@01]
; [eval] !ret1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 64 | p1@14@01 | live]
; [else-branch: 64 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 64 | p1@14@01]
; [exec]
; Example_res := tmp
; [eval] p2 && !ret2
(push) ; 6
; [then-branch: 65 | !(p2@15@01) | live]
; [else-branch: 65 | p2@15@01 | live]
(push) ; 7
; [then-branch: 65 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 7
(push) ; 7
; [else-branch: 65 | p2@15@01]
; [eval] !ret2
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 66 | p2@15@01 | live]
; [else-branch: 66 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 66 | p2@15@01]
; [exec]
; Example_res_9 := tmp
; [eval] p1 && !ret1
(push) ; 7
; [then-branch: 67 | !(p1@14@01) | live]
; [else-branch: 67 | p1@14@01 | live]
(push) ; 8
; [then-branch: 67 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 8
(push) ; 8
; [else-branch: 67 | p1@14@01]
; [eval] !ret1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 68 | p1@14@01 | live]
; [else-branch: 68 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 68 | p1@14@01]
; [exec]
; inhale typeof(Example_res) == Example()
(declare-const $t@56@01 $Snap)
(assert (= $t@56@01 $Snap.unit))
; [eval] typeof(Example_res) == Example()
; [eval] typeof(Example_res)
; [eval] Example()
(assert (= (typeof<PyType> tmp@55@01) (as Example<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res, 1888441915154752436293), write)
(declare-const $t@57@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res, 1906888659228461987909), write)
(declare-const $t@58@01 $Snap)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2 && !ret2
(set-option :timeout 0)
(push) ; 8
; [then-branch: 69 | !(p2@15@01) | live]
; [else-branch: 69 | p2@15@01 | live]
(push) ; 9
; [then-branch: 69 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 9
(push) ; 9
; [else-branch: 69 | p2@15@01]
; [eval] !ret2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 70 | p2@15@01 | live]
; [else-branch: 70 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 70 | p2@15@01]
; [exec]
; inhale typeof(Example_res_9) == Example()
(declare-const $t@59@01 $Snap)
(assert (= $t@59@01 $Snap.unit))
; [eval] typeof(Example_res_9) == Example()
; [eval] typeof(Example_res_9)
; [eval] Example()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(Example_res_9, 1888441915154752436293), write)
(declare-const $t@60@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(Example_res_9, 1906888659228461987909), write)
(declare-const $t@61@01 $Snap)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1 && !ret1 || p2 && !ret2
; [eval] p1 && !ret1
(set-option :timeout 0)
(push) ; 9
; [then-branch: 71 | !(p1@14@01) | live]
; [else-branch: 71 | p1@14@01 | live]
(push) ; 10
; [then-branch: 71 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 10
(push) ; 10
; [else-branch: 71 | p1@14@01]
; [eval] !ret1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 72 | p1@14@01 | live]
; [else-branch: 72 | !(p1@14@01) | live]
(push) ; 10
; [then-branch: 72 | p1@14@01]
(pop) ; 10
(push) ; 10
; [else-branch: 72 | !(p1@14@01)]
(assert (not p1@14@01))
; [eval] p2 && !ret2
(push) ; 11
; [then-branch: 73 | !(p2@15@01) | live]
; [else-branch: 73 | p2@15@01 | live]
(push) ; 12
; [then-branch: 73 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 12
(push) ; 12
; [else-branch: 73 | p2@15@01]
; [eval] !ret2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not (or p1@14@01 p2@15@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (or p1@14@01 p2@15@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 74 | p1@14@01 || p2@15@01 | live]
; [else-branch: 74 | !(p1@14@01 || p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 74 | p1@14@01 || p2@15@01]
(assert (or p1@14@01 p2@15@01))
; [exec]
; var tmp1: Ref
(declare-const tmp1@62@01 $Ref)
; [exec]
; var tmp2: Ref
(declare-const tmp2@63@01 $Ref)
; [exec]
; var tmp1_0: Seq[Measure$]
(declare-const tmp1_0@64@01 Seq<Measure$>)
; [exec]
; var tmp2_0: Seq[Measure$]
(declare-const tmp2_0@65@01 Seq<Measure$>)
; [exec]
; var tmp1_1: Perm
(declare-const tmp1_1@66@01 $Perm)
; [exec]
; var tmp2_1: Perm
(declare-const tmp2_1@67@01 $Perm)
; [exec]
; var tmp1_2: Ref
(declare-const tmp1_2@68@01 $Ref)
; [exec]
; var tmp2_2: Ref
(declare-const tmp2_2@69@01 $Ref)
; [exec]
; var tmp1_3: Perm
(declare-const tmp1_3@70@01 $Perm)
; [exec]
; var tmp2_3: Perm
(declare-const tmp2_3@71@01 $Perm)
; [eval] p1 && !ret1
(push) ; 10
; [then-branch: 75 | !(p1@14@01) | live]
; [else-branch: 75 | p1@14@01 | live]
(push) ; 11
; [then-branch: 75 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 11
(push) ; 11
; [else-branch: 75 | p1@14@01]
; [eval] !ret1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 76 | p1@14@01 | live]
; [else-branch: 76 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 76 | p1@14@01]
; [exec]
; tmp1 := _cthread_158
; [exec]
; tmp1_0 := _method_measures_158
; [exec]
; tmp1_1 := _residue_158
; [exec]
; tmp1_2 := Example_res
; [eval] p2 && !ret2
(push) ; 11
; [then-branch: 77 | !(p2@15@01) | live]
; [else-branch: 77 | p2@15@01 | live]
(push) ; 12
; [then-branch: 77 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 12
(push) ; 12
; [else-branch: 77 | p2@15@01]
; [eval] !ret2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 78 | p2@15@01 | live]
; [else-branch: 78 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 78 | p2@15@01]
; [exec]
; tmp2 := _cthread_158_0
; [exec]
; tmp2_0 := _method_measures_158_0
; [exec]
; tmp2_1 := _residue_158_0
; [exec]
; tmp2_2 := Example_res_9
; [exec]
; tmp1_3, tmp2_3 := Example___init__(p1 && !ret1, p2 && !ret2, tmp1, tmp2, tmp1_0,
;   tmp2_0, tmp1_1, tmp2_1, tmp1_2, tmp2_2)
; [eval] p1 && !ret1
(push) ; 12
; [then-branch: 79 | !(p1@14@01) | live]
; [else-branch: 79 | p1@14@01 | live]
(push) ; 13
; [then-branch: 79 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 13
(push) ; 13
; [else-branch: 79 | p1@14@01]
; [eval] !ret1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [eval] p2 && !ret2
(push) ; 12
; [then-branch: 80 | !(p2@15@01) | live]
; [else-branch: 80 | p2@15@01 | live]
(push) ; 13
; [then-branch: 80 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 13
(push) ; 13
; [else-branch: 80 | p2@15@01]
; [eval] !ret2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [eval] p1_23 ==> _cthread_156 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 81 | p1@14@01 | live]
; [else-branch: 81 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 81 | p1@14@01]
; [eval] _cthread_156 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p2_23 ==> _cthread_156_0 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 82 | p2@15@01 | live]
; [else-branch: 82 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 82 | p2@15@01]
; [eval] _cthread_156_0 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1_23 ==> issubtype(typeof(_cthread_156), Thread_0())
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 83 | p1@14@01 | live]
; [else-branch: 83 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 83 | p1@14@01]
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p2_23 ==> issubtype(typeof(_cthread_156_0), Thread_0())
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 84 | p2@15@01 | live]
; [else-branch: 84 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 84 | p2@15@01]
; [eval] issubtype(typeof(_cthread_156_0), Thread_0())
; [eval] typeof(_cthread_156_0)
; [eval] Thread_0()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1_23 ==> self != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 85 | p1@14@01 | live]
; [else-branch: 85 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 85 | p1@14@01]
; [eval] self != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=> p1@14@01 (not (= tmp@55@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=> p1@14@01 (not (= tmp@55@01 $Ref.null))))
; [eval] p2_23 ==> self_3 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 86 | p2@15@01 | live]
; [else-branch: 86 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 86 | p2@15@01]
; [eval] self_3 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=> p2@15@01 (not (= tmp@55@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=> p2@15@01 (not (= tmp@55@01 $Ref.null))))
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 87 | p1@14@01 | live]
; [else-branch: 87 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 87 | p1@14@01]
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 88 | p2@15@01 | live]
; [else-branch: 88 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 88 | p2@15@01]
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 89 | p1@14@01 | live]
; [else-branch: 89 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 89 | p1@14@01]
(push) ; 15
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 90 | p2@15@01 | live]
; [else-branch: 90 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 90 | p2@15@01]
; [eval] p1_23 ==> issubtype(typeof(self), Example())
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 91 | p1@14@01 | live]
; [else-branch: 91 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 91 | p1@14@01]
; [eval] issubtype(typeof(self), Example())
; [eval] typeof(self)
; [eval] Example()
(pop) ; 17
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> tmp@55@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> tmp@55@01) (as Example<PyType>  PyType))))
; [eval] p2_23 ==> issubtype(typeof(self_3), Example())
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 92 | p2@15@01 | live]
; [else-branch: 92 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 92 | p2@15@01]
; [eval] issubtype(typeof(self_3), Example())
; [eval] typeof(self_3)
; [eval] Example()
(pop) ; 17
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> tmp@55@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> tmp@55@01) (as Example<PyType>  PyType))))
; [eval] p1_23 ==> self != null
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 93 | p1@14@01 | live]
; [else-branch: 93 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 93 | p1@14@01]
; [eval] self != null
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p2_23 ==> self_3 != null
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 94 | p2@15@01 | live]
; [else-branch: 94 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 94 | p2@15@01]
; [eval] self_3 != null
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p1_23 ==> perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 95 | p1@14@01 | live]
; [else-branch: 95 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 95 | p1@14@01]
; [eval] perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(push) ; 18
; [then-branch: 96 | False | live]
; [else-branch: 96 | True | live]
(push) ; 19
; [then-branch: 96 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 96 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false)
(push) ; 20
; [then-branch: 97 | False | live]
; [else-branch: 97 | True | live]
(push) ; 21
; [then-branch: 97 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 97 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false)
(push) ; 22
; [then-branch: 98 | False | live]
; [else-branch: 98 | True | live]
(push) ; 23
; [then-branch: 98 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 98 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false)
(push) ; 24
; [then-branch: 99 | False | live]
; [else-branch: 99 | True | live]
(push) ; 25
; [then-branch: 99 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 99 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p2_23 ==> perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 100 | p2@15@01 | live]
; [else-branch: 100 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 100 | p2@15@01]
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none
; [eval] perm(MustTerminate_0(_cthread_156_0))
(push) ; 18
; [then-branch: 101 | False | live]
; [else-branch: 101 | True | live]
(push) ; 19
; [then-branch: 101 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 101 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false)
(push) ; 20
; [then-branch: 102 | False | live]
; [else-branch: 102 | True | live]
(push) ; 21
; [then-branch: 102 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 102 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false)
(push) ; 22
; [then-branch: 103 | False | live]
; [else-branch: 103 | True | live]
(push) ; 23
; [then-branch: 103 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 103 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false)
(push) ; 24
; [then-branch: 104 | False | live]
; [else-branch: 104 | True | live]
(push) ; 25
; [then-branch: 104 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 104 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(declare-const _current_wait_level_156@72@01 $Perm)
(declare-const _current_wait_level_156_0@73@01 $Perm)
(declare-const $t@74@01 $Snap)
(assert (= $t@74@01 ($Snap.combine ($Snap.first $t@74@01) ($Snap.second $t@74@01))))
(assert (= ($Snap.first $t@74@01) $Snap.unit))
; [eval] p1_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 105 | p1@14@01 | live]
; [else-branch: 105 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 105 | p1@14@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 18
; [then-branch: 106 | False | live]
; [else-branch: 106 | True | live]
(push) ; 19
; [then-branch: 106 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 106 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 20
; [then-branch: 107 | False | live]
; [else-branch: 107 | True | live]
(push) ; 21
; [then-branch: 107 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 107 | True]
; [eval] _residue_156 <= _current_wait_level_156
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=> p1@14@01 (<= _residue_158@20@01 _current_wait_level_156@72@01)))
(assert (=
  ($Snap.second $t@74@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@74@01))
    ($Snap.second ($Snap.second $t@74@01)))))
(assert (= ($Snap.first ($Snap.second $t@74@01)) $Snap.unit))
; [eval] p2_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 108 | p2@15@01 | live]
; [else-branch: 108 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 108 | p2@15@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 18
; [then-branch: 109 | False | live]
; [else-branch: 109 | True | live]
(push) ; 19
; [then-branch: 109 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 109 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 20
; [then-branch: 110 | False | live]
; [else-branch: 110 | True | live]
(push) ; 21
; [then-branch: 110 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 110 | True]
; [eval] _residue_156_0 <= _current_wait_level_156_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=> p2@15@01 (<= _residue_158_0@21@01 _current_wait_level_156_0@73@01)))
(assert (=
  ($Snap.second ($Snap.second $t@74@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@74@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 111 | p1@14@01 | live]
; [else-branch: 111 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 111 | p1@14@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@74@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 112 | p2@15@01 | live]
; [else-branch: 112 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 112 | p2@15@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_f), int())
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 113 | p1@14@01 | live]
; [else-branch: 113 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 113 | p1@14@01]
; [eval] issubtype(typeof(self.Example_f), int())
; [eval] typeof(self.Example_f)
; [eval] int()
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_fp), int())
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 114 | p2@15@01 | live]
; [else-branch: 114 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 114 | p2@15@01]
; [eval] issubtype(typeof(self_3.Example_fp), int())
; [eval] typeof(self_3.Example_fp)
; [eval] int()
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 115 | p1@14@01 | live]
; [else-branch: 115 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 115 | p1@14@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 116 | p2@15@01 | live]
; [else-branch: 116 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 116 | p2@15@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_g), int())
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 117 | p1@14@01 | live]
; [else-branch: 117 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 117 | p1@14@01]
; [eval] issubtype(typeof(self.Example_g), int())
; [eval] typeof(self.Example_g)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_gp), int())
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 118 | p2@15@01 | live]
; [else-branch: 118 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 118 | p2@15@01]
; [eval] issubtype(typeof(self_3.Example_gp), int())
; [eval] typeof(self_3.Example_gp)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_f, __prim__int___box__(0))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 119 | p1@14@01 | live]
; [else-branch: 119 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 119 | p1@14@01]
; [eval] int___eq__(self.Example_f, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01)))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01)))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p1@14@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01)))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p1@14@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01)))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_fp, __prim__int___box__(0))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 120 | p2@15@01 | live]
; [else-branch: 120 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 120 | p2@15@01]
; [eval] int___eq__(self_3.Example_fp, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01))))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p2@15@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01))))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p2@15@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01))))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_g, __prim__int___box__(1))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 121 | p1@14@01 | live]
; [else-branch: 121 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 121 | p1@14@01]
; [eval] int___eq__(self.Example_g, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p1@14@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p1@14@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_gp, __prim__int___box__(1))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 122 | p2@15@01 | live]
; [else-branch: 122 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 122 | p2@15@01]
; [eval] int___eq__(self_3.Example_gp, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p2@15@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p2@15@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> true
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 123 | p1@14@01 | live]
; [else-branch: 123 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 123 | p1@14@01]
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> true
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 124 | p2@15@01 | live]
; [else-branch: 124 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 124 | p2@15@01]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] p1 && !ret1
(set-option :timeout 0)
(push) ; 20
; [then-branch: 125 | !(p1@14@01) | live]
; [else-branch: 125 | p1@14@01 | live]
(push) ; 21
; [then-branch: 125 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 21
(push) ; 21
; [else-branch: 125 | p1@14@01]
; [eval] !ret1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 126 | p1@14@01 | live]
; [else-branch: 126 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 126 | p1@14@01]
; [exec]
; _cwl_158 := tmp1_3
; [eval] p2 && !ret2
(push) ; 21
; [then-branch: 127 | !(p2@15@01) | live]
; [else-branch: 127 | p2@15@01 | live]
(push) ; 22
; [then-branch: 127 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 22
(push) ; 22
; [else-branch: 127 | p2@15@01]
; [eval] !ret2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 128 | p2@15@01 | live]
; [else-branch: 128 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 128 | p2@15@01]
; [exec]
; _cwl_158_0 := tmp2_3
; [eval] p1 && !ret1
(push) ; 22
; [then-branch: 129 | !(p1@14@01) | live]
; [else-branch: 129 | p1@14@01 | live]
(push) ; 23
; [then-branch: 129 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 23
(push) ; 23
; [else-branch: 129 | p1@14@01]
; [eval] !ret1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 130 | p1@14@01 | live]
; [else-branch: 130 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 130 | p1@14@01]
; [exec]
; a := Example_res
; [exec]
; inhale _isDefined(97)
(declare-const $t@75@01 $Snap)
(assert (= $t@75@01 $Snap.unit))
; [eval] _isDefined(97)
(push) ; 23
(assert (_isDefined%precondition $Snap.unit 97))
(pop) ; 23
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 97))
(assert (_isDefined $Snap.unit 97))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2 && !ret2
(set-option :timeout 0)
(push) ; 23
; [then-branch: 131 | !(p2@15@01) | live]
; [else-branch: 131 | p2@15@01 | live]
(push) ; 24
; [then-branch: 131 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 24
(push) ; 24
; [else-branch: 131 | p2@15@01]
; [eval] !ret2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 132 | p2@15@01 | live]
; [else-branch: 132 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 132 | p2@15@01]
; [exec]
; a_6 := Example_res_9
; [exec]
; inhale true
(declare-const $t@76@01 $Snap)
(assert (= $t@76@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; tmp_0 := new()
(declare-const tmp_0@77@01 $Ref)
(assert (not (= tmp_0@77@01 $Ref.null)))
(assert (not (= tmp_0@77@01 secret_23@23@01)))
(assert (not (= tmp_0@77@01 secret@22@01)))
(assert (not (= tmp_0@77@01 tmp_0@49@01)))
(assert (not (= tmp_0@77@01 tmp@55@01)))
(assert (not (= tmp_0@77@01 Example_res_0_0@43@01)))
(assert (not (= tmp_0@77@01 _cthread_158_0@17@01)))
(assert (not (= tmp_0@77@01 Example_res_0@42@01)))
(assert (not (= tmp_0@77@01 b@36@01)))
(assert (not (= tmp_0@77@01 b_6@37@01)))
(assert (not (= tmp_0@77@01 _cthread_158@16@01)))
(assert (not
  (=
    tmp_0@77@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))
(assert (not
  (=
    tmp_0@77@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))
(assert (not
  (=
    tmp_0@77@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))
(assert (not
  (=
    tmp_0@77@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01)))))))
; [eval] p1 && !ret1
(set-option :timeout 0)
(push) ; 24
; [then-branch: 133 | !(p1@14@01) | live]
; [else-branch: 133 | p1@14@01 | live]
(push) ; 25
; [then-branch: 133 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 25
(push) ; 25
; [else-branch: 133 | p1@14@01]
; [eval] !ret1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 134 | p1@14@01 | live]
; [else-branch: 134 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 134 | p1@14@01]
; [exec]
; Example_res_0 := tmp_0
; [eval] p2 && !ret2
(push) ; 25
; [then-branch: 135 | !(p2@15@01) | live]
; [else-branch: 135 | p2@15@01 | live]
(push) ; 26
; [then-branch: 135 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 26
(push) ; 26
; [else-branch: 135 | p2@15@01]
; [eval] !ret2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 136 | p2@15@01 | live]
; [else-branch: 136 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 136 | p2@15@01]
; [exec]
; Example_res_0_0 := tmp_0
; [eval] p1 && !ret1
(push) ; 26
; [then-branch: 137 | !(p1@14@01) | live]
; [else-branch: 137 | p1@14@01 | live]
(push) ; 27
; [then-branch: 137 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 27
(push) ; 27
; [else-branch: 137 | p1@14@01]
; [eval] !ret1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 138 | p1@14@01 | live]
; [else-branch: 138 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 138 | p1@14@01]
; [exec]
; inhale typeof(Example_res_0) == Example()
(declare-const $t@78@01 $Snap)
(assert (= $t@78@01 $Snap.unit))
; [eval] typeof(Example_res_0) == Example()
; [eval] typeof(Example_res_0)
; [eval] Example()
(assert (= (typeof<PyType> tmp_0@77@01) (as Example<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_0, 1888441915154752436293), write)
(declare-const $t@79@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_0, 1906888659228461987909), write)
(declare-const $t@80@01 $Snap)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2 && !ret2
(set-option :timeout 0)
(push) ; 27
; [then-branch: 139 | !(p2@15@01) | live]
; [else-branch: 139 | p2@15@01 | live]
(push) ; 28
; [then-branch: 139 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 28
(push) ; 28
; [else-branch: 139 | p2@15@01]
; [eval] !ret2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(push) ; 27
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 140 | p2@15@01 | live]
; [else-branch: 140 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 140 | p2@15@01]
; [exec]
; inhale typeof(Example_res_0_0) == Example()
(declare-const $t@81@01 $Snap)
(assert (= $t@81@01 $Snap.unit))
; [eval] typeof(Example_res_0_0) == Example()
; [eval] typeof(Example_res_0_0)
; [eval] Example()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(Example_res_0_0, 1888441915154752436293), write)
(declare-const $t@82@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(Example_res_0_0, 1906888659228461987909), write)
(declare-const $t@83@01 $Snap)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1 && !ret1 || p2 && !ret2
; [eval] p1 && !ret1
(set-option :timeout 0)
(push) ; 28
; [then-branch: 141 | !(p1@14@01) | live]
; [else-branch: 141 | p1@14@01 | live]
(push) ; 29
; [then-branch: 141 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 29
(push) ; 29
; [else-branch: 141 | p1@14@01]
; [eval] !ret1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
; [then-branch: 142 | p1@14@01 | live]
; [else-branch: 142 | !(p1@14@01) | live]
(push) ; 29
; [then-branch: 142 | p1@14@01]
(pop) ; 29
(push) ; 29
; [else-branch: 142 | !(p1@14@01)]
(assert (not p1@14@01))
; [eval] p2 && !ret2
(push) ; 30
; [then-branch: 143 | !(p2@15@01) | live]
; [else-branch: 143 | p2@15@01 | live]
(push) ; 31
; [then-branch: 143 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 31
(push) ; 31
; [else-branch: 143 | p2@15@01]
; [eval] !ret2
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (not (or p1@14@01 p2@15@01))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 144 | p1@14@01 || p2@15@01 | live]
; [else-branch: 144 | !(p1@14@01 || p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 144 | p1@14@01 || p2@15@01]
; [exec]
; var tmp1_4: Ref
(declare-const tmp1_4@84@01 $Ref)
; [exec]
; var tmp2_4: Ref
(declare-const tmp2_4@85@01 $Ref)
; [exec]
; var tmp1_5: Seq[Measure$]
(declare-const tmp1_5@86@01 Seq<Measure$>)
; [exec]
; var tmp2_5: Seq[Measure$]
(declare-const tmp2_5@87@01 Seq<Measure$>)
; [exec]
; var tmp1_6: Perm
(declare-const tmp1_6@88@01 $Perm)
; [exec]
; var tmp2_6: Perm
(declare-const tmp2_6@89@01 $Perm)
; [exec]
; var tmp1_7: Ref
(declare-const tmp1_7@90@01 $Ref)
; [exec]
; var tmp2_7: Ref
(declare-const tmp2_7@91@01 $Ref)
; [exec]
; var tmp1_8: Perm
(declare-const tmp1_8@92@01 $Perm)
; [exec]
; var tmp2_8: Perm
(declare-const tmp2_8@93@01 $Perm)
; [eval] p1 && !ret1
(push) ; 29
; [then-branch: 145 | !(p1@14@01) | live]
; [else-branch: 145 | p1@14@01 | live]
(push) ; 30
; [then-branch: 145 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 30
(push) ; 30
; [else-branch: 145 | p1@14@01]
; [eval] !ret1
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 146 | p1@14@01 | live]
; [else-branch: 146 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 146 | p1@14@01]
; [exec]
; tmp1_4 := _cthread_158
; [exec]
; tmp1_5 := _method_measures_158
; [exec]
; tmp1_6 := _residue_158
; [exec]
; tmp1_7 := Example_res_0
; [eval] p2 && !ret2
(push) ; 30
; [then-branch: 147 | !(p2@15@01) | live]
; [else-branch: 147 | p2@15@01 | live]
(push) ; 31
; [then-branch: 147 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 31
(push) ; 31
; [else-branch: 147 | p2@15@01]
; [eval] !ret2
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 148 | p2@15@01 | live]
; [else-branch: 148 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 148 | p2@15@01]
; [exec]
; tmp2_4 := _cthread_158_0
; [exec]
; tmp2_5 := _method_measures_158_0
; [exec]
; tmp2_6 := _residue_158_0
; [exec]
; tmp2_7 := Example_res_0_0
; [exec]
; tmp1_8, tmp2_8 := Example___init__(p1 && !ret1, p2 && !ret2, tmp1_4, tmp2_4,
;   tmp1_5, tmp2_5, tmp1_6, tmp2_6, tmp1_7, tmp2_7)
; [eval] p1 && !ret1
(push) ; 31
; [then-branch: 149 | !(p1@14@01) | live]
; [else-branch: 149 | p1@14@01 | live]
(push) ; 32
; [then-branch: 149 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 32
(push) ; 32
; [else-branch: 149 | p1@14@01]
; [eval] !ret1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [eval] p2 && !ret2
(push) ; 31
; [then-branch: 150 | !(p2@15@01) | live]
; [else-branch: 150 | p2@15@01 | live]
(push) ; 32
; [then-branch: 150 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 32
(push) ; 32
; [else-branch: 150 | p2@15@01]
; [eval] !ret2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [eval] p1_23 ==> _cthread_156 != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 151 | p1@14@01 | live]
; [else-branch: 151 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 151 | p1@14@01]
; [eval] _cthread_156 != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_23 ==> _cthread_156_0 != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 152 | p2@15@01 | live]
; [else-branch: 152 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 152 | p2@15@01]
; [eval] _cthread_156_0 != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p1_23 ==> issubtype(typeof(_cthread_156), Thread_0())
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 153 | p1@14@01 | live]
; [else-branch: 153 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 153 | p1@14@01]
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_23 ==> issubtype(typeof(_cthread_156_0), Thread_0())
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 154 | p2@15@01 | live]
; [else-branch: 154 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 154 | p2@15@01]
; [eval] issubtype(typeof(_cthread_156_0), Thread_0())
; [eval] typeof(_cthread_156_0)
; [eval] Thread_0()
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p1_23 ==> self != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 155 | p1@14@01 | live]
; [else-branch: 155 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 155 | p1@14@01]
; [eval] self != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(assert (not (=> p1@14@01 (not (= tmp_0@77@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(assert (=> p1@14@01 (not (= tmp_0@77@01 $Ref.null))))
; [eval] p2_23 ==> self_3 != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 156 | p2@15@01 | live]
; [else-branch: 156 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 156 | p2@15@01]
; [eval] self_3 != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(assert (not (=> p2@15@01 (not (= tmp_0@77@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(assert (=> p2@15@01 (not (= tmp_0@77@01 $Ref.null))))
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 157 | p1@14@01 | live]
; [else-branch: 157 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 157 | p1@14@01]
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 158 | p2@15@01 | live]
; [else-branch: 158 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 158 | p2@15@01]
(push) ; 33
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 159 | p1@14@01 | live]
; [else-branch: 159 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 159 | p1@14@01]
(push) ; 34
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 160 | p2@15@01 | live]
; [else-branch: 160 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 160 | p2@15@01]
; [eval] p1_23 ==> issubtype(typeof(self), Example())
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 161 | p1@14@01 | live]
; [else-branch: 161 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 161 | p1@14@01]
; [eval] issubtype(typeof(self), Example())
; [eval] typeof(self)
; [eval] Example()
(pop) ; 36
(pop) ; 35
; Joined path conditions
(push) ; 35
(assert (not (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> tmp_0@77@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> tmp_0@77@01) (as Example<PyType>  PyType))))
; [eval] p2_23 ==> issubtype(typeof(self_3), Example())
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 162 | p2@15@01 | live]
; [else-branch: 162 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 162 | p2@15@01]
; [eval] issubtype(typeof(self_3), Example())
; [eval] typeof(self_3)
; [eval] Example()
(pop) ; 36
(pop) ; 35
; Joined path conditions
(push) ; 35
(assert (not (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> tmp_0@77@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> tmp_0@77@01) (as Example<PyType>  PyType))))
; [eval] p1_23 ==> self != null
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 163 | p1@14@01 | live]
; [else-branch: 163 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 163 | p1@14@01]
; [eval] self != null
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p2_23 ==> self_3 != null
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 164 | p2@15@01 | live]
; [else-branch: 164 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 164 | p2@15@01]
; [eval] self_3 != null
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p1_23 ==> perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 165 | p1@14@01 | live]
; [else-branch: 165 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 165 | p1@14@01]
; [eval] perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(push) ; 37
; [then-branch: 166 | False | live]
; [else-branch: 166 | True | live]
(push) ; 38
; [then-branch: 166 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 166 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false)
(push) ; 39
; [then-branch: 167 | False | live]
; [else-branch: 167 | True | live]
(push) ; 40
; [then-branch: 167 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 167 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false)
(push) ; 41
; [then-branch: 168 | False | live]
; [else-branch: 168 | True | live]
(push) ; 42
; [then-branch: 168 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 168 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false)
(push) ; 43
; [then-branch: 169 | False | live]
; [else-branch: 169 | True | live]
(push) ; 44
; [then-branch: 169 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 169 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p2_23 ==> perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 170 | p2@15@01 | live]
; [else-branch: 170 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 170 | p2@15@01]
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none
; [eval] perm(MustTerminate_0(_cthread_156_0))
(push) ; 37
; [then-branch: 171 | False | live]
; [else-branch: 171 | True | live]
(push) ; 38
; [then-branch: 171 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 171 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false)
(push) ; 39
; [then-branch: 172 | False | live]
; [else-branch: 172 | True | live]
(push) ; 40
; [then-branch: 172 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 172 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false)
(push) ; 41
; [then-branch: 173 | False | live]
; [else-branch: 173 | True | live]
(push) ; 42
; [then-branch: 173 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 173 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false)
(push) ; 43
; [then-branch: 174 | False | live]
; [else-branch: 174 | True | live]
(push) ; 44
; [then-branch: 174 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 174 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false)
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
(declare-const _current_wait_level_156@94@01 $Perm)
(declare-const _current_wait_level_156_0@95@01 $Perm)
(declare-const $t@96@01 $Snap)
(assert (= $t@96@01 ($Snap.combine ($Snap.first $t@96@01) ($Snap.second $t@96@01))))
(assert (= ($Snap.first $t@96@01) $Snap.unit))
; [eval] p1_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 175 | p1@14@01 | live]
; [else-branch: 175 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 175 | p1@14@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 37
; [then-branch: 176 | False | live]
; [else-branch: 176 | True | live]
(push) ; 38
; [then-branch: 176 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 176 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 39
; [then-branch: 177 | False | live]
; [else-branch: 177 | True | live]
(push) ; 40
; [then-branch: 177 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 177 | True]
; [eval] _residue_156 <= _current_wait_level_156
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
(assert (=> p1@14@01 (<= _residue_158@20@01 _current_wait_level_156@94@01)))
(assert (=
  ($Snap.second $t@96@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@96@01))
    ($Snap.second ($Snap.second $t@96@01)))))
(assert (= ($Snap.first ($Snap.second $t@96@01)) $Snap.unit))
; [eval] p2_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 178 | p2@15@01 | live]
; [else-branch: 178 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 178 | p2@15@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 37
; [then-branch: 179 | False | live]
; [else-branch: 179 | True | live]
(push) ; 38
; [then-branch: 179 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 179 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 39
; [then-branch: 180 | False | live]
; [else-branch: 180 | True | live]
(push) ; 40
; [then-branch: 180 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 180 | True]
; [eval] _residue_156_0 <= _current_wait_level_156_0
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
(assert (=> p2@15@01 (<= _residue_158_0@21@01 _current_wait_level_156_0@95@01)))
(assert (=
  ($Snap.second ($Snap.second $t@96@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@96@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 181 | p1@14@01 | live]
; [else-branch: 181 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 181 | p1@14@01]
(push) ; 36
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@96@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 182 | p2@15@01 | live]
; [else-branch: 182 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 182 | p2@15@01]
(push) ; 37
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_f), int())
(set-option :timeout 0)
(push) ; 37
(push) ; 38
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 183 | p1@14@01 | live]
; [else-branch: 183 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 183 | p1@14@01]
; [eval] issubtype(typeof(self.Example_f), int())
; [eval] typeof(self.Example_f)
; [eval] int()
(pop) ; 38
(pop) ; 37
; Joined path conditions
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_fp), int())
(push) ; 37
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 184 | p2@15@01 | live]
; [else-branch: 184 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 184 | p2@15@01]
; [eval] issubtype(typeof(self_3.Example_fp), int())
; [eval] typeof(self_3.Example_fp)
; [eval] int()
(pop) ; 38
(pop) ; 37
; Joined path conditions
(assert (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 185 | p1@14@01 | live]
; [else-branch: 185 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 185 | p1@14@01]
(push) ; 38
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))
(set-option :timeout 0)
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 186 | p2@15@01 | live]
; [else-branch: 186 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 186 | p2@15@01]
(push) ; 39
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_g), int())
(set-option :timeout 0)
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 187 | p1@14@01 | live]
; [else-branch: 187 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 187 | p1@14@01]
; [eval] issubtype(typeof(self.Example_g), int())
; [eval] typeof(self.Example_g)
; [eval] int()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_gp), int())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 188 | p2@15@01 | live]
; [else-branch: 188 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 188 | p2@15@01]
; [eval] issubtype(typeof(self_3.Example_gp), int())
; [eval] typeof(self_3.Example_gp)
; [eval] int()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p2@15@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_f, __prim__int___box__(0))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 189 | p1@14@01 | live]
; [else-branch: 189 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 189 | p1@14@01]
; [eval] int___eq__(self.Example_f, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01)))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01)))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p1@14@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01)))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p1@14@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01)))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_fp, __prim__int___box__(0))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 190 | p2@15@01 | live]
; [else-branch: 190 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 190 | p2@15@01]
; [eval] int___eq__(self_3.Example_fp, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01))))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p2@15@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01))))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p2@15@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01))))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_g, __prim__int___box__(1))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 191 | p1@14@01 | live]
; [else-branch: 191 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 191 | p1@14@01]
; [eval] int___eq__(self.Example_g, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p1@14@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p1@14@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_gp, __prim__int___box__(1))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 192 | p2@15@01 | live]
; [else-branch: 192 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 192 | p2@15@01]
; [eval] int___eq__(self_3.Example_gp, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p2@15@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p2@15@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 193 | p1@14@01 | live]
; [else-branch: 193 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 193 | p1@14@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 194 | p2@15@01 | live]
; [else-branch: 194 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 194 | p2@15@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] p1 && !ret1
(set-option :timeout 0)
(push) ; 39
; [then-branch: 195 | !(p1@14@01) | live]
; [else-branch: 195 | p1@14@01 | live]
(push) ; 40
; [then-branch: 195 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 40
(push) ; 40
; [else-branch: 195 | p1@14@01]
; [eval] !ret1
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(push) ; 39
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 196 | p1@14@01 | live]
; [else-branch: 196 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 196 | p1@14@01]
; [exec]
; _cwl_158 := tmp1_8
; [eval] p2 && !ret2
(push) ; 40
; [then-branch: 197 | !(p2@15@01) | live]
; [else-branch: 197 | p2@15@01 | live]
(push) ; 41
; [then-branch: 197 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 41
(push) ; 41
; [else-branch: 197 | p2@15@01]
; [eval] !ret2
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 198 | p2@15@01 | live]
; [else-branch: 198 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 198 | p2@15@01]
; [exec]
; _cwl_158_0 := tmp2_8
; [eval] p1 && !ret1
(push) ; 41
; [then-branch: 199 | !(p1@14@01) | live]
; [else-branch: 199 | p1@14@01 | live]
(push) ; 42
; [then-branch: 199 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 42
(push) ; 42
; [else-branch: 199 | p1@14@01]
; [eval] !ret1
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 200 | p1@14@01 | live]
; [else-branch: 200 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 200 | p1@14@01]
; [exec]
; b := Example_res_0
; [exec]
; inhale _isDefined(98)
(declare-const $t@97@01 $Snap)
(assert (= $t@97@01 $Snap.unit))
; [eval] _isDefined(98)
(push) ; 42
(assert (_isDefined%precondition $Snap.unit 98))
(pop) ; 42
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 98))
(assert (_isDefined $Snap.unit 98))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2 && !ret2
(set-option :timeout 0)
(push) ; 42
; [then-branch: 201 | !(p2@15@01) | live]
; [else-branch: 201 | p2@15@01 | live]
(push) ; 43
; [then-branch: 201 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 43
(push) ; 43
; [else-branch: 201 | p2@15@01]
; [eval] !ret2
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 202 | p2@15@01 | live]
; [else-branch: 202 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 202 | p2@15@01]
; [exec]
; b_6 := Example_res_0_0
; [exec]
; inhale true
(declare-const $t@98@01 $Snap)
(assert (= $t@98@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; p1_0 := p1 && (!ret1 && bool___unbox__(secret_11))
; [eval] p1 && (!ret1 && bool___unbox__(secret_11))
(set-option :timeout 0)
(push) ; 43
; [then-branch: 203 | !(p1@14@01) | live]
; [else-branch: 203 | p1@14@01 | live]
(push) ; 44
; [then-branch: 203 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 44
(push) ; 44
; [else-branch: 203 | p1@14@01]
; [eval] !ret1
(push) ; 45
; [then-branch: 204 | False | live]
; [else-branch: 204 | True | live]
(push) ; 46
; [then-branch: 204 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 204 | True]
; [eval] bool___unbox__(secret_11)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret@22@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret@22@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret@22@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret@22@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret@22@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@14@01
  (and
    (issubtype<Bool> (typeof<PyType> secret@22@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret@22@01))))
(declare-const p1_0@99@01 Bool)
(assert (= p1_0@99@01 (and p1@14@01 (bool___unbox__ $Snap.unit secret@22@01))))
; [exec]
; p2_0 := p2 && (!ret2 && bool___unbox__(secret_11_0))
; [eval] p2 && (!ret2 && bool___unbox__(secret_11_0))
(push) ; 43
; [then-branch: 205 | !(p2@15@01) | live]
; [else-branch: 205 | p2@15@01 | live]
(push) ; 44
; [then-branch: 205 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 44
(push) ; 44
; [else-branch: 205 | p2@15@01]
; [eval] !ret2
(push) ; 45
; [then-branch: 206 | False | live]
; [else-branch: 206 | True | live]
(push) ; 46
; [then-branch: 206 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 206 | True]
; [eval] bool___unbox__(secret_11_0)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_23@23@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_23@23@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_23@23@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_23@23@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_23@23@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_23@23@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_23@23@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@15@01
  (and
    (issubtype<Bool> (typeof<PyType> secret_23@23@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_23@23@01))))
(declare-const p2_0@100@01 Bool)
(assert (= p2_0@100@01 (and p2@15@01 (bool___unbox__ $Snap.unit secret_23@23@01))))
; [exec]
; p3 := p1 && (!ret1 && !bool___unbox__(secret_11))
; [eval] p1 && (!ret1 && !bool___unbox__(secret_11))
(push) ; 43
; [then-branch: 207 | !(p1@14@01) | live]
; [else-branch: 207 | p1@14@01 | live]
(push) ; 44
; [then-branch: 207 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 44
(push) ; 44
; [else-branch: 207 | p1@14@01]
; [eval] !ret1
(push) ; 45
; [then-branch: 208 | False | live]
; [else-branch: 208 | True | live]
(push) ; 46
; [then-branch: 208 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 208 | True]
; [eval] !bool___unbox__(secret_11)
; [eval] bool___unbox__(secret_11)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret@22@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret@22@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret@22@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret@22@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret@22@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret@22@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(declare-const p3@101@01 Bool)
(assert (= p3@101@01 (and p1@14@01 (not (bool___unbox__ $Snap.unit secret@22@01)))))
; [exec]
; p4 := p2 && (!ret2 && !bool___unbox__(secret_11_0))
; [eval] p2 && (!ret2 && !bool___unbox__(secret_11_0))
(push) ; 43
; [then-branch: 209 | !(p2@15@01) | live]
; [else-branch: 209 | p2@15@01 | live]
(push) ; 44
; [then-branch: 209 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 44
(push) ; 44
; [else-branch: 209 | p2@15@01]
; [eval] !ret2
(push) ; 45
; [then-branch: 210 | False | live]
; [else-branch: 210 | True | live]
(push) ; 46
; [then-branch: 210 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 210 | True]
; [eval] !bool___unbox__(secret_11_0)
; [eval] bool___unbox__(secret_11_0)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_23@23@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_23@23@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_23@23@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_23@23@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_23@23@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_23@23@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_23@23@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(declare-const p4@102@01 Bool)
(assert (= p4@102@01 (and p2@15@01 (not (bool___unbox__ $Snap.unit secret_23@23@01)))))
; [eval] p1_0 && !ret1
(push) ; 43
; [then-branch: 211 | !(p1_0@99@01) | live]
; [else-branch: 211 | p1_0@99@01 | live]
(push) ; 44
; [then-branch: 211 | !(p1_0@99@01)]
(assert (not p1_0@99@01))
(pop) ; 44
(push) ; 44
; [else-branch: 211 | p1_0@99@01]
(assert p1_0@99@01)
; [eval] !ret1
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(assert (or p1_0@99@01 (not p1_0@99@01)))
(push) ; 43
(set-option :timeout 10)
(assert (not (not p1_0@99@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not p1_0@99@01))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 212 | p1_0@99@01 | live]
; [else-branch: 212 | !(p1_0@99@01) | live]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 212 | p1_0@99@01]
(assert p1_0@99@01)
; [exec]
; _res := _checkDefined(a, 97)
; [eval] _checkDefined(a, 97)
(push) ; 44
; [eval] _isDefined(id)
(push) ; 45
(pop) ; 45
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp@55@01 97))
(pop) ; 44
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp@55@01 97))
(declare-const _res@103@01 $Ref)
(assert (= _res@103@01 (_checkDefined $Snap.unit tmp@55@01 97)))
; [exec]
; ret1 := true
; [eval] p2_0 && !ret2
(push) ; 44
; [then-branch: 213 | !(p2_0@100@01) | live]
; [else-branch: 213 | p2_0@100@01 | live]
(push) ; 45
; [then-branch: 213 | !(p2_0@100@01)]
(assert (not p2_0@100@01))
(pop) ; 45
(push) ; 45
; [else-branch: 213 | p2_0@100@01]
(assert p2_0@100@01)
; [eval] !ret2
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(assert (or p2_0@100@01 (not p2_0@100@01)))
(push) ; 44
(set-option :timeout 10)
(assert (not (not p2_0@100@01)))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not p2_0@100@01))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 214 | p2_0@100@01 | live]
; [else-branch: 214 | !(p2_0@100@01) | live]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 214 | p2_0@100@01]
(assert p2_0@100@01)
; [exec]
; _res_0 := a_6
; [exec]
; ret2 := true
; [eval] p1 && !ret1
(push) ; 45
; [then-branch: 215 | !(p1@14@01) | live]
; [else-branch: 215 | p1@14@01 | live]
(push) ; 46
; [then-branch: 215 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 46
(push) ; 46
; [else-branch: 215 | p1@14@01]
; [eval] !ret1
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
; [then-branch: 216 | False | dead]
; [else-branch: 216 | True | live]
(push) ; 45
; [else-branch: 216 | True]
(pop) ; 45
; [eval] !(p1 && !ret1)
; [eval] p1 && !ret1
(push) ; 45
; [then-branch: 217 | !(p1@14@01) | live]
; [else-branch: 217 | p1@14@01 | live]
(push) ; 46
; [then-branch: 217 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 46
(push) ; 46
; [else-branch: 217 | p1@14@01]
; [eval] !ret1
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(push) ; 45
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 218 | True | live]
; [else-branch: 218 | False | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 218 | True]
; [eval] p2 && !ret2
(push) ; 46
; [then-branch: 219 | !(p2@15@01) | live]
; [else-branch: 219 | p2@15@01 | live]
(push) ; 47
; [then-branch: 219 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 47
(push) ; 47
; [else-branch: 219 | p2@15@01]
; [eval] !ret2
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
; [then-branch: 220 | False | dead]
; [else-branch: 220 | True | live]
(push) ; 46
; [else-branch: 220 | True]
(pop) ; 46
; [eval] !(p2 && !ret2)
; [eval] p2 && !ret2
(push) ; 46
; [then-branch: 221 | !(p2@15@01) | live]
; [else-branch: 221 | p2@15@01 | live]
(push) ; 47
; [then-branch: 221 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 47
(push) ; 47
; [else-branch: 221 | p2@15@01]
; [eval] !ret2
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(push) ; 46
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 222 | True | live]
; [else-branch: 222 | False | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 222 | True]
; [exec]
; assert true
; [eval] p1 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 223 | p1@14@01 | live]
; [else-branch: 223 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 223 | p1@14@01]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p2 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 224 | p2@15@01 | live]
; [else-branch: 224 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 224 | p2@15@01]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p1 ==> issubtype(typeof(_res), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 225 | p1@14@01 | live]
; [else-branch: 225 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 225 | p1@14@01]
; [eval] issubtype(typeof(_res), Example())
; [eval] typeof(_res)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> _res@103@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> _res@103@01) (as Example<PyType>  PyType))))
; [eval] p2 ==> issubtype(typeof(_res_0), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 226 | p2@15@01 | live]
; [else-branch: 226 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 226 | p2@15@01]
; [eval] issubtype(typeof(_res_0), Example())
; [eval] typeof(_res_0)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
; [then-branch: 227 | p1@14@01 | live]
; [else-branch: 227 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 47
; [then-branch: 227 | p1@14@01]
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 _res@103@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp@55@01 _res@103@01)))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 228 | p2@15@01 | live]
; [else-branch: 228 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 228 | p2@15@01]
; [eval] p1 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 229 | p1@14@01 | live]
; [else-branch: 229 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 229 | p1@14@01]
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 _res@103@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp@55@01 _res@103@01)))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
; [eval] p2 ==> issubtype(typeof(_res_0.Example_fp), int())
(set-option :timeout 0)
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 230 | p2@15@01 | live]
; [else-branch: 230 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 230 | p2@15@01]
; [eval] issubtype(typeof(_res_0.Example_fp), int())
; [eval] typeof(_res_0.Example_fp)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
(push) ; 49
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 231 | p1@14@01 | live]
; [else-branch: 231 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 231 | p1@14@01]
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 _res@103@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp@55@01 _res@103@01)))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 232 | p2@15@01 | live]
; [else-branch: 232 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 232 | p2@15@01]
; [eval] p1 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 233 | p1@14@01 | live]
; [else-branch: 233 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 233 | p1@14@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 _res@103@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 _res@103@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p2 ==> issubtype(typeof(_res_0.Example_gp), int())
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 234 | p2@15@01 | live]
; [else-branch: 234 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 234 | p2@15@01]
; [eval] issubtype(typeof(_res_0.Example_gp), int())
; [eval] typeof(_res_0.Example_gp)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p1 && p2 ==> _res == _res_0
; [eval] p1 && p2
(push) ; 51
; [then-branch: 235 | !(p1@14@01) | live]
; [else-branch: 235 | p1@14@01 | live]
(push) ; 52
; [then-branch: 235 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 52
(push) ; 52
; [else-branch: 235 | p1@14@01]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1@14@01 p2@15@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1@14@01 p2@15@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 236 | p1@14@01 && p2@15@01 | live]
; [else-branch: 236 | !(p1@14@01 && p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 236 | p1@14@01 && p2@15@01]
(assert (and p1@14@01 p2@15@01))
; [eval] _res == _res_0
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (and p1@14@01 p2@15@01))
(push) ; 51
(assert (not (=> (and p1@14@01 p2@15@01) (= _res@103@01 tmp@55@01))))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(assert (=> (and p1@14@01 p2@15@01) (= _res@103@01 tmp@55@01)))
; [eval] p1 ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 237 | p1@14@01 | live]
; [else-branch: 237 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 237 | p1@14@01]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 53
; [then-branch: 238 | False | live]
; [else-branch: 238 | True | live]
(push) ; 54
; [then-branch: 238 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 238 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 55
; [then-branch: 239 | False | live]
; [else-branch: 239 | True | live]
(push) ; 56
; [then-branch: 239 | False]
(assert false)
(pop) ; 56
(push) ; 56
; [else-branch: 239 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 57
; [then-branch: 240 | False | live]
; [else-branch: 240 | True | live]
(push) ; 58
; [then-branch: 240 | False]
(assert false)
(pop) ; 58
(push) ; 58
; [else-branch: 240 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 58
(pop) ; 57
; Joined path conditions
; Joined path conditions
(pop) ; 56
(pop) ; 55
; Joined path conditions
; Joined path conditions
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p2 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 241 | p2@15@01 | live]
; [else-branch: 241 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 241 | p2@15@01]
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 53
; [then-branch: 242 | False | live]
; [else-branch: 242 | True | live]
(push) ; 54
; [then-branch: 242 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 242 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 55
; [then-branch: 243 | False | live]
; [else-branch: 243 | True | live]
(push) ; 56
; [then-branch: 243 | False]
(assert false)
(pop) ; 56
(push) ; 56
; [else-branch: 243 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 57
; [then-branch: 244 | False | live]
; [else-branch: 244 | True | live]
(push) ; 58
; [then-branch: 244 | False]
(assert false)
(pop) ; 58
(push) ; 58
; [else-branch: 244 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 58
(pop) ; 57
; Joined path conditions
; Joined path conditions
(pop) ; 56
(pop) ; 55
; Joined path conditions
; Joined path conditions
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
(pop) ; 50
(pop) ; 49
(pop) ; 48
(pop) ; 47
(pop) ; 46
(pop) ; 45
(pop) ; 44
(push) ; 44
; [else-branch: 214 | !(p2_0@100@01)]
(assert (not p2_0@100@01))
(pop) ; 44
; [eval] !(p2_0 && !ret2)
; [eval] p2_0 && !ret2
(push) ; 44
; [then-branch: 245 | !(p2_0@100@01) | live]
; [else-branch: 245 | p2_0@100@01 | live]
(push) ; 45
; [then-branch: 245 | !(p2_0@100@01)]
(assert (not p2_0@100@01))
(pop) ; 45
(push) ; 45
; [else-branch: 245 | p2_0@100@01]
(assert p2_0@100@01)
; [eval] !ret2
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(push) ; 44
(set-option :timeout 10)
(assert (not p2_0@100@01))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (not p2_0@100@01)))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 246 | !(p2_0@100@01) | live]
; [else-branch: 246 | p2_0@100@01 | live]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 246 | !(p2_0@100@01)]
(assert (not p2_0@100@01))
; [eval] p1 && !ret1
(push) ; 45
; [then-branch: 247 | !(p1@14@01) | live]
; [else-branch: 247 | p1@14@01 | live]
(push) ; 46
; [then-branch: 247 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 46
(push) ; 46
; [else-branch: 247 | p1@14@01]
(assert p1@14@01)
; [eval] !ret1
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
; [then-branch: 248 | False | dead]
; [else-branch: 248 | True | live]
(push) ; 45
; [else-branch: 248 | True]
(pop) ; 45
; [eval] !(p1 && !ret1)
; [eval] p1 && !ret1
(push) ; 45
; [then-branch: 249 | !(p1@14@01) | live]
; [else-branch: 249 | p1@14@01 | live]
(push) ; 46
; [then-branch: 249 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 46
(push) ; 46
; [else-branch: 249 | p1@14@01]
(assert p1@14@01)
; [eval] !ret1
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(push) ; 45
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 250 | True | live]
; [else-branch: 250 | False | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 250 | True]
; [eval] p2 && !ret2
(push) ; 46
; [then-branch: 251 | !(p2@15@01) | live]
; [else-branch: 251 | p2@15@01 | live]
(push) ; 47
; [then-branch: 251 | !(p2@15@01)]
(assert (not p2@15@01))
(pop) ; 47
(push) ; 47
; [else-branch: 251 | p2@15@01]
(assert p2@15@01)
; [eval] !ret2
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(push) ; 46
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 46
(set-option :timeout 10)
(assert (not p2@15@01))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 252 | p2@15@01 | live]
; [else-branch: 252 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 252 | p2@15@01]
(assert p2@15@01)
; [exec]
; _res_0 := b_6
; [exec]
; ret2 := true
; [exec]
; assert true
; [eval] p1 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not p1@14@01))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 253 | p1@14@01 | live]
; [else-branch: 253 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 253 | p1@14@01]
(assert p1@14@01)
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert p1@14@01)
; [eval] p2 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 254 | p2@15@01 | live]
; [else-branch: 254 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 254 | p2@15@01]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p1 ==> issubtype(typeof(_res), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 255 | p1@14@01 | live]
; [else-branch: 255 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 255 | p1@14@01]
; [eval] issubtype(typeof(_res), Example())
; [eval] typeof(_res)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> _res@103@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1@14@01
  (issubtype<Bool> (typeof<PyType> _res@103@01) (as Example<PyType>  PyType))))
; [eval] p2 ==> issubtype(typeof(_res_0), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 256 | p2@15@01 | live]
; [else-branch: 256 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 256 | p2@15@01]
; [eval] issubtype(typeof(_res_0), Example())
; [eval] typeof(_res_0)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
; [then-branch: 257 | p1@14@01 | live]
; [else-branch: 257 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 47
; [then-branch: 257 | p1@14@01]
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 _res@103@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp@55@01 _res@103@01)))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 258 | p2@15@01 | live]
; [else-branch: 258 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 258 | p2@15@01]
; [eval] p1 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 259 | p1@14@01 | live]
; [else-branch: 259 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 259 | p1@14@01]
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 _res@103@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp@55@01 _res@103@01)))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
; [eval] p2 ==> issubtype(typeof(_res_0.Example_fp), int())
(set-option :timeout 0)
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 260 | p2@15@01 | live]
; [else-branch: 260 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 260 | p2@15@01]
; [eval] issubtype(typeof(_res_0.Example_fp), int())
; [eval] typeof(_res_0.Example_fp)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
(push) ; 49
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 261 | p1@14@01 | live]
; [else-branch: 261 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 261 | p1@14@01]
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 _res@103@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp@55@01 _res@103@01)))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 262 | p2@15@01 | live]
; [else-branch: 262 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 262 | p2@15@01]
; [eval] p1 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p1@14@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 263 | p1@14@01 | live]
; [else-branch: 263 | !(p1@14@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 263 | p1@14@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 _res@103@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 _res@103@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p2 ==> issubtype(typeof(_res_0.Example_gp), int())
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p2@15@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 264 | p2@15@01 | live]
; [else-branch: 264 | !(p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 264 | p2@15@01]
; [eval] issubtype(typeof(_res_0.Example_gp), int())
; [eval] typeof(_res_0.Example_gp)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p1 && p2 ==> _res == _res_0
; [eval] p1 && p2
(push) ; 51
; [then-branch: 265 | !(p1@14@01) | live]
; [else-branch: 265 | p1@14@01 | live]
(push) ; 52
; [then-branch: 265 | !(p1@14@01)]
(assert (not p1@14@01))
(pop) ; 52
(push) ; 52
; [else-branch: 265 | p1@14@01]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1@14@01 p2@15@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1@14@01 p2@15@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 266 | p1@14@01 && p2@15@01 | live]
; [else-branch: 266 | !(p1@14@01 && p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 266 | p1@14@01 && p2@15@01]
(assert (and p1@14@01 p2@15@01))
; [eval] _res == _res_0
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (and p1@14@01 p2@15@01))
(push) ; 51
(assert (not (=> (and p1@14@01 p2@15@01) (= _res@103@01 tmp_0@77@01))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 tmp@55@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 tmp@55@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 tmp@55@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 tmp@55@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp@55@01 tmp_0@77@01)) (not (= tmp_0@77@01 tmp@55@01))))
; [eval] p1 && p2 ==> _res == _res_0
; [eval] p1 && p2
(set-option :timeout 0)
(push) ; 51
; [then-branch: 267 | !(p1@14@01) | live]
; [else-branch: 267 | p1@14@01 | live]
(push) ; 52
; [then-branch: 267 | !(p1@14@01)]
(assert (not p1@14@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))
(assert false)
(pop) ; 52
(set-option :timeout 0)
(push) ; 52
; [else-branch: 267 | p1@14@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_0@77@01 tmp@55@01)) (not (= tmp@55@01 tmp_0@77@01))))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=> (not p1@14@01) false))
; Joined path conditions
(assert (=>
  p1@14@01
  (and (not (= tmp_0@77@01 tmp@55@01)) (not (= tmp@55@01 tmp_0@77@01)))))
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1@14@01 p2@15@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1@14@01 p2@15@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 268 | p1@14@01 && p2@15@01 | live]
; [else-branch: 268 | !(p1@14@01 && p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 268 | p1@14@01 && p2@15@01]
(assert (and p1@14@01 p2@15@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_0@77@01 tmp@55@01)) (not (= tmp@55@01 tmp_0@77@01))))
; [eval] _res == _res_0
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=>
  (and p1@14@01 p2@15@01)
  (and
    p1@14@01
    p2@15@01
    (not (= tmp_0@77@01 tmp@55@01))
    (not (= tmp@55@01 tmp_0@77@01)))))
(assert (and p1@14@01 p2@15@01))
(set-option :timeout 0)
(push) ; 51
(assert (not (=> (and p1@14@01 p2@15@01) (= _res@103@01 tmp_0@77@01))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] p1 && p2 ==> _res == _res_0
; [eval] p1 && p2
(set-option :timeout 0)
(push) ; 51
; [then-branch: 269 | !(p1@14@01) | live]
; [else-branch: 269 | p1@14@01 | live]
(push) ; 52
; [then-branch: 269 | !(p1@14@01)]
(assert (not p1@14@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 tmp@55@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 tmp@55@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 tmp@55@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 tmp@55@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))))
(assert false)
(pop) ; 52
(set-option :timeout 0)
(push) ; 52
; [else-branch: 269 | p1@14@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 tmp@55@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 tmp@55@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 tmp@55@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 tmp@55@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp@55@01 tmp_0@77@01)) (not (= tmp_0@77@01 tmp@55@01))))
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@14@01
  (and (not (= tmp@55@01 tmp_0@77@01)) (not (= tmp_0@77@01 tmp@55@01)))))
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1@14@01 p2@15@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1@14@01 p2@15@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 270 | p1@14@01 && p2@15@01 | live]
; [else-branch: 270 | !(p1@14@01 && p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 270 | p1@14@01 && p2@15@01]
(assert (and p1@14@01 p2@15@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 tmp@55@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 tmp@55@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 tmp@55@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 tmp@55@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp@55@01 tmp_0@77@01)) (not (= tmp_0@77@01 tmp@55@01))))
; [eval] _res == _res_0
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=>
  (and p1@14@01 p2@15@01)
  (and
    p1@14@01
    p2@15@01
    (not (= tmp@55@01 tmp_0@77@01))
    (not (= tmp_0@77@01 tmp@55@01)))))
(assert (and p1@14@01 p2@15@01))
(set-option :timeout 0)
(push) ; 51
(assert (not (=> (and p1@14@01 p2@15@01) (= _res@103@01 tmp_0@77@01))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 tmp@55@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 tmp@55@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 tmp@55@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_0@77@01 tmp@55@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp@55@01 tmp_0@77@01)) (not (= tmp_0@77@01 tmp@55@01))))
; [eval] p1 && p2 ==> _res == _res_0
; [eval] p1 && p2
(set-option :timeout 0)
(push) ; 51
; [then-branch: 271 | !(p1@14@01) | live]
; [else-branch: 271 | p1@14@01 | live]
(push) ; 52
; [then-branch: 271 | !(p1@14@01)]
(assert (not p1@14@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))
(assert false)
(pop) ; 52
(set-option :timeout 0)
(push) ; 52
; [else-branch: 271 | p1@14@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_0@77@01 tmp@55@01)) (not (= tmp@55@01 tmp_0@77@01))))
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1@14@01 p2@15@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1@14@01 p2@15@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 272 | p1@14@01 && p2@15@01 | live]
; [else-branch: 272 | !(p1@14@01 && p2@15@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 272 | p1@14@01 && p2@15@01]
(assert (and p1@14@01 p2@15@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp@55@01 tmp_0@77@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@74@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@96@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_0@77@01 tmp@55@01)) (not (= tmp@55@01 tmp_0@77@01))))
; [eval] _res == _res_0
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (and p1@14@01 p2@15@01))
(set-option :timeout 0)
(push) ; 51
(assert (not (=> (and p1@14@01 p2@15@01) (= _res@103@01 tmp_0@77@01))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(pop) ; 50
(pop) ; 49
(pop) ; 48
(pop) ; 47
(pop) ; 46
(pop) ; 45
(pop) ; 44
(pop) ; 43
(pop) ; 42
(pop) ; 41
(pop) ; 40
(pop) ; 39
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- example_lowval ----------
(declare-const p1_1@104@01 Bool)
(declare-const p2_1@105@01 Bool)
(declare-const _cthread_159@106@01 $Ref)
(declare-const _cthread_159_0@107@01 $Ref)
(declare-const _caller_measures_159@108@01 Seq<Measure$>)
(declare-const _caller_measures_159_0@109@01 Seq<Measure$>)
(declare-const _residue_159@110@01 $Perm)
(declare-const _residue_159_0@111@01 $Perm)
(declare-const secret_0@112@01 $Ref)
(declare-const secret_0_0@113@01 $Ref)
(declare-const _current_wait_level_159@114@01 $Perm)
(declare-const _current_wait_level_159_0@115@01 $Perm)
(declare-const _res@116@01 $Ref)
(declare-const _res_1@117@01 $Ref)
(declare-const p1_1@118@01 Bool)
(declare-const p2_1@119@01 Bool)
(declare-const _cthread_159@120@01 $Ref)
(declare-const _cthread_159_0@121@01 $Ref)
(declare-const _caller_measures_159@122@01 Seq<Measure$>)
(declare-const _caller_measures_159_0@123@01 Seq<Measure$>)
(declare-const _residue_159@124@01 $Perm)
(declare-const _residue_159_0@125@01 $Perm)
(declare-const secret_0@126@01 $Ref)
(declare-const secret_0_0@127@01 $Ref)
(declare-const _current_wait_level_159@128@01 $Perm)
(declare-const _current_wait_level_159_0@129@01 $Perm)
(declare-const _res@130@01 $Ref)
(declare-const _res_1@131@01 $Ref)
(push) ; 1
(declare-const $t@132@01 $Snap)
(assert (= $t@132@01 ($Snap.combine ($Snap.first $t@132@01) ($Snap.second $t@132@01))))
(assert (= ($Snap.first $t@132@01) $Snap.unit))
; [eval] p1_1 ==> _cthread_159 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_1@118@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 273 | p1_1@118@01 | live]
; [else-branch: 273 | !(p1_1@118@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 273 | p1_1@118@01]
(assert p1_1@118@01)
; [eval] _cthread_159 != null
(pop) ; 3
(push) ; 3
; [else-branch: 273 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_1@118@01) p1_1@118@01))
(assert (=> p1_1@118@01 (not (= _cthread_159@120@01 $Ref.null))))
(assert (=
  ($Snap.second $t@132@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@132@01))
    ($Snap.second ($Snap.second $t@132@01)))))
(assert (= ($Snap.first ($Snap.second $t@132@01)) $Snap.unit))
; [eval] p2_1 ==> _cthread_159_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_1@119@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 274 | p2_1@119@01 | live]
; [else-branch: 274 | !(p2_1@119@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 274 | p2_1@119@01]
(assert p2_1@119@01)
; [eval] _cthread_159_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 274 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_1@119@01) p2_1@119@01))
(assert (=> p2_1@119@01 (not (= _cthread_159_0@121@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@132@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@132@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@132@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@132@01))) $Snap.unit))
; [eval] p1_1 ==> issubtype(typeof(_cthread_159), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_1@118@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 275 | p1_1@118@01 | live]
; [else-branch: 275 | !(p1_1@118@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 275 | p1_1@118@01]
(assert p1_1@118@01)
; [eval] issubtype(typeof(_cthread_159), Thread_0())
; [eval] typeof(_cthread_159)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 275 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_1@118@01
  (issubtype<Bool> (typeof<PyType> _cthread_159@120@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@132@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@132@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@132@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@132@01))))
  $Snap.unit))
; [eval] p2_1 ==> issubtype(typeof(_cthread_159_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_1@119@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 276 | p2_1@119@01 | live]
; [else-branch: 276 | !(p2_1@119@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 276 | p2_1@119@01]
(assert p2_1@119@01)
; [eval] issubtype(typeof(_cthread_159_0), Thread_0())
; [eval] typeof(_cthread_159_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 276 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_1@119@01
  (issubtype<Bool> (typeof<PyType> _cthread_159_0@121@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@132@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@132@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@132@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@132@01)))))
  $Snap.unit))
; [eval] p1_1 ==> issubtype(typeof(secret_0), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_1@118@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 277 | p1_1@118@01 | live]
; [else-branch: 277 | !(p1_1@118@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 277 | p1_1@118@01]
(assert p1_1@118@01)
; [eval] issubtype(typeof(secret_0), bool())
; [eval] typeof(secret_0)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 277 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_1@118@01
  (issubtype<Bool> (typeof<PyType> secret_0@126@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@132@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@132@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@132@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@132@01))))))
  $Snap.unit))
; [eval] p2_1 ==> issubtype(typeof(secret_0_0), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_1@119@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 278 | p2_1@119@01 | live]
; [else-branch: 278 | !(p2_1@119@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 278 | p2_1@119@01]
(assert p2_1@119@01)
; [eval] issubtype(typeof(secret_0_0), bool())
; [eval] typeof(secret_0_0)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 278 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_1@119@01
  (issubtype<Bool> (typeof<PyType> secret_0_0@127@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@132@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@132@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@132@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@132@01)))))))
  $Snap.unit))
; [eval] p1_1 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_1@118@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 279 | p1_1@118@01 | live]
; [else-branch: 279 | !(p1_1@118@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 279 | p1_1@118@01]
(assert p1_1@118@01)
(pop) ; 3
(push) ; 3
; [else-branch: 279 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@132@01)))))))
  $Snap.unit))
; [eval] p2_1 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_1@119@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 280 | p2_1@119@01 | live]
; [else-branch: 280 | !(p2_1@119@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 280 | p2_1@119@01]
(assert p2_1@119@01)
(pop) ; 3
(push) ; 3
; [else-branch: 280 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@133@01 $Snap)
(assert (= $t@133@01 ($Snap.combine ($Snap.first $t@133@01) ($Snap.second $t@133@01))))
(assert (= ($Snap.first $t@133@01) $Snap.unit))
; [eval] p1_1 ==> (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_159) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_159) && _residue_159 <= _current_wait_level_159)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_1@118@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 281 | p1_1@118@01 | live]
; [else-branch: 281 | !(p1_1@118@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 281 | p1_1@118@01]
(assert p1_1@118@01)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_159) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_159) && _residue_159 <= _current_wait_level_159)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_159)
(push) ; 5
; [then-branch: 282 | False | live]
; [else-branch: 282 | True | live]
(push) ; 6
; [then-branch: 282 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 282 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_159)
(push) ; 7
; [then-branch: 283 | False | live]
; [else-branch: 283 | True | live]
(push) ; 8
; [then-branch: 283 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 283 | True]
; [eval] _residue_159 <= _current_wait_level_159
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 281 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p1_1@118@01 (<= _residue_159@124@01 _current_wait_level_159@128@01)))
(assert (=
  ($Snap.second $t@133@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@133@01))
    ($Snap.second ($Snap.second $t@133@01)))))
(assert (= ($Snap.first ($Snap.second $t@133@01)) $Snap.unit))
; [eval] p2_1 ==> (forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: Level(_r_2) <= _current_wait_level_159_0) && ((forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: Level(_r_2) <= _current_wait_level_159_0) && _residue_159_0 <= _current_wait_level_159_0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_1@119@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 284 | p2_1@119@01 | live]
; [else-branch: 284 | !(p2_1@119@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 284 | p2_1@119@01]
(assert p2_1@119@01)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: Level(_r_2) <= _current_wait_level_159_0) && ((forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: Level(_r_2) <= _current_wait_level_159_0) && _residue_159_0 <= _current_wait_level_159_0)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: Level(_r_2) <= _current_wait_level_159_0)
(push) ; 5
; [then-branch: 285 | False | live]
; [else-branch: 285 | True | live]
(push) ; 6
; [then-branch: 285 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 285 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: Level(_r_2) <= _current_wait_level_159_0)
(push) ; 7
; [then-branch: 286 | False | live]
; [else-branch: 286 | True | live]
(push) ; 8
; [then-branch: 286 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 286 | True]
; [eval] _residue_159_0 <= _current_wait_level_159_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 284 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p2_1@119@01 (<= _residue_159_0@125@01 _current_wait_level_159_0@129@01)))
(assert (=
  ($Snap.second ($Snap.second $t@133@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@133@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@133@01))) $Snap.unit))
; [eval] p1_1 ==> issubtype(typeof(_res), Example())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_1@118@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 287 | p1_1@118@01 | live]
; [else-branch: 287 | !(p1_1@118@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 287 | p1_1@118@01]
(assert p1_1@118@01)
; [eval] issubtype(typeof(_res), Example())
; [eval] typeof(_res)
; [eval] Example()
(pop) ; 4
(push) ; 4
; [else-branch: 287 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_1@118@01
  (issubtype<Bool> (typeof<PyType> _res@130@01) (as Example<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@133@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@133@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@133@01))))
  $Snap.unit))
; [eval] p2_1 ==> issubtype(typeof(_res_1), Example())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_1@119@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 288 | p2_1@119@01 | live]
; [else-branch: 288 | !(p2_1@119@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 288 | p2_1@119@01]
(assert p2_1@119@01)
; [eval] issubtype(typeof(_res_1), Example())
; [eval] typeof(_res_1)
; [eval] Example()
(pop) ; 4
(push) ; 4
; [else-branch: 288 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_1@119@01
  (issubtype<Bool> (typeof<PyType> _res_1@131@01) (as Example<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_1@118@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 289 | p1_1@118@01 | live]
; [else-branch: 289 | !(p1_1@118@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 289 | p1_1@118@01]
(assert p1_1@118@01)
(assert (not (= _res@130@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_1@119@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 290 | p2_1@119@01 | live]
; [else-branch: 290 | !(p2_1@119@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 290 | p2_1@119@01]
(assert p2_1@119@01)
(assert (not (= _res_1@131@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))
  $Snap.unit))
; [eval] p1_1 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 291 | p1_1@118@01 | live]
; [else-branch: 291 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 291 | p1_1@118@01]
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  p1_1@118@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))
  $Snap.unit))
; [eval] p2_1 ==> issubtype(typeof(_res_1.Example_fp), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 292 | p2_1@119@01 | live]
; [else-branch: 292 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 292 | p2_1@119@01]
; [eval] issubtype(typeof(_res_1.Example_fp), int())
; [eval] typeof(_res_1.Example_fp)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  p2_1@119@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 293 | p1_1@118@01 | live]
; [else-branch: 293 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 293 | p1_1@118@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 294 | p2_1@119@01 | live]
; [else-branch: 294 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 294 | p2_1@119@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))
  $Snap.unit))
; [eval] p1_1 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 295 | p1_1@118@01 | live]
; [else-branch: 295 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 295 | p1_1@118@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_1@118@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))
  $Snap.unit))
; [eval] p2_1 ==> issubtype(typeof(_res_1.Example_gp), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 296 | p2_1@119@01 | live]
; [else-branch: 296 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 296 | p2_1@119@01]
; [eval] issubtype(typeof(_res_1.Example_gp), int())
; [eval] typeof(_res_1.Example_gp)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_1@119@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))
  $Snap.unit))
; [eval] p1_1 && p2_1 ==> _res == _res_1
; [eval] p1_1 && p2_1
(push) ; 7
; [then-branch: 297 | !(p1_1@118@01) | live]
; [else-branch: 297 | p1_1@118@01 | live]
(push) ; 8
; [then-branch: 297 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 8
(push) ; 8
; [else-branch: 297 | p1_1@118@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_1@118@01 (not p1_1@118@01)))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_1@118@01 p2_1@119@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and p1_1@118@01 p2_1@119@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 298 | p1_1@118@01 && p2_1@119@01 | live]
; [else-branch: 298 | !(p1_1@118@01 && p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 298 | p1_1@118@01 && p2_1@119@01]
(assert (and p1_1@118@01 p2_1@119@01))
; [eval] _res == _res_1
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (and p1_1@118@01 p2_1@119@01))
(assert (=> (and p1_1@118@01 p2_1@119@01) (= _res@130@01 _res_1@131@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))))
  $Snap.unit))
; [eval] p1_1 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 299 | p1_1@118@01 | live]
; [else-branch: 299 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 299 | p1_1@118@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))))
  $Snap.unit))
; [eval] p2_1 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 300 | p2_1@119@01 | live]
; [else-branch: 300 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 300 | p2_1@119@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 290 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))
  $Snap.unit))
; [eval] p1_1 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not p1_1@118@01))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 301 | p1_1@118@01 | live]
; [else-branch: 301 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 301 | p1_1@118@01]
(assert p1_1@118@01)
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert p1_1@118@01)
(assert (=>
  p1_1@118@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))
  $Snap.unit))
; [eval] p2_1 ==> issubtype(typeof(_res_1.Example_fp), int())
(push) ; 5
; [then-branch: 302 | p2_1@119@01 | dead]
; [else-branch: 302 | !(p2_1@119@01) | live]
(push) ; 6
; [else-branch: 302 | !(p2_1@119@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 303 | p1_1@118@01 | live]
; [else-branch: 303 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 303 | p1_1@118@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))
; [then-branch: 304 | p2_1@119@01 | dead]
; [else-branch: 304 | !(p2_1@119@01) | live]
(push) ; 6
; [else-branch: 304 | !(p2_1@119@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))
  $Snap.unit))
; [eval] p1_1 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 305 | p1_1@118@01 | live]
; [else-branch: 305 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 305 | p1_1@118@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_1@118@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))
  $Snap.unit))
; [eval] p2_1 ==> issubtype(typeof(_res_1.Example_gp), int())
(push) ; 7
; [then-branch: 306 | p2_1@119@01 | dead]
; [else-branch: 306 | !(p2_1@119@01) | live]
(push) ; 8
; [else-branch: 306 | !(p2_1@119@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))
  $Snap.unit))
; [eval] p1_1 && p2_1 ==> _res == _res_1
; [eval] p1_1 && p2_1
(push) ; 7
; [then-branch: 307 | !(p1_1@118@01) | live]
; [else-branch: 307 | p1_1@118@01 | live]
(push) ; 8
; [then-branch: 307 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 8
(push) ; 8
; [else-branch: 307 | p1_1@118@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_1@118@01 (not p1_1@118@01)))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_1@118@01 p2_1@119@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 308 | p1_1@118@01 && p2_1@119@01 | dead]
; [else-branch: 308 | !(p1_1@118@01 && p2_1@119@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 308 | !(p1_1@118@01 && p2_1@119@01)]
(assert (not (and p1_1@118@01 p2_1@119@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (and p1_1@118@01 p2_1@119@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))))
  $Snap.unit))
; [eval] p1_1 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 309 | p1_1@118@01 | live]
; [else-branch: 309 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 309 | p1_1@118@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))))
  $Snap.unit))
; [eval] p2_1 ==> true
(push) ; 7
; [then-branch: 310 | p2_1@119@01 | dead]
; [else-branch: 310 | !(p2_1@119@01) | live]
(push) ; 8
; [else-branch: 310 | !(p2_1@119@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 289 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_1@119@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 311 | p2_1@119@01 | live]
; [else-branch: 311 | !(p2_1@119@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 311 | p2_1@119@01]
(assert p2_1@119@01)
(assert (not (= _res_1@131@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))
  $Snap.unit))
; [eval] p1_1 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 5
; [then-branch: 312 | p1_1@118@01 | dead]
; [else-branch: 312 | !(p1_1@118@01) | live]
(push) ; 6
; [else-branch: 312 | !(p1_1@118@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))
  $Snap.unit))
; [eval] p2_1 ==> issubtype(typeof(_res_1.Example_fp), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 313 | p2_1@119@01 | live]
; [else-branch: 313 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 313 | p2_1@119@01]
; [eval] issubtype(typeof(_res_1.Example_fp), int())
; [eval] typeof(_res_1.Example_fp)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  p2_1@119@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))
; [then-branch: 314 | p1_1@118@01 | dead]
; [else-branch: 314 | !(p1_1@118@01) | live]
(push) ; 5
; [else-branch: 314 | !(p1_1@118@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 315 | p2_1@119@01 | live]
; [else-branch: 315 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 315 | p2_1@119@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))
  $Snap.unit))
; [eval] p1_1 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 7
; [then-branch: 316 | p1_1@118@01 | dead]
; [else-branch: 316 | !(p1_1@118@01) | live]
(push) ; 8
; [else-branch: 316 | !(p1_1@118@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))
  $Snap.unit))
; [eval] p2_1 ==> issubtype(typeof(_res_1.Example_gp), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 317 | p2_1@119@01 | live]
; [else-branch: 317 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 317 | p2_1@119@01]
; [eval] issubtype(typeof(_res_1.Example_gp), int())
; [eval] typeof(_res_1.Example_gp)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_1@119@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))
  $Snap.unit))
; [eval] p1_1 && p2_1 ==> _res == _res_1
; [eval] p1_1 && p2_1
(push) ; 7
; [then-branch: 318 | !(p1_1@118@01) | live]
; [else-branch: 318 | p1_1@118@01 | live]
(push) ; 8
; [then-branch: 318 | !(p1_1@118@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 318 | p1_1@118@01]
(assert p1_1@118@01)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_1@118@01 (not p1_1@118@01)))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_1@118@01 p2_1@119@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 319 | p1_1@118@01 && p2_1@119@01 | dead]
; [else-branch: 319 | !(p1_1@118@01 && p2_1@119@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 319 | !(p1_1@118@01 && p2_1@119@01)]
(assert (not (and p1_1@118@01 p2_1@119@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (and p1_1@118@01 p2_1@119@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))))
  $Snap.unit))
; [eval] p1_1 ==> true
(push) ; 7
; [then-branch: 320 | p1_1@118@01 | dead]
; [else-branch: 320 | !(p1_1@118@01) | live]
(push) ; 8
; [else-branch: 320 | !(p1_1@118@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))))
  $Snap.unit))
; [eval] p2_1 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 321 | p2_1@119@01 | live]
; [else-branch: 321 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 321 | p2_1@119@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 311 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))
  $Snap.unit))
; [eval] p1_1 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 5
; [then-branch: 322 | p1_1@118@01 | dead]
; [else-branch: 322 | !(p1_1@118@01) | live]
(push) ; 6
; [else-branch: 322 | !(p1_1@118@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))
  $Snap.unit))
; [eval] p2_1 ==> issubtype(typeof(_res_1.Example_fp), int())
(push) ; 5
; [then-branch: 323 | p2_1@119@01 | dead]
; [else-branch: 323 | !(p2_1@119@01) | live]
(push) ; 6
; [else-branch: 323 | !(p2_1@119@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))
; [then-branch: 324 | p1_1@118@01 | dead]
; [else-branch: 324 | !(p1_1@118@01) | live]
(push) ; 5
; [else-branch: 324 | !(p1_1@118@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))
; [then-branch: 325 | p2_1@119@01 | dead]
; [else-branch: 325 | !(p2_1@119@01) | live]
(push) ; 6
; [else-branch: 325 | !(p2_1@119@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))
  $Snap.unit))
; [eval] p1_1 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 7
; [then-branch: 326 | p1_1@118@01 | dead]
; [else-branch: 326 | !(p1_1@118@01) | live]
(push) ; 8
; [else-branch: 326 | !(p1_1@118@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))
  $Snap.unit))
; [eval] p2_1 ==> issubtype(typeof(_res_1.Example_gp), int())
(push) ; 7
; [then-branch: 327 | p2_1@119@01 | dead]
; [else-branch: 327 | !(p2_1@119@01) | live]
(push) ; 8
; [else-branch: 327 | !(p2_1@119@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))
  $Snap.unit))
; [eval] p1_1 && p2_1 ==> _res == _res_1
; [eval] p1_1 && p2_1
(push) ; 7
; [then-branch: 328 | !(p1_1@118@01) | live]
; [else-branch: 328 | p1_1@118@01 | live]
(push) ; 8
; [then-branch: 328 | !(p1_1@118@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 328 | p1_1@118@01]
(assert p1_1@118@01)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_1@118@01 (not p1_1@118@01)))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_1@118@01 p2_1@119@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 329 | p1_1@118@01 && p2_1@119@01 | dead]
; [else-branch: 329 | !(p1_1@118@01 && p2_1@119@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 329 | !(p1_1@118@01 && p2_1@119@01)]
(assert (not (and p1_1@118@01 p2_1@119@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (and p1_1@118@01 p2_1@119@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))))
  $Snap.unit))
; [eval] p1_1 ==> true
(push) ; 7
; [then-branch: 330 | p1_1@118@01 | dead]
; [else-branch: 330 | !(p1_1@118@01) | live]
(push) ; 8
; [else-branch: 330 | !(p1_1@118@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@133@01))))))))))))))
  $Snap.unit))
; [eval] p2_1 ==> true
(push) ; 7
; [then-branch: 331 | p2_1@119@01 | dead]
; [else-branch: 331 | !(p2_1@119@01) | live]
(push) ; 8
; [else-branch: 331 | !(p2_1@119@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var ret1_0: Bool
(declare-const ret1_0@134@01 Bool)
; [exec]
; var ret2_0: Bool
(declare-const ret2_0@135@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@136@01 $Ref)
; [exec]
; var _err_1: Ref
(declare-const _err_1@137@01 $Ref)
; [exec]
; var a_0: Ref
(declare-const a_0@138@01 $Ref)
; [exec]
; var a_0_0: Ref
(declare-const a_0_0@139@01 $Ref)
; [exec]
; var b_0: Ref
(declare-const b_0@140@01 $Ref)
; [exec]
; var b_0_0: Ref
(declare-const b_0_0@141@01 $Ref)
; [exec]
; var secret_12: Ref
(declare-const secret_12@142@01 $Ref)
; [exec]
; var secret_12_0: Ref
(declare-const secret_12_0@143@01 $Ref)
; [exec]
; var Example_res_1: Ref
(declare-const Example_res_1@144@01 $Ref)
; [exec]
; var Example_res_1_0: Ref
(declare-const Example_res_1_0@145@01 $Ref)
; [exec]
; var Example_res_2: Ref
(declare-const Example_res_2@146@01 $Ref)
; [exec]
; var Example_res_2_0: Ref
(declare-const Example_res_2_0@147@01 $Ref)
; [exec]
; var _cwl_159: Perm
(declare-const _cwl_159@148@01 $Perm)
; [exec]
; var _cwl_159_0: Perm
(declare-const _cwl_159_0@149@01 $Perm)
; [exec]
; var _method_measures_159: Seq[Measure$]
(declare-const _method_measures_159@150@01 Seq<Measure$>)
; [exec]
; var _method_measures_159_0: Seq[Measure$]
(declare-const _method_measures_159_0@151@01 Seq<Measure$>)
; [exec]
; var tmp_1: Ref
(declare-const tmp_1@152@01 $Ref)
; [exec]
; var tmp_2: Ref
(declare-const tmp_2@153@01 $Ref)
; [exec]
; var p1_2: Bool
(declare-const p1_2@154@01 Bool)
; [exec]
; var p2_2: Bool
(declare-const p2_2@155@01 Bool)
; [exec]
; var p3_0: Bool
(declare-const p3_0@156@01 Bool)
; [exec]
; var p4_0: Bool
(declare-const p4_0@157@01 Bool)
; [exec]
; inhale p1_1
(declare-const $t@158@01 $Snap)
(assert (= $t@158@01 $Snap.unit))
(assert p1_1@118@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ret1_0 := false
; [exec]
; ret2_0 := false
; [eval] p1_1 && !ret1_0
(set-option :timeout 0)
(push) ; 3
; [then-branch: 332 | !(p1_1@118@01) | live]
; [else-branch: 332 | p1_1@118@01 | live]
(push) ; 4
; [then-branch: 332 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 4
(push) ; 4
; [else-branch: 332 | p1_1@118@01]
; [eval] !ret1_0
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1_1@118@01 (not p1_1@118@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 333 | p1_1@118@01 | live]
; [else-branch: 333 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 333 | p1_1@118@01]
; [exec]
; _method_measures_159 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; secret_12 := secret_0
; [eval] p2_1 && !ret2_0
(push) ; 4
; [then-branch: 334 | !(p2_1@119@01) | live]
; [else-branch: 334 | p2_1@119@01 | live]
(push) ; 5
; [then-branch: 334 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 5
(push) ; 5
; [else-branch: 334 | p2_1@119@01]
(assert p2_1@119@01)
; [eval] !ret2_0
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or p2_1@119@01 (not p2_1@119@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_1@119@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 335 | p2_1@119@01 | live]
; [else-branch: 335 | !(p2_1@119@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 335 | p2_1@119@01]
(assert p2_1@119@01)
; [exec]
; _method_measures_159_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res_1 := null
; [exec]
; _err_1 := null
; [exec]
; secret_12_0 := secret_0_0
; [exec]
; tmp_1 := new()
(declare-const tmp_1@159@01 $Ref)
(assert (not (= tmp_1@159@01 $Ref.null)))
(assert (not (= tmp_1@159@01 Example_res_2_0@147@01)))
(assert (not (= tmp_1@159@01 Example_res_2@146@01)))
(assert (not (= tmp_1@159@01 a_0@138@01)))
(assert (not (= tmp_1@159@01 Example_res_1_0@145@01)))
(assert (not (= tmp_1@159@01 a_0_0@139@01)))
(assert (not (= tmp_1@159@01 _cthread_159_0@121@01)))
(assert (not (= tmp_1@159@01 b_0@140@01)))
(assert (not (= tmp_1@159@01 secret_0@126@01)))
(assert (not (= tmp_1@159@01 tmp_2@153@01)))
(assert (not (= tmp_1@159@01 Example_res_1@144@01)))
(assert (not (= tmp_1@159@01 b_0_0@141@01)))
(assert (not (= tmp_1@159@01 tmp_1@152@01)))
(assert (not (= tmp_1@159@01 secret_0_0@127@01)))
(assert (not (= tmp_1@159@01 _cthread_159@120@01)))
; [eval] p1_1 && !ret1_0
(push) ; 5
; [then-branch: 336 | !(p1_1@118@01) | live]
; [else-branch: 336 | p1_1@118@01 | live]
(push) ; 6
; [then-branch: 336 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 6
(push) ; 6
; [else-branch: 336 | p1_1@118@01]
; [eval] !ret1_0
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 337 | p1_1@118@01 | live]
; [else-branch: 337 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 337 | p1_1@118@01]
; [exec]
; Example_res_1 := tmp_1
; [eval] p2_1 && !ret2_0
(push) ; 6
; [then-branch: 338 | !(p2_1@119@01) | live]
; [else-branch: 338 | p2_1@119@01 | live]
(push) ; 7
; [then-branch: 338 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 7
(push) ; 7
; [else-branch: 338 | p2_1@119@01]
; [eval] !ret2_0
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 339 | p2_1@119@01 | live]
; [else-branch: 339 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 339 | p2_1@119@01]
; [exec]
; Example_res_1_0 := tmp_1
; [eval] p1_1 && !ret1_0
(push) ; 7
; [then-branch: 340 | !(p1_1@118@01) | live]
; [else-branch: 340 | p1_1@118@01 | live]
(push) ; 8
; [then-branch: 340 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 8
(push) ; 8
; [else-branch: 340 | p1_1@118@01]
; [eval] !ret1_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 341 | p1_1@118@01 | live]
; [else-branch: 341 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 341 | p1_1@118@01]
; [exec]
; inhale typeof(Example_res_1) == Example()
(declare-const $t@160@01 $Snap)
(assert (= $t@160@01 $Snap.unit))
; [eval] typeof(Example_res_1) == Example()
; [eval] typeof(Example_res_1)
; [eval] Example()
(assert (= (typeof<PyType> tmp_1@159@01) (as Example<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_1, 1888441915154752436293), write)
(declare-const $t@161@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_1, 1906888659228461987909), write)
(declare-const $t@162@01 $Snap)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_1 && !ret2_0
(set-option :timeout 0)
(push) ; 8
; [then-branch: 342 | !(p2_1@119@01) | live]
; [else-branch: 342 | p2_1@119@01 | live]
(push) ; 9
; [then-branch: 342 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 9
(push) ; 9
; [else-branch: 342 | p2_1@119@01]
; [eval] !ret2_0
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 343 | p2_1@119@01 | live]
; [else-branch: 343 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 343 | p2_1@119@01]
; [exec]
; inhale typeof(Example_res_1_0) == Example()
(declare-const $t@163@01 $Snap)
(assert (= $t@163@01 $Snap.unit))
; [eval] typeof(Example_res_1_0) == Example()
; [eval] typeof(Example_res_1_0)
; [eval] Example()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(Example_res_1_0, 1888441915154752436293), write)
(declare-const $t@164@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(Example_res_1_0, 1906888659228461987909), write)
(declare-const $t@165@01 $Snap)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_1 && !ret1_0 || p2_1 && !ret2_0
; [eval] p1_1 && !ret1_0
(set-option :timeout 0)
(push) ; 9
; [then-branch: 344 | !(p1_1@118@01) | live]
; [else-branch: 344 | p1_1@118@01 | live]
(push) ; 10
; [then-branch: 344 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 10
(push) ; 10
; [else-branch: 344 | p1_1@118@01]
; [eval] !ret1_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 345 | p1_1@118@01 | live]
; [else-branch: 345 | !(p1_1@118@01) | live]
(push) ; 10
; [then-branch: 345 | p1_1@118@01]
(pop) ; 10
(push) ; 10
; [else-branch: 345 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
; [eval] p2_1 && !ret2_0
(push) ; 11
; [then-branch: 346 | !(p2_1@119@01) | live]
; [else-branch: 346 | p2_1@119@01 | live]
(push) ; 12
; [then-branch: 346 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 12
(push) ; 12
; [else-branch: 346 | p2_1@119@01]
; [eval] !ret2_0
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not (or p1_1@118@01 p2_1@119@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (or p1_1@118@01 p2_1@119@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 347 | p1_1@118@01 || p2_1@119@01 | live]
; [else-branch: 347 | !(p1_1@118@01 || p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 347 | p1_1@118@01 || p2_1@119@01]
(assert (or p1_1@118@01 p2_1@119@01))
; [exec]
; var tmp1_9: Ref
(declare-const tmp1_9@166@01 $Ref)
; [exec]
; var tmp2_9: Ref
(declare-const tmp2_9@167@01 $Ref)
; [exec]
; var tmp1_10: Seq[Measure$]
(declare-const tmp1_10@168@01 Seq<Measure$>)
; [exec]
; var tmp2_10: Seq[Measure$]
(declare-const tmp2_10@169@01 Seq<Measure$>)
; [exec]
; var tmp1_11: Perm
(declare-const tmp1_11@170@01 $Perm)
; [exec]
; var tmp2_11: Perm
(declare-const tmp2_11@171@01 $Perm)
; [exec]
; var tmp1_12: Ref
(declare-const tmp1_12@172@01 $Ref)
; [exec]
; var tmp2_12: Ref
(declare-const tmp2_12@173@01 $Ref)
; [exec]
; var tmp1_13: Perm
(declare-const tmp1_13@174@01 $Perm)
; [exec]
; var tmp2_13: Perm
(declare-const tmp2_13@175@01 $Perm)
; [eval] p1_1 && !ret1_0
(push) ; 10
; [then-branch: 348 | !(p1_1@118@01) | live]
; [else-branch: 348 | p1_1@118@01 | live]
(push) ; 11
; [then-branch: 348 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 11
(push) ; 11
; [else-branch: 348 | p1_1@118@01]
; [eval] !ret1_0
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 349 | p1_1@118@01 | live]
; [else-branch: 349 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 349 | p1_1@118@01]
; [exec]
; tmp1_9 := _cthread_159
; [exec]
; tmp1_10 := _method_measures_159
; [exec]
; tmp1_11 := _residue_159
; [exec]
; tmp1_12 := Example_res_1
; [eval] p2_1 && !ret2_0
(push) ; 11
; [then-branch: 350 | !(p2_1@119@01) | live]
; [else-branch: 350 | p2_1@119@01 | live]
(push) ; 12
; [then-branch: 350 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 12
(push) ; 12
; [else-branch: 350 | p2_1@119@01]
; [eval] !ret2_0
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 351 | p2_1@119@01 | live]
; [else-branch: 351 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 351 | p2_1@119@01]
; [exec]
; tmp2_9 := _cthread_159_0
; [exec]
; tmp2_10 := _method_measures_159_0
; [exec]
; tmp2_11 := _residue_159_0
; [exec]
; tmp2_12 := Example_res_1_0
; [exec]
; tmp1_13, tmp2_13 := Example___init__(p1_1 && !ret1_0, p2_1 && !ret2_0, tmp1_9,
;   tmp2_9, tmp1_10, tmp2_10, tmp1_11, tmp2_11, tmp1_12, tmp2_12)
; [eval] p1_1 && !ret1_0
(push) ; 12
; [then-branch: 352 | !(p1_1@118@01) | live]
; [else-branch: 352 | p1_1@118@01 | live]
(push) ; 13
; [then-branch: 352 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 13
(push) ; 13
; [else-branch: 352 | p1_1@118@01]
; [eval] !ret1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [eval] p2_1 && !ret2_0
(push) ; 12
; [then-branch: 353 | !(p2_1@119@01) | live]
; [else-branch: 353 | p2_1@119@01 | live]
(push) ; 13
; [then-branch: 353 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 13
(push) ; 13
; [else-branch: 353 | p2_1@119@01]
; [eval] !ret2_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [eval] p1_23 ==> _cthread_156 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 354 | p1_1@118@01 | live]
; [else-branch: 354 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 354 | p1_1@118@01]
; [eval] _cthread_156 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p2_23 ==> _cthread_156_0 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 355 | p2_1@119@01 | live]
; [else-branch: 355 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 355 | p2_1@119@01]
; [eval] _cthread_156_0 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1_23 ==> issubtype(typeof(_cthread_156), Thread_0())
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 356 | p1_1@118@01 | live]
; [else-branch: 356 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 356 | p1_1@118@01]
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p2_23 ==> issubtype(typeof(_cthread_156_0), Thread_0())
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 357 | p2_1@119@01 | live]
; [else-branch: 357 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 357 | p2_1@119@01]
; [eval] issubtype(typeof(_cthread_156_0), Thread_0())
; [eval] typeof(_cthread_156_0)
; [eval] Thread_0()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1_23 ==> self != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 358 | p1_1@118@01 | live]
; [else-branch: 358 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 358 | p1_1@118@01]
; [eval] self != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=> p1_1@118@01 (not (= tmp_1@159@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=> p1_1@118@01 (not (= tmp_1@159@01 $Ref.null))))
; [eval] p2_23 ==> self_3 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 359 | p2_1@119@01 | live]
; [else-branch: 359 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 359 | p2_1@119@01]
; [eval] self_3 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=> p2_1@119@01 (not (= tmp_1@159@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=> p2_1@119@01 (not (= tmp_1@159@01 $Ref.null))))
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 360 | p1_1@118@01 | live]
; [else-branch: 360 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 360 | p1_1@118@01]
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 361 | p2_1@119@01 | live]
; [else-branch: 361 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 361 | p2_1@119@01]
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 362 | p1_1@118@01 | live]
; [else-branch: 362 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 362 | p1_1@118@01]
(push) ; 15
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 363 | p2_1@119@01 | live]
; [else-branch: 363 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 363 | p2_1@119@01]
; [eval] p1_23 ==> issubtype(typeof(self), Example())
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 364 | p1_1@118@01 | live]
; [else-branch: 364 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 364 | p1_1@118@01]
; [eval] issubtype(typeof(self), Example())
; [eval] typeof(self)
; [eval] Example()
(pop) ; 17
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (=>
  p1_1@118@01
  (issubtype<Bool> (typeof<PyType> tmp_1@159@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_1@118@01
  (issubtype<Bool> (typeof<PyType> tmp_1@159@01) (as Example<PyType>  PyType))))
; [eval] p2_23 ==> issubtype(typeof(self_3), Example())
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 365 | p2_1@119@01 | live]
; [else-branch: 365 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 365 | p2_1@119@01]
; [eval] issubtype(typeof(self_3), Example())
; [eval] typeof(self_3)
; [eval] Example()
(pop) ; 17
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (=>
  p2_1@119@01
  (issubtype<Bool> (typeof<PyType> tmp_1@159@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_1@119@01
  (issubtype<Bool> (typeof<PyType> tmp_1@159@01) (as Example<PyType>  PyType))))
; [eval] p1_23 ==> self != null
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 366 | p1_1@118@01 | live]
; [else-branch: 366 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 366 | p1_1@118@01]
; [eval] self != null
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p2_23 ==> self_3 != null
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 367 | p2_1@119@01 | live]
; [else-branch: 367 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 367 | p2_1@119@01]
; [eval] self_3 != null
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p1_23 ==> perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 368 | p1_1@118@01 | live]
; [else-branch: 368 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 368 | p1_1@118@01]
; [eval] perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(push) ; 18
; [then-branch: 369 | False | live]
; [else-branch: 369 | True | live]
(push) ; 19
; [then-branch: 369 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 369 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false)
(push) ; 20
; [then-branch: 370 | False | live]
; [else-branch: 370 | True | live]
(push) ; 21
; [then-branch: 370 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 370 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false)
(push) ; 22
; [then-branch: 371 | False | live]
; [else-branch: 371 | True | live]
(push) ; 23
; [then-branch: 371 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 371 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false)
(push) ; 24
; [then-branch: 372 | False | live]
; [else-branch: 372 | True | live]
(push) ; 25
; [then-branch: 372 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 372 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p2_23 ==> perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 373 | p2_1@119@01 | live]
; [else-branch: 373 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 373 | p2_1@119@01]
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none
; [eval] perm(MustTerminate_0(_cthread_156_0))
(push) ; 18
; [then-branch: 374 | False | live]
; [else-branch: 374 | True | live]
(push) ; 19
; [then-branch: 374 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 374 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false)
(push) ; 20
; [then-branch: 375 | False | live]
; [else-branch: 375 | True | live]
(push) ; 21
; [then-branch: 375 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 375 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false)
(push) ; 22
; [then-branch: 376 | False | live]
; [else-branch: 376 | True | live]
(push) ; 23
; [then-branch: 376 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 376 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false)
(push) ; 24
; [then-branch: 377 | False | live]
; [else-branch: 377 | True | live]
(push) ; 25
; [then-branch: 377 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 377 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(declare-const _current_wait_level_156@176@01 $Perm)
(declare-const _current_wait_level_156_0@177@01 $Perm)
(declare-const $t@178@01 $Snap)
(assert (= $t@178@01 ($Snap.combine ($Snap.first $t@178@01) ($Snap.second $t@178@01))))
(assert (= ($Snap.first $t@178@01) $Snap.unit))
; [eval] p1_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 378 | p1_1@118@01 | live]
; [else-branch: 378 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 378 | p1_1@118@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 18
; [then-branch: 379 | False | live]
; [else-branch: 379 | True | live]
(push) ; 19
; [then-branch: 379 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 379 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 20
; [then-branch: 380 | False | live]
; [else-branch: 380 | True | live]
(push) ; 21
; [then-branch: 380 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 380 | True]
; [eval] _residue_156 <= _current_wait_level_156
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=> p1_1@118@01 (<= _residue_159@124@01 _current_wait_level_156@176@01)))
(assert (=
  ($Snap.second $t@178@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@178@01))
    ($Snap.second ($Snap.second $t@178@01)))))
(assert (= ($Snap.first ($Snap.second $t@178@01)) $Snap.unit))
; [eval] p2_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 381 | p2_1@119@01 | live]
; [else-branch: 381 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 381 | p2_1@119@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 18
; [then-branch: 382 | False | live]
; [else-branch: 382 | True | live]
(push) ; 19
; [then-branch: 382 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 382 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 20
; [then-branch: 383 | False | live]
; [else-branch: 383 | True | live]
(push) ; 21
; [then-branch: 383 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 383 | True]
; [eval] _residue_156_0 <= _current_wait_level_156_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=> p2_1@119@01 (<= _residue_159_0@125@01 _current_wait_level_156_0@177@01)))
(assert (=
  ($Snap.second ($Snap.second $t@178@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@178@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 384 | p1_1@118@01 | live]
; [else-branch: 384 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 384 | p1_1@118@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@178@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 385 | p2_1@119@01 | live]
; [else-branch: 385 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 385 | p2_1@119@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_f), int())
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 386 | p1_1@118@01 | live]
; [else-branch: 386 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 386 | p1_1@118@01]
; [eval] issubtype(typeof(self.Example_f), int())
; [eval] typeof(self.Example_f)
; [eval] int()
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  p1_1@118@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_fp), int())
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 387 | p2_1@119@01 | live]
; [else-branch: 387 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 387 | p2_1@119@01]
; [eval] issubtype(typeof(self_3.Example_fp), int())
; [eval] typeof(self_3.Example_fp)
; [eval] int()
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  p2_1@119@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 388 | p1_1@118@01 | live]
; [else-branch: 388 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 388 | p1_1@118@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 389 | p2_1@119@01 | live]
; [else-branch: 389 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 389 | p2_1@119@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_g), int())
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 390 | p1_1@118@01 | live]
; [else-branch: 390 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 390 | p1_1@118@01]
; [eval] issubtype(typeof(self.Example_g), int())
; [eval] typeof(self.Example_g)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p1_1@118@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_gp), int())
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 391 | p2_1@119@01 | live]
; [else-branch: 391 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 391 | p2_1@119@01]
; [eval] issubtype(typeof(self_3.Example_gp), int())
; [eval] typeof(self_3.Example_gp)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p2_1@119@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_f, __prim__int___box__(0))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 392 | p1_1@118@01 | live]
; [else-branch: 392 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 392 | p1_1@118@01]
; [eval] int___eq__(self.Example_f, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01)))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01)))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p1_1@118@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01)))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p1_1@118@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01)))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_fp, __prim__int___box__(0))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 393 | p2_1@119@01 | live]
; [else-branch: 393 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 393 | p2_1@119@01]
; [eval] int___eq__(self_3.Example_fp, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01))))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p2_1@119@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01))))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p2_1@119@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01))))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_g, __prim__int___box__(1))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 394 | p1_1@118@01 | live]
; [else-branch: 394 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 394 | p1_1@118@01]
; [eval] int___eq__(self.Example_g, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p1_1@118@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p1_1@118@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_gp, __prim__int___box__(1))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 395 | p2_1@119@01 | live]
; [else-branch: 395 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 395 | p2_1@119@01]
; [eval] int___eq__(self_3.Example_gp, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p2_1@119@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p2_1@119@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> true
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 396 | p1_1@118@01 | live]
; [else-branch: 396 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 396 | p1_1@118@01]
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> true
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 397 | p2_1@119@01 | live]
; [else-branch: 397 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 397 | p2_1@119@01]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] p1_1 && !ret1_0
(set-option :timeout 0)
(push) ; 20
; [then-branch: 398 | !(p1_1@118@01) | live]
; [else-branch: 398 | p1_1@118@01 | live]
(push) ; 21
; [then-branch: 398 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 21
(push) ; 21
; [else-branch: 398 | p1_1@118@01]
; [eval] !ret1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 399 | p1_1@118@01 | live]
; [else-branch: 399 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 399 | p1_1@118@01]
; [exec]
; _cwl_159 := tmp1_13
; [eval] p2_1 && !ret2_0
(push) ; 21
; [then-branch: 400 | !(p2_1@119@01) | live]
; [else-branch: 400 | p2_1@119@01 | live]
(push) ; 22
; [then-branch: 400 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 22
(push) ; 22
; [else-branch: 400 | p2_1@119@01]
; [eval] !ret2_0
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 401 | p2_1@119@01 | live]
; [else-branch: 401 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 401 | p2_1@119@01]
; [exec]
; _cwl_159_0 := tmp2_13
; [eval] p1_1 && !ret1_0
(push) ; 22
; [then-branch: 402 | !(p1_1@118@01) | live]
; [else-branch: 402 | p1_1@118@01 | live]
(push) ; 23
; [then-branch: 402 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 23
(push) ; 23
; [else-branch: 402 | p1_1@118@01]
; [eval] !ret1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 403 | p1_1@118@01 | live]
; [else-branch: 403 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 403 | p1_1@118@01]
; [exec]
; a_0 := Example_res_1
; [exec]
; inhale _isDefined(3170145)
(declare-const $t@179@01 $Snap)
(assert (= $t@179@01 $Snap.unit))
; [eval] _isDefined(3170145)
(push) ; 23
(assert (_isDefined%precondition $Snap.unit 3170145))
(pop) ; 23
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3170145))
(assert (_isDefined $Snap.unit 3170145))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_1 && !ret2_0
(set-option :timeout 0)
(push) ; 23
; [then-branch: 404 | !(p2_1@119@01) | live]
; [else-branch: 404 | p2_1@119@01 | live]
(push) ; 24
; [then-branch: 404 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 24
(push) ; 24
; [else-branch: 404 | p2_1@119@01]
; [eval] !ret2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 405 | p2_1@119@01 | live]
; [else-branch: 405 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 405 | p2_1@119@01]
; [exec]
; a_0_0 := Example_res_1_0
; [exec]
; inhale true
(declare-const $t@180@01 $Snap)
(assert (= $t@180@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; tmp_2 := new()
(declare-const tmp_2@181@01 $Ref)
(assert (not (= tmp_2@181@01 $Ref.null)))
(assert (not
  (=
    tmp_2@181@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))))
(assert (not
  (=
    tmp_2@181@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))
(assert (not
  (=
    tmp_2@181@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))
(assert (not
  (=
    tmp_2@181@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01)))))))
(assert (not (= tmp_2@181@01 Example_res_2_0@147@01)))
(assert (not (= tmp_2@181@01 tmp_1@159@01)))
(assert (not (= tmp_2@181@01 Example_res_2@146@01)))
(assert (not (= tmp_2@181@01 _cthread_159_0@121@01)))
(assert (not (= tmp_2@181@01 b_0@140@01)))
(assert (not (= tmp_2@181@01 secret_0@126@01)))
(assert (not (= tmp_2@181@01 tmp_2@153@01)))
(assert (not (= tmp_2@181@01 b_0_0@141@01)))
(assert (not (= tmp_2@181@01 secret_0_0@127@01)))
(assert (not (= tmp_2@181@01 _cthread_159@120@01)))
; [eval] p1_1 && !ret1_0
(set-option :timeout 0)
(push) ; 24
; [then-branch: 406 | !(p1_1@118@01) | live]
; [else-branch: 406 | p1_1@118@01 | live]
(push) ; 25
; [then-branch: 406 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 25
(push) ; 25
; [else-branch: 406 | p1_1@118@01]
; [eval] !ret1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 407 | p1_1@118@01 | live]
; [else-branch: 407 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 407 | p1_1@118@01]
; [exec]
; Example_res_2 := tmp_2
; [eval] p2_1 && !ret2_0
(push) ; 25
; [then-branch: 408 | !(p2_1@119@01) | live]
; [else-branch: 408 | p2_1@119@01 | live]
(push) ; 26
; [then-branch: 408 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 26
(push) ; 26
; [else-branch: 408 | p2_1@119@01]
; [eval] !ret2_0
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 409 | p2_1@119@01 | live]
; [else-branch: 409 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 409 | p2_1@119@01]
; [exec]
; Example_res_2_0 := tmp_2
; [eval] p1_1 && !ret1_0
(push) ; 26
; [then-branch: 410 | !(p1_1@118@01) | live]
; [else-branch: 410 | p1_1@118@01 | live]
(push) ; 27
; [then-branch: 410 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 27
(push) ; 27
; [else-branch: 410 | p1_1@118@01]
; [eval] !ret1_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 411 | p1_1@118@01 | live]
; [else-branch: 411 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 411 | p1_1@118@01]
; [exec]
; inhale typeof(Example_res_2) == Example()
(declare-const $t@182@01 $Snap)
(assert (= $t@182@01 $Snap.unit))
; [eval] typeof(Example_res_2) == Example()
; [eval] typeof(Example_res_2)
; [eval] Example()
(assert (= (typeof<PyType> tmp_2@181@01) (as Example<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_2, 1888441915154752436293), write)
(declare-const $t@183@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_2, 1906888659228461987909), write)
(declare-const $t@184@01 $Snap)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_1 && !ret2_0
(set-option :timeout 0)
(push) ; 27
; [then-branch: 412 | !(p2_1@119@01) | live]
; [else-branch: 412 | p2_1@119@01 | live]
(push) ; 28
; [then-branch: 412 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 28
(push) ; 28
; [else-branch: 412 | p2_1@119@01]
; [eval] !ret2_0
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(push) ; 27
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 413 | p2_1@119@01 | live]
; [else-branch: 413 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 413 | p2_1@119@01]
; [exec]
; inhale typeof(Example_res_2_0) == Example()
(declare-const $t@185@01 $Snap)
(assert (= $t@185@01 $Snap.unit))
; [eval] typeof(Example_res_2_0) == Example()
; [eval] typeof(Example_res_2_0)
; [eval] Example()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(Example_res_2_0, 1888441915154752436293), write)
(declare-const $t@186@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(Example_res_2_0, 1906888659228461987909), write)
(declare-const $t@187@01 $Snap)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_1 && !ret1_0 || p2_1 && !ret2_0
; [eval] p1_1 && !ret1_0
(set-option :timeout 0)
(push) ; 28
; [then-branch: 414 | !(p1_1@118@01) | live]
; [else-branch: 414 | p1_1@118@01 | live]
(push) ; 29
; [then-branch: 414 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 29
(push) ; 29
; [else-branch: 414 | p1_1@118@01]
; [eval] !ret1_0
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
; [then-branch: 415 | p1_1@118@01 | live]
; [else-branch: 415 | !(p1_1@118@01) | live]
(push) ; 29
; [then-branch: 415 | p1_1@118@01]
(pop) ; 29
(push) ; 29
; [else-branch: 415 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
; [eval] p2_1 && !ret2_0
(push) ; 30
; [then-branch: 416 | !(p2_1@119@01) | live]
; [else-branch: 416 | p2_1@119@01 | live]
(push) ; 31
; [then-branch: 416 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 31
(push) ; 31
; [else-branch: 416 | p2_1@119@01]
; [eval] !ret2_0
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (not (or p1_1@118@01 p2_1@119@01))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 417 | p1_1@118@01 || p2_1@119@01 | live]
; [else-branch: 417 | !(p1_1@118@01 || p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 417 | p1_1@118@01 || p2_1@119@01]
; [exec]
; var tmp1_14: Ref
(declare-const tmp1_14@188@01 $Ref)
; [exec]
; var tmp2_14: Ref
(declare-const tmp2_14@189@01 $Ref)
; [exec]
; var tmp1_15: Seq[Measure$]
(declare-const tmp1_15@190@01 Seq<Measure$>)
; [exec]
; var tmp2_15: Seq[Measure$]
(declare-const tmp2_15@191@01 Seq<Measure$>)
; [exec]
; var tmp1_16: Perm
(declare-const tmp1_16@192@01 $Perm)
; [exec]
; var tmp2_16: Perm
(declare-const tmp2_16@193@01 $Perm)
; [exec]
; var tmp1_17: Ref
(declare-const tmp1_17@194@01 $Ref)
; [exec]
; var tmp2_17: Ref
(declare-const tmp2_17@195@01 $Ref)
; [exec]
; var tmp1_18: Perm
(declare-const tmp1_18@196@01 $Perm)
; [exec]
; var tmp2_18: Perm
(declare-const tmp2_18@197@01 $Perm)
; [eval] p1_1 && !ret1_0
(push) ; 29
; [then-branch: 418 | !(p1_1@118@01) | live]
; [else-branch: 418 | p1_1@118@01 | live]
(push) ; 30
; [then-branch: 418 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 30
(push) ; 30
; [else-branch: 418 | p1_1@118@01]
; [eval] !ret1_0
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 419 | p1_1@118@01 | live]
; [else-branch: 419 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 419 | p1_1@118@01]
; [exec]
; tmp1_14 := _cthread_159
; [exec]
; tmp1_15 := _method_measures_159
; [exec]
; tmp1_16 := _residue_159
; [exec]
; tmp1_17 := Example_res_2
; [eval] p2_1 && !ret2_0
(push) ; 30
; [then-branch: 420 | !(p2_1@119@01) | live]
; [else-branch: 420 | p2_1@119@01 | live]
(push) ; 31
; [then-branch: 420 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 31
(push) ; 31
; [else-branch: 420 | p2_1@119@01]
; [eval] !ret2_0
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 421 | p2_1@119@01 | live]
; [else-branch: 421 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 421 | p2_1@119@01]
; [exec]
; tmp2_14 := _cthread_159_0
; [exec]
; tmp2_15 := _method_measures_159_0
; [exec]
; tmp2_16 := _residue_159_0
; [exec]
; tmp2_17 := Example_res_2_0
; [exec]
; tmp1_18, tmp2_18 := Example___init__(p1_1 && !ret1_0, p2_1 && !ret2_0, tmp1_14,
;   tmp2_14, tmp1_15, tmp2_15, tmp1_16, tmp2_16, tmp1_17, tmp2_17)
; [eval] p1_1 && !ret1_0
(push) ; 31
; [then-branch: 422 | !(p1_1@118@01) | live]
; [else-branch: 422 | p1_1@118@01 | live]
(push) ; 32
; [then-branch: 422 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 32
(push) ; 32
; [else-branch: 422 | p1_1@118@01]
; [eval] !ret1_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [eval] p2_1 && !ret2_0
(push) ; 31
; [then-branch: 423 | !(p2_1@119@01) | live]
; [else-branch: 423 | p2_1@119@01 | live]
(push) ; 32
; [then-branch: 423 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 32
(push) ; 32
; [else-branch: 423 | p2_1@119@01]
; [eval] !ret2_0
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [eval] p1_23 ==> _cthread_156 != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 424 | p1_1@118@01 | live]
; [else-branch: 424 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 424 | p1_1@118@01]
; [eval] _cthread_156 != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_23 ==> _cthread_156_0 != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 425 | p2_1@119@01 | live]
; [else-branch: 425 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 425 | p2_1@119@01]
; [eval] _cthread_156_0 != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p1_23 ==> issubtype(typeof(_cthread_156), Thread_0())
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 426 | p1_1@118@01 | live]
; [else-branch: 426 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 426 | p1_1@118@01]
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_23 ==> issubtype(typeof(_cthread_156_0), Thread_0())
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 427 | p2_1@119@01 | live]
; [else-branch: 427 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 427 | p2_1@119@01]
; [eval] issubtype(typeof(_cthread_156_0), Thread_0())
; [eval] typeof(_cthread_156_0)
; [eval] Thread_0()
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p1_23 ==> self != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 428 | p1_1@118@01 | live]
; [else-branch: 428 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 428 | p1_1@118@01]
; [eval] self != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(assert (not (=> p1_1@118@01 (not (= tmp_2@181@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(assert (=> p1_1@118@01 (not (= tmp_2@181@01 $Ref.null))))
; [eval] p2_23 ==> self_3 != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 429 | p2_1@119@01 | live]
; [else-branch: 429 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 429 | p2_1@119@01]
; [eval] self_3 != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(assert (not (=> p2_1@119@01 (not (= tmp_2@181@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(assert (=> p2_1@119@01 (not (= tmp_2@181@01 $Ref.null))))
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 430 | p1_1@118@01 | live]
; [else-branch: 430 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 430 | p1_1@118@01]
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 431 | p2_1@119@01 | live]
; [else-branch: 431 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 431 | p2_1@119@01]
(push) ; 33
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 432 | p1_1@118@01 | live]
; [else-branch: 432 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 432 | p1_1@118@01]
(push) ; 34
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 433 | p2_1@119@01 | live]
; [else-branch: 433 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 433 | p2_1@119@01]
; [eval] p1_23 ==> issubtype(typeof(self), Example())
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 434 | p1_1@118@01 | live]
; [else-branch: 434 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 434 | p1_1@118@01]
; [eval] issubtype(typeof(self), Example())
; [eval] typeof(self)
; [eval] Example()
(pop) ; 36
(pop) ; 35
; Joined path conditions
(push) ; 35
(assert (not (=>
  p1_1@118@01
  (issubtype<Bool> (typeof<PyType> tmp_2@181@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_1@118@01
  (issubtype<Bool> (typeof<PyType> tmp_2@181@01) (as Example<PyType>  PyType))))
; [eval] p2_23 ==> issubtype(typeof(self_3), Example())
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 435 | p2_1@119@01 | live]
; [else-branch: 435 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 435 | p2_1@119@01]
; [eval] issubtype(typeof(self_3), Example())
; [eval] typeof(self_3)
; [eval] Example()
(pop) ; 36
(pop) ; 35
; Joined path conditions
(push) ; 35
(assert (not (=>
  p2_1@119@01
  (issubtype<Bool> (typeof<PyType> tmp_2@181@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_1@119@01
  (issubtype<Bool> (typeof<PyType> tmp_2@181@01) (as Example<PyType>  PyType))))
; [eval] p1_23 ==> self != null
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 436 | p1_1@118@01 | live]
; [else-branch: 436 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 436 | p1_1@118@01]
; [eval] self != null
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p2_23 ==> self_3 != null
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 437 | p2_1@119@01 | live]
; [else-branch: 437 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 437 | p2_1@119@01]
; [eval] self_3 != null
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p1_23 ==> perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 438 | p1_1@118@01 | live]
; [else-branch: 438 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 438 | p1_1@118@01]
; [eval] perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(push) ; 37
; [then-branch: 439 | False | live]
; [else-branch: 439 | True | live]
(push) ; 38
; [then-branch: 439 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 439 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false)
(push) ; 39
; [then-branch: 440 | False | live]
; [else-branch: 440 | True | live]
(push) ; 40
; [then-branch: 440 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 440 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false)
(push) ; 41
; [then-branch: 441 | False | live]
; [else-branch: 441 | True | live]
(push) ; 42
; [then-branch: 441 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 441 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false)
(push) ; 43
; [then-branch: 442 | False | live]
; [else-branch: 442 | True | live]
(push) ; 44
; [then-branch: 442 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 442 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p2_23 ==> perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 443 | p2_1@119@01 | live]
; [else-branch: 443 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 443 | p2_1@119@01]
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none
; [eval] perm(MustTerminate_0(_cthread_156_0))
(push) ; 37
; [then-branch: 444 | False | live]
; [else-branch: 444 | True | live]
(push) ; 38
; [then-branch: 444 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 444 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false)
(push) ; 39
; [then-branch: 445 | False | live]
; [else-branch: 445 | True | live]
(push) ; 40
; [then-branch: 445 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 445 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false)
(push) ; 41
; [then-branch: 446 | False | live]
; [else-branch: 446 | True | live]
(push) ; 42
; [then-branch: 446 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 446 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false)
(push) ; 43
; [then-branch: 447 | False | live]
; [else-branch: 447 | True | live]
(push) ; 44
; [then-branch: 447 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 447 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false)
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
(declare-const _current_wait_level_156@198@01 $Perm)
(declare-const _current_wait_level_156_0@199@01 $Perm)
(declare-const $t@200@01 $Snap)
(assert (= $t@200@01 ($Snap.combine ($Snap.first $t@200@01) ($Snap.second $t@200@01))))
(assert (= ($Snap.first $t@200@01) $Snap.unit))
; [eval] p1_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 448 | p1_1@118@01 | live]
; [else-branch: 448 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 448 | p1_1@118@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 37
; [then-branch: 449 | False | live]
; [else-branch: 449 | True | live]
(push) ; 38
; [then-branch: 449 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 449 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 39
; [then-branch: 450 | False | live]
; [else-branch: 450 | True | live]
(push) ; 40
; [then-branch: 450 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 450 | True]
; [eval] _residue_156 <= _current_wait_level_156
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
(assert (=> p1_1@118@01 (<= _residue_159@124@01 _current_wait_level_156@198@01)))
(assert (=
  ($Snap.second $t@200@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@200@01))
    ($Snap.second ($Snap.second $t@200@01)))))
(assert (= ($Snap.first ($Snap.second $t@200@01)) $Snap.unit))
; [eval] p2_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 451 | p2_1@119@01 | live]
; [else-branch: 451 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 451 | p2_1@119@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 37
; [then-branch: 452 | False | live]
; [else-branch: 452 | True | live]
(push) ; 38
; [then-branch: 452 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 452 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 39
; [then-branch: 453 | False | live]
; [else-branch: 453 | True | live]
(push) ; 40
; [then-branch: 453 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 453 | True]
; [eval] _residue_156_0 <= _current_wait_level_156_0
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
(assert (=> p2_1@119@01 (<= _residue_159_0@125@01 _current_wait_level_156_0@199@01)))
(assert (=
  ($Snap.second ($Snap.second $t@200@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@200@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 454 | p1_1@118@01 | live]
; [else-branch: 454 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 454 | p1_1@118@01]
(push) ; 36
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@200@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 455 | p2_1@119@01 | live]
; [else-branch: 455 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 455 | p2_1@119@01]
(push) ; 37
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_f), int())
(set-option :timeout 0)
(push) ; 37
(push) ; 38
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 456 | p1_1@118@01 | live]
; [else-branch: 456 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 456 | p1_1@118@01]
; [eval] issubtype(typeof(self.Example_f), int())
; [eval] typeof(self.Example_f)
; [eval] int()
(pop) ; 38
(pop) ; 37
; Joined path conditions
(assert (=>
  p1_1@118@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_fp), int())
(push) ; 37
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 457 | p2_1@119@01 | live]
; [else-branch: 457 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 457 | p2_1@119@01]
; [eval] issubtype(typeof(self_3.Example_fp), int())
; [eval] typeof(self_3.Example_fp)
; [eval] int()
(pop) ; 38
(pop) ; 37
; Joined path conditions
(assert (=>
  p2_1@119@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 458 | p1_1@118@01 | live]
; [else-branch: 458 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 458 | p1_1@118@01]
(push) ; 38
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))
(set-option :timeout 0)
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 459 | p2_1@119@01 | live]
; [else-branch: 459 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 459 | p2_1@119@01]
(push) ; 39
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_g), int())
(set-option :timeout 0)
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 460 | p1_1@118@01 | live]
; [else-branch: 460 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 460 | p1_1@118@01]
; [eval] issubtype(typeof(self.Example_g), int())
; [eval] typeof(self.Example_g)
; [eval] int()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p1_1@118@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_gp), int())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 461 | p2_1@119@01 | live]
; [else-branch: 461 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 461 | p2_1@119@01]
; [eval] issubtype(typeof(self_3.Example_gp), int())
; [eval] typeof(self_3.Example_gp)
; [eval] int()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p2_1@119@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_f, __prim__int___box__(0))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 462 | p1_1@118@01 | live]
; [else-branch: 462 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 462 | p1_1@118@01]
; [eval] int___eq__(self.Example_f, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01)))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01)))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p1_1@118@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01)))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p1_1@118@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01)))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_fp, __prim__int___box__(0))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 463 | p2_1@119@01 | live]
; [else-branch: 463 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 463 | p2_1@119@01]
; [eval] int___eq__(self_3.Example_fp, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01))))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p2_1@119@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01))))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p2_1@119@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01))))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_g, __prim__int___box__(1))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 464 | p1_1@118@01 | live]
; [else-branch: 464 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 464 | p1_1@118@01]
; [eval] int___eq__(self.Example_g, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p1_1@118@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p1_1@118@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_gp, __prim__int___box__(1))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 465 | p2_1@119@01 | live]
; [else-branch: 465 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 465 | p2_1@119@01]
; [eval] int___eq__(self_3.Example_gp, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p2_1@119@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p2_1@119@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 466 | p1_1@118@01 | live]
; [else-branch: 466 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 466 | p1_1@118@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 467 | p2_1@119@01 | live]
; [else-branch: 467 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 467 | p2_1@119@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] p1_1 && !ret1_0
(set-option :timeout 0)
(push) ; 39
; [then-branch: 468 | !(p1_1@118@01) | live]
; [else-branch: 468 | p1_1@118@01 | live]
(push) ; 40
; [then-branch: 468 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 40
(push) ; 40
; [else-branch: 468 | p1_1@118@01]
; [eval] !ret1_0
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(push) ; 39
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 469 | p1_1@118@01 | live]
; [else-branch: 469 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 469 | p1_1@118@01]
; [exec]
; _cwl_159 := tmp1_18
; [eval] p2_1 && !ret2_0
(push) ; 40
; [then-branch: 470 | !(p2_1@119@01) | live]
; [else-branch: 470 | p2_1@119@01 | live]
(push) ; 41
; [then-branch: 470 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 41
(push) ; 41
; [else-branch: 470 | p2_1@119@01]
; [eval] !ret2_0
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 471 | p2_1@119@01 | live]
; [else-branch: 471 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 471 | p2_1@119@01]
; [exec]
; _cwl_159_0 := tmp2_18
; [eval] p1_1 && !ret1_0
(push) ; 41
; [then-branch: 472 | !(p1_1@118@01) | live]
; [else-branch: 472 | p1_1@118@01 | live]
(push) ; 42
; [then-branch: 472 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 42
(push) ; 42
; [else-branch: 472 | p1_1@118@01]
; [eval] !ret1_0
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 473 | p1_1@118@01 | live]
; [else-branch: 473 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 473 | p1_1@118@01]
; [exec]
; b_0 := Example_res_2
; [exec]
; inhale _isDefined(3170146)
(declare-const $t@201@01 $Snap)
(assert (= $t@201@01 $Snap.unit))
; [eval] _isDefined(3170146)
(push) ; 42
(assert (_isDefined%precondition $Snap.unit 3170146))
(pop) ; 42
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3170146))
(assert (_isDefined $Snap.unit 3170146))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_1 && !ret2_0
(set-option :timeout 0)
(push) ; 42
; [then-branch: 474 | !(p2_1@119@01) | live]
; [else-branch: 474 | p2_1@119@01 | live]
(push) ; 43
; [then-branch: 474 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 43
(push) ; 43
; [else-branch: 474 | p2_1@119@01]
; [eval] !ret2_0
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 475 | p2_1@119@01 | live]
; [else-branch: 475 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 475 | p2_1@119@01]
; [exec]
; b_0_0 := Example_res_2_0
; [exec]
; inhale true
(declare-const $t@202@01 $Snap)
(assert (= $t@202@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; p1_2 := p1_1 && (!ret1_0 && bool___unbox__(secret_12))
; [eval] p1_1 && (!ret1_0 && bool___unbox__(secret_12))
(set-option :timeout 0)
(push) ; 43
; [then-branch: 476 | !(p1_1@118@01) | live]
; [else-branch: 476 | p1_1@118@01 | live]
(push) ; 44
; [then-branch: 476 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 44
(push) ; 44
; [else-branch: 476 | p1_1@118@01]
; [eval] !ret1_0
(push) ; 45
; [then-branch: 477 | False | live]
; [else-branch: 477 | True | live]
(push) ; 46
; [then-branch: 477 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 477 | True]
; [eval] bool___unbox__(secret_12)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_0@126@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_0@126@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_0@126@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_0@126@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_0@126@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_0@126@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_0@126@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_1@118@01
  (and
    (issubtype<Bool> (typeof<PyType> secret_0@126@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_0@126@01))))
(declare-const p1_2@203@01 Bool)
(assert (= p1_2@203@01 (and p1_1@118@01 (bool___unbox__ $Snap.unit secret_0@126@01))))
; [exec]
; p2_2 := p2_1 && (!ret2_0 && bool___unbox__(secret_12_0))
; [eval] p2_1 && (!ret2_0 && bool___unbox__(secret_12_0))
(push) ; 43
; [then-branch: 478 | !(p2_1@119@01) | live]
; [else-branch: 478 | p2_1@119@01 | live]
(push) ; 44
; [then-branch: 478 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 44
(push) ; 44
; [else-branch: 478 | p2_1@119@01]
; [eval] !ret2_0
(push) ; 45
; [then-branch: 479 | False | live]
; [else-branch: 479 | True | live]
(push) ; 46
; [then-branch: 479 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 479 | True]
; [eval] bool___unbox__(secret_12_0)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_0_0@127@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_0_0@127@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_0_0@127@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_0_0@127@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_0_0@127@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_0_0@127@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_0_0@127@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_1@119@01
  (and
    (issubtype<Bool> (typeof<PyType> secret_0_0@127@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_0_0@127@01))))
(declare-const p2_2@204@01 Bool)
(assert (= p2_2@204@01 (and p2_1@119@01 (bool___unbox__ $Snap.unit secret_0_0@127@01))))
; [exec]
; p3_0 := p1_1 && (!ret1_0 && !bool___unbox__(secret_12))
; [eval] p1_1 && (!ret1_0 && !bool___unbox__(secret_12))
(push) ; 43
; [then-branch: 480 | !(p1_1@118@01) | live]
; [else-branch: 480 | p1_1@118@01 | live]
(push) ; 44
; [then-branch: 480 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 44
(push) ; 44
; [else-branch: 480 | p1_1@118@01]
; [eval] !ret1_0
(push) ; 45
; [then-branch: 481 | False | live]
; [else-branch: 481 | True | live]
(push) ; 46
; [then-branch: 481 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 481 | True]
; [eval] !bool___unbox__(secret_12)
; [eval] bool___unbox__(secret_12)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_0@126@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_0@126@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_0@126@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_0@126@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_0@126@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_0@126@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_0@126@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(declare-const p3_0@205@01 Bool)
(assert (=
  p3_0@205@01
  (and p1_1@118@01 (not (bool___unbox__ $Snap.unit secret_0@126@01)))))
; [exec]
; p4_0 := p2_1 && (!ret2_0 && !bool___unbox__(secret_12_0))
; [eval] p2_1 && (!ret2_0 && !bool___unbox__(secret_12_0))
(push) ; 43
; [then-branch: 482 | !(p2_1@119@01) | live]
; [else-branch: 482 | p2_1@119@01 | live]
(push) ; 44
; [then-branch: 482 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 44
(push) ; 44
; [else-branch: 482 | p2_1@119@01]
; [eval] !ret2_0
(push) ; 45
; [then-branch: 483 | False | live]
; [else-branch: 483 | True | live]
(push) ; 46
; [then-branch: 483 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 483 | True]
; [eval] !bool___unbox__(secret_12_0)
; [eval] bool___unbox__(secret_12_0)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_0_0@127@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_0_0@127@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_0_0@127@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_0_0@127@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_0_0@127@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_0_0@127@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_0_0@127@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(declare-const p4_0@206@01 Bool)
(assert (=
  p4_0@206@01
  (and p2_1@119@01 (not (bool___unbox__ $Snap.unit secret_0_0@127@01)))))
; [eval] p1_2 && !ret1_0
(push) ; 43
; [then-branch: 484 | !(p1_2@203@01) | live]
; [else-branch: 484 | p1_2@203@01 | live]
(push) ; 44
; [then-branch: 484 | !(p1_2@203@01)]
(assert (not p1_2@203@01))
(pop) ; 44
(push) ; 44
; [else-branch: 484 | p1_2@203@01]
(assert p1_2@203@01)
; [eval] !ret1_0
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(assert (or p1_2@203@01 (not p1_2@203@01)))
(push) ; 43
(set-option :timeout 10)
(assert (not (not p1_2@203@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not p1_2@203@01))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 485 | p1_2@203@01 | live]
; [else-branch: 485 | !(p1_2@203@01) | live]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 485 | p1_2@203@01]
(assert p1_2@203@01)
; [exec]
; _res := _checkDefined(a_0, 3170145)
; [eval] _checkDefined(a_0, 3170145)
(push) ; 44
; [eval] _isDefined(id)
(push) ; 45
(pop) ; 45
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_1@159@01 3170145))
(pop) ; 44
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_1@159@01 3170145))
(declare-const _res@207@01 $Ref)
(assert (= _res@207@01 (_checkDefined $Snap.unit tmp_1@159@01 3170145)))
; [exec]
; ret1_0 := true
; [eval] p2_2 && !ret2_0
(push) ; 44
; [then-branch: 486 | !(p2_2@204@01) | live]
; [else-branch: 486 | p2_2@204@01 | live]
(push) ; 45
; [then-branch: 486 | !(p2_2@204@01)]
(assert (not p2_2@204@01))
(pop) ; 45
(push) ; 45
; [else-branch: 486 | p2_2@204@01]
(assert p2_2@204@01)
; [eval] !ret2_0
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(assert (or p2_2@204@01 (not p2_2@204@01)))
(push) ; 44
(set-option :timeout 10)
(assert (not (not p2_2@204@01)))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not p2_2@204@01))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 487 | p2_2@204@01 | live]
; [else-branch: 487 | !(p2_2@204@01) | live]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 487 | p2_2@204@01]
(assert p2_2@204@01)
; [exec]
; _res_1 := a_0_0
; [exec]
; ret2_0 := true
; [eval] p1_1 && !ret1_0
(push) ; 45
; [then-branch: 488 | !(p1_1@118@01) | live]
; [else-branch: 488 | p1_1@118@01 | live]
(push) ; 46
; [then-branch: 488 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 46
(push) ; 46
; [else-branch: 488 | p1_1@118@01]
; [eval] !ret1_0
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
; [then-branch: 489 | False | dead]
; [else-branch: 489 | True | live]
(push) ; 45
; [else-branch: 489 | True]
(pop) ; 45
; [eval] !(p1_1 && !ret1_0)
; [eval] p1_1 && !ret1_0
(push) ; 45
; [then-branch: 490 | !(p1_1@118@01) | live]
; [else-branch: 490 | p1_1@118@01 | live]
(push) ; 46
; [then-branch: 490 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 46
(push) ; 46
; [else-branch: 490 | p1_1@118@01]
; [eval] !ret1_0
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(push) ; 45
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 491 | True | live]
; [else-branch: 491 | False | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 491 | True]
; [eval] p2_1 && !ret2_0
(push) ; 46
; [then-branch: 492 | !(p2_1@119@01) | live]
; [else-branch: 492 | p2_1@119@01 | live]
(push) ; 47
; [then-branch: 492 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 47
(push) ; 47
; [else-branch: 492 | p2_1@119@01]
; [eval] !ret2_0
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
; [then-branch: 493 | False | dead]
; [else-branch: 493 | True | live]
(push) ; 46
; [else-branch: 493 | True]
(pop) ; 46
; [eval] !(p2_1 && !ret2_0)
; [eval] p2_1 && !ret2_0
(push) ; 46
; [then-branch: 494 | !(p2_1@119@01) | live]
; [else-branch: 494 | p2_1@119@01 | live]
(push) ; 47
; [then-branch: 494 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 47
(push) ; 47
; [else-branch: 494 | p2_1@119@01]
; [eval] !ret2_0
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(push) ; 46
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 495 | True | live]
; [else-branch: 495 | False | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 495 | True]
; [exec]
; assert true
; [eval] p1_1 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 496 | p1_1@118@01 | live]
; [else-branch: 496 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 496 | p1_1@118@01]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p2_1 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 497 | p2_1@119@01 | live]
; [else-branch: 497 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 497 | p2_1@119@01]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p1_1 ==> issubtype(typeof(_res), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 498 | p1_1@118@01 | live]
; [else-branch: 498 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 498 | p1_1@118@01]
; [eval] issubtype(typeof(_res), Example())
; [eval] typeof(_res)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p1_1@118@01
  (issubtype<Bool> (typeof<PyType> _res@207@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_1@118@01
  (issubtype<Bool> (typeof<PyType> _res@207@01) (as Example<PyType>  PyType))))
; [eval] p2_1 ==> issubtype(typeof(_res_1), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 499 | p2_1@119@01 | live]
; [else-branch: 499 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 499 | p2_1@119@01]
; [eval] issubtype(typeof(_res_1), Example())
; [eval] typeof(_res_1)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
; [then-branch: 500 | p1_1@118@01 | live]
; [else-branch: 500 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 47
; [then-branch: 500 | p1_1@118@01]
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 _res@207@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 _res@207@01)))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 501 | p2_1@119@01 | live]
; [else-branch: 501 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 501 | p2_1@119@01]
; [eval] p1_1 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 502 | p1_1@118@01 | live]
; [else-branch: 502 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 502 | p1_1@118@01]
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 _res@207@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 _res@207@01)))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
; [eval] p2_1 ==> issubtype(typeof(_res_1.Example_fp), int())
(set-option :timeout 0)
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 503 | p2_1@119@01 | live]
; [else-branch: 503 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 503 | p2_1@119@01]
; [eval] issubtype(typeof(_res_1.Example_fp), int())
; [eval] typeof(_res_1.Example_fp)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
(push) ; 49
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 504 | p1_1@118@01 | live]
; [else-branch: 504 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 504 | p1_1@118@01]
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 _res@207@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 _res@207@01)))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 505 | p2_1@119@01 | live]
; [else-branch: 505 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 505 | p2_1@119@01]
; [eval] p1_1 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 506 | p1_1@118@01 | live]
; [else-branch: 506 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 506 | p1_1@118@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 _res@207@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 _res@207@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p2_1 ==> issubtype(typeof(_res_1.Example_gp), int())
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 507 | p2_1@119@01 | live]
; [else-branch: 507 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 507 | p2_1@119@01]
; [eval] issubtype(typeof(_res_1.Example_gp), int())
; [eval] typeof(_res_1.Example_gp)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p1_1 && p2_1 ==> _res == _res_1
; [eval] p1_1 && p2_1
(push) ; 51
; [then-branch: 508 | !(p1_1@118@01) | live]
; [else-branch: 508 | p1_1@118@01 | live]
(push) ; 52
; [then-branch: 508 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 52
(push) ; 52
; [else-branch: 508 | p1_1@118@01]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_1@118@01 p2_1@119@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1_1@118@01 p2_1@119@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 509 | p1_1@118@01 && p2_1@119@01 | live]
; [else-branch: 509 | !(p1_1@118@01 && p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 509 | p1_1@118@01 && p2_1@119@01]
(assert (and p1_1@118@01 p2_1@119@01))
; [eval] _res == _res_1
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (and p1_1@118@01 p2_1@119@01))
(push) ; 51
(assert (not (=> (and p1_1@118@01 p2_1@119@01) (= _res@207@01 tmp_1@159@01))))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(assert (=> (and p1_1@118@01 p2_1@119@01) (= _res@207@01 tmp_1@159@01)))
; [eval] p1_1 ==> (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 510 | p1_1@118@01 | live]
; [else-branch: 510 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 510 | p1_1@118@01]
; [eval] (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false)
(push) ; 53
; [then-branch: 511 | False | live]
; [else-branch: 511 | True | live]
(push) ; 54
; [then-branch: 511 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 511 | True]
; [eval] (forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false)
(push) ; 55
; [then-branch: 512 | False | live]
; [else-branch: 512 | True | live]
(push) ; 56
; [then-branch: 512 | False]
(assert false)
(pop) ; 56
(push) ; 56
; [else-branch: 512 | True]
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false)
(push) ; 57
; [then-branch: 513 | False | live]
; [else-branch: 513 | True | live]
(push) ; 58
; [then-branch: 513 | False]
(assert false)
(pop) ; 58
(push) ; 58
; [else-branch: 513 | True]
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)
(pop) ; 58
(pop) ; 57
; Joined path conditions
; Joined path conditions
(pop) ; 56
(pop) ; 55
; Joined path conditions
; Joined path conditions
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p2_1 ==> (forperm _r_3: Ref [MustInvokeBounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBoundedp] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnboundedp] :: false)))
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 514 | p2_1@119@01 | live]
; [else-branch: 514 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 514 | p2_1@119@01]
; [eval] (forperm _r_3: Ref [MustInvokeBounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBoundedp] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_3: Ref [MustInvokeBounded_0(_r_3)] :: false)
(push) ; 53
; [then-branch: 515 | False | live]
; [else-branch: 515 | True | live]
(push) ; 54
; [then-branch: 515 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 515 | True]
; [eval] (forperm _r_3: Ref [MustInvokeUnbounded_0(_r_3)] :: false)
(push) ; 55
; [then-branch: 516 | False | live]
; [else-branch: 516 | True | live]
(push) ; 56
; [then-branch: 516 | False]
(assert false)
(pop) ; 56
(push) ; 56
; [else-branch: 516 | True]
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseBoundedp] :: false)
(push) ; 57
; [then-branch: 517 | False | live]
; [else-branch: 517 | True | live]
(push) ; 58
; [then-branch: 517 | False]
(assert false)
(pop) ; 58
(push) ; 58
; [else-branch: 517 | True]
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseUnboundedp] :: false)
(pop) ; 58
(pop) ; 57
; Joined path conditions
; Joined path conditions
(pop) ; 56
(pop) ; 55
; Joined path conditions
; Joined path conditions
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
(pop) ; 50
(pop) ; 49
(pop) ; 48
(pop) ; 47
(pop) ; 46
(pop) ; 45
(pop) ; 44
(push) ; 44
; [else-branch: 487 | !(p2_2@204@01)]
(assert (not p2_2@204@01))
(pop) ; 44
; [eval] !(p2_2 && !ret2_0)
; [eval] p2_2 && !ret2_0
(push) ; 44
; [then-branch: 518 | !(p2_2@204@01) | live]
; [else-branch: 518 | p2_2@204@01 | live]
(push) ; 45
; [then-branch: 518 | !(p2_2@204@01)]
(assert (not p2_2@204@01))
(pop) ; 45
(push) ; 45
; [else-branch: 518 | p2_2@204@01]
(assert p2_2@204@01)
; [eval] !ret2_0
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(push) ; 44
(set-option :timeout 10)
(assert (not p2_2@204@01))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (not p2_2@204@01)))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 519 | !(p2_2@204@01) | live]
; [else-branch: 519 | p2_2@204@01 | live]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 519 | !(p2_2@204@01)]
(assert (not p2_2@204@01))
; [eval] p1_1 && !ret1_0
(push) ; 45
; [then-branch: 520 | !(p1_1@118@01) | live]
; [else-branch: 520 | p1_1@118@01 | live]
(push) ; 46
; [then-branch: 520 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 46
(push) ; 46
; [else-branch: 520 | p1_1@118@01]
(assert p1_1@118@01)
; [eval] !ret1_0
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
; [then-branch: 521 | False | dead]
; [else-branch: 521 | True | live]
(push) ; 45
; [else-branch: 521 | True]
(pop) ; 45
; [eval] !(p1_1 && !ret1_0)
; [eval] p1_1 && !ret1_0
(push) ; 45
; [then-branch: 522 | !(p1_1@118@01) | live]
; [else-branch: 522 | p1_1@118@01 | live]
(push) ; 46
; [then-branch: 522 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 46
(push) ; 46
; [else-branch: 522 | p1_1@118@01]
(assert p1_1@118@01)
; [eval] !ret1_0
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(push) ; 45
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 523 | True | live]
; [else-branch: 523 | False | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 523 | True]
; [eval] p2_1 && !ret2_0
(push) ; 46
; [then-branch: 524 | !(p2_1@119@01) | live]
; [else-branch: 524 | p2_1@119@01 | live]
(push) ; 47
; [then-branch: 524 | !(p2_1@119@01)]
(assert (not p2_1@119@01))
(pop) ; 47
(push) ; 47
; [else-branch: 524 | p2_1@119@01]
(assert p2_1@119@01)
; [eval] !ret2_0
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(push) ; 46
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 46
(set-option :timeout 10)
(assert (not p2_1@119@01))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 525 | p2_1@119@01 | live]
; [else-branch: 525 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 525 | p2_1@119@01]
(assert p2_1@119@01)
; [exec]
; _res_1 := b_0_0
; [exec]
; ret2_0 := true
; [exec]
; assert true
; [eval] p1_1 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not p1_1@118@01))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 526 | p1_1@118@01 | live]
; [else-branch: 526 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 526 | p1_1@118@01]
(assert p1_1@118@01)
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert p1_1@118@01)
; [eval] p2_1 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 527 | p2_1@119@01 | live]
; [else-branch: 527 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 527 | p2_1@119@01]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p1_1 ==> issubtype(typeof(_res), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 528 | p1_1@118@01 | live]
; [else-branch: 528 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 528 | p1_1@118@01]
; [eval] issubtype(typeof(_res), Example())
; [eval] typeof(_res)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p1_1@118@01
  (issubtype<Bool> (typeof<PyType> _res@207@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_1@118@01
  (issubtype<Bool> (typeof<PyType> _res@207@01) (as Example<PyType>  PyType))))
; [eval] p2_1 ==> issubtype(typeof(_res_1), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 529 | p2_1@119@01 | live]
; [else-branch: 529 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 529 | p2_1@119@01]
; [eval] issubtype(typeof(_res_1), Example())
; [eval] typeof(_res_1)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
; [then-branch: 530 | p1_1@118@01 | live]
; [else-branch: 530 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 47
; [then-branch: 530 | p1_1@118@01]
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 _res@207@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 _res@207@01)))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 531 | p2_1@119@01 | live]
; [else-branch: 531 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 531 | p2_1@119@01]
; [eval] p1_1 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 532 | p1_1@118@01 | live]
; [else-branch: 532 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 532 | p1_1@118@01]
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 _res@207@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 _res@207@01)))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
; [eval] p2_1 ==> issubtype(typeof(_res_1.Example_fp), int())
(set-option :timeout 0)
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 533 | p2_1@119@01 | live]
; [else-branch: 533 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 533 | p2_1@119@01]
; [eval] issubtype(typeof(_res_1.Example_fp), int())
; [eval] typeof(_res_1.Example_fp)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
(push) ; 49
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 534 | p1_1@118@01 | live]
; [else-branch: 534 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 534 | p1_1@118@01]
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 _res@207@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 _res@207@01)))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 535 | p2_1@119@01 | live]
; [else-branch: 535 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 535 | p2_1@119@01]
; [eval] p1_1 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p1_1@118@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 536 | p1_1@118@01 | live]
; [else-branch: 536 | !(p1_1@118@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 536 | p1_1@118@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 _res@207@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 _res@207@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p2_1 ==> issubtype(typeof(_res_1.Example_gp), int())
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p2_1@119@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 537 | p2_1@119@01 | live]
; [else-branch: 537 | !(p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 537 | p2_1@119@01]
; [eval] issubtype(typeof(_res_1.Example_gp), int())
; [eval] typeof(_res_1.Example_gp)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p1_1 && p2_1 ==> _res == _res_1
; [eval] p1_1 && p2_1
(push) ; 51
; [then-branch: 538 | !(p1_1@118@01) | live]
; [else-branch: 538 | p1_1@118@01 | live]
(push) ; 52
; [then-branch: 538 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
(pop) ; 52
(push) ; 52
; [else-branch: 538 | p1_1@118@01]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_1@118@01 p2_1@119@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1_1@118@01 p2_1@119@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 539 | p1_1@118@01 && p2_1@119@01 | live]
; [else-branch: 539 | !(p1_1@118@01 && p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 539 | p1_1@118@01 && p2_1@119@01]
(assert (and p1_1@118@01 p2_1@119@01))
; [eval] _res == _res_1
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (and p1_1@118@01 p2_1@119@01))
(push) ; 51
(assert (not (=> (and p1_1@118@01 p2_1@119@01) (= _res@207@01 tmp_2@181@01))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 tmp_1@159@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 tmp_1@159@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 tmp_1@159@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 tmp_1@159@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_1@159@01 tmp_2@181@01)) (not (= tmp_2@181@01 tmp_1@159@01))))
; [eval] p1_1 && p2_1 ==> _res == _res_1
; [eval] p1_1 && p2_1
(set-option :timeout 0)
(push) ; 51
; [then-branch: 540 | !(p1_1@118@01) | live]
; [else-branch: 540 | p1_1@118@01 | live]
(push) ; 52
; [then-branch: 540 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))
(assert false)
(pop) ; 52
(set-option :timeout 0)
(push) ; 52
; [else-branch: 540 | p1_1@118@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_2@181@01 tmp_1@159@01)) (not (= tmp_1@159@01 tmp_2@181@01))))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=> (not p1_1@118@01) false))
; Joined path conditions
(assert (=>
  p1_1@118@01
  (and (not (= tmp_2@181@01 tmp_1@159@01)) (not (= tmp_1@159@01 tmp_2@181@01)))))
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_1@118@01 p2_1@119@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1_1@118@01 p2_1@119@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 541 | p1_1@118@01 && p2_1@119@01 | live]
; [else-branch: 541 | !(p1_1@118@01 && p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 541 | p1_1@118@01 && p2_1@119@01]
(assert (and p1_1@118@01 p2_1@119@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_2@181@01 tmp_1@159@01)) (not (= tmp_1@159@01 tmp_2@181@01))))
; [eval] _res == _res_1
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=>
  (and p1_1@118@01 p2_1@119@01)
  (and
    p1_1@118@01
    p2_1@119@01
    (not (= tmp_2@181@01 tmp_1@159@01))
    (not (= tmp_1@159@01 tmp_2@181@01)))))
(assert (and p1_1@118@01 p2_1@119@01))
(set-option :timeout 0)
(push) ; 51
(assert (not (=> (and p1_1@118@01 p2_1@119@01) (= _res@207@01 tmp_2@181@01))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] p1_1 && p2_1 ==> _res == _res_1
; [eval] p1_1 && p2_1
(set-option :timeout 0)
(push) ; 51
; [then-branch: 542 | !(p1_1@118@01) | live]
; [else-branch: 542 | p1_1@118@01 | live]
(push) ; 52
; [then-branch: 542 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 tmp_1@159@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 tmp_1@159@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 tmp_1@159@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 tmp_1@159@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))))
(assert false)
(pop) ; 52
(set-option :timeout 0)
(push) ; 52
; [else-branch: 542 | p1_1@118@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 tmp_1@159@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 tmp_1@159@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 tmp_1@159@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 tmp_1@159@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_1@159@01 tmp_2@181@01)) (not (= tmp_2@181@01 tmp_1@159@01))))
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_1@118@01
  (and (not (= tmp_1@159@01 tmp_2@181@01)) (not (= tmp_2@181@01 tmp_1@159@01)))))
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_1@118@01 p2_1@119@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1_1@118@01 p2_1@119@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 543 | p1_1@118@01 && p2_1@119@01 | live]
; [else-branch: 543 | !(p1_1@118@01 && p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 543 | p1_1@118@01 && p2_1@119@01]
(assert (and p1_1@118@01 p2_1@119@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 tmp_1@159@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 tmp_1@159@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 tmp_1@159@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 tmp_1@159@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_1@159@01 tmp_2@181@01)) (not (= tmp_2@181@01 tmp_1@159@01))))
; [eval] _res == _res_1
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=>
  (and p1_1@118@01 p2_1@119@01)
  (and
    p1_1@118@01
    p2_1@119@01
    (not (= tmp_1@159@01 tmp_2@181@01))
    (not (= tmp_2@181@01 tmp_1@159@01)))))
(assert (and p1_1@118@01 p2_1@119@01))
(set-option :timeout 0)
(push) ; 51
(assert (not (=> (and p1_1@118@01 p2_1@119@01) (= _res@207@01 tmp_2@181@01))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 tmp_1@159@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 tmp_1@159@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 tmp_1@159@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_2@181@01 tmp_1@159@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_1@159@01 tmp_2@181@01)) (not (= tmp_2@181@01 tmp_1@159@01))))
; [eval] p1_1 && p2_1 ==> _res == _res_1
; [eval] p1_1 && p2_1
(set-option :timeout 0)
(push) ; 51
; [then-branch: 544 | !(p1_1@118@01) | live]
; [else-branch: 544 | p1_1@118@01 | live]
(push) ; 52
; [then-branch: 544 | !(p1_1@118@01)]
(assert (not p1_1@118@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))
(assert false)
(pop) ; 52
(set-option :timeout 0)
(push) ; 52
; [else-branch: 544 | p1_1@118@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_2@181@01 tmp_1@159@01)) (not (= tmp_1@159@01 tmp_2@181@01))))
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_1@118@01 p2_1@119@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1_1@118@01 p2_1@119@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 545 | p1_1@118@01 && p2_1@119@01 | live]
; [else-branch: 545 | !(p1_1@118@01 && p2_1@119@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 545 | p1_1@118@01 && p2_1@119@01]
(assert (and p1_1@118@01 p2_1@119@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_1@159@01 tmp_2@181@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@178@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@178@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@200@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_2@181@01 tmp_1@159@01)) (not (= tmp_1@159@01 tmp_2@181@01))))
; [eval] _res == _res_1
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (and p1_1@118@01 p2_1@119@01))
(set-option :timeout 0)
(push) ; 51
(assert (not (=> (and p1_1@118@01 p2_1@119@01) (= _res@207@01 tmp_2@181@01))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(pop) ; 50
(pop) ; 49
(pop) ; 48
(pop) ; 47
(pop) ; 46
(pop) ; 45
(pop) ; 44
(pop) ; 43
(pop) ; 42
(pop) ; 41
(pop) ; 40
(pop) ; 39
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- example_tuple_low ----------
(declare-const p1_3@208@01 Bool)
(declare-const p2_3@209@01 Bool)
(declare-const _cthread_160@210@01 $Ref)
(declare-const _cthread_160_0@211@01 $Ref)
(declare-const _caller_measures_160@212@01 Seq<Measure$>)
(declare-const _caller_measures_160_0@213@01 Seq<Measure$>)
(declare-const _residue_160@214@01 $Perm)
(declare-const _residue_160_0@215@01 $Perm)
(declare-const secret_1@216@01 $Ref)
(declare-const secret_1_0@217@01 $Ref)
(declare-const _current_wait_level_160@218@01 $Perm)
(declare-const _current_wait_level_160_0@219@01 $Perm)
(declare-const _res@220@01 $Ref)
(declare-const _res_2@221@01 $Ref)
(declare-const p1_3@222@01 Bool)
(declare-const p2_3@223@01 Bool)
(declare-const _cthread_160@224@01 $Ref)
(declare-const _cthread_160_0@225@01 $Ref)
(declare-const _caller_measures_160@226@01 Seq<Measure$>)
(declare-const _caller_measures_160_0@227@01 Seq<Measure$>)
(declare-const _residue_160@228@01 $Perm)
(declare-const _residue_160_0@229@01 $Perm)
(declare-const secret_1@230@01 $Ref)
(declare-const secret_1_0@231@01 $Ref)
(declare-const _current_wait_level_160@232@01 $Perm)
(declare-const _current_wait_level_160_0@233@01 $Perm)
(declare-const _res@234@01 $Ref)
(declare-const _res_2@235@01 $Ref)
(push) ; 1
(declare-const $t@236@01 $Snap)
(assert (= $t@236@01 ($Snap.combine ($Snap.first $t@236@01) ($Snap.second $t@236@01))))
(assert (= ($Snap.first $t@236@01) $Snap.unit))
; [eval] p1_3 ==> _cthread_160 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_3@222@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 546 | p1_3@222@01 | live]
; [else-branch: 546 | !(p1_3@222@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 546 | p1_3@222@01]
(assert p1_3@222@01)
; [eval] _cthread_160 != null
(pop) ; 3
(push) ; 3
; [else-branch: 546 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_3@222@01) p1_3@222@01))
(assert (=> p1_3@222@01 (not (= _cthread_160@224@01 $Ref.null))))
(assert (=
  ($Snap.second $t@236@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@236@01))
    ($Snap.second ($Snap.second $t@236@01)))))
(assert (= ($Snap.first ($Snap.second $t@236@01)) $Snap.unit))
; [eval] p2_3 ==> _cthread_160_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_3@223@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 547 | p2_3@223@01 | live]
; [else-branch: 547 | !(p2_3@223@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 547 | p2_3@223@01]
(assert p2_3@223@01)
; [eval] _cthread_160_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 547 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_3@223@01) p2_3@223@01))
(assert (=> p2_3@223@01 (not (= _cthread_160_0@225@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@236@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@236@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@236@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@236@01))) $Snap.unit))
; [eval] p1_3 ==> issubtype(typeof(_cthread_160), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_3@222@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 548 | p1_3@222@01 | live]
; [else-branch: 548 | !(p1_3@222@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 548 | p1_3@222@01]
(assert p1_3@222@01)
; [eval] issubtype(typeof(_cthread_160), Thread_0())
; [eval] typeof(_cthread_160)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 548 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_3@222@01
  (issubtype<Bool> (typeof<PyType> _cthread_160@224@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@236@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@236@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@236@01))))
  $Snap.unit))
; [eval] p2_3 ==> issubtype(typeof(_cthread_160_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_3@223@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 549 | p2_3@223@01 | live]
; [else-branch: 549 | !(p2_3@223@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 549 | p2_3@223@01]
(assert p2_3@223@01)
; [eval] issubtype(typeof(_cthread_160_0), Thread_0())
; [eval] typeof(_cthread_160_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 549 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_3@223@01
  (issubtype<Bool> (typeof<PyType> _cthread_160_0@225@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01)))))
  $Snap.unit))
; [eval] p1_3 ==> issubtype(typeof(secret_1), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_3@222@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 550 | p1_3@222@01 | live]
; [else-branch: 550 | !(p1_3@222@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 550 | p1_3@222@01]
(assert p1_3@222@01)
; [eval] issubtype(typeof(secret_1), bool())
; [eval] typeof(secret_1)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 550 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_3@222@01
  (issubtype<Bool> (typeof<PyType> secret_1@230@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01))))))
  $Snap.unit))
; [eval] p2_3 ==> issubtype(typeof(secret_1_0), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_3@223@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 551 | p2_3@223@01 | live]
; [else-branch: 551 | !(p2_3@223@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 551 | p2_3@223@01]
(assert p2_3@223@01)
; [eval] issubtype(typeof(secret_1_0), bool())
; [eval] typeof(secret_1_0)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 551 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_3@223@01
  (issubtype<Bool> (typeof<PyType> secret_1_0@231@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01)))))))
  $Snap.unit))
; [eval] p1_3 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_3@222@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 552 | p1_3@222@01 | live]
; [else-branch: 552 | !(p1_3@222@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 552 | p1_3@222@01]
(assert p1_3@222@01)
(pop) ; 3
(push) ; 3
; [else-branch: 552 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01)))))))
  $Snap.unit))
; [eval] p2_3 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_3@223@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 553 | p2_3@223@01 | live]
; [else-branch: 553 | !(p2_3@223@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 553 | p2_3@223@01]
(assert p2_3@223@01)
(pop) ; 3
(push) ; 3
; [else-branch: 553 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@237@01 $Snap)
(assert (= $t@237@01 ($Snap.combine ($Snap.first $t@237@01) ($Snap.second $t@237@01))))
(assert (= ($Snap.first $t@237@01) $Snap.unit))
; [eval] p1_3 ==> (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_160) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_3@222@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 554 | p1_3@222@01 | live]
; [else-branch: 554 | !(p1_3@222@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 554 | p1_3@222@01]
(assert p1_3@222@01)
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_160) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160)
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_160)
(push) ; 5
; [then-branch: 555 | False | live]
; [else-branch: 555 | True | live]
(push) ; 6
; [then-branch: 555 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 555 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_160)
(push) ; 7
; [then-branch: 556 | False | live]
; [else-branch: 556 | True | live]
(push) ; 8
; [then-branch: 556 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 556 | True]
; [eval] _residue_160 <= _current_wait_level_160
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 554 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p1_3@222@01 (<= _residue_160@228@01 _current_wait_level_160@232@01)))
(assert (=
  ($Snap.second $t@237@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@237@01))
    ($Snap.second ($Snap.second $t@237@01)))))
(assert (= ($Snap.first ($Snap.second $t@237@01)) $Snap.unit))
; [eval] p2_3 ==> (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: Level(_r_5) <= _current_wait_level_160_0) && ((forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: Level(_r_5) <= _current_wait_level_160_0) && _residue_160_0 <= _current_wait_level_160_0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_3@223@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 557 | p2_3@223@01 | live]
; [else-branch: 557 | !(p2_3@223@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 557 | p2_3@223@01]
(assert p2_3@223@01)
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: Level(_r_5) <= _current_wait_level_160_0) && ((forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: Level(_r_5) <= _current_wait_level_160_0) && _residue_160_0 <= _current_wait_level_160_0)
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: Level(_r_5) <= _current_wait_level_160_0)
(push) ; 5
; [then-branch: 558 | False | live]
; [else-branch: 558 | True | live]
(push) ; 6
; [then-branch: 558 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 558 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: Level(_r_5) <= _current_wait_level_160_0)
(push) ; 7
; [then-branch: 559 | False | live]
; [else-branch: 559 | True | live]
(push) ; 8
; [then-branch: 559 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 559 | True]
; [eval] _residue_160_0 <= _current_wait_level_160_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 557 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p2_3@223@01 (<= _residue_160_0@229@01 _current_wait_level_160_0@233@01)))
(assert (=
  ($Snap.second ($Snap.second $t@237@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@237@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@237@01))) $Snap.unit))
; [eval] p1_3 ==> issubtype(typeof(_res), Example())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_3@222@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 560 | p1_3@222@01 | live]
; [else-branch: 560 | !(p1_3@222@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 560 | p1_3@222@01]
(assert p1_3@222@01)
; [eval] issubtype(typeof(_res), Example())
; [eval] typeof(_res)
; [eval] Example()
(pop) ; 4
(push) ; 4
; [else-branch: 560 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_3@222@01
  (issubtype<Bool> (typeof<PyType> _res@234@01) (as Example<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@237@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@237@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@237@01))))
  $Snap.unit))
; [eval] p2_3 ==> issubtype(typeof(_res_2), Example())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_3@223@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 561 | p2_3@223@01 | live]
; [else-branch: 561 | !(p2_3@223@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 561 | p2_3@223@01]
(assert p2_3@223@01)
; [eval] issubtype(typeof(_res_2), Example())
; [eval] typeof(_res_2)
; [eval] Example()
(pop) ; 4
(push) ; 4
; [else-branch: 561 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_3@223@01
  (issubtype<Bool> (typeof<PyType> _res_2@235@01) (as Example<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_3@222@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 562 | p1_3@222@01 | live]
; [else-branch: 562 | !(p1_3@222@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 562 | p1_3@222@01]
(assert p1_3@222@01)
(assert (not (= _res@234@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_3@223@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 563 | p2_3@223@01 | live]
; [else-branch: 563 | !(p2_3@223@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 563 | p2_3@223@01]
(assert p2_3@223@01)
(assert (not (= _res_2@235@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))
  $Snap.unit))
; [eval] p1_3 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 564 | p1_3@222@01 | live]
; [else-branch: 564 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 564 | p1_3@222@01]
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  p1_3@222@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))
  $Snap.unit))
; [eval] p2_3 ==> issubtype(typeof(_res_2.Example_fp), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 565 | p2_3@223@01 | live]
; [else-branch: 565 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 565 | p2_3@223@01]
; [eval] issubtype(typeof(_res_2.Example_fp), int())
; [eval] typeof(_res_2.Example_fp)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  p2_3@223@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 566 | p1_3@222@01 | live]
; [else-branch: 566 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 566 | p1_3@222@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 567 | p2_3@223@01 | live]
; [else-branch: 567 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 567 | p2_3@223@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))
  $Snap.unit))
; [eval] p1_3 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 568 | p1_3@222@01 | live]
; [else-branch: 568 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 568 | p1_3@222@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_3@222@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))
  $Snap.unit))
; [eval] p2_3 ==> issubtype(typeof(_res_2.Example_gp), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 569 | p2_3@223@01 | live]
; [else-branch: 569 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 569 | p2_3@223@01]
; [eval] issubtype(typeof(_res_2.Example_gp), int())
; [eval] typeof(_res_2.Example_gp)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_3@223@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))
  $Snap.unit))
; [eval] p1_3 && p2_3 ==> tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 0) == tuple___create2__(_res_2.Example_fp, _res_2.Example_gp, int(), int(), 0)
; [eval] p1_3 && p2_3
(push) ; 7
; [then-branch: 570 | !(p1_3@222@01) | live]
; [else-branch: 570 | p1_3@222@01 | live]
(push) ; 8
; [then-branch: 570 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 8
(push) ; 8
; [else-branch: 570 | p1_3@222@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_3@222@01 (not p1_3@222@01)))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_3@222@01 p2_3@223@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and p1_3@222@01 p2_3@223@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 571 | p1_3@222@01 && p2_3@223@01 | live]
; [else-branch: 571 | !(p1_3@222@01 && p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 571 | p1_3@222@01 && p2_3@223@01]
(assert (and p1_3@222@01 p2_3@223@01))
; [eval] tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 0) == tuple___create2__(_res_2.Example_fp, _res_2.Example_gp, int(), int(), 0)
; [eval] tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 0)
; [eval] int()
; [eval] int()
(push) ; 9
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))) (as int<PyType>  PyType)))
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))) (as int<PyType>  PyType))
  (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))
; [eval] tuple___create2__(_res_2.Example_fp, _res_2.Example_gp, int(), int(), 0)
; [eval] int()
; [eval] int()
(push) ; 9
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))) (as int<PyType>  PyType)))
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))) (as int<PyType>  PyType))
  (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and p1_3@222@01 p2_3@223@01)
  (and
    p1_3@222@01
    p2_3@223@01
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))) (as int<PyType>  PyType))
    (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))) (as int<PyType>  PyType))
    (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0))))
(assert (and p1_3@222@01 p2_3@223@01))
(assert (=>
  (and p1_3@222@01 p2_3@223@01)
  (=
    (tuple___create2__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)
    (tuple___create2__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))))
  $Snap.unit))
; [eval] p1_3 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 572 | p1_3@222@01 | live]
; [else-branch: 572 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 572 | p1_3@222@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))))
  $Snap.unit))
; [eval] p2_3 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 573 | p2_3@223@01 | live]
; [else-branch: 573 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 573 | p2_3@223@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 563 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))
  $Snap.unit))
; [eval] p1_3 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not p1_3@222@01))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 574 | p1_3@222@01 | live]
; [else-branch: 574 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 574 | p1_3@222@01]
(assert p1_3@222@01)
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert p1_3@222@01)
(assert (=>
  p1_3@222@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))
  $Snap.unit))
; [eval] p2_3 ==> issubtype(typeof(_res_2.Example_fp), int())
(push) ; 5
; [then-branch: 575 | p2_3@223@01 | dead]
; [else-branch: 575 | !(p2_3@223@01) | live]
(push) ; 6
; [else-branch: 575 | !(p2_3@223@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 576 | p1_3@222@01 | live]
; [else-branch: 576 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 576 | p1_3@222@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))
; [then-branch: 577 | p2_3@223@01 | dead]
; [else-branch: 577 | !(p2_3@223@01) | live]
(push) ; 6
; [else-branch: 577 | !(p2_3@223@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))
  $Snap.unit))
; [eval] p1_3 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 578 | p1_3@222@01 | live]
; [else-branch: 578 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 578 | p1_3@222@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_3@222@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))
  $Snap.unit))
; [eval] p2_3 ==> issubtype(typeof(_res_2.Example_gp), int())
(push) ; 7
; [then-branch: 579 | p2_3@223@01 | dead]
; [else-branch: 579 | !(p2_3@223@01) | live]
(push) ; 8
; [else-branch: 579 | !(p2_3@223@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))
  $Snap.unit))
; [eval] p1_3 && p2_3 ==> tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 0) == tuple___create2__(_res_2.Example_fp, _res_2.Example_gp, int(), int(), 0)
; [eval] p1_3 && p2_3
(push) ; 7
; [then-branch: 580 | !(p1_3@222@01) | live]
; [else-branch: 580 | p1_3@222@01 | live]
(push) ; 8
; [then-branch: 580 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 8
(push) ; 8
; [else-branch: 580 | p1_3@222@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_3@222@01 (not p1_3@222@01)))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_3@222@01 p2_3@223@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 581 | p1_3@222@01 && p2_3@223@01 | dead]
; [else-branch: 581 | !(p1_3@222@01 && p2_3@223@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 581 | !(p1_3@222@01 && p2_3@223@01)]
(assert (not (and p1_3@222@01 p2_3@223@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (and p1_3@222@01 p2_3@223@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))))
  $Snap.unit))
; [eval] p1_3 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 582 | p1_3@222@01 | live]
; [else-branch: 582 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 582 | p1_3@222@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))))
  $Snap.unit))
; [eval] p2_3 ==> true
(push) ; 7
; [then-branch: 583 | p2_3@223@01 | dead]
; [else-branch: 583 | !(p2_3@223@01) | live]
(push) ; 8
; [else-branch: 583 | !(p2_3@223@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 562 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_3@223@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 584 | p2_3@223@01 | live]
; [else-branch: 584 | !(p2_3@223@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 584 | p2_3@223@01]
(assert p2_3@223@01)
(assert (not (= _res_2@235@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))
  $Snap.unit))
; [eval] p1_3 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 5
; [then-branch: 585 | p1_3@222@01 | dead]
; [else-branch: 585 | !(p1_3@222@01) | live]
(push) ; 6
; [else-branch: 585 | !(p1_3@222@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))
  $Snap.unit))
; [eval] p2_3 ==> issubtype(typeof(_res_2.Example_fp), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 586 | p2_3@223@01 | live]
; [else-branch: 586 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 586 | p2_3@223@01]
; [eval] issubtype(typeof(_res_2.Example_fp), int())
; [eval] typeof(_res_2.Example_fp)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  p2_3@223@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))
; [then-branch: 587 | p1_3@222@01 | dead]
; [else-branch: 587 | !(p1_3@222@01) | live]
(push) ; 5
; [else-branch: 587 | !(p1_3@222@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 588 | p2_3@223@01 | live]
; [else-branch: 588 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 588 | p2_3@223@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))
  $Snap.unit))
; [eval] p1_3 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 7
; [then-branch: 589 | p1_3@222@01 | dead]
; [else-branch: 589 | !(p1_3@222@01) | live]
(push) ; 8
; [else-branch: 589 | !(p1_3@222@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))
  $Snap.unit))
; [eval] p2_3 ==> issubtype(typeof(_res_2.Example_gp), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 590 | p2_3@223@01 | live]
; [else-branch: 590 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 590 | p2_3@223@01]
; [eval] issubtype(typeof(_res_2.Example_gp), int())
; [eval] typeof(_res_2.Example_gp)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_3@223@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))
  $Snap.unit))
; [eval] p1_3 && p2_3 ==> tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 0) == tuple___create2__(_res_2.Example_fp, _res_2.Example_gp, int(), int(), 0)
; [eval] p1_3 && p2_3
(push) ; 7
; [then-branch: 591 | !(p1_3@222@01) | live]
; [else-branch: 591 | p1_3@222@01 | live]
(push) ; 8
; [then-branch: 591 | !(p1_3@222@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 591 | p1_3@222@01]
(assert p1_3@222@01)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_3@222@01 (not p1_3@222@01)))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_3@222@01 p2_3@223@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 592 | p1_3@222@01 && p2_3@223@01 | dead]
; [else-branch: 592 | !(p1_3@222@01 && p2_3@223@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 592 | !(p1_3@222@01 && p2_3@223@01)]
(assert (not (and p1_3@222@01 p2_3@223@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (and p1_3@222@01 p2_3@223@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))))
  $Snap.unit))
; [eval] p1_3 ==> true
(push) ; 7
; [then-branch: 593 | p1_3@222@01 | dead]
; [else-branch: 593 | !(p1_3@222@01) | live]
(push) ; 8
; [else-branch: 593 | !(p1_3@222@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))))
  $Snap.unit))
; [eval] p2_3 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 594 | p2_3@223@01 | live]
; [else-branch: 594 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 594 | p2_3@223@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 584 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))
  $Snap.unit))
; [eval] p1_3 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 5
; [then-branch: 595 | p1_3@222@01 | dead]
; [else-branch: 595 | !(p1_3@222@01) | live]
(push) ; 6
; [else-branch: 595 | !(p1_3@222@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))
  $Snap.unit))
; [eval] p2_3 ==> issubtype(typeof(_res_2.Example_fp), int())
(push) ; 5
; [then-branch: 596 | p2_3@223@01 | dead]
; [else-branch: 596 | !(p2_3@223@01) | live]
(push) ; 6
; [else-branch: 596 | !(p2_3@223@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))
; [then-branch: 597 | p1_3@222@01 | dead]
; [else-branch: 597 | !(p1_3@222@01) | live]
(push) ; 5
; [else-branch: 597 | !(p1_3@222@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))
; [then-branch: 598 | p2_3@223@01 | dead]
; [else-branch: 598 | !(p2_3@223@01) | live]
(push) ; 6
; [else-branch: 598 | !(p2_3@223@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))
  $Snap.unit))
; [eval] p1_3 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 7
; [then-branch: 599 | p1_3@222@01 | dead]
; [else-branch: 599 | !(p1_3@222@01) | live]
(push) ; 8
; [else-branch: 599 | !(p1_3@222@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))
  $Snap.unit))
; [eval] p2_3 ==> issubtype(typeof(_res_2.Example_gp), int())
(push) ; 7
; [then-branch: 600 | p2_3@223@01 | dead]
; [else-branch: 600 | !(p2_3@223@01) | live]
(push) ; 8
; [else-branch: 600 | !(p2_3@223@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))
  $Snap.unit))
; [eval] p1_3 && p2_3 ==> tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 0) == tuple___create2__(_res_2.Example_fp, _res_2.Example_gp, int(), int(), 0)
; [eval] p1_3 && p2_3
(push) ; 7
; [then-branch: 601 | !(p1_3@222@01) | live]
; [else-branch: 601 | p1_3@222@01 | live]
(push) ; 8
; [then-branch: 601 | !(p1_3@222@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 601 | p1_3@222@01]
(assert p1_3@222@01)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_3@222@01 (not p1_3@222@01)))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_3@222@01 p2_3@223@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 602 | p1_3@222@01 && p2_3@223@01 | dead]
; [else-branch: 602 | !(p1_3@222@01 && p2_3@223@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 602 | !(p1_3@222@01 && p2_3@223@01)]
(assert (not (and p1_3@222@01 p2_3@223@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (and p1_3@222@01 p2_3@223@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))))
  $Snap.unit))
; [eval] p1_3 ==> true
(push) ; 7
; [then-branch: 603 | p1_3@222@01 | dead]
; [else-branch: 603 | !(p1_3@222@01) | live]
(push) ; 8
; [else-branch: 603 | !(p1_3@222@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@237@01))))))))))))))
  $Snap.unit))
; [eval] p2_3 ==> true
(push) ; 7
; [then-branch: 604 | p2_3@223@01 | dead]
; [else-branch: 604 | !(p2_3@223@01) | live]
(push) ; 8
; [else-branch: 604 | !(p2_3@223@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var ret1_1: Bool
(declare-const ret1_1@238@01 Bool)
; [exec]
; var ret2_1: Bool
(declare-const ret2_1@239@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@240@01 $Ref)
; [exec]
; var _err_2: Ref
(declare-const _err_2@241@01 $Ref)
; [exec]
; var a_1: Ref
(declare-const a_1@242@01 $Ref)
; [exec]
; var a_1_0: Ref
(declare-const a_1_0@243@01 $Ref)
; [exec]
; var b_1: Ref
(declare-const b_1@244@01 $Ref)
; [exec]
; var b_1_0: Ref
(declare-const b_1_0@245@01 $Ref)
; [exec]
; var secret_13: Ref
(declare-const secret_13@246@01 $Ref)
; [exec]
; var secret_13_0: Ref
(declare-const secret_13_0@247@01 $Ref)
; [exec]
; var Example_res_3: Ref
(declare-const Example_res_3@248@01 $Ref)
; [exec]
; var Example_res_3_0: Ref
(declare-const Example_res_3_0@249@01 $Ref)
; [exec]
; var Example_res_4: Ref
(declare-const Example_res_4@250@01 $Ref)
; [exec]
; var Example_res_4_0: Ref
(declare-const Example_res_4_0@251@01 $Ref)
; [exec]
; var _cwl_160: Perm
(declare-const _cwl_160@252@01 $Perm)
; [exec]
; var _cwl_160_0: Perm
(declare-const _cwl_160_0@253@01 $Perm)
; [exec]
; var _method_measures_160: Seq[Measure$]
(declare-const _method_measures_160@254@01 Seq<Measure$>)
; [exec]
; var _method_measures_160_0: Seq[Measure$]
(declare-const _method_measures_160_0@255@01 Seq<Measure$>)
; [exec]
; var tmp_3: Ref
(declare-const tmp_3@256@01 $Ref)
; [exec]
; var tmp_4: Ref
(declare-const tmp_4@257@01 $Ref)
; [exec]
; var p1_4: Bool
(declare-const p1_4@258@01 Bool)
; [exec]
; var p2_4: Bool
(declare-const p2_4@259@01 Bool)
; [exec]
; var p3_1: Bool
(declare-const p3_1@260@01 Bool)
; [exec]
; var p4_1: Bool
(declare-const p4_1@261@01 Bool)
; [exec]
; inhale p1_3
(declare-const $t@262@01 $Snap)
(assert (= $t@262@01 $Snap.unit))
(assert p1_3@222@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ret1_1 := false
; [exec]
; ret2_1 := false
; [eval] p1_3 && !ret1_1
(set-option :timeout 0)
(push) ; 3
; [then-branch: 605 | !(p1_3@222@01) | live]
; [else-branch: 605 | p1_3@222@01 | live]
(push) ; 4
; [then-branch: 605 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 4
(push) ; 4
; [else-branch: 605 | p1_3@222@01]
; [eval] !ret1_1
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1_3@222@01 (not p1_3@222@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 606 | p1_3@222@01 | live]
; [else-branch: 606 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 606 | p1_3@222@01]
; [exec]
; _method_measures_160 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; secret_13 := secret_1
; [eval] p2_3 && !ret2_1
(push) ; 4
; [then-branch: 607 | !(p2_3@223@01) | live]
; [else-branch: 607 | p2_3@223@01 | live]
(push) ; 5
; [then-branch: 607 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 5
(push) ; 5
; [else-branch: 607 | p2_3@223@01]
(assert p2_3@223@01)
; [eval] !ret2_1
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or p2_3@223@01 (not p2_3@223@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_3@223@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 608 | p2_3@223@01 | live]
; [else-branch: 608 | !(p2_3@223@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 608 | p2_3@223@01]
(assert p2_3@223@01)
; [exec]
; _method_measures_160_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res_2 := null
; [exec]
; _err_2 := null
; [exec]
; secret_13_0 := secret_1_0
; [exec]
; tmp_3 := new()
(declare-const tmp_3@263@01 $Ref)
(assert (not (= tmp_3@263@01 $Ref.null)))
(assert (not (= tmp_3@263@01 a_1@242@01)))
(assert (not (= tmp_3@263@01 _cthread_160_0@225@01)))
(assert (not (= tmp_3@263@01 _cthread_160@224@01)))
(assert (not (= tmp_3@263@01 b_1_0@245@01)))
(assert (not (= tmp_3@263@01 secret_1_0@231@01)))
(assert (not (= tmp_3@263@01 Example_res_4_0@251@01)))
(assert (not (= tmp_3@263@01 Example_res_4@250@01)))
(assert (not (= tmp_3@263@01 tmp_4@257@01)))
(assert (not (= tmp_3@263@01 Example_res_3@248@01)))
(assert (not (= tmp_3@263@01 Example_res_3_0@249@01)))
(assert (not (= tmp_3@263@01 a_1_0@243@01)))
(assert (not (= tmp_3@263@01 secret_1@230@01)))
(assert (not (= tmp_3@263@01 tmp_3@256@01)))
(assert (not (= tmp_3@263@01 b_1@244@01)))
; [eval] p1_3 && !ret1_1
(push) ; 5
; [then-branch: 609 | !(p1_3@222@01) | live]
; [else-branch: 609 | p1_3@222@01 | live]
(push) ; 6
; [then-branch: 609 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 6
(push) ; 6
; [else-branch: 609 | p1_3@222@01]
; [eval] !ret1_1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 610 | p1_3@222@01 | live]
; [else-branch: 610 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 610 | p1_3@222@01]
; [exec]
; Example_res_3 := tmp_3
; [eval] p2_3 && !ret2_1
(push) ; 6
; [then-branch: 611 | !(p2_3@223@01) | live]
; [else-branch: 611 | p2_3@223@01 | live]
(push) ; 7
; [then-branch: 611 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 7
(push) ; 7
; [else-branch: 611 | p2_3@223@01]
; [eval] !ret2_1
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 612 | p2_3@223@01 | live]
; [else-branch: 612 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 612 | p2_3@223@01]
; [exec]
; Example_res_3_0 := tmp_3
; [eval] p1_3 && !ret1_1
(push) ; 7
; [then-branch: 613 | !(p1_3@222@01) | live]
; [else-branch: 613 | p1_3@222@01 | live]
(push) ; 8
; [then-branch: 613 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 8
(push) ; 8
; [else-branch: 613 | p1_3@222@01]
; [eval] !ret1_1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 614 | p1_3@222@01 | live]
; [else-branch: 614 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 614 | p1_3@222@01]
; [exec]
; inhale typeof(Example_res_3) == Example()
(declare-const $t@264@01 $Snap)
(assert (= $t@264@01 $Snap.unit))
; [eval] typeof(Example_res_3) == Example()
; [eval] typeof(Example_res_3)
; [eval] Example()
(assert (= (typeof<PyType> tmp_3@263@01) (as Example<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_3, 1888441915154752436293), write)
(declare-const $t@265@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_3, 1906888659228461987909), write)
(declare-const $t@266@01 $Snap)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_3 && !ret2_1
(set-option :timeout 0)
(push) ; 8
; [then-branch: 615 | !(p2_3@223@01) | live]
; [else-branch: 615 | p2_3@223@01 | live]
(push) ; 9
; [then-branch: 615 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 9
(push) ; 9
; [else-branch: 615 | p2_3@223@01]
; [eval] !ret2_1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 616 | p2_3@223@01 | live]
; [else-branch: 616 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 616 | p2_3@223@01]
; [exec]
; inhale typeof(Example_res_3_0) == Example()
(declare-const $t@267@01 $Snap)
(assert (= $t@267@01 $Snap.unit))
; [eval] typeof(Example_res_3_0) == Example()
; [eval] typeof(Example_res_3_0)
; [eval] Example()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(Example_res_3_0, 1888441915154752436293), write)
(declare-const $t@268@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(Example_res_3_0, 1906888659228461987909), write)
(declare-const $t@269@01 $Snap)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_3 && !ret1_1 || p2_3 && !ret2_1
; [eval] p1_3 && !ret1_1
(set-option :timeout 0)
(push) ; 9
; [then-branch: 617 | !(p1_3@222@01) | live]
; [else-branch: 617 | p1_3@222@01 | live]
(push) ; 10
; [then-branch: 617 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 10
(push) ; 10
; [else-branch: 617 | p1_3@222@01]
; [eval] !ret1_1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 618 | p1_3@222@01 | live]
; [else-branch: 618 | !(p1_3@222@01) | live]
(push) ; 10
; [then-branch: 618 | p1_3@222@01]
(pop) ; 10
(push) ; 10
; [else-branch: 618 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
; [eval] p2_3 && !ret2_1
(push) ; 11
; [then-branch: 619 | !(p2_3@223@01) | live]
; [else-branch: 619 | p2_3@223@01 | live]
(push) ; 12
; [then-branch: 619 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 12
(push) ; 12
; [else-branch: 619 | p2_3@223@01]
; [eval] !ret2_1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not (or p1_3@222@01 p2_3@223@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (or p1_3@222@01 p2_3@223@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 620 | p1_3@222@01 || p2_3@223@01 | live]
; [else-branch: 620 | !(p1_3@222@01 || p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 620 | p1_3@222@01 || p2_3@223@01]
(assert (or p1_3@222@01 p2_3@223@01))
; [exec]
; var tmp1_19: Ref
(declare-const tmp1_19@270@01 $Ref)
; [exec]
; var tmp2_19: Ref
(declare-const tmp2_19@271@01 $Ref)
; [exec]
; var tmp1_20: Seq[Measure$]
(declare-const tmp1_20@272@01 Seq<Measure$>)
; [exec]
; var tmp2_20: Seq[Measure$]
(declare-const tmp2_20@273@01 Seq<Measure$>)
; [exec]
; var tmp1_21: Perm
(declare-const tmp1_21@274@01 $Perm)
; [exec]
; var tmp2_21: Perm
(declare-const tmp2_21@275@01 $Perm)
; [exec]
; var tmp1_22: Ref
(declare-const tmp1_22@276@01 $Ref)
; [exec]
; var tmp2_22: Ref
(declare-const tmp2_22@277@01 $Ref)
; [exec]
; var tmp1_23: Perm
(declare-const tmp1_23@278@01 $Perm)
; [exec]
; var tmp2_23: Perm
(declare-const tmp2_23@279@01 $Perm)
; [eval] p1_3 && !ret1_1
(push) ; 10
; [then-branch: 621 | !(p1_3@222@01) | live]
; [else-branch: 621 | p1_3@222@01 | live]
(push) ; 11
; [then-branch: 621 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 11
(push) ; 11
; [else-branch: 621 | p1_3@222@01]
; [eval] !ret1_1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 622 | p1_3@222@01 | live]
; [else-branch: 622 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 622 | p1_3@222@01]
; [exec]
; tmp1_19 := _cthread_160
; [exec]
; tmp1_20 := _method_measures_160
; [exec]
; tmp1_21 := _residue_160
; [exec]
; tmp1_22 := Example_res_3
; [eval] p2_3 && !ret2_1
(push) ; 11
; [then-branch: 623 | !(p2_3@223@01) | live]
; [else-branch: 623 | p2_3@223@01 | live]
(push) ; 12
; [then-branch: 623 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 12
(push) ; 12
; [else-branch: 623 | p2_3@223@01]
; [eval] !ret2_1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 624 | p2_3@223@01 | live]
; [else-branch: 624 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 624 | p2_3@223@01]
; [exec]
; tmp2_19 := _cthread_160_0
; [exec]
; tmp2_20 := _method_measures_160_0
; [exec]
; tmp2_21 := _residue_160_0
; [exec]
; tmp2_22 := Example_res_3_0
; [exec]
; tmp1_23, tmp2_23 := Example___init__(p1_3 && !ret1_1, p2_3 && !ret2_1, tmp1_19,
;   tmp2_19, tmp1_20, tmp2_20, tmp1_21, tmp2_21, tmp1_22, tmp2_22)
; [eval] p1_3 && !ret1_1
(push) ; 12
; [then-branch: 625 | !(p1_3@222@01) | live]
; [else-branch: 625 | p1_3@222@01 | live]
(push) ; 13
; [then-branch: 625 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 13
(push) ; 13
; [else-branch: 625 | p1_3@222@01]
; [eval] !ret1_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [eval] p2_3 && !ret2_1
(push) ; 12
; [then-branch: 626 | !(p2_3@223@01) | live]
; [else-branch: 626 | p2_3@223@01 | live]
(push) ; 13
; [then-branch: 626 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 13
(push) ; 13
; [else-branch: 626 | p2_3@223@01]
; [eval] !ret2_1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [eval] p1_23 ==> _cthread_156 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 627 | p1_3@222@01 | live]
; [else-branch: 627 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 627 | p1_3@222@01]
; [eval] _cthread_156 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p2_23 ==> _cthread_156_0 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 628 | p2_3@223@01 | live]
; [else-branch: 628 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 628 | p2_3@223@01]
; [eval] _cthread_156_0 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1_23 ==> issubtype(typeof(_cthread_156), Thread_0())
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 629 | p1_3@222@01 | live]
; [else-branch: 629 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 629 | p1_3@222@01]
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p2_23 ==> issubtype(typeof(_cthread_156_0), Thread_0())
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 630 | p2_3@223@01 | live]
; [else-branch: 630 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 630 | p2_3@223@01]
; [eval] issubtype(typeof(_cthread_156_0), Thread_0())
; [eval] typeof(_cthread_156_0)
; [eval] Thread_0()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1_23 ==> self != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 631 | p1_3@222@01 | live]
; [else-branch: 631 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 631 | p1_3@222@01]
; [eval] self != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=> p1_3@222@01 (not (= tmp_3@263@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=> p1_3@222@01 (not (= tmp_3@263@01 $Ref.null))))
; [eval] p2_23 ==> self_3 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 632 | p2_3@223@01 | live]
; [else-branch: 632 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 632 | p2_3@223@01]
; [eval] self_3 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=> p2_3@223@01 (not (= tmp_3@263@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=> p2_3@223@01 (not (= tmp_3@263@01 $Ref.null))))
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 633 | p1_3@222@01 | live]
; [else-branch: 633 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 633 | p1_3@222@01]
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 634 | p2_3@223@01 | live]
; [else-branch: 634 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 634 | p2_3@223@01]
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 635 | p1_3@222@01 | live]
; [else-branch: 635 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 635 | p1_3@222@01]
(push) ; 15
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 636 | p2_3@223@01 | live]
; [else-branch: 636 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 636 | p2_3@223@01]
; [eval] p1_23 ==> issubtype(typeof(self), Example())
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 637 | p1_3@222@01 | live]
; [else-branch: 637 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 637 | p1_3@222@01]
; [eval] issubtype(typeof(self), Example())
; [eval] typeof(self)
; [eval] Example()
(pop) ; 17
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (=>
  p1_3@222@01
  (issubtype<Bool> (typeof<PyType> tmp_3@263@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_3@222@01
  (issubtype<Bool> (typeof<PyType> tmp_3@263@01) (as Example<PyType>  PyType))))
; [eval] p2_23 ==> issubtype(typeof(self_3), Example())
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 638 | p2_3@223@01 | live]
; [else-branch: 638 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 638 | p2_3@223@01]
; [eval] issubtype(typeof(self_3), Example())
; [eval] typeof(self_3)
; [eval] Example()
(pop) ; 17
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (=>
  p2_3@223@01
  (issubtype<Bool> (typeof<PyType> tmp_3@263@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_3@223@01
  (issubtype<Bool> (typeof<PyType> tmp_3@263@01) (as Example<PyType>  PyType))))
; [eval] p1_23 ==> self != null
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 639 | p1_3@222@01 | live]
; [else-branch: 639 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 639 | p1_3@222@01]
; [eval] self != null
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p2_23 ==> self_3 != null
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 640 | p2_3@223@01 | live]
; [else-branch: 640 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 640 | p2_3@223@01]
; [eval] self_3 != null
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p1_23 ==> perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 641 | p1_3@222@01 | live]
; [else-branch: 641 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 641 | p1_3@222@01]
; [eval] perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(push) ; 18
; [then-branch: 642 | False | live]
; [else-branch: 642 | True | live]
(push) ; 19
; [then-branch: 642 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 642 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false)
(push) ; 20
; [then-branch: 643 | False | live]
; [else-branch: 643 | True | live]
(push) ; 21
; [then-branch: 643 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 643 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false)
(push) ; 22
; [then-branch: 644 | False | live]
; [else-branch: 644 | True | live]
(push) ; 23
; [then-branch: 644 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 644 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false)
(push) ; 24
; [then-branch: 645 | False | live]
; [else-branch: 645 | True | live]
(push) ; 25
; [then-branch: 645 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 645 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p2_23 ==> perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 646 | p2_3@223@01 | live]
; [else-branch: 646 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 646 | p2_3@223@01]
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none
; [eval] perm(MustTerminate_0(_cthread_156_0))
(push) ; 18
; [then-branch: 647 | False | live]
; [else-branch: 647 | True | live]
(push) ; 19
; [then-branch: 647 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 647 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false)
(push) ; 20
; [then-branch: 648 | False | live]
; [else-branch: 648 | True | live]
(push) ; 21
; [then-branch: 648 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 648 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false)
(push) ; 22
; [then-branch: 649 | False | live]
; [else-branch: 649 | True | live]
(push) ; 23
; [then-branch: 649 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 649 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false)
(push) ; 24
; [then-branch: 650 | False | live]
; [else-branch: 650 | True | live]
(push) ; 25
; [then-branch: 650 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 650 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(declare-const _current_wait_level_156@280@01 $Perm)
(declare-const _current_wait_level_156_0@281@01 $Perm)
(declare-const $t@282@01 $Snap)
(assert (= $t@282@01 ($Snap.combine ($Snap.first $t@282@01) ($Snap.second $t@282@01))))
(assert (= ($Snap.first $t@282@01) $Snap.unit))
; [eval] p1_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 651 | p1_3@222@01 | live]
; [else-branch: 651 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 651 | p1_3@222@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 18
; [then-branch: 652 | False | live]
; [else-branch: 652 | True | live]
(push) ; 19
; [then-branch: 652 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 652 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 20
; [then-branch: 653 | False | live]
; [else-branch: 653 | True | live]
(push) ; 21
; [then-branch: 653 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 653 | True]
; [eval] _residue_156 <= _current_wait_level_156
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=> p1_3@222@01 (<= _residue_160@228@01 _current_wait_level_156@280@01)))
(assert (=
  ($Snap.second $t@282@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@282@01))
    ($Snap.second ($Snap.second $t@282@01)))))
(assert (= ($Snap.first ($Snap.second $t@282@01)) $Snap.unit))
; [eval] p2_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 654 | p2_3@223@01 | live]
; [else-branch: 654 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 654 | p2_3@223@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 18
; [then-branch: 655 | False | live]
; [else-branch: 655 | True | live]
(push) ; 19
; [then-branch: 655 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 655 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 20
; [then-branch: 656 | False | live]
; [else-branch: 656 | True | live]
(push) ; 21
; [then-branch: 656 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 656 | True]
; [eval] _residue_156_0 <= _current_wait_level_156_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=> p2_3@223@01 (<= _residue_160_0@229@01 _current_wait_level_156_0@281@01)))
(assert (=
  ($Snap.second ($Snap.second $t@282@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@282@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 657 | p1_3@222@01 | live]
; [else-branch: 657 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 657 | p1_3@222@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@282@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 658 | p2_3@223@01 | live]
; [else-branch: 658 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 658 | p2_3@223@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_f), int())
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 659 | p1_3@222@01 | live]
; [else-branch: 659 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 659 | p1_3@222@01]
; [eval] issubtype(typeof(self.Example_f), int())
; [eval] typeof(self.Example_f)
; [eval] int()
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  p1_3@222@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_fp), int())
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 660 | p2_3@223@01 | live]
; [else-branch: 660 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 660 | p2_3@223@01]
; [eval] issubtype(typeof(self_3.Example_fp), int())
; [eval] typeof(self_3.Example_fp)
; [eval] int()
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  p2_3@223@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 661 | p1_3@222@01 | live]
; [else-branch: 661 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 661 | p1_3@222@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 662 | p2_3@223@01 | live]
; [else-branch: 662 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 662 | p2_3@223@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_g), int())
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 663 | p1_3@222@01 | live]
; [else-branch: 663 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 663 | p1_3@222@01]
; [eval] issubtype(typeof(self.Example_g), int())
; [eval] typeof(self.Example_g)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p1_3@222@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_gp), int())
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 664 | p2_3@223@01 | live]
; [else-branch: 664 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 664 | p2_3@223@01]
; [eval] issubtype(typeof(self_3.Example_gp), int())
; [eval] typeof(self_3.Example_gp)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p2_3@223@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_f, __prim__int___box__(0))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 665 | p1_3@222@01 | live]
; [else-branch: 665 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 665 | p1_3@222@01]
; [eval] int___eq__(self.Example_f, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01)))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01)))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p1_3@222@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01)))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p1_3@222@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01)))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_fp, __prim__int___box__(0))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 666 | p2_3@223@01 | live]
; [else-branch: 666 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 666 | p2_3@223@01]
; [eval] int___eq__(self_3.Example_fp, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p2_3@223@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p2_3@223@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_g, __prim__int___box__(1))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 667 | p1_3@222@01 | live]
; [else-branch: 667 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 667 | p1_3@222@01]
; [eval] int___eq__(self.Example_g, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p1_3@222@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p1_3@222@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_gp, __prim__int___box__(1))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 668 | p2_3@223@01 | live]
; [else-branch: 668 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 668 | p2_3@223@01]
; [eval] int___eq__(self_3.Example_gp, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p2_3@223@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p2_3@223@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> true
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 669 | p1_3@222@01 | live]
; [else-branch: 669 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 669 | p1_3@222@01]
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> true
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 670 | p2_3@223@01 | live]
; [else-branch: 670 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 670 | p2_3@223@01]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] p1_3 && !ret1_1
(set-option :timeout 0)
(push) ; 20
; [then-branch: 671 | !(p1_3@222@01) | live]
; [else-branch: 671 | p1_3@222@01 | live]
(push) ; 21
; [then-branch: 671 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 21
(push) ; 21
; [else-branch: 671 | p1_3@222@01]
; [eval] !ret1_1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 672 | p1_3@222@01 | live]
; [else-branch: 672 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 672 | p1_3@222@01]
; [exec]
; _cwl_160 := tmp1_23
; [eval] p2_3 && !ret2_1
(push) ; 21
; [then-branch: 673 | !(p2_3@223@01) | live]
; [else-branch: 673 | p2_3@223@01 | live]
(push) ; 22
; [then-branch: 673 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 22
(push) ; 22
; [else-branch: 673 | p2_3@223@01]
; [eval] !ret2_1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 674 | p2_3@223@01 | live]
; [else-branch: 674 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 674 | p2_3@223@01]
; [exec]
; _cwl_160_0 := tmp2_23
; [eval] p1_3 && !ret1_1
(push) ; 22
; [then-branch: 675 | !(p1_3@222@01) | live]
; [else-branch: 675 | p1_3@222@01 | live]
(push) ; 23
; [then-branch: 675 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 23
(push) ; 23
; [else-branch: 675 | p1_3@222@01]
; [eval] !ret1_1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 676 | p1_3@222@01 | live]
; [else-branch: 676 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 676 | p1_3@222@01]
; [exec]
; a_1 := Example_res_3
; [exec]
; inhale _isDefined(3235681)
(declare-const $t@283@01 $Snap)
(assert (= $t@283@01 $Snap.unit))
; [eval] _isDefined(3235681)
(push) ; 23
(assert (_isDefined%precondition $Snap.unit 3235681))
(pop) ; 23
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3235681))
(assert (_isDefined $Snap.unit 3235681))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_3 && !ret2_1
(set-option :timeout 0)
(push) ; 23
; [then-branch: 677 | !(p2_3@223@01) | live]
; [else-branch: 677 | p2_3@223@01 | live]
(push) ; 24
; [then-branch: 677 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 24
(push) ; 24
; [else-branch: 677 | p2_3@223@01]
; [eval] !ret2_1
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 678 | p2_3@223@01 | live]
; [else-branch: 678 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 678 | p2_3@223@01]
; [exec]
; a_1_0 := Example_res_3_0
; [exec]
; inhale true
(declare-const $t@284@01 $Snap)
(assert (= $t@284@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; tmp_4 := new()
(declare-const tmp_4@285@01 $Ref)
(assert (not (= tmp_4@285@01 $Ref.null)))
(assert (not
  (=
    tmp_4@285@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))))
(assert (not
  (=
    tmp_4@285@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))
(assert (not
  (=
    tmp_4@285@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))
(assert (not
  (=
    tmp_4@285@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01)))))))
(assert (not (= tmp_4@285@01 _cthread_160_0@225@01)))
(assert (not (= tmp_4@285@01 _cthread_160@224@01)))
(assert (not (= tmp_4@285@01 b_1_0@245@01)))
(assert (not (= tmp_4@285@01 secret_1_0@231@01)))
(assert (not (= tmp_4@285@01 Example_res_4_0@251@01)))
(assert (not (= tmp_4@285@01 Example_res_4@250@01)))
(assert (not (= tmp_4@285@01 tmp_3@263@01)))
(assert (not (= tmp_4@285@01 tmp_4@257@01)))
(assert (not (= tmp_4@285@01 secret_1@230@01)))
(assert (not (= tmp_4@285@01 b_1@244@01)))
; [eval] p1_3 && !ret1_1
(set-option :timeout 0)
(push) ; 24
; [then-branch: 679 | !(p1_3@222@01) | live]
; [else-branch: 679 | p1_3@222@01 | live]
(push) ; 25
; [then-branch: 679 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 25
(push) ; 25
; [else-branch: 679 | p1_3@222@01]
; [eval] !ret1_1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 680 | p1_3@222@01 | live]
; [else-branch: 680 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 680 | p1_3@222@01]
; [exec]
; Example_res_4 := tmp_4
; [eval] p2_3 && !ret2_1
(push) ; 25
; [then-branch: 681 | !(p2_3@223@01) | live]
; [else-branch: 681 | p2_3@223@01 | live]
(push) ; 26
; [then-branch: 681 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 26
(push) ; 26
; [else-branch: 681 | p2_3@223@01]
; [eval] !ret2_1
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 682 | p2_3@223@01 | live]
; [else-branch: 682 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 682 | p2_3@223@01]
; [exec]
; Example_res_4_0 := tmp_4
; [eval] p1_3 && !ret1_1
(push) ; 26
; [then-branch: 683 | !(p1_3@222@01) | live]
; [else-branch: 683 | p1_3@222@01 | live]
(push) ; 27
; [then-branch: 683 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 27
(push) ; 27
; [else-branch: 683 | p1_3@222@01]
; [eval] !ret1_1
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 684 | p1_3@222@01 | live]
; [else-branch: 684 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 684 | p1_3@222@01]
; [exec]
; inhale typeof(Example_res_4) == Example()
(declare-const $t@286@01 $Snap)
(assert (= $t@286@01 $Snap.unit))
; [eval] typeof(Example_res_4) == Example()
; [eval] typeof(Example_res_4)
; [eval] Example()
(assert (= (typeof<PyType> tmp_4@285@01) (as Example<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_4, 1888441915154752436293), write)
(declare-const $t@287@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_4, 1906888659228461987909), write)
(declare-const $t@288@01 $Snap)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_3 && !ret2_1
(set-option :timeout 0)
(push) ; 27
; [then-branch: 685 | !(p2_3@223@01) | live]
; [else-branch: 685 | p2_3@223@01 | live]
(push) ; 28
; [then-branch: 685 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 28
(push) ; 28
; [else-branch: 685 | p2_3@223@01]
; [eval] !ret2_1
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(push) ; 27
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 686 | p2_3@223@01 | live]
; [else-branch: 686 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 686 | p2_3@223@01]
; [exec]
; inhale typeof(Example_res_4_0) == Example()
(declare-const $t@289@01 $Snap)
(assert (= $t@289@01 $Snap.unit))
; [eval] typeof(Example_res_4_0) == Example()
; [eval] typeof(Example_res_4_0)
; [eval] Example()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(Example_res_4_0, 1888441915154752436293), write)
(declare-const $t@290@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(Example_res_4_0, 1906888659228461987909), write)
(declare-const $t@291@01 $Snap)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_3 && !ret1_1 || p2_3 && !ret2_1
; [eval] p1_3 && !ret1_1
(set-option :timeout 0)
(push) ; 28
; [then-branch: 687 | !(p1_3@222@01) | live]
; [else-branch: 687 | p1_3@222@01 | live]
(push) ; 29
; [then-branch: 687 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 29
(push) ; 29
; [else-branch: 687 | p1_3@222@01]
; [eval] !ret1_1
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
; [then-branch: 688 | p1_3@222@01 | live]
; [else-branch: 688 | !(p1_3@222@01) | live]
(push) ; 29
; [then-branch: 688 | p1_3@222@01]
(pop) ; 29
(push) ; 29
; [else-branch: 688 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
; [eval] p2_3 && !ret2_1
(push) ; 30
; [then-branch: 689 | !(p2_3@223@01) | live]
; [else-branch: 689 | p2_3@223@01 | live]
(push) ; 31
; [then-branch: 689 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 31
(push) ; 31
; [else-branch: 689 | p2_3@223@01]
; [eval] !ret2_1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (not (or p1_3@222@01 p2_3@223@01))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 690 | p1_3@222@01 || p2_3@223@01 | live]
; [else-branch: 690 | !(p1_3@222@01 || p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 690 | p1_3@222@01 || p2_3@223@01]
; [exec]
; var tmp1_24: Ref
(declare-const tmp1_24@292@01 $Ref)
; [exec]
; var tmp2_24: Ref
(declare-const tmp2_24@293@01 $Ref)
; [exec]
; var tmp1_25: Seq[Measure$]
(declare-const tmp1_25@294@01 Seq<Measure$>)
; [exec]
; var tmp2_25: Seq[Measure$]
(declare-const tmp2_25@295@01 Seq<Measure$>)
; [exec]
; var tmp1_26: Perm
(declare-const tmp1_26@296@01 $Perm)
; [exec]
; var tmp2_26: Perm
(declare-const tmp2_26@297@01 $Perm)
; [exec]
; var tmp1_27: Ref
(declare-const tmp1_27@298@01 $Ref)
; [exec]
; var tmp2_27: Ref
(declare-const tmp2_27@299@01 $Ref)
; [exec]
; var tmp1_28: Perm
(declare-const tmp1_28@300@01 $Perm)
; [exec]
; var tmp2_28: Perm
(declare-const tmp2_28@301@01 $Perm)
; [eval] p1_3 && !ret1_1
(push) ; 29
; [then-branch: 691 | !(p1_3@222@01) | live]
; [else-branch: 691 | p1_3@222@01 | live]
(push) ; 30
; [then-branch: 691 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 30
(push) ; 30
; [else-branch: 691 | p1_3@222@01]
; [eval] !ret1_1
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 692 | p1_3@222@01 | live]
; [else-branch: 692 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 692 | p1_3@222@01]
; [exec]
; tmp1_24 := _cthread_160
; [exec]
; tmp1_25 := _method_measures_160
; [exec]
; tmp1_26 := _residue_160
; [exec]
; tmp1_27 := Example_res_4
; [eval] p2_3 && !ret2_1
(push) ; 30
; [then-branch: 693 | !(p2_3@223@01) | live]
; [else-branch: 693 | p2_3@223@01 | live]
(push) ; 31
; [then-branch: 693 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 31
(push) ; 31
; [else-branch: 693 | p2_3@223@01]
; [eval] !ret2_1
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 694 | p2_3@223@01 | live]
; [else-branch: 694 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 694 | p2_3@223@01]
; [exec]
; tmp2_24 := _cthread_160_0
; [exec]
; tmp2_25 := _method_measures_160_0
; [exec]
; tmp2_26 := _residue_160_0
; [exec]
; tmp2_27 := Example_res_4_0
; [exec]
; tmp1_28, tmp2_28 := Example___init__(p1_3 && !ret1_1, p2_3 && !ret2_1, tmp1_24,
;   tmp2_24, tmp1_25, tmp2_25, tmp1_26, tmp2_26, tmp1_27, tmp2_27)
; [eval] p1_3 && !ret1_1
(push) ; 31
; [then-branch: 695 | !(p1_3@222@01) | live]
; [else-branch: 695 | p1_3@222@01 | live]
(push) ; 32
; [then-branch: 695 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 32
(push) ; 32
; [else-branch: 695 | p1_3@222@01]
; [eval] !ret1_1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [eval] p2_3 && !ret2_1
(push) ; 31
; [then-branch: 696 | !(p2_3@223@01) | live]
; [else-branch: 696 | p2_3@223@01 | live]
(push) ; 32
; [then-branch: 696 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 32
(push) ; 32
; [else-branch: 696 | p2_3@223@01]
; [eval] !ret2_1
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [eval] p1_23 ==> _cthread_156 != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 697 | p1_3@222@01 | live]
; [else-branch: 697 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 697 | p1_3@222@01]
; [eval] _cthread_156 != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_23 ==> _cthread_156_0 != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 698 | p2_3@223@01 | live]
; [else-branch: 698 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 698 | p2_3@223@01]
; [eval] _cthread_156_0 != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p1_23 ==> issubtype(typeof(_cthread_156), Thread_0())
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 699 | p1_3@222@01 | live]
; [else-branch: 699 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 699 | p1_3@222@01]
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_23 ==> issubtype(typeof(_cthread_156_0), Thread_0())
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 700 | p2_3@223@01 | live]
; [else-branch: 700 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 700 | p2_3@223@01]
; [eval] issubtype(typeof(_cthread_156_0), Thread_0())
; [eval] typeof(_cthread_156_0)
; [eval] Thread_0()
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p1_23 ==> self != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 701 | p1_3@222@01 | live]
; [else-branch: 701 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 701 | p1_3@222@01]
; [eval] self != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(assert (not (=> p1_3@222@01 (not (= tmp_4@285@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(assert (=> p1_3@222@01 (not (= tmp_4@285@01 $Ref.null))))
; [eval] p2_23 ==> self_3 != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 702 | p2_3@223@01 | live]
; [else-branch: 702 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 702 | p2_3@223@01]
; [eval] self_3 != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(assert (not (=> p2_3@223@01 (not (= tmp_4@285@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(assert (=> p2_3@223@01 (not (= tmp_4@285@01 $Ref.null))))
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 703 | p1_3@222@01 | live]
; [else-branch: 703 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 703 | p1_3@222@01]
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 704 | p2_3@223@01 | live]
; [else-branch: 704 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 704 | p2_3@223@01]
(push) ; 33
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 705 | p1_3@222@01 | live]
; [else-branch: 705 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 705 | p1_3@222@01]
(push) ; 34
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 706 | p2_3@223@01 | live]
; [else-branch: 706 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 706 | p2_3@223@01]
; [eval] p1_23 ==> issubtype(typeof(self), Example())
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 707 | p1_3@222@01 | live]
; [else-branch: 707 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 707 | p1_3@222@01]
; [eval] issubtype(typeof(self), Example())
; [eval] typeof(self)
; [eval] Example()
(pop) ; 36
(pop) ; 35
; Joined path conditions
(push) ; 35
(assert (not (=>
  p1_3@222@01
  (issubtype<Bool> (typeof<PyType> tmp_4@285@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_3@222@01
  (issubtype<Bool> (typeof<PyType> tmp_4@285@01) (as Example<PyType>  PyType))))
; [eval] p2_23 ==> issubtype(typeof(self_3), Example())
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 708 | p2_3@223@01 | live]
; [else-branch: 708 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 708 | p2_3@223@01]
; [eval] issubtype(typeof(self_3), Example())
; [eval] typeof(self_3)
; [eval] Example()
(pop) ; 36
(pop) ; 35
; Joined path conditions
(push) ; 35
(assert (not (=>
  p2_3@223@01
  (issubtype<Bool> (typeof<PyType> tmp_4@285@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_3@223@01
  (issubtype<Bool> (typeof<PyType> tmp_4@285@01) (as Example<PyType>  PyType))))
; [eval] p1_23 ==> self != null
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 709 | p1_3@222@01 | live]
; [else-branch: 709 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 709 | p1_3@222@01]
; [eval] self != null
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p2_23 ==> self_3 != null
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 710 | p2_3@223@01 | live]
; [else-branch: 710 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 710 | p2_3@223@01]
; [eval] self_3 != null
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p1_23 ==> perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 711 | p1_3@222@01 | live]
; [else-branch: 711 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 711 | p1_3@222@01]
; [eval] perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(push) ; 37
; [then-branch: 712 | False | live]
; [else-branch: 712 | True | live]
(push) ; 38
; [then-branch: 712 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 712 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false)
(push) ; 39
; [then-branch: 713 | False | live]
; [else-branch: 713 | True | live]
(push) ; 40
; [then-branch: 713 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 713 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false)
(push) ; 41
; [then-branch: 714 | False | live]
; [else-branch: 714 | True | live]
(push) ; 42
; [then-branch: 714 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 714 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false)
(push) ; 43
; [then-branch: 715 | False | live]
; [else-branch: 715 | True | live]
(push) ; 44
; [then-branch: 715 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 715 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p2_23 ==> perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 716 | p2_3@223@01 | live]
; [else-branch: 716 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 716 | p2_3@223@01]
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none
; [eval] perm(MustTerminate_0(_cthread_156_0))
(push) ; 37
; [then-branch: 717 | False | live]
; [else-branch: 717 | True | live]
(push) ; 38
; [then-branch: 717 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 717 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false)
(push) ; 39
; [then-branch: 718 | False | live]
; [else-branch: 718 | True | live]
(push) ; 40
; [then-branch: 718 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 718 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false)
(push) ; 41
; [then-branch: 719 | False | live]
; [else-branch: 719 | True | live]
(push) ; 42
; [then-branch: 719 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 719 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false)
(push) ; 43
; [then-branch: 720 | False | live]
; [else-branch: 720 | True | live]
(push) ; 44
; [then-branch: 720 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 720 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false)
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
(declare-const _current_wait_level_156@302@01 $Perm)
(declare-const _current_wait_level_156_0@303@01 $Perm)
(declare-const $t@304@01 $Snap)
(assert (= $t@304@01 ($Snap.combine ($Snap.first $t@304@01) ($Snap.second $t@304@01))))
(assert (= ($Snap.first $t@304@01) $Snap.unit))
; [eval] p1_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 721 | p1_3@222@01 | live]
; [else-branch: 721 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 721 | p1_3@222@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 37
; [then-branch: 722 | False | live]
; [else-branch: 722 | True | live]
(push) ; 38
; [then-branch: 722 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 722 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 39
; [then-branch: 723 | False | live]
; [else-branch: 723 | True | live]
(push) ; 40
; [then-branch: 723 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 723 | True]
; [eval] _residue_156 <= _current_wait_level_156
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
(assert (=> p1_3@222@01 (<= _residue_160@228@01 _current_wait_level_156@302@01)))
(assert (=
  ($Snap.second $t@304@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@304@01))
    ($Snap.second ($Snap.second $t@304@01)))))
(assert (= ($Snap.first ($Snap.second $t@304@01)) $Snap.unit))
; [eval] p2_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 724 | p2_3@223@01 | live]
; [else-branch: 724 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 724 | p2_3@223@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 37
; [then-branch: 725 | False | live]
; [else-branch: 725 | True | live]
(push) ; 38
; [then-branch: 725 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 725 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 39
; [then-branch: 726 | False | live]
; [else-branch: 726 | True | live]
(push) ; 40
; [then-branch: 726 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 726 | True]
; [eval] _residue_156_0 <= _current_wait_level_156_0
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
(assert (=> p2_3@223@01 (<= _residue_160_0@229@01 _current_wait_level_156_0@303@01)))
(assert (=
  ($Snap.second ($Snap.second $t@304@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@304@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 727 | p1_3@222@01 | live]
; [else-branch: 727 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 727 | p1_3@222@01]
(push) ; 36
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@304@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 728 | p2_3@223@01 | live]
; [else-branch: 728 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 728 | p2_3@223@01]
(push) ; 37
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_f), int())
(set-option :timeout 0)
(push) ; 37
(push) ; 38
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 729 | p1_3@222@01 | live]
; [else-branch: 729 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 729 | p1_3@222@01]
; [eval] issubtype(typeof(self.Example_f), int())
; [eval] typeof(self.Example_f)
; [eval] int()
(pop) ; 38
(pop) ; 37
; Joined path conditions
(assert (=>
  p1_3@222@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_fp), int())
(push) ; 37
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 730 | p2_3@223@01 | live]
; [else-branch: 730 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 730 | p2_3@223@01]
; [eval] issubtype(typeof(self_3.Example_fp), int())
; [eval] typeof(self_3.Example_fp)
; [eval] int()
(pop) ; 38
(pop) ; 37
; Joined path conditions
(assert (=>
  p2_3@223@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 731 | p1_3@222@01 | live]
; [else-branch: 731 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 731 | p1_3@222@01]
(push) ; 38
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))
(set-option :timeout 0)
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 732 | p2_3@223@01 | live]
; [else-branch: 732 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 732 | p2_3@223@01]
(push) ; 39
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_g), int())
(set-option :timeout 0)
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 733 | p1_3@222@01 | live]
; [else-branch: 733 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 733 | p1_3@222@01]
; [eval] issubtype(typeof(self.Example_g), int())
; [eval] typeof(self.Example_g)
; [eval] int()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p1_3@222@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_gp), int())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 734 | p2_3@223@01 | live]
; [else-branch: 734 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 734 | p2_3@223@01]
; [eval] issubtype(typeof(self_3.Example_gp), int())
; [eval] typeof(self_3.Example_gp)
; [eval] int()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p2_3@223@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_f, __prim__int___box__(0))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 735 | p1_3@222@01 | live]
; [else-branch: 735 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 735 | p1_3@222@01]
; [eval] int___eq__(self.Example_f, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01)))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01)))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p1_3@222@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01)))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p1_3@222@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01)))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_fp, __prim__int___box__(0))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 736 | p2_3@223@01 | live]
; [else-branch: 736 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 736 | p2_3@223@01]
; [eval] int___eq__(self_3.Example_fp, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01))))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p2_3@223@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01))))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p2_3@223@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01))))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_g, __prim__int___box__(1))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 737 | p1_3@222@01 | live]
; [else-branch: 737 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 737 | p1_3@222@01]
; [eval] int___eq__(self.Example_g, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p1_3@222@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p1_3@222@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_gp, __prim__int___box__(1))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 738 | p2_3@223@01 | live]
; [else-branch: 738 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 738 | p2_3@223@01]
; [eval] int___eq__(self_3.Example_gp, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p2_3@223@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p2_3@223@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 739 | p1_3@222@01 | live]
; [else-branch: 739 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 739 | p1_3@222@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 740 | p2_3@223@01 | live]
; [else-branch: 740 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 740 | p2_3@223@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] p1_3 && !ret1_1
(set-option :timeout 0)
(push) ; 39
; [then-branch: 741 | !(p1_3@222@01) | live]
; [else-branch: 741 | p1_3@222@01 | live]
(push) ; 40
; [then-branch: 741 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 40
(push) ; 40
; [else-branch: 741 | p1_3@222@01]
; [eval] !ret1_1
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(push) ; 39
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 742 | p1_3@222@01 | live]
; [else-branch: 742 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 742 | p1_3@222@01]
; [exec]
; _cwl_160 := tmp1_28
; [eval] p2_3 && !ret2_1
(push) ; 40
; [then-branch: 743 | !(p2_3@223@01) | live]
; [else-branch: 743 | p2_3@223@01 | live]
(push) ; 41
; [then-branch: 743 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 41
(push) ; 41
; [else-branch: 743 | p2_3@223@01]
; [eval] !ret2_1
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 744 | p2_3@223@01 | live]
; [else-branch: 744 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 744 | p2_3@223@01]
; [exec]
; _cwl_160_0 := tmp2_28
; [eval] p1_3 && !ret1_1
(push) ; 41
; [then-branch: 745 | !(p1_3@222@01) | live]
; [else-branch: 745 | p1_3@222@01 | live]
(push) ; 42
; [then-branch: 745 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 42
(push) ; 42
; [else-branch: 745 | p1_3@222@01]
; [eval] !ret1_1
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 746 | p1_3@222@01 | live]
; [else-branch: 746 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 746 | p1_3@222@01]
; [exec]
; b_1 := Example_res_4
; [exec]
; inhale _isDefined(3235682)
(declare-const $t@305@01 $Snap)
(assert (= $t@305@01 $Snap.unit))
; [eval] _isDefined(3235682)
(push) ; 42
(assert (_isDefined%precondition $Snap.unit 3235682))
(pop) ; 42
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3235682))
(assert (_isDefined $Snap.unit 3235682))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_3 && !ret2_1
(set-option :timeout 0)
(push) ; 42
; [then-branch: 747 | !(p2_3@223@01) | live]
; [else-branch: 747 | p2_3@223@01 | live]
(push) ; 43
; [then-branch: 747 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 43
(push) ; 43
; [else-branch: 747 | p2_3@223@01]
; [eval] !ret2_1
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 748 | p2_3@223@01 | live]
; [else-branch: 748 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 748 | p2_3@223@01]
; [exec]
; b_1_0 := Example_res_4_0
; [exec]
; inhale true
(declare-const $t@306@01 $Snap)
(assert (= $t@306@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; p1_4 := p1_3 && (!ret1_1 && bool___unbox__(secret_13))
; [eval] p1_3 && (!ret1_1 && bool___unbox__(secret_13))
(set-option :timeout 0)
(push) ; 43
; [then-branch: 749 | !(p1_3@222@01) | live]
; [else-branch: 749 | p1_3@222@01 | live]
(push) ; 44
; [then-branch: 749 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 44
(push) ; 44
; [else-branch: 749 | p1_3@222@01]
; [eval] !ret1_1
(push) ; 45
; [then-branch: 750 | False | live]
; [else-branch: 750 | True | live]
(push) ; 46
; [then-branch: 750 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 750 | True]
; [eval] bool___unbox__(secret_13)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_1@230@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_1@230@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_1@230@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_1@230@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_1@230@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_1@230@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_1@230@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_3@222@01
  (and
    (issubtype<Bool> (typeof<PyType> secret_1@230@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_1@230@01))))
(declare-const p1_4@307@01 Bool)
(assert (= p1_4@307@01 (and p1_3@222@01 (bool___unbox__ $Snap.unit secret_1@230@01))))
; [exec]
; p2_4 := p2_3 && (!ret2_1 && bool___unbox__(secret_13_0))
; [eval] p2_3 && (!ret2_1 && bool___unbox__(secret_13_0))
(push) ; 43
; [then-branch: 751 | !(p2_3@223@01) | live]
; [else-branch: 751 | p2_3@223@01 | live]
(push) ; 44
; [then-branch: 751 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 44
(push) ; 44
; [else-branch: 751 | p2_3@223@01]
; [eval] !ret2_1
(push) ; 45
; [then-branch: 752 | False | live]
; [else-branch: 752 | True | live]
(push) ; 46
; [then-branch: 752 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 752 | True]
; [eval] bool___unbox__(secret_13_0)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_1_0@231@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_1_0@231@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_1_0@231@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_1_0@231@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_1_0@231@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_1_0@231@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_1_0@231@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_3@223@01
  (and
    (issubtype<Bool> (typeof<PyType> secret_1_0@231@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_1_0@231@01))))
(declare-const p2_4@308@01 Bool)
(assert (= p2_4@308@01 (and p2_3@223@01 (bool___unbox__ $Snap.unit secret_1_0@231@01))))
; [exec]
; p3_1 := p1_3 && (!ret1_1 && !bool___unbox__(secret_13))
; [eval] p1_3 && (!ret1_1 && !bool___unbox__(secret_13))
(push) ; 43
; [then-branch: 753 | !(p1_3@222@01) | live]
; [else-branch: 753 | p1_3@222@01 | live]
(push) ; 44
; [then-branch: 753 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 44
(push) ; 44
; [else-branch: 753 | p1_3@222@01]
; [eval] !ret1_1
(push) ; 45
; [then-branch: 754 | False | live]
; [else-branch: 754 | True | live]
(push) ; 46
; [then-branch: 754 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 754 | True]
; [eval] !bool___unbox__(secret_13)
; [eval] bool___unbox__(secret_13)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_1@230@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_1@230@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_1@230@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_1@230@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_1@230@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_1@230@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_1@230@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(declare-const p3_1@309@01 Bool)
(assert (=
  p3_1@309@01
  (and p1_3@222@01 (not (bool___unbox__ $Snap.unit secret_1@230@01)))))
; [exec]
; p4_1 := p2_3 && (!ret2_1 && !bool___unbox__(secret_13_0))
; [eval] p2_3 && (!ret2_1 && !bool___unbox__(secret_13_0))
(push) ; 43
; [then-branch: 755 | !(p2_3@223@01) | live]
; [else-branch: 755 | p2_3@223@01 | live]
(push) ; 44
; [then-branch: 755 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 44
(push) ; 44
; [else-branch: 755 | p2_3@223@01]
; [eval] !ret2_1
(push) ; 45
; [then-branch: 756 | False | live]
; [else-branch: 756 | True | live]
(push) ; 46
; [then-branch: 756 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 756 | True]
; [eval] !bool___unbox__(secret_13_0)
; [eval] bool___unbox__(secret_13_0)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_1_0@231@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_1_0@231@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_1_0@231@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_1_0@231@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_1_0@231@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_1_0@231@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_1_0@231@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(declare-const p4_1@310@01 Bool)
(assert (=
  p4_1@310@01
  (and p2_3@223@01 (not (bool___unbox__ $Snap.unit secret_1_0@231@01)))))
; [eval] p1_4 && !ret1_1
(push) ; 43
; [then-branch: 757 | !(p1_4@307@01) | live]
; [else-branch: 757 | p1_4@307@01 | live]
(push) ; 44
; [then-branch: 757 | !(p1_4@307@01)]
(assert (not p1_4@307@01))
(pop) ; 44
(push) ; 44
; [else-branch: 757 | p1_4@307@01]
(assert p1_4@307@01)
; [eval] !ret1_1
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(assert (or p1_4@307@01 (not p1_4@307@01)))
(push) ; 43
(set-option :timeout 10)
(assert (not (not p1_4@307@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not p1_4@307@01))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 758 | p1_4@307@01 | live]
; [else-branch: 758 | !(p1_4@307@01) | live]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 758 | p1_4@307@01]
(assert p1_4@307@01)
; [exec]
; _res := _checkDefined(a_1, 3235681)
; [eval] _checkDefined(a_1, 3235681)
(push) ; 44
; [eval] _isDefined(id)
(push) ; 45
(pop) ; 45
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_3@263@01 3235681))
(pop) ; 44
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_3@263@01 3235681))
(declare-const _res@311@01 $Ref)
(assert (= _res@311@01 (_checkDefined $Snap.unit tmp_3@263@01 3235681)))
; [exec]
; ret1_1 := true
; [eval] p2_4 && !ret2_1
(push) ; 44
; [then-branch: 759 | !(p2_4@308@01) | live]
; [else-branch: 759 | p2_4@308@01 | live]
(push) ; 45
; [then-branch: 759 | !(p2_4@308@01)]
(assert (not p2_4@308@01))
(pop) ; 45
(push) ; 45
; [else-branch: 759 | p2_4@308@01]
(assert p2_4@308@01)
; [eval] !ret2_1
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(assert (or p2_4@308@01 (not p2_4@308@01)))
(push) ; 44
(set-option :timeout 10)
(assert (not (not p2_4@308@01)))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not p2_4@308@01))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 760 | p2_4@308@01 | live]
; [else-branch: 760 | !(p2_4@308@01) | live]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 760 | p2_4@308@01]
(assert p2_4@308@01)
; [exec]
; _res_2 := a_1_0
; [exec]
; ret2_1 := true
; [eval] p1_3 && !ret1_1
(push) ; 45
; [then-branch: 761 | !(p1_3@222@01) | live]
; [else-branch: 761 | p1_3@222@01 | live]
(push) ; 46
; [then-branch: 761 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 46
(push) ; 46
; [else-branch: 761 | p1_3@222@01]
; [eval] !ret1_1
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
; [then-branch: 762 | False | dead]
; [else-branch: 762 | True | live]
(push) ; 45
; [else-branch: 762 | True]
(pop) ; 45
; [eval] !(p1_3 && !ret1_1)
; [eval] p1_3 && !ret1_1
(push) ; 45
; [then-branch: 763 | !(p1_3@222@01) | live]
; [else-branch: 763 | p1_3@222@01 | live]
(push) ; 46
; [then-branch: 763 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 46
(push) ; 46
; [else-branch: 763 | p1_3@222@01]
; [eval] !ret1_1
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(push) ; 45
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 764 | True | live]
; [else-branch: 764 | False | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 764 | True]
; [eval] p2_3 && !ret2_1
(push) ; 46
; [then-branch: 765 | !(p2_3@223@01) | live]
; [else-branch: 765 | p2_3@223@01 | live]
(push) ; 47
; [then-branch: 765 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 47
(push) ; 47
; [else-branch: 765 | p2_3@223@01]
; [eval] !ret2_1
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
; [then-branch: 766 | False | dead]
; [else-branch: 766 | True | live]
(push) ; 46
; [else-branch: 766 | True]
(pop) ; 46
; [eval] !(p2_3 && !ret2_1)
; [eval] p2_3 && !ret2_1
(push) ; 46
; [then-branch: 767 | !(p2_3@223@01) | live]
; [else-branch: 767 | p2_3@223@01 | live]
(push) ; 47
; [then-branch: 767 | !(p2_3@223@01)]
(assert (not p2_3@223@01))
(pop) ; 47
(push) ; 47
; [else-branch: 767 | p2_3@223@01]
; [eval] !ret2_1
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(push) ; 46
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 768 | True | live]
; [else-branch: 768 | False | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 768 | True]
; [exec]
; assert true
; [eval] p1_3 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 769 | p1_3@222@01 | live]
; [else-branch: 769 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 769 | p1_3@222@01]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p2_3 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 770 | p2_3@223@01 | live]
; [else-branch: 770 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 770 | p2_3@223@01]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p1_3 ==> issubtype(typeof(_res), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 771 | p1_3@222@01 | live]
; [else-branch: 771 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 771 | p1_3@222@01]
; [eval] issubtype(typeof(_res), Example())
; [eval] typeof(_res)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p1_3@222@01
  (issubtype<Bool> (typeof<PyType> _res@311@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_3@222@01
  (issubtype<Bool> (typeof<PyType> _res@311@01) (as Example<PyType>  PyType))))
; [eval] p2_3 ==> issubtype(typeof(_res_2), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 772 | p2_3@223@01 | live]
; [else-branch: 772 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 772 | p2_3@223@01]
; [eval] issubtype(typeof(_res_2), Example())
; [eval] typeof(_res_2)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
; [then-branch: 773 | p1_3@222@01 | live]
; [else-branch: 773 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 47
; [then-branch: 773 | p1_3@222@01]
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 _res@311@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 _res@311@01)))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 774 | p2_3@223@01 | live]
; [else-branch: 774 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 774 | p2_3@223@01]
; [eval] p1_3 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 775 | p1_3@222@01 | live]
; [else-branch: 775 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 775 | p1_3@222@01]
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 _res@311@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 _res@311@01)))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
; [eval] p2_3 ==> issubtype(typeof(_res_2.Example_fp), int())
(set-option :timeout 0)
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 776 | p2_3@223@01 | live]
; [else-branch: 776 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 776 | p2_3@223@01]
; [eval] issubtype(typeof(_res_2.Example_fp), int())
; [eval] typeof(_res_2.Example_fp)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
(push) ; 49
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 777 | p1_3@222@01 | live]
; [else-branch: 777 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 777 | p1_3@222@01]
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 _res@311@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 _res@311@01)))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 778 | p2_3@223@01 | live]
; [else-branch: 778 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 778 | p2_3@223@01]
; [eval] p1_3 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p1_3@222@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 779 | p1_3@222@01 | live]
; [else-branch: 779 | !(p1_3@222@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 779 | p1_3@222@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 _res@311@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 _res@311@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p2_3 ==> issubtype(typeof(_res_2.Example_gp), int())
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p2_3@223@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 780 | p2_3@223@01 | live]
; [else-branch: 780 | !(p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 780 | p2_3@223@01]
; [eval] issubtype(typeof(_res_2.Example_gp), int())
; [eval] typeof(_res_2.Example_gp)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p1_3 && p2_3 ==> tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 0) == tuple___create2__(_res_2.Example_fp, _res_2.Example_gp, int(), int(), 0)
; [eval] p1_3 && p2_3
(push) ; 51
; [then-branch: 781 | !(p1_3@222@01) | live]
; [else-branch: 781 | p1_3@222@01 | live]
(push) ; 52
; [then-branch: 781 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
(pop) ; 52
(push) ; 52
; [else-branch: 781 | p1_3@222@01]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_3@222@01 p2_3@223@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1_3@222@01 p2_3@223@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 782 | p1_3@222@01 && p2_3@223@01 | live]
; [else-branch: 782 | !(p1_3@222@01 && p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 782 | p1_3@222@01 && p2_3@223@01]
(assert (and p1_3@222@01 p2_3@223@01))
; [eval] tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 0) == tuple___create2__(_res_2.Example_fp, _res_2.Example_gp, int(), int(), 0)
; [eval] tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 _res@311@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 _res@311@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 _res@311@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 _res@311@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [eval] int()
; [eval] int()
(set-option :timeout 0)
(push) ; 53
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType)))
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType))
  (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))
; [eval] tuple___create2__(_res_2.Example_fp, _res_2.Example_gp, int(), int(), 0)
; [eval] int()
; [eval] int()
(push) ; 53
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))) (as int<PyType>  PyType)))
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))) (as int<PyType>  PyType))
  (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=>
  (and p1_3@222@01 p2_3@223@01)
  (and
    p1_3@222@01
    p2_3@223@01
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType))
    (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))) (as int<PyType>  PyType))
    (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0))))
(assert (and p1_3@222@01 p2_3@223@01))
(push) ; 51
(assert (not (=>
  (and p1_3@222@01 p2_3@223@01)
  (=
    (tuple___create2__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)
    (tuple___create2__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 tmp_3@263@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 tmp_3@263@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 tmp_3@263@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 tmp_3@263@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_3@263@01 tmp_4@285@01)) (not (= tmp_4@285@01 tmp_3@263@01))))
; [eval] p1_3 && p2_3 ==> tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 0) == tuple___create2__(_res_2.Example_fp, _res_2.Example_gp, int(), int(), 0)
; [eval] p1_3 && p2_3
(set-option :timeout 0)
(push) ; 51
; [then-branch: 783 | !(p1_3@222@01) | live]
; [else-branch: 783 | p1_3@222@01 | live]
(push) ; 52
; [then-branch: 783 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))
(assert false)
(pop) ; 52
(set-option :timeout 0)
(push) ; 52
; [else-branch: 783 | p1_3@222@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_4@285@01 tmp_3@263@01)) (not (= tmp_3@263@01 tmp_4@285@01))))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=> (not p1_3@222@01) false))
; Joined path conditions
(assert (=>
  p1_3@222@01
  (and (not (= tmp_4@285@01 tmp_3@263@01)) (not (= tmp_3@263@01 tmp_4@285@01)))))
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_3@222@01 p2_3@223@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1_3@222@01 p2_3@223@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 784 | p1_3@222@01 && p2_3@223@01 | live]
; [else-branch: 784 | !(p1_3@222@01 && p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 784 | p1_3@222@01 && p2_3@223@01]
(assert (and p1_3@222@01 p2_3@223@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_4@285@01 tmp_3@263@01)) (not (= tmp_3@263@01 tmp_4@285@01))))
; [eval] tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 0) == tuple___create2__(_res_2.Example_fp, _res_2.Example_gp, int(), int(), 0)
; [eval] tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 0)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 _res@311@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 _res@311@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 _res@311@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 _res@311@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [eval] int()
; [eval] int()
(set-option :timeout 0)
(push) ; 53
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType)))
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType))
  (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))
; [eval] tuple___create2__(_res_2.Example_fp, _res_2.Example_gp, int(), int(), 0)
; [eval] int()
; [eval] int()
(push) ; 53
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))) (as int<PyType>  PyType)))
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))) (as int<PyType>  PyType))
  (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=>
  (and p1_3@222@01 p2_3@223@01)
  (and
    p1_3@222@01
    p2_3@223@01
    (not (= tmp_4@285@01 tmp_3@263@01))
    (not (= tmp_3@263@01 tmp_4@285@01))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType))
    (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))) (as int<PyType>  PyType))
    (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0))))
(assert (and p1_3@222@01 p2_3@223@01))
(push) ; 51
(assert (not (=>
  (and p1_3@222@01 p2_3@223@01)
  (=
    (tuple___create2__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)
    (tuple___create2__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] p1_3 && p2_3 ==> tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 0) == tuple___create2__(_res_2.Example_fp, _res_2.Example_gp, int(), int(), 0)
; [eval] p1_3 && p2_3
(set-option :timeout 0)
(push) ; 51
; [then-branch: 785 | !(p1_3@222@01) | live]
; [else-branch: 785 | p1_3@222@01 | live]
(push) ; 52
; [then-branch: 785 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 tmp_3@263@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 tmp_3@263@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 tmp_3@263@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 tmp_3@263@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))))
(assert false)
(pop) ; 52
(set-option :timeout 0)
(push) ; 52
; [else-branch: 785 | p1_3@222@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 tmp_3@263@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 tmp_3@263@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 tmp_3@263@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 tmp_3@263@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_3@263@01 tmp_4@285@01)) (not (= tmp_4@285@01 tmp_3@263@01))))
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_3@222@01
  (and (not (= tmp_3@263@01 tmp_4@285@01)) (not (= tmp_4@285@01 tmp_3@263@01)))))
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_3@222@01 p2_3@223@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1_3@222@01 p2_3@223@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 786 | p1_3@222@01 && p2_3@223@01 | live]
; [else-branch: 786 | !(p1_3@222@01 && p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 786 | p1_3@222@01 && p2_3@223@01]
(assert (and p1_3@222@01 p2_3@223@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 tmp_3@263@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 tmp_3@263@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 tmp_3@263@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 tmp_3@263@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_3@263@01 tmp_4@285@01)) (not (= tmp_4@285@01 tmp_3@263@01))))
; [eval] tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 0) == tuple___create2__(_res_2.Example_fp, _res_2.Example_gp, int(), int(), 0)
; [eval] tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 0)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 _res@311@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 _res@311@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [eval] int()
; [eval] int()
(set-option :timeout 0)
(push) ; 53
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType)))
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType))
  (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))
; [eval] tuple___create2__(_res_2.Example_fp, _res_2.Example_gp, int(), int(), 0)
; [eval] int()
; [eval] int()
(push) ; 53
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))) (as int<PyType>  PyType)))
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))) (as int<PyType>  PyType))
  (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=>
  (and p1_3@222@01 p2_3@223@01)
  (and
    p1_3@222@01
    p2_3@223@01
    (not (= tmp_3@263@01 tmp_4@285@01))
    (not (= tmp_4@285@01 tmp_3@263@01))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType))
    (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))) (as int<PyType>  PyType))
    (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0))))
(assert (and p1_3@222@01 p2_3@223@01))
(push) ; 51
(assert (not (=>
  (and p1_3@222@01 p2_3@223@01)
  (=
    (tuple___create2__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)
    (tuple___create2__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 tmp_3@263@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 tmp_3@263@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 tmp_3@263@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 tmp_3@263@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_3@263@01 tmp_4@285@01)) (not (= tmp_4@285@01 tmp_3@263@01))))
; [eval] p1_3 && p2_3 ==> tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 0) == tuple___create2__(_res_2.Example_fp, _res_2.Example_gp, int(), int(), 0)
; [eval] p1_3 && p2_3
(set-option :timeout 0)
(push) ; 51
; [then-branch: 787 | !(p1_3@222@01) | live]
; [else-branch: 787 | p1_3@222@01 | live]
(push) ; 52
; [then-branch: 787 | !(p1_3@222@01)]
(assert (not p1_3@222@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))
(assert false)
(pop) ; 52
(set-option :timeout 0)
(push) ; 52
; [else-branch: 787 | p1_3@222@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_4@285@01 tmp_3@263@01)) (not (= tmp_3@263@01 tmp_4@285@01))))
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_3@222@01 p2_3@223@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1_3@222@01 p2_3@223@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 788 | p1_3@222@01 && p2_3@223@01 | live]
; [else-branch: 788 | !(p1_3@222@01 && p2_3@223@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 788 | p1_3@222@01 && p2_3@223@01]
(assert (and p1_3@222@01 p2_3@223@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 tmp_4@285@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@304@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_4@285@01 tmp_3@263@01)) (not (= tmp_3@263@01 tmp_4@285@01))))
; [eval] tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 0) == tuple___create2__(_res_2.Example_fp, _res_2.Example_gp, int(), int(), 0)
; [eval] tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 0)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 _res@311@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 _res@311@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_4@285@01 _res@311@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_3@263@01 _res@311@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [eval] int()
; [eval] int()
(set-option :timeout 0)
(push) ; 53
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType)))
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType))
  (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))
; [eval] tuple___create2__(_res_2.Example_fp, _res_2.Example_gp, int(), int(), 0)
; [eval] int()
; [eval] int()
(push) ; 53
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))) (as int<PyType>  PyType)))
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))))) (as int<PyType>  PyType))
  (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (and p1_3@222@01 p2_3@223@01))
(push) ; 51
(assert (not (=>
  (and p1_3@222@01 p2_3@223@01)
  (=
    (tuple___create2__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@282@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)
    (tuple___create2__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(pop) ; 50
(pop) ; 49
(pop) ; 48
(pop) ; 47
(pop) ; 46
(pop) ; 45
(pop) ; 44
(pop) ; 43
(pop) ; 42
(pop) ; 41
(pop) ; 40
(pop) ; 39
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- example_tuple_lowval ----------
(declare-const p1_5@312@01 Bool)
(declare-const p2_5@313@01 Bool)
(declare-const _cthread_161@314@01 $Ref)
(declare-const _cthread_161_0@315@01 $Ref)
(declare-const _caller_measures_161@316@01 Seq<Measure$>)
(declare-const _caller_measures_161_0@317@01 Seq<Measure$>)
(declare-const _residue_161@318@01 $Perm)
(declare-const _residue_161_0@319@01 $Perm)
(declare-const secret_2@320@01 $Ref)
(declare-const secret_2_0@321@01 $Ref)
(declare-const _current_wait_level_161@322@01 $Perm)
(declare-const _current_wait_level_161_0@323@01 $Perm)
(declare-const _res@324@01 $Ref)
(declare-const _res_3@325@01 $Ref)
(declare-const p1_5@326@01 Bool)
(declare-const p2_5@327@01 Bool)
(declare-const _cthread_161@328@01 $Ref)
(declare-const _cthread_161_0@329@01 $Ref)
(declare-const _caller_measures_161@330@01 Seq<Measure$>)
(declare-const _caller_measures_161_0@331@01 Seq<Measure$>)
(declare-const _residue_161@332@01 $Perm)
(declare-const _residue_161_0@333@01 $Perm)
(declare-const secret_2@334@01 $Ref)
(declare-const secret_2_0@335@01 $Ref)
(declare-const _current_wait_level_161@336@01 $Perm)
(declare-const _current_wait_level_161_0@337@01 $Perm)
(declare-const _res@338@01 $Ref)
(declare-const _res_3@339@01 $Ref)
(push) ; 1
(declare-const $t@340@01 $Snap)
(assert (= $t@340@01 ($Snap.combine ($Snap.first $t@340@01) ($Snap.second $t@340@01))))
(assert (= ($Snap.first $t@340@01) $Snap.unit))
; [eval] p1_5 ==> _cthread_161 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_5@326@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 789 | p1_5@326@01 | live]
; [else-branch: 789 | !(p1_5@326@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 789 | p1_5@326@01]
(assert p1_5@326@01)
; [eval] _cthread_161 != null
(pop) ; 3
(push) ; 3
; [else-branch: 789 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_5@326@01) p1_5@326@01))
(assert (=> p1_5@326@01 (not (= _cthread_161@328@01 $Ref.null))))
(assert (=
  ($Snap.second $t@340@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@340@01))
    ($Snap.second ($Snap.second $t@340@01)))))
(assert (= ($Snap.first ($Snap.second $t@340@01)) $Snap.unit))
; [eval] p2_5 ==> _cthread_161_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_5@327@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 790 | p2_5@327@01 | live]
; [else-branch: 790 | !(p2_5@327@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 790 | p2_5@327@01]
(assert p2_5@327@01)
; [eval] _cthread_161_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 790 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_5@327@01) p2_5@327@01))
(assert (=> p2_5@327@01 (not (= _cthread_161_0@329@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@340@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@340@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@340@01))) $Snap.unit))
; [eval] p1_5 ==> issubtype(typeof(_cthread_161), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_5@326@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 791 | p1_5@326@01 | live]
; [else-branch: 791 | !(p1_5@326@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 791 | p1_5@326@01]
(assert p1_5@326@01)
; [eval] issubtype(typeof(_cthread_161), Thread_0())
; [eval] typeof(_cthread_161)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 791 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_5@326@01
  (issubtype<Bool> (typeof<PyType> _cthread_161@328@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@340@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@340@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@340@01))))
  $Snap.unit))
; [eval] p2_5 ==> issubtype(typeof(_cthread_161_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_5@327@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 792 | p2_5@327@01 | live]
; [else-branch: 792 | !(p2_5@327@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 792 | p2_5@327@01]
(assert p2_5@327@01)
; [eval] issubtype(typeof(_cthread_161_0), Thread_0())
; [eval] typeof(_cthread_161_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 792 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_5@327@01
  (issubtype<Bool> (typeof<PyType> _cthread_161_0@329@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))
  $Snap.unit))
; [eval] p1_5 ==> issubtype(typeof(secret_2), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_5@326@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 793 | p1_5@326@01 | live]
; [else-branch: 793 | !(p1_5@326@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 793 | p1_5@326@01]
(assert p1_5@326@01)
; [eval] issubtype(typeof(secret_2), bool())
; [eval] typeof(secret_2)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 793 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_5@326@01
  (issubtype<Bool> (typeof<PyType> secret_2@334@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))
  $Snap.unit))
; [eval] p2_5 ==> issubtype(typeof(secret_2_0), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_5@327@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 794 | p2_5@327@01 | live]
; [else-branch: 794 | !(p2_5@327@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 794 | p2_5@327@01]
(assert p2_5@327@01)
; [eval] issubtype(typeof(secret_2_0), bool())
; [eval] typeof(secret_2_0)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 794 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_5@327@01
  (issubtype<Bool> (typeof<PyType> secret_2_0@335@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))
  $Snap.unit))
; [eval] p1_5 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_5@326@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 795 | p1_5@326@01 | live]
; [else-branch: 795 | !(p1_5@326@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 795 | p1_5@326@01]
(assert p1_5@326@01)
(pop) ; 3
(push) ; 3
; [else-branch: 795 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))
  $Snap.unit))
; [eval] p2_5 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_5@327@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 796 | p2_5@327@01 | live]
; [else-branch: 796 | !(p2_5@327@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 796 | p2_5@327@01]
(assert p2_5@327@01)
(pop) ; 3
(push) ; 3
; [else-branch: 796 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@341@01 $Snap)
(assert (= $t@341@01 ($Snap.combine ($Snap.first $t@341@01) ($Snap.second $t@341@01))))
(assert (= ($Snap.first $t@341@01) $Snap.unit))
; [eval] p1_5 ==> (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_161) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_161) && _residue_161 <= _current_wait_level_161)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_5@326@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 797 | p1_5@326@01 | live]
; [else-branch: 797 | !(p1_5@326@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 797 | p1_5@326@01]
(assert p1_5@326@01)
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_161) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_161) && _residue_161 <= _current_wait_level_161)
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_161)
(push) ; 5
; [then-branch: 798 | False | live]
; [else-branch: 798 | True | live]
(push) ; 6
; [then-branch: 798 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 798 | True]
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_161)
(push) ; 7
; [then-branch: 799 | False | live]
; [else-branch: 799 | True | live]
(push) ; 8
; [then-branch: 799 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 799 | True]
; [eval] _residue_161 <= _current_wait_level_161
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 797 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p1_5@326@01 (<= _residue_161@332@01 _current_wait_level_161@336@01)))
(assert (=
  ($Snap.second $t@341@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@341@01))
    ($Snap.second ($Snap.second $t@341@01)))))
(assert (= ($Snap.first ($Snap.second $t@341@01)) $Snap.unit))
; [eval] p2_5 ==> (forperm _r_8: Ref [_r_8.MustReleaseBoundedp] :: Level(_r_8) <= _current_wait_level_161_0) && ((forperm _r_8: Ref [_r_8.MustReleaseUnboundedp] :: Level(_r_8) <= _current_wait_level_161_0) && _residue_161_0 <= _current_wait_level_161_0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_5@327@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 800 | p2_5@327@01 | live]
; [else-branch: 800 | !(p2_5@327@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 800 | p2_5@327@01]
(assert p2_5@327@01)
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBoundedp] :: Level(_r_8) <= _current_wait_level_161_0) && ((forperm _r_8: Ref [_r_8.MustReleaseUnboundedp] :: Level(_r_8) <= _current_wait_level_161_0) && _residue_161_0 <= _current_wait_level_161_0)
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBoundedp] :: Level(_r_8) <= _current_wait_level_161_0)
(push) ; 5
; [then-branch: 801 | False | live]
; [else-branch: 801 | True | live]
(push) ; 6
; [then-branch: 801 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 801 | True]
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseUnboundedp] :: Level(_r_8) <= _current_wait_level_161_0)
(push) ; 7
; [then-branch: 802 | False | live]
; [else-branch: 802 | True | live]
(push) ; 8
; [then-branch: 802 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 802 | True]
; [eval] _residue_161_0 <= _current_wait_level_161_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 800 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p2_5@327@01 (<= _residue_161_0@333@01 _current_wait_level_161_0@337@01)))
(assert (=
  ($Snap.second ($Snap.second $t@341@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@341@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@341@01))) $Snap.unit))
; [eval] p1_5 ==> issubtype(typeof(_res), Example())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_5@326@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 803 | p1_5@326@01 | live]
; [else-branch: 803 | !(p1_5@326@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 803 | p1_5@326@01]
(assert p1_5@326@01)
; [eval] issubtype(typeof(_res), Example())
; [eval] typeof(_res)
; [eval] Example()
(pop) ; 4
(push) ; 4
; [else-branch: 803 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_5@326@01
  (issubtype<Bool> (typeof<PyType> _res@338@01) (as Example<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@341@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@341@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@341@01))))
  $Snap.unit))
; [eval] p2_5 ==> issubtype(typeof(_res_3), Example())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_5@327@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 804 | p2_5@327@01 | live]
; [else-branch: 804 | !(p2_5@327@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 804 | p2_5@327@01]
(assert p2_5@327@01)
; [eval] issubtype(typeof(_res_3), Example())
; [eval] typeof(_res_3)
; [eval] Example()
(pop) ; 4
(push) ; 4
; [else-branch: 804 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_5@327@01
  (issubtype<Bool> (typeof<PyType> _res_3@339@01) (as Example<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_5@326@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 805 | p1_5@326@01 | live]
; [else-branch: 805 | !(p1_5@326@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 805 | p1_5@326@01]
(assert p1_5@326@01)
(assert (not (= _res@338@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_5@327@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 806 | p2_5@327@01 | live]
; [else-branch: 806 | !(p2_5@327@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 806 | p2_5@327@01]
(assert p2_5@327@01)
(assert (not (= _res_3@339@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
  $Snap.unit))
; [eval] p1_5 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 807 | p1_5@326@01 | live]
; [else-branch: 807 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 807 | p1_5@326@01]
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  p1_5@326@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))
  $Snap.unit))
; [eval] p2_5 ==> issubtype(typeof(_res_3.Example_fp), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 808 | p2_5@327@01 | live]
; [else-branch: 808 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 808 | p2_5@327@01]
; [eval] issubtype(typeof(_res_3.Example_fp), int())
; [eval] typeof(_res_3.Example_fp)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  p2_5@327@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 809 | p1_5@326@01 | live]
; [else-branch: 809 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 809 | p1_5@326@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 810 | p2_5@327@01 | live]
; [else-branch: 810 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 810 | p2_5@327@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))
  $Snap.unit))
; [eval] p1_5 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 811 | p1_5@326@01 | live]
; [else-branch: 811 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 811 | p1_5@326@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_5@326@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))
  $Snap.unit))
; [eval] p2_5 ==> issubtype(typeof(_res_3.Example_gp), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 812 | p2_5@327@01 | live]
; [else-branch: 812 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 812 | p2_5@327@01]
; [eval] issubtype(typeof(_res_3.Example_gp), int())
; [eval] typeof(_res_3.Example_gp)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_5@327@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))
  $Snap.unit))
; [eval] p1_5 && p2_5 ==> tuple___eq__(tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 1), tuple___create2__(_res_3.Example_fp, _res_3.Example_gp, int(), int(), 1))
; [eval] p1_5 && p2_5
(push) ; 7
; [then-branch: 813 | !(p1_5@326@01) | live]
; [else-branch: 813 | p1_5@326@01 | live]
(push) ; 8
; [then-branch: 813 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 8
(push) ; 8
; [else-branch: 813 | p1_5@326@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_5@326@01 (not p1_5@326@01)))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_5@326@01 p2_5@327@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and p1_5@326@01 p2_5@327@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 814 | p1_5@326@01 && p2_5@327@01 | live]
; [else-branch: 814 | !(p1_5@326@01 && p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 814 | p1_5@326@01 && p2_5@327@01]
(assert (and p1_5@326@01 p2_5@327@01))
; [eval] tuple___eq__(tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 1), tuple___create2__(_res_3.Example_fp, _res_3.Example_gp, int(), int(), 1))
; [eval] tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 1)
; [eval] int()
; [eval] int()
(push) ; 9
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))) (as int<PyType>  PyType)))
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))) (as int<PyType>  PyType))
  (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))
; [eval] tuple___create2__(_res_3.Example_fp, _res_3.Example_gp, int(), int(), 1)
; [eval] int()
; [eval] int()
(push) ; 9
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))) (as int<PyType>  PyType)))
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))) (as int<PyType>  PyType))
  (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))
(push) ; 9
(assert (tuple___eq__%precondition $Snap.unit (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1) (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))
(pop) ; 9
; Joined path conditions
(assert (tuple___eq__%precondition $Snap.unit (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1) (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and p1_5@326@01 p2_5@327@01)
  (and
    p1_5@326@01
    p2_5@327@01
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))) (as int<PyType>  PyType))
    (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))) (as int<PyType>  PyType))
    (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)
    (tuple___eq__%precondition $Snap.unit (tuple___create2__ ($Snap.combine
      $Snap.unit
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1) (tuple___create2__ ($Snap.combine
      $Snap.unit
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))))
(assert (and p1_5@326@01 p2_5@327@01))
(assert (=>
  (and p1_5@326@01 p2_5@327@01)
  (tuple___eq__ $Snap.unit (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1) (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))))
  $Snap.unit))
; [eval] p1_5 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 815 | p1_5@326@01 | live]
; [else-branch: 815 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 815 | p1_5@326@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))))
  $Snap.unit))
; [eval] p2_5 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 816 | p2_5@327@01 | live]
; [else-branch: 816 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 816 | p2_5@327@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 806 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
  $Snap.unit))
; [eval] p1_5 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not p1_5@326@01))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 817 | p1_5@326@01 | live]
; [else-branch: 817 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 817 | p1_5@326@01]
(assert p1_5@326@01)
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert p1_5@326@01)
(assert (=>
  p1_5@326@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))
  $Snap.unit))
; [eval] p2_5 ==> issubtype(typeof(_res_3.Example_fp), int())
(push) ; 5
; [then-branch: 818 | p2_5@327@01 | dead]
; [else-branch: 818 | !(p2_5@327@01) | live]
(push) ; 6
; [else-branch: 818 | !(p2_5@327@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 819 | p1_5@326@01 | live]
; [else-branch: 819 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 819 | p1_5@326@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))
; [then-branch: 820 | p2_5@327@01 | dead]
; [else-branch: 820 | !(p2_5@327@01) | live]
(push) ; 6
; [else-branch: 820 | !(p2_5@327@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))
  $Snap.unit))
; [eval] p1_5 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 821 | p1_5@326@01 | live]
; [else-branch: 821 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 821 | p1_5@326@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_5@326@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))
  $Snap.unit))
; [eval] p2_5 ==> issubtype(typeof(_res_3.Example_gp), int())
(push) ; 7
; [then-branch: 822 | p2_5@327@01 | dead]
; [else-branch: 822 | !(p2_5@327@01) | live]
(push) ; 8
; [else-branch: 822 | !(p2_5@327@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))
  $Snap.unit))
; [eval] p1_5 && p2_5 ==> tuple___eq__(tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 1), tuple___create2__(_res_3.Example_fp, _res_3.Example_gp, int(), int(), 1))
; [eval] p1_5 && p2_5
(push) ; 7
; [then-branch: 823 | !(p1_5@326@01) | live]
; [else-branch: 823 | p1_5@326@01 | live]
(push) ; 8
; [then-branch: 823 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 8
(push) ; 8
; [else-branch: 823 | p1_5@326@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_5@326@01 (not p1_5@326@01)))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_5@326@01 p2_5@327@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 824 | p1_5@326@01 && p2_5@327@01 | dead]
; [else-branch: 824 | !(p1_5@326@01 && p2_5@327@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 824 | !(p1_5@326@01 && p2_5@327@01)]
(assert (not (and p1_5@326@01 p2_5@327@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (and p1_5@326@01 p2_5@327@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))))
  $Snap.unit))
; [eval] p1_5 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 825 | p1_5@326@01 | live]
; [else-branch: 825 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 825 | p1_5@326@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))))
  $Snap.unit))
; [eval] p2_5 ==> true
(push) ; 7
; [then-branch: 826 | p2_5@327@01 | dead]
; [else-branch: 826 | !(p2_5@327@01) | live]
(push) ; 8
; [else-branch: 826 | !(p2_5@327@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 805 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_5@327@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 827 | p2_5@327@01 | live]
; [else-branch: 827 | !(p2_5@327@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 827 | p2_5@327@01]
(assert p2_5@327@01)
(assert (not (= _res_3@339@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
  $Snap.unit))
; [eval] p1_5 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 5
; [then-branch: 828 | p1_5@326@01 | dead]
; [else-branch: 828 | !(p1_5@326@01) | live]
(push) ; 6
; [else-branch: 828 | !(p1_5@326@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))
  $Snap.unit))
; [eval] p2_5 ==> issubtype(typeof(_res_3.Example_fp), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 829 | p2_5@327@01 | live]
; [else-branch: 829 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 829 | p2_5@327@01]
; [eval] issubtype(typeof(_res_3.Example_fp), int())
; [eval] typeof(_res_3.Example_fp)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  p2_5@327@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))
; [then-branch: 830 | p1_5@326@01 | dead]
; [else-branch: 830 | !(p1_5@326@01) | live]
(push) ; 5
; [else-branch: 830 | !(p1_5@326@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 831 | p2_5@327@01 | live]
; [else-branch: 831 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 831 | p2_5@327@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))
  $Snap.unit))
; [eval] p1_5 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 7
; [then-branch: 832 | p1_5@326@01 | dead]
; [else-branch: 832 | !(p1_5@326@01) | live]
(push) ; 8
; [else-branch: 832 | !(p1_5@326@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))
  $Snap.unit))
; [eval] p2_5 ==> issubtype(typeof(_res_3.Example_gp), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 833 | p2_5@327@01 | live]
; [else-branch: 833 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 833 | p2_5@327@01]
; [eval] issubtype(typeof(_res_3.Example_gp), int())
; [eval] typeof(_res_3.Example_gp)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_5@327@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))
  $Snap.unit))
; [eval] p1_5 && p2_5 ==> tuple___eq__(tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 1), tuple___create2__(_res_3.Example_fp, _res_3.Example_gp, int(), int(), 1))
; [eval] p1_5 && p2_5
(push) ; 7
; [then-branch: 834 | !(p1_5@326@01) | live]
; [else-branch: 834 | p1_5@326@01 | live]
(push) ; 8
; [then-branch: 834 | !(p1_5@326@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 834 | p1_5@326@01]
(assert p1_5@326@01)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_5@326@01 (not p1_5@326@01)))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_5@326@01 p2_5@327@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 835 | p1_5@326@01 && p2_5@327@01 | dead]
; [else-branch: 835 | !(p1_5@326@01 && p2_5@327@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 835 | !(p1_5@326@01 && p2_5@327@01)]
(assert (not (and p1_5@326@01 p2_5@327@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (and p1_5@326@01 p2_5@327@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))))
  $Snap.unit))
; [eval] p1_5 ==> true
(push) ; 7
; [then-branch: 836 | p1_5@326@01 | dead]
; [else-branch: 836 | !(p1_5@326@01) | live]
(push) ; 8
; [else-branch: 836 | !(p1_5@326@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))))
  $Snap.unit))
; [eval] p2_5 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 837 | p2_5@327@01 | live]
; [else-branch: 837 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 837 | p2_5@327@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 827 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
  $Snap.unit))
; [eval] p1_5 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 5
; [then-branch: 838 | p1_5@326@01 | dead]
; [else-branch: 838 | !(p1_5@326@01) | live]
(push) ; 6
; [else-branch: 838 | !(p1_5@326@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))
  $Snap.unit))
; [eval] p2_5 ==> issubtype(typeof(_res_3.Example_fp), int())
(push) ; 5
; [then-branch: 839 | p2_5@327@01 | dead]
; [else-branch: 839 | !(p2_5@327@01) | live]
(push) ; 6
; [else-branch: 839 | !(p2_5@327@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))
; [then-branch: 840 | p1_5@326@01 | dead]
; [else-branch: 840 | !(p1_5@326@01) | live]
(push) ; 5
; [else-branch: 840 | !(p1_5@326@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))
; [then-branch: 841 | p2_5@327@01 | dead]
; [else-branch: 841 | !(p2_5@327@01) | live]
(push) ; 6
; [else-branch: 841 | !(p2_5@327@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))
  $Snap.unit))
; [eval] p1_5 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 7
; [then-branch: 842 | p1_5@326@01 | dead]
; [else-branch: 842 | !(p1_5@326@01) | live]
(push) ; 8
; [else-branch: 842 | !(p1_5@326@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))
  $Snap.unit))
; [eval] p2_5 ==> issubtype(typeof(_res_3.Example_gp), int())
(push) ; 7
; [then-branch: 843 | p2_5@327@01 | dead]
; [else-branch: 843 | !(p2_5@327@01) | live]
(push) ; 8
; [else-branch: 843 | !(p2_5@327@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))
  $Snap.unit))
; [eval] p1_5 && p2_5 ==> tuple___eq__(tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 1), tuple___create2__(_res_3.Example_fp, _res_3.Example_gp, int(), int(), 1))
; [eval] p1_5 && p2_5
(push) ; 7
; [then-branch: 844 | !(p1_5@326@01) | live]
; [else-branch: 844 | p1_5@326@01 | live]
(push) ; 8
; [then-branch: 844 | !(p1_5@326@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 844 | p1_5@326@01]
(assert p1_5@326@01)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_5@326@01 (not p1_5@326@01)))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_5@326@01 p2_5@327@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 845 | p1_5@326@01 && p2_5@327@01 | dead]
; [else-branch: 845 | !(p1_5@326@01 && p2_5@327@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 845 | !(p1_5@326@01 && p2_5@327@01)]
(assert (not (and p1_5@326@01 p2_5@327@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (and p1_5@326@01 p2_5@327@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))))
  $Snap.unit))
; [eval] p1_5 ==> true
(push) ; 7
; [then-branch: 846 | p1_5@326@01 | dead]
; [else-branch: 846 | !(p1_5@326@01) | live]
(push) ; 8
; [else-branch: 846 | !(p1_5@326@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))))))))
  $Snap.unit))
; [eval] p2_5 ==> true
(push) ; 7
; [then-branch: 847 | p2_5@327@01 | dead]
; [else-branch: 847 | !(p2_5@327@01) | live]
(push) ; 8
; [else-branch: 847 | !(p2_5@327@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var ret1_2: Bool
(declare-const ret1_2@342@01 Bool)
; [exec]
; var ret2_2: Bool
(declare-const ret2_2@343@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@344@01 $Ref)
; [exec]
; var _err_3: Ref
(declare-const _err_3@345@01 $Ref)
; [exec]
; var a_2: Ref
(declare-const a_2@346@01 $Ref)
; [exec]
; var a_2_0: Ref
(declare-const a_2_0@347@01 $Ref)
; [exec]
; var b_2: Ref
(declare-const b_2@348@01 $Ref)
; [exec]
; var b_2_0: Ref
(declare-const b_2_0@349@01 $Ref)
; [exec]
; var secret_14: Ref
(declare-const secret_14@350@01 $Ref)
; [exec]
; var secret_14_0: Ref
(declare-const secret_14_0@351@01 $Ref)
; [exec]
; var Example_res_5: Ref
(declare-const Example_res_5@352@01 $Ref)
; [exec]
; var Example_res_5_0: Ref
(declare-const Example_res_5_0@353@01 $Ref)
; [exec]
; var Example_res_6: Ref
(declare-const Example_res_6@354@01 $Ref)
; [exec]
; var Example_res_6_0: Ref
(declare-const Example_res_6_0@355@01 $Ref)
; [exec]
; var _cwl_161: Perm
(declare-const _cwl_161@356@01 $Perm)
; [exec]
; var _cwl_161_0: Perm
(declare-const _cwl_161_0@357@01 $Perm)
; [exec]
; var _method_measures_161: Seq[Measure$]
(declare-const _method_measures_161@358@01 Seq<Measure$>)
; [exec]
; var _method_measures_161_0: Seq[Measure$]
(declare-const _method_measures_161_0@359@01 Seq<Measure$>)
; [exec]
; var tmp_5: Ref
(declare-const tmp_5@360@01 $Ref)
; [exec]
; var tmp_6: Ref
(declare-const tmp_6@361@01 $Ref)
; [exec]
; var p1_6: Bool
(declare-const p1_6@362@01 Bool)
; [exec]
; var p2_6: Bool
(declare-const p2_6@363@01 Bool)
; [exec]
; var p3_2: Bool
(declare-const p3_2@364@01 Bool)
; [exec]
; var p4_2: Bool
(declare-const p4_2@365@01 Bool)
; [exec]
; inhale p1_5
(declare-const $t@366@01 $Snap)
(assert (= $t@366@01 $Snap.unit))
(assert p1_5@326@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ret1_2 := false
; [exec]
; ret2_2 := false
; [eval] p1_5 && !ret1_2
(set-option :timeout 0)
(push) ; 3
; [then-branch: 848 | !(p1_5@326@01) | live]
; [else-branch: 848 | p1_5@326@01 | live]
(push) ; 4
; [then-branch: 848 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 4
(push) ; 4
; [else-branch: 848 | p1_5@326@01]
; [eval] !ret1_2
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1_5@326@01 (not p1_5@326@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 849 | p1_5@326@01 | live]
; [else-branch: 849 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 849 | p1_5@326@01]
; [exec]
; _method_measures_161 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; secret_14 := secret_2
; [eval] p2_5 && !ret2_2
(push) ; 4
; [then-branch: 850 | !(p2_5@327@01) | live]
; [else-branch: 850 | p2_5@327@01 | live]
(push) ; 5
; [then-branch: 850 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 5
(push) ; 5
; [else-branch: 850 | p2_5@327@01]
(assert p2_5@327@01)
; [eval] !ret2_2
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or p2_5@327@01 (not p2_5@327@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_5@327@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 851 | p2_5@327@01 | live]
; [else-branch: 851 | !(p2_5@327@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 851 | p2_5@327@01]
(assert p2_5@327@01)
; [exec]
; _method_measures_161_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res_3 := null
; [exec]
; _err_3 := null
; [exec]
; secret_14_0 := secret_2_0
; [exec]
; tmp_5 := new()
(declare-const tmp_5@367@01 $Ref)
(assert (not (= tmp_5@367@01 $Ref.null)))
(assert (not (= tmp_5@367@01 secret_2_0@335@01)))
(assert (not (= tmp_5@367@01 _cthread_161@328@01)))
(assert (not (= tmp_5@367@01 Example_res_5_0@353@01)))
(assert (not (= tmp_5@367@01 Example_res_6@354@01)))
(assert (not (= tmp_5@367@01 a_2_0@347@01)))
(assert (not (= tmp_5@367@01 _cthread_161_0@329@01)))
(assert (not (= tmp_5@367@01 Example_res_5@352@01)))
(assert (not (= tmp_5@367@01 b_2@348@01)))
(assert (not (= tmp_5@367@01 a_2@346@01)))
(assert (not (= tmp_5@367@01 tmp_5@360@01)))
(assert (not (= tmp_5@367@01 secret_2@334@01)))
(assert (not (= tmp_5@367@01 tmp_6@361@01)))
(assert (not (= tmp_5@367@01 b_2_0@349@01)))
(assert (not (= tmp_5@367@01 Example_res_6_0@355@01)))
; [eval] p1_5 && !ret1_2
(push) ; 5
; [then-branch: 852 | !(p1_5@326@01) | live]
; [else-branch: 852 | p1_5@326@01 | live]
(push) ; 6
; [then-branch: 852 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 6
(push) ; 6
; [else-branch: 852 | p1_5@326@01]
; [eval] !ret1_2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 853 | p1_5@326@01 | live]
; [else-branch: 853 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 853 | p1_5@326@01]
; [exec]
; Example_res_5 := tmp_5
; [eval] p2_5 && !ret2_2
(push) ; 6
; [then-branch: 854 | !(p2_5@327@01) | live]
; [else-branch: 854 | p2_5@327@01 | live]
(push) ; 7
; [then-branch: 854 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 7
(push) ; 7
; [else-branch: 854 | p2_5@327@01]
; [eval] !ret2_2
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 855 | p2_5@327@01 | live]
; [else-branch: 855 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 855 | p2_5@327@01]
; [exec]
; Example_res_5_0 := tmp_5
; [eval] p1_5 && !ret1_2
(push) ; 7
; [then-branch: 856 | !(p1_5@326@01) | live]
; [else-branch: 856 | p1_5@326@01 | live]
(push) ; 8
; [then-branch: 856 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 8
(push) ; 8
; [else-branch: 856 | p1_5@326@01]
; [eval] !ret1_2
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 857 | p1_5@326@01 | live]
; [else-branch: 857 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 857 | p1_5@326@01]
; [exec]
; inhale typeof(Example_res_5) == Example()
(declare-const $t@368@01 $Snap)
(assert (= $t@368@01 $Snap.unit))
; [eval] typeof(Example_res_5) == Example()
; [eval] typeof(Example_res_5)
; [eval] Example()
(assert (= (typeof<PyType> tmp_5@367@01) (as Example<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_5, 1888441915154752436293), write)
(declare-const $t@369@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_5, 1906888659228461987909), write)
(declare-const $t@370@01 $Snap)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_5 && !ret2_2
(set-option :timeout 0)
(push) ; 8
; [then-branch: 858 | !(p2_5@327@01) | live]
; [else-branch: 858 | p2_5@327@01 | live]
(push) ; 9
; [then-branch: 858 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 9
(push) ; 9
; [else-branch: 858 | p2_5@327@01]
; [eval] !ret2_2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 859 | p2_5@327@01 | live]
; [else-branch: 859 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 859 | p2_5@327@01]
; [exec]
; inhale typeof(Example_res_5_0) == Example()
(declare-const $t@371@01 $Snap)
(assert (= $t@371@01 $Snap.unit))
; [eval] typeof(Example_res_5_0) == Example()
; [eval] typeof(Example_res_5_0)
; [eval] Example()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(Example_res_5_0, 1888441915154752436293), write)
(declare-const $t@372@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(Example_res_5_0, 1906888659228461987909), write)
(declare-const $t@373@01 $Snap)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_5 && !ret1_2 || p2_5 && !ret2_2
; [eval] p1_5 && !ret1_2
(set-option :timeout 0)
(push) ; 9
; [then-branch: 860 | !(p1_5@326@01) | live]
; [else-branch: 860 | p1_5@326@01 | live]
(push) ; 10
; [then-branch: 860 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 10
(push) ; 10
; [else-branch: 860 | p1_5@326@01]
; [eval] !ret1_2
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 861 | p1_5@326@01 | live]
; [else-branch: 861 | !(p1_5@326@01) | live]
(push) ; 10
; [then-branch: 861 | p1_5@326@01]
(pop) ; 10
(push) ; 10
; [else-branch: 861 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
; [eval] p2_5 && !ret2_2
(push) ; 11
; [then-branch: 862 | !(p2_5@327@01) | live]
; [else-branch: 862 | p2_5@327@01 | live]
(push) ; 12
; [then-branch: 862 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 12
(push) ; 12
; [else-branch: 862 | p2_5@327@01]
; [eval] !ret2_2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not (or p1_5@326@01 p2_5@327@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (or p1_5@326@01 p2_5@327@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 863 | p1_5@326@01 || p2_5@327@01 | live]
; [else-branch: 863 | !(p1_5@326@01 || p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 863 | p1_5@326@01 || p2_5@327@01]
(assert (or p1_5@326@01 p2_5@327@01))
; [exec]
; var tmp1_29: Ref
(declare-const tmp1_29@374@01 $Ref)
; [exec]
; var tmp2_29: Ref
(declare-const tmp2_29@375@01 $Ref)
; [exec]
; var tmp1_30: Seq[Measure$]
(declare-const tmp1_30@376@01 Seq<Measure$>)
; [exec]
; var tmp2_30: Seq[Measure$]
(declare-const tmp2_30@377@01 Seq<Measure$>)
; [exec]
; var tmp1_31: Perm
(declare-const tmp1_31@378@01 $Perm)
; [exec]
; var tmp2_31: Perm
(declare-const tmp2_31@379@01 $Perm)
; [exec]
; var tmp1_32: Ref
(declare-const tmp1_32@380@01 $Ref)
; [exec]
; var tmp2_32: Ref
(declare-const tmp2_32@381@01 $Ref)
; [exec]
; var tmp1_33: Perm
(declare-const tmp1_33@382@01 $Perm)
; [exec]
; var tmp2_33: Perm
(declare-const tmp2_33@383@01 $Perm)
; [eval] p1_5 && !ret1_2
(push) ; 10
; [then-branch: 864 | !(p1_5@326@01) | live]
; [else-branch: 864 | p1_5@326@01 | live]
(push) ; 11
; [then-branch: 864 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 11
(push) ; 11
; [else-branch: 864 | p1_5@326@01]
; [eval] !ret1_2
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 865 | p1_5@326@01 | live]
; [else-branch: 865 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 865 | p1_5@326@01]
; [exec]
; tmp1_29 := _cthread_161
; [exec]
; tmp1_30 := _method_measures_161
; [exec]
; tmp1_31 := _residue_161
; [exec]
; tmp1_32 := Example_res_5
; [eval] p2_5 && !ret2_2
(push) ; 11
; [then-branch: 866 | !(p2_5@327@01) | live]
; [else-branch: 866 | p2_5@327@01 | live]
(push) ; 12
; [then-branch: 866 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 12
(push) ; 12
; [else-branch: 866 | p2_5@327@01]
; [eval] !ret2_2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 867 | p2_5@327@01 | live]
; [else-branch: 867 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 867 | p2_5@327@01]
; [exec]
; tmp2_29 := _cthread_161_0
; [exec]
; tmp2_30 := _method_measures_161_0
; [exec]
; tmp2_31 := _residue_161_0
; [exec]
; tmp2_32 := Example_res_5_0
; [exec]
; tmp1_33, tmp2_33 := Example___init__(p1_5 && !ret1_2, p2_5 && !ret2_2, tmp1_29,
;   tmp2_29, tmp1_30, tmp2_30, tmp1_31, tmp2_31, tmp1_32, tmp2_32)
; [eval] p1_5 && !ret1_2
(push) ; 12
; [then-branch: 868 | !(p1_5@326@01) | live]
; [else-branch: 868 | p1_5@326@01 | live]
(push) ; 13
; [then-branch: 868 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 13
(push) ; 13
; [else-branch: 868 | p1_5@326@01]
; [eval] !ret1_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [eval] p2_5 && !ret2_2
(push) ; 12
; [then-branch: 869 | !(p2_5@327@01) | live]
; [else-branch: 869 | p2_5@327@01 | live]
(push) ; 13
; [then-branch: 869 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 13
(push) ; 13
; [else-branch: 869 | p2_5@327@01]
; [eval] !ret2_2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [eval] p1_23 ==> _cthread_156 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 870 | p1_5@326@01 | live]
; [else-branch: 870 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 870 | p1_5@326@01]
; [eval] _cthread_156 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p2_23 ==> _cthread_156_0 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 871 | p2_5@327@01 | live]
; [else-branch: 871 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 871 | p2_5@327@01]
; [eval] _cthread_156_0 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1_23 ==> issubtype(typeof(_cthread_156), Thread_0())
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 872 | p1_5@326@01 | live]
; [else-branch: 872 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 872 | p1_5@326@01]
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p2_23 ==> issubtype(typeof(_cthread_156_0), Thread_0())
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 873 | p2_5@327@01 | live]
; [else-branch: 873 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 873 | p2_5@327@01]
; [eval] issubtype(typeof(_cthread_156_0), Thread_0())
; [eval] typeof(_cthread_156_0)
; [eval] Thread_0()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1_23 ==> self != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 874 | p1_5@326@01 | live]
; [else-branch: 874 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 874 | p1_5@326@01]
; [eval] self != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=> p1_5@326@01 (not (= tmp_5@367@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=> p1_5@326@01 (not (= tmp_5@367@01 $Ref.null))))
; [eval] p2_23 ==> self_3 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 875 | p2_5@327@01 | live]
; [else-branch: 875 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 875 | p2_5@327@01]
; [eval] self_3 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=> p2_5@327@01 (not (= tmp_5@367@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=> p2_5@327@01 (not (= tmp_5@367@01 $Ref.null))))
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 876 | p1_5@326@01 | live]
; [else-branch: 876 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 876 | p1_5@326@01]
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 877 | p2_5@327@01 | live]
; [else-branch: 877 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 877 | p2_5@327@01]
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 878 | p1_5@326@01 | live]
; [else-branch: 878 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 878 | p1_5@326@01]
(push) ; 15
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 879 | p2_5@327@01 | live]
; [else-branch: 879 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 879 | p2_5@327@01]
; [eval] p1_23 ==> issubtype(typeof(self), Example())
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 880 | p1_5@326@01 | live]
; [else-branch: 880 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 880 | p1_5@326@01]
; [eval] issubtype(typeof(self), Example())
; [eval] typeof(self)
; [eval] Example()
(pop) ; 17
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (=>
  p1_5@326@01
  (issubtype<Bool> (typeof<PyType> tmp_5@367@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_5@326@01
  (issubtype<Bool> (typeof<PyType> tmp_5@367@01) (as Example<PyType>  PyType))))
; [eval] p2_23 ==> issubtype(typeof(self_3), Example())
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 881 | p2_5@327@01 | live]
; [else-branch: 881 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 881 | p2_5@327@01]
; [eval] issubtype(typeof(self_3), Example())
; [eval] typeof(self_3)
; [eval] Example()
(pop) ; 17
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (=>
  p2_5@327@01
  (issubtype<Bool> (typeof<PyType> tmp_5@367@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_5@327@01
  (issubtype<Bool> (typeof<PyType> tmp_5@367@01) (as Example<PyType>  PyType))))
; [eval] p1_23 ==> self != null
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 882 | p1_5@326@01 | live]
; [else-branch: 882 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 882 | p1_5@326@01]
; [eval] self != null
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p2_23 ==> self_3 != null
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 883 | p2_5@327@01 | live]
; [else-branch: 883 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 883 | p2_5@327@01]
; [eval] self_3 != null
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p1_23 ==> perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 884 | p1_5@326@01 | live]
; [else-branch: 884 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 884 | p1_5@326@01]
; [eval] perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(push) ; 18
; [then-branch: 885 | False | live]
; [else-branch: 885 | True | live]
(push) ; 19
; [then-branch: 885 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 885 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false)
(push) ; 20
; [then-branch: 886 | False | live]
; [else-branch: 886 | True | live]
(push) ; 21
; [then-branch: 886 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 886 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false)
(push) ; 22
; [then-branch: 887 | False | live]
; [else-branch: 887 | True | live]
(push) ; 23
; [then-branch: 887 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 887 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false)
(push) ; 24
; [then-branch: 888 | False | live]
; [else-branch: 888 | True | live]
(push) ; 25
; [then-branch: 888 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 888 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p2_23 ==> perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 889 | p2_5@327@01 | live]
; [else-branch: 889 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 889 | p2_5@327@01]
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none
; [eval] perm(MustTerminate_0(_cthread_156_0))
(push) ; 18
; [then-branch: 890 | False | live]
; [else-branch: 890 | True | live]
(push) ; 19
; [then-branch: 890 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 890 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false)
(push) ; 20
; [then-branch: 891 | False | live]
; [else-branch: 891 | True | live]
(push) ; 21
; [then-branch: 891 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 891 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false)
(push) ; 22
; [then-branch: 892 | False | live]
; [else-branch: 892 | True | live]
(push) ; 23
; [then-branch: 892 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 892 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false)
(push) ; 24
; [then-branch: 893 | False | live]
; [else-branch: 893 | True | live]
(push) ; 25
; [then-branch: 893 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 893 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(declare-const _current_wait_level_156@384@01 $Perm)
(declare-const _current_wait_level_156_0@385@01 $Perm)
(declare-const $t@386@01 $Snap)
(assert (= $t@386@01 ($Snap.combine ($Snap.first $t@386@01) ($Snap.second $t@386@01))))
(assert (= ($Snap.first $t@386@01) $Snap.unit))
; [eval] p1_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 894 | p1_5@326@01 | live]
; [else-branch: 894 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 894 | p1_5@326@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 18
; [then-branch: 895 | False | live]
; [else-branch: 895 | True | live]
(push) ; 19
; [then-branch: 895 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 895 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 20
; [then-branch: 896 | False | live]
; [else-branch: 896 | True | live]
(push) ; 21
; [then-branch: 896 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 896 | True]
; [eval] _residue_156 <= _current_wait_level_156
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=> p1_5@326@01 (<= _residue_161@332@01 _current_wait_level_156@384@01)))
(assert (=
  ($Snap.second $t@386@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@386@01))
    ($Snap.second ($Snap.second $t@386@01)))))
(assert (= ($Snap.first ($Snap.second $t@386@01)) $Snap.unit))
; [eval] p2_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 897 | p2_5@327@01 | live]
; [else-branch: 897 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 897 | p2_5@327@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 18
; [then-branch: 898 | False | live]
; [else-branch: 898 | True | live]
(push) ; 19
; [then-branch: 898 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 898 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 20
; [then-branch: 899 | False | live]
; [else-branch: 899 | True | live]
(push) ; 21
; [then-branch: 899 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 899 | True]
; [eval] _residue_156_0 <= _current_wait_level_156_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=> p2_5@327@01 (<= _residue_161_0@333@01 _current_wait_level_156_0@385@01)))
(assert (=
  ($Snap.second ($Snap.second $t@386@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@386@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 900 | p1_5@326@01 | live]
; [else-branch: 900 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 900 | p1_5@326@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@386@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 901 | p2_5@327@01 | live]
; [else-branch: 901 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 901 | p2_5@327@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_f), int())
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 902 | p1_5@326@01 | live]
; [else-branch: 902 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 902 | p1_5@326@01]
; [eval] issubtype(typeof(self.Example_f), int())
; [eval] typeof(self.Example_f)
; [eval] int()
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  p1_5@326@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_fp), int())
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 903 | p2_5@327@01 | live]
; [else-branch: 903 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 903 | p2_5@327@01]
; [eval] issubtype(typeof(self_3.Example_fp), int())
; [eval] typeof(self_3.Example_fp)
; [eval] int()
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  p2_5@327@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 904 | p1_5@326@01 | live]
; [else-branch: 904 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 904 | p1_5@326@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 905 | p2_5@327@01 | live]
; [else-branch: 905 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 905 | p2_5@327@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_g), int())
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 906 | p1_5@326@01 | live]
; [else-branch: 906 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 906 | p1_5@326@01]
; [eval] issubtype(typeof(self.Example_g), int())
; [eval] typeof(self.Example_g)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p1_5@326@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_gp), int())
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 907 | p2_5@327@01 | live]
; [else-branch: 907 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 907 | p2_5@327@01]
; [eval] issubtype(typeof(self_3.Example_gp), int())
; [eval] typeof(self_3.Example_gp)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p2_5@327@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_f, __prim__int___box__(0))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 908 | p1_5@326@01 | live]
; [else-branch: 908 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 908 | p1_5@326@01]
; [eval] int___eq__(self.Example_f, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p1_5@326@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p1_5@326@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_fp, __prim__int___box__(0))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 909 | p2_5@327@01 | live]
; [else-branch: 909 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 909 | p2_5@327@01]
; [eval] int___eq__(self_3.Example_fp, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p2_5@327@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p2_5@327@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_g, __prim__int___box__(1))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 910 | p1_5@326@01 | live]
; [else-branch: 910 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 910 | p1_5@326@01]
; [eval] int___eq__(self.Example_g, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p1_5@326@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p1_5@326@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_gp, __prim__int___box__(1))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 911 | p2_5@327@01 | live]
; [else-branch: 911 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 911 | p2_5@327@01]
; [eval] int___eq__(self_3.Example_gp, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p2_5@327@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p2_5@327@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> true
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 912 | p1_5@326@01 | live]
; [else-branch: 912 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 912 | p1_5@326@01]
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> true
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 913 | p2_5@327@01 | live]
; [else-branch: 913 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 913 | p2_5@327@01]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] p1_5 && !ret1_2
(set-option :timeout 0)
(push) ; 20
; [then-branch: 914 | !(p1_5@326@01) | live]
; [else-branch: 914 | p1_5@326@01 | live]
(push) ; 21
; [then-branch: 914 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 21
(push) ; 21
; [else-branch: 914 | p1_5@326@01]
; [eval] !ret1_2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 915 | p1_5@326@01 | live]
; [else-branch: 915 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 915 | p1_5@326@01]
; [exec]
; _cwl_161 := tmp1_33
; [eval] p2_5 && !ret2_2
(push) ; 21
; [then-branch: 916 | !(p2_5@327@01) | live]
; [else-branch: 916 | p2_5@327@01 | live]
(push) ; 22
; [then-branch: 916 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 22
(push) ; 22
; [else-branch: 916 | p2_5@327@01]
; [eval] !ret2_2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 917 | p2_5@327@01 | live]
; [else-branch: 917 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 917 | p2_5@327@01]
; [exec]
; _cwl_161_0 := tmp2_33
; [eval] p1_5 && !ret1_2
(push) ; 22
; [then-branch: 918 | !(p1_5@326@01) | live]
; [else-branch: 918 | p1_5@326@01 | live]
(push) ; 23
; [then-branch: 918 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 23
(push) ; 23
; [else-branch: 918 | p1_5@326@01]
; [eval] !ret1_2
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 919 | p1_5@326@01 | live]
; [else-branch: 919 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 919 | p1_5@326@01]
; [exec]
; a_2 := Example_res_5
; [exec]
; inhale _isDefined(3301217)
(declare-const $t@387@01 $Snap)
(assert (= $t@387@01 $Snap.unit))
; [eval] _isDefined(3301217)
(push) ; 23
(assert (_isDefined%precondition $Snap.unit 3301217))
(pop) ; 23
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3301217))
(assert (_isDefined $Snap.unit 3301217))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_5 && !ret2_2
(set-option :timeout 0)
(push) ; 23
; [then-branch: 920 | !(p2_5@327@01) | live]
; [else-branch: 920 | p2_5@327@01 | live]
(push) ; 24
; [then-branch: 920 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 24
(push) ; 24
; [else-branch: 920 | p2_5@327@01]
; [eval] !ret2_2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 921 | p2_5@327@01 | live]
; [else-branch: 921 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 921 | p2_5@327@01]
; [exec]
; a_2_0 := Example_res_5_0
; [exec]
; inhale true
(declare-const $t@388@01 $Snap)
(assert (= $t@388@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; tmp_6 := new()
(declare-const tmp_6@389@01 $Ref)
(assert (not (= tmp_6@389@01 $Ref.null)))
(assert (not (= tmp_6@389@01 secret_2_0@335@01)))
(assert (not (= tmp_6@389@01 _cthread_161@328@01)))
(assert (not (= tmp_6@389@01 Example_res_6@354@01)))
(assert (not
  (=
    tmp_6@389@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))
(assert (not
  (=
    tmp_6@389@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
(assert (not
  (=
    tmp_6@389@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))
(assert (not
  (=
    tmp_6@389@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))))))
(assert (not (= tmp_6@389@01 _cthread_161_0@329@01)))
(assert (not (= tmp_6@389@01 b_2@348@01)))
(assert (not (= tmp_6@389@01 tmp_5@367@01)))
(assert (not (= tmp_6@389@01 secret_2@334@01)))
(assert (not (= tmp_6@389@01 tmp_6@361@01)))
(assert (not (= tmp_6@389@01 b_2_0@349@01)))
(assert (not (= tmp_6@389@01 Example_res_6_0@355@01)))
; [eval] p1_5 && !ret1_2
(set-option :timeout 0)
(push) ; 24
; [then-branch: 922 | !(p1_5@326@01) | live]
; [else-branch: 922 | p1_5@326@01 | live]
(push) ; 25
; [then-branch: 922 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 25
(push) ; 25
; [else-branch: 922 | p1_5@326@01]
; [eval] !ret1_2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 923 | p1_5@326@01 | live]
; [else-branch: 923 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 923 | p1_5@326@01]
; [exec]
; Example_res_6 := tmp_6
; [eval] p2_5 && !ret2_2
(push) ; 25
; [then-branch: 924 | !(p2_5@327@01) | live]
; [else-branch: 924 | p2_5@327@01 | live]
(push) ; 26
; [then-branch: 924 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 26
(push) ; 26
; [else-branch: 924 | p2_5@327@01]
; [eval] !ret2_2
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 925 | p2_5@327@01 | live]
; [else-branch: 925 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 925 | p2_5@327@01]
; [exec]
; Example_res_6_0 := tmp_6
; [eval] p1_5 && !ret1_2
(push) ; 26
; [then-branch: 926 | !(p1_5@326@01) | live]
; [else-branch: 926 | p1_5@326@01 | live]
(push) ; 27
; [then-branch: 926 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 27
(push) ; 27
; [else-branch: 926 | p1_5@326@01]
; [eval] !ret1_2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 927 | p1_5@326@01 | live]
; [else-branch: 927 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 927 | p1_5@326@01]
; [exec]
; inhale typeof(Example_res_6) == Example()
(declare-const $t@390@01 $Snap)
(assert (= $t@390@01 $Snap.unit))
; [eval] typeof(Example_res_6) == Example()
; [eval] typeof(Example_res_6)
; [eval] Example()
(assert (= (typeof<PyType> tmp_6@389@01) (as Example<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_6, 1888441915154752436293), write)
(declare-const $t@391@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_6, 1906888659228461987909), write)
(declare-const $t@392@01 $Snap)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_5 && !ret2_2
(set-option :timeout 0)
(push) ; 27
; [then-branch: 928 | !(p2_5@327@01) | live]
; [else-branch: 928 | p2_5@327@01 | live]
(push) ; 28
; [then-branch: 928 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 28
(push) ; 28
; [else-branch: 928 | p2_5@327@01]
; [eval] !ret2_2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(push) ; 27
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 929 | p2_5@327@01 | live]
; [else-branch: 929 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 929 | p2_5@327@01]
; [exec]
; inhale typeof(Example_res_6_0) == Example()
(declare-const $t@393@01 $Snap)
(assert (= $t@393@01 $Snap.unit))
; [eval] typeof(Example_res_6_0) == Example()
; [eval] typeof(Example_res_6_0)
; [eval] Example()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(Example_res_6_0, 1888441915154752436293), write)
(declare-const $t@394@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(Example_res_6_0, 1906888659228461987909), write)
(declare-const $t@395@01 $Snap)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_5 && !ret1_2 || p2_5 && !ret2_2
; [eval] p1_5 && !ret1_2
(set-option :timeout 0)
(push) ; 28
; [then-branch: 930 | !(p1_5@326@01) | live]
; [else-branch: 930 | p1_5@326@01 | live]
(push) ; 29
; [then-branch: 930 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 29
(push) ; 29
; [else-branch: 930 | p1_5@326@01]
; [eval] !ret1_2
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
; [then-branch: 931 | p1_5@326@01 | live]
; [else-branch: 931 | !(p1_5@326@01) | live]
(push) ; 29
; [then-branch: 931 | p1_5@326@01]
(pop) ; 29
(push) ; 29
; [else-branch: 931 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
; [eval] p2_5 && !ret2_2
(push) ; 30
; [then-branch: 932 | !(p2_5@327@01) | live]
; [else-branch: 932 | p2_5@327@01 | live]
(push) ; 31
; [then-branch: 932 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 31
(push) ; 31
; [else-branch: 932 | p2_5@327@01]
; [eval] !ret2_2
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (not (or p1_5@326@01 p2_5@327@01))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 933 | p1_5@326@01 || p2_5@327@01 | live]
; [else-branch: 933 | !(p1_5@326@01 || p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 933 | p1_5@326@01 || p2_5@327@01]
; [exec]
; var tmp1_34: Ref
(declare-const tmp1_34@396@01 $Ref)
; [exec]
; var tmp2_34: Ref
(declare-const tmp2_34@397@01 $Ref)
; [exec]
; var tmp1_35: Seq[Measure$]
(declare-const tmp1_35@398@01 Seq<Measure$>)
; [exec]
; var tmp2_35: Seq[Measure$]
(declare-const tmp2_35@399@01 Seq<Measure$>)
; [exec]
; var tmp1_36: Perm
(declare-const tmp1_36@400@01 $Perm)
; [exec]
; var tmp2_36: Perm
(declare-const tmp2_36@401@01 $Perm)
; [exec]
; var tmp1_37: Ref
(declare-const tmp1_37@402@01 $Ref)
; [exec]
; var tmp2_37: Ref
(declare-const tmp2_37@403@01 $Ref)
; [exec]
; var tmp1_38: Perm
(declare-const tmp1_38@404@01 $Perm)
; [exec]
; var tmp2_38: Perm
(declare-const tmp2_38@405@01 $Perm)
; [eval] p1_5 && !ret1_2
(push) ; 29
; [then-branch: 934 | !(p1_5@326@01) | live]
; [else-branch: 934 | p1_5@326@01 | live]
(push) ; 30
; [then-branch: 934 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 30
(push) ; 30
; [else-branch: 934 | p1_5@326@01]
; [eval] !ret1_2
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 935 | p1_5@326@01 | live]
; [else-branch: 935 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 935 | p1_5@326@01]
; [exec]
; tmp1_34 := _cthread_161
; [exec]
; tmp1_35 := _method_measures_161
; [exec]
; tmp1_36 := _residue_161
; [exec]
; tmp1_37 := Example_res_6
; [eval] p2_5 && !ret2_2
(push) ; 30
; [then-branch: 936 | !(p2_5@327@01) | live]
; [else-branch: 936 | p2_5@327@01 | live]
(push) ; 31
; [then-branch: 936 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 31
(push) ; 31
; [else-branch: 936 | p2_5@327@01]
; [eval] !ret2_2
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 937 | p2_5@327@01 | live]
; [else-branch: 937 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 937 | p2_5@327@01]
; [exec]
; tmp2_34 := _cthread_161_0
; [exec]
; tmp2_35 := _method_measures_161_0
; [exec]
; tmp2_36 := _residue_161_0
; [exec]
; tmp2_37 := Example_res_6_0
; [exec]
; tmp1_38, tmp2_38 := Example___init__(p1_5 && !ret1_2, p2_5 && !ret2_2, tmp1_34,
;   tmp2_34, tmp1_35, tmp2_35, tmp1_36, tmp2_36, tmp1_37, tmp2_37)
; [eval] p1_5 && !ret1_2
(push) ; 31
; [then-branch: 938 | !(p1_5@326@01) | live]
; [else-branch: 938 | p1_5@326@01 | live]
(push) ; 32
; [then-branch: 938 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 32
(push) ; 32
; [else-branch: 938 | p1_5@326@01]
; [eval] !ret1_2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [eval] p2_5 && !ret2_2
(push) ; 31
; [then-branch: 939 | !(p2_5@327@01) | live]
; [else-branch: 939 | p2_5@327@01 | live]
(push) ; 32
; [then-branch: 939 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 32
(push) ; 32
; [else-branch: 939 | p2_5@327@01]
; [eval] !ret2_2
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [eval] p1_23 ==> _cthread_156 != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 940 | p1_5@326@01 | live]
; [else-branch: 940 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 940 | p1_5@326@01]
; [eval] _cthread_156 != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_23 ==> _cthread_156_0 != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 941 | p2_5@327@01 | live]
; [else-branch: 941 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 941 | p2_5@327@01]
; [eval] _cthread_156_0 != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p1_23 ==> issubtype(typeof(_cthread_156), Thread_0())
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 942 | p1_5@326@01 | live]
; [else-branch: 942 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 942 | p1_5@326@01]
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_23 ==> issubtype(typeof(_cthread_156_0), Thread_0())
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 943 | p2_5@327@01 | live]
; [else-branch: 943 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 943 | p2_5@327@01]
; [eval] issubtype(typeof(_cthread_156_0), Thread_0())
; [eval] typeof(_cthread_156_0)
; [eval] Thread_0()
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p1_23 ==> self != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 944 | p1_5@326@01 | live]
; [else-branch: 944 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 944 | p1_5@326@01]
; [eval] self != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(assert (not (=> p1_5@326@01 (not (= tmp_6@389@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(assert (=> p1_5@326@01 (not (= tmp_6@389@01 $Ref.null))))
; [eval] p2_23 ==> self_3 != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 945 | p2_5@327@01 | live]
; [else-branch: 945 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 945 | p2_5@327@01]
; [eval] self_3 != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(assert (not (=> p2_5@327@01 (not (= tmp_6@389@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(assert (=> p2_5@327@01 (not (= tmp_6@389@01 $Ref.null))))
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 946 | p1_5@326@01 | live]
; [else-branch: 946 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 946 | p1_5@326@01]
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 947 | p2_5@327@01 | live]
; [else-branch: 947 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 947 | p2_5@327@01]
(push) ; 33
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 948 | p1_5@326@01 | live]
; [else-branch: 948 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 948 | p1_5@326@01]
(push) ; 34
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 949 | p2_5@327@01 | live]
; [else-branch: 949 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 949 | p2_5@327@01]
; [eval] p1_23 ==> issubtype(typeof(self), Example())
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 950 | p1_5@326@01 | live]
; [else-branch: 950 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 950 | p1_5@326@01]
; [eval] issubtype(typeof(self), Example())
; [eval] typeof(self)
; [eval] Example()
(pop) ; 36
(pop) ; 35
; Joined path conditions
(push) ; 35
(assert (not (=>
  p1_5@326@01
  (issubtype<Bool> (typeof<PyType> tmp_6@389@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_5@326@01
  (issubtype<Bool> (typeof<PyType> tmp_6@389@01) (as Example<PyType>  PyType))))
; [eval] p2_23 ==> issubtype(typeof(self_3), Example())
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 951 | p2_5@327@01 | live]
; [else-branch: 951 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 951 | p2_5@327@01]
; [eval] issubtype(typeof(self_3), Example())
; [eval] typeof(self_3)
; [eval] Example()
(pop) ; 36
(pop) ; 35
; Joined path conditions
(push) ; 35
(assert (not (=>
  p2_5@327@01
  (issubtype<Bool> (typeof<PyType> tmp_6@389@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_5@327@01
  (issubtype<Bool> (typeof<PyType> tmp_6@389@01) (as Example<PyType>  PyType))))
; [eval] p1_23 ==> self != null
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 952 | p1_5@326@01 | live]
; [else-branch: 952 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 952 | p1_5@326@01]
; [eval] self != null
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p2_23 ==> self_3 != null
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 953 | p2_5@327@01 | live]
; [else-branch: 953 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 953 | p2_5@327@01]
; [eval] self_3 != null
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p1_23 ==> perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 954 | p1_5@326@01 | live]
; [else-branch: 954 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 954 | p1_5@326@01]
; [eval] perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(push) ; 37
; [then-branch: 955 | False | live]
; [else-branch: 955 | True | live]
(push) ; 38
; [then-branch: 955 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 955 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false)
(push) ; 39
; [then-branch: 956 | False | live]
; [else-branch: 956 | True | live]
(push) ; 40
; [then-branch: 956 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 956 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false)
(push) ; 41
; [then-branch: 957 | False | live]
; [else-branch: 957 | True | live]
(push) ; 42
; [then-branch: 957 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 957 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false)
(push) ; 43
; [then-branch: 958 | False | live]
; [else-branch: 958 | True | live]
(push) ; 44
; [then-branch: 958 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 958 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p2_23 ==> perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 959 | p2_5@327@01 | live]
; [else-branch: 959 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 959 | p2_5@327@01]
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none
; [eval] perm(MustTerminate_0(_cthread_156_0))
(push) ; 37
; [then-branch: 960 | False | live]
; [else-branch: 960 | True | live]
(push) ; 38
; [then-branch: 960 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 960 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false)
(push) ; 39
; [then-branch: 961 | False | live]
; [else-branch: 961 | True | live]
(push) ; 40
; [then-branch: 961 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 961 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false)
(push) ; 41
; [then-branch: 962 | False | live]
; [else-branch: 962 | True | live]
(push) ; 42
; [then-branch: 962 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 962 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false)
(push) ; 43
; [then-branch: 963 | False | live]
; [else-branch: 963 | True | live]
(push) ; 44
; [then-branch: 963 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 963 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false)
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
(declare-const _current_wait_level_156@406@01 $Perm)
(declare-const _current_wait_level_156_0@407@01 $Perm)
(declare-const $t@408@01 $Snap)
(assert (= $t@408@01 ($Snap.combine ($Snap.first $t@408@01) ($Snap.second $t@408@01))))
(assert (= ($Snap.first $t@408@01) $Snap.unit))
; [eval] p1_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 964 | p1_5@326@01 | live]
; [else-branch: 964 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 964 | p1_5@326@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 37
; [then-branch: 965 | False | live]
; [else-branch: 965 | True | live]
(push) ; 38
; [then-branch: 965 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 965 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 39
; [then-branch: 966 | False | live]
; [else-branch: 966 | True | live]
(push) ; 40
; [then-branch: 966 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 966 | True]
; [eval] _residue_156 <= _current_wait_level_156
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
(assert (=> p1_5@326@01 (<= _residue_161@332@01 _current_wait_level_156@406@01)))
(assert (=
  ($Snap.second $t@408@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@408@01))
    ($Snap.second ($Snap.second $t@408@01)))))
(assert (= ($Snap.first ($Snap.second $t@408@01)) $Snap.unit))
; [eval] p2_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 967 | p2_5@327@01 | live]
; [else-branch: 967 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 967 | p2_5@327@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 37
; [then-branch: 968 | False | live]
; [else-branch: 968 | True | live]
(push) ; 38
; [then-branch: 968 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 968 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 39
; [then-branch: 969 | False | live]
; [else-branch: 969 | True | live]
(push) ; 40
; [then-branch: 969 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 969 | True]
; [eval] _residue_156_0 <= _current_wait_level_156_0
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
(assert (=> p2_5@327@01 (<= _residue_161_0@333@01 _current_wait_level_156_0@407@01)))
(assert (=
  ($Snap.second ($Snap.second $t@408@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@408@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 970 | p1_5@326@01 | live]
; [else-branch: 970 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 970 | p1_5@326@01]
(push) ; 36
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@408@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 971 | p2_5@327@01 | live]
; [else-branch: 971 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 971 | p2_5@327@01]
(push) ; 37
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_f), int())
(set-option :timeout 0)
(push) ; 37
(push) ; 38
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 972 | p1_5@326@01 | live]
; [else-branch: 972 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 972 | p1_5@326@01]
; [eval] issubtype(typeof(self.Example_f), int())
; [eval] typeof(self.Example_f)
; [eval] int()
(pop) ; 38
(pop) ; 37
; Joined path conditions
(assert (=>
  p1_5@326@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_fp), int())
(push) ; 37
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 973 | p2_5@327@01 | live]
; [else-branch: 973 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 973 | p2_5@327@01]
; [eval] issubtype(typeof(self_3.Example_fp), int())
; [eval] typeof(self_3.Example_fp)
; [eval] int()
(pop) ; 38
(pop) ; 37
; Joined path conditions
(assert (=>
  p2_5@327@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 974 | p1_5@326@01 | live]
; [else-branch: 974 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 974 | p1_5@326@01]
(push) ; 38
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))
(set-option :timeout 0)
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 975 | p2_5@327@01 | live]
; [else-branch: 975 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 975 | p2_5@327@01]
(push) ; 39
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_g), int())
(set-option :timeout 0)
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 976 | p1_5@326@01 | live]
; [else-branch: 976 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 976 | p1_5@326@01]
; [eval] issubtype(typeof(self.Example_g), int())
; [eval] typeof(self.Example_g)
; [eval] int()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p1_5@326@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_gp), int())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 977 | p2_5@327@01 | live]
; [else-branch: 977 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 977 | p2_5@327@01]
; [eval] issubtype(typeof(self_3.Example_gp), int())
; [eval] typeof(self_3.Example_gp)
; [eval] int()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p2_5@327@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_f, __prim__int___box__(0))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 978 | p1_5@326@01 | live]
; [else-branch: 978 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 978 | p1_5@326@01]
; [eval] int___eq__(self.Example_f, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01)))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01)))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p1_5@326@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01)))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p1_5@326@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01)))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_fp, __prim__int___box__(0))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 979 | p2_5@327@01 | live]
; [else-branch: 979 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 979 | p2_5@327@01]
; [eval] int___eq__(self_3.Example_fp, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01))))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p2_5@327@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01))))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p2_5@327@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01))))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_g, __prim__int___box__(1))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 980 | p1_5@326@01 | live]
; [else-branch: 980 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 980 | p1_5@326@01]
; [eval] int___eq__(self.Example_g, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p1_5@326@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p1_5@326@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_gp, __prim__int___box__(1))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 981 | p2_5@327@01 | live]
; [else-branch: 981 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 981 | p2_5@327@01]
; [eval] int___eq__(self_3.Example_gp, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p2_5@327@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p2_5@327@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 982 | p1_5@326@01 | live]
; [else-branch: 982 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 982 | p1_5@326@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 983 | p2_5@327@01 | live]
; [else-branch: 983 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 983 | p2_5@327@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] p1_5 && !ret1_2
(set-option :timeout 0)
(push) ; 39
; [then-branch: 984 | !(p1_5@326@01) | live]
; [else-branch: 984 | p1_5@326@01 | live]
(push) ; 40
; [then-branch: 984 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 40
(push) ; 40
; [else-branch: 984 | p1_5@326@01]
; [eval] !ret1_2
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(push) ; 39
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 985 | p1_5@326@01 | live]
; [else-branch: 985 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 985 | p1_5@326@01]
; [exec]
; _cwl_161 := tmp1_38
; [eval] p2_5 && !ret2_2
(push) ; 40
; [then-branch: 986 | !(p2_5@327@01) | live]
; [else-branch: 986 | p2_5@327@01 | live]
(push) ; 41
; [then-branch: 986 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 41
(push) ; 41
; [else-branch: 986 | p2_5@327@01]
; [eval] !ret2_2
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 987 | p2_5@327@01 | live]
; [else-branch: 987 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 987 | p2_5@327@01]
; [exec]
; _cwl_161_0 := tmp2_38
; [eval] p1_5 && !ret1_2
(push) ; 41
; [then-branch: 988 | !(p1_5@326@01) | live]
; [else-branch: 988 | p1_5@326@01 | live]
(push) ; 42
; [then-branch: 988 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 42
(push) ; 42
; [else-branch: 988 | p1_5@326@01]
; [eval] !ret1_2
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 989 | p1_5@326@01 | live]
; [else-branch: 989 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 989 | p1_5@326@01]
; [exec]
; b_2 := Example_res_6
; [exec]
; inhale _isDefined(3301218)
(declare-const $t@409@01 $Snap)
(assert (= $t@409@01 $Snap.unit))
; [eval] _isDefined(3301218)
(push) ; 42
(assert (_isDefined%precondition $Snap.unit 3301218))
(pop) ; 42
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3301218))
(assert (_isDefined $Snap.unit 3301218))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_5 && !ret2_2
(set-option :timeout 0)
(push) ; 42
; [then-branch: 990 | !(p2_5@327@01) | live]
; [else-branch: 990 | p2_5@327@01 | live]
(push) ; 43
; [then-branch: 990 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 43
(push) ; 43
; [else-branch: 990 | p2_5@327@01]
; [eval] !ret2_2
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 991 | p2_5@327@01 | live]
; [else-branch: 991 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 991 | p2_5@327@01]
; [exec]
; b_2_0 := Example_res_6_0
; [exec]
; inhale true
(declare-const $t@410@01 $Snap)
(assert (= $t@410@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; p1_6 := p1_5 && (!ret1_2 && bool___unbox__(secret_14))
; [eval] p1_5 && (!ret1_2 && bool___unbox__(secret_14))
(set-option :timeout 0)
(push) ; 43
; [then-branch: 992 | !(p1_5@326@01) | live]
; [else-branch: 992 | p1_5@326@01 | live]
(push) ; 44
; [then-branch: 992 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 44
(push) ; 44
; [else-branch: 992 | p1_5@326@01]
; [eval] !ret1_2
(push) ; 45
; [then-branch: 993 | False | live]
; [else-branch: 993 | True | live]
(push) ; 46
; [then-branch: 993 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 993 | True]
; [eval] bool___unbox__(secret_14)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_2@334@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_2@334@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_2@334@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_2@334@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_2@334@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_2@334@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_2@334@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_5@326@01
  (and
    (issubtype<Bool> (typeof<PyType> secret_2@334@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_2@334@01))))
(declare-const p1_6@411@01 Bool)
(assert (= p1_6@411@01 (and p1_5@326@01 (bool___unbox__ $Snap.unit secret_2@334@01))))
; [exec]
; p2_6 := p2_5 && (!ret2_2 && bool___unbox__(secret_14_0))
; [eval] p2_5 && (!ret2_2 && bool___unbox__(secret_14_0))
(push) ; 43
; [then-branch: 994 | !(p2_5@327@01) | live]
; [else-branch: 994 | p2_5@327@01 | live]
(push) ; 44
; [then-branch: 994 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 44
(push) ; 44
; [else-branch: 994 | p2_5@327@01]
; [eval] !ret2_2
(push) ; 45
; [then-branch: 995 | False | live]
; [else-branch: 995 | True | live]
(push) ; 46
; [then-branch: 995 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 995 | True]
; [eval] bool___unbox__(secret_14_0)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_2_0@335@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_2_0@335@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_2_0@335@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_2_0@335@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_2_0@335@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_2_0@335@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_2_0@335@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_5@327@01
  (and
    (issubtype<Bool> (typeof<PyType> secret_2_0@335@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_2_0@335@01))))
(declare-const p2_6@412@01 Bool)
(assert (= p2_6@412@01 (and p2_5@327@01 (bool___unbox__ $Snap.unit secret_2_0@335@01))))
; [exec]
; p3_2 := p1_5 && (!ret1_2 && !bool___unbox__(secret_14))
; [eval] p1_5 && (!ret1_2 && !bool___unbox__(secret_14))
(push) ; 43
; [then-branch: 996 | !(p1_5@326@01) | live]
; [else-branch: 996 | p1_5@326@01 | live]
(push) ; 44
; [then-branch: 996 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 44
(push) ; 44
; [else-branch: 996 | p1_5@326@01]
; [eval] !ret1_2
(push) ; 45
; [then-branch: 997 | False | live]
; [else-branch: 997 | True | live]
(push) ; 46
; [then-branch: 997 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 997 | True]
; [eval] !bool___unbox__(secret_14)
; [eval] bool___unbox__(secret_14)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_2@334@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_2@334@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_2@334@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_2@334@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_2@334@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_2@334@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_2@334@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(declare-const p3_2@413@01 Bool)
(assert (=
  p3_2@413@01
  (and p1_5@326@01 (not (bool___unbox__ $Snap.unit secret_2@334@01)))))
; [exec]
; p4_2 := p2_5 && (!ret2_2 && !bool___unbox__(secret_14_0))
; [eval] p2_5 && (!ret2_2 && !bool___unbox__(secret_14_0))
(push) ; 43
; [then-branch: 998 | !(p2_5@327@01) | live]
; [else-branch: 998 | p2_5@327@01 | live]
(push) ; 44
; [then-branch: 998 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 44
(push) ; 44
; [else-branch: 998 | p2_5@327@01]
; [eval] !ret2_2
(push) ; 45
; [then-branch: 999 | False | live]
; [else-branch: 999 | True | live]
(push) ; 46
; [then-branch: 999 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 999 | True]
; [eval] !bool___unbox__(secret_14_0)
; [eval] bool___unbox__(secret_14_0)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_2_0@335@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_2_0@335@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_2_0@335@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_2_0@335@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_2_0@335@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_2_0@335@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_2_0@335@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(declare-const p4_2@414@01 Bool)
(assert (=
  p4_2@414@01
  (and p2_5@327@01 (not (bool___unbox__ $Snap.unit secret_2_0@335@01)))))
; [eval] p1_6 && !ret1_2
(push) ; 43
; [then-branch: 1000 | !(p1_6@411@01) | live]
; [else-branch: 1000 | p1_6@411@01 | live]
(push) ; 44
; [then-branch: 1000 | !(p1_6@411@01)]
(assert (not p1_6@411@01))
(pop) ; 44
(push) ; 44
; [else-branch: 1000 | p1_6@411@01]
(assert p1_6@411@01)
; [eval] !ret1_2
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(assert (or p1_6@411@01 (not p1_6@411@01)))
(push) ; 43
(set-option :timeout 10)
(assert (not (not p1_6@411@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not p1_6@411@01))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1001 | p1_6@411@01 | live]
; [else-branch: 1001 | !(p1_6@411@01) | live]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 1001 | p1_6@411@01]
(assert p1_6@411@01)
; [exec]
; _res := _checkDefined(a_2, 3301217)
; [eval] _checkDefined(a_2, 3301217)
(push) ; 44
; [eval] _isDefined(id)
(push) ; 45
(pop) ; 45
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_5@367@01 3301217))
(pop) ; 44
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_5@367@01 3301217))
(declare-const _res@415@01 $Ref)
(assert (= _res@415@01 (_checkDefined $Snap.unit tmp_5@367@01 3301217)))
; [exec]
; ret1_2 := true
; [eval] p2_6 && !ret2_2
(push) ; 44
; [then-branch: 1002 | !(p2_6@412@01) | live]
; [else-branch: 1002 | p2_6@412@01 | live]
(push) ; 45
; [then-branch: 1002 | !(p2_6@412@01)]
(assert (not p2_6@412@01))
(pop) ; 45
(push) ; 45
; [else-branch: 1002 | p2_6@412@01]
(assert p2_6@412@01)
; [eval] !ret2_2
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(assert (or p2_6@412@01 (not p2_6@412@01)))
(push) ; 44
(set-option :timeout 10)
(assert (not (not p2_6@412@01)))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not p2_6@412@01))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1003 | p2_6@412@01 | live]
; [else-branch: 1003 | !(p2_6@412@01) | live]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 1003 | p2_6@412@01]
(assert p2_6@412@01)
; [exec]
; _res_3 := a_2_0
; [exec]
; ret2_2 := true
; [eval] p1_5 && !ret1_2
(push) ; 45
; [then-branch: 1004 | !(p1_5@326@01) | live]
; [else-branch: 1004 | p1_5@326@01 | live]
(push) ; 46
; [then-branch: 1004 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 46
(push) ; 46
; [else-branch: 1004 | p1_5@326@01]
; [eval] !ret1_2
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
; [then-branch: 1005 | False | dead]
; [else-branch: 1005 | True | live]
(push) ; 45
; [else-branch: 1005 | True]
(pop) ; 45
; [eval] !(p1_5 && !ret1_2)
; [eval] p1_5 && !ret1_2
(push) ; 45
; [then-branch: 1006 | !(p1_5@326@01) | live]
; [else-branch: 1006 | p1_5@326@01 | live]
(push) ; 46
; [then-branch: 1006 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 46
(push) ; 46
; [else-branch: 1006 | p1_5@326@01]
; [eval] !ret1_2
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(push) ; 45
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1007 | True | live]
; [else-branch: 1007 | False | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 1007 | True]
; [eval] p2_5 && !ret2_2
(push) ; 46
; [then-branch: 1008 | !(p2_5@327@01) | live]
; [else-branch: 1008 | p2_5@327@01 | live]
(push) ; 47
; [then-branch: 1008 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 47
(push) ; 47
; [else-branch: 1008 | p2_5@327@01]
; [eval] !ret2_2
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
; [then-branch: 1009 | False | dead]
; [else-branch: 1009 | True | live]
(push) ; 46
; [else-branch: 1009 | True]
(pop) ; 46
; [eval] !(p2_5 && !ret2_2)
; [eval] p2_5 && !ret2_2
(push) ; 46
; [then-branch: 1010 | !(p2_5@327@01) | live]
; [else-branch: 1010 | p2_5@327@01 | live]
(push) ; 47
; [then-branch: 1010 | !(p2_5@327@01)]
(assert (not p2_5@327@01))
(pop) ; 47
(push) ; 47
; [else-branch: 1010 | p2_5@327@01]
; [eval] !ret2_2
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(push) ; 46
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1011 | True | live]
; [else-branch: 1011 | False | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 1011 | True]
; [exec]
; assert true
; [eval] p1_5 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1012 | p1_5@326@01 | live]
; [else-branch: 1012 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1012 | p1_5@326@01]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p2_5 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1013 | p2_5@327@01 | live]
; [else-branch: 1013 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1013 | p2_5@327@01]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p1_5 ==> issubtype(typeof(_res), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1014 | p1_5@326@01 | live]
; [else-branch: 1014 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1014 | p1_5@326@01]
; [eval] issubtype(typeof(_res), Example())
; [eval] typeof(_res)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p1_5@326@01
  (issubtype<Bool> (typeof<PyType> _res@415@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_5@326@01
  (issubtype<Bool> (typeof<PyType> _res@415@01) (as Example<PyType>  PyType))))
; [eval] p2_5 ==> issubtype(typeof(_res_3), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1015 | p2_5@327@01 | live]
; [else-branch: 1015 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1015 | p2_5@327@01]
; [eval] issubtype(typeof(_res_3), Example())
; [eval] typeof(_res_3)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1016 | p1_5@326@01 | live]
; [else-branch: 1016 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 47
; [then-branch: 1016 | p1_5@326@01]
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 _res@415@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 _res@415@01)))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1017 | p2_5@327@01 | live]
; [else-branch: 1017 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1017 | p2_5@327@01]
; [eval] p1_5 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1018 | p1_5@326@01 | live]
; [else-branch: 1018 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 1018 | p1_5@326@01]
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 _res@415@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 _res@415@01)))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
; [eval] p2_5 ==> issubtype(typeof(_res_3.Example_fp), int())
(set-option :timeout 0)
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1019 | p2_5@327@01 | live]
; [else-branch: 1019 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 1019 | p2_5@327@01]
; [eval] issubtype(typeof(_res_3.Example_fp), int())
; [eval] typeof(_res_3.Example_fp)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
(push) ; 49
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1020 | p1_5@326@01 | live]
; [else-branch: 1020 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 1020 | p1_5@326@01]
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 _res@415@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 _res@415@01)))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1021 | p2_5@327@01 | live]
; [else-branch: 1021 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 1021 | p2_5@327@01]
; [eval] p1_5 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p1_5@326@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1022 | p1_5@326@01 | live]
; [else-branch: 1022 | !(p1_5@326@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1022 | p1_5@326@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 _res@415@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 _res@415@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p2_5 ==> issubtype(typeof(_res_3.Example_gp), int())
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p2_5@327@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1023 | p2_5@327@01 | live]
; [else-branch: 1023 | !(p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1023 | p2_5@327@01]
; [eval] issubtype(typeof(_res_3.Example_gp), int())
; [eval] typeof(_res_3.Example_gp)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p1_5 && p2_5 ==> tuple___eq__(tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 1), tuple___create2__(_res_3.Example_fp, _res_3.Example_gp, int(), int(), 1))
; [eval] p1_5 && p2_5
(push) ; 51
; [then-branch: 1024 | !(p1_5@326@01) | live]
; [else-branch: 1024 | p1_5@326@01 | live]
(push) ; 52
; [then-branch: 1024 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
(pop) ; 52
(push) ; 52
; [else-branch: 1024 | p1_5@326@01]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_5@326@01 p2_5@327@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1_5@326@01 p2_5@327@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1025 | p1_5@326@01 && p2_5@327@01 | live]
; [else-branch: 1025 | !(p1_5@326@01 && p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1025 | p1_5@326@01 && p2_5@327@01]
(assert (and p1_5@326@01 p2_5@327@01))
; [eval] tuple___eq__(tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 1), tuple___create2__(_res_3.Example_fp, _res_3.Example_gp, int(), int(), 1))
; [eval] tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 1)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 _res@415@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 _res@415@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 _res@415@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 _res@415@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [eval] int()
; [eval] int()
(set-option :timeout 0)
(push) ; 53
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType)))
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType))
  (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))
; [eval] tuple___create2__(_res_3.Example_fp, _res_3.Example_gp, int(), int(), 1)
; [eval] int()
; [eval] int()
(push) ; 53
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))) (as int<PyType>  PyType)))
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))) (as int<PyType>  PyType))
  (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))
(push) ; 53
(assert (tuple___eq__%precondition $Snap.unit (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1) (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))
(pop) ; 53
; Joined path conditions
(assert (tuple___eq__%precondition $Snap.unit (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1) (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=>
  (and p1_5@326@01 p2_5@327@01)
  (and
    p1_5@326@01
    p2_5@327@01
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType))
    (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))) (as int<PyType>  PyType))
    (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)
    (tuple___eq__%precondition $Snap.unit (tuple___create2__ ($Snap.combine
      $Snap.unit
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1) (tuple___create2__ ($Snap.combine
      $Snap.unit
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))))
(assert (and p1_5@326@01 p2_5@327@01))
(push) ; 51
(assert (not (=>
  (and p1_5@326@01 p2_5@327@01)
  (tuple___eq__ $Snap.unit (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1) (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 tmp_5@367@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 tmp_5@367@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 tmp_5@367@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 tmp_5@367@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_5@367@01 tmp_6@389@01)) (not (= tmp_6@389@01 tmp_5@367@01))))
; [eval] p1_5 && p2_5 ==> tuple___eq__(tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 1), tuple___create2__(_res_3.Example_fp, _res_3.Example_gp, int(), int(), 1))
; [eval] p1_5 && p2_5
(set-option :timeout 0)
(push) ; 51
; [then-branch: 1026 | !(p1_5@326@01) | live]
; [else-branch: 1026 | p1_5@326@01 | live]
(push) ; 52
; [then-branch: 1026 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))
(assert false)
(pop) ; 52
(set-option :timeout 0)
(push) ; 52
; [else-branch: 1026 | p1_5@326@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_6@389@01 tmp_5@367@01)) (not (= tmp_5@367@01 tmp_6@389@01))))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=> (not p1_5@326@01) false))
; Joined path conditions
(assert (=>
  p1_5@326@01
  (and (not (= tmp_6@389@01 tmp_5@367@01)) (not (= tmp_5@367@01 tmp_6@389@01)))))
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_5@326@01 p2_5@327@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1_5@326@01 p2_5@327@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1027 | p1_5@326@01 && p2_5@327@01 | live]
; [else-branch: 1027 | !(p1_5@326@01 && p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1027 | p1_5@326@01 && p2_5@327@01]
(assert (and p1_5@326@01 p2_5@327@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_6@389@01 tmp_5@367@01)) (not (= tmp_5@367@01 tmp_6@389@01))))
; [eval] tuple___eq__(tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 1), tuple___create2__(_res_3.Example_fp, _res_3.Example_gp, int(), int(), 1))
; [eval] tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 1)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 _res@415@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 _res@415@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 _res@415@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 _res@415@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [eval] int()
; [eval] int()
(set-option :timeout 0)
(push) ; 53
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType)))
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType))
  (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))
; [eval] tuple___create2__(_res_3.Example_fp, _res_3.Example_gp, int(), int(), 1)
; [eval] int()
; [eval] int()
(push) ; 53
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))) (as int<PyType>  PyType)))
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))) (as int<PyType>  PyType))
  (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))
(push) ; 53
(assert (tuple___eq__%precondition $Snap.unit (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1) (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))
(pop) ; 53
; Joined path conditions
(assert (tuple___eq__%precondition $Snap.unit (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1) (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=>
  (and p1_5@326@01 p2_5@327@01)
  (and
    p1_5@326@01
    p2_5@327@01
    (not (= tmp_6@389@01 tmp_5@367@01))
    (not (= tmp_5@367@01 tmp_6@389@01))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType))
    (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))) (as int<PyType>  PyType))
    (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)
    (tuple___eq__%precondition $Snap.unit (tuple___create2__ ($Snap.combine
      $Snap.unit
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1) (tuple___create2__ ($Snap.combine
      $Snap.unit
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))))
(assert (and p1_5@326@01 p2_5@327@01))
(push) ; 51
(assert (not (=>
  (and p1_5@326@01 p2_5@327@01)
  (tuple___eq__ $Snap.unit (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1) (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] p1_5 && p2_5 ==> tuple___eq__(tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 1), tuple___create2__(_res_3.Example_fp, _res_3.Example_gp, int(), int(), 1))
; [eval] p1_5 && p2_5
(set-option :timeout 0)
(push) ; 51
; [then-branch: 1028 | !(p1_5@326@01) | live]
; [else-branch: 1028 | p1_5@326@01 | live]
(push) ; 52
; [then-branch: 1028 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 tmp_5@367@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 tmp_5@367@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 tmp_5@367@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 tmp_5@367@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))))
(assert false)
(pop) ; 52
(set-option :timeout 0)
(push) ; 52
; [else-branch: 1028 | p1_5@326@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 tmp_5@367@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 tmp_5@367@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 tmp_5@367@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 tmp_5@367@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_5@367@01 tmp_6@389@01)) (not (= tmp_6@389@01 tmp_5@367@01))))
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_5@326@01
  (and (not (= tmp_5@367@01 tmp_6@389@01)) (not (= tmp_6@389@01 tmp_5@367@01)))))
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_5@326@01 p2_5@327@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1_5@326@01 p2_5@327@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1029 | p1_5@326@01 && p2_5@327@01 | live]
; [else-branch: 1029 | !(p1_5@326@01 && p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1029 | p1_5@326@01 && p2_5@327@01]
(assert (and p1_5@326@01 p2_5@327@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 tmp_5@367@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 tmp_5@367@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 tmp_5@367@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 tmp_5@367@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_5@367@01 tmp_6@389@01)) (not (= tmp_6@389@01 tmp_5@367@01))))
; [eval] tuple___eq__(tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 1), tuple___create2__(_res_3.Example_fp, _res_3.Example_gp, int(), int(), 1))
; [eval] tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 1)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 _res@415@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 _res@415@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [eval] int()
; [eval] int()
(set-option :timeout 0)
(push) ; 53
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType)))
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType))
  (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))
; [eval] tuple___create2__(_res_3.Example_fp, _res_3.Example_gp, int(), int(), 1)
; [eval] int()
; [eval] int()
(push) ; 53
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))) (as int<PyType>  PyType)))
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))) (as int<PyType>  PyType))
  (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))
(push) ; 53
(assert (tuple___eq__%precondition $Snap.unit (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1) (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))
(pop) ; 53
; Joined path conditions
(assert (tuple___eq__%precondition $Snap.unit (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1) (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=>
  (and p1_5@326@01 p2_5@327@01)
  (and
    p1_5@326@01
    p2_5@327@01
    (not (= tmp_5@367@01 tmp_6@389@01))
    (not (= tmp_6@389@01 tmp_5@367@01))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType))
    (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))) (as int<PyType>  PyType))
    (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)
    (tuple___eq__%precondition $Snap.unit (tuple___create2__ ($Snap.combine
      $Snap.unit
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1) (tuple___create2__ ($Snap.combine
      $Snap.unit
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))))
(assert (and p1_5@326@01 p2_5@327@01))
(push) ; 51
(assert (not (=>
  (and p1_5@326@01 p2_5@327@01)
  (tuple___eq__ $Snap.unit (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1) (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 tmp_5@367@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 tmp_5@367@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 tmp_5@367@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 tmp_5@367@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_5@367@01 tmp_6@389@01)) (not (= tmp_6@389@01 tmp_5@367@01))))
; [eval] p1_5 && p2_5 ==> tuple___eq__(tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 1), tuple___create2__(_res_3.Example_fp, _res_3.Example_gp, int(), int(), 1))
; [eval] p1_5 && p2_5
(set-option :timeout 0)
(push) ; 51
; [then-branch: 1030 | !(p1_5@326@01) | live]
; [else-branch: 1030 | p1_5@326@01 | live]
(push) ; 52
; [then-branch: 1030 | !(p1_5@326@01)]
(assert (not p1_5@326@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))
(assert false)
(pop) ; 52
(set-option :timeout 0)
(push) ; 52
; [else-branch: 1030 | p1_5@326@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_6@389@01 tmp_5@367@01)) (not (= tmp_5@367@01 tmp_6@389@01))))
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_5@326@01 p2_5@327@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1_5@326@01 p2_5@327@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1031 | p1_5@326@01 && p2_5@327@01 | live]
; [else-branch: 1031 | !(p1_5@326@01 && p2_5@327@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1031 | p1_5@326@01 && p2_5@327@01]
(assert (and p1_5@326@01 p2_5@327@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 tmp_6@389@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@408@01))))))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@408@01)))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@408@01))))))))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_6@389@01 tmp_5@367@01)) (not (= tmp_5@367@01 tmp_6@389@01))))
; [eval] tuple___eq__(tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 1), tuple___create2__(_res_3.Example_fp, _res_3.Example_gp, int(), int(), 1))
; [eval] tuple___create2__(_res.Example_f, _res.Example_g, int(), int(), 1)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 _res@415@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 _res@415@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_6@389@01 _res@415@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_5@367@01 _res@415@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [eval] int()
; [eval] int()
(set-option :timeout 0)
(push) ; 53
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType)))
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType))
  (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))
; [eval] tuple___create2__(_res_3.Example_fp, _res_3.Example_gp, int(), int(), 1)
; [eval] int()
; [eval] int()
(push) ; 53
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))) (as int<PyType>  PyType)))
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))) (as int<PyType>  PyType))
  (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))
(push) ; 53
(assert (tuple___eq__%precondition $Snap.unit (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1) (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))
(pop) ; 53
; Joined path conditions
(assert (tuple___eq__%precondition $Snap.unit (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1) (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (and p1_5@326@01 p2_5@327@01))
(push) ; 51
(assert (not (=>
  (and p1_5@326@01 p2_5@327@01)
  (tuple___eq__ $Snap.unit (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@386@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1) (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(pop) ; 50
(pop) ; 49
(pop) ; 48
(pop) ; 47
(pop) ; 46
(pop) ; 45
(pop) ; 44
(pop) ; 43
(pop) ; 42
(pop) ; 41
(pop) ; 40
(pop) ; 39
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- example_each_field_lowval ----------
(declare-const p1_7@416@01 Bool)
(declare-const p2_7@417@01 Bool)
(declare-const _cthread_162@418@01 $Ref)
(declare-const _cthread_162_0@419@01 $Ref)
(declare-const _caller_measures_162@420@01 Seq<Measure$>)
(declare-const _caller_measures_162_0@421@01 Seq<Measure$>)
(declare-const _residue_162@422@01 $Perm)
(declare-const _residue_162_0@423@01 $Perm)
(declare-const secret_3@424@01 $Ref)
(declare-const secret_3_0@425@01 $Ref)
(declare-const _current_wait_level_162@426@01 $Perm)
(declare-const _current_wait_level_162_0@427@01 $Perm)
(declare-const _res@428@01 $Ref)
(declare-const _res_4@429@01 $Ref)
(declare-const p1_7@430@01 Bool)
(declare-const p2_7@431@01 Bool)
(declare-const _cthread_162@432@01 $Ref)
(declare-const _cthread_162_0@433@01 $Ref)
(declare-const _caller_measures_162@434@01 Seq<Measure$>)
(declare-const _caller_measures_162_0@435@01 Seq<Measure$>)
(declare-const _residue_162@436@01 $Perm)
(declare-const _residue_162_0@437@01 $Perm)
(declare-const secret_3@438@01 $Ref)
(declare-const secret_3_0@439@01 $Ref)
(declare-const _current_wait_level_162@440@01 $Perm)
(declare-const _current_wait_level_162_0@441@01 $Perm)
(declare-const _res@442@01 $Ref)
(declare-const _res_4@443@01 $Ref)
(push) ; 1
(declare-const $t@444@01 $Snap)
(assert (= $t@444@01 ($Snap.combine ($Snap.first $t@444@01) ($Snap.second $t@444@01))))
(assert (= ($Snap.first $t@444@01) $Snap.unit))
; [eval] p1_7 ==> _cthread_162 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1032 | p1_7@430@01 | live]
; [else-branch: 1032 | !(p1_7@430@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1032 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] _cthread_162 != null
(pop) ; 3
(push) ; 3
; [else-branch: 1032 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_7@430@01) p1_7@430@01))
(assert (=> p1_7@430@01 (not (= _cthread_162@432@01 $Ref.null))))
(assert (=
  ($Snap.second $t@444@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@444@01))
    ($Snap.second ($Snap.second $t@444@01)))))
(assert (= ($Snap.first ($Snap.second $t@444@01)) $Snap.unit))
; [eval] p2_7 ==> _cthread_162_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1033 | p2_7@431@01 | live]
; [else-branch: 1033 | !(p2_7@431@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1033 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] _cthread_162_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 1033 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_7@431@01) p2_7@431@01))
(assert (=> p2_7@431@01 (not (= _cthread_162_0@433@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@444@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@444@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@444@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@444@01))) $Snap.unit))
; [eval] p1_7 ==> issubtype(typeof(_cthread_162), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1034 | p1_7@430@01 | live]
; [else-branch: 1034 | !(p1_7@430@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1034 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] issubtype(typeof(_cthread_162), Thread_0())
; [eval] typeof(_cthread_162)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 1034 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> _cthread_162@432@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@444@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@444@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@444@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@444@01))))
  $Snap.unit))
; [eval] p2_7 ==> issubtype(typeof(_cthread_162_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1035 | p2_7@431@01 | live]
; [else-branch: 1035 | !(p2_7@431@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1035 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] issubtype(typeof(_cthread_162_0), Thread_0())
; [eval] typeof(_cthread_162_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 1035 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_7@431@01
  (issubtype<Bool> (typeof<PyType> _cthread_162_0@433@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@444@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@444@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@444@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@444@01)))))
  $Snap.unit))
; [eval] p1_7 ==> issubtype(typeof(secret_3), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1036 | p1_7@430@01 | live]
; [else-branch: 1036 | !(p1_7@430@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1036 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] issubtype(typeof(secret_3), bool())
; [eval] typeof(secret_3)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 1036 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> secret_3@438@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@444@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@444@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@444@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@444@01))))))
  $Snap.unit))
; [eval] p2_7 ==> issubtype(typeof(secret_3_0), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1037 | p2_7@431@01 | live]
; [else-branch: 1037 | !(p2_7@431@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1037 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] issubtype(typeof(secret_3_0), bool())
; [eval] typeof(secret_3_0)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 1037 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_7@431@01
  (issubtype<Bool> (typeof<PyType> secret_3_0@439@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@444@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@444@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@444@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@444@01)))))))
  $Snap.unit))
; [eval] p1_7 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1038 | p1_7@430@01 | live]
; [else-branch: 1038 | !(p1_7@430@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1038 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 3
(push) ; 3
; [else-branch: 1038 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@444@01)))))))
  $Snap.unit))
; [eval] p2_7 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1039 | p2_7@431@01 | live]
; [else-branch: 1039 | !(p2_7@431@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1039 | p2_7@431@01]
(assert p2_7@431@01)
(pop) ; 3
(push) ; 3
; [else-branch: 1039 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@445@01 $Snap)
(assert (= $t@445@01 ($Snap.combine ($Snap.first $t@445@01) ($Snap.second $t@445@01))))
(assert (= ($Snap.first $t@445@01) $Snap.unit))
; [eval] p1_7 ==> (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_162) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_162) && _residue_162 <= _current_wait_level_162)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1040 | p1_7@430@01 | live]
; [else-branch: 1040 | !(p1_7@430@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1040 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_162) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_162) && _residue_162 <= _current_wait_level_162)
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_162)
(push) ; 5
; [then-branch: 1041 | False | live]
; [else-branch: 1041 | True | live]
(push) ; 6
; [then-branch: 1041 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 1041 | True]
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_162)
(push) ; 7
; [then-branch: 1042 | False | live]
; [else-branch: 1042 | True | live]
(push) ; 8
; [then-branch: 1042 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1042 | True]
; [eval] _residue_162 <= _current_wait_level_162
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 1040 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p1_7@430@01 (<= _residue_162@436@01 _current_wait_level_162@440@01)))
(assert (=
  ($Snap.second $t@445@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@445@01))
    ($Snap.second ($Snap.second $t@445@01)))))
(assert (= ($Snap.first ($Snap.second $t@445@01)) $Snap.unit))
; [eval] p2_7 ==> (forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: Level(_r_11) <= _current_wait_level_162_0) && ((forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: Level(_r_11) <= _current_wait_level_162_0) && _residue_162_0 <= _current_wait_level_162_0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1043 | p2_7@431@01 | live]
; [else-branch: 1043 | !(p2_7@431@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1043 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: Level(_r_11) <= _current_wait_level_162_0) && ((forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: Level(_r_11) <= _current_wait_level_162_0) && _residue_162_0 <= _current_wait_level_162_0)
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: Level(_r_11) <= _current_wait_level_162_0)
(push) ; 5
; [then-branch: 1044 | False | live]
; [else-branch: 1044 | True | live]
(push) ; 6
; [then-branch: 1044 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 1044 | True]
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: Level(_r_11) <= _current_wait_level_162_0)
(push) ; 7
; [then-branch: 1045 | False | live]
; [else-branch: 1045 | True | live]
(push) ; 8
; [then-branch: 1045 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1045 | True]
; [eval] _residue_162_0 <= _current_wait_level_162_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 1043 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p2_7@431@01 (<= _residue_162_0@437@01 _current_wait_level_162_0@441@01)))
(assert (=
  ($Snap.second ($Snap.second $t@445@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@445@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@445@01))) $Snap.unit))
; [eval] p1_7 ==> issubtype(typeof(_res), Example())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1046 | p1_7@430@01 | live]
; [else-branch: 1046 | !(p1_7@430@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1046 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] issubtype(typeof(_res), Example())
; [eval] typeof(_res)
; [eval] Example()
(pop) ; 4
(push) ; 4
; [else-branch: 1046 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> _res@442@01) (as Example<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@445@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@445@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@445@01))))
  $Snap.unit))
; [eval] p2_7 ==> issubtype(typeof(_res_4), Example())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1047 | p2_7@431@01 | live]
; [else-branch: 1047 | !(p2_7@431@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1047 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] issubtype(typeof(_res_4), Example())
; [eval] typeof(_res_4)
; [eval] Example()
(pop) ; 4
(push) ; 4
; [else-branch: 1047 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_7@431@01
  (issubtype<Bool> (typeof<PyType> _res_4@443@01) (as Example<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1048 | p1_7@430@01 | live]
; [else-branch: 1048 | !(p1_7@430@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1048 | p1_7@430@01]
(assert p1_7@430@01)
(assert (not (= _res@442@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1049 | p2_7@431@01 | live]
; [else-branch: 1049 | !(p2_7@431@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1049 | p2_7@431@01]
(assert p2_7@431@01)
(assert (not (= _res_4@443@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))
  $Snap.unit))
; [eval] p1_7 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1050 | p1_7@430@01 | live]
; [else-branch: 1050 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1050 | p1_7@430@01]
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))
  $Snap.unit))
; [eval] p2_7 ==> issubtype(typeof(_res_4.Example_fp), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1051 | p2_7@431@01 | live]
; [else-branch: 1051 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1051 | p2_7@431@01]
; [eval] issubtype(typeof(_res_4.Example_fp), int())
; [eval] typeof(_res_4.Example_fp)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  p2_7@431@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1052 | p1_7@430@01 | live]
; [else-branch: 1052 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1052 | p1_7@430@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1053 | p2_7@431@01 | live]
; [else-branch: 1053 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1053 | p2_7@431@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))
  $Snap.unit))
; [eval] p1_7 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1054 | p1_7@430@01 | live]
; [else-branch: 1054 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1054 | p1_7@430@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))
  $Snap.unit))
; [eval] p2_7 ==> issubtype(typeof(_res_4.Example_gp), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1055 | p2_7@431@01 | live]
; [else-branch: 1055 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1055 | p2_7@431@01]
; [eval] issubtype(typeof(_res_4.Example_gp), int())
; [eval] typeof(_res_4.Example_gp)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_7@431@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))
  $Snap.unit))
; [eval] p1_7 && p2_7 ==> int___eq__(_res.Example_f, _res_4.Example_fp)
; [eval] p1_7 && p2_7
(push) ; 7
; [then-branch: 1056 | !(p1_7@430@01) | live]
; [else-branch: 1056 | p1_7@430@01 | live]
(push) ; 8
; [then-branch: 1056 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1056 | p1_7@430@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_7@430@01 (not p1_7@430@01)))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_7@430@01 p2_7@431@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and p1_7@430@01 p2_7@431@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1057 | p1_7@430@01 && p2_7@431@01 | live]
; [else-branch: 1057 | !(p1_7@430@01 && p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1057 | p1_7@430@01 && p2_7@431@01]
(assert (and p1_7@430@01 p2_7@431@01))
; [eval] int___eq__(_res.Example_f, _res_4.Example_fp)
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and p1_7@430@01 p2_7@431@01)
  (and
    p1_7@430@01
    p2_7@431@01
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))
(assert (and p1_7@430@01 p2_7@431@01))
(assert (=>
  (and p1_7@430@01 p2_7@431@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))
  $Snap.unit))
; [eval] p1_7 && p2_7 ==> int___eq__(_res.Example_g, _res_4.Example_gp)
; [eval] p1_7 && p2_7
(push) ; 7
; [then-branch: 1058 | !(p1_7@430@01) | live]
; [else-branch: 1058 | p1_7@430@01 | live]
(push) ; 8
; [then-branch: 1058 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1058 | p1_7@430@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_7@430@01 p2_7@431@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and p1_7@430@01 p2_7@431@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1059 | p1_7@430@01 && p2_7@431@01 | live]
; [else-branch: 1059 | !(p1_7@430@01 && p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1059 | p1_7@430@01 && p2_7@431@01]
(assert (and p1_7@430@01 p2_7@431@01))
; [eval] int___eq__(_res.Example_g, _res_4.Example_gp)
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and p1_7@430@01 p2_7@431@01)
  (and
    p1_7@430@01
    p2_7@431@01
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))))
(assert (and p1_7@430@01 p2_7@431@01))
(assert (=>
  (and p1_7@430@01 p2_7@431@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))))
  $Snap.unit))
; [eval] p1_7 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1060 | p1_7@430@01 | live]
; [else-branch: 1060 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1060 | p1_7@430@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))))
  $Snap.unit))
; [eval] p2_7 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1061 | p2_7@431@01 | live]
; [else-branch: 1061 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1061 | p2_7@431@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 1049 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))
  $Snap.unit))
; [eval] p1_7 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1062 | p1_7@430@01 | live]
; [else-branch: 1062 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1062 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert p1_7@430@01)
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))
  $Snap.unit))
; [eval] p2_7 ==> issubtype(typeof(_res_4.Example_fp), int())
(push) ; 5
; [then-branch: 1063 | p2_7@431@01 | dead]
; [else-branch: 1063 | !(p2_7@431@01) | live]
(push) ; 6
; [else-branch: 1063 | !(p2_7@431@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1064 | p1_7@430@01 | live]
; [else-branch: 1064 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1064 | p1_7@430@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))
; [then-branch: 1065 | p2_7@431@01 | dead]
; [else-branch: 1065 | !(p2_7@431@01) | live]
(push) ; 6
; [else-branch: 1065 | !(p2_7@431@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))
  $Snap.unit))
; [eval] p1_7 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1066 | p1_7@430@01 | live]
; [else-branch: 1066 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1066 | p1_7@430@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))
  $Snap.unit))
; [eval] p2_7 ==> issubtype(typeof(_res_4.Example_gp), int())
(push) ; 7
; [then-branch: 1067 | p2_7@431@01 | dead]
; [else-branch: 1067 | !(p2_7@431@01) | live]
(push) ; 8
; [else-branch: 1067 | !(p2_7@431@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))
  $Snap.unit))
; [eval] p1_7 && p2_7 ==> int___eq__(_res.Example_f, _res_4.Example_fp)
; [eval] p1_7 && p2_7
(push) ; 7
; [then-branch: 1068 | !(p1_7@430@01) | live]
; [else-branch: 1068 | p1_7@430@01 | live]
(push) ; 8
; [then-branch: 1068 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1068 | p1_7@430@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_7@430@01 (not p1_7@430@01)))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_7@430@01 p2_7@431@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1069 | p1_7@430@01 && p2_7@431@01 | dead]
; [else-branch: 1069 | !(p1_7@430@01 && p2_7@431@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 1069 | !(p1_7@430@01 && p2_7@431@01)]
(assert (not (and p1_7@430@01 p2_7@431@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (and p1_7@430@01 p2_7@431@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))
  $Snap.unit))
; [eval] p1_7 && p2_7 ==> int___eq__(_res.Example_g, _res_4.Example_gp)
; [eval] p1_7 && p2_7
(push) ; 7
; [then-branch: 1070 | !(p1_7@430@01) | live]
; [else-branch: 1070 | p1_7@430@01 | live]
(push) ; 8
; [then-branch: 1070 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1070 | p1_7@430@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 1071 | p1_7@430@01 && p2_7@431@01 | dead]
; [else-branch: 1071 | !(p1_7@430@01 && p2_7@431@01) | live]
(push) ; 8
; [else-branch: 1071 | !(p1_7@430@01 && p2_7@431@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))))
  $Snap.unit))
; [eval] p1_7 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1072 | p1_7@430@01 | live]
; [else-branch: 1072 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1072 | p1_7@430@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))))
  $Snap.unit))
; [eval] p2_7 ==> true
(push) ; 7
; [then-branch: 1073 | p2_7@431@01 | dead]
; [else-branch: 1073 | !(p2_7@431@01) | live]
(push) ; 8
; [else-branch: 1073 | !(p2_7@431@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 1048 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1074 | p2_7@431@01 | live]
; [else-branch: 1074 | !(p2_7@431@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1074 | p2_7@431@01]
(assert p2_7@431@01)
(assert (not (= _res_4@443@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))
  $Snap.unit))
; [eval] p1_7 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 5
; [then-branch: 1075 | p1_7@430@01 | dead]
; [else-branch: 1075 | !(p1_7@430@01) | live]
(push) ; 6
; [else-branch: 1075 | !(p1_7@430@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))
  $Snap.unit))
; [eval] p2_7 ==> issubtype(typeof(_res_4.Example_fp), int())
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1076 | p2_7@431@01 | live]
; [else-branch: 1076 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1076 | p2_7@431@01]
; [eval] issubtype(typeof(_res_4.Example_fp), int())
; [eval] typeof(_res_4.Example_fp)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  p2_7@431@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))
; [then-branch: 1077 | p1_7@430@01 | dead]
; [else-branch: 1077 | !(p1_7@430@01) | live]
(push) ; 5
; [else-branch: 1077 | !(p1_7@430@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1078 | p2_7@431@01 | live]
; [else-branch: 1078 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1078 | p2_7@431@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))
  $Snap.unit))
; [eval] p1_7 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 7
; [then-branch: 1079 | p1_7@430@01 | dead]
; [else-branch: 1079 | !(p1_7@430@01) | live]
(push) ; 8
; [else-branch: 1079 | !(p1_7@430@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))
  $Snap.unit))
; [eval] p2_7 ==> issubtype(typeof(_res_4.Example_gp), int())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1080 | p2_7@431@01 | live]
; [else-branch: 1080 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1080 | p2_7@431@01]
; [eval] issubtype(typeof(_res_4.Example_gp), int())
; [eval] typeof(_res_4.Example_gp)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_7@431@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))
  $Snap.unit))
; [eval] p1_7 && p2_7 ==> int___eq__(_res.Example_f, _res_4.Example_fp)
; [eval] p1_7 && p2_7
(push) ; 7
; [then-branch: 1081 | !(p1_7@430@01) | live]
; [else-branch: 1081 | p1_7@430@01 | live]
(push) ; 8
; [then-branch: 1081 | !(p1_7@430@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 1081 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_7@430@01 (not p1_7@430@01)))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_7@430@01 p2_7@431@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1082 | p1_7@430@01 && p2_7@431@01 | dead]
; [else-branch: 1082 | !(p1_7@430@01 && p2_7@431@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 1082 | !(p1_7@430@01 && p2_7@431@01)]
(assert (not (and p1_7@430@01 p2_7@431@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (and p1_7@430@01 p2_7@431@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))
  $Snap.unit))
; [eval] p1_7 && p2_7 ==> int___eq__(_res.Example_g, _res_4.Example_gp)
; [eval] p1_7 && p2_7
(push) ; 7
; [then-branch: 1083 | !(p1_7@430@01) | live]
; [else-branch: 1083 | p1_7@430@01 | live]
(push) ; 8
; [then-branch: 1083 | !(p1_7@430@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 1083 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 1084 | p1_7@430@01 && p2_7@431@01 | dead]
; [else-branch: 1084 | !(p1_7@430@01 && p2_7@431@01) | live]
(push) ; 8
; [else-branch: 1084 | !(p1_7@430@01 && p2_7@431@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))))
  $Snap.unit))
; [eval] p1_7 ==> true
(push) ; 7
; [then-branch: 1085 | p1_7@430@01 | dead]
; [else-branch: 1085 | !(p1_7@430@01) | live]
(push) ; 8
; [else-branch: 1085 | !(p1_7@430@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))))
  $Snap.unit))
; [eval] p2_7 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1086 | p2_7@431@01 | live]
; [else-branch: 1086 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1086 | p2_7@431@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 1074 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))
  $Snap.unit))
; [eval] p1_7 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 5
; [then-branch: 1087 | p1_7@430@01 | dead]
; [else-branch: 1087 | !(p1_7@430@01) | live]
(push) ; 6
; [else-branch: 1087 | !(p1_7@430@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))
  $Snap.unit))
; [eval] p2_7 ==> issubtype(typeof(_res_4.Example_fp), int())
(push) ; 5
; [then-branch: 1088 | p2_7@431@01 | dead]
; [else-branch: 1088 | !(p2_7@431@01) | live]
(push) ; 6
; [else-branch: 1088 | !(p2_7@431@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))
; [then-branch: 1089 | p1_7@430@01 | dead]
; [else-branch: 1089 | !(p1_7@430@01) | live]
(push) ; 5
; [else-branch: 1089 | !(p1_7@430@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))
; [then-branch: 1090 | p2_7@431@01 | dead]
; [else-branch: 1090 | !(p2_7@431@01) | live]
(push) ; 6
; [else-branch: 1090 | !(p2_7@431@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))
  $Snap.unit))
; [eval] p1_7 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 7
; [then-branch: 1091 | p1_7@430@01 | dead]
; [else-branch: 1091 | !(p1_7@430@01) | live]
(push) ; 8
; [else-branch: 1091 | !(p1_7@430@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))
  $Snap.unit))
; [eval] p2_7 ==> issubtype(typeof(_res_4.Example_gp), int())
(push) ; 7
; [then-branch: 1092 | p2_7@431@01 | dead]
; [else-branch: 1092 | !(p2_7@431@01) | live]
(push) ; 8
; [else-branch: 1092 | !(p2_7@431@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))
  $Snap.unit))
; [eval] p1_7 && p2_7 ==> int___eq__(_res.Example_f, _res_4.Example_fp)
; [eval] p1_7 && p2_7
(push) ; 7
; [then-branch: 1093 | !(p1_7@430@01) | live]
; [else-branch: 1093 | p1_7@430@01 | live]
(push) ; 8
; [then-branch: 1093 | !(p1_7@430@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 1093 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_7@430@01 (not p1_7@430@01)))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_7@430@01 p2_7@431@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1094 | p1_7@430@01 && p2_7@431@01 | dead]
; [else-branch: 1094 | !(p1_7@430@01 && p2_7@431@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 1094 | !(p1_7@430@01 && p2_7@431@01)]
(assert (not (and p1_7@430@01 p2_7@431@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (and p1_7@430@01 p2_7@431@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))
  $Snap.unit))
; [eval] p1_7 && p2_7 ==> int___eq__(_res.Example_g, _res_4.Example_gp)
; [eval] p1_7 && p2_7
(push) ; 7
; [then-branch: 1095 | !(p1_7@430@01) | live]
; [else-branch: 1095 | p1_7@430@01 | live]
(push) ; 8
; [then-branch: 1095 | !(p1_7@430@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 1095 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 1096 | p1_7@430@01 && p2_7@431@01 | dead]
; [else-branch: 1096 | !(p1_7@430@01 && p2_7@431@01) | live]
(push) ; 8
; [else-branch: 1096 | !(p1_7@430@01 && p2_7@431@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))))
  $Snap.unit))
; [eval] p1_7 ==> true
(push) ; 7
; [then-branch: 1097 | p1_7@430@01 | dead]
; [else-branch: 1097 | !(p1_7@430@01) | live]
(push) ; 8
; [else-branch: 1097 | !(p1_7@430@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))))))))
  $Snap.unit))
; [eval] p2_7 ==> true
(push) ; 7
; [then-branch: 1098 | p2_7@431@01 | dead]
; [else-branch: 1098 | !(p2_7@431@01) | live]
(push) ; 8
; [else-branch: 1098 | !(p2_7@431@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var ret1_3: Bool
(declare-const ret1_3@446@01 Bool)
; [exec]
; var ret2_3: Bool
(declare-const ret2_3@447@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@448@01 $Ref)
; [exec]
; var _err_4: Ref
(declare-const _err_4@449@01 $Ref)
; [exec]
; var a_3: Ref
(declare-const a_3@450@01 $Ref)
; [exec]
; var a_3_0: Ref
(declare-const a_3_0@451@01 $Ref)
; [exec]
; var b_3: Ref
(declare-const b_3@452@01 $Ref)
; [exec]
; var b_3_0: Ref
(declare-const b_3_0@453@01 $Ref)
; [exec]
; var secret_15: Ref
(declare-const secret_15@454@01 $Ref)
; [exec]
; var secret_15_0: Ref
(declare-const secret_15_0@455@01 $Ref)
; [exec]
; var Example_res_7: Ref
(declare-const Example_res_7@456@01 $Ref)
; [exec]
; var Example_res_7_0: Ref
(declare-const Example_res_7_0@457@01 $Ref)
; [exec]
; var Example_res_8: Ref
(declare-const Example_res_8@458@01 $Ref)
; [exec]
; var Example_res_8_0: Ref
(declare-const Example_res_8_0@459@01 $Ref)
; [exec]
; var _cwl_162: Perm
(declare-const _cwl_162@460@01 $Perm)
; [exec]
; var _cwl_162_0: Perm
(declare-const _cwl_162_0@461@01 $Perm)
; [exec]
; var _method_measures_162: Seq[Measure$]
(declare-const _method_measures_162@462@01 Seq<Measure$>)
; [exec]
; var _method_measures_162_0: Seq[Measure$]
(declare-const _method_measures_162_0@463@01 Seq<Measure$>)
; [exec]
; var tmp_7: Ref
(declare-const tmp_7@464@01 $Ref)
; [exec]
; var tmp_8: Ref
(declare-const tmp_8@465@01 $Ref)
; [exec]
; var p1_8: Bool
(declare-const p1_8@466@01 Bool)
; [exec]
; var p2_8: Bool
(declare-const p2_8@467@01 Bool)
; [exec]
; var p3_3: Bool
(declare-const p3_3@468@01 Bool)
; [exec]
; var p4_3: Bool
(declare-const p4_3@469@01 Bool)
; [exec]
; inhale p1_7
(declare-const $t@470@01 $Snap)
(assert (= $t@470@01 $Snap.unit))
(assert p1_7@430@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ret1_3 := false
; [exec]
; ret2_3 := false
; [eval] p1_7 && !ret1_3
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1099 | !(p1_7@430@01) | live]
; [else-branch: 1099 | p1_7@430@01 | live]
(push) ; 4
; [then-branch: 1099 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 4
(push) ; 4
; [else-branch: 1099 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1_7@430@01 (not p1_7@430@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1100 | p1_7@430@01 | live]
; [else-branch: 1100 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1100 | p1_7@430@01]
; [exec]
; _method_measures_162 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; secret_15 := secret_3
; [eval] p2_7 && !ret2_3
(push) ; 4
; [then-branch: 1101 | !(p2_7@431@01) | live]
; [else-branch: 1101 | p2_7@431@01 | live]
(push) ; 5
; [then-branch: 1101 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 5
(push) ; 5
; [else-branch: 1101 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or p2_7@431@01 (not p2_7@431@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1102 | p2_7@431@01 | live]
; [else-branch: 1102 | !(p2_7@431@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1102 | p2_7@431@01]
(assert p2_7@431@01)
; [exec]
; _method_measures_162_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res_4 := null
; [exec]
; _err_4 := null
; [exec]
; secret_15_0 := secret_3_0
; [exec]
; tmp_7 := new()
(declare-const tmp_7@471@01 $Ref)
(assert (not (= tmp_7@471@01 $Ref.null)))
(assert (not (= tmp_7@471@01 Example_res_8_0@459@01)))
(assert (not (= tmp_7@471@01 _cthread_162@432@01)))
(assert (not (= tmp_7@471@01 tmp_8@465@01)))
(assert (not (= tmp_7@471@01 Example_res_7@456@01)))
(assert (not (= tmp_7@471@01 a_3@450@01)))
(assert (not (= tmp_7@471@01 a_3_0@451@01)))
(assert (not (= tmp_7@471@01 b_3_0@453@01)))
(assert (not (= tmp_7@471@01 tmp_7@464@01)))
(assert (not (= tmp_7@471@01 secret_3_0@439@01)))
(assert (not (= tmp_7@471@01 Example_res_7_0@457@01)))
(assert (not (= tmp_7@471@01 secret_3@438@01)))
(assert (not (= tmp_7@471@01 _cthread_162_0@433@01)))
(assert (not (= tmp_7@471@01 Example_res_8@458@01)))
(assert (not (= tmp_7@471@01 b_3@452@01)))
; [eval] p1_7 && !ret1_3
(push) ; 5
; [then-branch: 1103 | !(p1_7@430@01) | live]
; [else-branch: 1103 | p1_7@430@01 | live]
(push) ; 6
; [then-branch: 1103 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1103 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1104 | p1_7@430@01 | live]
; [else-branch: 1104 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1104 | p1_7@430@01]
; [exec]
; Example_res_7 := tmp_7
; [eval] p2_7 && !ret2_3
(push) ; 6
; [then-branch: 1105 | !(p2_7@431@01) | live]
; [else-branch: 1105 | p2_7@431@01 | live]
(push) ; 7
; [then-branch: 1105 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1105 | p2_7@431@01]
; [eval] !ret2_3
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1106 | p2_7@431@01 | live]
; [else-branch: 1106 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1106 | p2_7@431@01]
; [exec]
; Example_res_7_0 := tmp_7
; [eval] p1_7 && !ret1_3
(push) ; 7
; [then-branch: 1107 | !(p1_7@430@01) | live]
; [else-branch: 1107 | p1_7@430@01 | live]
(push) ; 8
; [then-branch: 1107 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1107 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1108 | p1_7@430@01 | live]
; [else-branch: 1108 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1108 | p1_7@430@01]
; [exec]
; inhale typeof(Example_res_7) == Example()
(declare-const $t@472@01 $Snap)
(assert (= $t@472@01 $Snap.unit))
; [eval] typeof(Example_res_7) == Example()
; [eval] typeof(Example_res_7)
; [eval] Example()
(assert (= (typeof<PyType> tmp_7@471@01) (as Example<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_7, 1888441915154752436293), write)
(declare-const $t@473@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_7, 1906888659228461987909), write)
(declare-const $t@474@01 $Snap)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_7 && !ret2_3
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1109 | !(p2_7@431@01) | live]
; [else-branch: 1109 | p2_7@431@01 | live]
(push) ; 9
; [then-branch: 1109 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1109 | p2_7@431@01]
; [eval] !ret2_3
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1110 | p2_7@431@01 | live]
; [else-branch: 1110 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1110 | p2_7@431@01]
; [exec]
; inhale typeof(Example_res_7_0) == Example()
(declare-const $t@475@01 $Snap)
(assert (= $t@475@01 $Snap.unit))
; [eval] typeof(Example_res_7_0) == Example()
; [eval] typeof(Example_res_7_0)
; [eval] Example()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(Example_res_7_0, 1888441915154752436293), write)
(declare-const $t@476@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(Example_res_7_0, 1906888659228461987909), write)
(declare-const $t@477@01 $Snap)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_7 && !ret1_3 || p2_7 && !ret2_3
; [eval] p1_7 && !ret1_3
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1111 | !(p1_7@430@01) | live]
; [else-branch: 1111 | p1_7@430@01 | live]
(push) ; 10
; [then-branch: 1111 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1111 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 1112 | p1_7@430@01 | live]
; [else-branch: 1112 | !(p1_7@430@01) | live]
(push) ; 10
; [then-branch: 1112 | p1_7@430@01]
(pop) ; 10
(push) ; 10
; [else-branch: 1112 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
; [eval] p2_7 && !ret2_3
(push) ; 11
; [then-branch: 1113 | !(p2_7@431@01) | live]
; [else-branch: 1113 | p2_7@431@01 | live]
(push) ; 12
; [then-branch: 1113 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 12
(push) ; 12
; [else-branch: 1113 | p2_7@431@01]
; [eval] !ret2_3
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not (or p1_7@430@01 p2_7@431@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (or p1_7@430@01 p2_7@431@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1114 | p1_7@430@01 || p2_7@431@01 | live]
; [else-branch: 1114 | !(p1_7@430@01 || p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1114 | p1_7@430@01 || p2_7@431@01]
(assert (or p1_7@430@01 p2_7@431@01))
; [exec]
; var tmp1_39: Ref
(declare-const tmp1_39@478@01 $Ref)
; [exec]
; var tmp2_39: Ref
(declare-const tmp2_39@479@01 $Ref)
; [exec]
; var tmp1_40: Seq[Measure$]
(declare-const tmp1_40@480@01 Seq<Measure$>)
; [exec]
; var tmp2_40: Seq[Measure$]
(declare-const tmp2_40@481@01 Seq<Measure$>)
; [exec]
; var tmp1_41: Perm
(declare-const tmp1_41@482@01 $Perm)
; [exec]
; var tmp2_41: Perm
(declare-const tmp2_41@483@01 $Perm)
; [exec]
; var tmp1_42: Ref
(declare-const tmp1_42@484@01 $Ref)
; [exec]
; var tmp2_42: Ref
(declare-const tmp2_42@485@01 $Ref)
; [exec]
; var tmp1_43: Perm
(declare-const tmp1_43@486@01 $Perm)
; [exec]
; var tmp2_43: Perm
(declare-const tmp2_43@487@01 $Perm)
; [eval] p1_7 && !ret1_3
(push) ; 10
; [then-branch: 1115 | !(p1_7@430@01) | live]
; [else-branch: 1115 | p1_7@430@01 | live]
(push) ; 11
; [then-branch: 1115 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 11
(push) ; 11
; [else-branch: 1115 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1116 | p1_7@430@01 | live]
; [else-branch: 1116 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1116 | p1_7@430@01]
; [exec]
; tmp1_39 := _cthread_162
; [exec]
; tmp1_40 := _method_measures_162
; [exec]
; tmp1_41 := _residue_162
; [exec]
; tmp1_42 := Example_res_7
; [eval] p2_7 && !ret2_3
(push) ; 11
; [then-branch: 1117 | !(p2_7@431@01) | live]
; [else-branch: 1117 | p2_7@431@01 | live]
(push) ; 12
; [then-branch: 1117 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 12
(push) ; 12
; [else-branch: 1117 | p2_7@431@01]
; [eval] !ret2_3
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1118 | p2_7@431@01 | live]
; [else-branch: 1118 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1118 | p2_7@431@01]
; [exec]
; tmp2_39 := _cthread_162_0
; [exec]
; tmp2_40 := _method_measures_162_0
; [exec]
; tmp2_41 := _residue_162_0
; [exec]
; tmp2_42 := Example_res_7_0
; [exec]
; tmp1_43, tmp2_43 := Example___init__(p1_7 && !ret1_3, p2_7 && !ret2_3, tmp1_39,
;   tmp2_39, tmp1_40, tmp2_40, tmp1_41, tmp2_41, tmp1_42, tmp2_42)
; [eval] p1_7 && !ret1_3
(push) ; 12
; [then-branch: 1119 | !(p1_7@430@01) | live]
; [else-branch: 1119 | p1_7@430@01 | live]
(push) ; 13
; [then-branch: 1119 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 13
(push) ; 13
; [else-branch: 1119 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [eval] p2_7 && !ret2_3
(push) ; 12
; [then-branch: 1120 | !(p2_7@431@01) | live]
; [else-branch: 1120 | p2_7@431@01 | live]
(push) ; 13
; [then-branch: 1120 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 13
(push) ; 13
; [else-branch: 1120 | p2_7@431@01]
; [eval] !ret2_3
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [eval] p1_23 ==> _cthread_156 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1121 | p1_7@430@01 | live]
; [else-branch: 1121 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1121 | p1_7@430@01]
; [eval] _cthread_156 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p2_23 ==> _cthread_156_0 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1122 | p2_7@431@01 | live]
; [else-branch: 1122 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1122 | p2_7@431@01]
; [eval] _cthread_156_0 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1_23 ==> issubtype(typeof(_cthread_156), Thread_0())
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1123 | p1_7@430@01 | live]
; [else-branch: 1123 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1123 | p1_7@430@01]
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p2_23 ==> issubtype(typeof(_cthread_156_0), Thread_0())
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1124 | p2_7@431@01 | live]
; [else-branch: 1124 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1124 | p2_7@431@01]
; [eval] issubtype(typeof(_cthread_156_0), Thread_0())
; [eval] typeof(_cthread_156_0)
; [eval] Thread_0()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1_23 ==> self != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1125 | p1_7@430@01 | live]
; [else-branch: 1125 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1125 | p1_7@430@01]
; [eval] self != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=> p1_7@430@01 (not (= tmp_7@471@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=> p1_7@430@01 (not (= tmp_7@471@01 $Ref.null))))
; [eval] p2_23 ==> self_3 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1126 | p2_7@431@01 | live]
; [else-branch: 1126 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1126 | p2_7@431@01]
; [eval] self_3 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=> p2_7@431@01 (not (= tmp_7@471@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=> p2_7@431@01 (not (= tmp_7@471@01 $Ref.null))))
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1127 | p1_7@430@01 | live]
; [else-branch: 1127 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 1127 | p1_7@430@01]
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1128 | p2_7@431@01 | live]
; [else-branch: 1128 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1128 | p2_7@431@01]
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1129 | p1_7@430@01 | live]
; [else-branch: 1129 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1129 | p1_7@430@01]
(push) ; 15
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1130 | p2_7@431@01 | live]
; [else-branch: 1130 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 1130 | p2_7@431@01]
; [eval] p1_23 ==> issubtype(typeof(self), Example())
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1131 | p1_7@430@01 | live]
; [else-branch: 1131 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1131 | p1_7@430@01]
; [eval] issubtype(typeof(self), Example())
; [eval] typeof(self)
; [eval] Example()
(pop) ; 17
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> tmp_7@471@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> tmp_7@471@01) (as Example<PyType>  PyType))))
; [eval] p2_23 ==> issubtype(typeof(self_3), Example())
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1132 | p2_7@431@01 | live]
; [else-branch: 1132 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1132 | p2_7@431@01]
; [eval] issubtype(typeof(self_3), Example())
; [eval] typeof(self_3)
; [eval] Example()
(pop) ; 17
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (=>
  p2_7@431@01
  (issubtype<Bool> (typeof<PyType> tmp_7@471@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_7@431@01
  (issubtype<Bool> (typeof<PyType> tmp_7@471@01) (as Example<PyType>  PyType))))
; [eval] p1_23 ==> self != null
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1133 | p1_7@430@01 | live]
; [else-branch: 1133 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1133 | p1_7@430@01]
; [eval] self != null
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p2_23 ==> self_3 != null
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1134 | p2_7@431@01 | live]
; [else-branch: 1134 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1134 | p2_7@431@01]
; [eval] self_3 != null
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p1_23 ==> perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1135 | p1_7@430@01 | live]
; [else-branch: 1135 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1135 | p1_7@430@01]
; [eval] perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(push) ; 18
; [then-branch: 1136 | False | live]
; [else-branch: 1136 | True | live]
(push) ; 19
; [then-branch: 1136 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 1136 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false)
(push) ; 20
; [then-branch: 1137 | False | live]
; [else-branch: 1137 | True | live]
(push) ; 21
; [then-branch: 1137 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 1137 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false)
(push) ; 22
; [then-branch: 1138 | False | live]
; [else-branch: 1138 | True | live]
(push) ; 23
; [then-branch: 1138 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1138 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false)
(push) ; 24
; [then-branch: 1139 | False | live]
; [else-branch: 1139 | True | live]
(push) ; 25
; [then-branch: 1139 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 1139 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p2_23 ==> perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1140 | p2_7@431@01 | live]
; [else-branch: 1140 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1140 | p2_7@431@01]
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none
; [eval] perm(MustTerminate_0(_cthread_156_0))
(push) ; 18
; [then-branch: 1141 | False | live]
; [else-branch: 1141 | True | live]
(push) ; 19
; [then-branch: 1141 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 1141 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false)
(push) ; 20
; [then-branch: 1142 | False | live]
; [else-branch: 1142 | True | live]
(push) ; 21
; [then-branch: 1142 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 1142 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false)
(push) ; 22
; [then-branch: 1143 | False | live]
; [else-branch: 1143 | True | live]
(push) ; 23
; [then-branch: 1143 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1143 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false)
(push) ; 24
; [then-branch: 1144 | False | live]
; [else-branch: 1144 | True | live]
(push) ; 25
; [then-branch: 1144 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 1144 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(declare-const _current_wait_level_156@488@01 $Perm)
(declare-const _current_wait_level_156_0@489@01 $Perm)
(declare-const $t@490@01 $Snap)
(assert (= $t@490@01 ($Snap.combine ($Snap.first $t@490@01) ($Snap.second $t@490@01))))
(assert (= ($Snap.first $t@490@01) $Snap.unit))
; [eval] p1_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1145 | p1_7@430@01 | live]
; [else-branch: 1145 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1145 | p1_7@430@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 18
; [then-branch: 1146 | False | live]
; [else-branch: 1146 | True | live]
(push) ; 19
; [then-branch: 1146 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 1146 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 20
; [then-branch: 1147 | False | live]
; [else-branch: 1147 | True | live]
(push) ; 21
; [then-branch: 1147 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 1147 | True]
; [eval] _residue_156 <= _current_wait_level_156
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=> p1_7@430@01 (<= _residue_162@436@01 _current_wait_level_156@488@01)))
(assert (=
  ($Snap.second $t@490@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@490@01))
    ($Snap.second ($Snap.second $t@490@01)))))
(assert (= ($Snap.first ($Snap.second $t@490@01)) $Snap.unit))
; [eval] p2_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1148 | p2_7@431@01 | live]
; [else-branch: 1148 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1148 | p2_7@431@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 18
; [then-branch: 1149 | False | live]
; [else-branch: 1149 | True | live]
(push) ; 19
; [then-branch: 1149 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 1149 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 20
; [then-branch: 1150 | False | live]
; [else-branch: 1150 | True | live]
(push) ; 21
; [then-branch: 1150 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 1150 | True]
; [eval] _residue_156_0 <= _current_wait_level_156_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=> p2_7@431@01 (<= _residue_162_0@437@01 _current_wait_level_156_0@489@01)))
(assert (=
  ($Snap.second ($Snap.second $t@490@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@490@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1151 | p1_7@430@01 | live]
; [else-branch: 1151 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1151 | p1_7@430@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@490@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1152 | p2_7@431@01 | live]
; [else-branch: 1152 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1152 | p2_7@431@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_f), int())
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1153 | p1_7@430@01 | live]
; [else-branch: 1153 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 1153 | p1_7@430@01]
; [eval] issubtype(typeof(self.Example_f), int())
; [eval] typeof(self.Example_f)
; [eval] int()
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_fp), int())
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1154 | p2_7@431@01 | live]
; [else-branch: 1154 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 1154 | p2_7@431@01]
; [eval] issubtype(typeof(self_3.Example_fp), int())
; [eval] typeof(self_3.Example_fp)
; [eval] int()
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  p2_7@431@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1155 | p1_7@430@01 | live]
; [else-branch: 1155 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 1155 | p1_7@430@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1156 | p2_7@431@01 | live]
; [else-branch: 1156 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 1156 | p2_7@431@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_g), int())
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1157 | p1_7@430@01 | live]
; [else-branch: 1157 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1157 | p1_7@430@01]
; [eval] issubtype(typeof(self.Example_g), int())
; [eval] typeof(self.Example_g)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_gp), int())
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1158 | p2_7@431@01 | live]
; [else-branch: 1158 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1158 | p2_7@431@01]
; [eval] issubtype(typeof(self_3.Example_gp), int())
; [eval] typeof(self_3.Example_gp)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p2_7@431@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_f, __prim__int___box__(0))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1159 | p1_7@430@01 | live]
; [else-branch: 1159 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1159 | p1_7@430@01]
; [eval] int___eq__(self.Example_f, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01)))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01)))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p1_7@430@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01)))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p1_7@430@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01)))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_fp, __prim__int___box__(0))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1160 | p2_7@431@01 | live]
; [else-branch: 1160 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1160 | p2_7@431@01]
; [eval] int___eq__(self_3.Example_fp, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01))))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p2_7@431@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01))))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p2_7@431@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01))))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_g, __prim__int___box__(1))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1161 | p1_7@430@01 | live]
; [else-branch: 1161 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1161 | p1_7@430@01]
; [eval] int___eq__(self.Example_g, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p1_7@430@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p1_7@430@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_gp, __prim__int___box__(1))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1162 | p2_7@431@01 | live]
; [else-branch: 1162 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1162 | p2_7@431@01]
; [eval] int___eq__(self_3.Example_gp, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p2_7@431@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p2_7@431@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> true
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1163 | p1_7@430@01 | live]
; [else-branch: 1163 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1163 | p1_7@430@01]
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> true
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1164 | p2_7@431@01 | live]
; [else-branch: 1164 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1164 | p2_7@431@01]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] p1_7 && !ret1_3
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1165 | !(p1_7@430@01) | live]
; [else-branch: 1165 | p1_7@430@01 | live]
(push) ; 21
; [then-branch: 1165 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1165 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1166 | p1_7@430@01 | live]
; [else-branch: 1166 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1166 | p1_7@430@01]
; [exec]
; _cwl_162 := tmp1_43
; [eval] p2_7 && !ret2_3
(push) ; 21
; [then-branch: 1167 | !(p2_7@431@01) | live]
; [else-branch: 1167 | p2_7@431@01 | live]
(push) ; 22
; [then-branch: 1167 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 22
(push) ; 22
; [else-branch: 1167 | p2_7@431@01]
; [eval] !ret2_3
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1168 | p2_7@431@01 | live]
; [else-branch: 1168 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1168 | p2_7@431@01]
; [exec]
; _cwl_162_0 := tmp2_43
; [eval] p1_7 && !ret1_3
(push) ; 22
; [then-branch: 1169 | !(p1_7@430@01) | live]
; [else-branch: 1169 | p1_7@430@01 | live]
(push) ; 23
; [then-branch: 1169 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 23
(push) ; 23
; [else-branch: 1169 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1170 | p1_7@430@01 | live]
; [else-branch: 1170 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 1170 | p1_7@430@01]
; [exec]
; a_3 := Example_res_7
; [exec]
; inhale _isDefined(3366753)
(declare-const $t@491@01 $Snap)
(assert (= $t@491@01 $Snap.unit))
; [eval] _isDefined(3366753)
(push) ; 23
(assert (_isDefined%precondition $Snap.unit 3366753))
(pop) ; 23
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3366753))
(assert (_isDefined $Snap.unit 3366753))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_7 && !ret2_3
(set-option :timeout 0)
(push) ; 23
; [then-branch: 1171 | !(p2_7@431@01) | live]
; [else-branch: 1171 | p2_7@431@01 | live]
(push) ; 24
; [then-branch: 1171 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1171 | p2_7@431@01]
; [eval] !ret2_3
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1172 | p2_7@431@01 | live]
; [else-branch: 1172 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 1172 | p2_7@431@01]
; [exec]
; a_3_0 := Example_res_7_0
; [exec]
; inhale true
(declare-const $t@492@01 $Snap)
(assert (= $t@492@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; tmp_8 := new()
(declare-const tmp_8@493@01 $Ref)
(assert (not (= tmp_8@493@01 $Ref.null)))
(assert (not (= tmp_8@493@01 Example_res_8_0@459@01)))
(assert (not (= tmp_8@493@01 _cthread_162@432@01)))
(assert (not (= tmp_8@493@01 tmp_8@465@01)))
(assert (not (= tmp_8@493@01 tmp_7@471@01)))
(assert (not (= tmp_8@493@01 b_3_0@453@01)))
(assert (not (= tmp_8@493@01 secret_3_0@439@01)))
(assert (not (= tmp_8@493@01 secret_3@438@01)))
(assert (not (= tmp_8@493@01 _cthread_162_0@433@01)))
(assert (not (= tmp_8@493@01 Example_res_8@458@01)))
(assert (not
  (=
    tmp_8@493@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))))))
(assert (not
  (=
    tmp_8@493@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))))
(assert (not
  (=
    tmp_8@493@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))
(assert (not
  (=
    tmp_8@493@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01)))))))
(assert (not (= tmp_8@493@01 b_3@452@01)))
; [eval] p1_7 && !ret1_3
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1173 | !(p1_7@430@01) | live]
; [else-branch: 1173 | p1_7@430@01 | live]
(push) ; 25
; [then-branch: 1173 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1173 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1174 | p1_7@430@01 | live]
; [else-branch: 1174 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1174 | p1_7@430@01]
; [exec]
; Example_res_8 := tmp_8
; [eval] p2_7 && !ret2_3
(push) ; 25
; [then-branch: 1175 | !(p2_7@431@01) | live]
; [else-branch: 1175 | p2_7@431@01 | live]
(push) ; 26
; [then-branch: 1175 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 26
(push) ; 26
; [else-branch: 1175 | p2_7@431@01]
; [eval] !ret2_3
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1176 | p2_7@431@01 | live]
; [else-branch: 1176 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1176 | p2_7@431@01]
; [exec]
; Example_res_8_0 := tmp_8
; [eval] p1_7 && !ret1_3
(push) ; 26
; [then-branch: 1177 | !(p1_7@430@01) | live]
; [else-branch: 1177 | p1_7@430@01 | live]
(push) ; 27
; [then-branch: 1177 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 27
(push) ; 27
; [else-branch: 1177 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1178 | p1_7@430@01 | live]
; [else-branch: 1178 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1178 | p1_7@430@01]
; [exec]
; inhale typeof(Example_res_8) == Example()
(declare-const $t@494@01 $Snap)
(assert (= $t@494@01 $Snap.unit))
; [eval] typeof(Example_res_8) == Example()
; [eval] typeof(Example_res_8)
; [eval] Example()
(assert (= (typeof<PyType> tmp_8@493@01) (as Example<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_8, 1888441915154752436293), write)
(declare-const $t@495@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_8, 1906888659228461987909), write)
(declare-const $t@496@01 $Snap)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_7 && !ret2_3
(set-option :timeout 0)
(push) ; 27
; [then-branch: 1179 | !(p2_7@431@01) | live]
; [else-branch: 1179 | p2_7@431@01 | live]
(push) ; 28
; [then-branch: 1179 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 28
(push) ; 28
; [else-branch: 1179 | p2_7@431@01]
; [eval] !ret2_3
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(push) ; 27
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1180 | p2_7@431@01 | live]
; [else-branch: 1180 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 1180 | p2_7@431@01]
; [exec]
; inhale typeof(Example_res_8_0) == Example()
(declare-const $t@497@01 $Snap)
(assert (= $t@497@01 $Snap.unit))
; [eval] typeof(Example_res_8_0) == Example()
; [eval] typeof(Example_res_8_0)
; [eval] Example()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(Example_res_8_0, 1888441915154752436293), write)
(declare-const $t@498@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(Example_res_8_0, 1906888659228461987909), write)
(declare-const $t@499@01 $Snap)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_7 && !ret1_3 || p2_7 && !ret2_3
; [eval] p1_7 && !ret1_3
(set-option :timeout 0)
(push) ; 28
; [then-branch: 1181 | !(p1_7@430@01) | live]
; [else-branch: 1181 | p1_7@430@01 | live]
(push) ; 29
; [then-branch: 1181 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 29
(push) ; 29
; [else-branch: 1181 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
; [then-branch: 1182 | p1_7@430@01 | live]
; [else-branch: 1182 | !(p1_7@430@01) | live]
(push) ; 29
; [then-branch: 1182 | p1_7@430@01]
(pop) ; 29
(push) ; 29
; [else-branch: 1182 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
; [eval] p2_7 && !ret2_3
(push) ; 30
; [then-branch: 1183 | !(p2_7@431@01) | live]
; [else-branch: 1183 | p2_7@431@01 | live]
(push) ; 31
; [then-branch: 1183 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 31
(push) ; 31
; [else-branch: 1183 | p2_7@431@01]
; [eval] !ret2_3
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (not (or p1_7@430@01 p2_7@431@01))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1184 | p1_7@430@01 || p2_7@431@01 | live]
; [else-branch: 1184 | !(p1_7@430@01 || p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 1184 | p1_7@430@01 || p2_7@431@01]
; [exec]
; var tmp1_44: Ref
(declare-const tmp1_44@500@01 $Ref)
; [exec]
; var tmp2_44: Ref
(declare-const tmp2_44@501@01 $Ref)
; [exec]
; var tmp1_45: Seq[Measure$]
(declare-const tmp1_45@502@01 Seq<Measure$>)
; [exec]
; var tmp2_45: Seq[Measure$]
(declare-const tmp2_45@503@01 Seq<Measure$>)
; [exec]
; var tmp1_46: Perm
(declare-const tmp1_46@504@01 $Perm)
; [exec]
; var tmp2_46: Perm
(declare-const tmp2_46@505@01 $Perm)
; [exec]
; var tmp1_47: Ref
(declare-const tmp1_47@506@01 $Ref)
; [exec]
; var tmp2_47: Ref
(declare-const tmp2_47@507@01 $Ref)
; [exec]
; var tmp1_48: Perm
(declare-const tmp1_48@508@01 $Perm)
; [exec]
; var tmp2_48: Perm
(declare-const tmp2_48@509@01 $Perm)
; [eval] p1_7 && !ret1_3
(push) ; 29
; [then-branch: 1185 | !(p1_7@430@01) | live]
; [else-branch: 1185 | p1_7@430@01 | live]
(push) ; 30
; [then-branch: 1185 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 30
(push) ; 30
; [else-branch: 1185 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1186 | p1_7@430@01 | live]
; [else-branch: 1186 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 1186 | p1_7@430@01]
; [exec]
; tmp1_44 := _cthread_162
; [exec]
; tmp1_45 := _method_measures_162
; [exec]
; tmp1_46 := _residue_162
; [exec]
; tmp1_47 := Example_res_8
; [eval] p2_7 && !ret2_3
(push) ; 30
; [then-branch: 1187 | !(p2_7@431@01) | live]
; [else-branch: 1187 | p2_7@431@01 | live]
(push) ; 31
; [then-branch: 1187 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 31
(push) ; 31
; [else-branch: 1187 | p2_7@431@01]
; [eval] !ret2_3
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1188 | p2_7@431@01 | live]
; [else-branch: 1188 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 1188 | p2_7@431@01]
; [exec]
; tmp2_44 := _cthread_162_0
; [exec]
; tmp2_45 := _method_measures_162_0
; [exec]
; tmp2_46 := _residue_162_0
; [exec]
; tmp2_47 := Example_res_8_0
; [exec]
; tmp1_48, tmp2_48 := Example___init__(p1_7 && !ret1_3, p2_7 && !ret2_3, tmp1_44,
;   tmp2_44, tmp1_45, tmp2_45, tmp1_46, tmp2_46, tmp1_47, tmp2_47)
; [eval] p1_7 && !ret1_3
(push) ; 31
; [then-branch: 1189 | !(p1_7@430@01) | live]
; [else-branch: 1189 | p1_7@430@01 | live]
(push) ; 32
; [then-branch: 1189 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 32
(push) ; 32
; [else-branch: 1189 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [eval] p2_7 && !ret2_3
(push) ; 31
; [then-branch: 1190 | !(p2_7@431@01) | live]
; [else-branch: 1190 | p2_7@431@01 | live]
(push) ; 32
; [then-branch: 1190 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 32
(push) ; 32
; [else-branch: 1190 | p2_7@431@01]
; [eval] !ret2_3
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [eval] p1_23 ==> _cthread_156 != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1191 | p1_7@430@01 | live]
; [else-branch: 1191 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 1191 | p1_7@430@01]
; [eval] _cthread_156 != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_23 ==> _cthread_156_0 != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1192 | p2_7@431@01 | live]
; [else-branch: 1192 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 1192 | p2_7@431@01]
; [eval] _cthread_156_0 != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p1_23 ==> issubtype(typeof(_cthread_156), Thread_0())
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1193 | p1_7@430@01 | live]
; [else-branch: 1193 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 1193 | p1_7@430@01]
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_23 ==> issubtype(typeof(_cthread_156_0), Thread_0())
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1194 | p2_7@431@01 | live]
; [else-branch: 1194 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 1194 | p2_7@431@01]
; [eval] issubtype(typeof(_cthread_156_0), Thread_0())
; [eval] typeof(_cthread_156_0)
; [eval] Thread_0()
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p1_23 ==> self != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1195 | p1_7@430@01 | live]
; [else-branch: 1195 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 1195 | p1_7@430@01]
; [eval] self != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(assert (not (=> p1_7@430@01 (not (= tmp_8@493@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(assert (=> p1_7@430@01 (not (= tmp_8@493@01 $Ref.null))))
; [eval] p2_23 ==> self_3 != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1196 | p2_7@431@01 | live]
; [else-branch: 1196 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 1196 | p2_7@431@01]
; [eval] self_3 != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(assert (not (=> p2_7@431@01 (not (= tmp_8@493@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(assert (=> p2_7@431@01 (not (= tmp_8@493@01 $Ref.null))))
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1197 | p1_7@430@01 | live]
; [else-branch: 1197 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 1197 | p1_7@430@01]
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1198 | p2_7@431@01 | live]
; [else-branch: 1198 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 1198 | p2_7@431@01]
(push) ; 33
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1199 | p1_7@430@01 | live]
; [else-branch: 1199 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 1199 | p1_7@430@01]
(push) ; 34
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1200 | p2_7@431@01 | live]
; [else-branch: 1200 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 1200 | p2_7@431@01]
; [eval] p1_23 ==> issubtype(typeof(self), Example())
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1201 | p1_7@430@01 | live]
; [else-branch: 1201 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 1201 | p1_7@430@01]
; [eval] issubtype(typeof(self), Example())
; [eval] typeof(self)
; [eval] Example()
(pop) ; 36
(pop) ; 35
; Joined path conditions
(push) ; 35
(assert (not (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> tmp_8@493@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> tmp_8@493@01) (as Example<PyType>  PyType))))
; [eval] p2_23 ==> issubtype(typeof(self_3), Example())
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1202 | p2_7@431@01 | live]
; [else-branch: 1202 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 1202 | p2_7@431@01]
; [eval] issubtype(typeof(self_3), Example())
; [eval] typeof(self_3)
; [eval] Example()
(pop) ; 36
(pop) ; 35
; Joined path conditions
(push) ; 35
(assert (not (=>
  p2_7@431@01
  (issubtype<Bool> (typeof<PyType> tmp_8@493@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_7@431@01
  (issubtype<Bool> (typeof<PyType> tmp_8@493@01) (as Example<PyType>  PyType))))
; [eval] p1_23 ==> self != null
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1203 | p1_7@430@01 | live]
; [else-branch: 1203 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 1203 | p1_7@430@01]
; [eval] self != null
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p2_23 ==> self_3 != null
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1204 | p2_7@431@01 | live]
; [else-branch: 1204 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 1204 | p2_7@431@01]
; [eval] self_3 != null
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p1_23 ==> perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1205 | p1_7@430@01 | live]
; [else-branch: 1205 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 1205 | p1_7@430@01]
; [eval] perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(push) ; 37
; [then-branch: 1206 | False | live]
; [else-branch: 1206 | True | live]
(push) ; 38
; [then-branch: 1206 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 1206 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false)
(push) ; 39
; [then-branch: 1207 | False | live]
; [else-branch: 1207 | True | live]
(push) ; 40
; [then-branch: 1207 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 1207 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false)
(push) ; 41
; [then-branch: 1208 | False | live]
; [else-branch: 1208 | True | live]
(push) ; 42
; [then-branch: 1208 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 1208 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false)
(push) ; 43
; [then-branch: 1209 | False | live]
; [else-branch: 1209 | True | live]
(push) ; 44
; [then-branch: 1209 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 1209 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p2_23 ==> perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1210 | p2_7@431@01 | live]
; [else-branch: 1210 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 1210 | p2_7@431@01]
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none
; [eval] perm(MustTerminate_0(_cthread_156_0))
(push) ; 37
; [then-branch: 1211 | False | live]
; [else-branch: 1211 | True | live]
(push) ; 38
; [then-branch: 1211 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 1211 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false)
(push) ; 39
; [then-branch: 1212 | False | live]
; [else-branch: 1212 | True | live]
(push) ; 40
; [then-branch: 1212 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 1212 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false)
(push) ; 41
; [then-branch: 1213 | False | live]
; [else-branch: 1213 | True | live]
(push) ; 42
; [then-branch: 1213 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 1213 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false)
(push) ; 43
; [then-branch: 1214 | False | live]
; [else-branch: 1214 | True | live]
(push) ; 44
; [then-branch: 1214 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 1214 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false)
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
(declare-const _current_wait_level_156@510@01 $Perm)
(declare-const _current_wait_level_156_0@511@01 $Perm)
(declare-const $t@512@01 $Snap)
(assert (= $t@512@01 ($Snap.combine ($Snap.first $t@512@01) ($Snap.second $t@512@01))))
(assert (= ($Snap.first $t@512@01) $Snap.unit))
; [eval] p1_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1215 | p1_7@430@01 | live]
; [else-branch: 1215 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 1215 | p1_7@430@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 37
; [then-branch: 1216 | False | live]
; [else-branch: 1216 | True | live]
(push) ; 38
; [then-branch: 1216 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 1216 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 39
; [then-branch: 1217 | False | live]
; [else-branch: 1217 | True | live]
(push) ; 40
; [then-branch: 1217 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 1217 | True]
; [eval] _residue_156 <= _current_wait_level_156
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
(assert (=> p1_7@430@01 (<= _residue_162@436@01 _current_wait_level_156@510@01)))
(assert (=
  ($Snap.second $t@512@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@512@01))
    ($Snap.second ($Snap.second $t@512@01)))))
(assert (= ($Snap.first ($Snap.second $t@512@01)) $Snap.unit))
; [eval] p2_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1218 | p2_7@431@01 | live]
; [else-branch: 1218 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 1218 | p2_7@431@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 37
; [then-branch: 1219 | False | live]
; [else-branch: 1219 | True | live]
(push) ; 38
; [then-branch: 1219 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 1219 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 39
; [then-branch: 1220 | False | live]
; [else-branch: 1220 | True | live]
(push) ; 40
; [then-branch: 1220 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 1220 | True]
; [eval] _residue_156_0 <= _current_wait_level_156_0
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
(assert (=> p2_7@431@01 (<= _residue_162_0@437@01 _current_wait_level_156_0@511@01)))
(assert (=
  ($Snap.second ($Snap.second $t@512@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@512@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1221 | p1_7@430@01 | live]
; [else-branch: 1221 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 1221 | p1_7@430@01]
(push) ; 36
(set-option :timeout 10)
(assert (not (= tmp_7@471@01 tmp_8@493@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@512@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1222 | p2_7@431@01 | live]
; [else-branch: 1222 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 1222 | p2_7@431@01]
(push) ; 37
(set-option :timeout 10)
(assert (not (= tmp_7@471@01 tmp_8@493@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_f), int())
(set-option :timeout 0)
(push) ; 37
(push) ; 38
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1223 | p1_7@430@01 | live]
; [else-branch: 1223 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 1223 | p1_7@430@01]
; [eval] issubtype(typeof(self.Example_f), int())
; [eval] typeof(self.Example_f)
; [eval] int()
(pop) ; 38
(pop) ; 37
; Joined path conditions
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_fp), int())
(push) ; 37
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1224 | p2_7@431@01 | live]
; [else-branch: 1224 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 1224 | p2_7@431@01]
; [eval] issubtype(typeof(self_3.Example_fp), int())
; [eval] typeof(self_3.Example_fp)
; [eval] int()
(pop) ; 38
(pop) ; 37
; Joined path conditions
(assert (=>
  p2_7@431@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1225 | p1_7@430@01 | live]
; [else-branch: 1225 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1225 | p1_7@430@01]
(push) ; 38
(set-option :timeout 10)
(assert (not (= tmp_7@471@01 tmp_8@493@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
(set-option :timeout 0)
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1226 | p2_7@431@01 | live]
; [else-branch: 1226 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 1226 | p2_7@431@01]
(push) ; 39
(set-option :timeout 10)
(assert (not (= tmp_7@471@01 tmp_8@493@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_g), int())
(set-option :timeout 0)
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1227 | p1_7@430@01 | live]
; [else-branch: 1227 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 1227 | p1_7@430@01]
; [eval] issubtype(typeof(self.Example_g), int())
; [eval] typeof(self.Example_g)
; [eval] int()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_gp), int())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1228 | p2_7@431@01 | live]
; [else-branch: 1228 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 1228 | p2_7@431@01]
; [eval] issubtype(typeof(self_3.Example_gp), int())
; [eval] typeof(self_3.Example_gp)
; [eval] int()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p2_7@431@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_f, __prim__int___box__(0))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1229 | p1_7@430@01 | live]
; [else-branch: 1229 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 1229 | p1_7@430@01]
; [eval] int___eq__(self.Example_f, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p1_7@430@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p1_7@430@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_fp, __prim__int___box__(0))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1230 | p2_7@431@01 | live]
; [else-branch: 1230 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 1230 | p2_7@431@01]
; [eval] int___eq__(self_3.Example_fp, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01))))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p2_7@431@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01))))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p2_7@431@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01))))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_g, __prim__int___box__(1))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1231 | p1_7@430@01 | live]
; [else-branch: 1231 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 1231 | p1_7@430@01]
; [eval] int___eq__(self.Example_g, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p1_7@430@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p1_7@430@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_gp, __prim__int___box__(1))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1232 | p2_7@431@01 | live]
; [else-branch: 1232 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 1232 | p2_7@431@01]
; [eval] int___eq__(self_3.Example_gp, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p2_7@431@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p2_7@431@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1233 | p1_7@430@01 | live]
; [else-branch: 1233 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 1233 | p1_7@430@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1234 | p2_7@431@01 | live]
; [else-branch: 1234 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 1234 | p2_7@431@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] p1_7 && !ret1_3
(set-option :timeout 0)
(push) ; 39
; [then-branch: 1235 | !(p1_7@430@01) | live]
; [else-branch: 1235 | p1_7@430@01 | live]
(push) ; 40
; [then-branch: 1235 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 40
(push) ; 40
; [else-branch: 1235 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(push) ; 39
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1236 | p1_7@430@01 | live]
; [else-branch: 1236 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 1236 | p1_7@430@01]
; [exec]
; _cwl_162 := tmp1_48
; [eval] p2_7 && !ret2_3
(push) ; 40
; [then-branch: 1237 | !(p2_7@431@01) | live]
; [else-branch: 1237 | p2_7@431@01 | live]
(push) ; 41
; [then-branch: 1237 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 41
(push) ; 41
; [else-branch: 1237 | p2_7@431@01]
; [eval] !ret2_3
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1238 | p2_7@431@01 | live]
; [else-branch: 1238 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 1238 | p2_7@431@01]
; [exec]
; _cwl_162_0 := tmp2_48
; [eval] p1_7 && !ret1_3
(push) ; 41
; [then-branch: 1239 | !(p1_7@430@01) | live]
; [else-branch: 1239 | p1_7@430@01 | live]
(push) ; 42
; [then-branch: 1239 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 42
(push) ; 42
; [else-branch: 1239 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1240 | p1_7@430@01 | live]
; [else-branch: 1240 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 1240 | p1_7@430@01]
; [exec]
; b_3 := Example_res_8
; [exec]
; inhale _isDefined(3366754)
(declare-const $t@513@01 $Snap)
(assert (= $t@513@01 $Snap.unit))
; [eval] _isDefined(3366754)
(push) ; 42
(assert (_isDefined%precondition $Snap.unit 3366754))
(pop) ; 42
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3366754))
(assert (_isDefined $Snap.unit 3366754))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_7 && !ret2_3
(set-option :timeout 0)
(push) ; 42
; [then-branch: 1241 | !(p2_7@431@01) | live]
; [else-branch: 1241 | p2_7@431@01 | live]
(push) ; 43
; [then-branch: 1241 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 43
(push) ; 43
; [else-branch: 1241 | p2_7@431@01]
; [eval] !ret2_3
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(push) ; 42
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1242 | p2_7@431@01 | live]
; [else-branch: 1242 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 1242 | p2_7@431@01]
; [exec]
; b_3_0 := Example_res_8_0
; [exec]
; inhale true
(declare-const $t@514@01 $Snap)
(assert (= $t@514@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; p1_8 := p1_7 && (!ret1_3 && bool___unbox__(secret_15))
; [eval] p1_7 && (!ret1_3 && bool___unbox__(secret_15))
(set-option :timeout 0)
(push) ; 43
; [then-branch: 1243 | !(p1_7@430@01) | live]
; [else-branch: 1243 | p1_7@430@01 | live]
(push) ; 44
; [then-branch: 1243 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 44
(push) ; 44
; [else-branch: 1243 | p1_7@430@01]
; [eval] !ret1_3
(push) ; 45
; [then-branch: 1244 | False | live]
; [else-branch: 1244 | True | live]
(push) ; 46
; [then-branch: 1244 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 1244 | True]
; [eval] bool___unbox__(secret_15)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_3@438@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_3@438@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_3@438@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_3@438@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_3@438@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_3@438@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_3@438@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_7@430@01
  (and
    (issubtype<Bool> (typeof<PyType> secret_3@438@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_3@438@01))))
(declare-const p1_8@515@01 Bool)
(assert (= p1_8@515@01 (and p1_7@430@01 (bool___unbox__ $Snap.unit secret_3@438@01))))
; [exec]
; p2_8 := p2_7 && (!ret2_3 && bool___unbox__(secret_15_0))
; [eval] p2_7 && (!ret2_3 && bool___unbox__(secret_15_0))
(push) ; 43
; [then-branch: 1245 | !(p2_7@431@01) | live]
; [else-branch: 1245 | p2_7@431@01 | live]
(push) ; 44
; [then-branch: 1245 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 44
(push) ; 44
; [else-branch: 1245 | p2_7@431@01]
; [eval] !ret2_3
(push) ; 45
; [then-branch: 1246 | False | live]
; [else-branch: 1246 | True | live]
(push) ; 46
; [then-branch: 1246 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 1246 | True]
; [eval] bool___unbox__(secret_15_0)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_3_0@439@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_3_0@439@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_3_0@439@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_3_0@439@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_3_0@439@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_3_0@439@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_3_0@439@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_7@431@01
  (and
    (issubtype<Bool> (typeof<PyType> secret_3_0@439@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_3_0@439@01))))
(declare-const p2_8@516@01 Bool)
(assert (= p2_8@516@01 (and p2_7@431@01 (bool___unbox__ $Snap.unit secret_3_0@439@01))))
; [exec]
; p3_3 := p1_7 && (!ret1_3 && !bool___unbox__(secret_15))
; [eval] p1_7 && (!ret1_3 && !bool___unbox__(secret_15))
(push) ; 43
; [then-branch: 1247 | !(p1_7@430@01) | live]
; [else-branch: 1247 | p1_7@430@01 | live]
(push) ; 44
; [then-branch: 1247 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 44
(push) ; 44
; [else-branch: 1247 | p1_7@430@01]
; [eval] !ret1_3
(push) ; 45
; [then-branch: 1248 | False | live]
; [else-branch: 1248 | True | live]
(push) ; 46
; [then-branch: 1248 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 1248 | True]
; [eval] !bool___unbox__(secret_15)
; [eval] bool___unbox__(secret_15)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_3@438@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_3@438@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_3@438@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_3@438@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_3@438@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_3@438@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_3@438@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(declare-const p3_3@517@01 Bool)
(assert (=
  p3_3@517@01
  (and p1_7@430@01 (not (bool___unbox__ $Snap.unit secret_3@438@01)))))
; [exec]
; p4_3 := p2_7 && (!ret2_3 && !bool___unbox__(secret_15_0))
; [eval] p2_7 && (!ret2_3 && !bool___unbox__(secret_15_0))
(push) ; 43
; [then-branch: 1249 | !(p2_7@431@01) | live]
; [else-branch: 1249 | p2_7@431@01 | live]
(push) ; 44
; [then-branch: 1249 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 44
(push) ; 44
; [else-branch: 1249 | p2_7@431@01]
; [eval] !ret2_3
(push) ; 45
; [then-branch: 1250 | False | live]
; [else-branch: 1250 | True | live]
(push) ; 46
; [then-branch: 1250 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 1250 | True]
; [eval] !bool___unbox__(secret_15_0)
; [eval] bool___unbox__(secret_15_0)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_3_0@439@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_3_0@439@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_3_0@439@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_3_0@439@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_3_0@439@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_3_0@439@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_3_0@439@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(declare-const p4_3@518@01 Bool)
(assert (=
  p4_3@518@01
  (and p2_7@431@01 (not (bool___unbox__ $Snap.unit secret_3_0@439@01)))))
; [eval] p1_8 && !ret1_3
(push) ; 43
; [then-branch: 1251 | !(p1_8@515@01) | live]
; [else-branch: 1251 | p1_8@515@01 | live]
(push) ; 44
; [then-branch: 1251 | !(p1_8@515@01)]
(assert (not p1_8@515@01))
(pop) ; 44
(push) ; 44
; [else-branch: 1251 | p1_8@515@01]
(assert p1_8@515@01)
; [eval] !ret1_3
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(assert (or p1_8@515@01 (not p1_8@515@01)))
(push) ; 43
(set-option :timeout 10)
(assert (not (not p1_8@515@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not p1_8@515@01))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1252 | p1_8@515@01 | live]
; [else-branch: 1252 | !(p1_8@515@01) | live]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 1252 | p1_8@515@01]
(assert p1_8@515@01)
; [exec]
; _res := _checkDefined(a_3, 3366753)
; [eval] _checkDefined(a_3, 3366753)
(push) ; 44
; [eval] _isDefined(id)
(push) ; 45
(pop) ; 45
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_7@471@01 3366753))
(pop) ; 44
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_7@471@01 3366753))
(declare-const _res@519@01 $Ref)
(assert (= _res@519@01 (_checkDefined $Snap.unit tmp_7@471@01 3366753)))
; [exec]
; ret1_3 := true
; [eval] p2_8 && !ret2_3
(push) ; 44
; [then-branch: 1253 | !(p2_8@516@01) | live]
; [else-branch: 1253 | p2_8@516@01 | live]
(push) ; 45
; [then-branch: 1253 | !(p2_8@516@01)]
(assert (not p2_8@516@01))
(pop) ; 45
(push) ; 45
; [else-branch: 1253 | p2_8@516@01]
(assert p2_8@516@01)
; [eval] !ret2_3
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(assert (or p2_8@516@01 (not p2_8@516@01)))
(push) ; 44
(set-option :timeout 10)
(assert (not (not p2_8@516@01)))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not p2_8@516@01))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1254 | p2_8@516@01 | live]
; [else-branch: 1254 | !(p2_8@516@01) | live]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 1254 | p2_8@516@01]
(assert p2_8@516@01)
; [exec]
; _res_4 := a_3_0
; [exec]
; ret2_3 := true
; [eval] p1_7 && !ret1_3
(push) ; 45
; [then-branch: 1255 | !(p1_7@430@01) | live]
; [else-branch: 1255 | p1_7@430@01 | live]
(push) ; 46
; [then-branch: 1255 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 46
(push) ; 46
; [else-branch: 1255 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
; [then-branch: 1256 | False | dead]
; [else-branch: 1256 | True | live]
(push) ; 45
; [else-branch: 1256 | True]
(pop) ; 45
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 45
; [then-branch: 1257 | !(p1_7@430@01) | live]
; [else-branch: 1257 | p1_7@430@01 | live]
(push) ; 46
; [then-branch: 1257 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 46
(push) ; 46
; [else-branch: 1257 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(push) ; 45
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1258 | True | live]
; [else-branch: 1258 | False | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 1258 | True]
; [eval] p2_7 && !ret2_3
(push) ; 46
; [then-branch: 1259 | !(p2_7@431@01) | live]
; [else-branch: 1259 | p2_7@431@01 | live]
(push) ; 47
; [then-branch: 1259 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 47
(push) ; 47
; [else-branch: 1259 | p2_7@431@01]
; [eval] !ret2_3
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
; [then-branch: 1260 | False | dead]
; [else-branch: 1260 | True | live]
(push) ; 46
; [else-branch: 1260 | True]
(pop) ; 46
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 46
; [then-branch: 1261 | !(p2_7@431@01) | live]
; [else-branch: 1261 | p2_7@431@01 | live]
(push) ; 47
; [then-branch: 1261 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 47
(push) ; 47
; [else-branch: 1261 | p2_7@431@01]
; [eval] !ret2_3
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(push) ; 46
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1262 | True | live]
; [else-branch: 1262 | False | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 1262 | True]
; [exec]
; assert true
; [eval] p1_7 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1263 | p1_7@430@01 | live]
; [else-branch: 1263 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1263 | p1_7@430@01]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p2_7 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1264 | p2_7@431@01 | live]
; [else-branch: 1264 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1264 | p2_7@431@01]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p1_7 ==> issubtype(typeof(_res), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1265 | p1_7@430@01 | live]
; [else-branch: 1265 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1265 | p1_7@430@01]
; [eval] issubtype(typeof(_res), Example())
; [eval] typeof(_res)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> _res@519@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> _res@519@01) (as Example<PyType>  PyType))))
; [eval] p2_7 ==> issubtype(typeof(_res_4), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1266 | p2_7@431@01 | live]
; [else-branch: 1266 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1266 | p2_7@431@01]
; [eval] issubtype(typeof(_res_4), Example())
; [eval] typeof(_res_4)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1267 | p1_7@430@01 | live]
; [else-branch: 1267 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 47
; [then-branch: 1267 | p1_7@430@01]
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@519@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp_7@471@01 _res@519@01)))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1268 | p2_7@431@01 | live]
; [else-branch: 1268 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1268 | p2_7@431@01]
; [eval] p1_7 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1269 | p1_7@430@01 | live]
; [else-branch: 1269 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 1269 | p1_7@430@01]
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@519@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_7@471@01 _res@519@01)))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
; [eval] p2_7 ==> issubtype(typeof(_res_4.Example_fp), int())
(set-option :timeout 0)
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1270 | p2_7@431@01 | live]
; [else-branch: 1270 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 1270 | p2_7@431@01]
; [eval] issubtype(typeof(_res_4.Example_fp), int())
; [eval] typeof(_res_4.Example_fp)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
(push) ; 49
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1271 | p1_7@430@01 | live]
; [else-branch: 1271 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 1271 | p1_7@430@01]
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@519@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp_7@471@01 _res@519@01)))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1272 | p2_7@431@01 | live]
; [else-branch: 1272 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 1272 | p2_7@431@01]
; [eval] p1_7 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1273 | p1_7@430@01 | live]
; [else-branch: 1273 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1273 | p1_7@430@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@519@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_7@471@01 _res@519@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p2_7 ==> issubtype(typeof(_res_4.Example_gp), int())
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1274 | p2_7@431@01 | live]
; [else-branch: 1274 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1274 | p2_7@431@01]
; [eval] issubtype(typeof(_res_4.Example_gp), int())
; [eval] typeof(_res_4.Example_gp)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p1_7 && p2_7 ==> int___eq__(_res.Example_f, _res_4.Example_fp)
; [eval] p1_7 && p2_7
(push) ; 51
; [then-branch: 1275 | !(p1_7@430@01) | live]
; [else-branch: 1275 | p1_7@430@01 | live]
(push) ; 52
; [then-branch: 1275 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 52
(push) ; 52
; [else-branch: 1275 | p1_7@430@01]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_7@430@01 p2_7@431@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1_7@430@01 p2_7@431@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1276 | p1_7@430@01 && p2_7@431@01 | live]
; [else-branch: 1276 | !(p1_7@430@01 && p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1276 | p1_7@430@01 && p2_7@431@01]
(assert (and p1_7@430@01 p2_7@431@01))
; [eval] int___eq__(_res.Example_f, _res_4.Example_fp)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@519@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_7@471@01 _res@519@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=>
  (and p1_7@430@01 p2_7@431@01)
  (and
    p1_7@430@01
    p2_7@431@01
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))
(assert (and p1_7@430@01 p2_7@431@01))
(push) ; 51
(assert (not (=>
  (and p1_7@430@01 p2_7@431@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_7@430@01 p2_7@431@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))
; [eval] p1_7 && p2_7 ==> int___eq__(_res.Example_g, _res_4.Example_gp)
; [eval] p1_7 && p2_7
(push) ; 51
; [then-branch: 1277 | !(p1_7@430@01) | live]
; [else-branch: 1277 | p1_7@430@01 | live]
(push) ; 52
; [then-branch: 1277 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 52
(push) ; 52
; [else-branch: 1277 | p1_7@430@01]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_7@430@01 p2_7@431@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1_7@430@01 p2_7@431@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1278 | p1_7@430@01 && p2_7@431@01 | live]
; [else-branch: 1278 | !(p1_7@430@01 && p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1278 | p1_7@430@01 && p2_7@431@01]
(assert (and p1_7@430@01 p2_7@431@01))
; [eval] int___eq__(_res.Example_g, _res_4.Example_gp)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@519@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_7@471@01 _res@519@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))))))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=>
  (and p1_7@430@01 p2_7@431@01)
  (and
    p1_7@430@01
    p2_7@431@01
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))))))
(assert (and p1_7@430@01 p2_7@431@01))
(push) ; 51
(assert (not (=>
  (and p1_7@430@01 p2_7@431@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))))))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_7@430@01 p2_7@431@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))))))
; [eval] p1_7 ==> (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1279 | p1_7@430@01 | live]
; [else-branch: 1279 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1279 | p1_7@430@01]
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
(push) ; 53
; [then-branch: 1280 | False | live]
; [else-branch: 1280 | True | live]
(push) ; 54
; [then-branch: 1280 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 1280 | True]
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
(push) ; 55
; [then-branch: 1281 | False | live]
; [else-branch: 1281 | True | live]
(push) ; 56
; [then-branch: 1281 | False]
(assert false)
(pop) ; 56
(push) ; 56
; [else-branch: 1281 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
(push) ; 57
; [then-branch: 1282 | False | live]
; [else-branch: 1282 | True | live]
(push) ; 58
; [then-branch: 1282 | False]
(assert false)
(pop) ; 58
(push) ; 58
; [else-branch: 1282 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 58
(pop) ; 57
; Joined path conditions
; Joined path conditions
(pop) ; 56
(pop) ; 55
; Joined path conditions
; Joined path conditions
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p2_7 ==> (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1283 | p2_7@431@01 | live]
; [else-branch: 1283 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1283 | p2_7@431@01]
; [eval] (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false)
(push) ; 53
; [then-branch: 1284 | False | live]
; [else-branch: 1284 | True | live]
(push) ; 54
; [then-branch: 1284 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 1284 | True]
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false)
(push) ; 55
; [then-branch: 1285 | False | live]
; [else-branch: 1285 | True | live]
(push) ; 56
; [then-branch: 1285 | False]
(assert false)
(pop) ; 56
(push) ; 56
; [else-branch: 1285 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false)
(push) ; 57
; [then-branch: 1286 | False | live]
; [else-branch: 1286 | True | live]
(push) ; 58
; [then-branch: 1286 | False]
(assert false)
(pop) ; 58
(push) ; 58
; [else-branch: 1286 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)
(pop) ; 58
(pop) ; 57
; Joined path conditions
; Joined path conditions
(pop) ; 56
(pop) ; 55
; Joined path conditions
; Joined path conditions
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
(pop) ; 50
(pop) ; 49
(pop) ; 48
(pop) ; 47
(pop) ; 46
(pop) ; 45
(pop) ; 44
(push) ; 44
; [else-branch: 1254 | !(p2_8@516@01)]
(assert (not p2_8@516@01))
(pop) ; 44
; [eval] !(p2_8 && !ret2_3)
; [eval] p2_8 && !ret2_3
(push) ; 44
; [then-branch: 1287 | !(p2_8@516@01) | live]
; [else-branch: 1287 | p2_8@516@01 | live]
(push) ; 45
; [then-branch: 1287 | !(p2_8@516@01)]
(assert (not p2_8@516@01))
(pop) ; 45
(push) ; 45
; [else-branch: 1287 | p2_8@516@01]
(assert p2_8@516@01)
; [eval] !ret2_3
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(push) ; 44
(set-option :timeout 10)
(assert (not p2_8@516@01))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (not p2_8@516@01)))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1288 | !(p2_8@516@01) | live]
; [else-branch: 1288 | p2_8@516@01 | live]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 1288 | !(p2_8@516@01)]
(assert (not p2_8@516@01))
; [eval] p1_7 && !ret1_3
(push) ; 45
; [then-branch: 1289 | !(p1_7@430@01) | live]
; [else-branch: 1289 | p1_7@430@01 | live]
(push) ; 46
; [then-branch: 1289 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 46
(push) ; 46
; [else-branch: 1289 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] !ret1_3
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
; [then-branch: 1290 | False | dead]
; [else-branch: 1290 | True | live]
(push) ; 45
; [else-branch: 1290 | True]
(pop) ; 45
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 45
; [then-branch: 1291 | !(p1_7@430@01) | live]
; [else-branch: 1291 | p1_7@430@01 | live]
(push) ; 46
; [then-branch: 1291 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 46
(push) ; 46
; [else-branch: 1291 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] !ret1_3
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(push) ; 45
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1292 | True | live]
; [else-branch: 1292 | False | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 1292 | True]
; [eval] p2_7 && !ret2_3
(push) ; 46
; [then-branch: 1293 | !(p2_7@431@01) | live]
; [else-branch: 1293 | p2_7@431@01 | live]
(push) ; 47
; [then-branch: 1293 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 47
(push) ; 47
; [else-branch: 1293 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(push) ; 46
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 46
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1294 | p2_7@431@01 | live]
; [else-branch: 1294 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 1294 | p2_7@431@01]
(assert p2_7@431@01)
; [exec]
; _res_4 := b_3_0
; [exec]
; ret2_3 := true
; [exec]
; assert true
; [eval] p1_7 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1295 | p1_7@430@01 | live]
; [else-branch: 1295 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1295 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert p1_7@430@01)
; [eval] p2_7 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1296 | p2_7@431@01 | live]
; [else-branch: 1296 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1296 | p2_7@431@01]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p1_7 ==> issubtype(typeof(_res), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1297 | p1_7@430@01 | live]
; [else-branch: 1297 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1297 | p1_7@430@01]
; [eval] issubtype(typeof(_res), Example())
; [eval] typeof(_res)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> _res@519@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> _res@519@01) (as Example<PyType>  PyType))))
; [eval] p2_7 ==> issubtype(typeof(_res_4), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1298 | p2_7@431@01 | live]
; [else-branch: 1298 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1298 | p2_7@431@01]
; [eval] issubtype(typeof(_res_4), Example())
; [eval] typeof(_res_4)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1299 | p1_7@430@01 | live]
; [else-branch: 1299 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 47
; [then-branch: 1299 | p1_7@430@01]
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@519@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp_7@471@01 _res@519@01)))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1300 | p2_7@431@01 | live]
; [else-branch: 1300 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1300 | p2_7@431@01]
; [eval] p1_7 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1301 | p1_7@430@01 | live]
; [else-branch: 1301 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 1301 | p1_7@430@01]
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@519@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_7@471@01 _res@519@01)))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
; [eval] p2_7 ==> issubtype(typeof(_res_4.Example_fp), int())
(set-option :timeout 0)
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1302 | p2_7@431@01 | live]
; [else-branch: 1302 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 1302 | p2_7@431@01]
; [eval] issubtype(typeof(_res_4.Example_fp), int())
; [eval] typeof(_res_4.Example_fp)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
(push) ; 49
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1303 | p1_7@430@01 | live]
; [else-branch: 1303 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 1303 | p1_7@430@01]
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@519@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp_7@471@01 _res@519@01)))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1304 | p2_7@431@01 | live]
; [else-branch: 1304 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 1304 | p2_7@431@01]
; [eval] p1_7 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1305 | p1_7@430@01 | live]
; [else-branch: 1305 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1305 | p1_7@430@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@519@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_7@471@01 _res@519@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p2_7 ==> issubtype(typeof(_res_4.Example_gp), int())
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1306 | p2_7@431@01 | live]
; [else-branch: 1306 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1306 | p2_7@431@01]
; [eval] issubtype(typeof(_res_4.Example_gp), int())
; [eval] typeof(_res_4.Example_gp)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p1_7 && p2_7 ==> int___eq__(_res.Example_f, _res_4.Example_fp)
; [eval] p1_7 && p2_7
(push) ; 51
; [then-branch: 1307 | !(p1_7@430@01) | live]
; [else-branch: 1307 | p1_7@430@01 | live]
(push) ; 52
; [then-branch: 1307 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 52
(push) ; 52
; [else-branch: 1307 | p1_7@430@01]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_7@430@01 p2_7@431@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1_7@430@01 p2_7@431@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1308 | p1_7@430@01 && p2_7@431@01 | live]
; [else-branch: 1308 | !(p1_7@430@01 && p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1308 | p1_7@430@01 && p2_7@431@01]
(assert (and p1_7@430@01 p2_7@431@01))
; [eval] int___eq__(_res.Example_f, _res_4.Example_fp)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@519@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_7@471@01 _res@519@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=>
  (and p1_7@430@01 p2_7@431@01)
  (and
    p1_7@430@01
    p2_7@431@01
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))
(assert (and p1_7@430@01 p2_7@431@01))
(push) ; 51
(assert (not (=>
  (and p1_7@430@01 p2_7@431@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_7@430@01 p2_7@431@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@490@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))
; [eval] p1_7 && p2_7 ==> int___eq__(_res.Example_g, _res_4.Example_gp)
; [eval] p1_7 && p2_7
(push) ; 51
; [then-branch: 1309 | !(p1_7@430@01) | live]
; [else-branch: 1309 | p1_7@430@01 | live]
(push) ; 52
; [then-branch: 1309 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 52
(push) ; 52
; [else-branch: 1309 | p1_7@430@01]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_7@430@01 p2_7@431@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1_7@430@01 p2_7@431@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1310 | p1_7@430@01 && p2_7@431@01 | live]
; [else-branch: 1310 | !(p1_7@430@01 && p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1310 | p1_7@430@01 && p2_7@431@01]
(assert (and p1_7@430@01 p2_7@431@01))
; [eval] int___eq__(_res.Example_g, _res_4.Example_gp)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@519@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_7@471@01 _res@519@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=>
  (and p1_7@430@01 p2_7@431@01)
  (and
    p1_7@430@01
    p2_7@431@01
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
(assert (and p1_7@430@01 p2_7@431@01))
(push) ; 51
(assert (not (=>
  (and p1_7@430@01 p2_7@431@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_7@430@01 p2_7@431@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))
; [eval] p1_7 ==> (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1311 | p1_7@430@01 | live]
; [else-branch: 1311 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1311 | p1_7@430@01]
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
(push) ; 53
; [then-branch: 1312 | False | live]
; [else-branch: 1312 | True | live]
(push) ; 54
; [then-branch: 1312 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 1312 | True]
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
(push) ; 55
; [then-branch: 1313 | False | live]
; [else-branch: 1313 | True | live]
(push) ; 56
; [then-branch: 1313 | False]
(assert false)
(pop) ; 56
(push) ; 56
; [else-branch: 1313 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
(push) ; 57
; [then-branch: 1314 | False | live]
; [else-branch: 1314 | True | live]
(push) ; 58
; [then-branch: 1314 | False]
(assert false)
(pop) ; 58
(push) ; 58
; [else-branch: 1314 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 58
(pop) ; 57
; Joined path conditions
; Joined path conditions
(pop) ; 56
(pop) ; 55
; Joined path conditions
; Joined path conditions
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p2_7 ==> (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1315 | p2_7@431@01 | live]
; [else-branch: 1315 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1315 | p2_7@431@01]
; [eval] (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false)
(push) ; 53
; [then-branch: 1316 | False | live]
; [else-branch: 1316 | True | live]
(push) ; 54
; [then-branch: 1316 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 1316 | True]
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false)
(push) ; 55
; [then-branch: 1317 | False | live]
; [else-branch: 1317 | True | live]
(push) ; 56
; [then-branch: 1317 | False]
(assert false)
(pop) ; 56
(push) ; 56
; [else-branch: 1317 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false)
(push) ; 57
; [then-branch: 1318 | False | live]
; [else-branch: 1318 | True | live]
(push) ; 58
; [then-branch: 1318 | False]
(assert false)
(pop) ; 58
(push) ; 58
; [else-branch: 1318 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)
(pop) ; 58
(pop) ; 57
; Joined path conditions
; Joined path conditions
(pop) ; 56
(pop) ; 55
; Joined path conditions
; Joined path conditions
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
(pop) ; 50
(pop) ; 49
(pop) ; 48
(pop) ; 47
(pop) ; 46
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 46
; [then-branch: 1319 | !(p2_7@431@01) | live]
; [else-branch: 1319 | p2_7@431@01 | live]
(push) ; 47
; [then-branch: 1319 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 47
(push) ; 47
; [else-branch: 1319 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(push) ; 46
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1320 | !(p2_7@431@01) | dead]
; [else-branch: 1320 | p2_7@431@01 | live]
(set-option :timeout 0)
(push) ; 46
; [else-branch: 1320 | p2_7@431@01]
(assert p2_7@431@01)
(pop) ; 46
(pop) ; 45
(pop) ; 44
(push) ; 44
; [else-branch: 1288 | p2_8@516@01]
(assert p2_8@516@01)
(pop) ; 44
(pop) ; 43
(push) ; 43
; [else-branch: 1252 | !(p1_8@515@01)]
(assert (not p1_8@515@01))
(pop) ; 43
; [eval] !(p1_8 && !ret1_3)
; [eval] p1_8 && !ret1_3
(push) ; 43
; [then-branch: 1321 | !(p1_8@515@01) | live]
; [else-branch: 1321 | p1_8@515@01 | live]
(push) ; 44
; [then-branch: 1321 | !(p1_8@515@01)]
(assert (not p1_8@515@01))
(pop) ; 44
(push) ; 44
; [else-branch: 1321 | p1_8@515@01]
(assert p1_8@515@01)
; [eval] !ret1_3
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(push) ; 43
(set-option :timeout 10)
(assert (not p1_8@515@01))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not p1_8@515@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1322 | !(p1_8@515@01) | live]
; [else-branch: 1322 | p1_8@515@01 | live]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 1322 | !(p1_8@515@01)]
(assert (not p1_8@515@01))
; [eval] p2_8 && !ret2_3
(push) ; 44
; [then-branch: 1323 | !(p2_8@516@01) | live]
; [else-branch: 1323 | p2_8@516@01 | live]
(push) ; 45
; [then-branch: 1323 | !(p2_8@516@01)]
(assert (not p2_8@516@01))
(pop) ; 45
(push) ; 45
; [else-branch: 1323 | p2_8@516@01]
(assert p2_8@516@01)
; [eval] !ret2_3
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(assert (or p2_8@516@01 (not p2_8@516@01)))
(push) ; 44
(set-option :timeout 10)
(assert (not (not p2_8@516@01)))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not p2_8@516@01))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1324 | p2_8@516@01 | live]
; [else-branch: 1324 | !(p2_8@516@01) | live]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 1324 | p2_8@516@01]
(assert p2_8@516@01)
; [exec]
; _res_4 := a_3_0
; [exec]
; ret2_3 := true
; [eval] p1_7 && !ret1_3
(push) ; 45
; [then-branch: 1325 | !(p1_7@430@01) | live]
; [else-branch: 1325 | p1_7@430@01 | live]
(push) ; 46
; [then-branch: 1325 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 46
(push) ; 46
; [else-branch: 1325 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] !ret1_3
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(push) ; 45
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 45
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1326 | p1_7@430@01 | live]
; [else-branch: 1326 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 1326 | p1_7@430@01]
(assert p1_7@430@01)
; [exec]
; _res := _checkDefined(b_3, 3366754)
; [eval] _checkDefined(b_3, 3366754)
(push) ; 46
; [eval] _isDefined(id)
(push) ; 47
(pop) ; 47
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_8@493@01 3366754))
(pop) ; 46
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_8@493@01 3366754))
(declare-const _res@520@01 $Ref)
(assert (= _res@520@01 (_checkDefined $Snap.unit tmp_8@493@01 3366754)))
; [exec]
; ret1_3 := true
; [eval] p2_7 && !ret2_3
(push) ; 46
; [then-branch: 1327 | !(p2_7@431@01) | live]
; [else-branch: 1327 | p2_7@431@01 | live]
(push) ; 47
; [then-branch: 1327 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 47
(push) ; 47
; [else-branch: 1327 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
; [then-branch: 1328 | False | dead]
; [else-branch: 1328 | True | live]
(push) ; 46
; [else-branch: 1328 | True]
(pop) ; 46
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 46
; [then-branch: 1329 | !(p2_7@431@01) | live]
; [else-branch: 1329 | p2_7@431@01 | live]
(push) ; 47
; [then-branch: 1329 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 47
(push) ; 47
; [else-branch: 1329 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(push) ; 46
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1330 | True | live]
; [else-branch: 1330 | False | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 1330 | True]
; [exec]
; assert true
; [eval] p1_7 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1331 | p1_7@430@01 | live]
; [else-branch: 1331 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1331 | p1_7@430@01]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p2_7 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1332 | p2_7@431@01 | live]
; [else-branch: 1332 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1332 | p2_7@431@01]
(assert p2_7@431@01)
(pop) ; 48
(pop) ; 47
; Joined path conditions
(assert p2_7@431@01)
; [eval] p1_7 ==> issubtype(typeof(_res), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1333 | p1_7@430@01 | live]
; [else-branch: 1333 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1333 | p1_7@430@01]
; [eval] issubtype(typeof(_res), Example())
; [eval] typeof(_res)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> _res@520@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> _res@520@01) (as Example<PyType>  PyType))))
; [eval] p2_7 ==> issubtype(typeof(_res_4), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1334 | p2_7@431@01 | live]
; [else-branch: 1334 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1334 | p2_7@431@01]
; [eval] issubtype(typeof(_res_4), Example())
; [eval] typeof(_res_4)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1335 | p1_7@430@01 | live]
; [else-branch: 1335 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 47
; [then-branch: 1335 | p1_7@430@01]
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@520@01)))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1336 | p2_7@431@01 | live]
; [else-branch: 1336 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1336 | p2_7@431@01]
; [eval] p1_7 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1337 | p1_7@430@01 | live]
; [else-branch: 1337 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 1337 | p1_7@430@01]
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@520@01)))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
; [eval] p2_7 ==> issubtype(typeof(_res_4.Example_fp), int())
(set-option :timeout 0)
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1338 | p2_7@431@01 | live]
; [else-branch: 1338 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 1338 | p2_7@431@01]
; [eval] issubtype(typeof(_res_4.Example_fp), int())
; [eval] typeof(_res_4.Example_fp)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
(push) ; 49
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1339 | p1_7@430@01 | live]
; [else-branch: 1339 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 1339 | p1_7@430@01]
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@520@01)))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1340 | p2_7@431@01 | live]
; [else-branch: 1340 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 1340 | p2_7@431@01]
; [eval] p1_7 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1341 | p1_7@430@01 | live]
; [else-branch: 1341 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1341 | p1_7@430@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@520@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p2_7 ==> issubtype(typeof(_res_4.Example_gp), int())
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1342 | p2_7@431@01 | live]
; [else-branch: 1342 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1342 | p2_7@431@01]
; [eval] issubtype(typeof(_res_4.Example_gp), int())
; [eval] typeof(_res_4.Example_gp)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p1_7 && p2_7 ==> int___eq__(_res.Example_f, _res_4.Example_fp)
; [eval] p1_7 && p2_7
(push) ; 51
; [then-branch: 1343 | !(p1_7@430@01) | live]
; [else-branch: 1343 | p1_7@430@01 | live]
(push) ; 52
; [then-branch: 1343 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 52
(push) ; 52
; [else-branch: 1343 | p1_7@430@01]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_7@430@01 p2_7@431@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1_7@430@01 p2_7@431@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1344 | p1_7@430@01 && p2_7@431@01 | live]
; [else-branch: 1344 | !(p1_7@430@01 && p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1344 | p1_7@430@01 && p2_7@431@01]
(assert (and p1_7@430@01 p2_7@431@01))
; [eval] int___eq__(_res.Example_f, _res_4.Example_fp)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@520@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=>
  (and p1_7@430@01 p2_7@431@01)
  (and
    p1_7@430@01
    p2_7@431@01
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))
(assert (and p1_7@430@01 p2_7@431@01))
(push) ; 51
(assert (not (=>
  (and p1_7@430@01 p2_7@431@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_7@430@01 p2_7@431@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))
; [eval] p1_7 && p2_7 ==> int___eq__(_res.Example_g, _res_4.Example_gp)
; [eval] p1_7 && p2_7
(push) ; 51
; [then-branch: 1345 | !(p1_7@430@01) | live]
; [else-branch: 1345 | p1_7@430@01 | live]
(push) ; 52
; [then-branch: 1345 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 52
(push) ; 52
; [else-branch: 1345 | p1_7@430@01]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_7@430@01 p2_7@431@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1_7@430@01 p2_7@431@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1346 | p1_7@430@01 && p2_7@431@01 | live]
; [else-branch: 1346 | !(p1_7@430@01 && p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1346 | p1_7@430@01 && p2_7@431@01]
(assert (and p1_7@430@01 p2_7@431@01))
; [eval] int___eq__(_res.Example_g, _res_4.Example_gp)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@520@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))))))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=>
  (and p1_7@430@01 p2_7@431@01)
  (and
    p1_7@430@01
    p2_7@431@01
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))))))
(assert (and p1_7@430@01 p2_7@431@01))
(push) ; 51
(assert (not (=>
  (and p1_7@430@01 p2_7@431@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01)))))))))))))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_7@430@01 p2_7@431@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@490@01))))))))))))
; [eval] p1_7 ==> (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1347 | p1_7@430@01 | live]
; [else-branch: 1347 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1347 | p1_7@430@01]
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
(push) ; 53
; [then-branch: 1348 | False | live]
; [else-branch: 1348 | True | live]
(push) ; 54
; [then-branch: 1348 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 1348 | True]
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
(push) ; 55
; [then-branch: 1349 | False | live]
; [else-branch: 1349 | True | live]
(push) ; 56
; [then-branch: 1349 | False]
(assert false)
(pop) ; 56
(push) ; 56
; [else-branch: 1349 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
(push) ; 57
; [then-branch: 1350 | False | live]
; [else-branch: 1350 | True | live]
(push) ; 58
; [then-branch: 1350 | False]
(assert false)
(pop) ; 58
(push) ; 58
; [else-branch: 1350 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 58
(pop) ; 57
; Joined path conditions
; Joined path conditions
(pop) ; 56
(pop) ; 55
; Joined path conditions
; Joined path conditions
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p2_7 ==> (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1351 | p2_7@431@01 | live]
; [else-branch: 1351 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1351 | p2_7@431@01]
; [eval] (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false)
(push) ; 53
; [then-branch: 1352 | False | live]
; [else-branch: 1352 | True | live]
(push) ; 54
; [then-branch: 1352 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 1352 | True]
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false)
(push) ; 55
; [then-branch: 1353 | False | live]
; [else-branch: 1353 | True | live]
(push) ; 56
; [then-branch: 1353 | False]
(assert false)
(pop) ; 56
(push) ; 56
; [else-branch: 1353 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false)
(push) ; 57
; [then-branch: 1354 | False | live]
; [else-branch: 1354 | True | live]
(push) ; 58
; [then-branch: 1354 | False]
(assert false)
(pop) ; 58
(push) ; 58
; [else-branch: 1354 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)
(pop) ; 58
(pop) ; 57
; Joined path conditions
; Joined path conditions
(pop) ; 56
(pop) ; 55
; Joined path conditions
; Joined path conditions
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
(pop) ; 50
(pop) ; 49
(pop) ; 48
(pop) ; 47
(pop) ; 46
(pop) ; 45
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 45
; [then-branch: 1355 | !(p1_7@430@01) | live]
; [else-branch: 1355 | p1_7@430@01 | live]
(push) ; 46
; [then-branch: 1355 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 46
(push) ; 46
; [else-branch: 1355 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] !ret1_3
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(push) ; 45
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1356 | !(p1_7@430@01) | dead]
; [else-branch: 1356 | p1_7@430@01 | live]
(set-option :timeout 0)
(push) ; 45
; [else-branch: 1356 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 45
(pop) ; 44
(push) ; 44
; [else-branch: 1324 | !(p2_8@516@01)]
(assert (not p2_8@516@01))
(pop) ; 44
; [eval] !(p2_8 && !ret2_3)
; [eval] p2_8 && !ret2_3
(push) ; 44
; [then-branch: 1357 | !(p2_8@516@01) | live]
; [else-branch: 1357 | p2_8@516@01 | live]
(push) ; 45
; [then-branch: 1357 | !(p2_8@516@01)]
(assert (not p2_8@516@01))
(pop) ; 45
(push) ; 45
; [else-branch: 1357 | p2_8@516@01]
(assert p2_8@516@01)
; [eval] !ret2_3
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(push) ; 44
(set-option :timeout 10)
(assert (not p2_8@516@01))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (not p2_8@516@01)))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1358 | !(p2_8@516@01) | live]
; [else-branch: 1358 | p2_8@516@01 | live]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 1358 | !(p2_8@516@01)]
(assert (not p2_8@516@01))
; [eval] p1_7 && !ret1_3
(push) ; 45
; [then-branch: 1359 | !(p1_7@430@01) | live]
; [else-branch: 1359 | p1_7@430@01 | live]
(push) ; 46
; [then-branch: 1359 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 46
(push) ; 46
; [else-branch: 1359 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] !ret1_3
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(push) ; 45
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 45
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1360 | p1_7@430@01 | live]
; [else-branch: 1360 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 1360 | p1_7@430@01]
(assert p1_7@430@01)
; [exec]
; _res := _checkDefined(b_3, 3366754)
; [eval] _checkDefined(b_3, 3366754)
(push) ; 46
; [eval] _isDefined(id)
(push) ; 47
(pop) ; 47
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_8@493@01 3366754))
(pop) ; 46
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_8@493@01 3366754))
(declare-const _res@521@01 $Ref)
(assert (= _res@521@01 (_checkDefined $Snap.unit tmp_8@493@01 3366754)))
; [exec]
; ret1_3 := true
; [eval] p2_7 && !ret2_3
(push) ; 46
; [then-branch: 1361 | !(p2_7@431@01) | live]
; [else-branch: 1361 | p2_7@431@01 | live]
(push) ; 47
; [then-branch: 1361 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 47
(push) ; 47
; [else-branch: 1361 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(push) ; 46
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 46
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1362 | p2_7@431@01 | live]
; [else-branch: 1362 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 1362 | p2_7@431@01]
(assert p2_7@431@01)
; [exec]
; _res_4 := b_3_0
; [exec]
; ret2_3 := true
; [exec]
; assert true
; [eval] p1_7 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1363 | p1_7@430@01 | live]
; [else-branch: 1363 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1363 | p1_7@430@01]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p2_7 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1364 | p2_7@431@01 | live]
; [else-branch: 1364 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1364 | p2_7@431@01]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p1_7 ==> issubtype(typeof(_res), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1365 | p1_7@430@01 | live]
; [else-branch: 1365 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1365 | p1_7@430@01]
; [eval] issubtype(typeof(_res), Example())
; [eval] typeof(_res)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> _res@521@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> _res@521@01) (as Example<PyType>  PyType))))
; [eval] p2_7 ==> issubtype(typeof(_res_4), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1366 | p2_7@431@01 | live]
; [else-branch: 1366 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1366 | p2_7@431@01]
; [eval] issubtype(typeof(_res_4), Example())
; [eval] typeof(_res_4)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1367 | p1_7@430@01 | live]
; [else-branch: 1367 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 47
; [then-branch: 1367 | p1_7@430@01]
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@521@01)))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1368 | p2_7@431@01 | live]
; [else-branch: 1368 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1368 | p2_7@431@01]
; [eval] p1_7 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1369 | p1_7@430@01 | live]
; [else-branch: 1369 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 1369 | p1_7@430@01]
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@521@01)))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
; [eval] p2_7 ==> issubtype(typeof(_res_4.Example_fp), int())
(set-option :timeout 0)
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1370 | p2_7@431@01 | live]
; [else-branch: 1370 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 1370 | p2_7@431@01]
; [eval] issubtype(typeof(_res_4.Example_fp), int())
; [eval] typeof(_res_4.Example_fp)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
(push) ; 49
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1371 | p1_7@430@01 | live]
; [else-branch: 1371 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 1371 | p1_7@430@01]
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@521@01)))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1372 | p2_7@431@01 | live]
; [else-branch: 1372 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 1372 | p2_7@431@01]
; [eval] p1_7 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1373 | p1_7@430@01 | live]
; [else-branch: 1373 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1373 | p1_7@430@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@521@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p2_7 ==> issubtype(typeof(_res_4.Example_gp), int())
(set-option :timeout 0)
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1374 | p2_7@431@01 | live]
; [else-branch: 1374 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1374 | p2_7@431@01]
; [eval] issubtype(typeof(_res_4.Example_gp), int())
; [eval] typeof(_res_4.Example_gp)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p1_7 && p2_7 ==> int___eq__(_res.Example_f, _res_4.Example_fp)
; [eval] p1_7 && p2_7
(push) ; 51
; [then-branch: 1375 | !(p1_7@430@01) | live]
; [else-branch: 1375 | p1_7@430@01 | live]
(push) ; 52
; [then-branch: 1375 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 52
(push) ; 52
; [else-branch: 1375 | p1_7@430@01]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_7@430@01 p2_7@431@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1_7@430@01 p2_7@431@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1376 | p1_7@430@01 && p2_7@431@01 | live]
; [else-branch: 1376 | !(p1_7@430@01 && p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1376 | p1_7@430@01 && p2_7@431@01]
(assert (and p1_7@430@01 p2_7@431@01))
; [eval] int___eq__(_res.Example_f, _res_4.Example_fp)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@521@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=>
  (and p1_7@430@01 p2_7@431@01)
  (and
    p1_7@430@01
    p2_7@431@01
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))
(assert (and p1_7@430@01 p2_7@431@01))
(push) ; 51
(assert (not (=>
  (and p1_7@430@01 p2_7@431@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_7@430@01 p2_7@431@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))
; [eval] p1_7 && p2_7 ==> int___eq__(_res.Example_g, _res_4.Example_gp)
; [eval] p1_7 && p2_7
(push) ; 51
; [then-branch: 1377 | !(p1_7@430@01) | live]
; [else-branch: 1377 | p1_7@430@01 | live]
(push) ; 52
; [then-branch: 1377 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 52
(push) ; 52
; [else-branch: 1377 | p1_7@430@01]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_7@430@01 p2_7@431@01))))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (and p1_7@430@01 p2_7@431@01)))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1378 | p1_7@430@01 && p2_7@431@01 | live]
; [else-branch: 1378 | !(p1_7@430@01 && p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1378 | p1_7@430@01 && p2_7@431@01]
(assert (and p1_7@430@01 p2_7@431@01))
; [eval] int___eq__(_res.Example_g, _res_4.Example_gp)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_8@493@01 _res@521@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 54
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
(pop) ; 53
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (=>
  (and p1_7@430@01 p2_7@431@01)
  (and
    p1_7@430@01
    p2_7@431@01
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
(assert (and p1_7@430@01 p2_7@431@01))
(push) ; 51
(assert (not (=>
  (and p1_7@430@01 p2_7@431@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_7@430@01 p2_7@431@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))
; [eval] p1_7 ==> (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1379 | p1_7@430@01 | live]
; [else-branch: 1379 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1379 | p1_7@430@01]
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
(push) ; 53
; [then-branch: 1380 | False | live]
; [else-branch: 1380 | True | live]
(push) ; 54
; [then-branch: 1380 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 1380 | True]
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
(push) ; 55
; [then-branch: 1381 | False | live]
; [else-branch: 1381 | True | live]
(push) ; 56
; [then-branch: 1381 | False]
(assert false)
(pop) ; 56
(push) ; 56
; [else-branch: 1381 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
(push) ; 57
; [then-branch: 1382 | False | live]
; [else-branch: 1382 | True | live]
(push) ; 58
; [then-branch: 1382 | False]
(assert false)
(pop) ; 58
(push) ; 58
; [else-branch: 1382 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 58
(pop) ; 57
; Joined path conditions
; Joined path conditions
(pop) ; 56
(pop) ; 55
; Joined path conditions
; Joined path conditions
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p2_7 ==> (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1383 | p2_7@431@01 | live]
; [else-branch: 1383 | !(p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1383 | p2_7@431@01]
; [eval] (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false)
(push) ; 53
; [then-branch: 1384 | False | live]
; [else-branch: 1384 | True | live]
(push) ; 54
; [then-branch: 1384 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 1384 | True]
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false)
(push) ; 55
; [then-branch: 1385 | False | live]
; [else-branch: 1385 | True | live]
(push) ; 56
; [then-branch: 1385 | False]
(assert false)
(pop) ; 56
(push) ; 56
; [else-branch: 1385 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false)
(push) ; 57
; [then-branch: 1386 | False | live]
; [else-branch: 1386 | True | live]
(push) ; 58
; [then-branch: 1386 | False]
(assert false)
(pop) ; 58
(push) ; 58
; [else-branch: 1386 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)
(pop) ; 58
(pop) ; 57
; Joined path conditions
; Joined path conditions
(pop) ; 56
(pop) ; 55
; Joined path conditions
; Joined path conditions
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
(pop) ; 50
(pop) ; 49
(pop) ; 48
(pop) ; 47
(pop) ; 46
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 46
; [then-branch: 1387 | !(p2_7@431@01) | live]
; [else-branch: 1387 | p2_7@431@01 | live]
(push) ; 47
; [then-branch: 1387 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 47
(push) ; 47
; [else-branch: 1387 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(push) ; 46
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1388 | !(p2_7@431@01) | dead]
; [else-branch: 1388 | p2_7@431@01 | live]
(set-option :timeout 0)
(push) ; 46
; [else-branch: 1388 | p2_7@431@01]
(assert p2_7@431@01)
(pop) ; 46
(pop) ; 45
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 45
; [then-branch: 1389 | !(p1_7@430@01) | live]
; [else-branch: 1389 | p1_7@430@01 | live]
(push) ; 46
; [then-branch: 1389 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 46
(push) ; 46
; [else-branch: 1389 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] !ret1_3
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(push) ; 45
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1390 | !(p1_7@430@01) | dead]
; [else-branch: 1390 | p1_7@430@01 | live]
(set-option :timeout 0)
(push) ; 45
; [else-branch: 1390 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 45
(pop) ; 44
(push) ; 44
; [else-branch: 1358 | p2_8@516@01]
(assert p2_8@516@01)
(pop) ; 44
(pop) ; 43
(push) ; 43
; [else-branch: 1322 | p1_8@515@01]
(assert p1_8@515@01)
(pop) ; 43
(pop) ; 42
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 42
; [then-branch: 1391 | !(p2_7@431@01) | live]
; [else-branch: 1391 | p2_7@431@01 | live]
(push) ; 43
; [then-branch: 1391 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 43
(push) ; 43
; [else-branch: 1391 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(push) ; 42
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1392 | !(p2_7@431@01) | dead]
; [else-branch: 1392 | p2_7@431@01 | live]
(set-option :timeout 0)
(push) ; 42
; [else-branch: 1392 | p2_7@431@01]
(assert p2_7@431@01)
(pop) ; 42
(pop) ; 41
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 41
; [then-branch: 1393 | !(p1_7@430@01) | live]
; [else-branch: 1393 | p1_7@430@01 | live]
(push) ; 42
; [then-branch: 1393 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 42
(push) ; 42
; [else-branch: 1393 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] !ret1_3
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1394 | !(p1_7@430@01) | dead]
; [else-branch: 1394 | p1_7@430@01 | live]
(set-option :timeout 0)
(push) ; 41
; [else-branch: 1394 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 41
(pop) ; 40
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 40
; [then-branch: 1395 | !(p2_7@431@01) | live]
; [else-branch: 1395 | p2_7@431@01 | live]
(push) ; 41
; [then-branch: 1395 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 41
(push) ; 41
; [else-branch: 1395 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(push) ; 40
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1396 | !(p2_7@431@01) | dead]
; [else-branch: 1396 | p2_7@431@01 | live]
(set-option :timeout 0)
(push) ; 40
; [else-branch: 1396 | p2_7@431@01]
(assert p2_7@431@01)
(pop) ; 40
(pop) ; 39
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 39
; [then-branch: 1397 | !(p1_7@430@01) | live]
; [else-branch: 1397 | p1_7@430@01 | live]
(push) ; 40
; [then-branch: 1397 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 40
(push) ; 40
; [else-branch: 1397 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] !ret1_3
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(push) ; 39
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1398 | !(p1_7@430@01) | dead]
; [else-branch: 1398 | p1_7@430@01 | live]
(set-option :timeout 0)
(push) ; 39
; [else-branch: 1398 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 39
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 30
; [then-branch: 1399 | !(p2_7@431@01) | live]
; [else-branch: 1399 | p2_7@431@01 | live]
(push) ; 31
; [then-branch: 1399 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 31
(push) ; 31
; [else-branch: 1399 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1400 | !(p2_7@431@01) | dead]
; [else-branch: 1400 | p2_7@431@01 | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 1400 | p2_7@431@01]
(assert p2_7@431@01)
(pop) ; 30
(pop) ; 29
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 29
; [then-branch: 1401 | !(p1_7@430@01) | live]
; [else-branch: 1401 | p1_7@430@01 | live]
(push) ; 30
; [then-branch: 1401 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 30
(push) ; 30
; [else-branch: 1401 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] !ret1_3
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1402 | !(p1_7@430@01) | dead]
; [else-branch: 1402 | p1_7@430@01 | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 1402 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 29
(pop) ; 28
; [eval] !(p1_7 && !ret1_3 || p2_7 && !ret2_3)
; [eval] p1_7 && !ret1_3 || p2_7 && !ret2_3
; [eval] p1_7 && !ret1_3
(push) ; 28
; [then-branch: 1403 | !(p1_7@430@01) | live]
; [else-branch: 1403 | p1_7@430@01 | live]
(push) ; 29
; [then-branch: 1403 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 29
(push) ; 29
; [else-branch: 1403 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] !ret1_3
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
; [then-branch: 1404 | p1_7@430@01 | live]
; [else-branch: 1404 | !(p1_7@430@01) | live]
(push) ; 29
; [then-branch: 1404 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 29
(push) ; 29
; [else-branch: 1404 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
; [eval] p2_7 && !ret2_3
(push) ; 30
; [then-branch: 1405 | !(p2_7@431@01) | live]
; [else-branch: 1405 | p2_7@431@01 | live]
(push) ; 31
; [then-branch: 1405 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 31
(push) ; 31
; [else-branch: 1405 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 1406 | !(p1_7@430@01 || p2_7@431@01) | dead]
; [else-branch: 1406 | p1_7@430@01 || p2_7@431@01 | live]
(push) ; 28
; [else-branch: 1406 | p1_7@430@01 || p2_7@431@01]
(pop) ; 28
(pop) ; 27
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 27
; [then-branch: 1407 | !(p2_7@431@01) | live]
; [else-branch: 1407 | p2_7@431@01 | live]
(push) ; 28
; [then-branch: 1407 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 28
(push) ; 28
; [else-branch: 1407 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(push) ; 27
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1408 | !(p2_7@431@01) | dead]
; [else-branch: 1408 | p2_7@431@01 | live]
(set-option :timeout 0)
(push) ; 27
; [else-branch: 1408 | p2_7@431@01]
(assert p2_7@431@01)
(pop) ; 27
(pop) ; 26
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 26
; [then-branch: 1409 | !(p1_7@430@01) | live]
; [else-branch: 1409 | p1_7@430@01 | live]
(push) ; 27
; [then-branch: 1409 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 27
(push) ; 27
; [else-branch: 1409 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] !ret1_3
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1410 | !(p1_7@430@01) | dead]
; [else-branch: 1410 | p1_7@430@01 | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 1410 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 26
(pop) ; 25
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 25
; [then-branch: 1411 | !(p2_7@431@01) | live]
; [else-branch: 1411 | p2_7@431@01 | live]
(push) ; 26
; [then-branch: 1411 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 26
(push) ; 26
; [else-branch: 1411 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1412 | !(p2_7@431@01) | dead]
; [else-branch: 1412 | p2_7@431@01 | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 1412 | p2_7@431@01]
(assert p2_7@431@01)
(pop) ; 25
(pop) ; 24
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 24
; [then-branch: 1413 | !(p1_7@430@01) | live]
; [else-branch: 1413 | p1_7@430@01 | live]
(push) ; 25
; [then-branch: 1413 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1413 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] !ret1_3
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1414 | !(p1_7@430@01) | dead]
; [else-branch: 1414 | p1_7@430@01 | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 1414 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 24
(pop) ; 23
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 23
; [then-branch: 1415 | !(p2_7@431@01) | live]
; [else-branch: 1415 | p2_7@431@01 | live]
(push) ; 24
; [then-branch: 1415 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1415 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1416 | !(p2_7@431@01) | dead]
; [else-branch: 1416 | p2_7@431@01 | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 1416 | p2_7@431@01]
(assert p2_7@431@01)
(pop) ; 23
(pop) ; 22
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 22
; [then-branch: 1417 | !(p1_7@430@01) | live]
; [else-branch: 1417 | p1_7@430@01 | live]
(push) ; 23
; [then-branch: 1417 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 23
(push) ; 23
; [else-branch: 1417 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] !ret1_3
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1418 | !(p1_7@430@01) | dead]
; [else-branch: 1418 | p1_7@430@01 | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 1418 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 22
(pop) ; 21
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 21
; [then-branch: 1419 | !(p2_7@431@01) | live]
; [else-branch: 1419 | p2_7@431@01 | live]
(push) ; 22
; [then-branch: 1419 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 22
(push) ; 22
; [else-branch: 1419 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1420 | !(p2_7@431@01) | dead]
; [else-branch: 1420 | p2_7@431@01 | live]
(set-option :timeout 0)
(push) ; 21
; [else-branch: 1420 | p2_7@431@01]
(assert p2_7@431@01)
(pop) ; 21
(pop) ; 20
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 20
; [then-branch: 1421 | !(p1_7@430@01) | live]
; [else-branch: 1421 | p1_7@430@01 | live]
(push) ; 21
; [then-branch: 1421 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1421 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] !ret1_3
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1422 | !(p1_7@430@01) | dead]
; [else-branch: 1422 | p1_7@430@01 | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 1422 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 11
; [then-branch: 1423 | !(p2_7@431@01) | live]
; [else-branch: 1423 | p2_7@431@01 | live]
(push) ; 12
; [then-branch: 1423 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 12
(push) ; 12
; [else-branch: 1423 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1424 | !(p2_7@431@01) | dead]
; [else-branch: 1424 | p2_7@431@01 | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 1424 | p2_7@431@01]
(assert p2_7@431@01)
(pop) ; 11
(pop) ; 10
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 10
; [then-branch: 1425 | !(p1_7@430@01) | live]
; [else-branch: 1425 | p1_7@430@01 | live]
(push) ; 11
; [then-branch: 1425 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 11
(push) ; 11
; [else-branch: 1425 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] !ret1_3
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1426 | !(p1_7@430@01) | dead]
; [else-branch: 1426 | p1_7@430@01 | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 1426 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 10
(pop) ; 9
; [eval] !(p1_7 && !ret1_3 || p2_7 && !ret2_3)
; [eval] p1_7 && !ret1_3 || p2_7 && !ret2_3
; [eval] p1_7 && !ret1_3
(push) ; 9
; [then-branch: 1427 | !(p1_7@430@01) | live]
; [else-branch: 1427 | p1_7@430@01 | live]
(push) ; 10
; [then-branch: 1427 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1427 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] !ret1_3
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 1428 | p1_7@430@01 | live]
; [else-branch: 1428 | !(p1_7@430@01) | live]
(push) ; 10
; [then-branch: 1428 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 10
(push) ; 10
; [else-branch: 1428 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
; [eval] p2_7 && !ret2_3
(push) ; 11
; [then-branch: 1429 | !(p2_7@431@01) | live]
; [else-branch: 1429 | p2_7@431@01 | live]
(push) ; 12
; [then-branch: 1429 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 12
(push) ; 12
; [else-branch: 1429 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (or p1_7@430@01 p2_7@431@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1430 | !(p1_7@430@01 || p2_7@431@01) | dead]
; [else-branch: 1430 | p1_7@430@01 || p2_7@431@01 | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 1430 | p1_7@430@01 || p2_7@431@01]
(assert (or p1_7@430@01 p2_7@431@01))
(pop) ; 9
(pop) ; 8
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 8
; [then-branch: 1431 | !(p2_7@431@01) | live]
; [else-branch: 1431 | p2_7@431@01 | live]
(push) ; 9
; [then-branch: 1431 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1431 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1432 | !(p2_7@431@01) | dead]
; [else-branch: 1432 | p2_7@431@01 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 1432 | p2_7@431@01]
(assert p2_7@431@01)
(pop) ; 8
(pop) ; 7
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 7
; [then-branch: 1433 | !(p1_7@430@01) | live]
; [else-branch: 1433 | p1_7@430@01 | live]
(push) ; 8
; [then-branch: 1433 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1433 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] !ret1_3
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1434 | !(p1_7@430@01) | dead]
; [else-branch: 1434 | p1_7@430@01 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 1434 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 7
(pop) ; 6
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 6
; [then-branch: 1435 | !(p2_7@431@01) | live]
; [else-branch: 1435 | p2_7@431@01 | live]
(push) ; 7
; [then-branch: 1435 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1435 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1436 | !(p2_7@431@01) | dead]
; [else-branch: 1436 | p2_7@431@01 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 1436 | p2_7@431@01]
(assert p2_7@431@01)
(pop) ; 6
(pop) ; 5
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 5
; [then-branch: 1437 | !(p1_7@430@01) | live]
; [else-branch: 1437 | p1_7@430@01 | live]
(push) ; 6
; [then-branch: 1437 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1437 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] !ret1_3
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1438 | !(p1_7@430@01) | dead]
; [else-branch: 1438 | p1_7@430@01 | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 1438 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 1102 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 4
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 4
; [then-branch: 1439 | !(p2_7@431@01) | live]
; [else-branch: 1439 | p2_7@431@01 | live]
(push) ; 5
; [then-branch: 1439 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
(pop) ; 5
(push) ; 5
; [else-branch: 1439 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_7@431@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1440 | !(p2_7@431@01) | live]
; [else-branch: 1440 | p2_7@431@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1440 | !(p2_7@431@01)]
(assert (not p2_7@431@01))
; [exec]
; tmp_7 := new()
(declare-const tmp_7@522@01 $Ref)
(assert (not (= tmp_7@522@01 $Ref.null)))
(assert (not (= tmp_7@522@01 Example_res_8_0@459@01)))
(assert (not (= tmp_7@522@01 _cthread_162@432@01)))
(assert (not (= tmp_7@522@01 tmp_8@465@01)))
(assert (not (= tmp_7@522@01 Example_res_7@456@01)))
(assert (not (= tmp_7@522@01 a_3@450@01)))
(assert (not (= tmp_7@522@01 a_3_0@451@01)))
(assert (not (= tmp_7@522@01 _err_4@449@01)))
(assert (not (= tmp_7@522@01 _res_4@443@01)))
(assert (not (= tmp_7@522@01 b_3_0@453@01)))
(assert (not (= tmp_7@522@01 tmp_7@464@01)))
(assert (not (= tmp_7@522@01 secret_3_0@439@01)))
(assert (not (= tmp_7@522@01 Example_res_7_0@457@01)))
(assert (not (= tmp_7@522@01 secret_3@438@01)))
(assert (not (= tmp_7@522@01 _cthread_162_0@433@01)))
(assert (not (= tmp_7@522@01 Example_res_8@458@01)))
(assert (not (= tmp_7@522@01 b_3@452@01)))
(assert (not (= tmp_7@522@01 secret_15_0@455@01)))
; [eval] p1_7 && !ret1_3
(push) ; 5
; [then-branch: 1441 | !(p1_7@430@01) | live]
; [else-branch: 1441 | p1_7@430@01 | live]
(push) ; 6
; [then-branch: 1441 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1441 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] !ret1_3
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1442 | p1_7@430@01 | live]
; [else-branch: 1442 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1442 | p1_7@430@01]
(assert p1_7@430@01)
; [exec]
; Example_res_7 := tmp_7
; [eval] p2_7 && !ret2_3
(push) ; 6
; [then-branch: 1443 | !(p2_7@431@01) | live]
; [else-branch: 1443 | p2_7@431@01 | live]
(push) ; 7
; [then-branch: 1443 | !(p2_7@431@01)]
(pop) ; 7
(push) ; 7
; [else-branch: 1443 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [then-branch: 1444 | p2_7@431@01 | dead]
; [else-branch: 1444 | !(p2_7@431@01) | live]
(push) ; 6
; [else-branch: 1444 | !(p2_7@431@01)]
(pop) ; 6
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 6
; [then-branch: 1445 | !(p2_7@431@01) | live]
; [else-branch: 1445 | p2_7@431@01 | live]
(push) ; 7
; [then-branch: 1445 | !(p2_7@431@01)]
(pop) ; 7
(push) ; 7
; [else-branch: 1445 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1446 | !(p2_7@431@01) | live]
; [else-branch: 1446 | p2_7@431@01 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1446 | !(p2_7@431@01)]
; [eval] p1_7 && !ret1_3
(push) ; 7
; [then-branch: 1447 | !(p1_7@430@01) | live]
; [else-branch: 1447 | p1_7@430@01 | live]
(push) ; 8
; [then-branch: 1447 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1447 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1448 | p1_7@430@01 | live]
; [else-branch: 1448 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1448 | p1_7@430@01]
; [exec]
; inhale typeof(Example_res_7) == Example()
(declare-const $t@523@01 $Snap)
(assert (= $t@523@01 $Snap.unit))
; [eval] typeof(Example_res_7) == Example()
; [eval] typeof(Example_res_7)
; [eval] Example()
(assert (= (typeof<PyType> tmp_7@522@01) (as Example<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_7, 1888441915154752436293), write)
(declare-const $t@524@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_7, 1906888659228461987909), write)
(declare-const $t@525@01 $Snap)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_7 && !ret2_3
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1449 | !(p2_7@431@01) | live]
; [else-branch: 1449 | p2_7@431@01 | live]
(push) ; 9
; [then-branch: 1449 | !(p2_7@431@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 1449 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 1450 | p2_7@431@01 | dead]
; [else-branch: 1450 | !(p2_7@431@01) | live]
(push) ; 8
; [else-branch: 1450 | !(p2_7@431@01)]
(pop) ; 8
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 8
; [then-branch: 1451 | !(p2_7@431@01) | live]
; [else-branch: 1451 | p2_7@431@01 | live]
(push) ; 9
; [then-branch: 1451 | !(p2_7@431@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 1451 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1452 | !(p2_7@431@01) | live]
; [else-branch: 1452 | p2_7@431@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1452 | !(p2_7@431@01)]
; [eval] p1_7 && !ret1_3 || p2_7 && !ret2_3
; [eval] p1_7 && !ret1_3
(push) ; 9
; [then-branch: 1453 | !(p1_7@430@01) | live]
; [else-branch: 1453 | p1_7@430@01 | live]
(push) ; 10
; [then-branch: 1453 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1453 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 1454 | p1_7@430@01 | live]
; [else-branch: 1454 | !(p1_7@430@01) | live]
(push) ; 10
; [then-branch: 1454 | p1_7@430@01]
(pop) ; 10
(push) ; 10
; [else-branch: 1454 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
; [eval] p2_7 && !ret2_3
(push) ; 11
; [then-branch: 1455 | !(p2_7@431@01) | live]
; [else-branch: 1455 | p2_7@431@01 | live]
(push) ; 12
; [then-branch: 1455 | !(p2_7@431@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 1455 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not (or p1_7@430@01 p2_7@431@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (or p1_7@430@01 p2_7@431@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1456 | p1_7@430@01 || p2_7@431@01 | live]
; [else-branch: 1456 | !(p1_7@430@01 || p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1456 | p1_7@430@01 || p2_7@431@01]
(assert (or p1_7@430@01 p2_7@431@01))
; [exec]
; var tmp1_39: Ref
(declare-const tmp1_39@526@01 $Ref)
; [exec]
; var tmp2_39: Ref
(declare-const tmp2_39@527@01 $Ref)
; [exec]
; var tmp1_40: Seq[Measure$]
(declare-const tmp1_40@528@01 Seq<Measure$>)
; [exec]
; var tmp2_40: Seq[Measure$]
(declare-const tmp2_40@529@01 Seq<Measure$>)
; [exec]
; var tmp1_41: Perm
(declare-const tmp1_41@530@01 $Perm)
; [exec]
; var tmp2_41: Perm
(declare-const tmp2_41@531@01 $Perm)
; [exec]
; var tmp1_42: Ref
(declare-const tmp1_42@532@01 $Ref)
; [exec]
; var tmp2_42: Ref
(declare-const tmp2_42@533@01 $Ref)
; [exec]
; var tmp1_43: Perm
(declare-const tmp1_43@534@01 $Perm)
; [exec]
; var tmp2_43: Perm
(declare-const tmp2_43@535@01 $Perm)
; [eval] p1_7 && !ret1_3
(push) ; 10
; [then-branch: 1457 | !(p1_7@430@01) | live]
; [else-branch: 1457 | p1_7@430@01 | live]
(push) ; 11
; [then-branch: 1457 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 11
(push) ; 11
; [else-branch: 1457 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1458 | p1_7@430@01 | live]
; [else-branch: 1458 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1458 | p1_7@430@01]
; [exec]
; tmp1_39 := _cthread_162
; [exec]
; tmp1_40 := _method_measures_162
; [exec]
; tmp1_41 := _residue_162
; [exec]
; tmp1_42 := Example_res_7
; [eval] p2_7 && !ret2_3
(push) ; 11
; [then-branch: 1459 | !(p2_7@431@01) | live]
; [else-branch: 1459 | p2_7@431@01 | live]
(push) ; 12
; [then-branch: 1459 | !(p2_7@431@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 1459 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 1460 | p2_7@431@01 | dead]
; [else-branch: 1460 | !(p2_7@431@01) | live]
(push) ; 11
; [else-branch: 1460 | !(p2_7@431@01)]
(pop) ; 11
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 11
; [then-branch: 1461 | !(p2_7@431@01) | live]
; [else-branch: 1461 | p2_7@431@01 | live]
(push) ; 12
; [then-branch: 1461 | !(p2_7@431@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 1461 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1462 | !(p2_7@431@01) | live]
; [else-branch: 1462 | p2_7@431@01 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1462 | !(p2_7@431@01)]
; [exec]
; tmp1_43, tmp2_43 := Example___init__(p1_7 && !ret1_3, p2_7 && !ret2_3, tmp1_39,
;   tmp2_39, tmp1_40, tmp2_40, tmp1_41, tmp2_41, tmp1_42, tmp2_42)
; [eval] p1_7 && !ret1_3
(push) ; 12
; [then-branch: 1463 | !(p1_7@430@01) | live]
; [else-branch: 1463 | p1_7@430@01 | live]
(push) ; 13
; [then-branch: 1463 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 13
(push) ; 13
; [else-branch: 1463 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [eval] p2_7 && !ret2_3
(push) ; 12
; [then-branch: 1464 | !(p2_7@431@01) | live]
; [else-branch: 1464 | p2_7@431@01 | live]
(push) ; 13
; [then-branch: 1464 | !(p2_7@431@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 1464 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [eval] p1_23 ==> _cthread_156 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1465 | p1_7@430@01 | live]
; [else-branch: 1465 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1465 | p1_7@430@01]
; [eval] _cthread_156 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p2_23 ==> _cthread_156_0 != null
(push) ; 12
; [then-branch: 1466 | p2_7@431@01 | dead]
; [else-branch: 1466 | !(p2_7@431@01) | live]
(push) ; 13
; [else-branch: 1466 | !(p2_7@431@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1_23 ==> issubtype(typeof(_cthread_156), Thread_0())
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1467 | p1_7@430@01 | live]
; [else-branch: 1467 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1467 | p1_7@430@01]
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p2_23 ==> issubtype(typeof(_cthread_156_0), Thread_0())
(push) ; 12
; [then-branch: 1468 | p2_7@431@01 | dead]
; [else-branch: 1468 | !(p2_7@431@01) | live]
(push) ; 13
; [else-branch: 1468 | !(p2_7@431@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1_23 ==> self != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1469 | p1_7@430@01 | live]
; [else-branch: 1469 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1469 | p1_7@430@01]
; [eval] self != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=> p1_7@430@01 (not (= tmp_7@522@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=> p1_7@430@01 (not (= tmp_7@522@01 $Ref.null))))
; [eval] p2_23 ==> self_3 != null
(push) ; 12
; [then-branch: 1470 | p2_7@431@01 | dead]
; [else-branch: 1470 | !(p2_7@431@01) | live]
(push) ; 13
; [else-branch: 1470 | !(p2_7@431@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1471 | p1_7@430@01 | live]
; [else-branch: 1471 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 1471 | p1_7@430@01]
; [then-branch: 1472 | p2_7@431@01 | dead]
; [else-branch: 1472 | !(p2_7@431@01) | live]
(push) ; 13
; [else-branch: 1472 | !(p2_7@431@01)]
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1473 | p1_7@430@01 | live]
; [else-branch: 1473 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1473 | p1_7@430@01]
; [then-branch: 1474 | p2_7@431@01 | dead]
; [else-branch: 1474 | !(p2_7@431@01) | live]
(push) ; 15
; [else-branch: 1474 | !(p2_7@431@01)]
; [eval] p1_23 ==> issubtype(typeof(self), Example())
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1475 | p1_7@430@01 | live]
; [else-branch: 1475 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1475 | p1_7@430@01]
; [eval] issubtype(typeof(self), Example())
; [eval] typeof(self)
; [eval] Example()
(pop) ; 17
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> tmp_7@522@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> tmp_7@522@01) (as Example<PyType>  PyType))))
; [eval] p2_23 ==> issubtype(typeof(self_3), Example())
(push) ; 16
; [then-branch: 1476 | p2_7@431@01 | dead]
; [else-branch: 1476 | !(p2_7@431@01) | live]
(push) ; 17
; [else-branch: 1476 | !(p2_7@431@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p1_23 ==> self != null
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1477 | p1_7@430@01 | live]
; [else-branch: 1477 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1477 | p1_7@430@01]
; [eval] self != null
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p2_23 ==> self_3 != null
(push) ; 16
; [then-branch: 1478 | p2_7@431@01 | dead]
; [else-branch: 1478 | !(p2_7@431@01) | live]
(push) ; 17
; [else-branch: 1478 | !(p2_7@431@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p1_23 ==> perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1479 | p1_7@430@01 | live]
; [else-branch: 1479 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1479 | p1_7@430@01]
; [eval] perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(push) ; 18
; [then-branch: 1480 | False | live]
; [else-branch: 1480 | True | live]
(push) ; 19
; [then-branch: 1480 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 1480 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false)
(push) ; 20
; [then-branch: 1481 | False | live]
; [else-branch: 1481 | True | live]
(push) ; 21
; [then-branch: 1481 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 1481 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false)
(push) ; 22
; [then-branch: 1482 | False | live]
; [else-branch: 1482 | True | live]
(push) ; 23
; [then-branch: 1482 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1482 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false)
(push) ; 24
; [then-branch: 1483 | False | live]
; [else-branch: 1483 | True | live]
(push) ; 25
; [then-branch: 1483 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 1483 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p2_23 ==> perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
(push) ; 16
; [then-branch: 1484 | p2_7@431@01 | dead]
; [else-branch: 1484 | !(p2_7@431@01) | live]
(push) ; 17
; [else-branch: 1484 | !(p2_7@431@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(declare-const _current_wait_level_156@536@01 $Perm)
(declare-const _current_wait_level_156_0@537@01 $Perm)
(declare-const $t@538@01 $Snap)
(assert (= $t@538@01 ($Snap.combine ($Snap.first $t@538@01) ($Snap.second $t@538@01))))
(assert (= ($Snap.first $t@538@01) $Snap.unit))
; [eval] p1_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1485 | p1_7@430@01 | live]
; [else-branch: 1485 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1485 | p1_7@430@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 18
; [then-branch: 1486 | False | live]
; [else-branch: 1486 | True | live]
(push) ; 19
; [then-branch: 1486 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 1486 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 20
; [then-branch: 1487 | False | live]
; [else-branch: 1487 | True | live]
(push) ; 21
; [then-branch: 1487 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 1487 | True]
; [eval] _residue_156 <= _current_wait_level_156
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=> p1_7@430@01 (<= _residue_162@436@01 _current_wait_level_156@536@01)))
(assert (=
  ($Snap.second $t@538@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@538@01))
    ($Snap.second ($Snap.second $t@538@01)))))
(assert (= ($Snap.first ($Snap.second $t@538@01)) $Snap.unit))
; [eval] p2_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
(push) ; 16
; [then-branch: 1488 | p2_7@431@01 | dead]
; [else-branch: 1488 | !(p2_7@431@01) | live]
(push) ; 17
; [else-branch: 1488 | !(p2_7@431@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@538@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@538@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1489 | p1_7@430@01 | live]
; [else-branch: 1489 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 1489 | p1_7@430@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@538@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@538@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))
; [then-branch: 1490 | p2_7@431@01 | dead]
; [else-branch: 1490 | !(p2_7@431@01) | live]
(push) ; 17
; [else-branch: 1490 | !(p2_7@431@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@538@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_f), int())
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1491 | p1_7@430@01 | live]
; [else-branch: 1491 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 1491 | p1_7@430@01]
; [eval] issubtype(typeof(self.Example_f), int())
; [eval] typeof(self.Example_f)
; [eval] int()
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@538@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_fp), int())
(push) ; 18
; [then-branch: 1492 | p2_7@431@01 | dead]
; [else-branch: 1492 | !(p2_7@431@01) | live]
(push) ; 19
; [else-branch: 1492 | !(p2_7@431@01)]
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1493 | p1_7@430@01 | live]
; [else-branch: 1493 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 1493 | p1_7@430@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))))))
; [then-branch: 1494 | p2_7@431@01 | dead]
; [else-branch: 1494 | !(p2_7@431@01) | live]
(push) ; 19
; [else-branch: 1494 | !(p2_7@431@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_g), int())
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1495 | p1_7@430@01 | live]
; [else-branch: 1495 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1495 | p1_7@430@01]
; [eval] issubtype(typeof(self.Example_g), int())
; [eval] typeof(self.Example_g)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_gp), int())
(push) ; 20
; [then-branch: 1496 | p2_7@431@01 | dead]
; [else-branch: 1496 | !(p2_7@431@01) | live]
(push) ; 21
; [else-branch: 1496 | !(p2_7@431@01)]
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_f, __prim__int___box__(0))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1497 | p1_7@430@01 | live]
; [else-branch: 1497 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1497 | p1_7@430@01]
; [eval] int___eq__(self.Example_f, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@538@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@538@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@538@01)))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@538@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@538@01)))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p1_7@430@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@538@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@538@01)))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p1_7@430@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@538@01)))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_fp, __prim__int___box__(0))
(push) ; 20
; [then-branch: 1498 | p2_7@431@01 | dead]
; [else-branch: 1498 | !(p2_7@431@01) | live]
(push) ; 21
; [else-branch: 1498 | !(p2_7@431@01)]
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_g, __prim__int___box__(1))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1499 | p1_7@430@01 | live]
; [else-branch: 1499 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1499 | p1_7@430@01]
; [eval] int___eq__(self.Example_g, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 22
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  p1_7@430@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p1_7@430@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_gp, __prim__int___box__(1))
(push) ; 20
; [then-branch: 1500 | p2_7@431@01 | dead]
; [else-branch: 1500 | !(p2_7@431@01) | live]
(push) ; 21
; [else-branch: 1500 | !(p2_7@431@01)]
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> true
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1501 | p1_7@430@01 | live]
; [else-branch: 1501 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1501 | p1_7@430@01]
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> true
(push) ; 20
; [then-branch: 1502 | p2_7@431@01 | dead]
; [else-branch: 1502 | !(p2_7@431@01) | live]
(push) ; 21
; [else-branch: 1502 | !(p2_7@431@01)]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] p1_7 && !ret1_3
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1503 | !(p1_7@430@01) | live]
; [else-branch: 1503 | p1_7@430@01 | live]
(push) ; 21
; [then-branch: 1503 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1503 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1504 | p1_7@430@01 | live]
; [else-branch: 1504 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1504 | p1_7@430@01]
; [exec]
; _cwl_162 := tmp1_43
; [eval] p2_7 && !ret2_3
(push) ; 21
; [then-branch: 1505 | !(p2_7@431@01) | live]
; [else-branch: 1505 | p2_7@431@01 | live]
(push) ; 22
; [then-branch: 1505 | !(p2_7@431@01)]
(pop) ; 22
(push) ; 22
; [else-branch: 1505 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 1506 | p2_7@431@01 | dead]
; [else-branch: 1506 | !(p2_7@431@01) | live]
(push) ; 21
; [else-branch: 1506 | !(p2_7@431@01)]
(pop) ; 21
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 21
; [then-branch: 1507 | !(p2_7@431@01) | live]
; [else-branch: 1507 | p2_7@431@01 | live]
(push) ; 22
; [then-branch: 1507 | !(p2_7@431@01)]
(pop) ; 22
(push) ; 22
; [else-branch: 1507 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1508 | !(p2_7@431@01) | live]
; [else-branch: 1508 | p2_7@431@01 | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1508 | !(p2_7@431@01)]
; [eval] p1_7 && !ret1_3
(push) ; 22
; [then-branch: 1509 | !(p1_7@430@01) | live]
; [else-branch: 1509 | p1_7@430@01 | live]
(push) ; 23
; [then-branch: 1509 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 23
(push) ; 23
; [else-branch: 1509 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1510 | p1_7@430@01 | live]
; [else-branch: 1510 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 1510 | p1_7@430@01]
; [exec]
; a_3 := Example_res_7
; [exec]
; inhale _isDefined(3366753)
(declare-const $t@539@01 $Snap)
(assert (= $t@539@01 $Snap.unit))
; [eval] _isDefined(3366753)
(push) ; 23
(assert (_isDefined%precondition $Snap.unit 3366753))
(pop) ; 23
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3366753))
(assert (_isDefined $Snap.unit 3366753))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_7 && !ret2_3
(set-option :timeout 0)
(push) ; 23
; [then-branch: 1511 | !(p2_7@431@01) | live]
; [else-branch: 1511 | p2_7@431@01 | live]
(push) ; 24
; [then-branch: 1511 | !(p2_7@431@01)]
(pop) ; 24
(push) ; 24
; [else-branch: 1511 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 1512 | p2_7@431@01 | dead]
; [else-branch: 1512 | !(p2_7@431@01) | live]
(push) ; 23
; [else-branch: 1512 | !(p2_7@431@01)]
(pop) ; 23
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 23
; [then-branch: 1513 | !(p2_7@431@01) | live]
; [else-branch: 1513 | p2_7@431@01 | live]
(push) ; 24
; [then-branch: 1513 | !(p2_7@431@01)]
(pop) ; 24
(push) ; 24
; [else-branch: 1513 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1514 | !(p2_7@431@01) | live]
; [else-branch: 1514 | p2_7@431@01 | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 1514 | !(p2_7@431@01)]
; [exec]
; tmp_8 := new()
(declare-const tmp_8@540@01 $Ref)
(assert (not (= tmp_8@540@01 $Ref.null)))
(assert (not (= tmp_8@540@01 Example_res_8_0@459@01)))
(assert (not (= tmp_8@540@01 _cthread_162@432@01)))
(assert (not (= tmp_8@540@01 tmp_8@465@01)))
(assert (not (= tmp_8@540@01 a_3_0@451@01)))
(assert (not (= tmp_8@540@01 _err_4@449@01)))
(assert (not (= tmp_8@540@01 _res_4@443@01)))
(assert (not (= tmp_8@540@01 b_3_0@453@01)))
(assert (not (= tmp_8@540@01 tmp2_39@527@01)))
(assert (not (= tmp_8@540@01 tmp_7@522@01)))
(assert (not (= tmp_8@540@01 secret_3_0@439@01)))
(assert (not (= tmp_8@540@01 Example_res_7_0@457@01)))
(assert (not (= tmp_8@540@01 secret_3@438@01)))
(assert (not (= tmp_8@540@01 _cthread_162_0@433@01)))
(assert (not (= tmp_8@540@01 Example_res_8@458@01)))
(assert (not
  (=
    tmp_8@540@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@538@01)))))))))))
(assert (not
  (=
    tmp_8@540@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@538@01)))))))
(assert (not (= tmp_8@540@01 tmp2_42@533@01)))
(assert (not (= tmp_8@540@01 b_3@452@01)))
(assert (not (= tmp_8@540@01 secret_15_0@455@01)))
; [eval] p1_7 && !ret1_3
(push) ; 24
; [then-branch: 1515 | !(p1_7@430@01) | live]
; [else-branch: 1515 | p1_7@430@01 | live]
(push) ; 25
; [then-branch: 1515 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1515 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1516 | p1_7@430@01 | live]
; [else-branch: 1516 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1516 | p1_7@430@01]
; [exec]
; Example_res_8 := tmp_8
; [eval] p2_7 && !ret2_3
(push) ; 25
; [then-branch: 1517 | !(p2_7@431@01) | live]
; [else-branch: 1517 | p2_7@431@01 | live]
(push) ; 26
; [then-branch: 1517 | !(p2_7@431@01)]
(pop) ; 26
(push) ; 26
; [else-branch: 1517 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 1518 | p2_7@431@01 | dead]
; [else-branch: 1518 | !(p2_7@431@01) | live]
(push) ; 25
; [else-branch: 1518 | !(p2_7@431@01)]
(pop) ; 25
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 25
; [then-branch: 1519 | !(p2_7@431@01) | live]
; [else-branch: 1519 | p2_7@431@01 | live]
(push) ; 26
; [then-branch: 1519 | !(p2_7@431@01)]
(pop) ; 26
(push) ; 26
; [else-branch: 1519 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1520 | !(p2_7@431@01) | live]
; [else-branch: 1520 | p2_7@431@01 | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1520 | !(p2_7@431@01)]
; [eval] p1_7 && !ret1_3
(push) ; 26
; [then-branch: 1521 | !(p1_7@430@01) | live]
; [else-branch: 1521 | p1_7@430@01 | live]
(push) ; 27
; [then-branch: 1521 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 27
(push) ; 27
; [else-branch: 1521 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1522 | p1_7@430@01 | live]
; [else-branch: 1522 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 1522 | p1_7@430@01]
; [exec]
; inhale typeof(Example_res_8) == Example()
(declare-const $t@541@01 $Snap)
(assert (= $t@541@01 $Snap.unit))
; [eval] typeof(Example_res_8) == Example()
; [eval] typeof(Example_res_8)
; [eval] Example()
(assert (= (typeof<PyType> tmp_8@540@01) (as Example<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_8, 1888441915154752436293), write)
(declare-const $t@542@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Example_res_8, 1906888659228461987909), write)
(declare-const $t@543@01 $Snap)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_7 && !ret2_3
(set-option :timeout 0)
(push) ; 27
; [then-branch: 1523 | !(p2_7@431@01) | live]
; [else-branch: 1523 | p2_7@431@01 | live]
(push) ; 28
; [then-branch: 1523 | !(p2_7@431@01)]
(pop) ; 28
(push) ; 28
; [else-branch: 1523 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [then-branch: 1524 | p2_7@431@01 | dead]
; [else-branch: 1524 | !(p2_7@431@01) | live]
(push) ; 27
; [else-branch: 1524 | !(p2_7@431@01)]
(pop) ; 27
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 27
; [then-branch: 1525 | !(p2_7@431@01) | live]
; [else-branch: 1525 | p2_7@431@01 | live]
(push) ; 28
; [then-branch: 1525 | !(p2_7@431@01)]
(pop) ; 28
(push) ; 28
; [else-branch: 1525 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(push) ; 27
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1526 | !(p2_7@431@01) | live]
; [else-branch: 1526 | p2_7@431@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 1526 | !(p2_7@431@01)]
; [eval] p1_7 && !ret1_3 || p2_7 && !ret2_3
; [eval] p1_7 && !ret1_3
(push) ; 28
; [then-branch: 1527 | !(p1_7@430@01) | live]
; [else-branch: 1527 | p1_7@430@01 | live]
(push) ; 29
; [then-branch: 1527 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 29
(push) ; 29
; [else-branch: 1527 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
; [then-branch: 1528 | p1_7@430@01 | live]
; [else-branch: 1528 | !(p1_7@430@01) | live]
(push) ; 29
; [then-branch: 1528 | p1_7@430@01]
(pop) ; 29
(push) ; 29
; [else-branch: 1528 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
; [eval] p2_7 && !ret2_3
(push) ; 30
; [then-branch: 1529 | !(p2_7@431@01) | live]
; [else-branch: 1529 | p2_7@431@01 | live]
(push) ; 31
; [then-branch: 1529 | !(p2_7@431@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 1529 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (not (or p1_7@430@01 p2_7@431@01))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1530 | p1_7@430@01 || p2_7@431@01 | live]
; [else-branch: 1530 | !(p1_7@430@01 || p2_7@431@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 1530 | p1_7@430@01 || p2_7@431@01]
; [exec]
; var tmp1_44: Ref
(declare-const tmp1_44@544@01 $Ref)
; [exec]
; var tmp2_44: Ref
(declare-const tmp2_44@545@01 $Ref)
; [exec]
; var tmp1_45: Seq[Measure$]
(declare-const tmp1_45@546@01 Seq<Measure$>)
; [exec]
; var tmp2_45: Seq[Measure$]
(declare-const tmp2_45@547@01 Seq<Measure$>)
; [exec]
; var tmp1_46: Perm
(declare-const tmp1_46@548@01 $Perm)
; [exec]
; var tmp2_46: Perm
(declare-const tmp2_46@549@01 $Perm)
; [exec]
; var tmp1_47: Ref
(declare-const tmp1_47@550@01 $Ref)
; [exec]
; var tmp2_47: Ref
(declare-const tmp2_47@551@01 $Ref)
; [exec]
; var tmp1_48: Perm
(declare-const tmp1_48@552@01 $Perm)
; [exec]
; var tmp2_48: Perm
(declare-const tmp2_48@553@01 $Perm)
; [eval] p1_7 && !ret1_3
(push) ; 29
; [then-branch: 1531 | !(p1_7@430@01) | live]
; [else-branch: 1531 | p1_7@430@01 | live]
(push) ; 30
; [then-branch: 1531 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 30
(push) ; 30
; [else-branch: 1531 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1532 | p1_7@430@01 | live]
; [else-branch: 1532 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 1532 | p1_7@430@01]
; [exec]
; tmp1_44 := _cthread_162
; [exec]
; tmp1_45 := _method_measures_162
; [exec]
; tmp1_46 := _residue_162
; [exec]
; tmp1_47 := Example_res_8
; [eval] p2_7 && !ret2_3
(push) ; 30
; [then-branch: 1533 | !(p2_7@431@01) | live]
; [else-branch: 1533 | p2_7@431@01 | live]
(push) ; 31
; [then-branch: 1533 | !(p2_7@431@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 1533 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 1534 | p2_7@431@01 | dead]
; [else-branch: 1534 | !(p2_7@431@01) | live]
(push) ; 30
; [else-branch: 1534 | !(p2_7@431@01)]
(pop) ; 30
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 30
; [then-branch: 1535 | !(p2_7@431@01) | live]
; [else-branch: 1535 | p2_7@431@01 | live]
(push) ; 31
; [then-branch: 1535 | !(p2_7@431@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 1535 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1536 | !(p2_7@431@01) | live]
; [else-branch: 1536 | p2_7@431@01 | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 1536 | !(p2_7@431@01)]
; [exec]
; tmp1_48, tmp2_48 := Example___init__(p1_7 && !ret1_3, p2_7 && !ret2_3, tmp1_44,
;   tmp2_44, tmp1_45, tmp2_45, tmp1_46, tmp2_46, tmp1_47, tmp2_47)
; [eval] p1_7 && !ret1_3
(push) ; 31
; [then-branch: 1537 | !(p1_7@430@01) | live]
; [else-branch: 1537 | p1_7@430@01 | live]
(push) ; 32
; [then-branch: 1537 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 32
(push) ; 32
; [else-branch: 1537 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [eval] p2_7 && !ret2_3
(push) ; 31
; [then-branch: 1538 | !(p2_7@431@01) | live]
; [else-branch: 1538 | p2_7@431@01 | live]
(push) ; 32
; [then-branch: 1538 | !(p2_7@431@01)]
(pop) ; 32
(push) ; 32
; [else-branch: 1538 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [eval] p1_23 ==> _cthread_156 != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1539 | p1_7@430@01 | live]
; [else-branch: 1539 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 1539 | p1_7@430@01]
; [eval] _cthread_156 != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_23 ==> _cthread_156_0 != null
(push) ; 31
; [then-branch: 1540 | p2_7@431@01 | dead]
; [else-branch: 1540 | !(p2_7@431@01) | live]
(push) ; 32
; [else-branch: 1540 | !(p2_7@431@01)]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p1_23 ==> issubtype(typeof(_cthread_156), Thread_0())
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1541 | p1_7@430@01 | live]
; [else-branch: 1541 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 1541 | p1_7@430@01]
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p2_23 ==> issubtype(typeof(_cthread_156_0), Thread_0())
(push) ; 31
; [then-branch: 1542 | p2_7@431@01 | dead]
; [else-branch: 1542 | !(p2_7@431@01) | live]
(push) ; 32
; [else-branch: 1542 | !(p2_7@431@01)]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; [eval] p1_23 ==> self != null
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1543 | p1_7@430@01 | live]
; [else-branch: 1543 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 1543 | p1_7@430@01]
; [eval] self != null
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(assert (not (=> p1_7@430@01 (not (= tmp_8@540@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(assert (=> p1_7@430@01 (not (= tmp_8@540@01 $Ref.null))))
; [eval] p2_23 ==> self_3 != null
(push) ; 31
; [then-branch: 1544 | p2_7@431@01 | dead]
; [else-branch: 1544 | !(p2_7@431@01) | live]
(push) ; 32
; [else-branch: 1544 | !(p2_7@431@01)]
(pop) ; 32
(pop) ; 31
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1545 | p1_7@430@01 | live]
; [else-branch: 1545 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 1545 | p1_7@430@01]
; [then-branch: 1546 | p2_7@431@01 | dead]
; [else-branch: 1546 | !(p2_7@431@01) | live]
(push) ; 32
; [else-branch: 1546 | !(p2_7@431@01)]
(push) ; 33
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1547 | p1_7@430@01 | live]
; [else-branch: 1547 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 1547 | p1_7@430@01]
; [then-branch: 1548 | p2_7@431@01 | dead]
; [else-branch: 1548 | !(p2_7@431@01) | live]
(push) ; 34
; [else-branch: 1548 | !(p2_7@431@01)]
; [eval] p1_23 ==> issubtype(typeof(self), Example())
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1549 | p1_7@430@01 | live]
; [else-branch: 1549 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 1549 | p1_7@430@01]
; [eval] issubtype(typeof(self), Example())
; [eval] typeof(self)
; [eval] Example()
(pop) ; 36
(pop) ; 35
; Joined path conditions
(push) ; 35
(assert (not (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> tmp_8@540@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> tmp_8@540@01) (as Example<PyType>  PyType))))
; [eval] p2_23 ==> issubtype(typeof(self_3), Example())
(push) ; 35
; [then-branch: 1550 | p2_7@431@01 | dead]
; [else-branch: 1550 | !(p2_7@431@01) | live]
(push) ; 36
; [else-branch: 1550 | !(p2_7@431@01)]
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p1_23 ==> self != null
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1551 | p1_7@430@01 | live]
; [else-branch: 1551 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 1551 | p1_7@430@01]
; [eval] self != null
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p2_23 ==> self_3 != null
(push) ; 35
; [then-branch: 1552 | p2_7@431@01 | dead]
; [else-branch: 1552 | !(p2_7@431@01) | live]
(push) ; 36
; [else-branch: 1552 | !(p2_7@431@01)]
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p1_23 ==> perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1553 | p1_7@430@01 | live]
; [else-branch: 1553 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 1553 | p1_7@430@01]
; [eval] perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(push) ; 37
; [then-branch: 1554 | False | live]
; [else-branch: 1554 | True | live]
(push) ; 38
; [then-branch: 1554 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 1554 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false)
(push) ; 39
; [then-branch: 1555 | False | live]
; [else-branch: 1555 | True | live]
(push) ; 40
; [then-branch: 1555 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 1555 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false)
(push) ; 41
; [then-branch: 1556 | False | live]
; [else-branch: 1556 | True | live]
(push) ; 42
; [then-branch: 1556 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 1556 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false)
(push) ; 43
; [then-branch: 1557 | False | live]
; [else-branch: 1557 | True | live]
(push) ; 44
; [then-branch: 1557 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 1557 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; [eval] p2_23 ==> perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))
(push) ; 35
; [then-branch: 1558 | p2_7@431@01 | dead]
; [else-branch: 1558 | !(p2_7@431@01) | live]
(push) ; 36
; [else-branch: 1558 | !(p2_7@431@01)]
(pop) ; 36
(pop) ; 35
; Joined path conditions
(declare-const _current_wait_level_156@554@01 $Perm)
(declare-const _current_wait_level_156_0@555@01 $Perm)
(declare-const $t@556@01 $Snap)
(assert (= $t@556@01 ($Snap.combine ($Snap.first $t@556@01) ($Snap.second $t@556@01))))
(assert (= ($Snap.first $t@556@01) $Snap.unit))
; [eval] p1_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
(push) ; 35
(push) ; 36
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1559 | p1_7@430@01 | live]
; [else-branch: 1559 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 1559 | p1_7@430@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 37
; [then-branch: 1560 | False | live]
; [else-branch: 1560 | True | live]
(push) ; 38
; [then-branch: 1560 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 1560 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 39
; [then-branch: 1561 | False | live]
; [else-branch: 1561 | True | live]
(push) ; 40
; [then-branch: 1561 | False]
(assert false)
(pop) ; 40
(push) ; 40
; [else-branch: 1561 | True]
; [eval] _residue_156 <= _current_wait_level_156
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
(assert (=> p1_7@430@01 (<= _residue_162@436@01 _current_wait_level_156@554@01)))
(assert (=
  ($Snap.second $t@556@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@556@01))
    ($Snap.second ($Snap.second $t@556@01)))))
(assert (= ($Snap.first ($Snap.second $t@556@01)) $Snap.unit))
; [eval] p2_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
(push) ; 35
; [then-branch: 1562 | p2_7@431@01 | dead]
; [else-branch: 1562 | !(p2_7@431@01) | live]
(push) ; 36
; [else-branch: 1562 | !(p2_7@431@01)]
(pop) ; 36
(pop) ; 35
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@556@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@556@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1563 | p1_7@430@01 | live]
; [else-branch: 1563 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 1563 | p1_7@430@01]
(push) ; 36
(set-option :timeout 10)
(assert (not (= tmp_7@522@01 tmp_8@540@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@556@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@556@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))
; [then-branch: 1564 | p2_7@431@01 | dead]
; [else-branch: 1564 | !(p2_7@431@01) | live]
(set-option :timeout 0)
(push) ; 36
; [else-branch: 1564 | !(p2_7@431@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@556@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_f), int())
(push) ; 37
(push) ; 38
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1565 | p1_7@430@01 | live]
; [else-branch: 1565 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 1565 | p1_7@430@01]
; [eval] issubtype(typeof(self.Example_f), int())
; [eval] typeof(self.Example_f)
; [eval] int()
(pop) ; 38
(pop) ; 37
; Joined path conditions
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@556@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_fp), int())
(push) ; 37
; [then-branch: 1566 | p2_7@431@01 | dead]
; [else-branch: 1566 | !(p2_7@431@01) | live]
(push) ; 38
; [else-branch: 1566 | !(p2_7@431@01)]
(pop) ; 38
(pop) ; 37
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))))
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1567 | p1_7@430@01 | live]
; [else-branch: 1567 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 1567 | p1_7@430@01]
(push) ; 38
(set-option :timeout 10)
(assert (not (= tmp_7@522@01 tmp_8@540@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))))))
; [then-branch: 1568 | p2_7@431@01 | dead]
; [else-branch: 1568 | !(p2_7@431@01) | live]
(set-option :timeout 0)
(push) ; 38
; [else-branch: 1568 | !(p2_7@431@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_g), int())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1569 | p1_7@430@01 | live]
; [else-branch: 1569 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 1569 | p1_7@430@01]
; [eval] issubtype(typeof(self.Example_g), int())
; [eval] typeof(self.Example_g)
; [eval] int()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_gp), int())
(push) ; 39
; [then-branch: 1570 | p2_7@431@01 | dead]
; [else-branch: 1570 | !(p2_7@431@01) | live]
(push) ; 40
; [else-branch: 1570 | !(p2_7@431@01)]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_f, __prim__int___box__(0))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1571 | p1_7@430@01 | live]
; [else-branch: 1571 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 1571 | p1_7@430@01]
; [eval] int___eq__(self.Example_f, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@556@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@556@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@556@01)))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@556@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@556@01)))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p1_7@430@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@556@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@556@01)))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p1_7@430@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@556@01)))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_fp, __prim__int___box__(0))
(push) ; 39
; [then-branch: 1572 | p2_7@431@01 | dead]
; [else-branch: 1572 | !(p2_7@431@01) | live]
(push) ; 40
; [else-branch: 1572 | !(p2_7@431@01)]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_g, __prim__int___box__(1))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1573 | p1_7@430@01 | live]
; [else-branch: 1573 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 1573 | p1_7@430@01]
; [eval] int___eq__(self.Example_g, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 41
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 41
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 41
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 42
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 41
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  p1_7@430@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p1_7@430@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_gp, __prim__int___box__(1))
(push) ; 39
; [then-branch: 1574 | p2_7@431@01 | dead]
; [else-branch: 1574 | !(p2_7@431@01) | live]
(push) ; 40
; [else-branch: 1574 | !(p2_7@431@01)]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1575 | p1_7@430@01 | live]
; [else-branch: 1575 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 1575 | p1_7@430@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@556@01)))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> true
(push) ; 39
; [then-branch: 1576 | p2_7@431@01 | dead]
; [else-branch: 1576 | !(p2_7@431@01) | live]
(push) ; 40
; [else-branch: 1576 | !(p2_7@431@01)]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] p1_7 && !ret1_3
(set-option :timeout 0)
(push) ; 39
; [then-branch: 1577 | !(p1_7@430@01) | live]
; [else-branch: 1577 | p1_7@430@01 | live]
(push) ; 40
; [then-branch: 1577 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 40
(push) ; 40
; [else-branch: 1577 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(push) ; 39
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1578 | p1_7@430@01 | live]
; [else-branch: 1578 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 1578 | p1_7@430@01]
; [exec]
; _cwl_162 := tmp1_48
; [eval] p2_7 && !ret2_3
(push) ; 40
; [then-branch: 1579 | !(p2_7@431@01) | live]
; [else-branch: 1579 | p2_7@431@01 | live]
(push) ; 41
; [then-branch: 1579 | !(p2_7@431@01)]
(pop) ; 41
(push) ; 41
; [else-branch: 1579 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
; [then-branch: 1580 | p2_7@431@01 | dead]
; [else-branch: 1580 | !(p2_7@431@01) | live]
(push) ; 40
; [else-branch: 1580 | !(p2_7@431@01)]
(pop) ; 40
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 40
; [then-branch: 1581 | !(p2_7@431@01) | live]
; [else-branch: 1581 | p2_7@431@01 | live]
(push) ; 41
; [then-branch: 1581 | !(p2_7@431@01)]
(pop) ; 41
(push) ; 41
; [else-branch: 1581 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(push) ; 40
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1582 | !(p2_7@431@01) | live]
; [else-branch: 1582 | p2_7@431@01 | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 1582 | !(p2_7@431@01)]
; [eval] p1_7 && !ret1_3
(push) ; 41
; [then-branch: 1583 | !(p1_7@430@01) | live]
; [else-branch: 1583 | p1_7@430@01 | live]
(push) ; 42
; [then-branch: 1583 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 42
(push) ; 42
; [else-branch: 1583 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1584 | p1_7@430@01 | live]
; [else-branch: 1584 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 1584 | p1_7@430@01]
; [exec]
; b_3 := Example_res_8
; [exec]
; inhale _isDefined(3366754)
(declare-const $t@557@01 $Snap)
(assert (= $t@557@01 $Snap.unit))
; [eval] _isDefined(3366754)
(push) ; 42
(assert (_isDefined%precondition $Snap.unit 3366754))
(pop) ; 42
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3366754))
(assert (_isDefined $Snap.unit 3366754))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_7 && !ret2_3
(set-option :timeout 0)
(push) ; 42
; [then-branch: 1585 | !(p2_7@431@01) | live]
; [else-branch: 1585 | p2_7@431@01 | live]
(push) ; 43
; [then-branch: 1585 | !(p2_7@431@01)]
(pop) ; 43
(push) ; 43
; [else-branch: 1585 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
; [then-branch: 1586 | p2_7@431@01 | dead]
; [else-branch: 1586 | !(p2_7@431@01) | live]
(push) ; 42
; [else-branch: 1586 | !(p2_7@431@01)]
(pop) ; 42
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 42
; [then-branch: 1587 | !(p2_7@431@01) | live]
; [else-branch: 1587 | p2_7@431@01 | live]
(push) ; 43
; [then-branch: 1587 | !(p2_7@431@01)]
(pop) ; 43
(push) ; 43
; [else-branch: 1587 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(push) ; 42
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1588 | !(p2_7@431@01) | live]
; [else-branch: 1588 | p2_7@431@01 | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 1588 | !(p2_7@431@01)]
; [exec]
; p1_8 := p1_7 && (!ret1_3 && bool___unbox__(secret_15))
; [eval] p1_7 && (!ret1_3 && bool___unbox__(secret_15))
(push) ; 43
; [then-branch: 1589 | !(p1_7@430@01) | live]
; [else-branch: 1589 | p1_7@430@01 | live]
(push) ; 44
; [then-branch: 1589 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 44
(push) ; 44
; [else-branch: 1589 | p1_7@430@01]
; [eval] !ret1_3
(push) ; 45
; [then-branch: 1590 | False | live]
; [else-branch: 1590 | True | live]
(push) ; 46
; [then-branch: 1590 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 1590 | True]
; [eval] bool___unbox__(secret_15)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_3@438@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_3@438@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_3@438@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_3@438@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_3@438@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_3@438@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_3@438@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_7@430@01
  (and
    (issubtype<Bool> (typeof<PyType> secret_3@438@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_3@438@01))))
(declare-const p1_8@558@01 Bool)
(assert (= p1_8@558@01 (and p1_7@430@01 (bool___unbox__ $Snap.unit secret_3@438@01))))
; [exec]
; p2_8 := p2_7 && (!ret2_3 && bool___unbox__(secret_15_0))
; [eval] p2_7 && (!ret2_3 && bool___unbox__(secret_15_0))
(push) ; 43
; [then-branch: 1591 | !(p2_7@431@01) | live]
; [else-branch: 1591 | p2_7@431@01 | live]
(push) ; 44
; [then-branch: 1591 | !(p2_7@431@01)]
(pop) ; 44
(push) ; 44
; [else-branch: 1591 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(push) ; 45
; [then-branch: 1592 | False | live]
; [else-branch: 1592 | True | live]
(push) ; 46
; [then-branch: 1592 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 1592 | True]
; [eval] bool___unbox__(secret_15_0)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_15_0@455@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_15_0@455@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_15_0@455@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_15_0@455@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_15_0@455@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_15_0@455@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_15_0@455@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_7@431@01
  (and
    p2_7@431@01
    (issubtype<Bool> (typeof<PyType> secret_15_0@455@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_15_0@455@01))))
(declare-const p2_8@559@01 Bool)
(assert (= p2_8@559@01 (and p2_7@431@01 (bool___unbox__ $Snap.unit secret_15_0@455@01))))
; [exec]
; p3_3 := p1_7 && (!ret1_3 && !bool___unbox__(secret_15))
; [eval] p1_7 && (!ret1_3 && !bool___unbox__(secret_15))
(push) ; 43
; [then-branch: 1593 | !(p1_7@430@01) | live]
; [else-branch: 1593 | p1_7@430@01 | live]
(push) ; 44
; [then-branch: 1593 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 44
(push) ; 44
; [else-branch: 1593 | p1_7@430@01]
; [eval] !ret1_3
(push) ; 45
; [then-branch: 1594 | False | live]
; [else-branch: 1594 | True | live]
(push) ; 46
; [then-branch: 1594 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 1594 | True]
; [eval] !bool___unbox__(secret_15)
; [eval] bool___unbox__(secret_15)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_3@438@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_3@438@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_3@438@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_3@438@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_3@438@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_3@438@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_3@438@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(declare-const p3_3@560@01 Bool)
(assert (=
  p3_3@560@01
  (and p1_7@430@01 (not (bool___unbox__ $Snap.unit secret_3@438@01)))))
; [exec]
; p4_3 := p2_7 && (!ret2_3 && !bool___unbox__(secret_15_0))
; [eval] p2_7 && (!ret2_3 && !bool___unbox__(secret_15_0))
(push) ; 43
; [then-branch: 1595 | !(p2_7@431@01) | live]
; [else-branch: 1595 | p2_7@431@01 | live]
(push) ; 44
; [then-branch: 1595 | !(p2_7@431@01)]
(pop) ; 44
(push) ; 44
; [else-branch: 1595 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(push) ; 45
; [then-branch: 1596 | False | live]
; [else-branch: 1596 | True | live]
(push) ; 46
; [then-branch: 1596 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 1596 | True]
; [eval] !bool___unbox__(secret_15_0)
; [eval] bool___unbox__(secret_15_0)
(push) ; 47
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 48
(assert (not (issubtype<Bool> (typeof<PyType> secret_15_0@455@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_15_0@455@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_15_0@455@01))
(pop) ; 47
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_15_0@455@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_15_0@455@01)))
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_15_0@455@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_15_0@455@01)))
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(declare-const p4_3@561@01 Bool)
(assert (=
  p4_3@561@01
  (and p2_7@431@01 (not (bool___unbox__ $Snap.unit secret_15_0@455@01)))))
; [eval] p1_8 && !ret1_3
(push) ; 43
; [then-branch: 1597 | !(p1_8@558@01) | live]
; [else-branch: 1597 | p1_8@558@01 | live]
(push) ; 44
; [then-branch: 1597 | !(p1_8@558@01)]
(assert (not p1_8@558@01))
(pop) ; 44
(push) ; 44
; [else-branch: 1597 | p1_8@558@01]
(assert p1_8@558@01)
; [eval] !ret1_3
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(assert (or p1_8@558@01 (not p1_8@558@01)))
(push) ; 43
(set-option :timeout 10)
(assert (not (not p1_8@558@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not p1_8@558@01))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1598 | p1_8@558@01 | live]
; [else-branch: 1598 | !(p1_8@558@01) | live]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 1598 | p1_8@558@01]
(assert p1_8@558@01)
; [exec]
; _res := _checkDefined(a_3, 3366753)
; [eval] _checkDefined(a_3, 3366753)
(push) ; 44
; [eval] _isDefined(id)
(push) ; 45
(pop) ; 45
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_7@522@01 3366753))
(pop) ; 44
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_7@522@01 3366753))
(declare-const _res@562@01 $Ref)
(assert (= _res@562@01 (_checkDefined $Snap.unit tmp_7@522@01 3366753)))
; [exec]
; ret1_3 := true
; [eval] p2_8 && !ret2_3
(push) ; 44
; [then-branch: 1599 | !(p2_8@559@01) | live]
; [else-branch: 1599 | p2_8@559@01 | live]
(push) ; 45
; [then-branch: 1599 | !(p2_8@559@01)]
(assert (not p2_8@559@01))
(pop) ; 45
(push) ; 45
; [else-branch: 1599 | p2_8@559@01]
(assert p2_8@559@01)
; [eval] !ret2_3
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(assert (or p2_8@559@01 (not p2_8@559@01)))
(push) ; 44
(set-option :timeout 10)
(assert (not (not p2_8@559@01)))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1600 | p2_8@559@01 | dead]
; [else-branch: 1600 | !(p2_8@559@01) | live]
(set-option :timeout 0)
(push) ; 44
; [else-branch: 1600 | !(p2_8@559@01)]
(assert (not p2_8@559@01))
(pop) ; 44
; [eval] !(p2_8 && !ret2_3)
; [eval] p2_8 && !ret2_3
(push) ; 44
; [then-branch: 1601 | !(p2_8@559@01) | live]
; [else-branch: 1601 | p2_8@559@01 | live]
(push) ; 45
; [then-branch: 1601 | !(p2_8@559@01)]
(assert (not p2_8@559@01))
(pop) ; 45
(push) ; 45
; [else-branch: 1601 | p2_8@559@01]
(assert p2_8@559@01)
; [eval] !ret2_3
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(push) ; 44
(set-option :timeout 10)
(assert (not p2_8@559@01))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (not p2_8@559@01)))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1602 | !(p2_8@559@01) | live]
; [else-branch: 1602 | p2_8@559@01 | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 1602 | !(p2_8@559@01)]
(assert (not p2_8@559@01))
; [eval] p1_7 && !ret1_3
(push) ; 45
; [then-branch: 1603 | !(p1_7@430@01) | live]
; [else-branch: 1603 | p1_7@430@01 | live]
(push) ; 46
; [then-branch: 1603 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 46
(push) ; 46
; [else-branch: 1603 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
; [then-branch: 1604 | False | dead]
; [else-branch: 1604 | True | live]
(push) ; 45
; [else-branch: 1604 | True]
(pop) ; 45
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 45
; [then-branch: 1605 | !(p1_7@430@01) | live]
; [else-branch: 1605 | p1_7@430@01 | live]
(push) ; 46
; [then-branch: 1605 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 46
(push) ; 46
; [else-branch: 1605 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(push) ; 45
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1606 | True | live]
; [else-branch: 1606 | False | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 1606 | True]
; [eval] p2_7 && !ret2_3
(push) ; 46
; [then-branch: 1607 | !(p2_7@431@01) | live]
; [else-branch: 1607 | p2_7@431@01 | live]
(push) ; 47
; [then-branch: 1607 | !(p2_7@431@01)]
(pop) ; 47
(push) ; 47
; [else-branch: 1607 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
; [then-branch: 1608 | p2_7@431@01 | dead]
; [else-branch: 1608 | !(p2_7@431@01) | live]
(push) ; 46
; [else-branch: 1608 | !(p2_7@431@01)]
(pop) ; 46
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 46
; [then-branch: 1609 | !(p2_7@431@01) | live]
; [else-branch: 1609 | p2_7@431@01 | live]
(push) ; 47
; [then-branch: 1609 | !(p2_7@431@01)]
(pop) ; 47
(push) ; 47
; [else-branch: 1609 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(push) ; 46
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1610 | !(p2_7@431@01) | live]
; [else-branch: 1610 | p2_7@431@01 | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 1610 | !(p2_7@431@01)]
; [exec]
; assert true
; [eval] p1_7 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1611 | p1_7@430@01 | live]
; [else-branch: 1611 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1611 | p1_7@430@01]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p2_7 ==> true
(push) ; 47
; [then-branch: 1612 | p2_7@431@01 | dead]
; [else-branch: 1612 | !(p2_7@431@01) | live]
(push) ; 48
; [else-branch: 1612 | !(p2_7@431@01)]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p1_7 ==> issubtype(typeof(_res), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1613 | p1_7@430@01 | live]
; [else-branch: 1613 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1613 | p1_7@430@01]
; [eval] issubtype(typeof(_res), Example())
; [eval] typeof(_res)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> _res@562@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> _res@562@01) (as Example<PyType>  PyType))))
; [eval] p2_7 ==> issubtype(typeof(_res_4), Example())
(push) ; 47
; [then-branch: 1614 | p2_7@431@01 | dead]
; [else-branch: 1614 | !(p2_7@431@01) | live]
(push) ; 48
; [else-branch: 1614 | !(p2_7@431@01)]
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1615 | p1_7@430@01 | live]
; [else-branch: 1615 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 47
; [then-branch: 1615 | p1_7@430@01]
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp_8@540@01 _res@562@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp_7@522@01 _res@562@01)))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1616 | p2_7@431@01 | dead]
; [else-branch: 1616 | !(p2_7@431@01) | live]
(set-option :timeout 0)
(push) ; 48
; [else-branch: 1616 | !(p2_7@431@01)]
; [eval] p1_7 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1617 | p1_7@430@01 | live]
; [else-branch: 1617 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 1617 | p1_7@430@01]
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_8@540@01 _res@562@01)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_7@522@01 _res@562@01)))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
; [eval] p2_7 ==> issubtype(typeof(_res_4.Example_fp), int())
(set-option :timeout 0)
(push) ; 49
; [then-branch: 1618 | p2_7@431@01 | dead]
; [else-branch: 1618 | !(p2_7@431@01) | live]
(push) ; 50
; [else-branch: 1618 | !(p2_7@431@01)]
(pop) ; 50
(pop) ; 49
; Joined path conditions
(push) ; 49
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1619 | p1_7@430@01 | live]
; [else-branch: 1619 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 1619 | p1_7@430@01]
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp_8@540@01 _res@562@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp_7@522@01 _res@562@01)))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1620 | p2_7@431@01 | dead]
; [else-branch: 1620 | !(p2_7@431@01) | live]
(set-option :timeout 0)
(push) ; 50
; [else-branch: 1620 | !(p2_7@431@01)]
; [eval] p1_7 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1621 | p1_7@430@01 | live]
; [else-branch: 1621 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1621 | p1_7@430@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_8@540@01 _res@562@01)))
(check-sat)
; unknown
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_7@522@01 _res@562@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p2_7 ==> issubtype(typeof(_res_4.Example_gp), int())
(set-option :timeout 0)
(push) ; 51
; [then-branch: 1622 | p2_7@431@01 | dead]
; [else-branch: 1622 | !(p2_7@431@01) | live]
(push) ; 52
; [else-branch: 1622 | !(p2_7@431@01)]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p1_7 && p2_7 ==> int___eq__(_res.Example_f, _res_4.Example_fp)
; [eval] p1_7 && p2_7
(push) ; 51
; [then-branch: 1623 | !(p1_7@430@01) | live]
; [else-branch: 1623 | p1_7@430@01 | live]
(push) ; 52
; [then-branch: 1623 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 52
(push) ; 52
; [else-branch: 1623 | p1_7@430@01]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_7@430@01 p2_7@431@01))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1624 | p1_7@430@01 && p2_7@431@01 | dead]
; [else-branch: 1624 | !(p1_7@430@01 && p2_7@431@01) | live]
(set-option :timeout 0)
(push) ; 52
; [else-branch: 1624 | !(p1_7@430@01 && p2_7@431@01)]
(assert (not (and p1_7@430@01 p2_7@431@01)))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (not (and p1_7@430@01 p2_7@431@01)))
; [eval] p1_7 && p2_7 ==> int___eq__(_res.Example_g, _res_4.Example_gp)
; [eval] p1_7 && p2_7
(push) ; 51
; [then-branch: 1625 | !(p1_7@430@01) | live]
; [else-branch: 1625 | p1_7@430@01 | live]
(push) ; 52
; [then-branch: 1625 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 52
(push) ; 52
; [else-branch: 1625 | p1_7@430@01]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(push) ; 51
; [then-branch: 1626 | p1_7@430@01 && p2_7@431@01 | dead]
; [else-branch: 1626 | !(p1_7@430@01 && p2_7@431@01) | live]
(push) ; 52
; [else-branch: 1626 | !(p1_7@430@01 && p2_7@431@01)]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p1_7 ==> (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1627 | p1_7@430@01 | live]
; [else-branch: 1627 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1627 | p1_7@430@01]
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
(push) ; 53
; [then-branch: 1628 | False | live]
; [else-branch: 1628 | True | live]
(push) ; 54
; [then-branch: 1628 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 1628 | True]
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
(push) ; 55
; [then-branch: 1629 | False | live]
; [else-branch: 1629 | True | live]
(push) ; 56
; [then-branch: 1629 | False]
(assert false)
(pop) ; 56
(push) ; 56
; [else-branch: 1629 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
(push) ; 57
; [then-branch: 1630 | False | live]
; [else-branch: 1630 | True | live]
(push) ; 58
; [then-branch: 1630 | False]
(assert false)
(pop) ; 58
(push) ; 58
; [else-branch: 1630 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 58
(pop) ; 57
; Joined path conditions
; Joined path conditions
(pop) ; 56
(pop) ; 55
; Joined path conditions
; Joined path conditions
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p2_7 ==> (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))
(push) ; 51
; [then-branch: 1631 | p2_7@431@01 | dead]
; [else-branch: 1631 | !(p2_7@431@01) | live]
(push) ; 52
; [else-branch: 1631 | !(p2_7@431@01)]
(pop) ; 52
(pop) ; 51
; Joined path conditions
(pop) ; 50
(pop) ; 49
(pop) ; 48
(pop) ; 47
(pop) ; 46
(pop) ; 45
(pop) ; 44
(pop) ; 43
(push) ; 43
; [else-branch: 1598 | !(p1_8@558@01)]
(assert (not p1_8@558@01))
(pop) ; 43
; [eval] !(p1_8 && !ret1_3)
; [eval] p1_8 && !ret1_3
(push) ; 43
; [then-branch: 1632 | !(p1_8@558@01) | live]
; [else-branch: 1632 | p1_8@558@01 | live]
(push) ; 44
; [then-branch: 1632 | !(p1_8@558@01)]
(assert (not p1_8@558@01))
(pop) ; 44
(push) ; 44
; [else-branch: 1632 | p1_8@558@01]
(assert p1_8@558@01)
; [eval] !ret1_3
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(push) ; 43
(set-option :timeout 10)
(assert (not p1_8@558@01))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not p1_8@558@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1633 | !(p1_8@558@01) | live]
; [else-branch: 1633 | p1_8@558@01 | live]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 1633 | !(p1_8@558@01)]
(assert (not p1_8@558@01))
; [eval] p2_8 && !ret2_3
(push) ; 44
; [then-branch: 1634 | !(p2_8@559@01) | live]
; [else-branch: 1634 | p2_8@559@01 | live]
(push) ; 45
; [then-branch: 1634 | !(p2_8@559@01)]
(assert (not p2_8@559@01))
(pop) ; 45
(push) ; 45
; [else-branch: 1634 | p2_8@559@01]
(assert p2_8@559@01)
; [eval] !ret2_3
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(assert (or p2_8@559@01 (not p2_8@559@01)))
(push) ; 44
(set-option :timeout 10)
(assert (not (not p2_8@559@01)))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1635 | p2_8@559@01 | dead]
; [else-branch: 1635 | !(p2_8@559@01) | live]
(set-option :timeout 0)
(push) ; 44
; [else-branch: 1635 | !(p2_8@559@01)]
(assert (not p2_8@559@01))
(pop) ; 44
; [eval] !(p2_8 && !ret2_3)
; [eval] p2_8 && !ret2_3
(push) ; 44
; [then-branch: 1636 | !(p2_8@559@01) | live]
; [else-branch: 1636 | p2_8@559@01 | live]
(push) ; 45
; [then-branch: 1636 | !(p2_8@559@01)]
(assert (not p2_8@559@01))
(pop) ; 45
(push) ; 45
; [else-branch: 1636 | p2_8@559@01]
(assert p2_8@559@01)
; [eval] !ret2_3
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(push) ; 44
(set-option :timeout 10)
(assert (not p2_8@559@01))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (not p2_8@559@01)))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1637 | !(p2_8@559@01) | live]
; [else-branch: 1637 | p2_8@559@01 | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 1637 | !(p2_8@559@01)]
(assert (not p2_8@559@01))
; [eval] p1_7 && !ret1_3
(push) ; 45
; [then-branch: 1638 | !(p1_7@430@01) | live]
; [else-branch: 1638 | p1_7@430@01 | live]
(push) ; 46
; [then-branch: 1638 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 46
(push) ; 46
; [else-branch: 1638 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(push) ; 45
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1639 | p1_7@430@01 | live]
; [else-branch: 1639 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 1639 | p1_7@430@01]
; [exec]
; _res := _checkDefined(b_3, 3366754)
; [eval] _checkDefined(b_3, 3366754)
(push) ; 46
; [eval] _isDefined(id)
(push) ; 47
(pop) ; 47
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_8@540@01 3366754))
(pop) ; 46
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_8@540@01 3366754))
(declare-const _res@563@01 $Ref)
(assert (= _res@563@01 (_checkDefined $Snap.unit tmp_8@540@01 3366754)))
; [exec]
; ret1_3 := true
; [eval] p2_7 && !ret2_3
(push) ; 46
; [then-branch: 1640 | !(p2_7@431@01) | live]
; [else-branch: 1640 | p2_7@431@01 | live]
(push) ; 47
; [then-branch: 1640 | !(p2_7@431@01)]
(pop) ; 47
(push) ; 47
; [else-branch: 1640 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
; [then-branch: 1641 | p2_7@431@01 | dead]
; [else-branch: 1641 | !(p2_7@431@01) | live]
(push) ; 46
; [else-branch: 1641 | !(p2_7@431@01)]
(pop) ; 46
; [eval] !(p2_7 && !ret2_3)
; [eval] p2_7 && !ret2_3
(push) ; 46
; [then-branch: 1642 | !(p2_7@431@01) | live]
; [else-branch: 1642 | p2_7@431@01 | live]
(push) ; 47
; [then-branch: 1642 | !(p2_7@431@01)]
(pop) ; 47
(push) ; 47
; [else-branch: 1642 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 47
(pop) ; 46
; Joined path conditions
; Joined path conditions
(push) ; 46
(set-option :timeout 10)
(assert (not p2_7@431@01))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1643 | !(p2_7@431@01) | live]
; [else-branch: 1643 | p2_7@431@01 | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 1643 | !(p2_7@431@01)]
; [exec]
; assert true
; [eval] p1_7 ==> true
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1644 | p1_7@430@01 | live]
; [else-branch: 1644 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1644 | p1_7@430@01]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p2_7 ==> true
(push) ; 47
; [then-branch: 1645 | p2_7@431@01 | dead]
; [else-branch: 1645 | !(p2_7@431@01) | live]
(push) ; 48
; [else-branch: 1645 | !(p2_7@431@01)]
(pop) ; 48
(pop) ; 47
; Joined path conditions
; [eval] p1_7 ==> issubtype(typeof(_res), Example())
(push) ; 47
(push) ; 48
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1646 | p1_7@430@01 | live]
; [else-branch: 1646 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 1646 | p1_7@430@01]
; [eval] issubtype(typeof(_res), Example())
; [eval] typeof(_res)
; [eval] Example()
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(assert (not (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> _res@563@01) (as Example<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_7@430@01
  (issubtype<Bool> (typeof<PyType> _res@563@01) (as Example<PyType>  PyType))))
; [eval] p2_7 ==> issubtype(typeof(_res_4), Example())
(push) ; 47
; [then-branch: 1647 | p2_7@431@01 | dead]
; [else-branch: 1647 | !(p2_7@431@01) | live]
(push) ; 48
; [else-branch: 1647 | !(p2_7@431@01)]
(pop) ; 48
(pop) ; 47
; Joined path conditions
(push) ; 47
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1648 | p1_7@430@01 | live]
; [else-branch: 1648 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 47
; [then-branch: 1648 | p1_7@430@01]
(push) ; 48
(set-option :timeout 10)
(assert (not (= tmp_8@540@01 _res@563@01)))
(check-sat)
; unsat
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1649 | p2_7@431@01 | dead]
; [else-branch: 1649 | !(p2_7@431@01) | live]
(set-option :timeout 0)
(push) ; 48
; [else-branch: 1649 | !(p2_7@431@01)]
; [eval] p1_7 ==> issubtype(typeof(_res.Example_f), int())
(push) ; 49
(push) ; 50
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1650 | p1_7@430@01 | live]
; [else-branch: 1650 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 1650 | p1_7@430@01]
; [eval] issubtype(typeof(_res.Example_f), int())
; [eval] typeof(_res.Example_f)
(push) ; 51
(set-option :timeout 10)
(assert (not (= tmp_8@540@01 _res@563@01)))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 50
(pop) ; 49
; Joined path conditions
; [eval] p2_7 ==> issubtype(typeof(_res_4.Example_fp), int())
(set-option :timeout 0)
(push) ; 49
; [then-branch: 1651 | p2_7@431@01 | dead]
; [else-branch: 1651 | !(p2_7@431@01) | live]
(push) ; 50
; [else-branch: 1651 | !(p2_7@431@01)]
(pop) ; 50
(pop) ; 49
; Joined path conditions
(push) ; 49
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1652 | p1_7@430@01 | live]
; [else-branch: 1652 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 1652 | p1_7@430@01]
(push) ; 50
(set-option :timeout 10)
(assert (not (= tmp_8@540@01 _res@563@01)))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1653 | p2_7@431@01 | dead]
; [else-branch: 1653 | !(p2_7@431@01) | live]
(set-option :timeout 0)
(push) ; 50
; [else-branch: 1653 | !(p2_7@431@01)]
; [eval] p1_7 ==> issubtype(typeof(_res.Example_g), int())
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1654 | p1_7@430@01 | live]
; [else-branch: 1654 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1654 | p1_7@430@01]
; [eval] issubtype(typeof(_res.Example_g), int())
; [eval] typeof(_res.Example_g)
(push) ; 53
(set-option :timeout 10)
(assert (not (= tmp_8@540@01 _res@563@01)))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p2_7 ==> issubtype(typeof(_res_4.Example_gp), int())
(set-option :timeout 0)
(push) ; 51
; [then-branch: 1655 | p2_7@431@01 | dead]
; [else-branch: 1655 | !(p2_7@431@01) | live]
(push) ; 52
; [else-branch: 1655 | !(p2_7@431@01)]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p1_7 && p2_7 ==> int___eq__(_res.Example_f, _res_4.Example_fp)
; [eval] p1_7 && p2_7
(push) ; 51
; [then-branch: 1656 | !(p1_7@430@01) | live]
; [else-branch: 1656 | p1_7@430@01 | live]
(push) ; 52
; [then-branch: 1656 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 52
(push) ; 52
; [else-branch: 1656 | p1_7@430@01]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not (and p1_7@430@01 p2_7@431@01))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1657 | p1_7@430@01 && p2_7@431@01 | dead]
; [else-branch: 1657 | !(p1_7@430@01 && p2_7@431@01) | live]
(set-option :timeout 0)
(push) ; 52
; [else-branch: 1657 | !(p1_7@430@01 && p2_7@431@01)]
(assert (not (and p1_7@430@01 p2_7@431@01)))
(pop) ; 52
(pop) ; 51
; Joined path conditions
(assert (not (and p1_7@430@01 p2_7@431@01)))
; [eval] p1_7 && p2_7 ==> int___eq__(_res.Example_g, _res_4.Example_gp)
; [eval] p1_7 && p2_7
(push) ; 51
; [then-branch: 1658 | !(p1_7@430@01) | live]
; [else-branch: 1658 | p1_7@430@01 | live]
(push) ; 52
; [then-branch: 1658 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 52
(push) ; 52
; [else-branch: 1658 | p1_7@430@01]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; Joined path conditions
(push) ; 51
; [then-branch: 1659 | p1_7@430@01 && p2_7@431@01 | dead]
; [else-branch: 1659 | !(p1_7@430@01 && p2_7@431@01) | live]
(push) ; 52
; [else-branch: 1659 | !(p1_7@430@01 && p2_7@431@01)]
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p1_7 ==> (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
(push) ; 51
(push) ; 52
(set-option :timeout 10)
(assert (not (not p1_7@430@01)))
(check-sat)
; unknown
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1660 | p1_7@430@01 | live]
; [else-branch: 1660 | !(p1_7@430@01) | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 1660 | p1_7@430@01]
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
(push) ; 53
; [then-branch: 1661 | False | live]
; [else-branch: 1661 | True | live]
(push) ; 54
; [then-branch: 1661 | False]
(assert false)
(pop) ; 54
(push) ; 54
; [else-branch: 1661 | True]
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
(push) ; 55
; [then-branch: 1662 | False | live]
; [else-branch: 1662 | True | live]
(push) ; 56
; [then-branch: 1662 | False]
(assert false)
(pop) ; 56
(push) ; 56
; [else-branch: 1662 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
(push) ; 57
; [then-branch: 1663 | False | live]
; [else-branch: 1663 | True | live]
(push) ; 58
; [then-branch: 1663 | False]
(assert false)
(pop) ; 58
(push) ; 58
; [else-branch: 1663 | True]
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 58
(pop) ; 57
; Joined path conditions
; Joined path conditions
(pop) ; 56
(pop) ; 55
; Joined path conditions
; Joined path conditions
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(pop) ; 52
(pop) ; 51
; Joined path conditions
; [eval] p2_7 ==> (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))
(push) ; 51
; [then-branch: 1664 | p2_7@431@01 | dead]
; [else-branch: 1664 | !(p2_7@431@01) | live]
(push) ; 52
; [else-branch: 1664 | !(p2_7@431@01)]
(pop) ; 52
(pop) ; 51
; Joined path conditions
(pop) ; 50
(pop) ; 49
(pop) ; 48
(pop) ; 47
(pop) ; 46
(pop) ; 45
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 45
; [then-branch: 1665 | !(p1_7@430@01) | live]
; [else-branch: 1665 | p1_7@430@01 | live]
(push) ; 46
; [then-branch: 1665 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 46
(push) ; 46
; [else-branch: 1665 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
; [then-branch: 1666 | !(p1_7@430@01) | dead]
; [else-branch: 1666 | p1_7@430@01 | live]
(push) ; 45
; [else-branch: 1666 | p1_7@430@01]
(pop) ; 45
(pop) ; 44
(pop) ; 43
(push) ; 43
; [else-branch: 1633 | p1_8@558@01]
(assert p1_8@558@01)
(pop) ; 43
(pop) ; 42
(pop) ; 41
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 41
; [then-branch: 1667 | !(p1_7@430@01) | live]
; [else-branch: 1667 | p1_7@430@01 | live]
(push) ; 42
; [then-branch: 1667 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 42
(push) ; 42
; [else-branch: 1667 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
; [then-branch: 1668 | !(p1_7@430@01) | dead]
; [else-branch: 1668 | p1_7@430@01 | live]
(push) ; 41
; [else-branch: 1668 | p1_7@430@01]
(pop) ; 41
(pop) ; 40
(pop) ; 39
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 39
; [then-branch: 1669 | !(p1_7@430@01) | live]
; [else-branch: 1669 | p1_7@430@01 | live]
(push) ; 40
; [then-branch: 1669 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 40
(push) ; 40
; [else-branch: 1669 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
; [then-branch: 1670 | !(p1_7@430@01) | dead]
; [else-branch: 1670 | p1_7@430@01 | live]
(push) ; 39
; [else-branch: 1670 | p1_7@430@01]
(pop) ; 39
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 29
; [then-branch: 1671 | !(p1_7@430@01) | live]
; [else-branch: 1671 | p1_7@430@01 | live]
(push) ; 30
; [then-branch: 1671 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 30
(push) ; 30
; [else-branch: 1671 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
; [then-branch: 1672 | !(p1_7@430@01) | dead]
; [else-branch: 1672 | p1_7@430@01 | live]
(push) ; 29
; [else-branch: 1672 | p1_7@430@01]
(pop) ; 29
(pop) ; 28
; [eval] !(p1_7 && !ret1_3 || p2_7 && !ret2_3)
; [eval] p1_7 && !ret1_3 || p2_7 && !ret2_3
; [eval] p1_7 && !ret1_3
(push) ; 28
; [then-branch: 1673 | !(p1_7@430@01) | live]
; [else-branch: 1673 | p1_7@430@01 | live]
(push) ; 29
; [then-branch: 1673 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 29
(push) ; 29
; [else-branch: 1673 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
; [then-branch: 1674 | p1_7@430@01 | live]
; [else-branch: 1674 | !(p1_7@430@01) | live]
(push) ; 29
; [then-branch: 1674 | p1_7@430@01]
(pop) ; 29
(push) ; 29
; [else-branch: 1674 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
; [eval] p2_7 && !ret2_3
(push) ; 30
; [then-branch: 1675 | !(p2_7@431@01) | live]
; [else-branch: 1675 | p2_7@431@01 | live]
(push) ; 31
; [then-branch: 1675 | !(p2_7@431@01)]
(pop) ; 31
(push) ; 31
; [else-branch: 1675 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
; [then-branch: 1676 | !(p1_7@430@01 || p2_7@431@01) | dead]
; [else-branch: 1676 | p1_7@430@01 || p2_7@431@01 | live]
(push) ; 28
; [else-branch: 1676 | p1_7@430@01 || p2_7@431@01]
(pop) ; 28
(pop) ; 27
(pop) ; 26
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 26
; [then-branch: 1677 | !(p1_7@430@01) | live]
; [else-branch: 1677 | p1_7@430@01 | live]
(push) ; 27
; [then-branch: 1677 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 27
(push) ; 27
; [else-branch: 1677 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 1678 | !(p1_7@430@01) | dead]
; [else-branch: 1678 | p1_7@430@01 | live]
(push) ; 26
; [else-branch: 1678 | p1_7@430@01]
(pop) ; 26
(pop) ; 25
(pop) ; 24
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 24
; [then-branch: 1679 | !(p1_7@430@01) | live]
; [else-branch: 1679 | p1_7@430@01 | live]
(push) ; 25
; [then-branch: 1679 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1679 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 1680 | !(p1_7@430@01) | dead]
; [else-branch: 1680 | p1_7@430@01 | live]
(push) ; 24
; [else-branch: 1680 | p1_7@430@01]
(pop) ; 24
(pop) ; 23
(pop) ; 22
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 22
; [then-branch: 1681 | !(p1_7@430@01) | live]
; [else-branch: 1681 | p1_7@430@01 | live]
(push) ; 23
; [then-branch: 1681 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 23
(push) ; 23
; [else-branch: 1681 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 1682 | !(p1_7@430@01) | dead]
; [else-branch: 1682 | p1_7@430@01 | live]
(push) ; 22
; [else-branch: 1682 | p1_7@430@01]
(pop) ; 22
(pop) ; 21
(pop) ; 20
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 20
; [then-branch: 1683 | !(p1_7@430@01) | live]
; [else-branch: 1683 | p1_7@430@01 | live]
(push) ; 21
; [then-branch: 1683 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1683 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 1684 | !(p1_7@430@01) | dead]
; [else-branch: 1684 | p1_7@430@01 | live]
(push) ; 20
; [else-branch: 1684 | p1_7@430@01]
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 10
; [then-branch: 1685 | !(p1_7@430@01) | live]
; [else-branch: 1685 | p1_7@430@01 | live]
(push) ; 11
; [then-branch: 1685 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 11
(push) ; 11
; [else-branch: 1685 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 1686 | !(p1_7@430@01) | dead]
; [else-branch: 1686 | p1_7@430@01 | live]
(push) ; 10
; [else-branch: 1686 | p1_7@430@01]
(pop) ; 10
(pop) ; 9
; [eval] !(p1_7 && !ret1_3 || p2_7 && !ret2_3)
; [eval] p1_7 && !ret1_3 || p2_7 && !ret2_3
; [eval] p1_7 && !ret1_3
(push) ; 9
; [then-branch: 1687 | !(p1_7@430@01) | live]
; [else-branch: 1687 | p1_7@430@01 | live]
(push) ; 10
; [then-branch: 1687 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1687 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 1688 | p1_7@430@01 | live]
; [else-branch: 1688 | !(p1_7@430@01) | live]
(push) ; 10
; [then-branch: 1688 | p1_7@430@01]
(pop) ; 10
(push) ; 10
; [else-branch: 1688 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
; [eval] p2_7 && !ret2_3
(push) ; 11
; [then-branch: 1689 | !(p2_7@431@01) | live]
; [else-branch: 1689 | p2_7@431@01 | live]
(push) ; 12
; [then-branch: 1689 | !(p2_7@431@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 1689 | p2_7@431@01]
(assert p2_7@431@01)
; [eval] !ret2_3
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (or p1_7@430@01 p2_7@431@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1690 | !(p1_7@430@01 || p2_7@431@01) | dead]
; [else-branch: 1690 | p1_7@430@01 || p2_7@431@01 | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 1690 | p1_7@430@01 || p2_7@431@01]
(assert (or p1_7@430@01 p2_7@431@01))
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 7
; [then-branch: 1691 | !(p1_7@430@01) | live]
; [else-branch: 1691 | p1_7@430@01 | live]
(push) ; 8
; [then-branch: 1691 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1691 | p1_7@430@01]
; [eval] !ret1_3
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 1692 | !(p1_7@430@01) | dead]
; [else-branch: 1692 | p1_7@430@01 | live]
(push) ; 7
; [else-branch: 1692 | p1_7@430@01]
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 5
; [then-branch: 1693 | !(p1_7@430@01) | live]
; [else-branch: 1693 | p1_7@430@01 | live]
(push) ; 6
; [then-branch: 1693 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1693 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] !ret1_3
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1694 | !(p1_7@430@01) | dead]
; [else-branch: 1694 | p1_7@430@01 | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 1694 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 1440 | p2_7@431@01]
(assert p2_7@431@01)
(pop) ; 4
(pop) ; 3
; [eval] !(p1_7 && !ret1_3)
; [eval] p1_7 && !ret1_3
(push) ; 3
; [then-branch: 1695 | !(p1_7@430@01) | live]
; [else-branch: 1695 | p1_7@430@01 | live]
(push) ; 4
; [then-branch: 1695 | !(p1_7@430@01)]
(assert (not p1_7@430@01))
(pop) ; 4
(push) ; 4
; [else-branch: 1695 | p1_7@430@01]
(assert p1_7@430@01)
; [eval] !ret1_3
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not p1_7@430@01))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1696 | !(p1_7@430@01) | dead]
; [else-branch: 1696 | p1_7@430@01 | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 1696 | p1_7@430@01]
(assert p1_7@430@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- int_constant ----------
(declare-const p1_9@564@01 Bool)
(declare-const p2_9@565@01 Bool)
(declare-const _cthread_163@566@01 $Ref)
(declare-const _cthread_163_0@567@01 $Ref)
(declare-const _caller_measures_163@568@01 Seq<Measure$>)
(declare-const _caller_measures_163_0@569@01 Seq<Measure$>)
(declare-const _residue_163@570@01 $Perm)
(declare-const _residue_163_0@571@01 $Perm)
(declare-const secret_4@572@01 $Ref)
(declare-const secret_4_0@573@01 $Ref)
(declare-const _current_wait_level_163@574@01 $Perm)
(declare-const _current_wait_level_163_0@575@01 $Perm)
(declare-const _res@576@01 $Ref)
(declare-const _res_5@577@01 $Ref)
(declare-const p1_9@578@01 Bool)
(declare-const p2_9@579@01 Bool)
(declare-const _cthread_163@580@01 $Ref)
(declare-const _cthread_163_0@581@01 $Ref)
(declare-const _caller_measures_163@582@01 Seq<Measure$>)
(declare-const _caller_measures_163_0@583@01 Seq<Measure$>)
(declare-const _residue_163@584@01 $Perm)
(declare-const _residue_163_0@585@01 $Perm)
(declare-const secret_4@586@01 $Ref)
(declare-const secret_4_0@587@01 $Ref)
(declare-const _current_wait_level_163@588@01 $Perm)
(declare-const _current_wait_level_163_0@589@01 $Perm)
(declare-const _res@590@01 $Ref)
(declare-const _res_5@591@01 $Ref)
(push) ; 1
(declare-const $t@592@01 $Snap)
(assert (= $t@592@01 ($Snap.combine ($Snap.first $t@592@01) ($Snap.second $t@592@01))))
(assert (= ($Snap.first $t@592@01) $Snap.unit))
; [eval] p1_9 ==> _cthread_163 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_9@578@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1697 | p1_9@578@01 | live]
; [else-branch: 1697 | !(p1_9@578@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1697 | p1_9@578@01]
(assert p1_9@578@01)
; [eval] _cthread_163 != null
(pop) ; 3
(push) ; 3
; [else-branch: 1697 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_9@578@01) p1_9@578@01))
(assert (=> p1_9@578@01 (not (= _cthread_163@580@01 $Ref.null))))
(assert (=
  ($Snap.second $t@592@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@592@01))
    ($Snap.second ($Snap.second $t@592@01)))))
(assert (= ($Snap.first ($Snap.second $t@592@01)) $Snap.unit))
; [eval] p2_9 ==> _cthread_163_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_9@579@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1698 | p2_9@579@01 | live]
; [else-branch: 1698 | !(p2_9@579@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1698 | p2_9@579@01]
(assert p2_9@579@01)
; [eval] _cthread_163_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 1698 | !(p2_9@579@01)]
(assert (not p2_9@579@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_9@579@01) p2_9@579@01))
(assert (=> p2_9@579@01 (not (= _cthread_163_0@581@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@592@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@592@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@592@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@592@01))) $Snap.unit))
; [eval] p1_9 ==> issubtype(typeof(_cthread_163), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_9@578@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1699 | p1_9@578@01 | live]
; [else-branch: 1699 | !(p1_9@578@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1699 | p1_9@578@01]
(assert p1_9@578@01)
; [eval] issubtype(typeof(_cthread_163), Thread_0())
; [eval] typeof(_cthread_163)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 1699 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_9@578@01
  (issubtype<Bool> (typeof<PyType> _cthread_163@580@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@592@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@592@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@592@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@592@01))))
  $Snap.unit))
; [eval] p2_9 ==> issubtype(typeof(_cthread_163_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_9@579@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1700 | p2_9@579@01 | live]
; [else-branch: 1700 | !(p2_9@579@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1700 | p2_9@579@01]
(assert p2_9@579@01)
; [eval] issubtype(typeof(_cthread_163_0), Thread_0())
; [eval] typeof(_cthread_163_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 1700 | !(p2_9@579@01)]
(assert (not p2_9@579@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_9@579@01
  (issubtype<Bool> (typeof<PyType> _cthread_163_0@581@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@592@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@592@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@592@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@592@01)))))
  $Snap.unit))
; [eval] p1_9 ==> issubtype(typeof(secret_4), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_9@578@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1701 | p1_9@578@01 | live]
; [else-branch: 1701 | !(p1_9@578@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1701 | p1_9@578@01]
(assert p1_9@578@01)
; [eval] issubtype(typeof(secret_4), bool())
; [eval] typeof(secret_4)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 1701 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_9@578@01
  (issubtype<Bool> (typeof<PyType> secret_4@586@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@592@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@592@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@592@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@592@01))))))
  $Snap.unit))
; [eval] p2_9 ==> issubtype(typeof(secret_4_0), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_9@579@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1702 | p2_9@579@01 | live]
; [else-branch: 1702 | !(p2_9@579@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1702 | p2_9@579@01]
(assert p2_9@579@01)
; [eval] issubtype(typeof(secret_4_0), bool())
; [eval] typeof(secret_4_0)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 1702 | !(p2_9@579@01)]
(assert (not p2_9@579@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_9@579@01
  (issubtype<Bool> (typeof<PyType> secret_4_0@587@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@592@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@592@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@592@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@592@01)))))))
  $Snap.unit))
; [eval] p1_9 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_9@578@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1703 | p1_9@578@01 | live]
; [else-branch: 1703 | !(p1_9@578@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1703 | p1_9@578@01]
(assert p1_9@578@01)
(pop) ; 3
(push) ; 3
; [else-branch: 1703 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@592@01)))))))
  $Snap.unit))
; [eval] p2_9 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_9@579@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1704 | p2_9@579@01 | live]
; [else-branch: 1704 | !(p2_9@579@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1704 | p2_9@579@01]
(assert p2_9@579@01)
(pop) ; 3
(push) ; 3
; [else-branch: 1704 | !(p2_9@579@01)]
(assert (not p2_9@579@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@593@01 $Snap)
(assert (= $t@593@01 ($Snap.combine ($Snap.first $t@593@01) ($Snap.second $t@593@01))))
(assert (= ($Snap.first $t@593@01) $Snap.unit))
; [eval] p1_9 ==> (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_163) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_163) && _residue_163 <= _current_wait_level_163)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_9@578@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1705 | p1_9@578@01 | live]
; [else-branch: 1705 | !(p1_9@578@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1705 | p1_9@578@01]
(assert p1_9@578@01)
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_163) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_163) && _residue_163 <= _current_wait_level_163)
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_163)
(push) ; 5
; [then-branch: 1706 | False | live]
; [else-branch: 1706 | True | live]
(push) ; 6
; [then-branch: 1706 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 1706 | True]
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_163)
(push) ; 7
; [then-branch: 1707 | False | live]
; [else-branch: 1707 | True | live]
(push) ; 8
; [then-branch: 1707 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1707 | True]
; [eval] _residue_163 <= _current_wait_level_163
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 1705 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p1_9@578@01 (<= _residue_163@584@01 _current_wait_level_163@588@01)))
(assert (=
  ($Snap.second $t@593@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@593@01))
    ($Snap.second ($Snap.second $t@593@01)))))
(assert (= ($Snap.first ($Snap.second $t@593@01)) $Snap.unit))
; [eval] p2_9 ==> (forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: Level(_r_14) <= _current_wait_level_163_0) && ((forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: Level(_r_14) <= _current_wait_level_163_0) && _residue_163_0 <= _current_wait_level_163_0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_9@579@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1708 | p2_9@579@01 | live]
; [else-branch: 1708 | !(p2_9@579@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1708 | p2_9@579@01]
(assert p2_9@579@01)
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: Level(_r_14) <= _current_wait_level_163_0) && ((forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: Level(_r_14) <= _current_wait_level_163_0) && _residue_163_0 <= _current_wait_level_163_0)
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: Level(_r_14) <= _current_wait_level_163_0)
(push) ; 5
; [then-branch: 1709 | False | live]
; [else-branch: 1709 | True | live]
(push) ; 6
; [then-branch: 1709 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 1709 | True]
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: Level(_r_14) <= _current_wait_level_163_0)
(push) ; 7
; [then-branch: 1710 | False | live]
; [else-branch: 1710 | True | live]
(push) ; 8
; [then-branch: 1710 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1710 | True]
; [eval] _residue_163_0 <= _current_wait_level_163_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 1708 | !(p2_9@579@01)]
(assert (not p2_9@579@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p2_9@579@01 (<= _residue_163_0@585@01 _current_wait_level_163_0@589@01)))
(assert (=
  ($Snap.second ($Snap.second $t@593@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@593@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@593@01))) $Snap.unit))
; [eval] p1_9 ==> issubtype(typeof(_res), int())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_9@578@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1711 | p1_9@578@01 | live]
; [else-branch: 1711 | !(p1_9@578@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1711 | p1_9@578@01]
(assert p1_9@578@01)
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 1711 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_9@578@01
  (issubtype<Bool> (typeof<PyType> _res@590@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@593@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@593@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@593@01))))
  $Snap.unit))
; [eval] p2_9 ==> issubtype(typeof(_res_5), int())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_9@579@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1712 | p2_9@579@01 | live]
; [else-branch: 1712 | !(p2_9@579@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1712 | p2_9@579@01]
(assert p2_9@579@01)
; [eval] issubtype(typeof(_res_5), int())
; [eval] typeof(_res_5)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 1712 | !(p2_9@579@01)]
(assert (not p2_9@579@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_9@579@01
  (issubtype<Bool> (typeof<PyType> _res_5@591@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))
  $Snap.unit))
; [eval] p1_9 && p2_9 ==> _res == _res_5
; [eval] p1_9 && p2_9
(push) ; 3
; [then-branch: 1713 | !(p1_9@578@01) | live]
; [else-branch: 1713 | p1_9@578@01 | live]
(push) ; 4
; [then-branch: 1713 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 4
(push) ; 4
; [else-branch: 1713 | p1_9@578@01]
(assert p1_9@578@01)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1_9@578@01 (not p1_9@578@01)))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (and p1_9@578@01 p2_9@579@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and p1_9@578@01 p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1714 | p1_9@578@01 && p2_9@579@01 | live]
; [else-branch: 1714 | !(p1_9@578@01 && p2_9@579@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1714 | p1_9@578@01 && p2_9@579@01]
(assert (and p1_9@578@01 p2_9@579@01))
; [eval] _res == _res_5
(pop) ; 4
(push) ; 4
; [else-branch: 1714 | !(p1_9@578@01 && p2_9@579@01)]
(assert (not (and p1_9@578@01 p2_9@579@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (and p1_9@578@01 p2_9@579@01)) (and p1_9@578@01 p2_9@579@01)))
(assert (=> (and p1_9@578@01 p2_9@579@01) (= _res@590@01 _res_5@591@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))
  $Snap.unit))
; [eval] p1_9 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_9@578@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1715 | p1_9@578@01 | live]
; [else-branch: 1715 | !(p1_9@578@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1715 | p1_9@578@01]
(assert p1_9@578@01)
(pop) ; 4
(push) ; 4
; [else-branch: 1715 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))
  $Snap.unit))
; [eval] p2_9 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_9@579@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1716 | p2_9@579@01 | live]
; [else-branch: 1716 | !(p2_9@579@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1716 | p2_9@579@01]
(assert p2_9@579@01)
(pop) ; 4
(push) ; 4
; [else-branch: 1716 | !(p2_9@579@01)]
(assert (not p2_9@579@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
(push) ; 2
; [exec]
; var ret1_4: Bool
(declare-const ret1_4@594@01 Bool)
; [exec]
; var ret2_4: Bool
(declare-const ret2_4@595@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@596@01 $Ref)
; [exec]
; var _err_5: Ref
(declare-const _err_5@597@01 $Ref)
; [exec]
; var secret_16: Ref
(declare-const secret_16@598@01 $Ref)
; [exec]
; var secret_16_0: Ref
(declare-const secret_16_0@599@01 $Ref)
; [exec]
; var _cwl_163: Perm
(declare-const _cwl_163@600@01 $Perm)
; [exec]
; var _cwl_163_0: Perm
(declare-const _cwl_163_0@601@01 $Perm)
; [exec]
; var _method_measures_163: Seq[Measure$]
(declare-const _method_measures_163@602@01 Seq<Measure$>)
; [exec]
; var _method_measures_163_0: Seq[Measure$]
(declare-const _method_measures_163_0@603@01 Seq<Measure$>)
; [exec]
; var p1_10: Bool
(declare-const p1_10@604@01 Bool)
; [exec]
; var p2_10: Bool
(declare-const p2_10@605@01 Bool)
; [exec]
; var p3_4: Bool
(declare-const p3_4@606@01 Bool)
; [exec]
; var p4_4: Bool
(declare-const p4_4@607@01 Bool)
; [exec]
; inhale p1_9
(declare-const $t@608@01 $Snap)
(assert (= $t@608@01 $Snap.unit))
(assert p1_9@578@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ret1_4 := false
; [exec]
; ret2_4 := false
; [eval] p1_9 && !ret1_4
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1717 | !(p1_9@578@01) | live]
; [else-branch: 1717 | p1_9@578@01 | live]
(push) ; 4
; [then-branch: 1717 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 4
(push) ; 4
; [else-branch: 1717 | p1_9@578@01]
; [eval] !ret1_4
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1_9@578@01 (not p1_9@578@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1718 | p1_9@578@01 | live]
; [else-branch: 1718 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1718 | p1_9@578@01]
; [exec]
; _method_measures_163 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; secret_16 := secret_4
; [eval] p2_9 && !ret2_4
(push) ; 4
; [then-branch: 1719 | !(p2_9@579@01) | live]
; [else-branch: 1719 | p2_9@579@01 | live]
(push) ; 5
; [then-branch: 1719 | !(p2_9@579@01)]
(assert (not p2_9@579@01))
(pop) ; 5
(push) ; 5
; [else-branch: 1719 | p2_9@579@01]
(assert p2_9@579@01)
; [eval] !ret2_4
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or p2_9@579@01 (not p2_9@579@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_9@579@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1720 | p2_9@579@01 | live]
; [else-branch: 1720 | !(p2_9@579@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1720 | p2_9@579@01]
(assert p2_9@579@01)
; [exec]
; _method_measures_163_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res_5 := null
; [exec]
; _err_5 := null
; [exec]
; secret_16_0 := secret_4_0
; [exec]
; p1_10 := p1_9 && (!ret1_4 && bool___unbox__(secret_16))
; [eval] p1_9 && (!ret1_4 && bool___unbox__(secret_16))
(push) ; 5
; [then-branch: 1721 | !(p1_9@578@01) | live]
; [else-branch: 1721 | p1_9@578@01 | live]
(push) ; 6
; [then-branch: 1721 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1721 | p1_9@578@01]
; [eval] !ret1_4
(push) ; 7
; [then-branch: 1722 | False | live]
; [else-branch: 1722 | True | live]
(push) ; 8
; [then-branch: 1722 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1722 | True]
; [eval] bool___unbox__(secret_16)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_4@586@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_4@586@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_4@586@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_4@586@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_4@586@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_4@586@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_4@586@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_9@578@01
  (and
    (issubtype<Bool> (typeof<PyType> secret_4@586@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_4@586@01))))
(declare-const p1_10@609@01 Bool)
(assert (= p1_10@609@01 (and p1_9@578@01 (bool___unbox__ $Snap.unit secret_4@586@01))))
; [exec]
; p2_10 := p2_9 && (!ret2_4 && bool___unbox__(secret_16_0))
; [eval] p2_9 && (!ret2_4 && bool___unbox__(secret_16_0))
(push) ; 5
; [then-branch: 1723 | !(p2_9@579@01) | live]
; [else-branch: 1723 | p2_9@579@01 | live]
(push) ; 6
; [then-branch: 1723 | !(p2_9@579@01)]
(assert (not p2_9@579@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1723 | p2_9@579@01]
; [eval] !ret2_4
(push) ; 7
; [then-branch: 1724 | False | live]
; [else-branch: 1724 | True | live]
(push) ; 8
; [then-branch: 1724 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1724 | True]
; [eval] bool___unbox__(secret_16_0)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_4_0@587@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_4_0@587@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_4_0@587@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_4_0@587@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_4_0@587@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_4_0@587@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_4_0@587@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_9@579@01
  (and
    (issubtype<Bool> (typeof<PyType> secret_4_0@587@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_4_0@587@01))))
(declare-const p2_10@610@01 Bool)
(assert (= p2_10@610@01 (and p2_9@579@01 (bool___unbox__ $Snap.unit secret_4_0@587@01))))
; [exec]
; p3_4 := p1_9 && (!ret1_4 && !bool___unbox__(secret_16))
; [eval] p1_9 && (!ret1_4 && !bool___unbox__(secret_16))
(push) ; 5
; [then-branch: 1725 | !(p1_9@578@01) | live]
; [else-branch: 1725 | p1_9@578@01 | live]
(push) ; 6
; [then-branch: 1725 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1725 | p1_9@578@01]
; [eval] !ret1_4
(push) ; 7
; [then-branch: 1726 | False | live]
; [else-branch: 1726 | True | live]
(push) ; 8
; [then-branch: 1726 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1726 | True]
; [eval] !bool___unbox__(secret_16)
; [eval] bool___unbox__(secret_16)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_4@586@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_4@586@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_4@586@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_4@586@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_4@586@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_4@586@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_4@586@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p3_4@611@01 Bool)
(assert (=
  p3_4@611@01
  (and p1_9@578@01 (not (bool___unbox__ $Snap.unit secret_4@586@01)))))
; [exec]
; p4_4 := p2_9 && (!ret2_4 && !bool___unbox__(secret_16_0))
; [eval] p2_9 && (!ret2_4 && !bool___unbox__(secret_16_0))
(push) ; 5
; [then-branch: 1727 | !(p2_9@579@01) | live]
; [else-branch: 1727 | p2_9@579@01 | live]
(push) ; 6
; [then-branch: 1727 | !(p2_9@579@01)]
(assert (not p2_9@579@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1727 | p2_9@579@01]
; [eval] !ret2_4
(push) ; 7
; [then-branch: 1728 | False | live]
; [else-branch: 1728 | True | live]
(push) ; 8
; [then-branch: 1728 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1728 | True]
; [eval] !bool___unbox__(secret_16_0)
; [eval] bool___unbox__(secret_16_0)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_4_0@587@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_4_0@587@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_4_0@587@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_4_0@587@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_4_0@587@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_4_0@587@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_4_0@587@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p4_4@612@01 Bool)
(assert (=
  p4_4@612@01
  (and p2_9@579@01 (not (bool___unbox__ $Snap.unit secret_4_0@587@01)))))
; [eval] p1_10 && !ret1_4
(push) ; 5
; [then-branch: 1729 | !(p1_10@609@01) | live]
; [else-branch: 1729 | p1_10@609@01 | live]
(push) ; 6
; [then-branch: 1729 | !(p1_10@609@01)]
(assert (not p1_10@609@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1729 | p1_10@609@01]
(assert p1_10@609@01)
; [eval] !ret1_4
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_10@609@01 (not p1_10@609@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_10@609@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not p1_10@609@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1730 | p1_10@609@01 | live]
; [else-branch: 1730 | !(p1_10@609@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1730 | p1_10@609@01]
(assert p1_10@609@01)
; [exec]
; _res := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const _res@613@01 $Ref)
(assert (= _res@613@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; ret1_4 := true
; [eval] p2_10 && !ret2_4
(push) ; 6
; [then-branch: 1731 | !(p2_10@610@01) | live]
; [else-branch: 1731 | p2_10@610@01 | live]
(push) ; 7
; [then-branch: 1731 | !(p2_10@610@01)]
(assert (not p2_10@610@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1731 | p2_10@610@01]
(assert p2_10@610@01)
; [eval] !ret2_4
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_10@610@01 (not p2_10@610@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_10@610@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not p2_10@610@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1732 | p2_10@610@01 | live]
; [else-branch: 1732 | !(p2_10@610@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1732 | p2_10@610@01]
(assert p2_10@610@01)
; [exec]
; _res_5 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const _res_5@614@01 $Ref)
(assert (= _res_5@614@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; ret2_4 := true
; [eval] p1_9 && !ret1_4
(push) ; 7
; [then-branch: 1733 | !(p1_9@578@01) | live]
; [else-branch: 1733 | p1_9@578@01 | live]
(push) ; 8
; [then-branch: 1733 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1733 | p1_9@578@01]
; [eval] !ret1_4
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 1734 | False | dead]
; [else-branch: 1734 | True | live]
(push) ; 7
; [else-branch: 1734 | True]
(pop) ; 7
; [eval] !(p1_9 && !ret1_4)
; [eval] p1_9 && !ret1_4
(push) ; 7
; [then-branch: 1735 | !(p1_9@578@01) | live]
; [else-branch: 1735 | p1_9@578@01 | live]
(push) ; 8
; [then-branch: 1735 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1735 | p1_9@578@01]
; [eval] !ret1_4
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1736 | True | live]
; [else-branch: 1736 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1736 | True]
; [eval] p2_9 && !ret2_4
(push) ; 8
; [then-branch: 1737 | !(p2_9@579@01) | live]
; [else-branch: 1737 | p2_9@579@01 | live]
(push) ; 9
; [then-branch: 1737 | !(p2_9@579@01)]
(assert (not p2_9@579@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1737 | p2_9@579@01]
; [eval] !ret2_4
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 1738 | False | dead]
; [else-branch: 1738 | True | live]
(push) ; 8
; [else-branch: 1738 | True]
(pop) ; 8
; [eval] !(p2_9 && !ret2_4)
; [eval] p2_9 && !ret2_4
(push) ; 8
; [then-branch: 1739 | !(p2_9@579@01) | live]
; [else-branch: 1739 | p2_9@579@01 | live]
(push) ; 9
; [then-branch: 1739 | !(p2_9@579@01)]
(assert (not p2_9@579@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1739 | p2_9@579@01]
; [eval] !ret2_4
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1740 | True | live]
; [else-branch: 1740 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1740 | True]
; [exec]
; assert true
; [eval] p1_9 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1741 | p1_9@578@01 | live]
; [else-branch: 1741 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1741 | p1_9@578@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_9 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1742 | p2_9@579@01 | live]
; [else-branch: 1742 | !(p2_9@579@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1742 | p2_9@579@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_9 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1743 | p1_9@578@01 | live]
; [else-branch: 1743 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1743 | p1_9@578@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p1_9@578@01
  (issubtype<Bool> (typeof<PyType> _res@613@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_9@578@01
  (issubtype<Bool> (typeof<PyType> _res@613@01) (as int<PyType>  PyType))))
; [eval] p2_9 ==> issubtype(typeof(_res_5), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1744 | p2_9@579@01 | live]
; [else-branch: 1744 | !(p2_9@579@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1744 | p2_9@579@01]
; [eval] issubtype(typeof(_res_5), int())
; [eval] typeof(_res_5)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p2_9@579@01
  (issubtype<Bool> (typeof<PyType> _res_5@614@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_9@579@01
  (issubtype<Bool> (typeof<PyType> _res_5@614@01) (as int<PyType>  PyType))))
; [eval] p1_9 && p2_9 ==> _res == _res_5
; [eval] p1_9 && p2_9
(push) ; 9
; [then-branch: 1745 | !(p1_9@578@01) | live]
; [else-branch: 1745 | p1_9@578@01 | live]
(push) ; 10
; [then-branch: 1745 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1745 | p1_9@578@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_9@578@01 p2_9@579@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_9@578@01 p2_9@579@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1746 | p1_9@578@01 && p2_9@579@01 | live]
; [else-branch: 1746 | !(p1_9@578@01 && p2_9@579@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1746 | p1_9@578@01 && p2_9@579@01]
(assert (and p1_9@578@01 p2_9@579@01))
; [eval] _res == _res_5
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and p1_9@578@01 p2_9@579@01))
(push) ; 9
(assert (not (=> (and p1_9@578@01 p2_9@579@01) (= _res@613@01 _res_5@614@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=> (and p1_9@578@01 p2_9@579@01) (= _res@613@01 _res_5@614@01)))
; [eval] p1_9 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1747 | p1_9@578@01 | live]
; [else-branch: 1747 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1747 | p1_9@578@01]
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 11
; [then-branch: 1748 | False | live]
; [else-branch: 1748 | True | live]
(push) ; 12
; [then-branch: 1748 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1748 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 13
; [then-branch: 1749 | False | live]
; [else-branch: 1749 | True | live]
(push) ; 14
; [then-branch: 1749 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 1749 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 1750 | False | live]
; [else-branch: 1750 | True | live]
(push) ; 16
; [then-branch: 1750 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 1750 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_9 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1751 | p2_9@579@01 | live]
; [else-branch: 1751 | !(p2_9@579@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1751 | p2_9@579@01]
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false)
(push) ; 11
; [then-branch: 1752 | False | live]
; [else-branch: 1752 | True | live]
(push) ; 12
; [then-branch: 1752 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1752 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false)
(push) ; 13
; [then-branch: 1753 | False | live]
; [else-branch: 1753 | True | live]
(push) ; 14
; [then-branch: 1753 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 1753 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false)
(push) ; 15
; [then-branch: 1754 | False | live]
; [else-branch: 1754 | True | live]
(push) ; 16
; [then-branch: 1754 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 1754 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 1732 | !(p2_10@610@01)]
(assert (not p2_10@610@01))
(pop) ; 6
; [eval] !(p2_10 && !ret2_4)
; [eval] p2_10 && !ret2_4
(push) ; 6
; [then-branch: 1755 | !(p2_10@610@01) | live]
; [else-branch: 1755 | p2_10@610@01 | live]
(push) ; 7
; [then-branch: 1755 | !(p2_10@610@01)]
(assert (not p2_10@610@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1755 | p2_10@610@01]
(assert p2_10@610@01)
; [eval] !ret2_4
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_10@610@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_10@610@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1756 | !(p2_10@610@01) | live]
; [else-branch: 1756 | p2_10@610@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1756 | !(p2_10@610@01)]
(assert (not p2_10@610@01))
; [eval] p1_9 && !ret1_4
(push) ; 7
; [then-branch: 1757 | !(p1_9@578@01) | live]
; [else-branch: 1757 | p1_9@578@01 | live]
(push) ; 8
; [then-branch: 1757 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1757 | p1_9@578@01]
(assert p1_9@578@01)
; [eval] !ret1_4
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 1758 | False | dead]
; [else-branch: 1758 | True | live]
(push) ; 7
; [else-branch: 1758 | True]
(pop) ; 7
; [eval] !(p1_9 && !ret1_4)
; [eval] p1_9 && !ret1_4
(push) ; 7
; [then-branch: 1759 | !(p1_9@578@01) | live]
; [else-branch: 1759 | p1_9@578@01 | live]
(push) ; 8
; [then-branch: 1759 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1759 | p1_9@578@01]
(assert p1_9@578@01)
; [eval] !ret1_4
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1760 | True | live]
; [else-branch: 1760 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1760 | True]
; [eval] p2_9 && !ret2_4
(push) ; 8
; [then-branch: 1761 | !(p2_9@579@01) | live]
; [else-branch: 1761 | p2_9@579@01 | live]
(push) ; 9
; [then-branch: 1761 | !(p2_9@579@01)]
(assert (not p2_9@579@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1761 | p2_9@579@01]
(assert p2_9@579@01)
; [eval] !ret2_4
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not p2_9@579@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1762 | p2_9@579@01 | live]
; [else-branch: 1762 | !(p2_9@579@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1762 | p2_9@579@01]
(assert p2_9@579@01)
; [exec]
; _res_5 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const _res_5@615@01 $Ref)
(assert (= _res_5@615@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; ret2_4 := true
; [exec]
; assert true
; [eval] p1_9 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not p1_9@578@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1763 | p1_9@578@01 | live]
; [else-branch: 1763 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1763 | p1_9@578@01]
(assert p1_9@578@01)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert p1_9@578@01)
; [eval] p2_9 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1764 | p2_9@579@01 | live]
; [else-branch: 1764 | !(p2_9@579@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1764 | p2_9@579@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_9 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1765 | p1_9@578@01 | live]
; [else-branch: 1765 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1765 | p1_9@578@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p1_9@578@01
  (issubtype<Bool> (typeof<PyType> _res@613@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_9@578@01
  (issubtype<Bool> (typeof<PyType> _res@613@01) (as int<PyType>  PyType))))
; [eval] p2_9 ==> issubtype(typeof(_res_5), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1766 | p2_9@579@01 | live]
; [else-branch: 1766 | !(p2_9@579@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1766 | p2_9@579@01]
; [eval] issubtype(typeof(_res_5), int())
; [eval] typeof(_res_5)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p2_9@579@01
  (issubtype<Bool> (typeof<PyType> _res_5@615@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_9@579@01
  (issubtype<Bool> (typeof<PyType> _res_5@615@01) (as int<PyType>  PyType))))
; [eval] p1_9 && p2_9 ==> _res == _res_5
; [eval] p1_9 && p2_9
(push) ; 9
; [then-branch: 1767 | !(p1_9@578@01) | live]
; [else-branch: 1767 | p1_9@578@01 | live]
(push) ; 10
; [then-branch: 1767 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1767 | p1_9@578@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_9@578@01 p2_9@579@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_9@578@01 p2_9@579@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1768 | p1_9@578@01 && p2_9@579@01 | live]
; [else-branch: 1768 | !(p1_9@578@01 && p2_9@579@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1768 | p1_9@578@01 && p2_9@579@01]
(assert (and p1_9@578@01 p2_9@579@01))
; [eval] _res == _res_5
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and p1_9@578@01 p2_9@579@01))
(push) ; 9
(assert (not (=> (and p1_9@578@01 p2_9@579@01) (= _res@613@01 _res_5@615@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=> (and p1_9@578@01 p2_9@579@01) (= _res@613@01 _res_5@615@01)))
; [eval] p1_9 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1769 | p1_9@578@01 | live]
; [else-branch: 1769 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1769 | p1_9@578@01]
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 11
; [then-branch: 1770 | False | live]
; [else-branch: 1770 | True | live]
(push) ; 12
; [then-branch: 1770 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1770 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 13
; [then-branch: 1771 | False | live]
; [else-branch: 1771 | True | live]
(push) ; 14
; [then-branch: 1771 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 1771 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 1772 | False | live]
; [else-branch: 1772 | True | live]
(push) ; 16
; [then-branch: 1772 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 1772 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_9 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1773 | p2_9@579@01 | live]
; [else-branch: 1773 | !(p2_9@579@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1773 | p2_9@579@01]
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false)
(push) ; 11
; [then-branch: 1774 | False | live]
; [else-branch: 1774 | True | live]
(push) ; 12
; [then-branch: 1774 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1774 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false)
(push) ; 13
; [then-branch: 1775 | False | live]
; [else-branch: 1775 | True | live]
(push) ; 14
; [then-branch: 1775 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 1775 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false)
(push) ; 15
; [then-branch: 1776 | False | live]
; [else-branch: 1776 | True | live]
(push) ; 16
; [then-branch: 1776 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 1776 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
; [eval] !(p2_9 && !ret2_4)
; [eval] p2_9 && !ret2_4
(push) ; 8
; [then-branch: 1777 | !(p2_9@579@01) | live]
; [else-branch: 1777 | p2_9@579@01 | live]
(push) ; 9
; [then-branch: 1777 | !(p2_9@579@01)]
(assert (not p2_9@579@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1777 | p2_9@579@01]
(assert p2_9@579@01)
; [eval] !ret2_4
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_9@579@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1778 | !(p2_9@579@01) | dead]
; [else-branch: 1778 | p2_9@579@01 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 1778 | p2_9@579@01]
(assert p2_9@579@01)
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 1756 | p2_10@610@01]
(assert p2_10@610@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 1730 | !(p1_10@609@01)]
(assert (not p1_10@609@01))
(pop) ; 5
; [eval] !(p1_10 && !ret1_4)
; [eval] p1_10 && !ret1_4
(push) ; 5
; [then-branch: 1779 | !(p1_10@609@01) | live]
; [else-branch: 1779 | p1_10@609@01 | live]
(push) ; 6
; [then-branch: 1779 | !(p1_10@609@01)]
(assert (not p1_10@609@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1779 | p1_10@609@01]
(assert p1_10@609@01)
; [eval] !ret1_4
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not p1_10@609@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_10@609@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1780 | !(p1_10@609@01) | live]
; [else-branch: 1780 | p1_10@609@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1780 | !(p1_10@609@01)]
(assert (not p1_10@609@01))
; [eval] p2_10 && !ret2_4
(push) ; 6
; [then-branch: 1781 | !(p2_10@610@01) | live]
; [else-branch: 1781 | p2_10@610@01 | live]
(push) ; 7
; [then-branch: 1781 | !(p2_10@610@01)]
(assert (not p2_10@610@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1781 | p2_10@610@01]
(assert p2_10@610@01)
; [eval] !ret2_4
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_10@610@01 (not p2_10@610@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_10@610@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not p2_10@610@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1782 | p2_10@610@01 | live]
; [else-branch: 1782 | !(p2_10@610@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1782 | p2_10@610@01]
(assert p2_10@610@01)
; [exec]
; _res_5 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const _res_5@616@01 $Ref)
(assert (= _res_5@616@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; ret2_4 := true
; [eval] p1_9 && !ret1_4
(push) ; 7
; [then-branch: 1783 | !(p1_9@578@01) | live]
; [else-branch: 1783 | p1_9@578@01 | live]
(push) ; 8
; [then-branch: 1783 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1783 | p1_9@578@01]
(assert p1_9@578@01)
; [eval] !ret1_4
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not p1_9@578@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1784 | p1_9@578@01 | live]
; [else-branch: 1784 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1784 | p1_9@578@01]
(assert p1_9@578@01)
; [exec]
; _res := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const _res@617@01 $Ref)
(assert (= _res@617@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; ret1_4 := true
; [eval] p2_9 && !ret2_4
(push) ; 8
; [then-branch: 1785 | !(p2_9@579@01) | live]
; [else-branch: 1785 | p2_9@579@01 | live]
(push) ; 9
; [then-branch: 1785 | !(p2_9@579@01)]
(assert (not p2_9@579@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1785 | p2_9@579@01]
(assert p2_9@579@01)
; [eval] !ret2_4
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 1786 | False | dead]
; [else-branch: 1786 | True | live]
(push) ; 8
; [else-branch: 1786 | True]
(pop) ; 8
; [eval] !(p2_9 && !ret2_4)
; [eval] p2_9 && !ret2_4
(push) ; 8
; [then-branch: 1787 | !(p2_9@579@01) | live]
; [else-branch: 1787 | p2_9@579@01 | live]
(push) ; 9
; [then-branch: 1787 | !(p2_9@579@01)]
(assert (not p2_9@579@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1787 | p2_9@579@01]
(assert p2_9@579@01)
; [eval] !ret2_4
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1788 | True | live]
; [else-branch: 1788 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1788 | True]
; [exec]
; assert true
; [eval] p1_9 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1789 | p1_9@578@01 | live]
; [else-branch: 1789 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1789 | p1_9@578@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_9 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not p2_9@579@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1790 | p2_9@579@01 | live]
; [else-branch: 1790 | !(p2_9@579@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1790 | p2_9@579@01]
(assert p2_9@579@01)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert p2_9@579@01)
; [eval] p1_9 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1791 | p1_9@578@01 | live]
; [else-branch: 1791 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1791 | p1_9@578@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p1_9@578@01
  (issubtype<Bool> (typeof<PyType> _res@617@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_9@578@01
  (issubtype<Bool> (typeof<PyType> _res@617@01) (as int<PyType>  PyType))))
; [eval] p2_9 ==> issubtype(typeof(_res_5), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1792 | p2_9@579@01 | live]
; [else-branch: 1792 | !(p2_9@579@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1792 | p2_9@579@01]
; [eval] issubtype(typeof(_res_5), int())
; [eval] typeof(_res_5)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p2_9@579@01
  (issubtype<Bool> (typeof<PyType> _res_5@616@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_9@579@01
  (issubtype<Bool> (typeof<PyType> _res_5@616@01) (as int<PyType>  PyType))))
; [eval] p1_9 && p2_9 ==> _res == _res_5
; [eval] p1_9 && p2_9
(push) ; 9
; [then-branch: 1793 | !(p1_9@578@01) | live]
; [else-branch: 1793 | p1_9@578@01 | live]
(push) ; 10
; [then-branch: 1793 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1793 | p1_9@578@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_9@578@01 p2_9@579@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_9@578@01 p2_9@579@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1794 | p1_9@578@01 && p2_9@579@01 | live]
; [else-branch: 1794 | !(p1_9@578@01 && p2_9@579@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1794 | p1_9@578@01 && p2_9@579@01]
(assert (and p1_9@578@01 p2_9@579@01))
; [eval] _res == _res_5
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and p1_9@578@01 p2_9@579@01))
(push) ; 9
(assert (not (=> (and p1_9@578@01 p2_9@579@01) (= _res@617@01 _res_5@616@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=> (and p1_9@578@01 p2_9@579@01) (= _res@617@01 _res_5@616@01)))
; [eval] p1_9 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1795 | p1_9@578@01 | live]
; [else-branch: 1795 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1795 | p1_9@578@01]
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 11
; [then-branch: 1796 | False | live]
; [else-branch: 1796 | True | live]
(push) ; 12
; [then-branch: 1796 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1796 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 13
; [then-branch: 1797 | False | live]
; [else-branch: 1797 | True | live]
(push) ; 14
; [then-branch: 1797 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 1797 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 1798 | False | live]
; [else-branch: 1798 | True | live]
(push) ; 16
; [then-branch: 1798 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 1798 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_9 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1799 | p2_9@579@01 | live]
; [else-branch: 1799 | !(p2_9@579@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1799 | p2_9@579@01]
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false)
(push) ; 11
; [then-branch: 1800 | False | live]
; [else-branch: 1800 | True | live]
(push) ; 12
; [then-branch: 1800 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1800 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false)
(push) ; 13
; [then-branch: 1801 | False | live]
; [else-branch: 1801 | True | live]
(push) ; 14
; [then-branch: 1801 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 1801 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false)
(push) ; 15
; [then-branch: 1802 | False | live]
; [else-branch: 1802 | True | live]
(push) ; 16
; [then-branch: 1802 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 1802 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; [eval] !(p1_9 && !ret1_4)
; [eval] p1_9 && !ret1_4
(push) ; 7
; [then-branch: 1803 | !(p1_9@578@01) | live]
; [else-branch: 1803 | p1_9@578@01 | live]
(push) ; 8
; [then-branch: 1803 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1803 | p1_9@578@01]
(assert p1_9@578@01)
; [eval] !ret1_4
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_9@578@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1804 | !(p1_9@578@01) | dead]
; [else-branch: 1804 | p1_9@578@01 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 1804 | p1_9@578@01]
(assert p1_9@578@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 1782 | !(p2_10@610@01)]
(assert (not p2_10@610@01))
(pop) ; 6
; [eval] !(p2_10 && !ret2_4)
; [eval] p2_10 && !ret2_4
(push) ; 6
; [then-branch: 1805 | !(p2_10@610@01) | live]
; [else-branch: 1805 | p2_10@610@01 | live]
(push) ; 7
; [then-branch: 1805 | !(p2_10@610@01)]
(assert (not p2_10@610@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1805 | p2_10@610@01]
(assert p2_10@610@01)
; [eval] !ret2_4
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_10@610@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_10@610@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1806 | !(p2_10@610@01) | live]
; [else-branch: 1806 | p2_10@610@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1806 | !(p2_10@610@01)]
(assert (not p2_10@610@01))
; [eval] p1_9 && !ret1_4
(push) ; 7
; [then-branch: 1807 | !(p1_9@578@01) | live]
; [else-branch: 1807 | p1_9@578@01 | live]
(push) ; 8
; [then-branch: 1807 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1807 | p1_9@578@01]
(assert p1_9@578@01)
; [eval] !ret1_4
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not p1_9@578@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1808 | p1_9@578@01 | live]
; [else-branch: 1808 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1808 | p1_9@578@01]
(assert p1_9@578@01)
; [exec]
; _res := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const _res@618@01 $Ref)
(assert (= _res@618@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; ret1_4 := true
; [eval] p2_9 && !ret2_4
(push) ; 8
; [then-branch: 1809 | !(p2_9@579@01) | live]
; [else-branch: 1809 | p2_9@579@01 | live]
(push) ; 9
; [then-branch: 1809 | !(p2_9@579@01)]
(assert (not p2_9@579@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1809 | p2_9@579@01]
(assert p2_9@579@01)
; [eval] !ret2_4
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not p2_9@579@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1810 | p2_9@579@01 | live]
; [else-branch: 1810 | !(p2_9@579@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1810 | p2_9@579@01]
(assert p2_9@579@01)
; [exec]
; _res_5 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const _res_5@619@01 $Ref)
(assert (= _res_5@619@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; ret2_4 := true
; [exec]
; assert true
; [eval] p1_9 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1811 | p1_9@578@01 | live]
; [else-branch: 1811 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1811 | p1_9@578@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_9 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1812 | p2_9@579@01 | live]
; [else-branch: 1812 | !(p2_9@579@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1812 | p2_9@579@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_9 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1813 | p1_9@578@01 | live]
; [else-branch: 1813 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1813 | p1_9@578@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p1_9@578@01
  (issubtype<Bool> (typeof<PyType> _res@618@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_9@578@01
  (issubtype<Bool> (typeof<PyType> _res@618@01) (as int<PyType>  PyType))))
; [eval] p2_9 ==> issubtype(typeof(_res_5), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1814 | p2_9@579@01 | live]
; [else-branch: 1814 | !(p2_9@579@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1814 | p2_9@579@01]
; [eval] issubtype(typeof(_res_5), int())
; [eval] typeof(_res_5)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p2_9@579@01
  (issubtype<Bool> (typeof<PyType> _res_5@619@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_9@579@01
  (issubtype<Bool> (typeof<PyType> _res_5@619@01) (as int<PyType>  PyType))))
; [eval] p1_9 && p2_9 ==> _res == _res_5
; [eval] p1_9 && p2_9
(push) ; 9
; [then-branch: 1815 | !(p1_9@578@01) | live]
; [else-branch: 1815 | p1_9@578@01 | live]
(push) ; 10
; [then-branch: 1815 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1815 | p1_9@578@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_9@578@01 p2_9@579@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_9@578@01 p2_9@579@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1816 | p1_9@578@01 && p2_9@579@01 | live]
; [else-branch: 1816 | !(p1_9@578@01 && p2_9@579@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1816 | p1_9@578@01 && p2_9@579@01]
(assert (and p1_9@578@01 p2_9@579@01))
; [eval] _res == _res_5
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and p1_9@578@01 p2_9@579@01))
(push) ; 9
(assert (not (=> (and p1_9@578@01 p2_9@579@01) (= _res@618@01 _res_5@619@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=> (and p1_9@578@01 p2_9@579@01) (= _res@618@01 _res_5@619@01)))
; [eval] p1_9 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1817 | p1_9@578@01 | live]
; [else-branch: 1817 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1817 | p1_9@578@01]
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 11
; [then-branch: 1818 | False | live]
; [else-branch: 1818 | True | live]
(push) ; 12
; [then-branch: 1818 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1818 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 13
; [then-branch: 1819 | False | live]
; [else-branch: 1819 | True | live]
(push) ; 14
; [then-branch: 1819 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 1819 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 1820 | False | live]
; [else-branch: 1820 | True | live]
(push) ; 16
; [then-branch: 1820 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 1820 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_9 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1821 | p2_9@579@01 | live]
; [else-branch: 1821 | !(p2_9@579@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1821 | p2_9@579@01]
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false)
(push) ; 11
; [then-branch: 1822 | False | live]
; [else-branch: 1822 | True | live]
(push) ; 12
; [then-branch: 1822 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1822 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false)
(push) ; 13
; [then-branch: 1823 | False | live]
; [else-branch: 1823 | True | live]
(push) ; 14
; [then-branch: 1823 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 1823 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false)
(push) ; 15
; [then-branch: 1824 | False | live]
; [else-branch: 1824 | True | live]
(push) ; 16
; [then-branch: 1824 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 1824 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
; [eval] !(p2_9 && !ret2_4)
; [eval] p2_9 && !ret2_4
(push) ; 8
; [then-branch: 1825 | !(p2_9@579@01) | live]
; [else-branch: 1825 | p2_9@579@01 | live]
(push) ; 9
; [then-branch: 1825 | !(p2_9@579@01)]
(assert (not p2_9@579@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1825 | p2_9@579@01]
(assert p2_9@579@01)
; [eval] !ret2_4
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_9@579@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1826 | !(p2_9@579@01) | dead]
; [else-branch: 1826 | p2_9@579@01 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 1826 | p2_9@579@01]
(assert p2_9@579@01)
(pop) ; 8
(pop) ; 7
; [eval] !(p1_9 && !ret1_4)
; [eval] p1_9 && !ret1_4
(push) ; 7
; [then-branch: 1827 | !(p1_9@578@01) | live]
; [else-branch: 1827 | p1_9@578@01 | live]
(push) ; 8
; [then-branch: 1827 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1827 | p1_9@578@01]
(assert p1_9@578@01)
; [eval] !ret1_4
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_9@578@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1828 | !(p1_9@578@01) | dead]
; [else-branch: 1828 | p1_9@578@01 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 1828 | p1_9@578@01]
(assert p1_9@578@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 1806 | p2_10@610@01]
(assert p2_10@610@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 1780 | p1_10@609@01]
(assert p1_10@609@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 1720 | !(p2_9@579@01)]
(assert (not p2_9@579@01))
(pop) ; 4
; [eval] !(p2_9 && !ret2_4)
; [eval] p2_9 && !ret2_4
(push) ; 4
; [then-branch: 1829 | !(p2_9@579@01) | live]
; [else-branch: 1829 | p2_9@579@01 | live]
(push) ; 5
; [then-branch: 1829 | !(p2_9@579@01)]
(assert (not p2_9@579@01))
(pop) ; 5
(push) ; 5
; [else-branch: 1829 | p2_9@579@01]
(assert p2_9@579@01)
; [eval] !ret2_4
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not p2_9@579@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_9@579@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1830 | !(p2_9@579@01) | live]
; [else-branch: 1830 | p2_9@579@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1830 | !(p2_9@579@01)]
(assert (not p2_9@579@01))
; [exec]
; p1_10 := p1_9 && (!ret1_4 && bool___unbox__(secret_16))
; [eval] p1_9 && (!ret1_4 && bool___unbox__(secret_16))
(push) ; 5
; [then-branch: 1831 | !(p1_9@578@01) | live]
; [else-branch: 1831 | p1_9@578@01 | live]
(push) ; 6
; [then-branch: 1831 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1831 | p1_9@578@01]
(assert p1_9@578@01)
; [eval] !ret1_4
(push) ; 7
; [then-branch: 1832 | False | live]
; [else-branch: 1832 | True | live]
(push) ; 8
; [then-branch: 1832 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1832 | True]
; [eval] bool___unbox__(secret_16)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_4@586@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_4@586@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_4@586@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_4@586@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_4@586@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_4@586@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_4@586@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_9@578@01
  (and
    p1_9@578@01
    (issubtype<Bool> (typeof<PyType> secret_4@586@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_4@586@01))))
(declare-const p1_10@620@01 Bool)
(assert (= p1_10@620@01 (and p1_9@578@01 (bool___unbox__ $Snap.unit secret_4@586@01))))
; [exec]
; p2_10 := p2_9 && (!ret2_4 && bool___unbox__(secret_16_0))
; [eval] p2_9 && (!ret2_4 && bool___unbox__(secret_16_0))
(push) ; 5
; [then-branch: 1833 | !(p2_9@579@01) | live]
; [else-branch: 1833 | p2_9@579@01 | live]
(push) ; 6
; [then-branch: 1833 | !(p2_9@579@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 1833 | p2_9@579@01]
(assert p2_9@579@01)
; [eval] !ret2_4
(push) ; 7
; [then-branch: 1834 | False | live]
; [else-branch: 1834 | True | live]
(push) ; 8
; [then-branch: 1834 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1834 | True]
; [eval] bool___unbox__(secret_16_0)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_16_0@599@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_16_0@599@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_16_0@599@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_16_0@599@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_16_0@599@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_16_0@599@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_16_0@599@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_9@579@01
  (and
    p2_9@579@01
    (issubtype<Bool> (typeof<PyType> secret_16_0@599@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_16_0@599@01))))
(declare-const p2_10@621@01 Bool)
(assert (= p2_10@621@01 (and p2_9@579@01 (bool___unbox__ $Snap.unit secret_16_0@599@01))))
; [exec]
; p3_4 := p1_9 && (!ret1_4 && !bool___unbox__(secret_16))
; [eval] p1_9 && (!ret1_4 && !bool___unbox__(secret_16))
(push) ; 5
; [then-branch: 1835 | !(p1_9@578@01) | live]
; [else-branch: 1835 | p1_9@578@01 | live]
(push) ; 6
; [then-branch: 1835 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1835 | p1_9@578@01]
(assert p1_9@578@01)
; [eval] !ret1_4
(push) ; 7
; [then-branch: 1836 | False | live]
; [else-branch: 1836 | True | live]
(push) ; 8
; [then-branch: 1836 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1836 | True]
; [eval] !bool___unbox__(secret_16)
; [eval] bool___unbox__(secret_16)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_4@586@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_4@586@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_4@586@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_4@586@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_4@586@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_4@586@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_4@586@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p3_4@622@01 Bool)
(assert (=
  p3_4@622@01
  (and p1_9@578@01 (not (bool___unbox__ $Snap.unit secret_4@586@01)))))
; [exec]
; p4_4 := p2_9 && (!ret2_4 && !bool___unbox__(secret_16_0))
; [eval] p2_9 && (!ret2_4 && !bool___unbox__(secret_16_0))
(push) ; 5
; [then-branch: 1837 | !(p2_9@579@01) | live]
; [else-branch: 1837 | p2_9@579@01 | live]
(push) ; 6
; [then-branch: 1837 | !(p2_9@579@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 1837 | p2_9@579@01]
(assert p2_9@579@01)
; [eval] !ret2_4
(push) ; 7
; [then-branch: 1838 | False | live]
; [else-branch: 1838 | True | live]
(push) ; 8
; [then-branch: 1838 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1838 | True]
; [eval] !bool___unbox__(secret_16_0)
; [eval] bool___unbox__(secret_16_0)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_16_0@599@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_16_0@599@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_16_0@599@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_16_0@599@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_16_0@599@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_16_0@599@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_16_0@599@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p4_4@623@01 Bool)
(assert (=
  p4_4@623@01
  (and p2_9@579@01 (not (bool___unbox__ $Snap.unit secret_16_0@599@01)))))
; [eval] p1_10 && !ret1_4
(push) ; 5
; [then-branch: 1839 | !(p1_10@620@01) | live]
; [else-branch: 1839 | p1_10@620@01 | live]
(push) ; 6
; [then-branch: 1839 | !(p1_10@620@01)]
(assert (not p1_10@620@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1839 | p1_10@620@01]
(assert p1_10@620@01)
; [eval] !ret1_4
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_10@620@01 (not p1_10@620@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_10@620@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not p1_10@620@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1840 | p1_10@620@01 | live]
; [else-branch: 1840 | !(p1_10@620@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1840 | p1_10@620@01]
(assert p1_10@620@01)
; [exec]
; _res := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const _res@624@01 $Ref)
(assert (= _res@624@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; ret1_4 := true
; [eval] p2_10 && !ret2_4
(push) ; 6
; [then-branch: 1841 | !(p2_10@621@01) | live]
; [else-branch: 1841 | p2_10@621@01 | live]
(push) ; 7
; [then-branch: 1841 | !(p2_10@621@01)]
(assert (not p2_10@621@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1841 | p2_10@621@01]
(assert p2_10@621@01)
; [eval] !ret2_4
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_10@621@01 (not p2_10@621@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_10@621@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1842 | p2_10@621@01 | dead]
; [else-branch: 1842 | !(p2_10@621@01) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 1842 | !(p2_10@621@01)]
(assert (not p2_10@621@01))
(pop) ; 6
; [eval] !(p2_10 && !ret2_4)
; [eval] p2_10 && !ret2_4
(push) ; 6
; [then-branch: 1843 | !(p2_10@621@01) | live]
; [else-branch: 1843 | p2_10@621@01 | live]
(push) ; 7
; [then-branch: 1843 | !(p2_10@621@01)]
(assert (not p2_10@621@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1843 | p2_10@621@01]
(assert p2_10@621@01)
; [eval] !ret2_4
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_10@621@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_10@621@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1844 | !(p2_10@621@01) | live]
; [else-branch: 1844 | p2_10@621@01 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1844 | !(p2_10@621@01)]
(assert (not p2_10@621@01))
; [eval] p1_9 && !ret1_4
(push) ; 7
; [then-branch: 1845 | !(p1_9@578@01) | live]
; [else-branch: 1845 | p1_9@578@01 | live]
(push) ; 8
; [then-branch: 1845 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1845 | p1_9@578@01]
(assert p1_9@578@01)
; [eval] !ret1_4
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 1846 | False | dead]
; [else-branch: 1846 | True | live]
(push) ; 7
; [else-branch: 1846 | True]
(pop) ; 7
; [eval] !(p1_9 && !ret1_4)
; [eval] p1_9 && !ret1_4
(push) ; 7
; [then-branch: 1847 | !(p1_9@578@01) | live]
; [else-branch: 1847 | p1_9@578@01 | live]
(push) ; 8
; [then-branch: 1847 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1847 | p1_9@578@01]
(assert p1_9@578@01)
; [eval] !ret1_4
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1848 | True | live]
; [else-branch: 1848 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1848 | True]
; [eval] p2_9 && !ret2_4
(push) ; 8
; [then-branch: 1849 | !(p2_9@579@01) | live]
; [else-branch: 1849 | p2_9@579@01 | live]
(push) ; 9
; [then-branch: 1849 | !(p2_9@579@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 1849 | p2_9@579@01]
(assert p2_9@579@01)
; [eval] !ret2_4
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 1850 | p2_9@579@01 | dead]
; [else-branch: 1850 | !(p2_9@579@01) | live]
(push) ; 8
; [else-branch: 1850 | !(p2_9@579@01)]
(pop) ; 8
; [eval] !(p2_9 && !ret2_4)
; [eval] p2_9 && !ret2_4
(push) ; 8
; [then-branch: 1851 | !(p2_9@579@01) | live]
; [else-branch: 1851 | p2_9@579@01 | live]
(push) ; 9
; [then-branch: 1851 | !(p2_9@579@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 1851 | p2_9@579@01]
(assert p2_9@579@01)
; [eval] !ret2_4
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_9@579@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1852 | !(p2_9@579@01) | live]
; [else-branch: 1852 | p2_9@579@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1852 | !(p2_9@579@01)]
; [exec]
; assert true
; [eval] p1_9 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not p1_9@578@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1853 | p1_9@578@01 | live]
; [else-branch: 1853 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1853 | p1_9@578@01]
(assert p1_9@578@01)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert p1_9@578@01)
; [eval] p2_9 ==> true
(push) ; 9
; [then-branch: 1854 | p2_9@579@01 | dead]
; [else-branch: 1854 | !(p2_9@579@01) | live]
(push) ; 10
; [else-branch: 1854 | !(p2_9@579@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_9 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1855 | p1_9@578@01 | live]
; [else-branch: 1855 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1855 | p1_9@578@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p1_9@578@01
  (issubtype<Bool> (typeof<PyType> _res@624@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_9@578@01
  (issubtype<Bool> (typeof<PyType> _res@624@01) (as int<PyType>  PyType))))
; [eval] p2_9 ==> issubtype(typeof(_res_5), int())
(push) ; 9
; [then-branch: 1856 | p2_9@579@01 | dead]
; [else-branch: 1856 | !(p2_9@579@01) | live]
(push) ; 10
; [else-branch: 1856 | !(p2_9@579@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_9 && p2_9 ==> _res == _res_5
; [eval] p1_9 && p2_9
(push) ; 9
; [then-branch: 1857 | !(p1_9@578@01) | live]
; [else-branch: 1857 | p1_9@578@01 | live]
(push) ; 10
; [then-branch: 1857 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1857 | p1_9@578@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_9@578@01 p2_9@579@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1858 | p1_9@578@01 && p2_9@579@01 | dead]
; [else-branch: 1858 | !(p1_9@578@01 && p2_9@579@01) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 1858 | !(p1_9@578@01 && p2_9@579@01)]
(assert (not (and p1_9@578@01 p2_9@579@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not (and p1_9@578@01 p2_9@579@01)))
; [eval] p1_9 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1859 | p1_9@578@01 | live]
; [else-branch: 1859 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1859 | p1_9@578@01]
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 11
; [then-branch: 1860 | False | live]
; [else-branch: 1860 | True | live]
(push) ; 12
; [then-branch: 1860 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1860 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 13
; [then-branch: 1861 | False | live]
; [else-branch: 1861 | True | live]
(push) ; 14
; [then-branch: 1861 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 1861 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 1862 | False | live]
; [else-branch: 1862 | True | live]
(push) ; 16
; [then-branch: 1862 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 1862 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_9 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
(push) ; 9
; [then-branch: 1863 | p2_9@579@01 | dead]
; [else-branch: 1863 | !(p2_9@579@01) | live]
(push) ; 10
; [else-branch: 1863 | !(p2_9@579@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 1840 | !(p1_10@620@01)]
(assert (not p1_10@620@01))
(pop) ; 5
; [eval] !(p1_10 && !ret1_4)
; [eval] p1_10 && !ret1_4
(push) ; 5
; [then-branch: 1864 | !(p1_10@620@01) | live]
; [else-branch: 1864 | p1_10@620@01 | live]
(push) ; 6
; [then-branch: 1864 | !(p1_10@620@01)]
(assert (not p1_10@620@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1864 | p1_10@620@01]
(assert p1_10@620@01)
; [eval] !ret1_4
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not p1_10@620@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_10@620@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1865 | !(p1_10@620@01) | live]
; [else-branch: 1865 | p1_10@620@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1865 | !(p1_10@620@01)]
(assert (not p1_10@620@01))
; [eval] p2_10 && !ret2_4
(push) ; 6
; [then-branch: 1866 | !(p2_10@621@01) | live]
; [else-branch: 1866 | p2_10@621@01 | live]
(push) ; 7
; [then-branch: 1866 | !(p2_10@621@01)]
(assert (not p2_10@621@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1866 | p2_10@621@01]
(assert p2_10@621@01)
; [eval] !ret2_4
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_10@621@01 (not p2_10@621@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_10@621@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1867 | p2_10@621@01 | dead]
; [else-branch: 1867 | !(p2_10@621@01) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 1867 | !(p2_10@621@01)]
(assert (not p2_10@621@01))
(pop) ; 6
; [eval] !(p2_10 && !ret2_4)
; [eval] p2_10 && !ret2_4
(push) ; 6
; [then-branch: 1868 | !(p2_10@621@01) | live]
; [else-branch: 1868 | p2_10@621@01 | live]
(push) ; 7
; [then-branch: 1868 | !(p2_10@621@01)]
(assert (not p2_10@621@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1868 | p2_10@621@01]
(assert p2_10@621@01)
; [eval] !ret2_4
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_10@621@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_10@621@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1869 | !(p2_10@621@01) | live]
; [else-branch: 1869 | p2_10@621@01 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1869 | !(p2_10@621@01)]
(assert (not p2_10@621@01))
; [eval] p1_9 && !ret1_4
(push) ; 7
; [then-branch: 1870 | !(p1_9@578@01) | live]
; [else-branch: 1870 | p1_9@578@01 | live]
(push) ; 8
; [then-branch: 1870 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1870 | p1_9@578@01]
(assert p1_9@578@01)
; [eval] !ret1_4
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not p1_9@578@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1871 | p1_9@578@01 | live]
; [else-branch: 1871 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1871 | p1_9@578@01]
(assert p1_9@578@01)
; [exec]
; _res := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const _res@625@01 $Ref)
(assert (= _res@625@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; ret1_4 := true
; [eval] p2_9 && !ret2_4
(push) ; 8
; [then-branch: 1872 | !(p2_9@579@01) | live]
; [else-branch: 1872 | p2_9@579@01 | live]
(push) ; 9
; [then-branch: 1872 | !(p2_9@579@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 1872 | p2_9@579@01]
(assert p2_9@579@01)
; [eval] !ret2_4
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 1873 | p2_9@579@01 | dead]
; [else-branch: 1873 | !(p2_9@579@01) | live]
(push) ; 8
; [else-branch: 1873 | !(p2_9@579@01)]
(pop) ; 8
; [eval] !(p2_9 && !ret2_4)
; [eval] p2_9 && !ret2_4
(push) ; 8
; [then-branch: 1874 | !(p2_9@579@01) | live]
; [else-branch: 1874 | p2_9@579@01 | live]
(push) ; 9
; [then-branch: 1874 | !(p2_9@579@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 1874 | p2_9@579@01]
(assert p2_9@579@01)
; [eval] !ret2_4
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_9@579@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1875 | !(p2_9@579@01) | live]
; [else-branch: 1875 | p2_9@579@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1875 | !(p2_9@579@01)]
; [exec]
; assert true
; [eval] p1_9 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1876 | p1_9@578@01 | live]
; [else-branch: 1876 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1876 | p1_9@578@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_9 ==> true
(push) ; 9
; [then-branch: 1877 | p2_9@579@01 | dead]
; [else-branch: 1877 | !(p2_9@579@01) | live]
(push) ; 10
; [else-branch: 1877 | !(p2_9@579@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_9 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1878 | p1_9@578@01 | live]
; [else-branch: 1878 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1878 | p1_9@578@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p1_9@578@01
  (issubtype<Bool> (typeof<PyType> _res@625@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_9@578@01
  (issubtype<Bool> (typeof<PyType> _res@625@01) (as int<PyType>  PyType))))
; [eval] p2_9 ==> issubtype(typeof(_res_5), int())
(push) ; 9
; [then-branch: 1879 | p2_9@579@01 | dead]
; [else-branch: 1879 | !(p2_9@579@01) | live]
(push) ; 10
; [else-branch: 1879 | !(p2_9@579@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_9 && p2_9 ==> _res == _res_5
; [eval] p1_9 && p2_9
(push) ; 9
; [then-branch: 1880 | !(p1_9@578@01) | live]
; [else-branch: 1880 | p1_9@578@01 | live]
(push) ; 10
; [then-branch: 1880 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1880 | p1_9@578@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_9@578@01 p2_9@579@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1881 | p1_9@578@01 && p2_9@579@01 | dead]
; [else-branch: 1881 | !(p1_9@578@01 && p2_9@579@01) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 1881 | !(p1_9@578@01 && p2_9@579@01)]
(assert (not (and p1_9@578@01 p2_9@579@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not (and p1_9@578@01 p2_9@579@01)))
; [eval] p1_9 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_9@578@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1882 | p1_9@578@01 | live]
; [else-branch: 1882 | !(p1_9@578@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1882 | p1_9@578@01]
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 11
; [then-branch: 1883 | False | live]
; [else-branch: 1883 | True | live]
(push) ; 12
; [then-branch: 1883 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1883 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 13
; [then-branch: 1884 | False | live]
; [else-branch: 1884 | True | live]
(push) ; 14
; [then-branch: 1884 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 1884 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 1885 | False | live]
; [else-branch: 1885 | True | live]
(push) ; 16
; [then-branch: 1885 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 1885 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_9 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))
(push) ; 9
; [then-branch: 1886 | p2_9@579@01 | dead]
; [else-branch: 1886 | !(p2_9@579@01) | live]
(push) ; 10
; [else-branch: 1886 | !(p2_9@579@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; [eval] !(p1_9 && !ret1_4)
; [eval] p1_9 && !ret1_4
(push) ; 7
; [then-branch: 1887 | !(p1_9@578@01) | live]
; [else-branch: 1887 | p1_9@578@01 | live]
(push) ; 8
; [then-branch: 1887 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1887 | p1_9@578@01]
(assert p1_9@578@01)
; [eval] !ret1_4
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_9@578@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1888 | !(p1_9@578@01) | dead]
; [else-branch: 1888 | p1_9@578@01 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 1888 | p1_9@578@01]
(assert p1_9@578@01)
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 1865 | p1_10@620@01]
(assert p1_10@620@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 1830 | p2_9@579@01]
(assert p2_9@579@01)
(pop) ; 4
(pop) ; 3
; [eval] !(p1_9 && !ret1_4)
; [eval] p1_9 && !ret1_4
(push) ; 3
; [then-branch: 1889 | !(p1_9@578@01) | live]
; [else-branch: 1889 | p1_9@578@01 | live]
(push) ; 4
; [then-branch: 1889 | !(p1_9@578@01)]
(assert (not p1_9@578@01))
(pop) ; 4
(push) ; 4
; [else-branch: 1889 | p1_9@578@01]
(assert p1_9@578@01)
; [eval] !ret1_4
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not p1_9@578@01))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1890 | !(p1_9@578@01) | dead]
; [else-branch: 1890 | p1_9@578@01 | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 1890 | p1_9@578@01]
(assert p1_9@578@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- int_unchanged_low ----------
(declare-const p1_11@626@01 Bool)
(declare-const p2_11@627@01 Bool)
(declare-const _cthread_164@628@01 $Ref)
(declare-const _cthread_164_0@629@01 $Ref)
(declare-const _caller_measures_164@630@01 Seq<Measure$>)
(declare-const _caller_measures_164_0@631@01 Seq<Measure$>)
(declare-const _residue_164@632@01 $Perm)
(declare-const _residue_164_0@633@01 $Perm)
(declare-const secret_5@634@01 $Ref)
(declare-const secret_5_0@635@01 $Ref)
(declare-const x_0@636@01 $Ref)
(declare-const x_0_0@637@01 $Ref)
(declare-const _current_wait_level_164@638@01 $Perm)
(declare-const _current_wait_level_164_0@639@01 $Perm)
(declare-const _res@640@01 $Ref)
(declare-const _res_6@641@01 $Ref)
(declare-const p1_11@642@01 Bool)
(declare-const p2_11@643@01 Bool)
(declare-const _cthread_164@644@01 $Ref)
(declare-const _cthread_164_0@645@01 $Ref)
(declare-const _caller_measures_164@646@01 Seq<Measure$>)
(declare-const _caller_measures_164_0@647@01 Seq<Measure$>)
(declare-const _residue_164@648@01 $Perm)
(declare-const _residue_164_0@649@01 $Perm)
(declare-const secret_5@650@01 $Ref)
(declare-const secret_5_0@651@01 $Ref)
(declare-const x_0@652@01 $Ref)
(declare-const x_0_0@653@01 $Ref)
(declare-const _current_wait_level_164@654@01 $Perm)
(declare-const _current_wait_level_164_0@655@01 $Perm)
(declare-const _res@656@01 $Ref)
(declare-const _res_6@657@01 $Ref)
(push) ; 1
(declare-const $t@658@01 $Snap)
(assert (= $t@658@01 ($Snap.combine ($Snap.first $t@658@01) ($Snap.second $t@658@01))))
(assert (= ($Snap.first $t@658@01) $Snap.unit))
; [eval] p1_11 ==> _cthread_164 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_11@642@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_11@642@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1891 | p1_11@642@01 | live]
; [else-branch: 1891 | !(p1_11@642@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1891 | p1_11@642@01]
(assert p1_11@642@01)
; [eval] _cthread_164 != null
(pop) ; 3
(push) ; 3
; [else-branch: 1891 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_11@642@01) p1_11@642@01))
(assert (=> p1_11@642@01 (not (= _cthread_164@644@01 $Ref.null))))
(assert (=
  ($Snap.second $t@658@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@658@01))
    ($Snap.second ($Snap.second $t@658@01)))))
(assert (= ($Snap.first ($Snap.second $t@658@01)) $Snap.unit))
; [eval] p2_11 ==> _cthread_164_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_11@643@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_11@643@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1892 | p2_11@643@01 | live]
; [else-branch: 1892 | !(p2_11@643@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1892 | p2_11@643@01]
(assert p2_11@643@01)
; [eval] _cthread_164_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 1892 | !(p2_11@643@01)]
(assert (not p2_11@643@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_11@643@01) p2_11@643@01))
(assert (=> p2_11@643@01 (not (= _cthread_164_0@645@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@658@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@658@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@658@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@658@01))) $Snap.unit))
; [eval] p1_11 ==> issubtype(typeof(_cthread_164), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_11@642@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_11@642@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1893 | p1_11@642@01 | live]
; [else-branch: 1893 | !(p1_11@642@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1893 | p1_11@642@01]
(assert p1_11@642@01)
; [eval] issubtype(typeof(_cthread_164), Thread_0())
; [eval] typeof(_cthread_164)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 1893 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_11@642@01
  (issubtype<Bool> (typeof<PyType> _cthread_164@644@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@658@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@658@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@658@01))))
  $Snap.unit))
; [eval] p2_11 ==> issubtype(typeof(_cthread_164_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_11@643@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_11@643@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1894 | p2_11@643@01 | live]
; [else-branch: 1894 | !(p2_11@643@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1894 | p2_11@643@01]
(assert p2_11@643@01)
; [eval] issubtype(typeof(_cthread_164_0), Thread_0())
; [eval] typeof(_cthread_164_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 1894 | !(p2_11@643@01)]
(assert (not p2_11@643@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_11@643@01
  (issubtype<Bool> (typeof<PyType> _cthread_164_0@645@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01)))))
  $Snap.unit))
; [eval] p1_11 ==> issubtype(typeof(secret_5), int())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_11@642@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_11@642@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1895 | p1_11@642@01 | live]
; [else-branch: 1895 | !(p1_11@642@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1895 | p1_11@642@01]
(assert p1_11@642@01)
; [eval] issubtype(typeof(secret_5), int())
; [eval] typeof(secret_5)
; [eval] int()
(pop) ; 3
(push) ; 3
; [else-branch: 1895 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_11@642@01
  (issubtype<Bool> (typeof<PyType> secret_5@650@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01))))))
  $Snap.unit))
; [eval] p2_11 ==> issubtype(typeof(secret_5_0), int())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_11@643@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_11@643@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1896 | p2_11@643@01 | live]
; [else-branch: 1896 | !(p2_11@643@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1896 | p2_11@643@01]
(assert p2_11@643@01)
; [eval] issubtype(typeof(secret_5_0), int())
; [eval] typeof(secret_5_0)
; [eval] int()
(pop) ; 3
(push) ; 3
; [else-branch: 1896 | !(p2_11@643@01)]
(assert (not p2_11@643@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_11@643@01
  (issubtype<Bool> (typeof<PyType> secret_5_0@651@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01)))))))
  $Snap.unit))
; [eval] p1_11 ==> issubtype(typeof(x_0), int())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_11@642@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_11@642@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1897 | p1_11@642@01 | live]
; [else-branch: 1897 | !(p1_11@642@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1897 | p1_11@642@01]
(assert p1_11@642@01)
; [eval] issubtype(typeof(x_0), int())
; [eval] typeof(x_0)
; [eval] int()
(pop) ; 3
(push) ; 3
; [else-branch: 1897 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_11@642@01
  (issubtype<Bool> (typeof<PyType> x_0@652@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01))))))))
  $Snap.unit))
; [eval] p2_11 ==> issubtype(typeof(x_0_0), int())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_11@643@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_11@643@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1898 | p2_11@643@01 | live]
; [else-branch: 1898 | !(p2_11@643@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1898 | p2_11@643@01]
(assert p2_11@643@01)
; [eval] issubtype(typeof(x_0_0), int())
; [eval] typeof(x_0_0)
; [eval] int()
(pop) ; 3
(push) ; 3
; [else-branch: 1898 | !(p2_11@643@01)]
(assert (not p2_11@643@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_11@643@01
  (issubtype<Bool> (typeof<PyType> x_0_0@653@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01)))))))))
  $Snap.unit))
; [eval] p1_11 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_11@642@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_11@642@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1899 | p1_11@642@01 | live]
; [else-branch: 1899 | !(p1_11@642@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1899 | p1_11@642@01]
(assert p1_11@642@01)
(pop) ; 3
(push) ; 3
; [else-branch: 1899 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@658@01)))))))))
  $Snap.unit))
; [eval] p2_11 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_11@643@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_11@643@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1900 | p2_11@643@01 | live]
; [else-branch: 1900 | !(p2_11@643@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1900 | p2_11@643@01]
(assert p2_11@643@01)
(pop) ; 3
(push) ; 3
; [else-branch: 1900 | !(p2_11@643@01)]
(assert (not p2_11@643@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@659@01 $Snap)
(assert (= $t@659@01 ($Snap.combine ($Snap.first $t@659@01) ($Snap.second $t@659@01))))
(assert (= ($Snap.first $t@659@01) $Snap.unit))
; [eval] p1_11 ==> (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_164) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_164) && _residue_164 <= _current_wait_level_164)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_11@642@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_11@642@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1901 | p1_11@642@01 | live]
; [else-branch: 1901 | !(p1_11@642@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1901 | p1_11@642@01]
(assert p1_11@642@01)
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_164) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_164) && _residue_164 <= _current_wait_level_164)
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_164)
(push) ; 5
; [then-branch: 1902 | False | live]
; [else-branch: 1902 | True | live]
(push) ; 6
; [then-branch: 1902 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 1902 | True]
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_164)
(push) ; 7
; [then-branch: 1903 | False | live]
; [else-branch: 1903 | True | live]
(push) ; 8
; [then-branch: 1903 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1903 | True]
; [eval] _residue_164 <= _current_wait_level_164
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 1901 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p1_11@642@01 (<= _residue_164@648@01 _current_wait_level_164@654@01)))
(assert (=
  ($Snap.second $t@659@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@659@01))
    ($Snap.second ($Snap.second $t@659@01)))))
(assert (= ($Snap.first ($Snap.second $t@659@01)) $Snap.unit))
; [eval] p2_11 ==> (forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: Level(_r_17) <= _current_wait_level_164_0) && ((forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: Level(_r_17) <= _current_wait_level_164_0) && _residue_164_0 <= _current_wait_level_164_0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_11@643@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_11@643@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1904 | p2_11@643@01 | live]
; [else-branch: 1904 | !(p2_11@643@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1904 | p2_11@643@01]
(assert p2_11@643@01)
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: Level(_r_17) <= _current_wait_level_164_0) && ((forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: Level(_r_17) <= _current_wait_level_164_0) && _residue_164_0 <= _current_wait_level_164_0)
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: Level(_r_17) <= _current_wait_level_164_0)
(push) ; 5
; [then-branch: 1905 | False | live]
; [else-branch: 1905 | True | live]
(push) ; 6
; [then-branch: 1905 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 1905 | True]
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: Level(_r_17) <= _current_wait_level_164_0)
(push) ; 7
; [then-branch: 1906 | False | live]
; [else-branch: 1906 | True | live]
(push) ; 8
; [then-branch: 1906 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1906 | True]
; [eval] _residue_164_0 <= _current_wait_level_164_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 1904 | !(p2_11@643@01)]
(assert (not p2_11@643@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p2_11@643@01 (<= _residue_164_0@649@01 _current_wait_level_164_0@655@01)))
(assert (=
  ($Snap.second ($Snap.second $t@659@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@659@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@659@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@659@01))) $Snap.unit))
; [eval] p1_11 ==> issubtype(typeof(_res), int())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_11@642@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_11@642@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1907 | p1_11@642@01 | live]
; [else-branch: 1907 | !(p1_11@642@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1907 | p1_11@642@01]
(assert p1_11@642@01)
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 1907 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_11@642@01
  (issubtype<Bool> (typeof<PyType> _res@656@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@659@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@659@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@659@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@659@01))))
  $Snap.unit))
; [eval] p2_11 ==> issubtype(typeof(_res_6), int())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_11@643@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_11@643@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1908 | p2_11@643@01 | live]
; [else-branch: 1908 | !(p2_11@643@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1908 | p2_11@643@01]
(assert p2_11@643@01)
; [eval] issubtype(typeof(_res_6), int())
; [eval] typeof(_res_6)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 1908 | !(p2_11@643@01)]
(assert (not p2_11@643@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_11@643@01
  (issubtype<Bool> (typeof<PyType> _res_6@657@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@659@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@659@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@659@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@659@01)))))
  $Snap.unit))
; [eval] (p1_11 && p2_11 ==> x_0 == x_0_0) ==> p1_11 && p2_11 ==> _res == _res_6
; [eval] p1_11 && p2_11 ==> x_0 == x_0_0
; [eval] p1_11 && p2_11
(push) ; 3
; [then-branch: 1909 | !(p1_11@642@01) | live]
; [else-branch: 1909 | p1_11@642@01 | live]
(push) ; 4
; [then-branch: 1909 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
(pop) ; 4
(push) ; 4
; [else-branch: 1909 | p1_11@642@01]
(assert p1_11@642@01)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1_11@642@01 (not p1_11@642@01)))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (and p1_11@642@01 p2_11@643@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and p1_11@642@01 p2_11@643@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1910 | p1_11@642@01 && p2_11@643@01 | live]
; [else-branch: 1910 | !(p1_11@642@01 && p2_11@643@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1910 | p1_11@642@01 && p2_11@643@01]
(assert (and p1_11@642@01 p2_11@643@01))
; [eval] x_0 == x_0_0
(pop) ; 4
(push) ; 4
; [else-branch: 1910 | !(p1_11@642@01 && p2_11@643@01)]
(assert (not (and p1_11@642@01 p2_11@643@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (and p1_11@642@01 p2_11@643@01)) (and p1_11@642@01 p2_11@643@01)))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1911 | p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01 | live]
; [else-branch: 1911 | !(p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1911 | p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01]
(assert (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01)))
; [eval] p1_11 && p2_11 ==> _res == _res_6
; [eval] p1_11 && p2_11
(push) ; 5
; [then-branch: 1912 | !(p1_11@642@01) | live]
; [else-branch: 1912 | p1_11@642@01 | live]
(push) ; 6
; [then-branch: 1912 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1912 | p1_11@642@01]
(assert p1_11@642@01)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (and p1_11@642@01 p2_11@643@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and p1_11@642@01 p2_11@643@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1913 | p1_11@642@01 && p2_11@643@01 | live]
; [else-branch: 1913 | !(p1_11@642@01 && p2_11@643@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1913 | p1_11@642@01 && p2_11@643@01]
(assert (and p1_11@642@01 p2_11@643@01))
; [eval] _res == _res_6
(pop) ; 6
(push) ; 6
; [else-branch: 1913 | !(p1_11@642@01 && p2_11@643@01)]
(assert (not (and p1_11@642@01 p2_11@643@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 1911 | !(p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01)]
(assert (not (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))
    (and p1_11@642@01 p2_11@643@01))
  (= x_0@652@01 x_0_0@653@01)))
; Joined path conditions
(assert (or
  (not (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01)))
  (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))))
(assert (=>
  (and
    (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))
    (and p1_11@642@01 p2_11@643@01))
  (= _res@656@01 _res_6@657@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@659@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@659@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@659@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@659@01))))))
  $Snap.unit))
; [eval] p1_11 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_11@642@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_11@642@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1914 | p1_11@642@01 | live]
; [else-branch: 1914 | !(p1_11@642@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1914 | p1_11@642@01]
(assert p1_11@642@01)
(pop) ; 4
(push) ; 4
; [else-branch: 1914 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@659@01))))))
  $Snap.unit))
; [eval] p2_11 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_11@643@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_11@643@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1915 | p2_11@643@01 | live]
; [else-branch: 1915 | !(p2_11@643@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1915 | p2_11@643@01]
(assert p2_11@643@01)
(pop) ; 4
(push) ; 4
; [else-branch: 1915 | !(p2_11@643@01)]
(assert (not p2_11@643@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
(push) ; 2
; [exec]
; var ret1_5: Bool
(declare-const ret1_5@660@01 Bool)
; [exec]
; var ret2_5: Bool
(declare-const ret2_5@661@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@662@01 $Ref)
; [exec]
; var _err_6: Ref
(declare-const _err_6@663@01 $Ref)
; [exec]
; var secret_17: Ref
(declare-const secret_17@664@01 $Ref)
; [exec]
; var secret_17_0: Ref
(declare-const secret_17_0@665@01 $Ref)
; [exec]
; var x_4: Ref
(declare-const x_4@666@01 $Ref)
; [exec]
; var x_4_0: Ref
(declare-const x_4_0@667@01 $Ref)
; [exec]
; var _cwl_164: Perm
(declare-const _cwl_164@668@01 $Perm)
; [exec]
; var _cwl_164_0: Perm
(declare-const _cwl_164_0@669@01 $Perm)
; [exec]
; var _method_measures_164: Seq[Measure$]
(declare-const _method_measures_164@670@01 Seq<Measure$>)
; [exec]
; var _method_measures_164_0: Seq[Measure$]
(declare-const _method_measures_164_0@671@01 Seq<Measure$>)
; [exec]
; var p1_12: Bool
(declare-const p1_12@672@01 Bool)
; [exec]
; var p2_12: Bool
(declare-const p2_12@673@01 Bool)
; [exec]
; var p3_5: Bool
(declare-const p3_5@674@01 Bool)
; [exec]
; var p4_5: Bool
(declare-const p4_5@675@01 Bool)
; [exec]
; inhale p1_11
(declare-const $t@676@01 $Snap)
(assert (= $t@676@01 $Snap.unit))
(assert p1_11@642@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ret1_5 := false
; [exec]
; ret2_5 := false
; [eval] p1_11 && !ret1_5
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1916 | !(p1_11@642@01) | live]
; [else-branch: 1916 | p1_11@642@01 | live]
(push) ; 4
; [then-branch: 1916 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
(pop) ; 4
(push) ; 4
; [else-branch: 1916 | p1_11@642@01]
; [eval] !ret1_5
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1_11@642@01 (not p1_11@642@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_11@642@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1917 | p1_11@642@01 | live]
; [else-branch: 1917 | !(p1_11@642@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1917 | p1_11@642@01]
; [exec]
; _method_measures_164 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; secret_17 := secret_5
; [exec]
; x_4 := x_0
; [eval] p2_11 && !ret2_5
(push) ; 4
; [then-branch: 1918 | !(p2_11@643@01) | live]
; [else-branch: 1918 | p2_11@643@01 | live]
(push) ; 5
; [then-branch: 1918 | !(p2_11@643@01)]
(assert (not p2_11@643@01))
(pop) ; 5
(push) ; 5
; [else-branch: 1918 | p2_11@643@01]
(assert p2_11@643@01)
; [eval] !ret2_5
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or p2_11@643@01 (not p2_11@643@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_11@643@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_11@643@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1919 | p2_11@643@01 | live]
; [else-branch: 1919 | !(p2_11@643@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1919 | p2_11@643@01]
(assert p2_11@643@01)
; [exec]
; _method_measures_164_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res_6 := null
; [exec]
; _err_6 := null
; [exec]
; secret_17_0 := secret_5_0
; [exec]
; x_4_0 := x_0_0
; [exec]
; p1_12 := p1_11 &&
;   (!ret1_5 && int___eq__(secret_17, __prim__int___box__(0)))
; [eval] p1_11 && (!ret1_5 && int___eq__(secret_17, __prim__int___box__(0)))
(push) ; 5
; [then-branch: 1920 | !(p1_11@642@01) | live]
; [else-branch: 1920 | p1_11@642@01 | live]
(push) ; 6
; [then-branch: 1920 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1920 | p1_11@642@01]
; [eval] !ret1_5
(push) ; 7
; [then-branch: 1921 | False | live]
; [else-branch: 1921 | True | live]
(push) ; 8
; [then-branch: 1921 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1921 | True]
; [eval] int___eq__(secret_17, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_5@650@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_5@650@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_5@650@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_5@650@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_5@650@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 0)
  (issubtype<Bool> (typeof<PyType> secret_5@650@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_5@650@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_11@642@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> secret_5@650@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_5@650@01 (__prim__int___box__ $Snap.unit 0)))))
(declare-const p1_12@677@01 Bool)
(assert (=
  p1_12@677@01
  (and
    p1_11@642@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) secret_5@650@01 (__prim__int___box__ $Snap.unit 0)))))
; [exec]
; p2_12 := p2_11 &&
;   (!ret2_5 && int___eq__(secret_17_0, __prim__int___box__(0)))
; [eval] p2_11 && (!ret2_5 && int___eq__(secret_17_0, __prim__int___box__(0)))
(push) ; 5
; [then-branch: 1922 | !(p2_11@643@01) | live]
; [else-branch: 1922 | p2_11@643@01 | live]
(push) ; 6
; [then-branch: 1922 | !(p2_11@643@01)]
(assert (not p2_11@643@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1922 | p2_11@643@01]
; [eval] !ret2_5
(push) ; 7
; [then-branch: 1923 | False | live]
; [else-branch: 1923 | True | live]
(push) ; 8
; [then-branch: 1923 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1923 | True]
; [eval] int___eq__(secret_17_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_5_0@651@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_5_0@651@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_5_0@651@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_5_0@651@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_5_0@651@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 0)
  (issubtype<Bool> (typeof<PyType> secret_5_0@651@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_5_0@651@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_11@643@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> secret_5_0@651@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_5_0@651@01 (__prim__int___box__ $Snap.unit 0)))))
(declare-const p2_12@678@01 Bool)
(assert (=
  p2_12@678@01
  (and
    p2_11@643@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) secret_5_0@651@01 (__prim__int___box__ $Snap.unit 0)))))
; [exec]
; p3_5 := p1_11 &&
;   (!ret1_5 && !int___eq__(secret_17, __prim__int___box__(0)))
; [eval] p1_11 && (!ret1_5 && !int___eq__(secret_17, __prim__int___box__(0)))
(push) ; 5
; [then-branch: 1924 | !(p1_11@642@01) | live]
; [else-branch: 1924 | p1_11@642@01 | live]
(push) ; 6
; [then-branch: 1924 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1924 | p1_11@642@01]
; [eval] !ret1_5
(push) ; 7
; [then-branch: 1925 | False | live]
; [else-branch: 1925 | True | live]
(push) ; 8
; [then-branch: 1925 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1925 | True]
; [eval] !int___eq__(secret_17, __prim__int___box__(0))
; [eval] int___eq__(secret_17, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_5@650@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_5@650@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_5@650@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_5@650@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_5@650@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 0)
  (issubtype<Bool> (typeof<PyType> secret_5@650@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_5@650@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p3_5@679@01 Bool)
(assert (=
  p3_5@679@01
  (and
    p1_11@642@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) secret_5@650@01 (__prim__int___box__ $Snap.unit 0))))))
; [exec]
; p4_5 := p2_11 &&
;   (!ret2_5 && !int___eq__(secret_17_0, __prim__int___box__(0)))
; [eval] p2_11 && (!ret2_5 && !int___eq__(secret_17_0, __prim__int___box__(0)))
(push) ; 5
; [then-branch: 1926 | !(p2_11@643@01) | live]
; [else-branch: 1926 | p2_11@643@01 | live]
(push) ; 6
; [then-branch: 1926 | !(p2_11@643@01)]
(assert (not p2_11@643@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1926 | p2_11@643@01]
; [eval] !ret2_5
(push) ; 7
; [then-branch: 1927 | False | live]
; [else-branch: 1927 | True | live]
(push) ; 8
; [then-branch: 1927 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1927 | True]
; [eval] !int___eq__(secret_17_0, __prim__int___box__(0))
; [eval] int___eq__(secret_17_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_5_0@651@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_5_0@651@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_5_0@651@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_5_0@651@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_5_0@651@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 0)
  (issubtype<Bool> (typeof<PyType> secret_5_0@651@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_5_0@651@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p4_5@680@01 Bool)
(assert (=
  p4_5@680@01
  (and
    p2_11@643@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) secret_5_0@651@01 (__prim__int___box__ $Snap.unit 0))))))
; [eval] p1_12 && !ret1_5
(push) ; 5
; [then-branch: 1928 | !(p1_12@677@01) | live]
; [else-branch: 1928 | p1_12@677@01 | live]
(push) ; 6
; [then-branch: 1928 | !(p1_12@677@01)]
(assert (not p1_12@677@01))
(pop) ; 6
(push) ; 6
; [else-branch: 1928 | p1_12@677@01]
(assert p1_12@677@01)
; [eval] !ret1_5
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_12@677@01 (not p1_12@677@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_12@677@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not p1_12@677@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1929 | p1_12@677@01 | live]
; [else-branch: 1929 | !(p1_12@677@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1929 | p1_12@677@01]
(assert p1_12@677@01)
; [exec]
; _res := __prim__int___box__(int___add__(int___unbox__(x_4), int___unbox__(secret_17)))
; [eval] __prim__int___box__(int___add__(int___unbox__(x_4), int___unbox__(secret_17)))
; [eval] int___add__(int___unbox__(x_4), int___unbox__(secret_17))
; [eval] int___unbox__(x_4)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> x_0@652@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_0@652@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit x_0@652@01))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_0@652@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit x_0@652@01)))
; [eval] int___unbox__(secret_17)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> secret_5@650@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_5@650@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit secret_5@650@01))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_5@650@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit secret_5@650@01)))
(push) ; 6
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_0@652@01) (int___unbox__ $Snap.unit secret_5@650@01)))
(pop) ; 6
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_0@652@01) (int___unbox__ $Snap.unit secret_5@650@01)))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_0@652@01) (int___unbox__ $Snap.unit secret_5@650@01))))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_0@652@01) (int___unbox__ $Snap.unit secret_5@650@01))))
(declare-const _res@681@01 $Ref)
(assert (=
  _res@681@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_0@652@01) (int___unbox__ $Snap.unit secret_5@650@01)))))
; [exec]
; ret1_5 := true
; [eval] p2_12 && !ret2_5
(push) ; 6
; [then-branch: 1930 | !(p2_12@678@01) | live]
; [else-branch: 1930 | p2_12@678@01 | live]
(push) ; 7
; [then-branch: 1930 | !(p2_12@678@01)]
(assert (not p2_12@678@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1930 | p2_12@678@01]
(assert p2_12@678@01)
; [eval] !ret2_5
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_12@678@01 (not p2_12@678@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_12@678@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not p2_12@678@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1931 | p2_12@678@01 | live]
; [else-branch: 1931 | !(p2_12@678@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1931 | p2_12@678@01]
(assert p2_12@678@01)
; [exec]
; _res_6 := __prim__int___box__(int___add__(int___unbox__(x_4_0), int___unbox__(secret_17_0)))
; [eval] __prim__int___box__(int___add__(int___unbox__(x_4_0), int___unbox__(secret_17_0)))
; [eval] int___add__(int___unbox__(x_4_0), int___unbox__(secret_17_0))
; [eval] int___unbox__(x_4_0)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> x_0_0@653@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_0_0@653@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit x_0_0@653@01))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_0_0@653@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit x_0_0@653@01)))
; [eval] int___unbox__(secret_17_0)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> secret_5_0@651@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_5_0@651@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit secret_5_0@651@01))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_5_0@651@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit secret_5_0@651@01)))
(push) ; 7
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_0_0@653@01) (int___unbox__ $Snap.unit secret_5_0@651@01)))
(pop) ; 7
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_0_0@653@01) (int___unbox__ $Snap.unit secret_5_0@651@01)))
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_0_0@653@01) (int___unbox__ $Snap.unit secret_5_0@651@01))))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_0_0@653@01) (int___unbox__ $Snap.unit secret_5_0@651@01))))
(declare-const _res_6@682@01 $Ref)
(assert (=
  _res_6@682@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_0_0@653@01) (int___unbox__ $Snap.unit secret_5_0@651@01)))))
; [exec]
; ret2_5 := true
; [eval] p1_11 && !ret1_5
(push) ; 7
; [then-branch: 1932 | !(p1_11@642@01) | live]
; [else-branch: 1932 | p1_11@642@01 | live]
(push) ; 8
; [then-branch: 1932 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1932 | p1_11@642@01]
; [eval] !ret1_5
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 1933 | False | dead]
; [else-branch: 1933 | True | live]
(push) ; 7
; [else-branch: 1933 | True]
(pop) ; 7
; [eval] !(p1_11 && !ret1_5)
; [eval] p1_11 && !ret1_5
(push) ; 7
; [then-branch: 1934 | !(p1_11@642@01) | live]
; [else-branch: 1934 | p1_11@642@01 | live]
(push) ; 8
; [then-branch: 1934 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1934 | p1_11@642@01]
; [eval] !ret1_5
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1935 | True | live]
; [else-branch: 1935 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1935 | True]
; [eval] p2_11 && !ret2_5
(push) ; 8
; [then-branch: 1936 | !(p2_11@643@01) | live]
; [else-branch: 1936 | p2_11@643@01 | live]
(push) ; 9
; [then-branch: 1936 | !(p2_11@643@01)]
(assert (not p2_11@643@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1936 | p2_11@643@01]
; [eval] !ret2_5
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 1937 | False | dead]
; [else-branch: 1937 | True | live]
(push) ; 8
; [else-branch: 1937 | True]
(pop) ; 8
; [eval] !(p2_11 && !ret2_5)
; [eval] p2_11 && !ret2_5
(push) ; 8
; [then-branch: 1938 | !(p2_11@643@01) | live]
; [else-branch: 1938 | p2_11@643@01 | live]
(push) ; 9
; [then-branch: 1938 | !(p2_11@643@01)]
(assert (not p2_11@643@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1938 | p2_11@643@01]
; [eval] !ret2_5
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1939 | True | live]
; [else-branch: 1939 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1939 | True]
; [exec]
; assert true
; [eval] p1_11 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_11@642@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1940 | p1_11@642@01 | live]
; [else-branch: 1940 | !(p1_11@642@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1940 | p1_11@642@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_11 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_11@643@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1941 | p2_11@643@01 | live]
; [else-branch: 1941 | !(p2_11@643@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1941 | p2_11@643@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_11 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_11@642@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1942 | p1_11@642@01 | live]
; [else-branch: 1942 | !(p1_11@642@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1942 | p1_11@642@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p1_11@642@01
  (issubtype<Bool> (typeof<PyType> _res@681@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_11@642@01
  (issubtype<Bool> (typeof<PyType> _res@681@01) (as int<PyType>  PyType))))
; [eval] p2_11 ==> issubtype(typeof(_res_6), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_11@643@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1943 | p2_11@643@01 | live]
; [else-branch: 1943 | !(p2_11@643@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1943 | p2_11@643@01]
; [eval] issubtype(typeof(_res_6), int())
; [eval] typeof(_res_6)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p2_11@643@01
  (issubtype<Bool> (typeof<PyType> _res_6@682@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_11@643@01
  (issubtype<Bool> (typeof<PyType> _res_6@682@01) (as int<PyType>  PyType))))
; [eval] (p1_11 && p2_11 ==> x_0 == x_0_0) ==> p1_11 && p2_11 ==> _res == _res_6
; [eval] p1_11 && p2_11 ==> x_0 == x_0_0
; [eval] p1_11 && p2_11
(push) ; 9
; [then-branch: 1944 | !(p1_11@642@01) | live]
; [else-branch: 1944 | p1_11@642@01 | live]
(push) ; 10
; [then-branch: 1944 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1944 | p1_11@642@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_11@642@01 p2_11@643@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_11@642@01 p2_11@643@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1945 | p1_11@642@01 && p2_11@643@01 | live]
; [else-branch: 1945 | !(p1_11@642@01 && p2_11@643@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1945 | p1_11@642@01 && p2_11@643@01]
(assert (and p1_11@642@01 p2_11@643@01))
; [eval] x_0 == x_0_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and p1_11@642@01 p2_11@643@01))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1946 | p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01 | live]
; [else-branch: 1946 | !(p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1946 | p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01]
(assert (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01)))
; [eval] p1_11 && p2_11 ==> _res == _res_6
; [eval] p1_11 && p2_11
(push) ; 11
; [then-branch: 1947 | !(p1_11@642@01) | live]
; [else-branch: 1947 | p1_11@642@01 | live]
(push) ; 12
; [then-branch: 1947 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
(pop) ; 12
(push) ; 12
; [else-branch: 1947 | p1_11@642@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (and p1_11@642@01 p2_11@643@01))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and p1_11@642@01 p2_11@643@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1948 | p1_11@642@01 && p2_11@643@01 | live]
; [else-branch: 1948 | !(p1_11@642@01 && p2_11@643@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 1948 | p1_11@642@01 && p2_11@643@01]
(assert (and p1_11@642@01 p2_11@643@01))
; [eval] _res == _res_6
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (and p1_11@642@01 p2_11@643@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1946 | !(p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01)]
(assert (not (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))
  (and
    (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))
    p1_11@642@01
    p2_11@643@01)))
; Joined path conditions
(assert (or
  (not (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01)))
  (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))))
(push) ; 9
(assert (not (=>
  (and
    (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))
    (and p1_11@642@01 p2_11@643@01))
  (= _res@681@01 _res_6@682@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))
    (and p1_11@642@01 p2_11@643@01))
  (= _res@681@01 _res_6@682@01)))
; [eval] p1_11 ==> (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_11@642@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not p1_11@642@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1949 | p1_11@642@01 | live]
; [else-branch: 1949 | !(p1_11@642@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1949 | p1_11@642@01]
(assert p1_11@642@01)
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false)
(push) ; 11
; [then-branch: 1950 | False | live]
; [else-branch: 1950 | True | live]
(push) ; 12
; [then-branch: 1950 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1950 | True]
; [eval] (forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false)
(push) ; 13
; [then-branch: 1951 | False | live]
; [else-branch: 1951 | True | live]
(push) ; 14
; [then-branch: 1951 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 1951 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 1952 | False | live]
; [else-branch: 1952 | True | live]
(push) ; 16
; [then-branch: 1952 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 1952 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert p1_11@642@01)
; [eval] p2_11 ==> (forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_11@643@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not p2_11@643@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1953 | p2_11@643@01 | live]
; [else-branch: 1953 | !(p2_11@643@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1953 | p2_11@643@01]
(assert p2_11@643@01)
; [eval] (forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false)
(push) ; 11
; [then-branch: 1954 | False | live]
; [else-branch: 1954 | True | live]
(push) ; 12
; [then-branch: 1954 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1954 | True]
; [eval] (forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false)
(push) ; 13
; [then-branch: 1955 | False | live]
; [else-branch: 1955 | True | live]
(push) ; 14
; [then-branch: 1955 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 1955 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false)
(push) ; 15
; [then-branch: 1956 | False | live]
; [else-branch: 1956 | True | live]
(push) ; 16
; [then-branch: 1956 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 1956 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert p2_11@643@01)
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 1931 | !(p2_12@678@01)]
(assert (not p2_12@678@01))
(pop) ; 6
; [eval] !(p2_12 && !ret2_5)
; [eval] p2_12 && !ret2_5
(push) ; 6
; [then-branch: 1957 | !(p2_12@678@01) | live]
; [else-branch: 1957 | p2_12@678@01 | live]
(push) ; 7
; [then-branch: 1957 | !(p2_12@678@01)]
(assert (not p2_12@678@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1957 | p2_12@678@01]
(assert p2_12@678@01)
; [eval] !ret2_5
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_12@678@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_12@678@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1958 | !(p2_12@678@01) | live]
; [else-branch: 1958 | p2_12@678@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1958 | !(p2_12@678@01)]
(assert (not p2_12@678@01))
; [eval] p1_11 && !ret1_5
(push) ; 7
; [then-branch: 1959 | !(p1_11@642@01) | live]
; [else-branch: 1959 | p1_11@642@01 | live]
(push) ; 8
; [then-branch: 1959 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1959 | p1_11@642@01]
(assert p1_11@642@01)
; [eval] !ret1_5
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 1960 | False | dead]
; [else-branch: 1960 | True | live]
(push) ; 7
; [else-branch: 1960 | True]
(pop) ; 7
; [eval] !(p1_11 && !ret1_5)
; [eval] p1_11 && !ret1_5
(push) ; 7
; [then-branch: 1961 | !(p1_11@642@01) | live]
; [else-branch: 1961 | p1_11@642@01 | live]
(push) ; 8
; [then-branch: 1961 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1961 | p1_11@642@01]
(assert p1_11@642@01)
; [eval] !ret1_5
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1962 | True | live]
; [else-branch: 1962 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1962 | True]
; [eval] p2_11 && !ret2_5
(push) ; 8
; [then-branch: 1963 | !(p2_11@643@01) | live]
; [else-branch: 1963 | p2_11@643@01 | live]
(push) ; 9
; [then-branch: 1963 | !(p2_11@643@01)]
(assert (not p2_11@643@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1963 | p2_11@643@01]
(assert p2_11@643@01)
; [eval] !ret2_5
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_11@643@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not p2_11@643@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1964 | p2_11@643@01 | live]
; [else-branch: 1964 | !(p2_11@643@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1964 | p2_11@643@01]
(assert p2_11@643@01)
; [exec]
; _res_6 := x_4_0
; [exec]
; ret2_5 := true
; [exec]
; assert true
; [eval] p1_11 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_11@642@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not p1_11@642@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1965 | p1_11@642@01 | live]
; [else-branch: 1965 | !(p1_11@642@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1965 | p1_11@642@01]
(assert p1_11@642@01)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert p1_11@642@01)
; [eval] p2_11 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_11@643@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1966 | p2_11@643@01 | live]
; [else-branch: 1966 | !(p2_11@643@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1966 | p2_11@643@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_11 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_11@642@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1967 | p1_11@642@01 | live]
; [else-branch: 1967 | !(p1_11@642@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1967 | p1_11@642@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p1_11@642@01
  (issubtype<Bool> (typeof<PyType> _res@681@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_11@642@01
  (issubtype<Bool> (typeof<PyType> _res@681@01) (as int<PyType>  PyType))))
; [eval] p2_11 ==> issubtype(typeof(_res_6), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_11@643@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1968 | p2_11@643@01 | live]
; [else-branch: 1968 | !(p2_11@643@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1968 | p2_11@643@01]
; [eval] issubtype(typeof(_res_6), int())
; [eval] typeof(_res_6)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] (p1_11 && p2_11 ==> x_0 == x_0_0) ==> p1_11 && p2_11 ==> _res == _res_6
; [eval] p1_11 && p2_11 ==> x_0 == x_0_0
; [eval] p1_11 && p2_11
(push) ; 9
; [then-branch: 1969 | !(p1_11@642@01) | live]
; [else-branch: 1969 | p1_11@642@01 | live]
(push) ; 10
; [then-branch: 1969 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1969 | p1_11@642@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_11@642@01 p2_11@643@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_11@642@01 p2_11@643@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1970 | p1_11@642@01 && p2_11@643@01 | live]
; [else-branch: 1970 | !(p1_11@642@01 && p2_11@643@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1970 | p1_11@642@01 && p2_11@643@01]
(assert (and p1_11@642@01 p2_11@643@01))
; [eval] x_0 == x_0_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and p1_11@642@01 p2_11@643@01))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1971 | p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01 | live]
; [else-branch: 1971 | !(p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1971 | p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01]
(assert (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01)))
; [eval] p1_11 && p2_11 ==> _res == _res_6
; [eval] p1_11 && p2_11
(push) ; 11
; [then-branch: 1972 | !(p1_11@642@01) | live]
; [else-branch: 1972 | p1_11@642@01 | live]
(push) ; 12
; [then-branch: 1972 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
(pop) ; 12
(push) ; 12
; [else-branch: 1972 | p1_11@642@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (and p1_11@642@01 p2_11@643@01))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and p1_11@642@01 p2_11@643@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1973 | p1_11@642@01 && p2_11@643@01 | live]
; [else-branch: 1973 | !(p1_11@642@01 && p2_11@643@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 1973 | p1_11@642@01 && p2_11@643@01]
(assert (and p1_11@642@01 p2_11@643@01))
; [eval] _res == _res_6
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (and p1_11@642@01 p2_11@643@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1971 | !(p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01)]
(assert (not (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))
  (and
    (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))
    p1_11@642@01
    p2_11@643@01)))
; Joined path conditions
(assert (or
  (not (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01)))
  (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))))
(push) ; 9
(assert (not (=>
  (and
    (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))
    (and p1_11@642@01 p2_11@643@01))
  (= _res@681@01 x_0_0@653@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (p1_11 && p2_11 ==> x_0 == x_0_0) ==> p1_11 && p2_11 ==> _res == _res_6
; [eval] p1_11 && p2_11 ==> x_0 == x_0_0
; [eval] p1_11 && p2_11
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1974 | !(p1_11@642@01) | live]
; [else-branch: 1974 | p1_11@642@01 | live]
(push) ; 10
; [then-branch: 1974 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 1974 | p1_11@642@01]
(assert p1_11@642@01)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_11@642@01 p2_11@643@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_11@642@01 p2_11@643@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1975 | p1_11@642@01 && p2_11@643@01 | live]
; [else-branch: 1975 | !(p1_11@642@01 && p2_11@643@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1975 | p1_11@642@01 && p2_11@643@01]
(assert (and p1_11@642@01 p2_11@643@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] x_0 == x_0_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and p1_11@642@01 p2_11@643@01))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1976 | p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01 | live]
; [else-branch: 1976 | !(p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1976 | p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01]
(assert (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] p1_11 && p2_11 ==> _res == _res_6
; [eval] p1_11 && p2_11
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1977 | !(p1_11@642@01) | live]
; [else-branch: 1977 | p1_11@642@01 | live]
(push) ; 12
; [then-branch: 1977 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 1977 | p1_11@642@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (and p1_11@642@01 p2_11@643@01))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and p1_11@642@01 p2_11@643@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1978 | p1_11@642@01 && p2_11@643@01 | live]
; [else-branch: 1978 | !(p1_11@642@01 && p2_11@643@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 1978 | p1_11@642@01 && p2_11@643@01]
(assert (and p1_11@642@01 p2_11@643@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _res == _res_6
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (and p1_11@642@01 p2_11@643@01))
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 1976 | !(p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01)]
(assert (not (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (=>
  (and
    (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))
    (and p1_11@642@01 p2_11@643@01))
  (= _res@681@01 x_0_0@653@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (p1_11 && p2_11 ==> x_0 == x_0_0) ==> p1_11 && p2_11 ==> _res == _res_6
; [eval] p1_11 && p2_11 ==> x_0 == x_0_0
; [eval] p1_11 && p2_11
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1979 | !(p1_11@642@01) | live]
; [else-branch: 1979 | p1_11@642@01 | live]
(push) ; 10
; [then-branch: 1979 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 1979 | p1_11@642@01]
(assert p1_11@642@01)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_11@642@01 p2_11@643@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_11@642@01 p2_11@643@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1980 | p1_11@642@01 && p2_11@643@01 | live]
; [else-branch: 1980 | !(p1_11@642@01 && p2_11@643@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1980 | p1_11@642@01 && p2_11@643@01]
(assert (and p1_11@642@01 p2_11@643@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] x_0 == x_0_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and p1_11@642@01 p2_11@643@01))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1981 | p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01 | live]
; [else-branch: 1981 | !(p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1981 | p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01]
(assert (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] p1_11 && p2_11 ==> _res == _res_6
; [eval] p1_11 && p2_11
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1982 | !(p1_11@642@01) | live]
; [else-branch: 1982 | p1_11@642@01 | live]
(push) ; 12
; [then-branch: 1982 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 1982 | p1_11@642@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (and p1_11@642@01 p2_11@643@01))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and p1_11@642@01 p2_11@643@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1983 | p1_11@642@01 && p2_11@643@01 | live]
; [else-branch: 1983 | !(p1_11@642@01 && p2_11@643@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 1983 | p1_11@642@01 && p2_11@643@01]
(assert (and p1_11@642@01 p2_11@643@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _res == _res_6
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (and p1_11@642@01 p2_11@643@01))
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 1981 | !(p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01)]
(assert (not (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (=>
  (and
    (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))
    (and p1_11@642@01 p2_11@643@01))
  (= _res@681@01 x_0_0@653@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (p1_11 && p2_11 ==> x_0 == x_0_0) ==> p1_11 && p2_11 ==> _res == _res_6
; [eval] p1_11 && p2_11 ==> x_0 == x_0_0
; [eval] p1_11 && p2_11
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1984 | !(p1_11@642@01) | live]
; [else-branch: 1984 | p1_11@642@01 | live]
(push) ; 10
; [then-branch: 1984 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 1984 | p1_11@642@01]
(assert p1_11@642@01)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_11@642@01 p2_11@643@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_11@642@01 p2_11@643@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1985 | p1_11@642@01 && p2_11@643@01 | live]
; [else-branch: 1985 | !(p1_11@642@01 && p2_11@643@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1985 | p1_11@642@01 && p2_11@643@01]
(assert (and p1_11@642@01 p2_11@643@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] x_0 == x_0_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and p1_11@642@01 p2_11@643@01))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1986 | p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01 | live]
; [else-branch: 1986 | !(p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1986 | p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01]
(assert (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] p1_11 && p2_11 ==> _res == _res_6
; [eval] p1_11 && p2_11
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1987 | !(p1_11@642@01) | live]
; [else-branch: 1987 | p1_11@642@01 | live]
(push) ; 12
; [then-branch: 1987 | !(p1_11@642@01)]
(assert (not p1_11@642@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 1987 | p1_11@642@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (and p1_11@642@01 p2_11@643@01))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and p1_11@642@01 p2_11@643@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1988 | p1_11@642@01 && p2_11@643@01 | live]
; [else-branch: 1988 | !(p1_11@642@01 && p2_11@643@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 1988 | p1_11@642@01 && p2_11@643@01]
(assert (and p1_11@642@01 p2_11@643@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _res == _res_6
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (and p1_11@642@01 p2_11@643@01))
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 1986 | !(p1_11@642@01 && p2_11@643@01 ==> x_0@652@01 == x_0_0@653@01)]
(assert (not (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (=>
  (and
    (=> (and p1_11@642@01 p2_11@643@01) (= x_0@652@01 x_0_0@653@01))
    (and p1_11@642@01 p2_11@643@01))
  (= _res@681@01 x_0_0@653@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- int_unchanged_lowval ----------
(declare-const p1_13@683@01 Bool)
(declare-const p2_13@684@01 Bool)
(declare-const _cthread_165@685@01 $Ref)
(declare-const _cthread_165_0@686@01 $Ref)
(declare-const _caller_measures_165@687@01 Seq<Measure$>)
(declare-const _caller_measures_165_0@688@01 Seq<Measure$>)
(declare-const _residue_165@689@01 $Perm)
(declare-const _residue_165_0@690@01 $Perm)
(declare-const secret_6@691@01 $Ref)
(declare-const secret_6_0@692@01 $Ref)
(declare-const x_1@693@01 $Ref)
(declare-const x_1_0@694@01 $Ref)
(declare-const _current_wait_level_165@695@01 $Perm)
(declare-const _current_wait_level_165_0@696@01 $Perm)
(declare-const _res@697@01 $Ref)
(declare-const _res_7@698@01 $Ref)
(declare-const p1_13@699@01 Bool)
(declare-const p2_13@700@01 Bool)
(declare-const _cthread_165@701@01 $Ref)
(declare-const _cthread_165_0@702@01 $Ref)
(declare-const _caller_measures_165@703@01 Seq<Measure$>)
(declare-const _caller_measures_165_0@704@01 Seq<Measure$>)
(declare-const _residue_165@705@01 $Perm)
(declare-const _residue_165_0@706@01 $Perm)
(declare-const secret_6@707@01 $Ref)
(declare-const secret_6_0@708@01 $Ref)
(declare-const x_1@709@01 $Ref)
(declare-const x_1_0@710@01 $Ref)
(declare-const _current_wait_level_165@711@01 $Perm)
(declare-const _current_wait_level_165_0@712@01 $Perm)
(declare-const _res@713@01 $Ref)
(declare-const _res_7@714@01 $Ref)
(push) ; 1
(declare-const $t@715@01 $Snap)
(assert (= $t@715@01 ($Snap.combine ($Snap.first $t@715@01) ($Snap.second $t@715@01))))
(assert (= ($Snap.first $t@715@01) $Snap.unit))
; [eval] p1_13 ==> _cthread_165 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_13@699@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1989 | p1_13@699@01 | live]
; [else-branch: 1989 | !(p1_13@699@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1989 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] _cthread_165 != null
(pop) ; 3
(push) ; 3
; [else-branch: 1989 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_13@699@01) p1_13@699@01))
(assert (=> p1_13@699@01 (not (= _cthread_165@701@01 $Ref.null))))
(assert (=
  ($Snap.second $t@715@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@715@01))
    ($Snap.second ($Snap.second $t@715@01)))))
(assert (= ($Snap.first ($Snap.second $t@715@01)) $Snap.unit))
; [eval] p2_13 ==> _cthread_165_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_13@700@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1990 | p2_13@700@01 | live]
; [else-branch: 1990 | !(p2_13@700@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1990 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] _cthread_165_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 1990 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_13@700@01) p2_13@700@01))
(assert (=> p2_13@700@01 (not (= _cthread_165_0@702@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@715@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@715@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@715@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@715@01))) $Snap.unit))
; [eval] p1_13 ==> issubtype(typeof(_cthread_165), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_13@699@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1991 | p1_13@699@01 | live]
; [else-branch: 1991 | !(p1_13@699@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1991 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] issubtype(typeof(_cthread_165), Thread_0())
; [eval] typeof(_cthread_165)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 1991 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_13@699@01
  (issubtype<Bool> (typeof<PyType> _cthread_165@701@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@715@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@715@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@715@01))))
  $Snap.unit))
; [eval] p2_13 ==> issubtype(typeof(_cthread_165_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_13@700@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1992 | p2_13@700@01 | live]
; [else-branch: 1992 | !(p2_13@700@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1992 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] issubtype(typeof(_cthread_165_0), Thread_0())
; [eval] typeof(_cthread_165_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 1992 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_13@700@01
  (issubtype<Bool> (typeof<PyType> _cthread_165_0@702@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01)))))
  $Snap.unit))
; [eval] p1_13 ==> issubtype(typeof(secret_6), int())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_13@699@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1993 | p1_13@699@01 | live]
; [else-branch: 1993 | !(p1_13@699@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1993 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] issubtype(typeof(secret_6), int())
; [eval] typeof(secret_6)
; [eval] int()
(pop) ; 3
(push) ; 3
; [else-branch: 1993 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_13@699@01
  (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01))))))
  $Snap.unit))
; [eval] p2_13 ==> issubtype(typeof(secret_6_0), int())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_13@700@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1994 | p2_13@700@01 | live]
; [else-branch: 1994 | !(p2_13@700@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1994 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] issubtype(typeof(secret_6_0), int())
; [eval] typeof(secret_6_0)
; [eval] int()
(pop) ; 3
(push) ; 3
; [else-branch: 1994 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_13@700@01
  (issubtype<Bool> (typeof<PyType> secret_6_0@708@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01)))))))
  $Snap.unit))
; [eval] p1_13 ==> issubtype(typeof(x_1), int())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_13@699@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1995 | p1_13@699@01 | live]
; [else-branch: 1995 | !(p1_13@699@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1995 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] issubtype(typeof(x_1), int())
; [eval] typeof(x_1)
; [eval] int()
(pop) ; 3
(push) ; 3
; [else-branch: 1995 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_13@699@01
  (issubtype<Bool> (typeof<PyType> x_1@709@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01))))))))
  $Snap.unit))
; [eval] p2_13 ==> issubtype(typeof(x_1_0), int())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_13@700@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1996 | p2_13@700@01 | live]
; [else-branch: 1996 | !(p2_13@700@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1996 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] issubtype(typeof(x_1_0), int())
; [eval] typeof(x_1_0)
; [eval] int()
(pop) ; 3
(push) ; 3
; [else-branch: 1996 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_13@700@01
  (issubtype<Bool> (typeof<PyType> x_1_0@710@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01)))))))))
  $Snap.unit))
; [eval] p1_13 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_13@699@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1997 | p1_13@699@01 | live]
; [else-branch: 1997 | !(p1_13@699@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1997 | p1_13@699@01]
(assert p1_13@699@01)
(pop) ; 3
(push) ; 3
; [else-branch: 1997 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@715@01)))))))))
  $Snap.unit))
; [eval] p2_13 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_13@700@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1998 | p2_13@700@01 | live]
; [else-branch: 1998 | !(p2_13@700@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1998 | p2_13@700@01]
(assert p2_13@700@01)
(pop) ; 3
(push) ; 3
; [else-branch: 1998 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@716@01 $Snap)
(assert (= $t@716@01 ($Snap.combine ($Snap.first $t@716@01) ($Snap.second $t@716@01))))
(assert (= ($Snap.first $t@716@01) $Snap.unit))
; [eval] p1_13 ==> (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_165) && ((forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_165) && _residue_165 <= _current_wait_level_165)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_13@699@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1999 | p1_13@699@01 | live]
; [else-branch: 1999 | !(p1_13@699@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1999 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_165) && ((forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_165) && _residue_165 <= _current_wait_level_165)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_165)
(push) ; 5
; [then-branch: 2000 | False | live]
; [else-branch: 2000 | True | live]
(push) ; 6
; [then-branch: 2000 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 2000 | True]
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_165)
(push) ; 7
; [then-branch: 2001 | False | live]
; [else-branch: 2001 | True | live]
(push) ; 8
; [then-branch: 2001 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2001 | True]
; [eval] _residue_165 <= _current_wait_level_165
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 1999 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p1_13@699@01 (<= _residue_165@705@01 _current_wait_level_165@711@01)))
(assert (=
  ($Snap.second $t@716@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@716@01))
    ($Snap.second ($Snap.second $t@716@01)))))
(assert (= ($Snap.first ($Snap.second $t@716@01)) $Snap.unit))
; [eval] p2_13 ==> (forperm _r_20: Ref [_r_20.MustReleaseBoundedp] :: Level(_r_20) <= _current_wait_level_165_0) && ((forperm _r_20: Ref [_r_20.MustReleaseUnboundedp] :: Level(_r_20) <= _current_wait_level_165_0) && _residue_165_0 <= _current_wait_level_165_0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_13@700@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2002 | p2_13@700@01 | live]
; [else-branch: 2002 | !(p2_13@700@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2002 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBoundedp] :: Level(_r_20) <= _current_wait_level_165_0) && ((forperm _r_20: Ref [_r_20.MustReleaseUnboundedp] :: Level(_r_20) <= _current_wait_level_165_0) && _residue_165_0 <= _current_wait_level_165_0)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBoundedp] :: Level(_r_20) <= _current_wait_level_165_0)
(push) ; 5
; [then-branch: 2003 | False | live]
; [else-branch: 2003 | True | live]
(push) ; 6
; [then-branch: 2003 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 2003 | True]
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnboundedp] :: Level(_r_20) <= _current_wait_level_165_0)
(push) ; 7
; [then-branch: 2004 | False | live]
; [else-branch: 2004 | True | live]
(push) ; 8
; [then-branch: 2004 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2004 | True]
; [eval] _residue_165_0 <= _current_wait_level_165_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 2002 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p2_13@700@01 (<= _residue_165_0@706@01 _current_wait_level_165_0@712@01)))
(assert (=
  ($Snap.second ($Snap.second $t@716@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@716@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@716@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@716@01))) $Snap.unit))
; [eval] p1_13 ==> issubtype(typeof(_res), int())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_13@699@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2005 | p1_13@699@01 | live]
; [else-branch: 2005 | !(p1_13@699@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2005 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 2005 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_13@699@01
  (issubtype<Bool> (typeof<PyType> _res@713@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@716@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@716@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@716@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@716@01))))
  $Snap.unit))
; [eval] p2_13 ==> issubtype(typeof(_res_7), int())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_13@700@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2006 | p2_13@700@01 | live]
; [else-branch: 2006 | !(p2_13@700@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2006 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] issubtype(typeof(_res_7), int())
; [eval] typeof(_res_7)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 2006 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_13@700@01
  (issubtype<Bool> (typeof<PyType> _res_7@714@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@716@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@716@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@716@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@716@01)))))
  $Snap.unit))
; [eval] (p1_13 && p2_13 ==> x_1 == x_1_0) ==> p1_13 && p2_13 ==> int___eq__(_res, _res_7)
; [eval] p1_13 && p2_13 ==> x_1 == x_1_0
; [eval] p1_13 && p2_13
(push) ; 3
; [then-branch: 2007 | !(p1_13@699@01) | live]
; [else-branch: 2007 | p1_13@699@01 | live]
(push) ; 4
; [then-branch: 2007 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 4
(push) ; 4
; [else-branch: 2007 | p1_13@699@01]
(assert p1_13@699@01)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1_13@699@01 (not p1_13@699@01)))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (and p1_13@699@01 p2_13@700@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and p1_13@699@01 p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2008 | p1_13@699@01 && p2_13@700@01 | live]
; [else-branch: 2008 | !(p1_13@699@01 && p2_13@700@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2008 | p1_13@699@01 && p2_13@700@01]
(assert (and p1_13@699@01 p2_13@700@01))
; [eval] x_1 == x_1_0
(pop) ; 4
(push) ; 4
; [else-branch: 2008 | !(p1_13@699@01 && p2_13@700@01)]
(assert (not (and p1_13@699@01 p2_13@700@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (and p1_13@699@01 p2_13@700@01)) (and p1_13@699@01 p2_13@700@01)))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2009 | p1_13@699@01 && p2_13@700@01 ==> x_1@709@01 == x_1_0@710@01 | live]
; [else-branch: 2009 | !(p1_13@699@01 && p2_13@700@01 ==> x_1@709@01 == x_1_0@710@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2009 | p1_13@699@01 && p2_13@700@01 ==> x_1@709@01 == x_1_0@710@01]
(assert (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01)))
; [eval] p1_13 && p2_13 ==> int___eq__(_res, _res_7)
; [eval] p1_13 && p2_13
(push) ; 5
; [then-branch: 2010 | !(p1_13@699@01) | live]
; [else-branch: 2010 | p1_13@699@01 | live]
(push) ; 6
; [then-branch: 2010 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2010 | p1_13@699@01]
(assert p1_13@699@01)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (and p1_13@699@01 p2_13@700@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and p1_13@699@01 p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2011 | p1_13@699@01 && p2_13@700@01 | live]
; [else-branch: 2011 | !(p1_13@699@01 && p2_13@700@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2011 | p1_13@699@01 && p2_13@700@01]
(assert (and p1_13@699@01 p2_13@700@01))
; [eval] int___eq__(_res, _res_7)
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> _res@713@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@713@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> _res_7@714@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res_7@714@01) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@713@01 _res_7@714@01))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@713@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> _res_7@714@01) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@713@01 _res_7@714@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 2011 | !(p1_13@699@01 && p2_13@700@01)]
(assert (not (and p1_13@699@01 p2_13@700@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and p1_13@699@01 p2_13@700@01)
  (and
    p1_13@699@01
    p2_13@700@01
    (issubtype<Bool> (typeof<PyType> _res@713@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> _res_7@714@01) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@713@01 _res_7@714@01))))
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 2009 | !(p1_13@699@01 && p2_13@700@01 ==> x_1@709@01 == x_1_0@710@01)]
(assert (not (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))
  (and
    (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))
    (=>
      (and p1_13@699@01 p2_13@700@01)
      (and
        p1_13@699@01
        p2_13@700@01
        (issubtype<Bool> (typeof<PyType> _res@713@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> _res_7@714@01) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@713@01 _res_7@714@01))))))
; Joined path conditions
(assert (or
  (not (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01)))
  (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))))
(assert (=>
  (and
    (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))
    (and p1_13@699@01 p2_13@700@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@713@01 _res_7@714@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@716@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@716@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@716@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@716@01))))))
  $Snap.unit))
; [eval] p1_13 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_13@699@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2012 | p1_13@699@01 | live]
; [else-branch: 2012 | !(p1_13@699@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2012 | p1_13@699@01]
(assert p1_13@699@01)
(pop) ; 4
(push) ; 4
; [else-branch: 2012 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@716@01))))))
  $Snap.unit))
; [eval] p2_13 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_13@700@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2013 | p2_13@700@01 | live]
; [else-branch: 2013 | !(p2_13@700@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2013 | p2_13@700@01]
(assert p2_13@700@01)
(pop) ; 4
(push) ; 4
; [else-branch: 2013 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
(push) ; 2
; [exec]
; var ret1_6: Bool
(declare-const ret1_6@717@01 Bool)
; [exec]
; var ret2_6: Bool
(declare-const ret2_6@718@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@719@01 $Ref)
; [exec]
; var _err_7: Ref
(declare-const _err_7@720@01 $Ref)
; [exec]
; var secret_18: Ref
(declare-const secret_18@721@01 $Ref)
; [exec]
; var secret_18_0: Ref
(declare-const secret_18_0@722@01 $Ref)
; [exec]
; var x_5: Ref
(declare-const x_5@723@01 $Ref)
; [exec]
; var x_5_0: Ref
(declare-const x_5_0@724@01 $Ref)
; [exec]
; var _cwl_165: Perm
(declare-const _cwl_165@725@01 $Perm)
; [exec]
; var _cwl_165_0: Perm
(declare-const _cwl_165_0@726@01 $Perm)
; [exec]
; var _method_measures_165: Seq[Measure$]
(declare-const _method_measures_165@727@01 Seq<Measure$>)
; [exec]
; var _method_measures_165_0: Seq[Measure$]
(declare-const _method_measures_165_0@728@01 Seq<Measure$>)
; [exec]
; var p1_14: Bool
(declare-const p1_14@729@01 Bool)
; [exec]
; var p2_14: Bool
(declare-const p2_14@730@01 Bool)
; [exec]
; var p3_6: Bool
(declare-const p3_6@731@01 Bool)
; [exec]
; var p4_6: Bool
(declare-const p4_6@732@01 Bool)
; [exec]
; inhale p1_13
(declare-const $t@733@01 $Snap)
(assert (= $t@733@01 $Snap.unit))
(assert p1_13@699@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ret1_6 := false
; [exec]
; ret2_6 := false
; [eval] p1_13 && !ret1_6
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2014 | !(p1_13@699@01) | live]
; [else-branch: 2014 | p1_13@699@01 | live]
(push) ; 4
; [then-branch: 2014 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 4
(push) ; 4
; [else-branch: 2014 | p1_13@699@01]
; [eval] !ret1_6
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1_13@699@01 (not p1_13@699@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2015 | p1_13@699@01 | live]
; [else-branch: 2015 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2015 | p1_13@699@01]
; [exec]
; _method_measures_165 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; secret_18 := secret_6
; [exec]
; x_5 := x_1
; [eval] p2_13 && !ret2_6
(push) ; 4
; [then-branch: 2016 | !(p2_13@700@01) | live]
; [else-branch: 2016 | p2_13@700@01 | live]
(push) ; 5
; [then-branch: 2016 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
(pop) ; 5
(push) ; 5
; [else-branch: 2016 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] !ret2_6
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or p2_13@700@01 (not p2_13@700@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_13@700@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2017 | p2_13@700@01 | live]
; [else-branch: 2017 | !(p2_13@700@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2017 | p2_13@700@01]
(assert p2_13@700@01)
; [exec]
; _method_measures_165_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res_7 := null
; [exec]
; _err_7 := null
; [exec]
; secret_18_0 := secret_6_0
; [exec]
; x_5_0 := x_1_0
; [exec]
; p1_14 := p1_13 &&
;   (!ret1_6 && int___eq__(secret_18, __prim__int___box__(0)))
; [eval] p1_13 && (!ret1_6 && int___eq__(secret_18, __prim__int___box__(0)))
(push) ; 5
; [then-branch: 2018 | !(p1_13@699@01) | live]
; [else-branch: 2018 | p1_13@699@01 | live]
(push) ; 6
; [then-branch: 2018 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2018 | p1_13@699@01]
; [eval] !ret1_6
(push) ; 7
; [then-branch: 2019 | False | live]
; [else-branch: 2019 | True | live]
(push) ; 8
; [then-branch: 2019 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2019 | True]
; [eval] int___eq__(secret_18, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_6@707@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_6@707@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 0)
  (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_6@707@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_13@699@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_6@707@01 (__prim__int___box__ $Snap.unit 0)))))
(declare-const p1_14@734@01 Bool)
(assert (=
  p1_14@734@01
  (and
    p1_13@699@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) secret_6@707@01 (__prim__int___box__ $Snap.unit 0)))))
; [exec]
; p2_14 := p2_13 &&
;   (!ret2_6 && int___eq__(secret_18_0, __prim__int___box__(0)))
; [eval] p2_13 && (!ret2_6 && int___eq__(secret_18_0, __prim__int___box__(0)))
(push) ; 5
; [then-branch: 2020 | !(p2_13@700@01) | live]
; [else-branch: 2020 | p2_13@700@01 | live]
(push) ; 6
; [then-branch: 2020 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2020 | p2_13@700@01]
; [eval] !ret2_6
(push) ; 7
; [then-branch: 2021 | False | live]
; [else-branch: 2021 | True | live]
(push) ; 8
; [then-branch: 2021 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2021 | True]
; [eval] int___eq__(secret_18_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_6_0@708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_6_0@708@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_6_0@708@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_6_0@708@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_6_0@708@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 0)
  (issubtype<Bool> (typeof<PyType> secret_6_0@708@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_6_0@708@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_13@700@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> secret_6_0@708@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_6_0@708@01 (__prim__int___box__ $Snap.unit 0)))))
(declare-const p2_14@735@01 Bool)
(assert (=
  p2_14@735@01
  (and
    p2_13@700@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) secret_6_0@708@01 (__prim__int___box__ $Snap.unit 0)))))
; [exec]
; p3_6 := p1_13 &&
;   (!ret1_6 && !int___eq__(secret_18, __prim__int___box__(0)))
; [eval] p1_13 && (!ret1_6 && !int___eq__(secret_18, __prim__int___box__(0)))
(push) ; 5
; [then-branch: 2022 | !(p1_13@699@01) | live]
; [else-branch: 2022 | p1_13@699@01 | live]
(push) ; 6
; [then-branch: 2022 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2022 | p1_13@699@01]
; [eval] !ret1_6
(push) ; 7
; [then-branch: 2023 | False | live]
; [else-branch: 2023 | True | live]
(push) ; 8
; [then-branch: 2023 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2023 | True]
; [eval] !int___eq__(secret_18, __prim__int___box__(0))
; [eval] int___eq__(secret_18, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_6@707@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_6@707@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 0)
  (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_6@707@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p3_6@736@01 Bool)
(assert (=
  p3_6@736@01
  (and
    p1_13@699@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) secret_6@707@01 (__prim__int___box__ $Snap.unit 0))))))
; [exec]
; p4_6 := p2_13 &&
;   (!ret2_6 && !int___eq__(secret_18_0, __prim__int___box__(0)))
; [eval] p2_13 && (!ret2_6 && !int___eq__(secret_18_0, __prim__int___box__(0)))
(push) ; 5
; [then-branch: 2024 | !(p2_13@700@01) | live]
; [else-branch: 2024 | p2_13@700@01 | live]
(push) ; 6
; [then-branch: 2024 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2024 | p2_13@700@01]
; [eval] !ret2_6
(push) ; 7
; [then-branch: 2025 | False | live]
; [else-branch: 2025 | True | live]
(push) ; 8
; [then-branch: 2025 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2025 | True]
; [eval] !int___eq__(secret_18_0, __prim__int___box__(0))
; [eval] int___eq__(secret_18_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_6_0@708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_6_0@708@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_6_0@708@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_6_0@708@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_6_0@708@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 0)
  (issubtype<Bool> (typeof<PyType> secret_6_0@708@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_6_0@708@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p4_6@737@01 Bool)
(assert (=
  p4_6@737@01
  (and
    p2_13@700@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) secret_6_0@708@01 (__prim__int___box__ $Snap.unit 0))))))
; [eval] p1_14 && !ret1_6
(push) ; 5
; [then-branch: 2026 | !(p1_14@734@01) | live]
; [else-branch: 2026 | p1_14@734@01 | live]
(push) ; 6
; [then-branch: 2026 | !(p1_14@734@01)]
(assert (not p1_14@734@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2026 | p1_14@734@01]
(assert p1_14@734@01)
; [eval] !ret1_6
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_14@734@01 (not p1_14@734@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_14@734@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not p1_14@734@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2027 | p1_14@734@01 | live]
; [else-branch: 2027 | !(p1_14@734@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2027 | p1_14@734@01]
(assert p1_14@734@01)
; [exec]
; _res := __prim__int___box__(int___add__(int___unbox__(x_5), int___unbox__(secret_18)))
; [eval] __prim__int___box__(int___add__(int___unbox__(x_5), int___unbox__(secret_18)))
; [eval] int___add__(int___unbox__(x_5), int___unbox__(secret_18))
; [eval] int___unbox__(x_5)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> x_1@709@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_1@709@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit x_1@709@01))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_1@709@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit x_1@709@01)))
; [eval] int___unbox__(secret_18)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit secret_6@707@01))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit secret_6@707@01)))
(push) ; 6
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_1@709@01) (int___unbox__ $Snap.unit secret_6@707@01)))
(pop) ; 6
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_1@709@01) (int___unbox__ $Snap.unit secret_6@707@01)))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_1@709@01) (int___unbox__ $Snap.unit secret_6@707@01))))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_1@709@01) (int___unbox__ $Snap.unit secret_6@707@01))))
(declare-const _res@738@01 $Ref)
(assert (=
  _res@738@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_1@709@01) (int___unbox__ $Snap.unit secret_6@707@01)))))
; [exec]
; ret1_6 := true
; [eval] p2_14 && !ret2_6
(push) ; 6
; [then-branch: 2028 | !(p2_14@735@01) | live]
; [else-branch: 2028 | p2_14@735@01 | live]
(push) ; 7
; [then-branch: 2028 | !(p2_14@735@01)]
(assert (not p2_14@735@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2028 | p2_14@735@01]
(assert p2_14@735@01)
; [eval] !ret2_6
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_14@735@01 (not p2_14@735@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_14@735@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not p2_14@735@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2029 | p2_14@735@01 | live]
; [else-branch: 2029 | !(p2_14@735@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2029 | p2_14@735@01]
(assert p2_14@735@01)
; [exec]
; _res_7 := __prim__int___box__(int___add__(int___unbox__(x_5_0), int___unbox__(secret_18_0)))
; [eval] __prim__int___box__(int___add__(int___unbox__(x_5_0), int___unbox__(secret_18_0)))
; [eval] int___add__(int___unbox__(x_5_0), int___unbox__(secret_18_0))
; [eval] int___unbox__(x_5_0)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> x_1_0@710@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_1_0@710@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit x_1_0@710@01))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_1_0@710@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit x_1_0@710@01)))
; [eval] int___unbox__(secret_18_0)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> secret_6_0@708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_6_0@708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit secret_6_0@708@01))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_6_0@708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit secret_6_0@708@01)))
(push) ; 7
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_1_0@710@01) (int___unbox__ $Snap.unit secret_6_0@708@01)))
(pop) ; 7
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_1_0@710@01) (int___unbox__ $Snap.unit secret_6_0@708@01)))
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_1_0@710@01) (int___unbox__ $Snap.unit secret_6_0@708@01))))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_1_0@710@01) (int___unbox__ $Snap.unit secret_6_0@708@01))))
(declare-const _res_7@739@01 $Ref)
(assert (=
  _res_7@739@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_1_0@710@01) (int___unbox__ $Snap.unit secret_6_0@708@01)))))
; [exec]
; ret2_6 := true
; [eval] p1_13 && !ret1_6
(push) ; 7
; [then-branch: 2030 | !(p1_13@699@01) | live]
; [else-branch: 2030 | p1_13@699@01 | live]
(push) ; 8
; [then-branch: 2030 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2030 | p1_13@699@01]
; [eval] !ret1_6
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 2031 | False | dead]
; [else-branch: 2031 | True | live]
(push) ; 7
; [else-branch: 2031 | True]
(pop) ; 7
; [eval] !(p1_13 && !ret1_6)
; [eval] p1_13 && !ret1_6
(push) ; 7
; [then-branch: 2032 | !(p1_13@699@01) | live]
; [else-branch: 2032 | p1_13@699@01 | live]
(push) ; 8
; [then-branch: 2032 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2032 | p1_13@699@01]
; [eval] !ret1_6
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2033 | True | live]
; [else-branch: 2033 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2033 | True]
; [eval] p2_13 && !ret2_6
(push) ; 8
; [then-branch: 2034 | !(p2_13@700@01) | live]
; [else-branch: 2034 | p2_13@700@01 | live]
(push) ; 9
; [then-branch: 2034 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2034 | p2_13@700@01]
; [eval] !ret2_6
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 2035 | False | dead]
; [else-branch: 2035 | True | live]
(push) ; 8
; [else-branch: 2035 | True]
(pop) ; 8
; [eval] !(p2_13 && !ret2_6)
; [eval] p2_13 && !ret2_6
(push) ; 8
; [then-branch: 2036 | !(p2_13@700@01) | live]
; [else-branch: 2036 | p2_13@700@01 | live]
(push) ; 9
; [then-branch: 2036 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2036 | p2_13@700@01]
; [eval] !ret2_6
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2037 | True | live]
; [else-branch: 2037 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2037 | True]
; [exec]
; assert true
; [eval] p1_13 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2038 | p1_13@699@01 | live]
; [else-branch: 2038 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2038 | p1_13@699@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_13 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2039 | p2_13@700@01 | live]
; [else-branch: 2039 | !(p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2039 | p2_13@700@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_13 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2040 | p1_13@699@01 | live]
; [else-branch: 2040 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2040 | p1_13@699@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p1_13@699@01
  (issubtype<Bool> (typeof<PyType> _res@738@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_13@699@01
  (issubtype<Bool> (typeof<PyType> _res@738@01) (as int<PyType>  PyType))))
; [eval] p2_13 ==> issubtype(typeof(_res_7), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2041 | p2_13@700@01 | live]
; [else-branch: 2041 | !(p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2041 | p2_13@700@01]
; [eval] issubtype(typeof(_res_7), int())
; [eval] typeof(_res_7)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p2_13@700@01
  (issubtype<Bool> (typeof<PyType> _res_7@739@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_13@700@01
  (issubtype<Bool> (typeof<PyType> _res_7@739@01) (as int<PyType>  PyType))))
; [eval] (p1_13 && p2_13 ==> x_1 == x_1_0) ==> p1_13 && p2_13 ==> int___eq__(_res, _res_7)
; [eval] p1_13 && p2_13 ==> x_1 == x_1_0
; [eval] p1_13 && p2_13
(push) ; 9
; [then-branch: 2042 | !(p1_13@699@01) | live]
; [else-branch: 2042 | p1_13@699@01 | live]
(push) ; 10
; [then-branch: 2042 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2042 | p1_13@699@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_13@699@01 p2_13@700@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_13@699@01 p2_13@700@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2043 | p1_13@699@01 && p2_13@700@01 | live]
; [else-branch: 2043 | !(p1_13@699@01 && p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2043 | p1_13@699@01 && p2_13@700@01]
(assert (and p1_13@699@01 p2_13@700@01))
; [eval] x_1 == x_1_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and p1_13@699@01 p2_13@700@01))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2044 | p1_13@699@01 && p2_13@700@01 ==> x_1@709@01 == x_1_0@710@01 | live]
; [else-branch: 2044 | !(p1_13@699@01 && p2_13@700@01 ==> x_1@709@01 == x_1_0@710@01) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2044 | p1_13@699@01 && p2_13@700@01 ==> x_1@709@01 == x_1_0@710@01]
(assert (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01)))
; [eval] p1_13 && p2_13 ==> int___eq__(_res, _res_7)
; [eval] p1_13 && p2_13
(push) ; 11
; [then-branch: 2045 | !(p1_13@699@01) | live]
; [else-branch: 2045 | p1_13@699@01 | live]
(push) ; 12
; [then-branch: 2045 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 12
(push) ; 12
; [else-branch: 2045 | p1_13@699@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (and p1_13@699@01 p2_13@700@01))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and p1_13@699@01 p2_13@700@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2046 | p1_13@699@01 && p2_13@700@01 | live]
; [else-branch: 2046 | !(p1_13@699@01 && p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2046 | p1_13@699@01 && p2_13@700@01]
(assert (and p1_13@699@01 p2_13@700@01))
; [eval] int___eq__(_res, _res_7)
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> _res@738@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@738@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> _res_7@739@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res_7@739@01) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@738@01 _res_7@739@01))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@738@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> _res_7@739@01) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@738@01 _res_7@739@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and p1_13@699@01 p2_13@700@01)
  (and
    p1_13@699@01
    p2_13@700@01
    (issubtype<Bool> (typeof<PyType> _res@738@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> _res_7@739@01) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@738@01 _res_7@739@01))))
(assert (and p1_13@699@01 p2_13@700@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2044 | !(p1_13@699@01 && p2_13@700@01 ==> x_1@709@01 == x_1_0@710@01)]
(assert (not (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))
  (and
    (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))
    (=>
      (and p1_13@699@01 p2_13@700@01)
      (and
        p1_13@699@01
        p2_13@700@01
        (issubtype<Bool> (typeof<PyType> _res@738@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> _res_7@739@01) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@738@01 _res_7@739@01)))
    p1_13@699@01
    p2_13@700@01)))
; Joined path conditions
(assert (or
  (not (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01)))
  (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))))
(push) ; 9
(assert (not (=>
  (and
    (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))
    (and p1_13@699@01 p2_13@700@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@738@01 _res_7@739@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))
    (and p1_13@699@01 p2_13@700@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@738@01 _res_7@739@01)))
; [eval] p1_13 ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not p1_13@699@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2047 | p1_13@699@01 | live]
; [else-branch: 2047 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2047 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
(push) ; 11
; [then-branch: 2048 | False | live]
; [else-branch: 2048 | True | live]
(push) ; 12
; [then-branch: 2048 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2048 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
(push) ; 13
; [then-branch: 2049 | False | live]
; [else-branch: 2049 | True | live]
(push) ; 14
; [then-branch: 2049 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2049 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 2050 | False | live]
; [else-branch: 2050 | True | live]
(push) ; 16
; [then-branch: 2050 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2050 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert p1_13@699@01)
; [eval] p2_13 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not p2_13@700@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2051 | p2_13@700@01 | live]
; [else-branch: 2051 | !(p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2051 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false)
(push) ; 11
; [then-branch: 2052 | False | live]
; [else-branch: 2052 | True | live]
(push) ; 12
; [then-branch: 2052 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2052 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false)
(push) ; 13
; [then-branch: 2053 | False | live]
; [else-branch: 2053 | True | live]
(push) ; 14
; [then-branch: 2053 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2053 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false)
(push) ; 15
; [then-branch: 2054 | False | live]
; [else-branch: 2054 | True | live]
(push) ; 16
; [then-branch: 2054 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2054 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert p2_13@700@01)
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 2029 | !(p2_14@735@01)]
(assert (not p2_14@735@01))
(pop) ; 6
; [eval] !(p2_14 && !ret2_6)
; [eval] p2_14 && !ret2_6
(push) ; 6
; [then-branch: 2055 | !(p2_14@735@01) | live]
; [else-branch: 2055 | p2_14@735@01 | live]
(push) ; 7
; [then-branch: 2055 | !(p2_14@735@01)]
(assert (not p2_14@735@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2055 | p2_14@735@01]
(assert p2_14@735@01)
; [eval] !ret2_6
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_14@735@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_14@735@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2056 | !(p2_14@735@01) | live]
; [else-branch: 2056 | p2_14@735@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2056 | !(p2_14@735@01)]
(assert (not p2_14@735@01))
; [eval] p1_13 && !ret1_6
(push) ; 7
; [then-branch: 2057 | !(p1_13@699@01) | live]
; [else-branch: 2057 | p1_13@699@01 | live]
(push) ; 8
; [then-branch: 2057 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2057 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] !ret1_6
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 2058 | False | dead]
; [else-branch: 2058 | True | live]
(push) ; 7
; [else-branch: 2058 | True]
(pop) ; 7
; [eval] !(p1_13 && !ret1_6)
; [eval] p1_13 && !ret1_6
(push) ; 7
; [then-branch: 2059 | !(p1_13@699@01) | live]
; [else-branch: 2059 | p1_13@699@01 | live]
(push) ; 8
; [then-branch: 2059 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2059 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] !ret1_6
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2060 | True | live]
; [else-branch: 2060 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2060 | True]
; [eval] p2_13 && !ret2_6
(push) ; 8
; [then-branch: 2061 | !(p2_13@700@01) | live]
; [else-branch: 2061 | p2_13@700@01 | live]
(push) ; 9
; [then-branch: 2061 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2061 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] !ret2_6
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not p2_13@700@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2062 | p2_13@700@01 | live]
; [else-branch: 2062 | !(p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2062 | p2_13@700@01]
(assert p2_13@700@01)
; [exec]
; _res_7 := x_5_0
; [exec]
; ret2_6 := true
; [exec]
; assert true
; [eval] p1_13 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not p1_13@699@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2063 | p1_13@699@01 | live]
; [else-branch: 2063 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2063 | p1_13@699@01]
(assert p1_13@699@01)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert p1_13@699@01)
; [eval] p2_13 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2064 | p2_13@700@01 | live]
; [else-branch: 2064 | !(p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2064 | p2_13@700@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_13 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2065 | p1_13@699@01 | live]
; [else-branch: 2065 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2065 | p1_13@699@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p1_13@699@01
  (issubtype<Bool> (typeof<PyType> _res@738@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_13@699@01
  (issubtype<Bool> (typeof<PyType> _res@738@01) (as int<PyType>  PyType))))
; [eval] p2_13 ==> issubtype(typeof(_res_7), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2066 | p2_13@700@01 | live]
; [else-branch: 2066 | !(p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2066 | p2_13@700@01]
; [eval] issubtype(typeof(_res_7), int())
; [eval] typeof(_res_7)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] (p1_13 && p2_13 ==> x_1 == x_1_0) ==> p1_13 && p2_13 ==> int___eq__(_res, _res_7)
; [eval] p1_13 && p2_13 ==> x_1 == x_1_0
; [eval] p1_13 && p2_13
(push) ; 9
; [then-branch: 2067 | !(p1_13@699@01) | live]
; [else-branch: 2067 | p1_13@699@01 | live]
(push) ; 10
; [then-branch: 2067 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2067 | p1_13@699@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_13@699@01 p2_13@700@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_13@699@01 p2_13@700@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2068 | p1_13@699@01 && p2_13@700@01 | live]
; [else-branch: 2068 | !(p1_13@699@01 && p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2068 | p1_13@699@01 && p2_13@700@01]
(assert (and p1_13@699@01 p2_13@700@01))
; [eval] x_1 == x_1_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and p1_13@699@01 p2_13@700@01))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2069 | p1_13@699@01 && p2_13@700@01 ==> x_1@709@01 == x_1_0@710@01 | live]
; [else-branch: 2069 | !(p1_13@699@01 && p2_13@700@01 ==> x_1@709@01 == x_1_0@710@01) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2069 | p1_13@699@01 && p2_13@700@01 ==> x_1@709@01 == x_1_0@710@01]
(assert (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01)))
; [eval] p1_13 && p2_13 ==> int___eq__(_res, _res_7)
; [eval] p1_13 && p2_13
(push) ; 11
; [then-branch: 2070 | !(p1_13@699@01) | live]
; [else-branch: 2070 | p1_13@699@01 | live]
(push) ; 12
; [then-branch: 2070 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 12
(push) ; 12
; [else-branch: 2070 | p1_13@699@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (and p1_13@699@01 p2_13@700@01))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and p1_13@699@01 p2_13@700@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2071 | p1_13@699@01 && p2_13@700@01 | live]
; [else-branch: 2071 | !(p1_13@699@01 && p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2071 | p1_13@699@01 && p2_13@700@01]
(assert (and p1_13@699@01 p2_13@700@01))
; [eval] int___eq__(_res, _res_7)
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> _res@738@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@738@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> x_1_0@710@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_1_0@710@01) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@738@01 x_1_0@710@01))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@738@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> x_1_0@710@01) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@738@01 x_1_0@710@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and p1_13@699@01 p2_13@700@01)
  (and
    p1_13@699@01
    p2_13@700@01
    (issubtype<Bool> (typeof<PyType> _res@738@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> x_1_0@710@01) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@738@01 x_1_0@710@01))))
(assert (and p1_13@699@01 p2_13@700@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2069 | !(p1_13@699@01 && p2_13@700@01 ==> x_1@709@01 == x_1_0@710@01)]
(assert (not (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))
  (and
    (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))
    (=>
      (and p1_13@699@01 p2_13@700@01)
      (and
        p1_13@699@01
        p2_13@700@01
        (issubtype<Bool> (typeof<PyType> _res@738@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> x_1_0@710@01) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@738@01 x_1_0@710@01)))
    p1_13@699@01
    p2_13@700@01)))
; Joined path conditions
(assert (or
  (not (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01)))
  (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))))
(push) ; 9
(assert (not (=>
  (and
    (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))
    (and p1_13@699@01 p2_13@700@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@738@01 x_1_0@710@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))
    (and p1_13@699@01 p2_13@700@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@738@01 x_1_0@710@01)))
; [eval] p1_13 ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not p1_13@699@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2072 | p1_13@699@01 | live]
; [else-branch: 2072 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2072 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
(push) ; 11
; [then-branch: 2073 | False | live]
; [else-branch: 2073 | True | live]
(push) ; 12
; [then-branch: 2073 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2073 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
(push) ; 13
; [then-branch: 2074 | False | live]
; [else-branch: 2074 | True | live]
(push) ; 14
; [then-branch: 2074 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2074 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 2075 | False | live]
; [else-branch: 2075 | True | live]
(push) ; 16
; [then-branch: 2075 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2075 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert p1_13@699@01)
; [eval] p2_13 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not p2_13@700@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2076 | p2_13@700@01 | live]
; [else-branch: 2076 | !(p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2076 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false)
(push) ; 11
; [then-branch: 2077 | False | live]
; [else-branch: 2077 | True | live]
(push) ; 12
; [then-branch: 2077 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2077 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false)
(push) ; 13
; [then-branch: 2078 | False | live]
; [else-branch: 2078 | True | live]
(push) ; 14
; [then-branch: 2078 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2078 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false)
(push) ; 15
; [then-branch: 2079 | False | live]
; [else-branch: 2079 | True | live]
(push) ; 16
; [then-branch: 2079 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2079 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert p2_13@700@01)
(pop) ; 8
; [eval] !(p2_13 && !ret2_6)
; [eval] p2_13 && !ret2_6
(push) ; 8
; [then-branch: 2080 | !(p2_13@700@01) | live]
; [else-branch: 2080 | p2_13@700@01 | live]
(push) ; 9
; [then-branch: 2080 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2080 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] !ret2_6
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_13@700@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2081 | !(p2_13@700@01) | dead]
; [else-branch: 2081 | p2_13@700@01 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 2081 | p2_13@700@01]
(assert p2_13@700@01)
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 2056 | p2_14@735@01]
(assert p2_14@735@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 2027 | !(p1_14@734@01)]
(assert (not p1_14@734@01))
(pop) ; 5
; [eval] !(p1_14 && !ret1_6)
; [eval] p1_14 && !ret1_6
(push) ; 5
; [then-branch: 2082 | !(p1_14@734@01) | live]
; [else-branch: 2082 | p1_14@734@01 | live]
(push) ; 6
; [then-branch: 2082 | !(p1_14@734@01)]
(assert (not p1_14@734@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2082 | p1_14@734@01]
(assert p1_14@734@01)
; [eval] !ret1_6
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not p1_14@734@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_14@734@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2083 | !(p1_14@734@01) | live]
; [else-branch: 2083 | p1_14@734@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2083 | !(p1_14@734@01)]
(assert (not p1_14@734@01))
; [eval] p2_14 && !ret2_6
(push) ; 6
; [then-branch: 2084 | !(p2_14@735@01) | live]
; [else-branch: 2084 | p2_14@735@01 | live]
(push) ; 7
; [then-branch: 2084 | !(p2_14@735@01)]
(assert (not p2_14@735@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2084 | p2_14@735@01]
(assert p2_14@735@01)
; [eval] !ret2_6
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_14@735@01 (not p2_14@735@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_14@735@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not p2_14@735@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2085 | p2_14@735@01 | live]
; [else-branch: 2085 | !(p2_14@735@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2085 | p2_14@735@01]
(assert p2_14@735@01)
; [exec]
; _res_7 := __prim__int___box__(int___add__(int___unbox__(x_5_0), int___unbox__(secret_18_0)))
; [eval] __prim__int___box__(int___add__(int___unbox__(x_5_0), int___unbox__(secret_18_0)))
; [eval] int___add__(int___unbox__(x_5_0), int___unbox__(secret_18_0))
; [eval] int___unbox__(x_5_0)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> x_1_0@710@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_1_0@710@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit x_1_0@710@01))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_1_0@710@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit x_1_0@710@01)))
; [eval] int___unbox__(secret_18_0)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> secret_6_0@708@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_6_0@708@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit secret_6_0@708@01))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_6_0@708@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit secret_6_0@708@01)))
(push) ; 7
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_1_0@710@01) (int___unbox__ $Snap.unit secret_6_0@708@01)))
(pop) ; 7
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_1_0@710@01) (int___unbox__ $Snap.unit secret_6_0@708@01)))
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_1_0@710@01) (int___unbox__ $Snap.unit secret_6_0@708@01))))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_1_0@710@01) (int___unbox__ $Snap.unit secret_6_0@708@01))))
(declare-const _res_7@740@01 $Ref)
(assert (=
  _res_7@740@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_1_0@710@01) (int___unbox__ $Snap.unit secret_6_0@708@01)))))
; [exec]
; ret2_6 := true
; [eval] p1_13 && !ret1_6
(push) ; 7
; [then-branch: 2086 | !(p1_13@699@01) | live]
; [else-branch: 2086 | p1_13@699@01 | live]
(push) ; 8
; [then-branch: 2086 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2086 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] !ret1_6
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not p1_13@699@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2087 | p1_13@699@01 | live]
; [else-branch: 2087 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2087 | p1_13@699@01]
(assert p1_13@699@01)
; [exec]
; _res := x_5
; [exec]
; ret1_6 := true
; [eval] p2_13 && !ret2_6
(push) ; 8
; [then-branch: 2088 | !(p2_13@700@01) | live]
; [else-branch: 2088 | p2_13@700@01 | live]
(push) ; 9
; [then-branch: 2088 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2088 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] !ret2_6
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 2089 | False | dead]
; [else-branch: 2089 | True | live]
(push) ; 8
; [else-branch: 2089 | True]
(pop) ; 8
; [eval] !(p2_13 && !ret2_6)
; [eval] p2_13 && !ret2_6
(push) ; 8
; [then-branch: 2090 | !(p2_13@700@01) | live]
; [else-branch: 2090 | p2_13@700@01 | live]
(push) ; 9
; [then-branch: 2090 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2090 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] !ret2_6
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2091 | True | live]
; [else-branch: 2091 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2091 | True]
; [exec]
; assert true
; [eval] p1_13 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2092 | p1_13@699@01 | live]
; [else-branch: 2092 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2092 | p1_13@699@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_13 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not p2_13@700@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2093 | p2_13@700@01 | live]
; [else-branch: 2093 | !(p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2093 | p2_13@700@01]
(assert p2_13@700@01)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert p2_13@700@01)
; [eval] p1_13 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2094 | p1_13@699@01 | live]
; [else-branch: 2094 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2094 | p1_13@699@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_13 ==> issubtype(typeof(_res_7), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2095 | p2_13@700@01 | live]
; [else-branch: 2095 | !(p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2095 | p2_13@700@01]
; [eval] issubtype(typeof(_res_7), int())
; [eval] typeof(_res_7)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p2_13@700@01
  (issubtype<Bool> (typeof<PyType> _res_7@740@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_13@700@01
  (issubtype<Bool> (typeof<PyType> _res_7@740@01) (as int<PyType>  PyType))))
; [eval] (p1_13 && p2_13 ==> x_1 == x_1_0) ==> p1_13 && p2_13 ==> int___eq__(_res, _res_7)
; [eval] p1_13 && p2_13 ==> x_1 == x_1_0
; [eval] p1_13 && p2_13
(push) ; 9
; [then-branch: 2096 | !(p1_13@699@01) | live]
; [else-branch: 2096 | p1_13@699@01 | live]
(push) ; 10
; [then-branch: 2096 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2096 | p1_13@699@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_13@699@01 p2_13@700@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_13@699@01 p2_13@700@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2097 | p1_13@699@01 && p2_13@700@01 | live]
; [else-branch: 2097 | !(p1_13@699@01 && p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2097 | p1_13@699@01 && p2_13@700@01]
(assert (and p1_13@699@01 p2_13@700@01))
; [eval] x_1 == x_1_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and p1_13@699@01 p2_13@700@01))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2098 | p1_13@699@01 && p2_13@700@01 ==> x_1@709@01 == x_1_0@710@01 | live]
; [else-branch: 2098 | !(p1_13@699@01 && p2_13@700@01 ==> x_1@709@01 == x_1_0@710@01) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2098 | p1_13@699@01 && p2_13@700@01 ==> x_1@709@01 == x_1_0@710@01]
(assert (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01)))
; [eval] p1_13 && p2_13 ==> int___eq__(_res, _res_7)
; [eval] p1_13 && p2_13
(push) ; 11
; [then-branch: 2099 | !(p1_13@699@01) | live]
; [else-branch: 2099 | p1_13@699@01 | live]
(push) ; 12
; [then-branch: 2099 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 12
(push) ; 12
; [else-branch: 2099 | p1_13@699@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (and p1_13@699@01 p2_13@700@01))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and p1_13@699@01 p2_13@700@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2100 | p1_13@699@01 && p2_13@700@01 | live]
; [else-branch: 2100 | !(p1_13@699@01 && p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2100 | p1_13@699@01 && p2_13@700@01]
(assert (and p1_13@699@01 p2_13@700@01))
; [eval] int___eq__(_res, _res_7)
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> x_1@709@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_1@709@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> _res_7@740@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res_7@740@01) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_1@709@01 _res_7@740@01))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_1@709@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> _res_7@740@01) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_1@709@01 _res_7@740@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and p1_13@699@01 p2_13@700@01)
  (and
    p1_13@699@01
    p2_13@700@01
    (issubtype<Bool> (typeof<PyType> x_1@709@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> _res_7@740@01) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_1@709@01 _res_7@740@01))))
(assert (and p1_13@699@01 p2_13@700@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2098 | !(p1_13@699@01 && p2_13@700@01 ==> x_1@709@01 == x_1_0@710@01)]
(assert (not (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))
  (and
    (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))
    (=>
      (and p1_13@699@01 p2_13@700@01)
      (and
        p1_13@699@01
        p2_13@700@01
        (issubtype<Bool> (typeof<PyType> x_1@709@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> _res_7@740@01) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_1@709@01 _res_7@740@01)))
    p1_13@699@01
    p2_13@700@01)))
; Joined path conditions
(assert (or
  (not (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01)))
  (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))))
(push) ; 9
(assert (not (=>
  (and
    (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))
    (and p1_13@699@01 p2_13@700@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) x_1@709@01 _res_7@740@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))
    (and p1_13@699@01 p2_13@700@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) x_1@709@01 _res_7@740@01)))
; [eval] p1_13 ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not p1_13@699@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2101 | p1_13@699@01 | live]
; [else-branch: 2101 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2101 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
(push) ; 11
; [then-branch: 2102 | False | live]
; [else-branch: 2102 | True | live]
(push) ; 12
; [then-branch: 2102 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2102 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
(push) ; 13
; [then-branch: 2103 | False | live]
; [else-branch: 2103 | True | live]
(push) ; 14
; [then-branch: 2103 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2103 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 2104 | False | live]
; [else-branch: 2104 | True | live]
(push) ; 16
; [then-branch: 2104 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2104 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert p1_13@699@01)
; [eval] p2_13 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not p2_13@700@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2105 | p2_13@700@01 | live]
; [else-branch: 2105 | !(p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2105 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false)
(push) ; 11
; [then-branch: 2106 | False | live]
; [else-branch: 2106 | True | live]
(push) ; 12
; [then-branch: 2106 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2106 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false)
(push) ; 13
; [then-branch: 2107 | False | live]
; [else-branch: 2107 | True | live]
(push) ; 14
; [then-branch: 2107 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2107 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false)
(push) ; 15
; [then-branch: 2108 | False | live]
; [else-branch: 2108 | True | live]
(push) ; 16
; [then-branch: 2108 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2108 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert p2_13@700@01)
(pop) ; 8
(pop) ; 7
; [eval] !(p1_13 && !ret1_6)
; [eval] p1_13 && !ret1_6
(push) ; 7
; [then-branch: 2109 | !(p1_13@699@01) | live]
; [else-branch: 2109 | p1_13@699@01 | live]
(push) ; 8
; [then-branch: 2109 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2109 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] !ret1_6
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_13@699@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2110 | !(p1_13@699@01) | dead]
; [else-branch: 2110 | p1_13@699@01 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 2110 | p1_13@699@01]
(assert p1_13@699@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 2085 | !(p2_14@735@01)]
(assert (not p2_14@735@01))
(pop) ; 6
; [eval] !(p2_14 && !ret2_6)
; [eval] p2_14 && !ret2_6
(push) ; 6
; [then-branch: 2111 | !(p2_14@735@01) | live]
; [else-branch: 2111 | p2_14@735@01 | live]
(push) ; 7
; [then-branch: 2111 | !(p2_14@735@01)]
(assert (not p2_14@735@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2111 | p2_14@735@01]
(assert p2_14@735@01)
; [eval] !ret2_6
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_14@735@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_14@735@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2112 | !(p2_14@735@01) | live]
; [else-branch: 2112 | p2_14@735@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2112 | !(p2_14@735@01)]
(assert (not p2_14@735@01))
; [eval] p1_13 && !ret1_6
(push) ; 7
; [then-branch: 2113 | !(p1_13@699@01) | live]
; [else-branch: 2113 | p1_13@699@01 | live]
(push) ; 8
; [then-branch: 2113 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2113 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] !ret1_6
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not p1_13@699@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2114 | p1_13@699@01 | live]
; [else-branch: 2114 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2114 | p1_13@699@01]
(assert p1_13@699@01)
; [exec]
; _res := x_5
; [exec]
; ret1_6 := true
; [eval] p2_13 && !ret2_6
(push) ; 8
; [then-branch: 2115 | !(p2_13@700@01) | live]
; [else-branch: 2115 | p2_13@700@01 | live]
(push) ; 9
; [then-branch: 2115 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2115 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] !ret2_6
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not p2_13@700@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2116 | p2_13@700@01 | live]
; [else-branch: 2116 | !(p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2116 | p2_13@700@01]
(assert p2_13@700@01)
; [exec]
; _res_7 := x_5_0
; [exec]
; ret2_6 := true
; [exec]
; assert true
; [eval] p1_13 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2117 | p1_13@699@01 | live]
; [else-branch: 2117 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2117 | p1_13@699@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_13 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2118 | p2_13@700@01 | live]
; [else-branch: 2118 | !(p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2118 | p2_13@700@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_13 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2119 | p1_13@699@01 | live]
; [else-branch: 2119 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2119 | p1_13@699@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_13 ==> issubtype(typeof(_res_7), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2120 | p2_13@700@01 | live]
; [else-branch: 2120 | !(p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2120 | p2_13@700@01]
; [eval] issubtype(typeof(_res_7), int())
; [eval] typeof(_res_7)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] (p1_13 && p2_13 ==> x_1 == x_1_0) ==> p1_13 && p2_13 ==> int___eq__(_res, _res_7)
; [eval] p1_13 && p2_13 ==> x_1 == x_1_0
; [eval] p1_13 && p2_13
(push) ; 9
; [then-branch: 2121 | !(p1_13@699@01) | live]
; [else-branch: 2121 | p1_13@699@01 | live]
(push) ; 10
; [then-branch: 2121 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2121 | p1_13@699@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_13@699@01 p2_13@700@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_13@699@01 p2_13@700@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2122 | p1_13@699@01 && p2_13@700@01 | live]
; [else-branch: 2122 | !(p1_13@699@01 && p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2122 | p1_13@699@01 && p2_13@700@01]
(assert (and p1_13@699@01 p2_13@700@01))
; [eval] x_1 == x_1_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and p1_13@699@01 p2_13@700@01))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2123 | p1_13@699@01 && p2_13@700@01 ==> x_1@709@01 == x_1_0@710@01 | live]
; [else-branch: 2123 | !(p1_13@699@01 && p2_13@700@01 ==> x_1@709@01 == x_1_0@710@01) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2123 | p1_13@699@01 && p2_13@700@01 ==> x_1@709@01 == x_1_0@710@01]
(assert (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01)))
; [eval] p1_13 && p2_13 ==> int___eq__(_res, _res_7)
; [eval] p1_13 && p2_13
(push) ; 11
; [then-branch: 2124 | !(p1_13@699@01) | live]
; [else-branch: 2124 | p1_13@699@01 | live]
(push) ; 12
; [then-branch: 2124 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 12
(push) ; 12
; [else-branch: 2124 | p1_13@699@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (and p1_13@699@01 p2_13@700@01))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and p1_13@699@01 p2_13@700@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2125 | p1_13@699@01 && p2_13@700@01 | live]
; [else-branch: 2125 | !(p1_13@699@01 && p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2125 | p1_13@699@01 && p2_13@700@01]
(assert (and p1_13@699@01 p2_13@700@01))
; [eval] int___eq__(_res, _res_7)
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> x_1@709@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_1@709@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> x_1_0@710@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_1_0@710@01) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_1@709@01 x_1_0@710@01))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_1@709@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> x_1_0@710@01) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_1@709@01 x_1_0@710@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and p1_13@699@01 p2_13@700@01)
  (and
    p1_13@699@01
    p2_13@700@01
    (issubtype<Bool> (typeof<PyType> x_1@709@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> x_1_0@710@01) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_1@709@01 x_1_0@710@01))))
(assert (and p1_13@699@01 p2_13@700@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2123 | !(p1_13@699@01 && p2_13@700@01 ==> x_1@709@01 == x_1_0@710@01)]
(assert (not (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))
  (and
    (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))
    (=>
      (and p1_13@699@01 p2_13@700@01)
      (and
        p1_13@699@01
        p2_13@700@01
        (issubtype<Bool> (typeof<PyType> x_1@709@01) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> x_1_0@710@01) (as int<PyType>  PyType))
        (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) x_1@709@01 x_1_0@710@01)))
    p1_13@699@01
    p2_13@700@01)))
; Joined path conditions
(assert (or
  (not (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01)))
  (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))))
(push) ; 9
(assert (not (=>
  (and
    (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))
    (and p1_13@699@01 p2_13@700@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) x_1@709@01 x_1_0@710@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (=> (and p1_13@699@01 p2_13@700@01) (= x_1@709@01 x_1_0@710@01))
    (and p1_13@699@01 p2_13@700@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) x_1@709@01 x_1_0@710@01)))
; [eval] p1_13 ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not p1_13@699@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2126 | p1_13@699@01 | live]
; [else-branch: 2126 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2126 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
(push) ; 11
; [then-branch: 2127 | False | live]
; [else-branch: 2127 | True | live]
(push) ; 12
; [then-branch: 2127 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2127 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
(push) ; 13
; [then-branch: 2128 | False | live]
; [else-branch: 2128 | True | live]
(push) ; 14
; [then-branch: 2128 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2128 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 2129 | False | live]
; [else-branch: 2129 | True | live]
(push) ; 16
; [then-branch: 2129 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2129 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert p1_13@699@01)
; [eval] p2_13 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not p2_13@700@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2130 | p2_13@700@01 | live]
; [else-branch: 2130 | !(p2_13@700@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2130 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false)
(push) ; 11
; [then-branch: 2131 | False | live]
; [else-branch: 2131 | True | live]
(push) ; 12
; [then-branch: 2131 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2131 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false)
(push) ; 13
; [then-branch: 2132 | False | live]
; [else-branch: 2132 | True | live]
(push) ; 14
; [then-branch: 2132 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2132 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false)
(push) ; 15
; [then-branch: 2133 | False | live]
; [else-branch: 2133 | True | live]
(push) ; 16
; [then-branch: 2133 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2133 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert p2_13@700@01)
(pop) ; 8
; [eval] !(p2_13 && !ret2_6)
; [eval] p2_13 && !ret2_6
(push) ; 8
; [then-branch: 2134 | !(p2_13@700@01) | live]
; [else-branch: 2134 | p2_13@700@01 | live]
(push) ; 9
; [then-branch: 2134 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2134 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] !ret2_6
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_13@700@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2135 | !(p2_13@700@01) | dead]
; [else-branch: 2135 | p2_13@700@01 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 2135 | p2_13@700@01]
(assert p2_13@700@01)
(pop) ; 8
(pop) ; 7
; [eval] !(p1_13 && !ret1_6)
; [eval] p1_13 && !ret1_6
(push) ; 7
; [then-branch: 2136 | !(p1_13@699@01) | live]
; [else-branch: 2136 | p1_13@699@01 | live]
(push) ; 8
; [then-branch: 2136 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2136 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] !ret1_6
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_13@699@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2137 | !(p1_13@699@01) | dead]
; [else-branch: 2137 | p1_13@699@01 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 2137 | p1_13@699@01]
(assert p1_13@699@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 2112 | p2_14@735@01]
(assert p2_14@735@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 2083 | p1_14@734@01]
(assert p1_14@734@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 2017 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
(pop) ; 4
; [eval] !(p2_13 && !ret2_6)
; [eval] p2_13 && !ret2_6
(push) ; 4
; [then-branch: 2138 | !(p2_13@700@01) | live]
; [else-branch: 2138 | p2_13@700@01 | live]
(push) ; 5
; [then-branch: 2138 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
(pop) ; 5
(push) ; 5
; [else-branch: 2138 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] !ret2_6
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not p2_13@700@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_13@700@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2139 | !(p2_13@700@01) | live]
; [else-branch: 2139 | p2_13@700@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2139 | !(p2_13@700@01)]
(assert (not p2_13@700@01))
; [exec]
; p1_14 := p1_13 &&
;   (!ret1_6 && int___eq__(secret_18, __prim__int___box__(0)))
; [eval] p1_13 && (!ret1_6 && int___eq__(secret_18, __prim__int___box__(0)))
(push) ; 5
; [then-branch: 2140 | !(p1_13@699@01) | live]
; [else-branch: 2140 | p1_13@699@01 | live]
(push) ; 6
; [then-branch: 2140 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2140 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] !ret1_6
(push) ; 7
; [then-branch: 2141 | False | live]
; [else-branch: 2141 | True | live]
(push) ; 8
; [then-branch: 2141 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2141 | True]
; [eval] int___eq__(secret_18, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_6@707@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_6@707@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 0)
  (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_6@707@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_13@699@01
  (and
    p1_13@699@01
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_6@707@01 (__prim__int___box__ $Snap.unit 0)))))
(declare-const p1_14@741@01 Bool)
(assert (=
  p1_14@741@01
  (and
    p1_13@699@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) secret_6@707@01 (__prim__int___box__ $Snap.unit 0)))))
; [exec]
; p2_14 := p2_13 &&
;   (!ret2_6 && int___eq__(secret_18_0, __prim__int___box__(0)))
; [eval] p2_13 && (!ret2_6 && int___eq__(secret_18_0, __prim__int___box__(0)))
(push) ; 5
; [then-branch: 2142 | !(p2_13@700@01) | live]
; [else-branch: 2142 | p2_13@700@01 | live]
(push) ; 6
; [then-branch: 2142 | !(p2_13@700@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 2142 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] !ret2_6
(push) ; 7
; [then-branch: 2143 | False | live]
; [else-branch: 2143 | True | live]
(push) ; 8
; [then-branch: 2143 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2143 | True]
; [eval] int___eq__(secret_18_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_18_0@722@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_18_0@722@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_18_0@722@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_18_0@722@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_18_0@722@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 0)
  (issubtype<Bool> (typeof<PyType> secret_18_0@722@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_18_0@722@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_13@700@01
  (and
    p2_13@700@01
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> secret_18_0@722@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_18_0@722@01 (__prim__int___box__ $Snap.unit 0)))))
(declare-const p2_14@742@01 Bool)
(assert (=
  p2_14@742@01
  (and
    p2_13@700@01
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) secret_18_0@722@01 (__prim__int___box__ $Snap.unit 0)))))
; [exec]
; p3_6 := p1_13 &&
;   (!ret1_6 && !int___eq__(secret_18, __prim__int___box__(0)))
; [eval] p1_13 && (!ret1_6 && !int___eq__(secret_18, __prim__int___box__(0)))
(push) ; 5
; [then-branch: 2144 | !(p1_13@699@01) | live]
; [else-branch: 2144 | p1_13@699@01 | live]
(push) ; 6
; [then-branch: 2144 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2144 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] !ret1_6
(push) ; 7
; [then-branch: 2145 | False | live]
; [else-branch: 2145 | True | live]
(push) ; 8
; [then-branch: 2145 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2145 | True]
; [eval] !int___eq__(secret_18, __prim__int___box__(0))
; [eval] int___eq__(secret_18, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_6@707@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_6@707@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 0)
  (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_6@707@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p3_6@743@01 Bool)
(assert (=
  p3_6@743@01
  (and
    p1_13@699@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) secret_6@707@01 (__prim__int___box__ $Snap.unit 0))))))
; [exec]
; p4_6 := p2_13 &&
;   (!ret2_6 && !int___eq__(secret_18_0, __prim__int___box__(0)))
; [eval] p2_13 && (!ret2_6 && !int___eq__(secret_18_0, __prim__int___box__(0)))
(push) ; 5
; [then-branch: 2146 | !(p2_13@700@01) | live]
; [else-branch: 2146 | p2_13@700@01 | live]
(push) ; 6
; [then-branch: 2146 | !(p2_13@700@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 2146 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] !ret2_6
(push) ; 7
; [then-branch: 2147 | False | live]
; [else-branch: 2147 | True | live]
(push) ; 8
; [then-branch: 2147 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2147 | True]
; [eval] !int___eq__(secret_18_0, __prim__int___box__(0))
; [eval] int___eq__(secret_18_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_18_0@722@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_18_0@722@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_18_0@722@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_18_0@722@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_18_0@722@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 0)
  (issubtype<Bool> (typeof<PyType> secret_18_0@722@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) secret_18_0@722@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p4_6@744@01 Bool)
(assert (=
  p4_6@744@01
  (and
    p2_13@700@01
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) secret_18_0@722@01 (__prim__int___box__ $Snap.unit 0))))))
; [eval] p1_14 && !ret1_6
(push) ; 5
; [then-branch: 2148 | !(p1_14@741@01) | live]
; [else-branch: 2148 | p1_14@741@01 | live]
(push) ; 6
; [then-branch: 2148 | !(p1_14@741@01)]
(assert (not p1_14@741@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2148 | p1_14@741@01]
(assert p1_14@741@01)
; [eval] !ret1_6
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_14@741@01 (not p1_14@741@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_14@741@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not p1_14@741@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2149 | p1_14@741@01 | live]
; [else-branch: 2149 | !(p1_14@741@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2149 | p1_14@741@01]
(assert p1_14@741@01)
; [exec]
; _res := __prim__int___box__(int___add__(int___unbox__(x_5), int___unbox__(secret_18)))
; [eval] __prim__int___box__(int___add__(int___unbox__(x_5), int___unbox__(secret_18)))
; [eval] int___add__(int___unbox__(x_5), int___unbox__(secret_18))
; [eval] int___unbox__(x_5)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> x_1@709@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_1@709@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit x_1@709@01))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> x_1@709@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit x_1@709@01)))
; [eval] int___unbox__(secret_18)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit secret_6@707@01))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_6@707@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit secret_6@707@01)))
(push) ; 6
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_1@709@01) (int___unbox__ $Snap.unit secret_6@707@01)))
(pop) ; 6
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_1@709@01) (int___unbox__ $Snap.unit secret_6@707@01)))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_1@709@01) (int___unbox__ $Snap.unit secret_6@707@01))))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_1@709@01) (int___unbox__ $Snap.unit secret_6@707@01))))
(declare-const _res@745@01 $Ref)
(assert (=
  _res@745@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_1@709@01) (int___unbox__ $Snap.unit secret_6@707@01)))))
; [exec]
; ret1_6 := true
; [eval] p2_14 && !ret2_6
(push) ; 6
; [then-branch: 2150 | !(p2_14@742@01) | live]
; [else-branch: 2150 | p2_14@742@01 | live]
(push) ; 7
; [then-branch: 2150 | !(p2_14@742@01)]
(assert (not p2_14@742@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2150 | p2_14@742@01]
(assert p2_14@742@01)
; [eval] !ret2_6
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_14@742@01 (not p2_14@742@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_14@742@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2151 | p2_14@742@01 | dead]
; [else-branch: 2151 | !(p2_14@742@01) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 2151 | !(p2_14@742@01)]
(assert (not p2_14@742@01))
(pop) ; 6
; [eval] !(p2_14 && !ret2_6)
; [eval] p2_14 && !ret2_6
(push) ; 6
; [then-branch: 2152 | !(p2_14@742@01) | live]
; [else-branch: 2152 | p2_14@742@01 | live]
(push) ; 7
; [then-branch: 2152 | !(p2_14@742@01)]
(assert (not p2_14@742@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2152 | p2_14@742@01]
(assert p2_14@742@01)
; [eval] !ret2_6
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_14@742@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_14@742@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2153 | !(p2_14@742@01) | live]
; [else-branch: 2153 | p2_14@742@01 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2153 | !(p2_14@742@01)]
(assert (not p2_14@742@01))
; [eval] p1_13 && !ret1_6
(push) ; 7
; [then-branch: 2154 | !(p1_13@699@01) | live]
; [else-branch: 2154 | p1_13@699@01 | live]
(push) ; 8
; [then-branch: 2154 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2154 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] !ret1_6
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 2155 | False | dead]
; [else-branch: 2155 | True | live]
(push) ; 7
; [else-branch: 2155 | True]
(pop) ; 7
; [eval] !(p1_13 && !ret1_6)
; [eval] p1_13 && !ret1_6
(push) ; 7
; [then-branch: 2156 | !(p1_13@699@01) | live]
; [else-branch: 2156 | p1_13@699@01 | live]
(push) ; 8
; [then-branch: 2156 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2156 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] !ret1_6
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2157 | True | live]
; [else-branch: 2157 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2157 | True]
; [eval] p2_13 && !ret2_6
(push) ; 8
; [then-branch: 2158 | !(p2_13@700@01) | live]
; [else-branch: 2158 | p2_13@700@01 | live]
(push) ; 9
; [then-branch: 2158 | !(p2_13@700@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 2158 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] !ret2_6
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 2159 | p2_13@700@01 | dead]
; [else-branch: 2159 | !(p2_13@700@01) | live]
(push) ; 8
; [else-branch: 2159 | !(p2_13@700@01)]
(pop) ; 8
; [eval] !(p2_13 && !ret2_6)
; [eval] p2_13 && !ret2_6
(push) ; 8
; [then-branch: 2160 | !(p2_13@700@01) | live]
; [else-branch: 2160 | p2_13@700@01 | live]
(push) ; 9
; [then-branch: 2160 | !(p2_13@700@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 2160 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] !ret2_6
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_13@700@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2161 | !(p2_13@700@01) | live]
; [else-branch: 2161 | p2_13@700@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2161 | !(p2_13@700@01)]
; [exec]
; assert true
; [eval] p1_13 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not p1_13@699@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2162 | p1_13@699@01 | live]
; [else-branch: 2162 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2162 | p1_13@699@01]
(assert p1_13@699@01)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert p1_13@699@01)
; [eval] p2_13 ==> true
(push) ; 9
; [then-branch: 2163 | p2_13@700@01 | dead]
; [else-branch: 2163 | !(p2_13@700@01) | live]
(push) ; 10
; [else-branch: 2163 | !(p2_13@700@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_13 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2164 | p1_13@699@01 | live]
; [else-branch: 2164 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2164 | p1_13@699@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p1_13@699@01
  (issubtype<Bool> (typeof<PyType> _res@745@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_13@699@01
  (issubtype<Bool> (typeof<PyType> _res@745@01) (as int<PyType>  PyType))))
; [eval] p2_13 ==> issubtype(typeof(_res_7), int())
(push) ; 9
; [then-branch: 2165 | p2_13@700@01 | dead]
; [else-branch: 2165 | !(p2_13@700@01) | live]
(push) ; 10
; [else-branch: 2165 | !(p2_13@700@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] (p1_13 && p2_13 ==> x_1 == x_1_0) ==> p1_13 && p2_13 ==> int___eq__(_res, _res_7)
; [eval] p1_13 && p2_13 ==> x_1 == x_1_0
; [eval] p1_13 && p2_13
(push) ; 9
; [then-branch: 2166 | !(p1_13@699@01) | live]
; [else-branch: 2166 | p1_13@699@01 | live]
(push) ; 10
; [then-branch: 2166 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2166 | p1_13@699@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_13@699@01 p2_13@700@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2167 | p1_13@699@01 && p2_13@700@01 | dead]
; [else-branch: 2167 | !(p1_13@699@01 && p2_13@700@01) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 2167 | !(p1_13@699@01 && p2_13@700@01)]
(assert (not (and p1_13@699@01 p2_13@700@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not (and p1_13@699@01 p2_13@700@01)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2168 | True | live]
; [else-branch: 2168 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2168 | True]
; [eval] p1_13 && p2_13 ==> int___eq__(_res, _res_7)
; [eval] p1_13 && p2_13
(push) ; 11
; [then-branch: 2169 | !(p1_13@699@01) | live]
; [else-branch: 2169 | p1_13@699@01 | live]
(push) ; 12
; [then-branch: 2169 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 12
(push) ; 12
; [else-branch: 2169 | p1_13@699@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 2170 | p1_13@699@01 && p2_13@700@01 | dead]
; [else-branch: 2170 | !(p1_13@699@01 && p2_13@700@01) | live]
(push) ; 12
; [else-branch: 2170 | !(p1_13@699@01 && p2_13@700@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_13 ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2171 | p1_13@699@01 | live]
; [else-branch: 2171 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2171 | p1_13@699@01]
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
(push) ; 11
; [then-branch: 2172 | False | live]
; [else-branch: 2172 | True | live]
(push) ; 12
; [then-branch: 2172 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2172 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
(push) ; 13
; [then-branch: 2173 | False | live]
; [else-branch: 2173 | True | live]
(push) ; 14
; [then-branch: 2173 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2173 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 2174 | False | live]
; [else-branch: 2174 | True | live]
(push) ; 16
; [then-branch: 2174 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2174 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_13 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
(push) ; 9
; [then-branch: 2175 | p2_13@700@01 | dead]
; [else-branch: 2175 | !(p2_13@700@01) | live]
(push) ; 10
; [else-branch: 2175 | !(p2_13@700@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 2149 | !(p1_14@741@01)]
(assert (not p1_14@741@01))
(pop) ; 5
; [eval] !(p1_14 && !ret1_6)
; [eval] p1_14 && !ret1_6
(push) ; 5
; [then-branch: 2176 | !(p1_14@741@01) | live]
; [else-branch: 2176 | p1_14@741@01 | live]
(push) ; 6
; [then-branch: 2176 | !(p1_14@741@01)]
(assert (not p1_14@741@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2176 | p1_14@741@01]
(assert p1_14@741@01)
; [eval] !ret1_6
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not p1_14@741@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_14@741@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2177 | !(p1_14@741@01) | live]
; [else-branch: 2177 | p1_14@741@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2177 | !(p1_14@741@01)]
(assert (not p1_14@741@01))
; [eval] p2_14 && !ret2_6
(push) ; 6
; [then-branch: 2178 | !(p2_14@742@01) | live]
; [else-branch: 2178 | p2_14@742@01 | live]
(push) ; 7
; [then-branch: 2178 | !(p2_14@742@01)]
(assert (not p2_14@742@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2178 | p2_14@742@01]
(assert p2_14@742@01)
; [eval] !ret2_6
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_14@742@01 (not p2_14@742@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_14@742@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2179 | p2_14@742@01 | dead]
; [else-branch: 2179 | !(p2_14@742@01) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 2179 | !(p2_14@742@01)]
(assert (not p2_14@742@01))
(pop) ; 6
; [eval] !(p2_14 && !ret2_6)
; [eval] p2_14 && !ret2_6
(push) ; 6
; [then-branch: 2180 | !(p2_14@742@01) | live]
; [else-branch: 2180 | p2_14@742@01 | live]
(push) ; 7
; [then-branch: 2180 | !(p2_14@742@01)]
(assert (not p2_14@742@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2180 | p2_14@742@01]
(assert p2_14@742@01)
; [eval] !ret2_6
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_14@742@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_14@742@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2181 | !(p2_14@742@01) | live]
; [else-branch: 2181 | p2_14@742@01 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2181 | !(p2_14@742@01)]
(assert (not p2_14@742@01))
; [eval] p1_13 && !ret1_6
(push) ; 7
; [then-branch: 2182 | !(p1_13@699@01) | live]
; [else-branch: 2182 | p1_13@699@01 | live]
(push) ; 8
; [then-branch: 2182 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2182 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] !ret1_6
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not p1_13@699@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2183 | p1_13@699@01 | live]
; [else-branch: 2183 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2183 | p1_13@699@01]
(assert p1_13@699@01)
; [exec]
; _res := x_5
; [exec]
; ret1_6 := true
; [eval] p2_13 && !ret2_6
(push) ; 8
; [then-branch: 2184 | !(p2_13@700@01) | live]
; [else-branch: 2184 | p2_13@700@01 | live]
(push) ; 9
; [then-branch: 2184 | !(p2_13@700@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 2184 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] !ret2_6
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 2185 | p2_13@700@01 | dead]
; [else-branch: 2185 | !(p2_13@700@01) | live]
(push) ; 8
; [else-branch: 2185 | !(p2_13@700@01)]
(pop) ; 8
; [eval] !(p2_13 && !ret2_6)
; [eval] p2_13 && !ret2_6
(push) ; 8
; [then-branch: 2186 | !(p2_13@700@01) | live]
; [else-branch: 2186 | p2_13@700@01 | live]
(push) ; 9
; [then-branch: 2186 | !(p2_13@700@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 2186 | p2_13@700@01]
(assert p2_13@700@01)
; [eval] !ret2_6
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_13@700@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2187 | !(p2_13@700@01) | live]
; [else-branch: 2187 | p2_13@700@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2187 | !(p2_13@700@01)]
; [exec]
; assert true
; [eval] p1_13 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2188 | p1_13@699@01 | live]
; [else-branch: 2188 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2188 | p1_13@699@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_13 ==> true
(push) ; 9
; [then-branch: 2189 | p2_13@700@01 | dead]
; [else-branch: 2189 | !(p2_13@700@01) | live]
(push) ; 10
; [else-branch: 2189 | !(p2_13@700@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_13 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2190 | p1_13@699@01 | live]
; [else-branch: 2190 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2190 | p1_13@699@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_13 ==> issubtype(typeof(_res_7), int())
(push) ; 9
; [then-branch: 2191 | p2_13@700@01 | dead]
; [else-branch: 2191 | !(p2_13@700@01) | live]
(push) ; 10
; [else-branch: 2191 | !(p2_13@700@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] (p1_13 && p2_13 ==> x_1 == x_1_0) ==> p1_13 && p2_13 ==> int___eq__(_res, _res_7)
; [eval] p1_13 && p2_13 ==> x_1 == x_1_0
; [eval] p1_13 && p2_13
(push) ; 9
; [then-branch: 2192 | !(p1_13@699@01) | live]
; [else-branch: 2192 | p1_13@699@01 | live]
(push) ; 10
; [then-branch: 2192 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2192 | p1_13@699@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_13@699@01 p2_13@700@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2193 | p1_13@699@01 && p2_13@700@01 | dead]
; [else-branch: 2193 | !(p1_13@699@01 && p2_13@700@01) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 2193 | !(p1_13@699@01 && p2_13@700@01)]
(assert (not (and p1_13@699@01 p2_13@700@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not (and p1_13@699@01 p2_13@700@01)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2194 | True | live]
; [else-branch: 2194 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2194 | True]
; [eval] p1_13 && p2_13 ==> int___eq__(_res, _res_7)
; [eval] p1_13 && p2_13
(push) ; 11
; [then-branch: 2195 | !(p1_13@699@01) | live]
; [else-branch: 2195 | p1_13@699@01 | live]
(push) ; 12
; [then-branch: 2195 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 12
(push) ; 12
; [else-branch: 2195 | p1_13@699@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 2196 | p1_13@699@01 && p2_13@700@01 | dead]
; [else-branch: 2196 | !(p1_13@699@01 && p2_13@700@01) | live]
(push) ; 12
; [else-branch: 2196 | !(p1_13@699@01 && p2_13@700@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_13 ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_13@699@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2197 | p1_13@699@01 | live]
; [else-branch: 2197 | !(p1_13@699@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2197 | p1_13@699@01]
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
(push) ; 11
; [then-branch: 2198 | False | live]
; [else-branch: 2198 | True | live]
(push) ; 12
; [then-branch: 2198 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2198 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
(push) ; 13
; [then-branch: 2199 | False | live]
; [else-branch: 2199 | True | live]
(push) ; 14
; [then-branch: 2199 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2199 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 2200 | False | live]
; [else-branch: 2200 | True | live]
(push) ; 16
; [then-branch: 2200 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2200 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_13 ==> (forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false)))
(push) ; 9
; [then-branch: 2201 | p2_13@700@01 | dead]
; [else-branch: 2201 | !(p2_13@700@01) | live]
(push) ; 10
; [else-branch: 2201 | !(p2_13@700@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; [eval] !(p1_13 && !ret1_6)
; [eval] p1_13 && !ret1_6
(push) ; 7
; [then-branch: 2202 | !(p1_13@699@01) | live]
; [else-branch: 2202 | p1_13@699@01 | live]
(push) ; 8
; [then-branch: 2202 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2202 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] !ret1_6
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_13@699@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2203 | !(p1_13@699@01) | dead]
; [else-branch: 2203 | p1_13@699@01 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 2203 | p1_13@699@01]
(assert p1_13@699@01)
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 2177 | p1_14@741@01]
(assert p1_14@741@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 2139 | p2_13@700@01]
(assert p2_13@700@01)
(pop) ; 4
(pop) ; 3
; [eval] !(p1_13 && !ret1_6)
; [eval] p1_13 && !ret1_6
(push) ; 3
; [then-branch: 2204 | !(p1_13@699@01) | live]
; [else-branch: 2204 | p1_13@699@01 | live]
(push) ; 4
; [then-branch: 2204 | !(p1_13@699@01)]
(assert (not p1_13@699@01))
(pop) ; 4
(push) ; 4
; [else-branch: 2204 | p1_13@699@01]
(assert p1_13@699@01)
; [eval] !ret1_6
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not p1_13@699@01))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2205 | !(p1_13@699@01) | dead]
; [else-branch: 2205 | p1_13@699@01 | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 2205 | p1_13@699@01]
(assert p1_13@699@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- bool_int ----------
(declare-const p1_15@746@01 Bool)
(declare-const p2_15@747@01 Bool)
(declare-const _cthread_166@748@01 $Ref)
(declare-const _cthread_166_0@749@01 $Ref)
(declare-const _caller_measures_166@750@01 Seq<Measure$>)
(declare-const _caller_measures_166_0@751@01 Seq<Measure$>)
(declare-const _residue_166@752@01 $Perm)
(declare-const _residue_166_0@753@01 $Perm)
(declare-const secret_7@754@01 $Ref)
(declare-const secret_7_0@755@01 $Ref)
(declare-const _current_wait_level_166@756@01 $Perm)
(declare-const _current_wait_level_166_0@757@01 $Perm)
(declare-const _res@758@01 $Ref)
(declare-const _res_8@759@01 $Ref)
(declare-const p1_15@760@01 Bool)
(declare-const p2_15@761@01 Bool)
(declare-const _cthread_166@762@01 $Ref)
(declare-const _cthread_166_0@763@01 $Ref)
(declare-const _caller_measures_166@764@01 Seq<Measure$>)
(declare-const _caller_measures_166_0@765@01 Seq<Measure$>)
(declare-const _residue_166@766@01 $Perm)
(declare-const _residue_166_0@767@01 $Perm)
(declare-const secret_7@768@01 $Ref)
(declare-const secret_7_0@769@01 $Ref)
(declare-const _current_wait_level_166@770@01 $Perm)
(declare-const _current_wait_level_166_0@771@01 $Perm)
(declare-const _res@772@01 $Ref)
(declare-const _res_8@773@01 $Ref)
(push) ; 1
(declare-const $t@774@01 $Snap)
(assert (= $t@774@01 ($Snap.combine ($Snap.first $t@774@01) ($Snap.second $t@774@01))))
(assert (= ($Snap.first $t@774@01) $Snap.unit))
; [eval] p1_15 ==> _cthread_166 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_15@760@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_15@760@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2206 | p1_15@760@01 | live]
; [else-branch: 2206 | !(p1_15@760@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2206 | p1_15@760@01]
(assert p1_15@760@01)
; [eval] _cthread_166 != null
(pop) ; 3
(push) ; 3
; [else-branch: 2206 | !(p1_15@760@01)]
(assert (not p1_15@760@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_15@760@01) p1_15@760@01))
(assert (=> p1_15@760@01 (not (= _cthread_166@762@01 $Ref.null))))
(assert (=
  ($Snap.second $t@774@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@774@01))
    ($Snap.second ($Snap.second $t@774@01)))))
(assert (= ($Snap.first ($Snap.second $t@774@01)) $Snap.unit))
; [eval] p2_15 ==> _cthread_166_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_15@761@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_15@761@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2207 | p2_15@761@01 | live]
; [else-branch: 2207 | !(p2_15@761@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2207 | p2_15@761@01]
(assert p2_15@761@01)
; [eval] _cthread_166_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 2207 | !(p2_15@761@01)]
(assert (not p2_15@761@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_15@761@01) p2_15@761@01))
(assert (=> p2_15@761@01 (not (= _cthread_166_0@763@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@774@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@774@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@774@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@774@01))) $Snap.unit))
; [eval] p1_15 ==> issubtype(typeof(_cthread_166), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_15@760@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_15@760@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2208 | p1_15@760@01 | live]
; [else-branch: 2208 | !(p1_15@760@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2208 | p1_15@760@01]
(assert p1_15@760@01)
; [eval] issubtype(typeof(_cthread_166), Thread_0())
; [eval] typeof(_cthread_166)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 2208 | !(p1_15@760@01)]
(assert (not p1_15@760@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_15@760@01
  (issubtype<Bool> (typeof<PyType> _cthread_166@762@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@774@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@774@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@774@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@774@01))))
  $Snap.unit))
; [eval] p2_15 ==> issubtype(typeof(_cthread_166_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_15@761@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_15@761@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2209 | p2_15@761@01 | live]
; [else-branch: 2209 | !(p2_15@761@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2209 | p2_15@761@01]
(assert p2_15@761@01)
; [eval] issubtype(typeof(_cthread_166_0), Thread_0())
; [eval] typeof(_cthread_166_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 2209 | !(p2_15@761@01)]
(assert (not p2_15@761@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_15@761@01
  (issubtype<Bool> (typeof<PyType> _cthread_166_0@763@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@774@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@774@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@774@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@774@01)))))
  $Snap.unit))
; [eval] p1_15 ==> issubtype(typeof(secret_7), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_15@760@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_15@760@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2210 | p1_15@760@01 | live]
; [else-branch: 2210 | !(p1_15@760@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2210 | p1_15@760@01]
(assert p1_15@760@01)
; [eval] issubtype(typeof(secret_7), bool())
; [eval] typeof(secret_7)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 2210 | !(p1_15@760@01)]
(assert (not p1_15@760@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_15@760@01
  (issubtype<Bool> (typeof<PyType> secret_7@768@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@774@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@774@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@774@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@774@01))))))
  $Snap.unit))
; [eval] p2_15 ==> issubtype(typeof(secret_7_0), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_15@761@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_15@761@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2211 | p2_15@761@01 | live]
; [else-branch: 2211 | !(p2_15@761@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2211 | p2_15@761@01]
(assert p2_15@761@01)
; [eval] issubtype(typeof(secret_7_0), bool())
; [eval] typeof(secret_7_0)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 2211 | !(p2_15@761@01)]
(assert (not p2_15@761@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_15@761@01
  (issubtype<Bool> (typeof<PyType> secret_7_0@769@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@774@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@774@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@774@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@774@01)))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_15@760@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_15@760@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2212 | p1_15@760@01 | live]
; [else-branch: 2212 | !(p1_15@760@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2212 | p1_15@760@01]
(assert p1_15@760@01)
(pop) ; 3
(push) ; 3
; [else-branch: 2212 | !(p1_15@760@01)]
(assert (not p1_15@760@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@774@01)))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_15@761@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_15@761@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2213 | p2_15@761@01 | live]
; [else-branch: 2213 | !(p2_15@761@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2213 | p2_15@761@01]
(assert p2_15@761@01)
(pop) ; 3
(push) ; 3
; [else-branch: 2213 | !(p2_15@761@01)]
(assert (not p2_15@761@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@775@01 $Snap)
(assert (= $t@775@01 ($Snap.combine ($Snap.first $t@775@01) ($Snap.second $t@775@01))))
(assert (= ($Snap.first $t@775@01) $Snap.unit))
; [eval] p1_15 ==> (forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_166) && ((forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_166) && _residue_166 <= _current_wait_level_166)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_15@760@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_15@760@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2214 | p1_15@760@01 | live]
; [else-branch: 2214 | !(p1_15@760@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2214 | p1_15@760@01]
(assert p1_15@760@01)
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_166) && ((forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_166) && _residue_166 <= _current_wait_level_166)
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_166)
(push) ; 5
; [then-branch: 2215 | False | live]
; [else-branch: 2215 | True | live]
(push) ; 6
; [then-branch: 2215 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 2215 | True]
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_166)
(push) ; 7
; [then-branch: 2216 | False | live]
; [else-branch: 2216 | True | live]
(push) ; 8
; [then-branch: 2216 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2216 | True]
; [eval] _residue_166 <= _current_wait_level_166
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 2214 | !(p1_15@760@01)]
(assert (not p1_15@760@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p1_15@760@01 (<= _residue_166@766@01 _current_wait_level_166@770@01)))
(assert (=
  ($Snap.second $t@775@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@775@01))
    ($Snap.second ($Snap.second $t@775@01)))))
(assert (= ($Snap.first ($Snap.second $t@775@01)) $Snap.unit))
; [eval] p2_15 ==> (forperm _r_23: Ref [_r_23.MustReleaseBoundedp] :: Level(_r_23) <= _current_wait_level_166_0) && ((forperm _r_23: Ref [_r_23.MustReleaseUnboundedp] :: Level(_r_23) <= _current_wait_level_166_0) && _residue_166_0 <= _current_wait_level_166_0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_15@761@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_15@761@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2217 | p2_15@761@01 | live]
; [else-branch: 2217 | !(p2_15@761@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2217 | p2_15@761@01]
(assert p2_15@761@01)
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseBoundedp] :: Level(_r_23) <= _current_wait_level_166_0) && ((forperm _r_23: Ref [_r_23.MustReleaseUnboundedp] :: Level(_r_23) <= _current_wait_level_166_0) && _residue_166_0 <= _current_wait_level_166_0)
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseBoundedp] :: Level(_r_23) <= _current_wait_level_166_0)
(push) ; 5
; [then-branch: 2218 | False | live]
; [else-branch: 2218 | True | live]
(push) ; 6
; [then-branch: 2218 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 2218 | True]
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseUnboundedp] :: Level(_r_23) <= _current_wait_level_166_0)
(push) ; 7
; [then-branch: 2219 | False | live]
; [else-branch: 2219 | True | live]
(push) ; 8
; [then-branch: 2219 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2219 | True]
; [eval] _residue_166_0 <= _current_wait_level_166_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 2217 | !(p2_15@761@01)]
(assert (not p2_15@761@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p2_15@761@01 (<= _residue_166_0@767@01 _current_wait_level_166_0@771@01)))
(assert (=
  ($Snap.second ($Snap.second $t@775@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@775@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@775@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@775@01))) $Snap.unit))
; [eval] p1_15 ==> issubtype(typeof(_res), int())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_15@760@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_15@760@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2220 | p1_15@760@01 | live]
; [else-branch: 2220 | !(p1_15@760@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2220 | p1_15@760@01]
(assert p1_15@760@01)
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 2220 | !(p1_15@760@01)]
(assert (not p1_15@760@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_15@760@01
  (issubtype<Bool> (typeof<PyType> _res@772@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@775@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@775@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@775@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@775@01))))
  $Snap.unit))
; [eval] p2_15 ==> issubtype(typeof(_res_8), int())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_15@761@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_15@761@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2221 | p2_15@761@01 | live]
; [else-branch: 2221 | !(p2_15@761@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2221 | p2_15@761@01]
(assert p2_15@761@01)
; [eval] issubtype(typeof(_res_8), int())
; [eval] typeof(_res_8)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 2221 | !(p2_15@761@01)]
(assert (not p2_15@761@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_15@761@01
  (issubtype<Bool> (typeof<PyType> _res_8@773@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@775@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@775@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@775@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@775@01)))))
  $Snap.unit))
; [eval] p1_15 && p2_15 ==> _res == _res_8
; [eval] p1_15 && p2_15
(push) ; 3
; [then-branch: 2222 | !(p1_15@760@01) | live]
; [else-branch: 2222 | p1_15@760@01 | live]
(push) ; 4
; [then-branch: 2222 | !(p1_15@760@01)]
(assert (not p1_15@760@01))
(pop) ; 4
(push) ; 4
; [else-branch: 2222 | p1_15@760@01]
(assert p1_15@760@01)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1_15@760@01 (not p1_15@760@01)))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (and p1_15@760@01 p2_15@761@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and p1_15@760@01 p2_15@761@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2223 | p1_15@760@01 && p2_15@761@01 | live]
; [else-branch: 2223 | !(p1_15@760@01 && p2_15@761@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2223 | p1_15@760@01 && p2_15@761@01]
(assert (and p1_15@760@01 p2_15@761@01))
; [eval] _res == _res_8
(pop) ; 4
(push) ; 4
; [else-branch: 2223 | !(p1_15@760@01 && p2_15@761@01)]
(assert (not (and p1_15@760@01 p2_15@761@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (and p1_15@760@01 p2_15@761@01)) (and p1_15@760@01 p2_15@761@01)))
(assert (=> (and p1_15@760@01 p2_15@761@01) (= _res@772@01 _res_8@773@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@775@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@775@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@775@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@775@01))))))
  $Snap.unit))
; [eval] p1_15 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_15@760@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_15@760@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2224 | p1_15@760@01 | live]
; [else-branch: 2224 | !(p1_15@760@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2224 | p1_15@760@01]
(assert p1_15@760@01)
(pop) ; 4
(push) ; 4
; [else-branch: 2224 | !(p1_15@760@01)]
(assert (not p1_15@760@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@775@01))))))
  $Snap.unit))
; [eval] p2_15 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_15@761@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_15@761@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2225 | p2_15@761@01 | live]
; [else-branch: 2225 | !(p2_15@761@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2225 | p2_15@761@01]
(assert p2_15@761@01)
(pop) ; 4
(push) ; 4
; [else-branch: 2225 | !(p2_15@761@01)]
(assert (not p2_15@761@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
(push) ; 2
; [exec]
; var ret1_7: Bool
(declare-const ret1_7@776@01 Bool)
; [exec]
; var ret2_7: Bool
(declare-const ret2_7@777@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@778@01 $Ref)
; [exec]
; var _err_8: Ref
(declare-const _err_8@779@01 $Ref)
; [exec]
; var secret_19: Ref
(declare-const secret_19@780@01 $Ref)
; [exec]
; var secret_19_0: Ref
(declare-const secret_19_0@781@01 $Ref)
; [exec]
; var _cwl_166: Perm
(declare-const _cwl_166@782@01 $Perm)
; [exec]
; var _cwl_166_0: Perm
(declare-const _cwl_166_0@783@01 $Perm)
; [exec]
; var _method_measures_166: Seq[Measure$]
(declare-const _method_measures_166@784@01 Seq<Measure$>)
; [exec]
; var _method_measures_166_0: Seq[Measure$]
(declare-const _method_measures_166_0@785@01 Seq<Measure$>)
; [exec]
; var p1_16: Bool
(declare-const p1_16@786@01 Bool)
; [exec]
; var p2_16: Bool
(declare-const p2_16@787@01 Bool)
; [exec]
; var p3_7: Bool
(declare-const p3_7@788@01 Bool)
; [exec]
; var p4_7: Bool
(declare-const p4_7@789@01 Bool)
; [exec]
; inhale p1_15
(declare-const $t@790@01 $Snap)
(assert (= $t@790@01 $Snap.unit))
(assert p1_15@760@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ret1_7 := false
; [exec]
; ret2_7 := false
; [eval] p1_15 && !ret1_7
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2226 | !(p1_15@760@01) | live]
; [else-branch: 2226 | p1_15@760@01 | live]
(push) ; 4
; [then-branch: 2226 | !(p1_15@760@01)]
(assert (not p1_15@760@01))
(pop) ; 4
(push) ; 4
; [else-branch: 2226 | p1_15@760@01]
; [eval] !ret1_7
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1_15@760@01 (not p1_15@760@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_15@760@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2227 | p1_15@760@01 | live]
; [else-branch: 2227 | !(p1_15@760@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2227 | p1_15@760@01]
; [exec]
; _method_measures_166 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; secret_19 := secret_7
; [eval] p2_15 && !ret2_7
(push) ; 4
; [then-branch: 2228 | !(p2_15@761@01) | live]
; [else-branch: 2228 | p2_15@761@01 | live]
(push) ; 5
; [then-branch: 2228 | !(p2_15@761@01)]
(assert (not p2_15@761@01))
(pop) ; 5
(push) ; 5
; [else-branch: 2228 | p2_15@761@01]
(assert p2_15@761@01)
; [eval] !ret2_7
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or p2_15@761@01 (not p2_15@761@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_15@761@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_15@761@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2229 | p2_15@761@01 | live]
; [else-branch: 2229 | !(p2_15@761@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2229 | p2_15@761@01]
(assert p2_15@761@01)
; [exec]
; _method_measures_166_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res_8 := null
; [exec]
; _err_8 := null
; [exec]
; secret_19_0 := secret_7_0
; [exec]
; p1_16 := p1_15 && (!ret1_7 && bool___unbox__(secret_19))
; [eval] p1_15 && (!ret1_7 && bool___unbox__(secret_19))
(push) ; 5
; [then-branch: 2230 | !(p1_15@760@01) | live]
; [else-branch: 2230 | p1_15@760@01 | live]
(push) ; 6
; [then-branch: 2230 | !(p1_15@760@01)]
(assert (not p1_15@760@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2230 | p1_15@760@01]
; [eval] !ret1_7
(push) ; 7
; [then-branch: 2231 | False | live]
; [else-branch: 2231 | True | live]
(push) ; 8
; [then-branch: 2231 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2231 | True]
; [eval] bool___unbox__(secret_19)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_7@768@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_7@768@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_7@768@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_7@768@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_7@768@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_7@768@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_7@768@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_15@760@01
  (and
    (issubtype<Bool> (typeof<PyType> secret_7@768@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_7@768@01))))
(declare-const p1_16@791@01 Bool)
(assert (= p1_16@791@01 (and p1_15@760@01 (bool___unbox__ $Snap.unit secret_7@768@01))))
; [exec]
; p2_16 := p2_15 && (!ret2_7 && bool___unbox__(secret_19_0))
; [eval] p2_15 && (!ret2_7 && bool___unbox__(secret_19_0))
(push) ; 5
; [then-branch: 2232 | !(p2_15@761@01) | live]
; [else-branch: 2232 | p2_15@761@01 | live]
(push) ; 6
; [then-branch: 2232 | !(p2_15@761@01)]
(assert (not p2_15@761@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2232 | p2_15@761@01]
; [eval] !ret2_7
(push) ; 7
; [then-branch: 2233 | False | live]
; [else-branch: 2233 | True | live]
(push) ; 8
; [then-branch: 2233 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2233 | True]
; [eval] bool___unbox__(secret_19_0)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_7_0@769@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_7_0@769@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_7_0@769@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_7_0@769@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_7_0@769@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_7_0@769@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_7_0@769@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_15@761@01
  (and
    (issubtype<Bool> (typeof<PyType> secret_7_0@769@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_7_0@769@01))))
(declare-const p2_16@792@01 Bool)
(assert (= p2_16@792@01 (and p2_15@761@01 (bool___unbox__ $Snap.unit secret_7_0@769@01))))
; [exec]
; p3_7 := p1_15 && (!ret1_7 && !bool___unbox__(secret_19))
; [eval] p1_15 && (!ret1_7 && !bool___unbox__(secret_19))
(push) ; 5
; [then-branch: 2234 | !(p1_15@760@01) | live]
; [else-branch: 2234 | p1_15@760@01 | live]
(push) ; 6
; [then-branch: 2234 | !(p1_15@760@01)]
(assert (not p1_15@760@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2234 | p1_15@760@01]
; [eval] !ret1_7
(push) ; 7
; [then-branch: 2235 | False | live]
; [else-branch: 2235 | True | live]
(push) ; 8
; [then-branch: 2235 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2235 | True]
; [eval] !bool___unbox__(secret_19)
; [eval] bool___unbox__(secret_19)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_7@768@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_7@768@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_7@768@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_7@768@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_7@768@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_7@768@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_7@768@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p3_7@793@01 Bool)
(assert (=
  p3_7@793@01
  (and p1_15@760@01 (not (bool___unbox__ $Snap.unit secret_7@768@01)))))
; [exec]
; p4_7 := p2_15 && (!ret2_7 && !bool___unbox__(secret_19_0))
; [eval] p2_15 && (!ret2_7 && !bool___unbox__(secret_19_0))
(push) ; 5
; [then-branch: 2236 | !(p2_15@761@01) | live]
; [else-branch: 2236 | p2_15@761@01 | live]
(push) ; 6
; [then-branch: 2236 | !(p2_15@761@01)]
(assert (not p2_15@761@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2236 | p2_15@761@01]
; [eval] !ret2_7
(push) ; 7
; [then-branch: 2237 | False | live]
; [else-branch: 2237 | True | live]
(push) ; 8
; [then-branch: 2237 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2237 | True]
; [eval] !bool___unbox__(secret_19_0)
; [eval] bool___unbox__(secret_19_0)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_7_0@769@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_7_0@769@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_7_0@769@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_7_0@769@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_7_0@769@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_7_0@769@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_7_0@769@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p4_7@794@01 Bool)
(assert (=
  p4_7@794@01
  (and p2_15@761@01 (not (bool___unbox__ $Snap.unit secret_7_0@769@01)))))
; [eval] p1_16 && !ret1_7
(push) ; 5
; [then-branch: 2238 | !(p1_16@791@01) | live]
; [else-branch: 2238 | p1_16@791@01 | live]
(push) ; 6
; [then-branch: 2238 | !(p1_16@791@01)]
(assert (not p1_16@791@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2238 | p1_16@791@01]
(assert p1_16@791@01)
; [eval] !ret1_7
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_16@791@01 (not p1_16@791@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_16@791@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not p1_16@791@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2239 | p1_16@791@01 | live]
; [else-branch: 2239 | !(p1_16@791@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2239 | p1_16@791@01]
(assert p1_16@791@01)
; [exec]
; _res := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const _res@795@01 $Ref)
(assert (= _res@795@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; ret1_7 := true
; [eval] p2_16 && !ret2_7
(push) ; 6
; [then-branch: 2240 | !(p2_16@792@01) | live]
; [else-branch: 2240 | p2_16@792@01 | live]
(push) ; 7
; [then-branch: 2240 | !(p2_16@792@01)]
(assert (not p2_16@792@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2240 | p2_16@792@01]
(assert p2_16@792@01)
; [eval] !ret2_7
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_16@792@01 (not p2_16@792@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_16@792@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not p2_16@792@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2241 | p2_16@792@01 | live]
; [else-branch: 2241 | !(p2_16@792@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2241 | p2_16@792@01]
(assert p2_16@792@01)
; [exec]
; _res_8 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const _res_8@796@01 $Ref)
(assert (= _res_8@796@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; ret2_7 := true
; [eval] p1_15 && !ret1_7
(push) ; 7
; [then-branch: 2242 | !(p1_15@760@01) | live]
; [else-branch: 2242 | p1_15@760@01 | live]
(push) ; 8
; [then-branch: 2242 | !(p1_15@760@01)]
(assert (not p1_15@760@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2242 | p1_15@760@01]
; [eval] !ret1_7
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 2243 | False | dead]
; [else-branch: 2243 | True | live]
(push) ; 7
; [else-branch: 2243 | True]
(pop) ; 7
; [eval] !(p1_15 && !ret1_7)
; [eval] p1_15 && !ret1_7
(push) ; 7
; [then-branch: 2244 | !(p1_15@760@01) | live]
; [else-branch: 2244 | p1_15@760@01 | live]
(push) ; 8
; [then-branch: 2244 | !(p1_15@760@01)]
(assert (not p1_15@760@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2244 | p1_15@760@01]
; [eval] !ret1_7
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2245 | True | live]
; [else-branch: 2245 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2245 | True]
; [eval] p2_15 && !ret2_7
(push) ; 8
; [then-branch: 2246 | !(p2_15@761@01) | live]
; [else-branch: 2246 | p2_15@761@01 | live]
(push) ; 9
; [then-branch: 2246 | !(p2_15@761@01)]
(assert (not p2_15@761@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2246 | p2_15@761@01]
; [eval] !ret2_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 2247 | False | dead]
; [else-branch: 2247 | True | live]
(push) ; 8
; [else-branch: 2247 | True]
(pop) ; 8
; [eval] !(p2_15 && !ret2_7)
; [eval] p2_15 && !ret2_7
(push) ; 8
; [then-branch: 2248 | !(p2_15@761@01) | live]
; [else-branch: 2248 | p2_15@761@01 | live]
(push) ; 9
; [then-branch: 2248 | !(p2_15@761@01)]
(assert (not p2_15@761@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2248 | p2_15@761@01]
; [eval] !ret2_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2249 | True | live]
; [else-branch: 2249 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2249 | True]
; [exec]
; assert true
; [eval] p1_15 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_15@760@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2250 | p1_15@760@01 | live]
; [else-branch: 2250 | !(p1_15@760@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2250 | p1_15@760@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_15 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_15@761@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2251 | p2_15@761@01 | live]
; [else-branch: 2251 | !(p2_15@761@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2251 | p2_15@761@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_15 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_15@760@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2252 | p1_15@760@01 | live]
; [else-branch: 2252 | !(p1_15@760@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2252 | p1_15@760@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p1_15@760@01
  (issubtype<Bool> (typeof<PyType> _res@795@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_15@760@01
  (issubtype<Bool> (typeof<PyType> _res@795@01) (as int<PyType>  PyType))))
; [eval] p2_15 ==> issubtype(typeof(_res_8), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_15@761@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2253 | p2_15@761@01 | live]
; [else-branch: 2253 | !(p2_15@761@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2253 | p2_15@761@01]
; [eval] issubtype(typeof(_res_8), int())
; [eval] typeof(_res_8)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p2_15@761@01
  (issubtype<Bool> (typeof<PyType> _res_8@796@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_15@761@01
  (issubtype<Bool> (typeof<PyType> _res_8@796@01) (as int<PyType>  PyType))))
; [eval] p1_15 && p2_15 ==> _res == _res_8
; [eval] p1_15 && p2_15
(push) ; 9
; [then-branch: 2254 | !(p1_15@760@01) | live]
; [else-branch: 2254 | p1_15@760@01 | live]
(push) ; 10
; [then-branch: 2254 | !(p1_15@760@01)]
(assert (not p1_15@760@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2254 | p1_15@760@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_15@760@01 p2_15@761@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_15@760@01 p2_15@761@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2255 | p1_15@760@01 && p2_15@761@01 | live]
; [else-branch: 2255 | !(p1_15@760@01 && p2_15@761@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2255 | p1_15@760@01 && p2_15@761@01]
(assert (and p1_15@760@01 p2_15@761@01))
; [eval] _res == _res_8
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and p1_15@760@01 p2_15@761@01))
(push) ; 9
(assert (not (=> (and p1_15@760@01 p2_15@761@01) (= _res@795@01 _res_8@796@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=> (and p1_15@760@01 p2_15@761@01) (= _res@795@01 _res_8@796@01)))
; [eval] p1_15 ==> (forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false) && ((forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false) && ((forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false) && (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_15@760@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2256 | p1_15@760@01 | live]
; [else-branch: 2256 | !(p1_15@760@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2256 | p1_15@760@01]
; [eval] (forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false) && ((forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false) && ((forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false) && (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false)
(push) ; 11
; [then-branch: 2257 | False | live]
; [else-branch: 2257 | True | live]
(push) ; 12
; [then-branch: 2257 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2257 | True]
; [eval] (forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false)
(push) ; 13
; [then-branch: 2258 | False | live]
; [else-branch: 2258 | True | live]
(push) ; 14
; [then-branch: 2258 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2258 | True]
; [eval] (forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 2259 | False | live]
; [else-branch: 2259 | True | live]
(push) ; 16
; [then-branch: 2259 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2259 | True]
; [eval] (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_15 ==> (forperm _r_24: Ref [MustInvokeBounded_0(_r_24)] :: false) && ((forperm _r_24: Ref [MustInvokeUnbounded_0(_r_24)] :: false) && ((forperm _r_24: Ref [_r_24.MustReleaseBoundedp] :: false) && (forperm _r_24: Ref [_r_24.MustReleaseUnboundedp] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_15@761@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2260 | p2_15@761@01 | live]
; [else-branch: 2260 | !(p2_15@761@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2260 | p2_15@761@01]
; [eval] (forperm _r_24: Ref [MustInvokeBounded_0(_r_24)] :: false) && ((forperm _r_24: Ref [MustInvokeUnbounded_0(_r_24)] :: false) && ((forperm _r_24: Ref [_r_24.MustReleaseBoundedp] :: false) && (forperm _r_24: Ref [_r_24.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_24: Ref [MustInvokeBounded_0(_r_24)] :: false)
(push) ; 11
; [then-branch: 2261 | False | live]
; [else-branch: 2261 | True | live]
(push) ; 12
; [then-branch: 2261 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2261 | True]
; [eval] (forperm _r_24: Ref [MustInvokeUnbounded_0(_r_24)] :: false)
(push) ; 13
; [then-branch: 2262 | False | live]
; [else-branch: 2262 | True | live]
(push) ; 14
; [then-branch: 2262 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2262 | True]
; [eval] (forperm _r_24: Ref [_r_24.MustReleaseBoundedp] :: false)
(push) ; 15
; [then-branch: 2263 | False | live]
; [else-branch: 2263 | True | live]
(push) ; 16
; [then-branch: 2263 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2263 | True]
; [eval] (forperm _r_24: Ref [_r_24.MustReleaseUnboundedp] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 2241 | !(p2_16@792@01)]
(assert (not p2_16@792@01))
(pop) ; 6
; [eval] !(p2_16 && !ret2_7)
; [eval] p2_16 && !ret2_7
(push) ; 6
; [then-branch: 2264 | !(p2_16@792@01) | live]
; [else-branch: 2264 | p2_16@792@01 | live]
(push) ; 7
; [then-branch: 2264 | !(p2_16@792@01)]
(assert (not p2_16@792@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2264 | p2_16@792@01]
(assert p2_16@792@01)
; [eval] !ret2_7
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_16@792@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_16@792@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2265 | !(p2_16@792@01) | live]
; [else-branch: 2265 | p2_16@792@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2265 | !(p2_16@792@01)]
(assert (not p2_16@792@01))
; [eval] p1_15 && !ret1_7
(push) ; 7
; [then-branch: 2266 | !(p1_15@760@01) | live]
; [else-branch: 2266 | p1_15@760@01 | live]
(push) ; 8
; [then-branch: 2266 | !(p1_15@760@01)]
(assert (not p1_15@760@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2266 | p1_15@760@01]
(assert p1_15@760@01)
; [eval] !ret1_7
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 2267 | False | dead]
; [else-branch: 2267 | True | live]
(push) ; 7
; [else-branch: 2267 | True]
(pop) ; 7
; [eval] !(p1_15 && !ret1_7)
; [eval] p1_15 && !ret1_7
(push) ; 7
; [then-branch: 2268 | !(p1_15@760@01) | live]
; [else-branch: 2268 | p1_15@760@01 | live]
(push) ; 8
; [then-branch: 2268 | !(p1_15@760@01)]
(assert (not p1_15@760@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2268 | p1_15@760@01]
(assert p1_15@760@01)
; [eval] !ret1_7
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2269 | True | live]
; [else-branch: 2269 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2269 | True]
; [eval] p2_15 && !ret2_7
(push) ; 8
; [then-branch: 2270 | !(p2_15@761@01) | live]
; [else-branch: 2270 | p2_15@761@01 | live]
(push) ; 9
; [then-branch: 2270 | !(p2_15@761@01)]
(assert (not p2_15@761@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2270 | p2_15@761@01]
(assert p2_15@761@01)
; [eval] !ret2_7
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_15@761@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not p2_15@761@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2271 | p2_15@761@01 | live]
; [else-branch: 2271 | !(p2_15@761@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2271 | p2_15@761@01]
(assert p2_15@761@01)
; [exec]
; _res_8 := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(push) ; 9
(assert (__prim__bool___box__%precondition $Snap.unit true))
(pop) ; 9
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit true))
(declare-const _res_8@797@01 $Ref)
(assert (= _res_8@797@01 (__prim__bool___box__ $Snap.unit true)))
; [exec]
; ret2_7 := true
; [exec]
; assert true
; [eval] p1_15 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_15@760@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not p1_15@760@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2272 | p1_15@760@01 | live]
; [else-branch: 2272 | !(p1_15@760@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2272 | p1_15@760@01]
(assert p1_15@760@01)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert p1_15@760@01)
; [eval] p2_15 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_15@761@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2273 | p2_15@761@01 | live]
; [else-branch: 2273 | !(p2_15@761@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2273 | p2_15@761@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_15 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_15@760@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2274 | p1_15@760@01 | live]
; [else-branch: 2274 | !(p1_15@760@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2274 | p1_15@760@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p1_15@760@01
  (issubtype<Bool> (typeof<PyType> _res@795@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_15@760@01
  (issubtype<Bool> (typeof<PyType> _res@795@01) (as int<PyType>  PyType))))
; [eval] p2_15 ==> issubtype(typeof(_res_8), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_15@761@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2275 | p2_15@761@01 | live]
; [else-branch: 2275 | !(p2_15@761@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2275 | p2_15@761@01]
; [eval] issubtype(typeof(_res_8), int())
; [eval] typeof(_res_8)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p2_15@761@01
  (issubtype<Bool> (typeof<PyType> _res_8@797@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_15@761@01
  (issubtype<Bool> (typeof<PyType> _res_8@797@01) (as int<PyType>  PyType))))
; [eval] p1_15 && p2_15 ==> _res == _res_8
; [eval] p1_15 && p2_15
(push) ; 9
; [then-branch: 2276 | !(p1_15@760@01) | live]
; [else-branch: 2276 | p1_15@760@01 | live]
(push) ; 10
; [then-branch: 2276 | !(p1_15@760@01)]
(assert (not p1_15@760@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2276 | p1_15@760@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_15@760@01 p2_15@761@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_15@760@01 p2_15@761@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2277 | p1_15@760@01 && p2_15@761@01 | live]
; [else-branch: 2277 | !(p1_15@760@01 && p2_15@761@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2277 | p1_15@760@01 && p2_15@761@01]
(assert (and p1_15@760@01 p2_15@761@01))
; [eval] _res == _res_8
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and p1_15@760@01 p2_15@761@01))
(push) ; 9
(assert (not (=> (and p1_15@760@01 p2_15@761@01) (= _res@795@01 _res_8@797@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] p1_15 && p2_15 ==> _res == _res_8
; [eval] p1_15 && p2_15
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2278 | !(p1_15@760@01) | live]
; [else-branch: 2278 | p1_15@760@01 | live]
(push) ; 10
; [then-branch: 2278 | !(p1_15@760@01)]
(assert (not p1_15@760@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 2278 | p1_15@760@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_15@760@01 p2_15@761@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_15@760@01 p2_15@761@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2279 | p1_15@760@01 && p2_15@761@01 | live]
; [else-branch: 2279 | !(p1_15@760@01 && p2_15@761@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2279 | p1_15@760@01 && p2_15@761@01]
(assert (and p1_15@760@01 p2_15@761@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _res == _res_8
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and p1_15@760@01 p2_15@761@01))
(set-option :timeout 0)
(push) ; 9
(assert (not (=> (and p1_15@760@01 p2_15@761@01) (= _res@795@01 _res_8@797@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] p1_15 && p2_15 ==> _res == _res_8
; [eval] p1_15 && p2_15
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2280 | !(p1_15@760@01) | live]
; [else-branch: 2280 | p1_15@760@01 | live]
(push) ; 10
; [then-branch: 2280 | !(p1_15@760@01)]
(assert (not p1_15@760@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 2280 | p1_15@760@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_15@760@01 p2_15@761@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_15@760@01 p2_15@761@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2281 | p1_15@760@01 && p2_15@761@01 | live]
; [else-branch: 2281 | !(p1_15@760@01 && p2_15@761@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2281 | p1_15@760@01 && p2_15@761@01]
(assert (and p1_15@760@01 p2_15@761@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _res == _res_8
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and p1_15@760@01 p2_15@761@01))
(set-option :timeout 0)
(push) ; 9
(assert (not (=> (and p1_15@760@01 p2_15@761@01) (= _res@795@01 _res_8@797@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] p1_15 && p2_15 ==> _res == _res_8
; [eval] p1_15 && p2_15
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2282 | !(p1_15@760@01) | live]
; [else-branch: 2282 | p1_15@760@01 | live]
(push) ; 10
; [then-branch: 2282 | !(p1_15@760@01)]
(assert (not p1_15@760@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 2282 | p1_15@760@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_15@760@01 p2_15@761@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_15@760@01 p2_15@761@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2283 | p1_15@760@01 && p2_15@761@01 | live]
; [else-branch: 2283 | !(p1_15@760@01 && p2_15@761@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2283 | p1_15@760@01 && p2_15@761@01]
(assert (and p1_15@760@01 p2_15@761@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _res == _res_8
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and p1_15@760@01 p2_15@761@01))
(set-option :timeout 0)
(push) ; 9
(assert (not (=> (and p1_15@760@01 p2_15@761@01) (= _res@795@01 _res_8@797@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- bool_int_lowval ----------
(declare-const p1_17@798@01 Bool)
(declare-const p2_17@799@01 Bool)
(declare-const _cthread_167@800@01 $Ref)
(declare-const _cthread_167_0@801@01 $Ref)
(declare-const _caller_measures_167@802@01 Seq<Measure$>)
(declare-const _caller_measures_167_0@803@01 Seq<Measure$>)
(declare-const _residue_167@804@01 $Perm)
(declare-const _residue_167_0@805@01 $Perm)
(declare-const secret_8@806@01 $Ref)
(declare-const secret_8_0@807@01 $Ref)
(declare-const _current_wait_level_167@808@01 $Perm)
(declare-const _current_wait_level_167_0@809@01 $Perm)
(declare-const _res@810@01 $Ref)
(declare-const _res_9@811@01 $Ref)
(declare-const p1_17@812@01 Bool)
(declare-const p2_17@813@01 Bool)
(declare-const _cthread_167@814@01 $Ref)
(declare-const _cthread_167_0@815@01 $Ref)
(declare-const _caller_measures_167@816@01 Seq<Measure$>)
(declare-const _caller_measures_167_0@817@01 Seq<Measure$>)
(declare-const _residue_167@818@01 $Perm)
(declare-const _residue_167_0@819@01 $Perm)
(declare-const secret_8@820@01 $Ref)
(declare-const secret_8_0@821@01 $Ref)
(declare-const _current_wait_level_167@822@01 $Perm)
(declare-const _current_wait_level_167_0@823@01 $Perm)
(declare-const _res@824@01 $Ref)
(declare-const _res_9@825@01 $Ref)
(push) ; 1
(declare-const $t@826@01 $Snap)
(assert (= $t@826@01 ($Snap.combine ($Snap.first $t@826@01) ($Snap.second $t@826@01))))
(assert (= ($Snap.first $t@826@01) $Snap.unit))
; [eval] p1_17 ==> _cthread_167 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_17@812@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2284 | p1_17@812@01 | live]
; [else-branch: 2284 | !(p1_17@812@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2284 | p1_17@812@01]
(assert p1_17@812@01)
; [eval] _cthread_167 != null
(pop) ; 3
(push) ; 3
; [else-branch: 2284 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_17@812@01) p1_17@812@01))
(assert (=> p1_17@812@01 (not (= _cthread_167@814@01 $Ref.null))))
(assert (=
  ($Snap.second $t@826@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@826@01))
    ($Snap.second ($Snap.second $t@826@01)))))
(assert (= ($Snap.first ($Snap.second $t@826@01)) $Snap.unit))
; [eval] p2_17 ==> _cthread_167_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_17@813@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2285 | p2_17@813@01 | live]
; [else-branch: 2285 | !(p2_17@813@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2285 | p2_17@813@01]
(assert p2_17@813@01)
; [eval] _cthread_167_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 2285 | !(p2_17@813@01)]
(assert (not p2_17@813@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_17@813@01) p2_17@813@01))
(assert (=> p2_17@813@01 (not (= _cthread_167_0@815@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@826@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@826@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@826@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@826@01))) $Snap.unit))
; [eval] p1_17 ==> issubtype(typeof(_cthread_167), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_17@812@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2286 | p1_17@812@01 | live]
; [else-branch: 2286 | !(p1_17@812@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2286 | p1_17@812@01]
(assert p1_17@812@01)
; [eval] issubtype(typeof(_cthread_167), Thread_0())
; [eval] typeof(_cthread_167)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 2286 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_17@812@01
  (issubtype<Bool> (typeof<PyType> _cthread_167@814@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@826@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@826@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@826@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@826@01))))
  $Snap.unit))
; [eval] p2_17 ==> issubtype(typeof(_cthread_167_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_17@813@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2287 | p2_17@813@01 | live]
; [else-branch: 2287 | !(p2_17@813@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2287 | p2_17@813@01]
(assert p2_17@813@01)
; [eval] issubtype(typeof(_cthread_167_0), Thread_0())
; [eval] typeof(_cthread_167_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 2287 | !(p2_17@813@01)]
(assert (not p2_17@813@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_17@813@01
  (issubtype<Bool> (typeof<PyType> _cthread_167_0@815@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@826@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@826@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@826@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@826@01)))))
  $Snap.unit))
; [eval] p1_17 ==> issubtype(typeof(secret_8), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_17@812@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2288 | p1_17@812@01 | live]
; [else-branch: 2288 | !(p1_17@812@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2288 | p1_17@812@01]
(assert p1_17@812@01)
; [eval] issubtype(typeof(secret_8), bool())
; [eval] typeof(secret_8)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 2288 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_17@812@01
  (issubtype<Bool> (typeof<PyType> secret_8@820@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@826@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@826@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@826@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@826@01))))))
  $Snap.unit))
; [eval] p2_17 ==> issubtype(typeof(secret_8_0), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_17@813@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2289 | p2_17@813@01 | live]
; [else-branch: 2289 | !(p2_17@813@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2289 | p2_17@813@01]
(assert p2_17@813@01)
; [eval] issubtype(typeof(secret_8_0), bool())
; [eval] typeof(secret_8_0)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 2289 | !(p2_17@813@01)]
(assert (not p2_17@813@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_17@813@01
  (issubtype<Bool> (typeof<PyType> secret_8_0@821@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@826@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@826@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@826@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@826@01)))))))
  $Snap.unit))
; [eval] p1_17 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_17@812@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2290 | p1_17@812@01 | live]
; [else-branch: 2290 | !(p1_17@812@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2290 | p1_17@812@01]
(assert p1_17@812@01)
(pop) ; 3
(push) ; 3
; [else-branch: 2290 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@826@01)))))))
  $Snap.unit))
; [eval] p2_17 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_17@813@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2291 | p2_17@813@01 | live]
; [else-branch: 2291 | !(p2_17@813@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2291 | p2_17@813@01]
(assert p2_17@813@01)
(pop) ; 3
(push) ; 3
; [else-branch: 2291 | !(p2_17@813@01)]
(assert (not p2_17@813@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@827@01 $Snap)
(assert (= $t@827@01 ($Snap.combine ($Snap.first $t@827@01) ($Snap.second $t@827@01))))
(assert (= ($Snap.first $t@827@01) $Snap.unit))
; [eval] p1_17 ==> (forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_167) && ((forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_167) && _residue_167 <= _current_wait_level_167)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_17@812@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2292 | p1_17@812@01 | live]
; [else-branch: 2292 | !(p1_17@812@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2292 | p1_17@812@01]
(assert p1_17@812@01)
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_167) && ((forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_167) && _residue_167 <= _current_wait_level_167)
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_167)
(push) ; 5
; [then-branch: 2293 | False | live]
; [else-branch: 2293 | True | live]
(push) ; 6
; [then-branch: 2293 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 2293 | True]
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_167)
(push) ; 7
; [then-branch: 2294 | False | live]
; [else-branch: 2294 | True | live]
(push) ; 8
; [then-branch: 2294 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2294 | True]
; [eval] _residue_167 <= _current_wait_level_167
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 2292 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p1_17@812@01 (<= _residue_167@818@01 _current_wait_level_167@822@01)))
(assert (=
  ($Snap.second $t@827@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@827@01))
    ($Snap.second ($Snap.second $t@827@01)))))
(assert (= ($Snap.first ($Snap.second $t@827@01)) $Snap.unit))
; [eval] p2_17 ==> (forperm _r_26: Ref [_r_26.MustReleaseBoundedp] :: Level(_r_26) <= _current_wait_level_167_0) && ((forperm _r_26: Ref [_r_26.MustReleaseUnboundedp] :: Level(_r_26) <= _current_wait_level_167_0) && _residue_167_0 <= _current_wait_level_167_0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_17@813@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2295 | p2_17@813@01 | live]
; [else-branch: 2295 | !(p2_17@813@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2295 | p2_17@813@01]
(assert p2_17@813@01)
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseBoundedp] :: Level(_r_26) <= _current_wait_level_167_0) && ((forperm _r_26: Ref [_r_26.MustReleaseUnboundedp] :: Level(_r_26) <= _current_wait_level_167_0) && _residue_167_0 <= _current_wait_level_167_0)
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseBoundedp] :: Level(_r_26) <= _current_wait_level_167_0)
(push) ; 5
; [then-branch: 2296 | False | live]
; [else-branch: 2296 | True | live]
(push) ; 6
; [then-branch: 2296 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 2296 | True]
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseUnboundedp] :: Level(_r_26) <= _current_wait_level_167_0)
(push) ; 7
; [then-branch: 2297 | False | live]
; [else-branch: 2297 | True | live]
(push) ; 8
; [then-branch: 2297 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2297 | True]
; [eval] _residue_167_0 <= _current_wait_level_167_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 2295 | !(p2_17@813@01)]
(assert (not p2_17@813@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p2_17@813@01 (<= _residue_167_0@819@01 _current_wait_level_167_0@823@01)))
(assert (=
  ($Snap.second ($Snap.second $t@827@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@827@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@827@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@827@01))) $Snap.unit))
; [eval] p1_17 ==> issubtype(typeof(_res), int())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_17@812@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2298 | p1_17@812@01 | live]
; [else-branch: 2298 | !(p1_17@812@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2298 | p1_17@812@01]
(assert p1_17@812@01)
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 2298 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_17@812@01
  (issubtype<Bool> (typeof<PyType> _res@824@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@827@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@827@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@827@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@827@01))))
  $Snap.unit))
; [eval] p2_17 ==> issubtype(typeof(_res_9), int())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_17@813@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2299 | p2_17@813@01 | live]
; [else-branch: 2299 | !(p2_17@813@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2299 | p2_17@813@01]
(assert p2_17@813@01)
; [eval] issubtype(typeof(_res_9), int())
; [eval] typeof(_res_9)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 2299 | !(p2_17@813@01)]
(assert (not p2_17@813@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_17@813@01
  (issubtype<Bool> (typeof<PyType> _res_9@825@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@827@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@827@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@827@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@827@01)))))
  $Snap.unit))
; [eval] p1_17 && p2_17 ==> int___eq__(_res, _res_9)
; [eval] p1_17 && p2_17
(push) ; 3
; [then-branch: 2300 | !(p1_17@812@01) | live]
; [else-branch: 2300 | p1_17@812@01 | live]
(push) ; 4
; [then-branch: 2300 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 4
(push) ; 4
; [else-branch: 2300 | p1_17@812@01]
(assert p1_17@812@01)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1_17@812@01 (not p1_17@812@01)))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (and p1_17@812@01 p2_17@813@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and p1_17@812@01 p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2301 | p1_17@812@01 && p2_17@813@01 | live]
; [else-branch: 2301 | !(p1_17@812@01 && p2_17@813@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2301 | p1_17@812@01 && p2_17@813@01]
(assert (and p1_17@812@01 p2_17@813@01))
; [eval] int___eq__(_res, _res_9)
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> _res@824@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@824@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> _res_9@825@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res_9@825@01) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@824@01 _res_9@825@01))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@824@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> _res_9@825@01) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@824@01 _res_9@825@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 2301 | !(p1_17@812@01 && p2_17@813@01)]
(assert (not (and p1_17@812@01 p2_17@813@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and p1_17@812@01 p2_17@813@01)
  (and
    p1_17@812@01
    p2_17@813@01
    (issubtype<Bool> (typeof<PyType> _res@824@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> _res_9@825@01) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@824@01 _res_9@825@01))))
; Joined path conditions
(assert (or (not (and p1_17@812@01 p2_17@813@01)) (and p1_17@812@01 p2_17@813@01)))
(assert (=>
  (and p1_17@812@01 p2_17@813@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@824@01 _res_9@825@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@827@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@827@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@827@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@827@01))))))
  $Snap.unit))
; [eval] p1_17 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_17@812@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2302 | p1_17@812@01 | live]
; [else-branch: 2302 | !(p1_17@812@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2302 | p1_17@812@01]
(assert p1_17@812@01)
(pop) ; 4
(push) ; 4
; [else-branch: 2302 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@827@01))))))
  $Snap.unit))
; [eval] p2_17 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_17@813@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2303 | p2_17@813@01 | live]
; [else-branch: 2303 | !(p2_17@813@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2303 | p2_17@813@01]
(assert p2_17@813@01)
(pop) ; 4
(push) ; 4
; [else-branch: 2303 | !(p2_17@813@01)]
(assert (not p2_17@813@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
(push) ; 2
; [exec]
; var ret1_8: Bool
(declare-const ret1_8@828@01 Bool)
; [exec]
; var ret2_8: Bool
(declare-const ret2_8@829@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@830@01 $Ref)
; [exec]
; var _err_9: Ref
(declare-const _err_9@831@01 $Ref)
; [exec]
; var secret_20: Ref
(declare-const secret_20@832@01 $Ref)
; [exec]
; var secret_20_0: Ref
(declare-const secret_20_0@833@01 $Ref)
; [exec]
; var _cwl_167: Perm
(declare-const _cwl_167@834@01 $Perm)
; [exec]
; var _cwl_167_0: Perm
(declare-const _cwl_167_0@835@01 $Perm)
; [exec]
; var _method_measures_167: Seq[Measure$]
(declare-const _method_measures_167@836@01 Seq<Measure$>)
; [exec]
; var _method_measures_167_0: Seq[Measure$]
(declare-const _method_measures_167_0@837@01 Seq<Measure$>)
; [exec]
; var p1_18: Bool
(declare-const p1_18@838@01 Bool)
; [exec]
; var p2_18: Bool
(declare-const p2_18@839@01 Bool)
; [exec]
; var p3_8: Bool
(declare-const p3_8@840@01 Bool)
; [exec]
; var p4_8: Bool
(declare-const p4_8@841@01 Bool)
; [exec]
; inhale p1_17
(declare-const $t@842@01 $Snap)
(assert (= $t@842@01 $Snap.unit))
(assert p1_17@812@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ret1_8 := false
; [exec]
; ret2_8 := false
; [eval] p1_17 && !ret1_8
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2304 | !(p1_17@812@01) | live]
; [else-branch: 2304 | p1_17@812@01 | live]
(push) ; 4
; [then-branch: 2304 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 4
(push) ; 4
; [else-branch: 2304 | p1_17@812@01]
; [eval] !ret1_8
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1_17@812@01 (not p1_17@812@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2305 | p1_17@812@01 | live]
; [else-branch: 2305 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2305 | p1_17@812@01]
; [exec]
; _method_measures_167 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; secret_20 := secret_8
; [eval] p2_17 && !ret2_8
(push) ; 4
; [then-branch: 2306 | !(p2_17@813@01) | live]
; [else-branch: 2306 | p2_17@813@01 | live]
(push) ; 5
; [then-branch: 2306 | !(p2_17@813@01)]
(assert (not p2_17@813@01))
(pop) ; 5
(push) ; 5
; [else-branch: 2306 | p2_17@813@01]
(assert p2_17@813@01)
; [eval] !ret2_8
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or p2_17@813@01 (not p2_17@813@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_17@813@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2307 | p2_17@813@01 | live]
; [else-branch: 2307 | !(p2_17@813@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2307 | p2_17@813@01]
(assert p2_17@813@01)
; [exec]
; _method_measures_167_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res_9 := null
; [exec]
; _err_9 := null
; [exec]
; secret_20_0 := secret_8_0
; [exec]
; p1_18 := p1_17 && (!ret1_8 && bool___unbox__(secret_20))
; [eval] p1_17 && (!ret1_8 && bool___unbox__(secret_20))
(push) ; 5
; [then-branch: 2308 | !(p1_17@812@01) | live]
; [else-branch: 2308 | p1_17@812@01 | live]
(push) ; 6
; [then-branch: 2308 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2308 | p1_17@812@01]
; [eval] !ret1_8
(push) ; 7
; [then-branch: 2309 | False | live]
; [else-branch: 2309 | True | live]
(push) ; 8
; [then-branch: 2309 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2309 | True]
; [eval] bool___unbox__(secret_20)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_8@820@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_8@820@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_8@820@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_8@820@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_8@820@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_8@820@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_8@820@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_17@812@01
  (and
    (issubtype<Bool> (typeof<PyType> secret_8@820@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_8@820@01))))
(declare-const p1_18@843@01 Bool)
(assert (= p1_18@843@01 (and p1_17@812@01 (bool___unbox__ $Snap.unit secret_8@820@01))))
; [exec]
; p2_18 := p2_17 && (!ret2_8 && bool___unbox__(secret_20_0))
; [eval] p2_17 && (!ret2_8 && bool___unbox__(secret_20_0))
(push) ; 5
; [then-branch: 2310 | !(p2_17@813@01) | live]
; [else-branch: 2310 | p2_17@813@01 | live]
(push) ; 6
; [then-branch: 2310 | !(p2_17@813@01)]
(assert (not p2_17@813@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2310 | p2_17@813@01]
; [eval] !ret2_8
(push) ; 7
; [then-branch: 2311 | False | live]
; [else-branch: 2311 | True | live]
(push) ; 8
; [then-branch: 2311 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2311 | True]
; [eval] bool___unbox__(secret_20_0)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_8_0@821@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_8_0@821@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_8_0@821@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_8_0@821@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_8_0@821@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_8_0@821@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_8_0@821@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_17@813@01
  (and
    (issubtype<Bool> (typeof<PyType> secret_8_0@821@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_8_0@821@01))))
(declare-const p2_18@844@01 Bool)
(assert (= p2_18@844@01 (and p2_17@813@01 (bool___unbox__ $Snap.unit secret_8_0@821@01))))
; [exec]
; p3_8 := p1_17 && (!ret1_8 && !bool___unbox__(secret_20))
; [eval] p1_17 && (!ret1_8 && !bool___unbox__(secret_20))
(push) ; 5
; [then-branch: 2312 | !(p1_17@812@01) | live]
; [else-branch: 2312 | p1_17@812@01 | live]
(push) ; 6
; [then-branch: 2312 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2312 | p1_17@812@01]
; [eval] !ret1_8
(push) ; 7
; [then-branch: 2313 | False | live]
; [else-branch: 2313 | True | live]
(push) ; 8
; [then-branch: 2313 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2313 | True]
; [eval] !bool___unbox__(secret_20)
; [eval] bool___unbox__(secret_20)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_8@820@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_8@820@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_8@820@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_8@820@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_8@820@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_8@820@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_8@820@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p3_8@845@01 Bool)
(assert (=
  p3_8@845@01
  (and p1_17@812@01 (not (bool___unbox__ $Snap.unit secret_8@820@01)))))
; [exec]
; p4_8 := p2_17 && (!ret2_8 && !bool___unbox__(secret_20_0))
; [eval] p2_17 && (!ret2_8 && !bool___unbox__(secret_20_0))
(push) ; 5
; [then-branch: 2314 | !(p2_17@813@01) | live]
; [else-branch: 2314 | p2_17@813@01 | live]
(push) ; 6
; [then-branch: 2314 | !(p2_17@813@01)]
(assert (not p2_17@813@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2314 | p2_17@813@01]
; [eval] !ret2_8
(push) ; 7
; [then-branch: 2315 | False | live]
; [else-branch: 2315 | True | live]
(push) ; 8
; [then-branch: 2315 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2315 | True]
; [eval] !bool___unbox__(secret_20_0)
; [eval] bool___unbox__(secret_20_0)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_8_0@821@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_8_0@821@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_8_0@821@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_8_0@821@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_8_0@821@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_8_0@821@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_8_0@821@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p4_8@846@01 Bool)
(assert (=
  p4_8@846@01
  (and p2_17@813@01 (not (bool___unbox__ $Snap.unit secret_8_0@821@01)))))
; [eval] p1_18 && !ret1_8
(push) ; 5
; [then-branch: 2316 | !(p1_18@843@01) | live]
; [else-branch: 2316 | p1_18@843@01 | live]
(push) ; 6
; [then-branch: 2316 | !(p1_18@843@01)]
(assert (not p1_18@843@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2316 | p1_18@843@01]
(assert p1_18@843@01)
; [eval] !ret1_8
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_18@843@01 (not p1_18@843@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_18@843@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not p1_18@843@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2317 | p1_18@843@01 | live]
; [else-branch: 2317 | !(p1_18@843@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2317 | p1_18@843@01]
(assert p1_18@843@01)
; [exec]
; _res := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const _res@847@01 $Ref)
(assert (= _res@847@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; ret1_8 := true
; [eval] p2_18 && !ret2_8
(push) ; 6
; [then-branch: 2318 | !(p2_18@844@01) | live]
; [else-branch: 2318 | p2_18@844@01 | live]
(push) ; 7
; [then-branch: 2318 | !(p2_18@844@01)]
(assert (not p2_18@844@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2318 | p2_18@844@01]
(assert p2_18@844@01)
; [eval] !ret2_8
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_18@844@01 (not p2_18@844@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_18@844@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not p2_18@844@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2319 | p2_18@844@01 | live]
; [else-branch: 2319 | !(p2_18@844@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2319 | p2_18@844@01]
(assert p2_18@844@01)
; [exec]
; _res_9 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const _res_9@848@01 $Ref)
(assert (= _res_9@848@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; ret2_8 := true
; [eval] p1_17 && !ret1_8
(push) ; 7
; [then-branch: 2320 | !(p1_17@812@01) | live]
; [else-branch: 2320 | p1_17@812@01 | live]
(push) ; 8
; [then-branch: 2320 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2320 | p1_17@812@01]
; [eval] !ret1_8
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 2321 | False | dead]
; [else-branch: 2321 | True | live]
(push) ; 7
; [else-branch: 2321 | True]
(pop) ; 7
; [eval] !(p1_17 && !ret1_8)
; [eval] p1_17 && !ret1_8
(push) ; 7
; [then-branch: 2322 | !(p1_17@812@01) | live]
; [else-branch: 2322 | p1_17@812@01 | live]
(push) ; 8
; [then-branch: 2322 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2322 | p1_17@812@01]
; [eval] !ret1_8
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2323 | True | live]
; [else-branch: 2323 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2323 | True]
; [eval] p2_17 && !ret2_8
(push) ; 8
; [then-branch: 2324 | !(p2_17@813@01) | live]
; [else-branch: 2324 | p2_17@813@01 | live]
(push) ; 9
; [then-branch: 2324 | !(p2_17@813@01)]
(assert (not p2_17@813@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2324 | p2_17@813@01]
; [eval] !ret2_8
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 2325 | False | dead]
; [else-branch: 2325 | True | live]
(push) ; 8
; [else-branch: 2325 | True]
(pop) ; 8
; [eval] !(p2_17 && !ret2_8)
; [eval] p2_17 && !ret2_8
(push) ; 8
; [then-branch: 2326 | !(p2_17@813@01) | live]
; [else-branch: 2326 | p2_17@813@01 | live]
(push) ; 9
; [then-branch: 2326 | !(p2_17@813@01)]
(assert (not p2_17@813@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2326 | p2_17@813@01]
; [eval] !ret2_8
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2327 | True | live]
; [else-branch: 2327 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2327 | True]
; [exec]
; assert true
; [eval] p1_17 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2328 | p1_17@812@01 | live]
; [else-branch: 2328 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2328 | p1_17@812@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_17 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2329 | p2_17@813@01 | live]
; [else-branch: 2329 | !(p2_17@813@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2329 | p2_17@813@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_17 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2330 | p1_17@812@01 | live]
; [else-branch: 2330 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2330 | p1_17@812@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p1_17@812@01
  (issubtype<Bool> (typeof<PyType> _res@847@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_17@812@01
  (issubtype<Bool> (typeof<PyType> _res@847@01) (as int<PyType>  PyType))))
; [eval] p2_17 ==> issubtype(typeof(_res_9), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2331 | p2_17@813@01 | live]
; [else-branch: 2331 | !(p2_17@813@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2331 | p2_17@813@01]
; [eval] issubtype(typeof(_res_9), int())
; [eval] typeof(_res_9)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p2_17@813@01
  (issubtype<Bool> (typeof<PyType> _res_9@848@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_17@813@01
  (issubtype<Bool> (typeof<PyType> _res_9@848@01) (as int<PyType>  PyType))))
; [eval] p1_17 && p2_17 ==> int___eq__(_res, _res_9)
; [eval] p1_17 && p2_17
(push) ; 9
; [then-branch: 2332 | !(p1_17@812@01) | live]
; [else-branch: 2332 | p1_17@812@01 | live]
(push) ; 10
; [then-branch: 2332 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2332 | p1_17@812@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_17@812@01 p2_17@813@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_17@812@01 p2_17@813@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2333 | p1_17@812@01 && p2_17@813@01 | live]
; [else-branch: 2333 | !(p1_17@812@01 && p2_17@813@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2333 | p1_17@812@01 && p2_17@813@01]
(assert (and p1_17@812@01 p2_17@813@01))
; [eval] int___eq__(_res, _res_9)
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> _res@847@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@847@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> _res_9@848@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res_9@848@01) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@847@01 _res_9@848@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@847@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> _res_9@848@01) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@847@01 _res_9@848@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and p1_17@812@01 p2_17@813@01)
  (and
    p1_17@812@01
    p2_17@813@01
    (issubtype<Bool> (typeof<PyType> _res@847@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> _res_9@848@01) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@847@01 _res_9@848@01))))
(assert (and p1_17@812@01 p2_17@813@01))
(push) ; 9
(assert (not (=>
  (and p1_17@812@01 p2_17@813@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@847@01 _res_9@848@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_17@812@01 p2_17@813@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@847@01 _res_9@848@01)))
; [eval] p1_17 ==> (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2334 | p1_17@812@01 | live]
; [else-branch: 2334 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2334 | p1_17@812@01]
; [eval] (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false)
(push) ; 11
; [then-branch: 2335 | False | live]
; [else-branch: 2335 | True | live]
(push) ; 12
; [then-branch: 2335 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2335 | True]
; [eval] (forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false)
(push) ; 13
; [then-branch: 2336 | False | live]
; [else-branch: 2336 | True | live]
(push) ; 14
; [then-branch: 2336 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2336 | True]
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 2337 | False | live]
; [else-branch: 2337 | True | live]
(push) ; 16
; [then-branch: 2337 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2337 | True]
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_17 ==> (forperm _r_27: Ref [MustInvokeBounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBoundedp] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnboundedp] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2338 | p2_17@813@01 | live]
; [else-branch: 2338 | !(p2_17@813@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2338 | p2_17@813@01]
; [eval] (forperm _r_27: Ref [MustInvokeBounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBoundedp] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_27: Ref [MustInvokeBounded_0(_r_27)] :: false)
(push) ; 11
; [then-branch: 2339 | False | live]
; [else-branch: 2339 | True | live]
(push) ; 12
; [then-branch: 2339 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2339 | True]
; [eval] (forperm _r_27: Ref [MustInvokeUnbounded_0(_r_27)] :: false)
(push) ; 13
; [then-branch: 2340 | False | live]
; [else-branch: 2340 | True | live]
(push) ; 14
; [then-branch: 2340 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2340 | True]
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBoundedp] :: false)
(push) ; 15
; [then-branch: 2341 | False | live]
; [else-branch: 2341 | True | live]
(push) ; 16
; [then-branch: 2341 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2341 | True]
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnboundedp] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 2319 | !(p2_18@844@01)]
(assert (not p2_18@844@01))
(pop) ; 6
; [eval] !(p2_18 && !ret2_8)
; [eval] p2_18 && !ret2_8
(push) ; 6
; [then-branch: 2342 | !(p2_18@844@01) | live]
; [else-branch: 2342 | p2_18@844@01 | live]
(push) ; 7
; [then-branch: 2342 | !(p2_18@844@01)]
(assert (not p2_18@844@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2342 | p2_18@844@01]
(assert p2_18@844@01)
; [eval] !ret2_8
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_18@844@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_18@844@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2343 | !(p2_18@844@01) | live]
; [else-branch: 2343 | p2_18@844@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2343 | !(p2_18@844@01)]
(assert (not p2_18@844@01))
; [eval] p1_17 && !ret1_8
(push) ; 7
; [then-branch: 2344 | !(p1_17@812@01) | live]
; [else-branch: 2344 | p1_17@812@01 | live]
(push) ; 8
; [then-branch: 2344 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2344 | p1_17@812@01]
(assert p1_17@812@01)
; [eval] !ret1_8
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 2345 | False | dead]
; [else-branch: 2345 | True | live]
(push) ; 7
; [else-branch: 2345 | True]
(pop) ; 7
; [eval] !(p1_17 && !ret1_8)
; [eval] p1_17 && !ret1_8
(push) ; 7
; [then-branch: 2346 | !(p1_17@812@01) | live]
; [else-branch: 2346 | p1_17@812@01 | live]
(push) ; 8
; [then-branch: 2346 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2346 | p1_17@812@01]
(assert p1_17@812@01)
; [eval] !ret1_8
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2347 | True | live]
; [else-branch: 2347 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2347 | True]
; [eval] p2_17 && !ret2_8
(push) ; 8
; [then-branch: 2348 | !(p2_17@813@01) | live]
; [else-branch: 2348 | p2_17@813@01 | live]
(push) ; 9
; [then-branch: 2348 | !(p2_17@813@01)]
(assert (not p2_17@813@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2348 | p2_17@813@01]
(assert p2_17@813@01)
; [eval] !ret2_8
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not p2_17@813@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2349 | p2_17@813@01 | live]
; [else-branch: 2349 | !(p2_17@813@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2349 | p2_17@813@01]
(assert p2_17@813@01)
; [exec]
; _res_9 := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(push) ; 9
(assert (__prim__bool___box__%precondition $Snap.unit true))
(pop) ; 9
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit true))
(declare-const _res_9@849@01 $Ref)
(assert (= _res_9@849@01 (__prim__bool___box__ $Snap.unit true)))
; [exec]
; ret2_8 := true
; [exec]
; assert true
; [eval] p1_17 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not p1_17@812@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2350 | p1_17@812@01 | live]
; [else-branch: 2350 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2350 | p1_17@812@01]
(assert p1_17@812@01)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert p1_17@812@01)
; [eval] p2_17 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2351 | p2_17@813@01 | live]
; [else-branch: 2351 | !(p2_17@813@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2351 | p2_17@813@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_17 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2352 | p1_17@812@01 | live]
; [else-branch: 2352 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2352 | p1_17@812@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p1_17@812@01
  (issubtype<Bool> (typeof<PyType> _res@847@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_17@812@01
  (issubtype<Bool> (typeof<PyType> _res@847@01) (as int<PyType>  PyType))))
; [eval] p2_17 ==> issubtype(typeof(_res_9), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2353 | p2_17@813@01 | live]
; [else-branch: 2353 | !(p2_17@813@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2353 | p2_17@813@01]
; [eval] issubtype(typeof(_res_9), int())
; [eval] typeof(_res_9)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p2_17@813@01
  (issubtype<Bool> (typeof<PyType> _res_9@849@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_17@813@01
  (issubtype<Bool> (typeof<PyType> _res_9@849@01) (as int<PyType>  PyType))))
; [eval] p1_17 && p2_17 ==> int___eq__(_res, _res_9)
; [eval] p1_17 && p2_17
(push) ; 9
; [then-branch: 2354 | !(p1_17@812@01) | live]
; [else-branch: 2354 | p1_17@812@01 | live]
(push) ; 10
; [then-branch: 2354 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2354 | p1_17@812@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_17@812@01 p2_17@813@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_17@812@01 p2_17@813@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2355 | p1_17@812@01 && p2_17@813@01 | live]
; [else-branch: 2355 | !(p1_17@812@01 && p2_17@813@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2355 | p1_17@812@01 && p2_17@813@01]
(assert (and p1_17@812@01 p2_17@813@01))
; [eval] int___eq__(_res, _res_9)
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> _res@847@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@847@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> _res_9@849@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res_9@849@01) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@847@01 _res_9@849@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@847@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> _res_9@849@01) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@847@01 _res_9@849@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and p1_17@812@01 p2_17@813@01)
  (and
    p1_17@812@01
    p2_17@813@01
    (issubtype<Bool> (typeof<PyType> _res@847@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> _res_9@849@01) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@847@01 _res_9@849@01))))
(assert (and p1_17@812@01 p2_17@813@01))
(push) ; 9
(assert (not (=>
  (and p1_17@812@01 p2_17@813@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@847@01 _res_9@849@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_17@812@01 p2_17@813@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@847@01 _res_9@849@01)))
; [eval] p1_17 ==> (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2356 | p1_17@812@01 | live]
; [else-branch: 2356 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2356 | p1_17@812@01]
; [eval] (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false)
(push) ; 11
; [then-branch: 2357 | False | live]
; [else-branch: 2357 | True | live]
(push) ; 12
; [then-branch: 2357 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2357 | True]
; [eval] (forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false)
(push) ; 13
; [then-branch: 2358 | False | live]
; [else-branch: 2358 | True | live]
(push) ; 14
; [then-branch: 2358 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2358 | True]
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 2359 | False | live]
; [else-branch: 2359 | True | live]
(push) ; 16
; [then-branch: 2359 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2359 | True]
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_17 ==> (forperm _r_27: Ref [MustInvokeBounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBoundedp] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnboundedp] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2360 | p2_17@813@01 | live]
; [else-branch: 2360 | !(p2_17@813@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2360 | p2_17@813@01]
; [eval] (forperm _r_27: Ref [MustInvokeBounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBoundedp] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_27: Ref [MustInvokeBounded_0(_r_27)] :: false)
(push) ; 11
; [then-branch: 2361 | False | live]
; [else-branch: 2361 | True | live]
(push) ; 12
; [then-branch: 2361 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2361 | True]
; [eval] (forperm _r_27: Ref [MustInvokeUnbounded_0(_r_27)] :: false)
(push) ; 13
; [then-branch: 2362 | False | live]
; [else-branch: 2362 | True | live]
(push) ; 14
; [then-branch: 2362 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2362 | True]
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBoundedp] :: false)
(push) ; 15
; [then-branch: 2363 | False | live]
; [else-branch: 2363 | True | live]
(push) ; 16
; [then-branch: 2363 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2363 | True]
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnboundedp] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
; [eval] !(p2_17 && !ret2_8)
; [eval] p2_17 && !ret2_8
(push) ; 8
; [then-branch: 2364 | !(p2_17@813@01) | live]
; [else-branch: 2364 | p2_17@813@01 | live]
(push) ; 9
; [then-branch: 2364 | !(p2_17@813@01)]
(assert (not p2_17@813@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2364 | p2_17@813@01]
(assert p2_17@813@01)
; [eval] !ret2_8
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_17@813@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2365 | !(p2_17@813@01) | dead]
; [else-branch: 2365 | p2_17@813@01 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 2365 | p2_17@813@01]
(assert p2_17@813@01)
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 2343 | p2_18@844@01]
(assert p2_18@844@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 2317 | !(p1_18@843@01)]
(assert (not p1_18@843@01))
(pop) ; 5
; [eval] !(p1_18 && !ret1_8)
; [eval] p1_18 && !ret1_8
(push) ; 5
; [then-branch: 2366 | !(p1_18@843@01) | live]
; [else-branch: 2366 | p1_18@843@01 | live]
(push) ; 6
; [then-branch: 2366 | !(p1_18@843@01)]
(assert (not p1_18@843@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2366 | p1_18@843@01]
(assert p1_18@843@01)
; [eval] !ret1_8
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not p1_18@843@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_18@843@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2367 | !(p1_18@843@01) | live]
; [else-branch: 2367 | p1_18@843@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2367 | !(p1_18@843@01)]
(assert (not p1_18@843@01))
; [eval] p2_18 && !ret2_8
(push) ; 6
; [then-branch: 2368 | !(p2_18@844@01) | live]
; [else-branch: 2368 | p2_18@844@01 | live]
(push) ; 7
; [then-branch: 2368 | !(p2_18@844@01)]
(assert (not p2_18@844@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2368 | p2_18@844@01]
(assert p2_18@844@01)
; [eval] !ret2_8
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_18@844@01 (not p2_18@844@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_18@844@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not p2_18@844@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2369 | p2_18@844@01 | live]
; [else-branch: 2369 | !(p2_18@844@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2369 | p2_18@844@01]
(assert p2_18@844@01)
; [exec]
; _res_9 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const _res_9@850@01 $Ref)
(assert (= _res_9@850@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; ret2_8 := true
; [eval] p1_17 && !ret1_8
(push) ; 7
; [then-branch: 2370 | !(p1_17@812@01) | live]
; [else-branch: 2370 | p1_17@812@01 | live]
(push) ; 8
; [then-branch: 2370 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2370 | p1_17@812@01]
(assert p1_17@812@01)
; [eval] !ret1_8
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not p1_17@812@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2371 | p1_17@812@01 | live]
; [else-branch: 2371 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2371 | p1_17@812@01]
(assert p1_17@812@01)
; [exec]
; _res := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(push) ; 8
(assert (__prim__bool___box__%precondition $Snap.unit true))
(pop) ; 8
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit true))
(declare-const _res@851@01 $Ref)
(assert (= _res@851@01 (__prim__bool___box__ $Snap.unit true)))
; [exec]
; ret1_8 := true
; [eval] p2_17 && !ret2_8
(push) ; 8
; [then-branch: 2372 | !(p2_17@813@01) | live]
; [else-branch: 2372 | p2_17@813@01 | live]
(push) ; 9
; [then-branch: 2372 | !(p2_17@813@01)]
(assert (not p2_17@813@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2372 | p2_17@813@01]
(assert p2_17@813@01)
; [eval] !ret2_8
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 2373 | False | dead]
; [else-branch: 2373 | True | live]
(push) ; 8
; [else-branch: 2373 | True]
(pop) ; 8
; [eval] !(p2_17 && !ret2_8)
; [eval] p2_17 && !ret2_8
(push) ; 8
; [then-branch: 2374 | !(p2_17@813@01) | live]
; [else-branch: 2374 | p2_17@813@01 | live]
(push) ; 9
; [then-branch: 2374 | !(p2_17@813@01)]
(assert (not p2_17@813@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2374 | p2_17@813@01]
(assert p2_17@813@01)
; [eval] !ret2_8
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2375 | True | live]
; [else-branch: 2375 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2375 | True]
; [exec]
; assert true
; [eval] p1_17 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2376 | p1_17@812@01 | live]
; [else-branch: 2376 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2376 | p1_17@812@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_17 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not p2_17@813@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2377 | p2_17@813@01 | live]
; [else-branch: 2377 | !(p2_17@813@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2377 | p2_17@813@01]
(assert p2_17@813@01)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert p2_17@813@01)
; [eval] p1_17 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2378 | p1_17@812@01 | live]
; [else-branch: 2378 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2378 | p1_17@812@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p1_17@812@01
  (issubtype<Bool> (typeof<PyType> _res@851@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_17@812@01
  (issubtype<Bool> (typeof<PyType> _res@851@01) (as int<PyType>  PyType))))
; [eval] p2_17 ==> issubtype(typeof(_res_9), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2379 | p2_17@813@01 | live]
; [else-branch: 2379 | !(p2_17@813@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2379 | p2_17@813@01]
; [eval] issubtype(typeof(_res_9), int())
; [eval] typeof(_res_9)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p2_17@813@01
  (issubtype<Bool> (typeof<PyType> _res_9@850@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_17@813@01
  (issubtype<Bool> (typeof<PyType> _res_9@850@01) (as int<PyType>  PyType))))
; [eval] p1_17 && p2_17 ==> int___eq__(_res, _res_9)
; [eval] p1_17 && p2_17
(push) ; 9
; [then-branch: 2380 | !(p1_17@812@01) | live]
; [else-branch: 2380 | p1_17@812@01 | live]
(push) ; 10
; [then-branch: 2380 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2380 | p1_17@812@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_17@812@01 p2_17@813@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_17@812@01 p2_17@813@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2381 | p1_17@812@01 && p2_17@813@01 | live]
; [else-branch: 2381 | !(p1_17@812@01 && p2_17@813@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2381 | p1_17@812@01 && p2_17@813@01]
(assert (and p1_17@812@01 p2_17@813@01))
; [eval] int___eq__(_res, _res_9)
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> _res@851@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@851@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> _res_9@850@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res_9@850@01) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@851@01 _res_9@850@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@851@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> _res_9@850@01) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@851@01 _res_9@850@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and p1_17@812@01 p2_17@813@01)
  (and
    p1_17@812@01
    p2_17@813@01
    (issubtype<Bool> (typeof<PyType> _res@851@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> _res_9@850@01) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@851@01 _res_9@850@01))))
(assert (and p1_17@812@01 p2_17@813@01))
(push) ; 9
(assert (not (=>
  (and p1_17@812@01 p2_17@813@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@851@01 _res_9@850@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_17@812@01 p2_17@813@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@851@01 _res_9@850@01)))
; [eval] p1_17 ==> (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2382 | p1_17@812@01 | live]
; [else-branch: 2382 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2382 | p1_17@812@01]
; [eval] (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false)
(push) ; 11
; [then-branch: 2383 | False | live]
; [else-branch: 2383 | True | live]
(push) ; 12
; [then-branch: 2383 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2383 | True]
; [eval] (forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false)
(push) ; 13
; [then-branch: 2384 | False | live]
; [else-branch: 2384 | True | live]
(push) ; 14
; [then-branch: 2384 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2384 | True]
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 2385 | False | live]
; [else-branch: 2385 | True | live]
(push) ; 16
; [then-branch: 2385 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2385 | True]
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_17 ==> (forperm _r_27: Ref [MustInvokeBounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBoundedp] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnboundedp] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2386 | p2_17@813@01 | live]
; [else-branch: 2386 | !(p2_17@813@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2386 | p2_17@813@01]
; [eval] (forperm _r_27: Ref [MustInvokeBounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBoundedp] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_27: Ref [MustInvokeBounded_0(_r_27)] :: false)
(push) ; 11
; [then-branch: 2387 | False | live]
; [else-branch: 2387 | True | live]
(push) ; 12
; [then-branch: 2387 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2387 | True]
; [eval] (forperm _r_27: Ref [MustInvokeUnbounded_0(_r_27)] :: false)
(push) ; 13
; [then-branch: 2388 | False | live]
; [else-branch: 2388 | True | live]
(push) ; 14
; [then-branch: 2388 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2388 | True]
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBoundedp] :: false)
(push) ; 15
; [then-branch: 2389 | False | live]
; [else-branch: 2389 | True | live]
(push) ; 16
; [then-branch: 2389 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2389 | True]
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnboundedp] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; [eval] !(p1_17 && !ret1_8)
; [eval] p1_17 && !ret1_8
(push) ; 7
; [then-branch: 2390 | !(p1_17@812@01) | live]
; [else-branch: 2390 | p1_17@812@01 | live]
(push) ; 8
; [then-branch: 2390 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2390 | p1_17@812@01]
(assert p1_17@812@01)
; [eval] !ret1_8
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_17@812@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2391 | !(p1_17@812@01) | dead]
; [else-branch: 2391 | p1_17@812@01 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 2391 | p1_17@812@01]
(assert p1_17@812@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 2369 | !(p2_18@844@01)]
(assert (not p2_18@844@01))
(pop) ; 6
; [eval] !(p2_18 && !ret2_8)
; [eval] p2_18 && !ret2_8
(push) ; 6
; [then-branch: 2392 | !(p2_18@844@01) | live]
; [else-branch: 2392 | p2_18@844@01 | live]
(push) ; 7
; [then-branch: 2392 | !(p2_18@844@01)]
(assert (not p2_18@844@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2392 | p2_18@844@01]
(assert p2_18@844@01)
; [eval] !ret2_8
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_18@844@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_18@844@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2393 | !(p2_18@844@01) | live]
; [else-branch: 2393 | p2_18@844@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2393 | !(p2_18@844@01)]
(assert (not p2_18@844@01))
; [eval] p1_17 && !ret1_8
(push) ; 7
; [then-branch: 2394 | !(p1_17@812@01) | live]
; [else-branch: 2394 | p1_17@812@01 | live]
(push) ; 8
; [then-branch: 2394 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2394 | p1_17@812@01]
(assert p1_17@812@01)
; [eval] !ret1_8
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not p1_17@812@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2395 | p1_17@812@01 | live]
; [else-branch: 2395 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2395 | p1_17@812@01]
(assert p1_17@812@01)
; [exec]
; _res := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(push) ; 8
(assert (__prim__bool___box__%precondition $Snap.unit true))
(pop) ; 8
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit true))
(declare-const _res@852@01 $Ref)
(assert (= _res@852@01 (__prim__bool___box__ $Snap.unit true)))
; [exec]
; ret1_8 := true
; [eval] p2_17 && !ret2_8
(push) ; 8
; [then-branch: 2396 | !(p2_17@813@01) | live]
; [else-branch: 2396 | p2_17@813@01 | live]
(push) ; 9
; [then-branch: 2396 | !(p2_17@813@01)]
(assert (not p2_17@813@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2396 | p2_17@813@01]
(assert p2_17@813@01)
; [eval] !ret2_8
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not p2_17@813@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2397 | p2_17@813@01 | live]
; [else-branch: 2397 | !(p2_17@813@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2397 | p2_17@813@01]
(assert p2_17@813@01)
; [exec]
; _res_9 := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const _res_9@853@01 $Ref)
(assert (= _res_9@853@01 (__prim__bool___box__ $Snap.unit true)))
; [exec]
; ret2_8 := true
; [exec]
; assert true
; [eval] p1_17 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2398 | p1_17@812@01 | live]
; [else-branch: 2398 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2398 | p1_17@812@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_17 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2399 | p2_17@813@01 | live]
; [else-branch: 2399 | !(p2_17@813@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2399 | p2_17@813@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_17 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2400 | p1_17@812@01 | live]
; [else-branch: 2400 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2400 | p1_17@812@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p1_17@812@01
  (issubtype<Bool> (typeof<PyType> _res@852@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_17@812@01
  (issubtype<Bool> (typeof<PyType> _res@852@01) (as int<PyType>  PyType))))
; [eval] p2_17 ==> issubtype(typeof(_res_9), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2401 | p2_17@813@01 | live]
; [else-branch: 2401 | !(p2_17@813@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2401 | p2_17@813@01]
; [eval] issubtype(typeof(_res_9), int())
; [eval] typeof(_res_9)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p2_17@813@01
  (issubtype<Bool> (typeof<PyType> _res_9@853@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_17@813@01
  (issubtype<Bool> (typeof<PyType> _res_9@853@01) (as int<PyType>  PyType))))
; [eval] p1_17 && p2_17 ==> int___eq__(_res, _res_9)
; [eval] p1_17 && p2_17
(push) ; 9
; [then-branch: 2402 | !(p1_17@812@01) | live]
; [else-branch: 2402 | p1_17@812@01 | live]
(push) ; 10
; [then-branch: 2402 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2402 | p1_17@812@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_17@812@01 p2_17@813@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and p1_17@812@01 p2_17@813@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2403 | p1_17@812@01 && p2_17@813@01 | live]
; [else-branch: 2403 | !(p1_17@812@01 && p2_17@813@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2403 | p1_17@812@01 && p2_17@813@01]
(assert (and p1_17@812@01 p2_17@813@01))
; [eval] int___eq__(_res, _res_9)
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> _res@852@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@852@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> _res_9@853@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res_9@853@01) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@852@01 _res_9@853@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@852@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> _res_9@853@01) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@852@01 _res_9@853@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and p1_17@812@01 p2_17@813@01)
  (and
    p1_17@812@01
    p2_17@813@01
    (issubtype<Bool> (typeof<PyType> _res@852@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> _res_9@853@01) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@852@01 _res_9@853@01))))
(assert (and p1_17@812@01 p2_17@813@01))
(push) ; 9
(assert (not (=>
  (and p1_17@812@01 p2_17@813@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@852@01 _res_9@853@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_17@812@01 p2_17@813@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@852@01 _res_9@853@01)))
; [eval] p1_17 ==> (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2404 | p1_17@812@01 | live]
; [else-branch: 2404 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2404 | p1_17@812@01]
; [eval] (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false)
(push) ; 11
; [then-branch: 2405 | False | live]
; [else-branch: 2405 | True | live]
(push) ; 12
; [then-branch: 2405 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2405 | True]
; [eval] (forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false)
(push) ; 13
; [then-branch: 2406 | False | live]
; [else-branch: 2406 | True | live]
(push) ; 14
; [then-branch: 2406 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2406 | True]
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 2407 | False | live]
; [else-branch: 2407 | True | live]
(push) ; 16
; [then-branch: 2407 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2407 | True]
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_17 ==> (forperm _r_27: Ref [MustInvokeBounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBoundedp] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnboundedp] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2408 | p2_17@813@01 | live]
; [else-branch: 2408 | !(p2_17@813@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2408 | p2_17@813@01]
; [eval] (forperm _r_27: Ref [MustInvokeBounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBoundedp] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_27: Ref [MustInvokeBounded_0(_r_27)] :: false)
(push) ; 11
; [then-branch: 2409 | False | live]
; [else-branch: 2409 | True | live]
(push) ; 12
; [then-branch: 2409 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2409 | True]
; [eval] (forperm _r_27: Ref [MustInvokeUnbounded_0(_r_27)] :: false)
(push) ; 13
; [then-branch: 2410 | False | live]
; [else-branch: 2410 | True | live]
(push) ; 14
; [then-branch: 2410 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2410 | True]
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBoundedp] :: false)
(push) ; 15
; [then-branch: 2411 | False | live]
; [else-branch: 2411 | True | live]
(push) ; 16
; [then-branch: 2411 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2411 | True]
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnboundedp] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
; [eval] !(p2_17 && !ret2_8)
; [eval] p2_17 && !ret2_8
(push) ; 8
; [then-branch: 2412 | !(p2_17@813@01) | live]
; [else-branch: 2412 | p2_17@813@01 | live]
(push) ; 9
; [then-branch: 2412 | !(p2_17@813@01)]
(assert (not p2_17@813@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2412 | p2_17@813@01]
(assert p2_17@813@01)
; [eval] !ret2_8
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_17@813@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2413 | !(p2_17@813@01) | dead]
; [else-branch: 2413 | p2_17@813@01 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 2413 | p2_17@813@01]
(assert p2_17@813@01)
(pop) ; 8
(pop) ; 7
; [eval] !(p1_17 && !ret1_8)
; [eval] p1_17 && !ret1_8
(push) ; 7
; [then-branch: 2414 | !(p1_17@812@01) | live]
; [else-branch: 2414 | p1_17@812@01 | live]
(push) ; 8
; [then-branch: 2414 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2414 | p1_17@812@01]
(assert p1_17@812@01)
; [eval] !ret1_8
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_17@812@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2415 | !(p1_17@812@01) | dead]
; [else-branch: 2415 | p1_17@812@01 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 2415 | p1_17@812@01]
(assert p1_17@812@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 2393 | p2_18@844@01]
(assert p2_18@844@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 2367 | p1_18@843@01]
(assert p1_18@843@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 2307 | !(p2_17@813@01)]
(assert (not p2_17@813@01))
(pop) ; 4
; [eval] !(p2_17 && !ret2_8)
; [eval] p2_17 && !ret2_8
(push) ; 4
; [then-branch: 2416 | !(p2_17@813@01) | live]
; [else-branch: 2416 | p2_17@813@01 | live]
(push) ; 5
; [then-branch: 2416 | !(p2_17@813@01)]
(assert (not p2_17@813@01))
(pop) ; 5
(push) ; 5
; [else-branch: 2416 | p2_17@813@01]
(assert p2_17@813@01)
; [eval] !ret2_8
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not p2_17@813@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_17@813@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2417 | !(p2_17@813@01) | live]
; [else-branch: 2417 | p2_17@813@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2417 | !(p2_17@813@01)]
(assert (not p2_17@813@01))
; [exec]
; p1_18 := p1_17 && (!ret1_8 && bool___unbox__(secret_20))
; [eval] p1_17 && (!ret1_8 && bool___unbox__(secret_20))
(push) ; 5
; [then-branch: 2418 | !(p1_17@812@01) | live]
; [else-branch: 2418 | p1_17@812@01 | live]
(push) ; 6
; [then-branch: 2418 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2418 | p1_17@812@01]
(assert p1_17@812@01)
; [eval] !ret1_8
(push) ; 7
; [then-branch: 2419 | False | live]
; [else-branch: 2419 | True | live]
(push) ; 8
; [then-branch: 2419 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2419 | True]
; [eval] bool___unbox__(secret_20)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_8@820@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_8@820@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_8@820@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_8@820@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_8@820@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_8@820@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_8@820@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_17@812@01
  (and
    p1_17@812@01
    (issubtype<Bool> (typeof<PyType> secret_8@820@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_8@820@01))))
(declare-const p1_18@854@01 Bool)
(assert (= p1_18@854@01 (and p1_17@812@01 (bool___unbox__ $Snap.unit secret_8@820@01))))
; [exec]
; p2_18 := p2_17 && (!ret2_8 && bool___unbox__(secret_20_0))
; [eval] p2_17 && (!ret2_8 && bool___unbox__(secret_20_0))
(push) ; 5
; [then-branch: 2420 | !(p2_17@813@01) | live]
; [else-branch: 2420 | p2_17@813@01 | live]
(push) ; 6
; [then-branch: 2420 | !(p2_17@813@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 2420 | p2_17@813@01]
(assert p2_17@813@01)
; [eval] !ret2_8
(push) ; 7
; [then-branch: 2421 | False | live]
; [else-branch: 2421 | True | live]
(push) ; 8
; [then-branch: 2421 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2421 | True]
; [eval] bool___unbox__(secret_20_0)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_20_0@833@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_20_0@833@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_20_0@833@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_20_0@833@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_20_0@833@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_20_0@833@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_20_0@833@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_17@813@01
  (and
    p2_17@813@01
    (issubtype<Bool> (typeof<PyType> secret_20_0@833@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_20_0@833@01))))
(declare-const p2_18@855@01 Bool)
(assert (=
  p2_18@855@01
  (and p2_17@813@01 (bool___unbox__ $Snap.unit secret_20_0@833@01))))
; [exec]
; p3_8 := p1_17 && (!ret1_8 && !bool___unbox__(secret_20))
; [eval] p1_17 && (!ret1_8 && !bool___unbox__(secret_20))
(push) ; 5
; [then-branch: 2422 | !(p1_17@812@01) | live]
; [else-branch: 2422 | p1_17@812@01 | live]
(push) ; 6
; [then-branch: 2422 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2422 | p1_17@812@01]
(assert p1_17@812@01)
; [eval] !ret1_8
(push) ; 7
; [then-branch: 2423 | False | live]
; [else-branch: 2423 | True | live]
(push) ; 8
; [then-branch: 2423 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2423 | True]
; [eval] !bool___unbox__(secret_20)
; [eval] bool___unbox__(secret_20)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_8@820@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_8@820@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_8@820@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_8@820@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_8@820@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_8@820@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_8@820@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p3_8@856@01 Bool)
(assert (=
  p3_8@856@01
  (and p1_17@812@01 (not (bool___unbox__ $Snap.unit secret_8@820@01)))))
; [exec]
; p4_8 := p2_17 && (!ret2_8 && !bool___unbox__(secret_20_0))
; [eval] p2_17 && (!ret2_8 && !bool___unbox__(secret_20_0))
(push) ; 5
; [then-branch: 2424 | !(p2_17@813@01) | live]
; [else-branch: 2424 | p2_17@813@01 | live]
(push) ; 6
; [then-branch: 2424 | !(p2_17@813@01)]
(pop) ; 6
(push) ; 6
; [else-branch: 2424 | p2_17@813@01]
(assert p2_17@813@01)
; [eval] !ret2_8
(push) ; 7
; [then-branch: 2425 | False | live]
; [else-branch: 2425 | True | live]
(push) ; 8
; [then-branch: 2425 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2425 | True]
; [eval] !bool___unbox__(secret_20_0)
; [eval] bool___unbox__(secret_20_0)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> secret_20_0@833@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_20_0@833@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_20_0@833@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_20_0@833@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_20_0@833@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_20_0@833@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_20_0@833@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(declare-const p4_8@857@01 Bool)
(assert (=
  p4_8@857@01
  (and p2_17@813@01 (not (bool___unbox__ $Snap.unit secret_20_0@833@01)))))
; [eval] p1_18 && !ret1_8
(push) ; 5
; [then-branch: 2426 | !(p1_18@854@01) | live]
; [else-branch: 2426 | p1_18@854@01 | live]
(push) ; 6
; [then-branch: 2426 | !(p1_18@854@01)]
(assert (not p1_18@854@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2426 | p1_18@854@01]
(assert p1_18@854@01)
; [eval] !ret1_8
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or p1_18@854@01 (not p1_18@854@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_18@854@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not p1_18@854@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2427 | p1_18@854@01 | live]
; [else-branch: 2427 | !(p1_18@854@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2427 | p1_18@854@01]
(assert p1_18@854@01)
; [exec]
; _res := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const _res@858@01 $Ref)
(assert (= _res@858@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; ret1_8 := true
; [eval] p2_18 && !ret2_8
(push) ; 6
; [then-branch: 2428 | !(p2_18@855@01) | live]
; [else-branch: 2428 | p2_18@855@01 | live]
(push) ; 7
; [then-branch: 2428 | !(p2_18@855@01)]
(assert (not p2_18@855@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2428 | p2_18@855@01]
(assert p2_18@855@01)
; [eval] !ret2_8
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_18@855@01 (not p2_18@855@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_18@855@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2429 | p2_18@855@01 | dead]
; [else-branch: 2429 | !(p2_18@855@01) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 2429 | !(p2_18@855@01)]
(assert (not p2_18@855@01))
(pop) ; 6
; [eval] !(p2_18 && !ret2_8)
; [eval] p2_18 && !ret2_8
(push) ; 6
; [then-branch: 2430 | !(p2_18@855@01) | live]
; [else-branch: 2430 | p2_18@855@01 | live]
(push) ; 7
; [then-branch: 2430 | !(p2_18@855@01)]
(assert (not p2_18@855@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2430 | p2_18@855@01]
(assert p2_18@855@01)
; [eval] !ret2_8
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_18@855@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_18@855@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2431 | !(p2_18@855@01) | live]
; [else-branch: 2431 | p2_18@855@01 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2431 | !(p2_18@855@01)]
(assert (not p2_18@855@01))
; [eval] p1_17 && !ret1_8
(push) ; 7
; [then-branch: 2432 | !(p1_17@812@01) | live]
; [else-branch: 2432 | p1_17@812@01 | live]
(push) ; 8
; [then-branch: 2432 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2432 | p1_17@812@01]
(assert p1_17@812@01)
; [eval] !ret1_8
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 2433 | False | dead]
; [else-branch: 2433 | True | live]
(push) ; 7
; [else-branch: 2433 | True]
(pop) ; 7
; [eval] !(p1_17 && !ret1_8)
; [eval] p1_17 && !ret1_8
(push) ; 7
; [then-branch: 2434 | !(p1_17@812@01) | live]
; [else-branch: 2434 | p1_17@812@01 | live]
(push) ; 8
; [then-branch: 2434 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2434 | p1_17@812@01]
(assert p1_17@812@01)
; [eval] !ret1_8
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2435 | True | live]
; [else-branch: 2435 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2435 | True]
; [eval] p2_17 && !ret2_8
(push) ; 8
; [then-branch: 2436 | !(p2_17@813@01) | live]
; [else-branch: 2436 | p2_17@813@01 | live]
(push) ; 9
; [then-branch: 2436 | !(p2_17@813@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 2436 | p2_17@813@01]
(assert p2_17@813@01)
; [eval] !ret2_8
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 2437 | p2_17@813@01 | dead]
; [else-branch: 2437 | !(p2_17@813@01) | live]
(push) ; 8
; [else-branch: 2437 | !(p2_17@813@01)]
(pop) ; 8
; [eval] !(p2_17 && !ret2_8)
; [eval] p2_17 && !ret2_8
(push) ; 8
; [then-branch: 2438 | !(p2_17@813@01) | live]
; [else-branch: 2438 | p2_17@813@01 | live]
(push) ; 9
; [then-branch: 2438 | !(p2_17@813@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 2438 | p2_17@813@01]
(assert p2_17@813@01)
; [eval] !ret2_8
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_17@813@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2439 | !(p2_17@813@01) | live]
; [else-branch: 2439 | p2_17@813@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2439 | !(p2_17@813@01)]
; [exec]
; assert true
; [eval] p1_17 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not p1_17@812@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2440 | p1_17@812@01 | live]
; [else-branch: 2440 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2440 | p1_17@812@01]
(assert p1_17@812@01)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert p1_17@812@01)
; [eval] p2_17 ==> true
(push) ; 9
; [then-branch: 2441 | p2_17@813@01 | dead]
; [else-branch: 2441 | !(p2_17@813@01) | live]
(push) ; 10
; [else-branch: 2441 | !(p2_17@813@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_17 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2442 | p1_17@812@01 | live]
; [else-branch: 2442 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2442 | p1_17@812@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p1_17@812@01
  (issubtype<Bool> (typeof<PyType> _res@858@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_17@812@01
  (issubtype<Bool> (typeof<PyType> _res@858@01) (as int<PyType>  PyType))))
; [eval] p2_17 ==> issubtype(typeof(_res_9), int())
(push) ; 9
; [then-branch: 2443 | p2_17@813@01 | dead]
; [else-branch: 2443 | !(p2_17@813@01) | live]
(push) ; 10
; [else-branch: 2443 | !(p2_17@813@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_17 && p2_17 ==> int___eq__(_res, _res_9)
; [eval] p1_17 && p2_17
(push) ; 9
; [then-branch: 2444 | !(p1_17@812@01) | live]
; [else-branch: 2444 | p1_17@812@01 | live]
(push) ; 10
; [then-branch: 2444 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2444 | p1_17@812@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_17@812@01 p2_17@813@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2445 | p1_17@812@01 && p2_17@813@01 | dead]
; [else-branch: 2445 | !(p1_17@812@01 && p2_17@813@01) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 2445 | !(p1_17@812@01 && p2_17@813@01)]
(assert (not (and p1_17@812@01 p2_17@813@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not (and p1_17@812@01 p2_17@813@01)))
; [eval] p1_17 ==> (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2446 | p1_17@812@01 | live]
; [else-branch: 2446 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2446 | p1_17@812@01]
; [eval] (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false)
(push) ; 11
; [then-branch: 2447 | False | live]
; [else-branch: 2447 | True | live]
(push) ; 12
; [then-branch: 2447 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2447 | True]
; [eval] (forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false)
(push) ; 13
; [then-branch: 2448 | False | live]
; [else-branch: 2448 | True | live]
(push) ; 14
; [then-branch: 2448 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2448 | True]
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 2449 | False | live]
; [else-branch: 2449 | True | live]
(push) ; 16
; [then-branch: 2449 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2449 | True]
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_17 ==> (forperm _r_27: Ref [MustInvokeBounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBoundedp] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnboundedp] :: false)))
(push) ; 9
; [then-branch: 2450 | p2_17@813@01 | dead]
; [else-branch: 2450 | !(p2_17@813@01) | live]
(push) ; 10
; [else-branch: 2450 | !(p2_17@813@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 2427 | !(p1_18@854@01)]
(assert (not p1_18@854@01))
(pop) ; 5
; [eval] !(p1_18 && !ret1_8)
; [eval] p1_18 && !ret1_8
(push) ; 5
; [then-branch: 2451 | !(p1_18@854@01) | live]
; [else-branch: 2451 | p1_18@854@01 | live]
(push) ; 6
; [then-branch: 2451 | !(p1_18@854@01)]
(assert (not p1_18@854@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2451 | p1_18@854@01]
(assert p1_18@854@01)
; [eval] !ret1_8
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not p1_18@854@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_18@854@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2452 | !(p1_18@854@01) | live]
; [else-branch: 2452 | p1_18@854@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2452 | !(p1_18@854@01)]
(assert (not p1_18@854@01))
; [eval] p2_18 && !ret2_8
(push) ; 6
; [then-branch: 2453 | !(p2_18@855@01) | live]
; [else-branch: 2453 | p2_18@855@01 | live]
(push) ; 7
; [then-branch: 2453 | !(p2_18@855@01)]
(assert (not p2_18@855@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2453 | p2_18@855@01]
(assert p2_18@855@01)
; [eval] !ret2_8
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p2_18@855@01 (not p2_18@855@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_18@855@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2454 | p2_18@855@01 | dead]
; [else-branch: 2454 | !(p2_18@855@01) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 2454 | !(p2_18@855@01)]
(assert (not p2_18@855@01))
(pop) ; 6
; [eval] !(p2_18 && !ret2_8)
; [eval] p2_18 && !ret2_8
(push) ; 6
; [then-branch: 2455 | !(p2_18@855@01) | live]
; [else-branch: 2455 | p2_18@855@01 | live]
(push) ; 7
; [then-branch: 2455 | !(p2_18@855@01)]
(assert (not p2_18@855@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2455 | p2_18@855@01]
(assert p2_18@855@01)
; [eval] !ret2_8
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_18@855@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_18@855@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2456 | !(p2_18@855@01) | live]
; [else-branch: 2456 | p2_18@855@01 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2456 | !(p2_18@855@01)]
(assert (not p2_18@855@01))
; [eval] p1_17 && !ret1_8
(push) ; 7
; [then-branch: 2457 | !(p1_17@812@01) | live]
; [else-branch: 2457 | p1_17@812@01 | live]
(push) ; 8
; [then-branch: 2457 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2457 | p1_17@812@01]
(assert p1_17@812@01)
; [eval] !ret1_8
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not p1_17@812@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2458 | p1_17@812@01 | live]
; [else-branch: 2458 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2458 | p1_17@812@01]
(assert p1_17@812@01)
; [exec]
; _res := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(push) ; 8
(assert (__prim__bool___box__%precondition $Snap.unit true))
(pop) ; 8
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit true))
(declare-const _res@859@01 $Ref)
(assert (= _res@859@01 (__prim__bool___box__ $Snap.unit true)))
; [exec]
; ret1_8 := true
; [eval] p2_17 && !ret2_8
(push) ; 8
; [then-branch: 2459 | !(p2_17@813@01) | live]
; [else-branch: 2459 | p2_17@813@01 | live]
(push) ; 9
; [then-branch: 2459 | !(p2_17@813@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 2459 | p2_17@813@01]
(assert p2_17@813@01)
; [eval] !ret2_8
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 2460 | p2_17@813@01 | dead]
; [else-branch: 2460 | !(p2_17@813@01) | live]
(push) ; 8
; [else-branch: 2460 | !(p2_17@813@01)]
(pop) ; 8
; [eval] !(p2_17 && !ret2_8)
; [eval] p2_17 && !ret2_8
(push) ; 8
; [then-branch: 2461 | !(p2_17@813@01) | live]
; [else-branch: 2461 | p2_17@813@01 | live]
(push) ; 9
; [then-branch: 2461 | !(p2_17@813@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 2461 | p2_17@813@01]
(assert p2_17@813@01)
; [eval] !ret2_8
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_17@813@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2462 | !(p2_17@813@01) | live]
; [else-branch: 2462 | p2_17@813@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2462 | !(p2_17@813@01)]
; [exec]
; assert true
; [eval] p1_17 ==> true
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2463 | p1_17@812@01 | live]
; [else-branch: 2463 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2463 | p1_17@812@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_17 ==> true
(push) ; 9
; [then-branch: 2464 | p2_17@813@01 | dead]
; [else-branch: 2464 | !(p2_17@813@01) | live]
(push) ; 10
; [else-branch: 2464 | !(p2_17@813@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_17 ==> issubtype(typeof(_res), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2465 | p1_17@812@01 | live]
; [else-branch: 2465 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2465 | p1_17@812@01]
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  p1_17@812@01
  (issubtype<Bool> (typeof<PyType> _res@859@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_17@812@01
  (issubtype<Bool> (typeof<PyType> _res@859@01) (as int<PyType>  PyType))))
; [eval] p2_17 ==> issubtype(typeof(_res_9), int())
(push) ; 9
; [then-branch: 2466 | p2_17@813@01 | dead]
; [else-branch: 2466 | !(p2_17@813@01) | live]
(push) ; 10
; [else-branch: 2466 | !(p2_17@813@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p1_17 && p2_17 ==> int___eq__(_res, _res_9)
; [eval] p1_17 && p2_17
(push) ; 9
; [then-branch: 2467 | !(p1_17@812@01) | live]
; [else-branch: 2467 | p1_17@812@01 | live]
(push) ; 10
; [then-branch: 2467 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2467 | p1_17@812@01]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (and p1_17@812@01 p2_17@813@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2468 | p1_17@812@01 && p2_17@813@01 | dead]
; [else-branch: 2468 | !(p1_17@812@01 && p2_17@813@01) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 2468 | !(p1_17@812@01 && p2_17@813@01)]
(assert (not (and p1_17@812@01 p2_17@813@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not (and p1_17@812@01 p2_17@813@01)))
; [eval] p1_17 ==> (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_17@812@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2469 | p1_17@812@01 | live]
; [else-branch: 2469 | !(p1_17@812@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2469 | p1_17@812@01]
; [eval] (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false)
(push) ; 11
; [then-branch: 2470 | False | live]
; [else-branch: 2470 | True | live]
(push) ; 12
; [then-branch: 2470 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 2470 | True]
; [eval] (forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false)
(push) ; 13
; [then-branch: 2471 | False | live]
; [else-branch: 2471 | True | live]
(push) ; 14
; [then-branch: 2471 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 2471 | True]
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 2472 | False | live]
; [else-branch: 2472 | True | live]
(push) ; 16
; [then-branch: 2472 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 2472 | True]
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] p2_17 ==> (forperm _r_27: Ref [MustInvokeBounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBoundedp] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnboundedp] :: false)))
(push) ; 9
; [then-branch: 2473 | p2_17@813@01 | dead]
; [else-branch: 2473 | !(p2_17@813@01) | live]
(push) ; 10
; [else-branch: 2473 | !(p2_17@813@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; [eval] !(p1_17 && !ret1_8)
; [eval] p1_17 && !ret1_8
(push) ; 7
; [then-branch: 2474 | !(p1_17@812@01) | live]
; [else-branch: 2474 | p1_17@812@01 | live]
(push) ; 8
; [then-branch: 2474 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2474 | p1_17@812@01]
(assert p1_17@812@01)
; [eval] !ret1_8
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_17@812@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2475 | !(p1_17@812@01) | dead]
; [else-branch: 2475 | p1_17@812@01 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 2475 | p1_17@812@01]
(assert p1_17@812@01)
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 2452 | p1_18@854@01]
(assert p1_18@854@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 2417 | p2_17@813@01]
(assert p2_17@813@01)
(pop) ; 4
(pop) ; 3
; [eval] !(p1_17 && !ret1_8)
; [eval] p1_17 && !ret1_8
(push) ; 3
; [then-branch: 2476 | !(p1_17@812@01) | live]
; [else-branch: 2476 | p1_17@812@01 | live]
(push) ; 4
; [then-branch: 2476 | !(p1_17@812@01)]
(assert (not p1_17@812@01))
(pop) ; 4
(push) ; 4
; [else-branch: 2476 | p1_17@812@01]
(assert p1_17@812@01)
; [eval] !ret1_8
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not p1_17@812@01))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2477 | !(p1_17@812@01) | dead]
; [else-branch: 2477 | p1_17@812@01 | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 2477 | p1_17@812@01]
(assert p1_17@812@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- string_container_low ----------
(declare-const p1_19@860@01 Bool)
(declare-const p2_19@861@01 Bool)
(declare-const _cthread_168@862@01 $Ref)
(declare-const _cthread_168_0@863@01 $Ref)
(declare-const _caller_measures_168@864@01 Seq<Measure$>)
(declare-const _caller_measures_168_0@865@01 Seq<Measure$>)
(declare-const _residue_168@866@01 $Perm)
(declare-const _residue_168_0@867@01 $Perm)
(declare-const secret_9@868@01 $Ref)
(declare-const secret_9_0@869@01 $Ref)
(declare-const x_2@870@01 $Ref)
(declare-const x_2_0@871@01 $Ref)
(declare-const _current_wait_level_168@872@01 $Perm)
(declare-const _current_wait_level_168_0@873@01 $Perm)
(declare-const _res@874@01 $Ref)
(declare-const _res_10@875@01 $Ref)
(declare-const p1_19@876@01 Bool)
(declare-const p2_19@877@01 Bool)
(declare-const _cthread_168@878@01 $Ref)
(declare-const _cthread_168_0@879@01 $Ref)
(declare-const _caller_measures_168@880@01 Seq<Measure$>)
(declare-const _caller_measures_168_0@881@01 Seq<Measure$>)
(declare-const _residue_168@882@01 $Perm)
(declare-const _residue_168_0@883@01 $Perm)
(declare-const secret_9@884@01 $Ref)
(declare-const secret_9_0@885@01 $Ref)
(declare-const x_2@886@01 $Ref)
(declare-const x_2_0@887@01 $Ref)
(declare-const _current_wait_level_168@888@01 $Perm)
(declare-const _current_wait_level_168_0@889@01 $Perm)
(declare-const _res@890@01 $Ref)
(declare-const _res_10@891@01 $Ref)
(push) ; 1
(declare-const $t@892@01 $Snap)
(assert (= $t@892@01 ($Snap.combine ($Snap.first $t@892@01) ($Snap.second $t@892@01))))
(assert (= ($Snap.first $t@892@01) $Snap.unit))
; [eval] p1_19 ==> _cthread_168 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_19@876@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2478 | p1_19@876@01 | live]
; [else-branch: 2478 | !(p1_19@876@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2478 | p1_19@876@01]
(assert p1_19@876@01)
; [eval] _cthread_168 != null
(pop) ; 3
(push) ; 3
; [else-branch: 2478 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_19@876@01) p1_19@876@01))
(assert (=> p1_19@876@01 (not (= _cthread_168@878@01 $Ref.null))))
(assert (=
  ($Snap.second $t@892@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@892@01))
    ($Snap.second ($Snap.second $t@892@01)))))
(assert (= ($Snap.first ($Snap.second $t@892@01)) $Snap.unit))
; [eval] p2_19 ==> _cthread_168_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_19@877@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2479 | p2_19@877@01 | live]
; [else-branch: 2479 | !(p2_19@877@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2479 | p2_19@877@01]
(assert p2_19@877@01)
; [eval] _cthread_168_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 2479 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_19@877@01) p2_19@877@01))
(assert (=> p2_19@877@01 (not (= _cthread_168_0@879@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@892@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@892@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@892@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@892@01))) $Snap.unit))
; [eval] p1_19 ==> issubtype(typeof(_cthread_168), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_19@876@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2480 | p1_19@876@01 | live]
; [else-branch: 2480 | !(p1_19@876@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2480 | p1_19@876@01]
(assert p1_19@876@01)
; [eval] issubtype(typeof(_cthread_168), Thread_0())
; [eval] typeof(_cthread_168)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 2480 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_19@876@01
  (issubtype<Bool> (typeof<PyType> _cthread_168@878@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@892@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@892@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@892@01))))
  $Snap.unit))
; [eval] p2_19 ==> issubtype(typeof(_cthread_168_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_19@877@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2481 | p2_19@877@01 | live]
; [else-branch: 2481 | !(p2_19@877@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2481 | p2_19@877@01]
(assert p2_19@877@01)
; [eval] issubtype(typeof(_cthread_168_0), Thread_0())
; [eval] typeof(_cthread_168_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 2481 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_19@877@01
  (issubtype<Bool> (typeof<PyType> _cthread_168_0@879@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01)))))
  $Snap.unit))
; [eval] p1_19 ==> issubtype(typeof(secret_9), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_19@876@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2482 | p1_19@876@01 | live]
; [else-branch: 2482 | !(p1_19@876@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2482 | p1_19@876@01]
(assert p1_19@876@01)
; [eval] issubtype(typeof(secret_9), bool())
; [eval] typeof(secret_9)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 2482 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_19@876@01
  (issubtype<Bool> (typeof<PyType> secret_9@884@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01))))))
  $Snap.unit))
; [eval] p2_19 ==> issubtype(typeof(secret_9_0), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_19@877@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2483 | p2_19@877@01 | live]
; [else-branch: 2483 | !(p2_19@877@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2483 | p2_19@877@01]
(assert p2_19@877@01)
; [eval] issubtype(typeof(secret_9_0), bool())
; [eval] typeof(secret_9_0)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 2483 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_19@877@01
  (issubtype<Bool> (typeof<PyType> secret_9_0@885@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01)))))))
  $Snap.unit))
; [eval] p1_19 ==> issubtype(typeof(x_2), str())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_19@876@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2484 | p1_19@876@01 | live]
; [else-branch: 2484 | !(p1_19@876@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2484 | p1_19@876@01]
(assert p1_19@876@01)
; [eval] issubtype(typeof(x_2), str())
; [eval] typeof(x_2)
; [eval] str()
(pop) ; 3
(push) ; 3
; [else-branch: 2484 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_19@876@01
  (issubtype<Bool> (typeof<PyType> x_2@886@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01))))))))
  $Snap.unit))
; [eval] p2_19 ==> issubtype(typeof(x_2_0), str())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_19@877@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2485 | p2_19@877@01 | live]
; [else-branch: 2485 | !(p2_19@877@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2485 | p2_19@877@01]
(assert p2_19@877@01)
; [eval] issubtype(typeof(x_2_0), str())
; [eval] typeof(x_2_0)
; [eval] str()
(pop) ; 3
(push) ; 3
; [else-branch: 2485 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_19@877@01
  (issubtype<Bool> (typeof<PyType> x_2_0@887@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01)))))))))
  $Snap.unit))
; [eval] p1_19 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_19@876@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2486 | p1_19@876@01 | live]
; [else-branch: 2486 | !(p1_19@876@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2486 | p1_19@876@01]
(assert p1_19@876@01)
(pop) ; 3
(push) ; 3
; [else-branch: 2486 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@892@01)))))))))
  $Snap.unit))
; [eval] p2_19 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_19@877@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2487 | p2_19@877@01 | live]
; [else-branch: 2487 | !(p2_19@877@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2487 | p2_19@877@01]
(assert p2_19@877@01)
(pop) ; 3
(push) ; 3
; [else-branch: 2487 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@893@01 $Snap)
(assert (= $t@893@01 ($Snap.combine ($Snap.first $t@893@01) ($Snap.second $t@893@01))))
(assert (= ($Snap.first $t@893@01) $Snap.unit))
; [eval] p1_19 ==> (forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_168) && ((forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_168) && _residue_168 <= _current_wait_level_168)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_19@876@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2488 | p1_19@876@01 | live]
; [else-branch: 2488 | !(p1_19@876@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2488 | p1_19@876@01]
(assert p1_19@876@01)
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_168) && ((forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_168) && _residue_168 <= _current_wait_level_168)
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_168)
(push) ; 5
; [then-branch: 2489 | False | live]
; [else-branch: 2489 | True | live]
(push) ; 6
; [then-branch: 2489 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 2489 | True]
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_168)
(push) ; 7
; [then-branch: 2490 | False | live]
; [else-branch: 2490 | True | live]
(push) ; 8
; [then-branch: 2490 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2490 | True]
; [eval] _residue_168 <= _current_wait_level_168
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 2488 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p1_19@876@01 (<= _residue_168@882@01 _current_wait_level_168@888@01)))
(assert (=
  ($Snap.second $t@893@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@893@01))
    ($Snap.second ($Snap.second $t@893@01)))))
(assert (= ($Snap.first ($Snap.second $t@893@01)) $Snap.unit))
; [eval] p2_19 ==> (forperm _r_29: Ref [_r_29.MustReleaseBoundedp] :: Level(_r_29) <= _current_wait_level_168_0) && ((forperm _r_29: Ref [_r_29.MustReleaseUnboundedp] :: Level(_r_29) <= _current_wait_level_168_0) && _residue_168_0 <= _current_wait_level_168_0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_19@877@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2491 | p2_19@877@01 | live]
; [else-branch: 2491 | !(p2_19@877@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2491 | p2_19@877@01]
(assert p2_19@877@01)
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseBoundedp] :: Level(_r_29) <= _current_wait_level_168_0) && ((forperm _r_29: Ref [_r_29.MustReleaseUnboundedp] :: Level(_r_29) <= _current_wait_level_168_0) && _residue_168_0 <= _current_wait_level_168_0)
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseBoundedp] :: Level(_r_29) <= _current_wait_level_168_0)
(push) ; 5
; [then-branch: 2492 | False | live]
; [else-branch: 2492 | True | live]
(push) ; 6
; [then-branch: 2492 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 2492 | True]
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseUnboundedp] :: Level(_r_29) <= _current_wait_level_168_0)
(push) ; 7
; [then-branch: 2493 | False | live]
; [else-branch: 2493 | True | live]
(push) ; 8
; [then-branch: 2493 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2493 | True]
; [eval] _residue_168_0 <= _current_wait_level_168_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 2491 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p2_19@877@01 (<= _residue_168_0@883@01 _current_wait_level_168_0@889@01)))
(assert (=
  ($Snap.second ($Snap.second $t@893@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@893@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@893@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@893@01))) $Snap.unit))
; [eval] p1_19 ==> issubtype(typeof(_res), str())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_19@876@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2494 | p1_19@876@01 | live]
; [else-branch: 2494 | !(p1_19@876@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2494 | p1_19@876@01]
(assert p1_19@876@01)
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 4
(push) ; 4
; [else-branch: 2494 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_19@876@01
  (issubtype<Bool> (typeof<PyType> _res@890@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@893@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@893@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@893@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@893@01))))
  $Snap.unit))
; [eval] p2_19 ==> issubtype(typeof(_res_10), str())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_19@877@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2495 | p2_19@877@01 | live]
; [else-branch: 2495 | !(p2_19@877@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2495 | p2_19@877@01]
(assert p2_19@877@01)
; [eval] issubtype(typeof(_res_10), str())
; [eval] typeof(_res_10)
; [eval] str()
(pop) ; 4
(push) ; 4
; [else-branch: 2495 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_19@877@01
  (issubtype<Bool> (typeof<PyType> _res_10@891@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@893@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@893@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@893@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@893@01)))))
  $Snap.unit))
; [eval] (p1_19 && p2_19 ==> x_2 == x_2_0) ==> p1_19 && p2_19 ==> _res == _res_10
; [eval] p1_19 && p2_19 ==> x_2 == x_2_0
; [eval] p1_19 && p2_19
(push) ; 3
; [then-branch: 2496 | !(p1_19@876@01) | live]
; [else-branch: 2496 | p1_19@876@01 | live]
(push) ; 4
; [then-branch: 2496 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 4
(push) ; 4
; [else-branch: 2496 | p1_19@876@01]
(assert p1_19@876@01)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1_19@876@01 (not p1_19@876@01)))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (and p1_19@876@01 p2_19@877@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and p1_19@876@01 p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2497 | p1_19@876@01 && p2_19@877@01 | live]
; [else-branch: 2497 | !(p1_19@876@01 && p2_19@877@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2497 | p1_19@876@01 && p2_19@877@01]
(assert (and p1_19@876@01 p2_19@877@01))
; [eval] x_2 == x_2_0
(pop) ; 4
(push) ; 4
; [else-branch: 2497 | !(p1_19@876@01 && p2_19@877@01)]
(assert (not (and p1_19@876@01 p2_19@877@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (and p1_19@876@01 p2_19@877@01)) (and p1_19@876@01 p2_19@877@01)))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2498 | p1_19@876@01 && p2_19@877@01 ==> x_2@886@01 == x_2_0@887@01 | live]
; [else-branch: 2498 | !(p1_19@876@01 && p2_19@877@01 ==> x_2@886@01 == x_2_0@887@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2498 | p1_19@876@01 && p2_19@877@01 ==> x_2@886@01 == x_2_0@887@01]
(assert (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01)))
; [eval] p1_19 && p2_19 ==> _res == _res_10
; [eval] p1_19 && p2_19
(push) ; 5
; [then-branch: 2499 | !(p1_19@876@01) | live]
; [else-branch: 2499 | p1_19@876@01 | live]
(push) ; 6
; [then-branch: 2499 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2499 | p1_19@876@01]
(assert p1_19@876@01)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (and p1_19@876@01 p2_19@877@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and p1_19@876@01 p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2500 | p1_19@876@01 && p2_19@877@01 | live]
; [else-branch: 2500 | !(p1_19@876@01 && p2_19@877@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2500 | p1_19@876@01 && p2_19@877@01]
(assert (and p1_19@876@01 p2_19@877@01))
; [eval] _res == _res_10
(pop) ; 6
(push) ; 6
; [else-branch: 2500 | !(p1_19@876@01 && p2_19@877@01)]
(assert (not (and p1_19@876@01 p2_19@877@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 2498 | !(p1_19@876@01 && p2_19@877@01 ==> x_2@886@01 == x_2_0@887@01)]
(assert (not (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))
    (and p1_19@876@01 p2_19@877@01))
  (= x_2@886@01 x_2_0@887@01)))
; Joined path conditions
(assert (or
  (not (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01)))
  (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))))
(assert (=>
  (and
    (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))
    (and p1_19@876@01 p2_19@877@01))
  (= _res@890@01 _res_10@891@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@893@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@893@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@893@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@893@01))))))
  $Snap.unit))
; [eval] p1_19 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_19@876@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2501 | p1_19@876@01 | live]
; [else-branch: 2501 | !(p1_19@876@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2501 | p1_19@876@01]
(assert p1_19@876@01)
(pop) ; 4
(push) ; 4
; [else-branch: 2501 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@893@01))))))
  $Snap.unit))
; [eval] p2_19 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_19@877@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2502 | p2_19@877@01 | live]
; [else-branch: 2502 | !(p2_19@877@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2502 | p2_19@877@01]
(assert p2_19@877@01)
(pop) ; 4
(push) ; 4
; [else-branch: 2502 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
(push) ; 2
; [exec]
; var ret1_9: Bool
(declare-const ret1_9@894@01 Bool)
; [exec]
; var ret2_9: Bool
(declare-const ret2_9@895@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@896@01 $Ref)
; [exec]
; var _err_10: Ref
(declare-const _err_10@897@01 $Ref)
; [exec]
; var a_4: Ref
(declare-const a_4@898@01 $Ref)
; [exec]
; var a_4_0: Ref
(declare-const a_4_0@899@01 $Ref)
; [exec]
; var b_4: Ref
(declare-const b_4@900@01 $Ref)
; [exec]
; var b_4_0: Ref
(declare-const b_4_0@901@01 $Ref)
; [exec]
; var secret_21: Ref
(declare-const secret_21@902@01 $Ref)
; [exec]
; var secret_21_0: Ref
(declare-const secret_21_0@903@01 $Ref)
; [exec]
; var x_6: Ref
(declare-const x_6@904@01 $Ref)
; [exec]
; var x_6_0: Ref
(declare-const x_6_0@905@01 $Ref)
; [exec]
; var StringContainer_res: Ref
(declare-const StringContainer_res@906@01 $Ref)
; [exec]
; var StringContainer_res_3: Ref
(declare-const StringContainer_res_3@907@01 $Ref)
; [exec]
; var StringContainer_res_0: Ref
(declare-const StringContainer_res_0@908@01 $Ref)
; [exec]
; var StringContainer_res_0_0: Ref
(declare-const StringContainer_res_0_0@909@01 $Ref)
; [exec]
; var _cwl_168: Perm
(declare-const _cwl_168@910@01 $Perm)
; [exec]
; var _cwl_168_0: Perm
(declare-const _cwl_168_0@911@01 $Perm)
; [exec]
; var _method_measures_168: Seq[Measure$]
(declare-const _method_measures_168@912@01 Seq<Measure$>)
; [exec]
; var _method_measures_168_0: Seq[Measure$]
(declare-const _method_measures_168_0@913@01 Seq<Measure$>)
; [exec]
; var tmp_9: Ref
(declare-const tmp_9@914@01 $Ref)
; [exec]
; var tmp_10: Ref
(declare-const tmp_10@915@01 $Ref)
; [exec]
; var p1_20: Bool
(declare-const p1_20@916@01 Bool)
; [exec]
; var p2_20: Bool
(declare-const p2_20@917@01 Bool)
; [exec]
; var p3_9: Bool
(declare-const p3_9@918@01 Bool)
; [exec]
; var p4_9: Bool
(declare-const p4_9@919@01 Bool)
; [exec]
; inhale p1_19
(declare-const $t@920@01 $Snap)
(assert (= $t@920@01 $Snap.unit))
(assert p1_19@876@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ret1_9 := false
; [exec]
; ret2_9 := false
; [eval] p1_19 && !ret1_9
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2503 | !(p1_19@876@01) | live]
; [else-branch: 2503 | p1_19@876@01 | live]
(push) ; 4
; [then-branch: 2503 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 4
(push) ; 4
; [else-branch: 2503 | p1_19@876@01]
; [eval] !ret1_9
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1_19@876@01 (not p1_19@876@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2504 | p1_19@876@01 | live]
; [else-branch: 2504 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2504 | p1_19@876@01]
; [exec]
; _method_measures_168 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; secret_21 := secret_9
; [exec]
; x_6 := x_2
; [eval] p2_19 && !ret2_9
(push) ; 4
; [then-branch: 2505 | !(p2_19@877@01) | live]
; [else-branch: 2505 | p2_19@877@01 | live]
(push) ; 5
; [then-branch: 2505 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 5
(push) ; 5
; [else-branch: 2505 | p2_19@877@01]
(assert p2_19@877@01)
; [eval] !ret2_9
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or p2_19@877@01 (not p2_19@877@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_19@877@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2506 | p2_19@877@01 | live]
; [else-branch: 2506 | !(p2_19@877@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2506 | p2_19@877@01]
(assert p2_19@877@01)
; [exec]
; _method_measures_168_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res_10 := null
; [exec]
; _err_10 := null
; [exec]
; secret_21_0 := secret_9_0
; [exec]
; x_6_0 := x_2_0
; [exec]
; tmp_9 := new()
(declare-const tmp_9@921@01 $Ref)
(assert (not (= tmp_9@921@01 $Ref.null)))
(assert (not (= tmp_9@921@01 a_4@898@01)))
(assert (not (= tmp_9@921@01 StringContainer_res_3@907@01)))
(assert (not (= tmp_9@921@01 b_4@900@01)))
(assert (not (= tmp_9@921@01 _cthread_168@878@01)))
(assert (not (= tmp_9@921@01 secret_9_0@885@01)))
(assert (not (= tmp_9@921@01 _cthread_168_0@879@01)))
(assert (not (= tmp_9@921@01 x_2_0@887@01)))
(assert (not (= tmp_9@921@01 secret_9@884@01)))
(assert (not (= tmp_9@921@01 tmp_9@914@01)))
(assert (not (= tmp_9@921@01 StringContainer_res@906@01)))
(assert (not (= tmp_9@921@01 x_2@886@01)))
(assert (not (= tmp_9@921@01 StringContainer_res_0@908@01)))
(assert (not (= tmp_9@921@01 a_4_0@899@01)))
(assert (not (= tmp_9@921@01 b_4_0@901@01)))
(assert (not (= tmp_9@921@01 StringContainer_res_0_0@909@01)))
(assert (not (= tmp_9@921@01 tmp_10@915@01)))
; [eval] p1_19 && !ret1_9
(push) ; 5
; [then-branch: 2507 | !(p1_19@876@01) | live]
; [else-branch: 2507 | p1_19@876@01 | live]
(push) ; 6
; [then-branch: 2507 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2507 | p1_19@876@01]
; [eval] !ret1_9
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2508 | p1_19@876@01 | live]
; [else-branch: 2508 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2508 | p1_19@876@01]
; [exec]
; StringContainer_res := tmp_9
; [eval] p2_19 && !ret2_9
(push) ; 6
; [then-branch: 2509 | !(p2_19@877@01) | live]
; [else-branch: 2509 | p2_19@877@01 | live]
(push) ; 7
; [then-branch: 2509 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2509 | p2_19@877@01]
; [eval] !ret2_9
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2510 | p2_19@877@01 | live]
; [else-branch: 2510 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2510 | p2_19@877@01]
; [exec]
; StringContainer_res_3 := tmp_9
; [eval] p1_19 && !ret1_9
(push) ; 7
; [then-branch: 2511 | !(p1_19@876@01) | live]
; [else-branch: 2511 | p1_19@876@01 | live]
(push) ; 8
; [then-branch: 2511 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2511 | p1_19@876@01]
; [eval] !ret1_9
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2512 | p1_19@876@01 | live]
; [else-branch: 2512 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2512 | p1_19@876@01]
; [exec]
; inhale typeof(StringContainer_res) == StringContainer()
(declare-const $t@922@01 $Snap)
(assert (= $t@922@01 $Snap.unit))
; [eval] typeof(StringContainer_res) == StringContainer()
; [eval] typeof(StringContainer_res)
; [eval] StringContainer()
(assert (= (typeof<PyType> tmp_9@921@01) (as StringContainer<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(StringContainer_res, 39259342834620444863618799033642229331027), write)
(declare-const $t@923@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [eval] p2_19 && !ret2_9
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2513 | !(p2_19@877@01) | live]
; [else-branch: 2513 | p2_19@877@01 | live]
(push) ; 9
; [then-branch: 2513 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2513 | p2_19@877@01]
; [eval] !ret2_9
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2514 | p2_19@877@01 | live]
; [else-branch: 2514 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2514 | p2_19@877@01]
; [exec]
; inhale typeof(StringContainer_res_3) == StringContainer()
(declare-const $t@924@01 $Snap)
(assert (= $t@924@01 $Snap.unit))
; [eval] typeof(StringContainer_res_3) == StringContainer()
; [eval] typeof(StringContainer_res_3)
; [eval] StringContainer()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(StringContainer_res_3, 39259342834620444863618799033642229331027), write)
(declare-const $t@925@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [eval] p1_19 && !ret1_9 || p2_19 && !ret2_9
; [eval] p1_19 && !ret1_9
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2515 | !(p1_19@876@01) | live]
; [else-branch: 2515 | p1_19@876@01 | live]
(push) ; 10
; [then-branch: 2515 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2515 | p1_19@876@01]
; [eval] !ret1_9
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 2516 | p1_19@876@01 | live]
; [else-branch: 2516 | !(p1_19@876@01) | live]
(push) ; 10
; [then-branch: 2516 | p1_19@876@01]
(pop) ; 10
(push) ; 10
; [else-branch: 2516 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
; [eval] p2_19 && !ret2_9
(push) ; 11
; [then-branch: 2517 | !(p2_19@877@01) | live]
; [else-branch: 2517 | p2_19@877@01 | live]
(push) ; 12
; [then-branch: 2517 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 12
(push) ; 12
; [else-branch: 2517 | p2_19@877@01]
; [eval] !ret2_9
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not (or p1_19@876@01 p2_19@877@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (or p1_19@876@01 p2_19@877@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2518 | p1_19@876@01 || p2_19@877@01 | live]
; [else-branch: 2518 | !(p1_19@876@01 || p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2518 | p1_19@876@01 || p2_19@877@01]
(assert (or p1_19@876@01 p2_19@877@01))
; [exec]
; var tmp1_49: Ref
(declare-const tmp1_49@926@01 $Ref)
; [exec]
; var tmp2_49: Ref
(declare-const tmp2_49@927@01 $Ref)
; [exec]
; var tmp1_50: Seq[Measure$]
(declare-const tmp1_50@928@01 Seq<Measure$>)
; [exec]
; var tmp2_50: Seq[Measure$]
(declare-const tmp2_50@929@01 Seq<Measure$>)
; [exec]
; var tmp1_51: Perm
(declare-const tmp1_51@930@01 $Perm)
; [exec]
; var tmp2_51: Perm
(declare-const tmp2_51@931@01 $Perm)
; [exec]
; var tmp1_52: Ref
(declare-const tmp1_52@932@01 $Ref)
; [exec]
; var tmp2_52: Ref
(declare-const tmp2_52@933@01 $Ref)
; [exec]
; var tmp1_53: Ref
(declare-const tmp1_53@934@01 $Ref)
; [exec]
; var tmp2_53: Ref
(declare-const tmp2_53@935@01 $Ref)
; [exec]
; var tmp1_54: Perm
(declare-const tmp1_54@936@01 $Perm)
; [exec]
; var tmp2_54: Perm
(declare-const tmp2_54@937@01 $Perm)
; [eval] p1_19 && !ret1_9
(push) ; 10
; [then-branch: 2519 | !(p1_19@876@01) | live]
; [else-branch: 2519 | p1_19@876@01 | live]
(push) ; 11
; [then-branch: 2519 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 11
(push) ; 11
; [else-branch: 2519 | p1_19@876@01]
; [eval] !ret1_9
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2520 | p1_19@876@01 | live]
; [else-branch: 2520 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2520 | p1_19@876@01]
; [exec]
; tmp1_49 := _cthread_168
; [exec]
; tmp1_50 := _method_measures_168
; [exec]
; tmp1_51 := _residue_168
; [exec]
; tmp1_52 := StringContainer_res
; [exec]
; tmp1_53 := x_6
; [eval] p2_19 && !ret2_9
(push) ; 11
; [then-branch: 2521 | !(p2_19@877@01) | live]
; [else-branch: 2521 | p2_19@877@01 | live]
(push) ; 12
; [then-branch: 2521 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 12
(push) ; 12
; [else-branch: 2521 | p2_19@877@01]
; [eval] !ret2_9
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2522 | p2_19@877@01 | live]
; [else-branch: 2522 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 2522 | p2_19@877@01]
; [exec]
; tmp2_49 := _cthread_168_0
; [exec]
; tmp2_50 := _method_measures_168_0
; [exec]
; tmp2_51 := _residue_168_0
; [exec]
; tmp2_52 := StringContainer_res_3
; [exec]
; tmp2_53 := x_6_0
; [exec]
; tmp1_54, tmp2_54 := StringContainer___init__(p1_19 && !ret1_9, p2_19 &&
;   !ret2_9, tmp1_49, tmp2_49, tmp1_50, tmp2_50, tmp1_51, tmp2_51, tmp1_52, tmp2_52,
;   tmp1_53, tmp2_53)
; [eval] p1_19 && !ret1_9
(push) ; 12
; [then-branch: 2523 | !(p1_19@876@01) | live]
; [else-branch: 2523 | p1_19@876@01 | live]
(push) ; 13
; [then-branch: 2523 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 13
(push) ; 13
; [else-branch: 2523 | p1_19@876@01]
; [eval] !ret1_9
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [eval] p2_19 && !ret2_9
(push) ; 12
; [then-branch: 2524 | !(p2_19@877@01) | live]
; [else-branch: 2524 | p2_19@877@01 | live]
(push) ; 13
; [then-branch: 2524 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 13
(push) ; 13
; [else-branch: 2524 | p2_19@877@01]
; [eval] !ret2_9
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [eval] p1_26 ==> _cthread_157 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2525 | p1_19@876@01 | live]
; [else-branch: 2525 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2525 | p1_19@876@01]
; [eval] _cthread_157 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p2_26 ==> _cthread_157_0 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2526 | p2_19@877@01 | live]
; [else-branch: 2526 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2526 | p2_19@877@01]
; [eval] _cthread_157_0 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1_26 ==> issubtype(typeof(_cthread_157), Thread_0())
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2527 | p1_19@876@01 | live]
; [else-branch: 2527 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2527 | p1_19@876@01]
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p2_26 ==> issubtype(typeof(_cthread_157_0), Thread_0())
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2528 | p2_19@877@01 | live]
; [else-branch: 2528 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2528 | p2_19@877@01]
; [eval] issubtype(typeof(_cthread_157_0), Thread_0())
; [eval] typeof(_cthread_157_0)
; [eval] Thread_0()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1_26 ==> self_0 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2529 | p1_19@876@01 | live]
; [else-branch: 2529 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2529 | p1_19@876@01]
; [eval] self_0 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=> p1_19@876@01 (not (= tmp_9@921@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=> p1_19@876@01 (not (= tmp_9@921@01 $Ref.null))))
; [eval] p2_26 ==> self_0_0 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2530 | p2_19@877@01 | live]
; [else-branch: 2530 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2530 | p2_19@877@01]
; [eval] self_0_0 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=> p2_19@877@01 (not (= tmp_9@921@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=> p2_19@877@01 (not (= tmp_9@921@01 $Ref.null))))
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2531 | p1_19@876@01 | live]
; [else-branch: 2531 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2531 | p1_19@876@01]
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2532 | p2_19@877@01 | live]
; [else-branch: 2532 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2532 | p2_19@877@01]
; [eval] p1_26 ==> issubtype(typeof(self_0), StringContainer())
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2533 | p1_19@876@01 | live]
; [else-branch: 2533 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2533 | p1_19@876@01]
; [eval] issubtype(typeof(self_0), StringContainer())
; [eval] typeof(self_0)
; [eval] StringContainer()
(pop) ; 15
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (=>
  p1_19@876@01
  (issubtype<Bool> (typeof<PyType> tmp_9@921@01) (as StringContainer<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_19@876@01
  (issubtype<Bool> (typeof<PyType> tmp_9@921@01) (as StringContainer<PyType>  PyType))))
; [eval] p2_26 ==> issubtype(typeof(self_0_0), StringContainer())
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2534 | p2_19@877@01 | live]
; [else-branch: 2534 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2534 | p2_19@877@01]
; [eval] issubtype(typeof(self_0_0), StringContainer())
; [eval] typeof(self_0_0)
; [eval] StringContainer()
(pop) ; 15
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (=>
  p2_19@877@01
  (issubtype<Bool> (typeof<PyType> tmp_9@921@01) (as StringContainer<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_19@877@01
  (issubtype<Bool> (typeof<PyType> tmp_9@921@01) (as StringContainer<PyType>  PyType))))
; [eval] p1_26 ==> issubtype(typeof(s), str())
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2535 | p1_19@876@01 | live]
; [else-branch: 2535 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2535 | p1_19@876@01]
; [eval] issubtype(typeof(s), str())
; [eval] typeof(s)
; [eval] str()
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] p2_26 ==> issubtype(typeof(s_1), str())
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2536 | p2_19@877@01 | live]
; [else-branch: 2536 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2536 | p2_19@877@01]
; [eval] issubtype(typeof(s_1), str())
; [eval] typeof(s_1)
; [eval] str()
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] p1_26 ==> self_0 != null
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2537 | p1_19@876@01 | live]
; [else-branch: 2537 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2537 | p1_19@876@01]
; [eval] self_0 != null
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] p2_26 ==> self_0_0 != null
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2538 | p2_19@877@01 | live]
; [else-branch: 2538 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2538 | p2_19@877@01]
; [eval] self_0_0 != null
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] p1_26 ==> perm(MustTerminate(_cthread_157)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false))))
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2539 | p1_19@876@01 | live]
; [else-branch: 2539 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2539 | p1_19@876@01]
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 16
; [then-branch: 2540 | False | live]
; [else-branch: 2540 | True | live]
(push) ; 17
; [then-branch: 2540 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 2540 | True]
; [eval] (forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false)
(push) ; 18
; [then-branch: 2541 | False | live]
; [else-branch: 2541 | True | live]
(push) ; 19
; [then-branch: 2541 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 2541 | True]
; [eval] (forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false)
(push) ; 20
; [then-branch: 2542 | False | live]
; [else-branch: 2542 | True | live]
(push) ; 21
; [then-branch: 2542 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 2542 | True]
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false)
(push) ; 22
; [then-branch: 2543 | False | live]
; [else-branch: 2543 | True | live]
(push) ; 23
; [then-branch: 2543 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 2543 | True]
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false)
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] p2_26 ==> perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_40: Ref [MustInvokeBounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBoundedp] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnboundedp] :: false))))
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2544 | p2_19@877@01 | live]
; [else-branch: 2544 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2544 | p2_19@877@01]
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_40: Ref [MustInvokeBounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBoundedp] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none
; [eval] perm(MustTerminate_0(_cthread_157_0))
(push) ; 16
; [then-branch: 2545 | False | live]
; [else-branch: 2545 | True | live]
(push) ; 17
; [then-branch: 2545 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 2545 | True]
; [eval] (forperm _r_40: Ref [MustInvokeBounded_0(_r_40)] :: false)
(push) ; 18
; [then-branch: 2546 | False | live]
; [else-branch: 2546 | True | live]
(push) ; 19
; [then-branch: 2546 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 2546 | True]
; [eval] (forperm _r_40: Ref [MustInvokeUnbounded_0(_r_40)] :: false)
(push) ; 20
; [then-branch: 2547 | False | live]
; [else-branch: 2547 | True | live]
(push) ; 21
; [then-branch: 2547 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 2547 | True]
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseBoundedp] :: false)
(push) ; 22
; [then-branch: 2548 | False | live]
; [else-branch: 2548 | True | live]
(push) ; 23
; [then-branch: 2548 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 2548 | True]
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseUnboundedp] :: false)
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(declare-const _current_wait_level_157@938@01 $Perm)
(declare-const _current_wait_level_157_0@939@01 $Perm)
(declare-const $t@940@01 $Snap)
(assert (= $t@940@01 ($Snap.combine ($Snap.first $t@940@01) ($Snap.second $t@940@01))))
(assert (= ($Snap.first $t@940@01) $Snap.unit))
; [eval] p1_26 ==> (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2549 | p1_19@876@01 | live]
; [else-branch: 2549 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2549 | p1_19@876@01]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157)
(push) ; 16
; [then-branch: 2550 | False | live]
; [else-branch: 2550 | True | live]
(push) ; 17
; [then-branch: 2550 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 2550 | True]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157)
(push) ; 18
; [then-branch: 2551 | False | live]
; [else-branch: 2551 | True | live]
(push) ; 19
; [then-branch: 2551 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 2551 | True]
; [eval] _residue_157 <= _current_wait_level_157
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=> p1_19@876@01 (<= _residue_168@882@01 _current_wait_level_157@938@01)))
(assert (=
  ($Snap.second $t@940@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@940@01))
    ($Snap.second ($Snap.second $t@940@01)))))
(assert (= ($Snap.first ($Snap.second $t@940@01)) $Snap.unit))
; [eval] p2_26 ==> (forperm _r_38: Ref [_r_38.MustReleaseBoundedp] :: Level(_r_38) <= _current_wait_level_157_0) && ((forperm _r_38: Ref [_r_38.MustReleaseUnboundedp] :: Level(_r_38) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2552 | p2_19@877@01 | live]
; [else-branch: 2552 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2552 | p2_19@877@01]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBoundedp] :: Level(_r_38) <= _current_wait_level_157_0) && ((forperm _r_38: Ref [_r_38.MustReleaseUnboundedp] :: Level(_r_38) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBoundedp] :: Level(_r_38) <= _current_wait_level_157_0)
(push) ; 16
; [then-branch: 2553 | False | live]
; [else-branch: 2553 | True | live]
(push) ; 17
; [then-branch: 2553 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 2553 | True]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnboundedp] :: Level(_r_38) <= _current_wait_level_157_0)
(push) ; 18
; [then-branch: 2554 | False | live]
; [else-branch: 2554 | True | live]
(push) ; 19
; [then-branch: 2554 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 2554 | True]
; [eval] _residue_157_0 <= _current_wait_level_157_0
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=> p2_19@877@01 (<= _residue_168_0@883@01 _current_wait_level_157_0@939@01)))
(assert (=
  ($Snap.second ($Snap.second $t@940@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@940@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@940@01))))))
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2555 | p1_19@876@01 | live]
; [else-branch: 2555 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2555 | p1_19@876@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@940@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))
(push) ; 15
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2556 | p2_19@877@01 | live]
; [else-branch: 2556 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2556 | p2_19@877@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
  $Snap.unit))
; [eval] p1_26 ==> issubtype(typeof(self_0.StringContainer_s), str())
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2557 | p1_19@876@01 | live]
; [else-branch: 2557 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2557 | p1_19@876@01]
; [eval] issubtype(typeof(self_0.StringContainer_s), str())
; [eval] typeof(self_0.StringContainer_s)
; [eval] str()
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  p1_19@876@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01))))))
  $Snap.unit))
; [eval] p2_26 ==> issubtype(typeof(self_0_0.StringContainer_sp), str())
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2558 | p2_19@877@01 | live]
; [else-branch: 2558 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2558 | p2_19@877@01]
; [eval] issubtype(typeof(self_0_0.StringContainer_sp), str())
; [eval] typeof(self_0_0.StringContainer_sp)
; [eval] str()
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  p2_19@877@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))
  $Snap.unit))
; [eval] p1_26 ==> str___eq__(self_0.StringContainer_s, s)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2559 | p1_19@876@01 | live]
; [else-branch: 2559 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2559 | p1_19@876@01]
; [eval] str___eq__(self_0.StringContainer_s, s)
(push) ; 18
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01)))) x_2@886@01))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01)))) x_2@886@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  p1_19@876@01
  (and
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01)))) x_2@886@01))))
(assert (=>
  p1_19@876@01
  (str___eq__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01)))) x_2@886@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01))))))))
  $Snap.unit))
; [eval] p2_26 ==> str___eq__(self_0_0.StringContainer_sp, s_1)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2560 | p2_19@877@01 | live]
; [else-branch: 2560 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2560 | p2_19@877@01]
; [eval] str___eq__(self_0_0.StringContainer_sp, s_1)
(push) ; 18
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01))))) x_2_0@887@01))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01))))) x_2_0@887@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  p2_19@877@01
  (and
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01))))) x_2_0@887@01))))
(assert (=>
  p2_19@877@01
  (str___eq__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01))))) x_2_0@887@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
  $Snap.unit))
; [eval] p1_26 ==> true
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2561 | p1_19@876@01 | live]
; [else-branch: 2561 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2561 | p1_19@876@01]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
  $Snap.unit))
; [eval] p2_26 ==> true
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2562 | p2_19@877@01 | live]
; [else-branch: 2562 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2562 | p2_19@877@01]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] p1_19 && !ret1_9
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2563 | !(p1_19@876@01) | live]
; [else-branch: 2563 | p1_19@876@01 | live]
(push) ; 17
; [then-branch: 2563 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 17
(push) ; 17
; [else-branch: 2563 | p1_19@876@01]
; [eval] !ret1_9
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2564 | p1_19@876@01 | live]
; [else-branch: 2564 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2564 | p1_19@876@01]
; [exec]
; _cwl_168 := tmp1_54
; [eval] p2_19 && !ret2_9
(push) ; 17
; [then-branch: 2565 | !(p2_19@877@01) | live]
; [else-branch: 2565 | p2_19@877@01 | live]
(push) ; 18
; [then-branch: 2565 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 18
(push) ; 18
; [else-branch: 2565 | p2_19@877@01]
; [eval] !ret2_9
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2566 | p2_19@877@01 | live]
; [else-branch: 2566 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2566 | p2_19@877@01]
; [exec]
; _cwl_168_0 := tmp2_54
; [eval] p1_19 && !ret1_9
(push) ; 18
; [then-branch: 2567 | !(p1_19@876@01) | live]
; [else-branch: 2567 | p1_19@876@01 | live]
(push) ; 19
; [then-branch: 2567 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 19
(push) ; 19
; [else-branch: 2567 | p1_19@876@01]
; [eval] !ret1_9
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2568 | p1_19@876@01 | live]
; [else-branch: 2568 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 2568 | p1_19@876@01]
; [exec]
; a_4 := StringContainer_res
; [exec]
; inhale _isDefined(3432289)
(declare-const $t@941@01 $Snap)
(assert (= $t@941@01 $Snap.unit))
; [eval] _isDefined(3432289)
(push) ; 19
(assert (_isDefined%precondition $Snap.unit 3432289))
(pop) ; 19
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3432289))
(assert (_isDefined $Snap.unit 3432289))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_19 && !ret2_9
(set-option :timeout 0)
(push) ; 19
; [then-branch: 2569 | !(p2_19@877@01) | live]
; [else-branch: 2569 | p2_19@877@01 | live]
(push) ; 20
; [then-branch: 2569 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 20
(push) ; 20
; [else-branch: 2569 | p2_19@877@01]
; [eval] !ret2_9
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2570 | p2_19@877@01 | live]
; [else-branch: 2570 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 2570 | p2_19@877@01]
; [exec]
; a_4_0 := StringContainer_res_3
; [exec]
; inhale true
(declare-const $t@942@01 $Snap)
(assert (= $t@942@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; tmp_10 := new()
(declare-const tmp_10@943@01 $Ref)
(assert (not (= tmp_10@943@01 $Ref.null)))
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(assert (not (= tmp_10@943@01 b_4@900@01)))
(assert (not (= tmp_10@943@01 _cthread_168@878@01)))
(assert (not (= tmp_10@943@01 secret_9_0@885@01)))
(assert (not (= tmp_10@943@01 _cthread_168_0@879@01)))
(assert (not (= tmp_10@943@01 x_2_0@887@01)))
(assert (not (= tmp_10@943@01 secret_9@884@01)))
(assert (not (= tmp_10@943@01 x_2@886@01)))
(assert (not (= tmp_10@943@01 StringContainer_res_0@908@01)))
(assert (not
  (=
    tmp_10@943@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01))))))))
(assert (not
  (=
    tmp_10@943@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01)))))))
(assert (not (= tmp_10@943@01 b_4_0@901@01)))
(assert (not (= tmp_10@943@01 StringContainer_res_0_0@909@01)))
(assert (not (= tmp_10@943@01 tmp_10@915@01)))
; [eval] p1_19 && !ret1_9
(set-option :timeout 0)
(push) ; 20
; [then-branch: 2571 | !(p1_19@876@01) | live]
; [else-branch: 2571 | p1_19@876@01 | live]
(push) ; 21
; [then-branch: 2571 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 21
(push) ; 21
; [else-branch: 2571 | p1_19@876@01]
; [eval] !ret1_9
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2572 | p1_19@876@01 | live]
; [else-branch: 2572 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 2572 | p1_19@876@01]
; [exec]
; StringContainer_res_0 := tmp_10
; [eval] p2_19 && !ret2_9
(push) ; 21
; [then-branch: 2573 | !(p2_19@877@01) | live]
; [else-branch: 2573 | p2_19@877@01 | live]
(push) ; 22
; [then-branch: 2573 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2573 | p2_19@877@01]
; [eval] !ret2_9
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2574 | p2_19@877@01 | live]
; [else-branch: 2574 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 2574 | p2_19@877@01]
; [exec]
; StringContainer_res_0_0 := tmp_10
; [eval] p1_19 && !ret1_9
(push) ; 22
; [then-branch: 2575 | !(p1_19@876@01) | live]
; [else-branch: 2575 | p1_19@876@01 | live]
(push) ; 23
; [then-branch: 2575 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 23
(push) ; 23
; [else-branch: 2575 | p1_19@876@01]
; [eval] !ret1_9
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2576 | p1_19@876@01 | live]
; [else-branch: 2576 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 2576 | p1_19@876@01]
; [exec]
; inhale typeof(StringContainer_res_0) == StringContainer()
(declare-const $t@944@01 $Snap)
(assert (= $t@944@01 $Snap.unit))
; [eval] typeof(StringContainer_res_0) == StringContainer()
; [eval] typeof(StringContainer_res_0)
; [eval] StringContainer()
(assert (= (typeof<PyType> tmp_10@943@01) (as StringContainer<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(StringContainer_res_0, 39259342834620444863618799033642229331027), write)
(declare-const $t@945@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [eval] p2_19 && !ret2_9
(set-option :timeout 0)
(push) ; 23
; [then-branch: 2577 | !(p2_19@877@01) | live]
; [else-branch: 2577 | p2_19@877@01 | live]
(push) ; 24
; [then-branch: 2577 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 24
(push) ; 24
; [else-branch: 2577 | p2_19@877@01]
; [eval] !ret2_9
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2578 | p2_19@877@01 | live]
; [else-branch: 2578 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 2578 | p2_19@877@01]
; [exec]
; inhale typeof(StringContainer_res_0_0) == StringContainer()
(declare-const $t@946@01 $Snap)
(assert (= $t@946@01 $Snap.unit))
; [eval] typeof(StringContainer_res_0_0) == StringContainer()
; [eval] typeof(StringContainer_res_0_0)
; [eval] StringContainer()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(StringContainer_res_0_0, 39259342834620444863618799033642229331027), write)
(declare-const $t@947@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [eval] p1_19 && !ret1_9 || p2_19 && !ret2_9
; [eval] p1_19 && !ret1_9
(set-option :timeout 0)
(push) ; 24
; [then-branch: 2579 | !(p1_19@876@01) | live]
; [else-branch: 2579 | p1_19@876@01 | live]
(push) ; 25
; [then-branch: 2579 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 25
(push) ; 25
; [else-branch: 2579 | p1_19@876@01]
; [eval] !ret1_9
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 2580 | p1_19@876@01 | live]
; [else-branch: 2580 | !(p1_19@876@01) | live]
(push) ; 25
; [then-branch: 2580 | p1_19@876@01]
(pop) ; 25
(push) ; 25
; [else-branch: 2580 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
; [eval] p2_19 && !ret2_9
(push) ; 26
; [then-branch: 2581 | !(p2_19@877@01) | live]
; [else-branch: 2581 | p2_19@877@01 | live]
(push) ; 27
; [then-branch: 2581 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2581 | p2_19@877@01]
; [eval] !ret2_9
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not (or p1_19@876@01 p2_19@877@01))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2582 | p1_19@876@01 || p2_19@877@01 | live]
; [else-branch: 2582 | !(p1_19@876@01 || p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 2582 | p1_19@876@01 || p2_19@877@01]
; [exec]
; var tmp1_55: Ref
(declare-const tmp1_55@948@01 $Ref)
; [exec]
; var tmp2_55: Ref
(declare-const tmp2_55@949@01 $Ref)
; [exec]
; var tmp1_56: Seq[Measure$]
(declare-const tmp1_56@950@01 Seq<Measure$>)
; [exec]
; var tmp2_56: Seq[Measure$]
(declare-const tmp2_56@951@01 Seq<Measure$>)
; [exec]
; var tmp1_57: Perm
(declare-const tmp1_57@952@01 $Perm)
; [exec]
; var tmp2_57: Perm
(declare-const tmp2_57@953@01 $Perm)
; [exec]
; var tmp1_58: Ref
(declare-const tmp1_58@954@01 $Ref)
; [exec]
; var tmp2_58: Ref
(declare-const tmp2_58@955@01 $Ref)
; [exec]
; var tmp1_59: Ref
(declare-const tmp1_59@956@01 $Ref)
; [exec]
; var tmp2_59: Ref
(declare-const tmp2_59@957@01 $Ref)
; [exec]
; var tmp1_60: Perm
(declare-const tmp1_60@958@01 $Perm)
; [exec]
; var tmp2_60: Perm
(declare-const tmp2_60@959@01 $Perm)
; [eval] p1_19 && !ret1_9
(push) ; 25
; [then-branch: 2583 | !(p1_19@876@01) | live]
; [else-branch: 2583 | p1_19@876@01 | live]
(push) ; 26
; [then-branch: 2583 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 26
(push) ; 26
; [else-branch: 2583 | p1_19@876@01]
; [eval] !ret1_9
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2584 | p1_19@876@01 | live]
; [else-branch: 2584 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 2584 | p1_19@876@01]
; [exec]
; tmp1_55 := _cthread_168
; [exec]
; tmp1_56 := _method_measures_168
; [exec]
; tmp1_57 := _residue_168
; [exec]
; tmp1_58 := StringContainer_res_0
; [exec]
; tmp1_59 := x_6
; [eval] p2_19 && !ret2_9
(push) ; 26
; [then-branch: 2585 | !(p2_19@877@01) | live]
; [else-branch: 2585 | p2_19@877@01 | live]
(push) ; 27
; [then-branch: 2585 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2585 | p2_19@877@01]
; [eval] !ret2_9
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2586 | p2_19@877@01 | live]
; [else-branch: 2586 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 2586 | p2_19@877@01]
; [exec]
; tmp2_55 := _cthread_168_0
; [exec]
; tmp2_56 := _method_measures_168_0
; [exec]
; tmp2_57 := _residue_168_0
; [exec]
; tmp2_58 := StringContainer_res_0_0
; [exec]
; tmp2_59 := x_6_0
; [exec]
; tmp1_60, tmp2_60 := StringContainer___init__(p1_19 && !ret1_9, p2_19 &&
;   !ret2_9, tmp1_55, tmp2_55, tmp1_56, tmp2_56, tmp1_57, tmp2_57, tmp1_58, tmp2_58,
;   tmp1_59, tmp2_59)
; [eval] p1_19 && !ret1_9
(push) ; 27
; [then-branch: 2587 | !(p1_19@876@01) | live]
; [else-branch: 2587 | p1_19@876@01 | live]
(push) ; 28
; [then-branch: 2587 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2587 | p1_19@876@01]
; [eval] !ret1_9
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [eval] p2_19 && !ret2_9
(push) ; 27
; [then-branch: 2588 | !(p2_19@877@01) | live]
; [else-branch: 2588 | p2_19@877@01 | live]
(push) ; 28
; [then-branch: 2588 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2588 | p2_19@877@01]
; [eval] !ret2_9
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [eval] p1_26 ==> _cthread_157 != null
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2589 | p1_19@876@01 | live]
; [else-branch: 2589 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2589 | p1_19@876@01]
; [eval] _cthread_157 != null
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2_26 ==> _cthread_157_0 != null
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2590 | p2_19@877@01 | live]
; [else-branch: 2590 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2590 | p2_19@877@01]
; [eval] _cthread_157_0 != null
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1_26 ==> issubtype(typeof(_cthread_157), Thread_0())
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2591 | p1_19@876@01 | live]
; [else-branch: 2591 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2591 | p1_19@876@01]
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2_26 ==> issubtype(typeof(_cthread_157_0), Thread_0())
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2592 | p2_19@877@01 | live]
; [else-branch: 2592 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2592 | p2_19@877@01]
; [eval] issubtype(typeof(_cthread_157_0), Thread_0())
; [eval] typeof(_cthread_157_0)
; [eval] Thread_0()
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1_26 ==> self_0 != null
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2593 | p1_19@876@01 | live]
; [else-branch: 2593 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2593 | p1_19@876@01]
; [eval] self_0 != null
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=> p1_19@876@01 (not (= tmp_10@943@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=> p1_19@876@01 (not (= tmp_10@943@01 $Ref.null))))
; [eval] p2_26 ==> self_0_0 != null
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2594 | p2_19@877@01 | live]
; [else-branch: 2594 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2594 | p2_19@877@01]
; [eval] self_0_0 != null
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=> p2_19@877@01 (not (= tmp_10@943@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=> p2_19@877@01 (not (= tmp_10@943@01 $Ref.null))))
(push) ; 27
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2595 | p1_19@876@01 | live]
; [else-branch: 2595 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 2595 | p1_19@876@01]
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2596 | p2_19@877@01 | live]
; [else-branch: 2596 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2596 | p2_19@877@01]
; [eval] p1_26 ==> issubtype(typeof(self_0), StringContainer())
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2597 | p1_19@876@01 | live]
; [else-branch: 2597 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2597 | p1_19@876@01]
; [eval] issubtype(typeof(self_0), StringContainer())
; [eval] typeof(self_0)
; [eval] StringContainer()
(pop) ; 30
(pop) ; 29
; Joined path conditions
(push) ; 29
(assert (not (=>
  p1_19@876@01
  (issubtype<Bool> (typeof<PyType> tmp_10@943@01) (as StringContainer<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_19@876@01
  (issubtype<Bool> (typeof<PyType> tmp_10@943@01) (as StringContainer<PyType>  PyType))))
; [eval] p2_26 ==> issubtype(typeof(self_0_0), StringContainer())
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2598 | p2_19@877@01 | live]
; [else-branch: 2598 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2598 | p2_19@877@01]
; [eval] issubtype(typeof(self_0_0), StringContainer())
; [eval] typeof(self_0_0)
; [eval] StringContainer()
(pop) ; 30
(pop) ; 29
; Joined path conditions
(push) ; 29
(assert (not (=>
  p2_19@877@01
  (issubtype<Bool> (typeof<PyType> tmp_10@943@01) (as StringContainer<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_19@877@01
  (issubtype<Bool> (typeof<PyType> tmp_10@943@01) (as StringContainer<PyType>  PyType))))
; [eval] p1_26 ==> issubtype(typeof(s), str())
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2599 | p1_19@876@01 | live]
; [else-branch: 2599 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2599 | p1_19@876@01]
; [eval] issubtype(typeof(s), str())
; [eval] typeof(s)
; [eval] str()
(pop) ; 30
(pop) ; 29
; Joined path conditions
; [eval] p2_26 ==> issubtype(typeof(s_1), str())
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2600 | p2_19@877@01 | live]
; [else-branch: 2600 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2600 | p2_19@877@01]
; [eval] issubtype(typeof(s_1), str())
; [eval] typeof(s_1)
; [eval] str()
(pop) ; 30
(pop) ; 29
; Joined path conditions
; [eval] p1_26 ==> self_0 != null
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2601 | p1_19@876@01 | live]
; [else-branch: 2601 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2601 | p1_19@876@01]
; [eval] self_0 != null
(pop) ; 30
(pop) ; 29
; Joined path conditions
; [eval] p2_26 ==> self_0_0 != null
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2602 | p2_19@877@01 | live]
; [else-branch: 2602 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2602 | p2_19@877@01]
; [eval] self_0_0 != null
(pop) ; 30
(pop) ; 29
; Joined path conditions
; [eval] p1_26 ==> perm(MustTerminate(_cthread_157)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false))))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2603 | p1_19@876@01 | live]
; [else-branch: 2603 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2603 | p1_19@876@01]
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 31
; [then-branch: 2604 | False | live]
; [else-branch: 2604 | True | live]
(push) ; 32
; [then-branch: 2604 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2604 | True]
; [eval] (forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false)
(push) ; 33
; [then-branch: 2605 | False | live]
; [else-branch: 2605 | True | live]
(push) ; 34
; [then-branch: 2605 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 2605 | True]
; [eval] (forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false)
(push) ; 35
; [then-branch: 2606 | False | live]
; [else-branch: 2606 | True | live]
(push) ; 36
; [then-branch: 2606 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 2606 | True]
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false)
(push) ; 37
; [then-branch: 2607 | False | live]
; [else-branch: 2607 | True | live]
(push) ; 38
; [then-branch: 2607 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 2607 | True]
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false)
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; [eval] p2_26 ==> perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_40: Ref [MustInvokeBounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBoundedp] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnboundedp] :: false))))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2608 | p2_19@877@01 | live]
; [else-branch: 2608 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2608 | p2_19@877@01]
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_40: Ref [MustInvokeBounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBoundedp] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none
; [eval] perm(MustTerminate_0(_cthread_157_0))
(push) ; 31
; [then-branch: 2609 | False | live]
; [else-branch: 2609 | True | live]
(push) ; 32
; [then-branch: 2609 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2609 | True]
; [eval] (forperm _r_40: Ref [MustInvokeBounded_0(_r_40)] :: false)
(push) ; 33
; [then-branch: 2610 | False | live]
; [else-branch: 2610 | True | live]
(push) ; 34
; [then-branch: 2610 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 2610 | True]
; [eval] (forperm _r_40: Ref [MustInvokeUnbounded_0(_r_40)] :: false)
(push) ; 35
; [then-branch: 2611 | False | live]
; [else-branch: 2611 | True | live]
(push) ; 36
; [then-branch: 2611 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 2611 | True]
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseBoundedp] :: false)
(push) ; 37
; [then-branch: 2612 | False | live]
; [else-branch: 2612 | True | live]
(push) ; 38
; [then-branch: 2612 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 2612 | True]
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseUnboundedp] :: false)
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
(declare-const _current_wait_level_157@960@01 $Perm)
(declare-const _current_wait_level_157_0@961@01 $Perm)
(declare-const $t@962@01 $Snap)
(assert (= $t@962@01 ($Snap.combine ($Snap.first $t@962@01) ($Snap.second $t@962@01))))
(assert (= ($Snap.first $t@962@01) $Snap.unit))
; [eval] p1_26 ==> (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2613 | p1_19@876@01 | live]
; [else-branch: 2613 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2613 | p1_19@876@01]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157)
(push) ; 31
; [then-branch: 2614 | False | live]
; [else-branch: 2614 | True | live]
(push) ; 32
; [then-branch: 2614 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2614 | True]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157)
(push) ; 33
; [then-branch: 2615 | False | live]
; [else-branch: 2615 | True | live]
(push) ; 34
; [then-branch: 2615 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 2615 | True]
; [eval] _residue_157 <= _current_wait_level_157
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (=> p1_19@876@01 (<= _residue_168@882@01 _current_wait_level_157@960@01)))
(assert (=
  ($Snap.second $t@962@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@962@01))
    ($Snap.second ($Snap.second $t@962@01)))))
(assert (= ($Snap.first ($Snap.second $t@962@01)) $Snap.unit))
; [eval] p2_26 ==> (forperm _r_38: Ref [_r_38.MustReleaseBoundedp] :: Level(_r_38) <= _current_wait_level_157_0) && ((forperm _r_38: Ref [_r_38.MustReleaseUnboundedp] :: Level(_r_38) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2616 | p2_19@877@01 | live]
; [else-branch: 2616 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2616 | p2_19@877@01]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBoundedp] :: Level(_r_38) <= _current_wait_level_157_0) && ((forperm _r_38: Ref [_r_38.MustReleaseUnboundedp] :: Level(_r_38) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBoundedp] :: Level(_r_38) <= _current_wait_level_157_0)
(push) ; 31
; [then-branch: 2617 | False | live]
; [else-branch: 2617 | True | live]
(push) ; 32
; [then-branch: 2617 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2617 | True]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnboundedp] :: Level(_r_38) <= _current_wait_level_157_0)
(push) ; 33
; [then-branch: 2618 | False | live]
; [else-branch: 2618 | True | live]
(push) ; 34
; [then-branch: 2618 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 2618 | True]
; [eval] _residue_157_0 <= _current_wait_level_157_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (=> p2_19@877@01 (<= _residue_168_0@883@01 _current_wait_level_157_0@961@01)))
(assert (=
  ($Snap.second ($Snap.second $t@962@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@962@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@962@01))))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2619 | p1_19@876@01 | live]
; [else-branch: 2619 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 2619 | p1_19@876@01]
(push) ; 30
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@962@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2620 | p2_19@877@01 | live]
; [else-branch: 2620 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2620 | p2_19@877@01]
(push) ; 31
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
  $Snap.unit))
; [eval] p1_26 ==> issubtype(typeof(self_0.StringContainer_s), str())
(set-option :timeout 0)
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2621 | p1_19@876@01 | live]
; [else-branch: 2621 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2621 | p1_19@876@01]
; [eval] issubtype(typeof(self_0.StringContainer_s), str())
; [eval] typeof(self_0.StringContainer_s)
; [eval] str()
(pop) ; 32
(pop) ; 31
; Joined path conditions
(assert (=>
  p1_19@876@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01))))))
  $Snap.unit))
; [eval] p2_26 ==> issubtype(typeof(self_0_0.StringContainer_sp), str())
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2622 | p2_19@877@01 | live]
; [else-branch: 2622 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2622 | p2_19@877@01]
; [eval] issubtype(typeof(self_0_0.StringContainer_sp), str())
; [eval] typeof(self_0_0.StringContainer_sp)
; [eval] str()
(pop) ; 32
(pop) ; 31
; Joined path conditions
(assert (=>
  p2_19@877@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))
  $Snap.unit))
; [eval] p1_26 ==> str___eq__(self_0.StringContainer_s, s)
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2623 | p1_19@876@01 | live]
; [else-branch: 2623 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2623 | p1_19@876@01]
; [eval] str___eq__(self_0.StringContainer_s, s)
(push) ; 33
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 34
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01)))) x_2@886@01))
(pop) ; 33
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01)))) x_2@886@01)))
(pop) ; 32
(pop) ; 31
; Joined path conditions
(assert (=>
  p1_19@876@01
  (and
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01)))) x_2@886@01))))
(assert (=>
  p1_19@876@01
  (str___eq__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01)))) x_2@886@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01))))))))
  $Snap.unit))
; [eval] p2_26 ==> str___eq__(self_0_0.StringContainer_sp, s_1)
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2624 | p2_19@877@01 | live]
; [else-branch: 2624 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2624 | p2_19@877@01]
; [eval] str___eq__(self_0_0.StringContainer_sp, s_1)
(push) ; 33
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 34
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01))))) x_2_0@887@01))
(pop) ; 33
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01))))) x_2_0@887@01)))
(pop) ; 32
(pop) ; 31
; Joined path conditions
(assert (=>
  p2_19@877@01
  (and
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01))))) x_2_0@887@01))))
(assert (=>
  p2_19@877@01
  (str___eq__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01))))) x_2_0@887@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
  $Snap.unit))
; [eval] p1_26 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2625 | p1_19@876@01 | live]
; [else-branch: 2625 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2625 | p1_19@876@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
  $Snap.unit))
; [eval] p2_26 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2626 | p2_19@877@01 | live]
; [else-branch: 2626 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2626 | p2_19@877@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] p1_19 && !ret1_9
(set-option :timeout 0)
(push) ; 31
; [then-branch: 2627 | !(p1_19@876@01) | live]
; [else-branch: 2627 | p1_19@876@01 | live]
(push) ; 32
; [then-branch: 2627 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 32
(push) ; 32
; [else-branch: 2627 | p1_19@876@01]
; [eval] !ret1_9
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2628 | p1_19@876@01 | live]
; [else-branch: 2628 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 2628 | p1_19@876@01]
; [exec]
; _cwl_168 := tmp1_60
; [eval] p2_19 && !ret2_9
(push) ; 32
; [then-branch: 2629 | !(p2_19@877@01) | live]
; [else-branch: 2629 | p2_19@877@01 | live]
(push) ; 33
; [then-branch: 2629 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 33
(push) ; 33
; [else-branch: 2629 | p2_19@877@01]
; [eval] !ret2_9
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2630 | p2_19@877@01 | live]
; [else-branch: 2630 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2630 | p2_19@877@01]
; [exec]
; _cwl_168_0 := tmp2_60
; [eval] p1_19 && !ret1_9
(push) ; 33
; [then-branch: 2631 | !(p1_19@876@01) | live]
; [else-branch: 2631 | p1_19@876@01 | live]
(push) ; 34
; [then-branch: 2631 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 34
(push) ; 34
; [else-branch: 2631 | p1_19@876@01]
; [eval] !ret1_9
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2632 | p1_19@876@01 | live]
; [else-branch: 2632 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 2632 | p1_19@876@01]
; [exec]
; b_4 := StringContainer_res_0
; [exec]
; inhale _isDefined(3432290)
(declare-const $t@963@01 $Snap)
(assert (= $t@963@01 $Snap.unit))
; [eval] _isDefined(3432290)
(push) ; 34
(assert (_isDefined%precondition $Snap.unit 3432290))
(pop) ; 34
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3432290))
(assert (_isDefined $Snap.unit 3432290))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_19 && !ret2_9
(set-option :timeout 0)
(push) ; 34
; [then-branch: 2633 | !(p2_19@877@01) | live]
; [else-branch: 2633 | p2_19@877@01 | live]
(push) ; 35
; [then-branch: 2633 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 35
(push) ; 35
; [else-branch: 2633 | p2_19@877@01]
; [eval] !ret2_9
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2634 | p2_19@877@01 | live]
; [else-branch: 2634 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 2634 | p2_19@877@01]
; [exec]
; b_4_0 := StringContainer_res_0_0
; [exec]
; inhale true
(declare-const $t@964@01 $Snap)
(assert (= $t@964@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; p1_20 := p1_19 && (!ret1_9 && bool___unbox__(secret_21))
; [eval] p1_19 && (!ret1_9 && bool___unbox__(secret_21))
(set-option :timeout 0)
(push) ; 35
; [then-branch: 2635 | !(p1_19@876@01) | live]
; [else-branch: 2635 | p1_19@876@01 | live]
(push) ; 36
; [then-branch: 2635 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 36
(push) ; 36
; [else-branch: 2635 | p1_19@876@01]
; [eval] !ret1_9
(push) ; 37
; [then-branch: 2636 | False | live]
; [else-branch: 2636 | True | live]
(push) ; 38
; [then-branch: 2636 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 2636 | True]
; [eval] bool___unbox__(secret_21)
(push) ; 39
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 40
(assert (not (issubtype<Bool> (typeof<PyType> secret_9@884@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_9@884@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_9@884@01))
(pop) ; 39
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_9@884@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_9@884@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_9@884@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_9@884@01)))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_19@876@01
  (and
    (issubtype<Bool> (typeof<PyType> secret_9@884@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_9@884@01))))
(declare-const p1_20@965@01 Bool)
(assert (= p1_20@965@01 (and p1_19@876@01 (bool___unbox__ $Snap.unit secret_9@884@01))))
; [exec]
; p2_20 := p2_19 && (!ret2_9 && bool___unbox__(secret_21_0))
; [eval] p2_19 && (!ret2_9 && bool___unbox__(secret_21_0))
(push) ; 35
; [then-branch: 2637 | !(p2_19@877@01) | live]
; [else-branch: 2637 | p2_19@877@01 | live]
(push) ; 36
; [then-branch: 2637 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 36
(push) ; 36
; [else-branch: 2637 | p2_19@877@01]
; [eval] !ret2_9
(push) ; 37
; [then-branch: 2638 | False | live]
; [else-branch: 2638 | True | live]
(push) ; 38
; [then-branch: 2638 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 2638 | True]
; [eval] bool___unbox__(secret_21_0)
(push) ; 39
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 40
(assert (not (issubtype<Bool> (typeof<PyType> secret_9_0@885@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_9_0@885@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_9_0@885@01))
(pop) ; 39
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_9_0@885@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_9_0@885@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_9_0@885@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_9_0@885@01)))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_19@877@01
  (and
    (issubtype<Bool> (typeof<PyType> secret_9_0@885@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_9_0@885@01))))
(declare-const p2_20@966@01 Bool)
(assert (= p2_20@966@01 (and p2_19@877@01 (bool___unbox__ $Snap.unit secret_9_0@885@01))))
; [exec]
; p3_9 := p1_19 && (!ret1_9 && !bool___unbox__(secret_21))
; [eval] p1_19 && (!ret1_9 && !bool___unbox__(secret_21))
(push) ; 35
; [then-branch: 2639 | !(p1_19@876@01) | live]
; [else-branch: 2639 | p1_19@876@01 | live]
(push) ; 36
; [then-branch: 2639 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 36
(push) ; 36
; [else-branch: 2639 | p1_19@876@01]
; [eval] !ret1_9
(push) ; 37
; [then-branch: 2640 | False | live]
; [else-branch: 2640 | True | live]
(push) ; 38
; [then-branch: 2640 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 2640 | True]
; [eval] !bool___unbox__(secret_21)
; [eval] bool___unbox__(secret_21)
(push) ; 39
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 40
(assert (not (issubtype<Bool> (typeof<PyType> secret_9@884@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_9@884@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_9@884@01))
(pop) ; 39
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_9@884@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_9@884@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_9@884@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_9@884@01)))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(declare-const p3_9@967@01 Bool)
(assert (=
  p3_9@967@01
  (and p1_19@876@01 (not (bool___unbox__ $Snap.unit secret_9@884@01)))))
; [exec]
; p4_9 := p2_19 && (!ret2_9 && !bool___unbox__(secret_21_0))
; [eval] p2_19 && (!ret2_9 && !bool___unbox__(secret_21_0))
(push) ; 35
; [then-branch: 2641 | !(p2_19@877@01) | live]
; [else-branch: 2641 | p2_19@877@01 | live]
(push) ; 36
; [then-branch: 2641 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 36
(push) ; 36
; [else-branch: 2641 | p2_19@877@01]
; [eval] !ret2_9
(push) ; 37
; [then-branch: 2642 | False | live]
; [else-branch: 2642 | True | live]
(push) ; 38
; [then-branch: 2642 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 2642 | True]
; [eval] !bool___unbox__(secret_21_0)
; [eval] bool___unbox__(secret_21_0)
(push) ; 39
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 40
(assert (not (issubtype<Bool> (typeof<PyType> secret_9_0@885@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_9_0@885@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_9_0@885@01))
(pop) ; 39
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_9_0@885@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_9_0@885@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_9_0@885@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_9_0@885@01)))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(declare-const p4_9@968@01 Bool)
(assert (=
  p4_9@968@01
  (and p2_19@877@01 (not (bool___unbox__ $Snap.unit secret_9_0@885@01)))))
; [eval] p1_20 && !ret1_9
(push) ; 35
; [then-branch: 2643 | !(p1_20@965@01) | live]
; [else-branch: 2643 | p1_20@965@01 | live]
(push) ; 36
; [then-branch: 2643 | !(p1_20@965@01)]
(assert (not p1_20@965@01))
(pop) ; 36
(push) ; 36
; [else-branch: 2643 | p1_20@965@01]
(assert p1_20@965@01)
; [eval] !ret1_9
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or p1_20@965@01 (not p1_20@965@01)))
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_20@965@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not p1_20@965@01))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2644 | p1_20@965@01 | live]
; [else-branch: 2644 | !(p1_20@965@01) | live]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 2644 | p1_20@965@01]
(assert p1_20@965@01)
; [exec]
; _res := _checkDefined(a_4, 3432289).StringContainer_s
; [eval] _checkDefined(a_4, 3432289)
(push) ; 36
; [eval] _isDefined(id)
(push) ; 37
(pop) ; 37
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_9@921@01 3432289))
(pop) ; 36
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_9@921@01 3432289))
(push) ; 36
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 (_checkDefined $Snap.unit tmp_9@921@01 3432289))))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 (_checkDefined $Snap.unit tmp_9@921@01 3432289))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(declare-const _res@969@01 $Ref)
(assert (=
  _res@969@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))
; [exec]
; ret1_9 := true
; [eval] p2_20 && !ret2_9
(set-option :timeout 0)
(push) ; 36
; [then-branch: 2645 | !(p2_20@966@01) | live]
; [else-branch: 2645 | p2_20@966@01 | live]
(push) ; 37
; [then-branch: 2645 | !(p2_20@966@01)]
(assert (not p2_20@966@01))
(pop) ; 37
(push) ; 37
; [else-branch: 2645 | p2_20@966@01]
(assert p2_20@966@01)
; [eval] !ret2_9
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or p2_20@966@01 (not p2_20@966@01)))
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_20@966@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not p2_20@966@01))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2646 | p2_20@966@01 | live]
; [else-branch: 2646 | !(p2_20@966@01) | live]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 2646 | p2_20@966@01]
(assert p2_20@966@01)
; [exec]
; _res_10 := a_4_0.StringContainer_sp
(declare-const _res_10@970@01 $Ref)
(assert (=
  _res_10@970@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))
; [exec]
; ret2_9 := true
; [eval] p1_19 && !ret1_9
(push) ; 37
; [then-branch: 2647 | !(p1_19@876@01) | live]
; [else-branch: 2647 | p1_19@876@01 | live]
(push) ; 38
; [then-branch: 2647 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 38
(push) ; 38
; [else-branch: 2647 | p1_19@876@01]
; [eval] !ret1_9
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
; [then-branch: 2648 | False | dead]
; [else-branch: 2648 | True | live]
(push) ; 37
; [else-branch: 2648 | True]
(pop) ; 37
; [eval] !(p1_19 && !ret1_9)
; [eval] p1_19 && !ret1_9
(push) ; 37
; [then-branch: 2649 | !(p1_19@876@01) | live]
; [else-branch: 2649 | p1_19@876@01 | live]
(push) ; 38
; [then-branch: 2649 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 38
(push) ; 38
; [else-branch: 2649 | p1_19@876@01]
; [eval] !ret1_9
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2650 | True | live]
; [else-branch: 2650 | False | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2650 | True]
; [eval] p2_19 && !ret2_9
(push) ; 38
; [then-branch: 2651 | !(p2_19@877@01) | live]
; [else-branch: 2651 | p2_19@877@01 | live]
(push) ; 39
; [then-branch: 2651 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 39
(push) ; 39
; [else-branch: 2651 | p2_19@877@01]
; [eval] !ret2_9
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
; [then-branch: 2652 | False | dead]
; [else-branch: 2652 | True | live]
(push) ; 38
; [else-branch: 2652 | True]
(pop) ; 38
; [eval] !(p2_19 && !ret2_9)
; [eval] p2_19 && !ret2_9
(push) ; 38
; [then-branch: 2653 | !(p2_19@877@01) | live]
; [else-branch: 2653 | p2_19@877@01 | live]
(push) ; 39
; [then-branch: 2653 | !(p2_19@877@01)]
(assert (not p2_19@877@01))
(pop) ; 39
(push) ; 39
; [else-branch: 2653 | p2_19@877@01]
; [eval] !ret2_9
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2654 | True | live]
; [else-branch: 2654 | False | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 2654 | True]
; [exec]
; assert true
; [eval] p1_19 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2655 | p1_19@876@01 | live]
; [else-branch: 2655 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2655 | p1_19@876@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_19 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2656 | p2_19@877@01 | live]
; [else-branch: 2656 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2656 | p2_19@877@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p1_19 ==> issubtype(typeof(_res), str())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_19@876@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2657 | p1_19@876@01 | live]
; [else-branch: 2657 | !(p1_19@876@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2657 | p1_19@876@01]
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(assert (not (=>
  p1_19@876@01
  (issubtype<Bool> (typeof<PyType> _res@969@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_19@876@01
  (issubtype<Bool> (typeof<PyType> _res@969@01) (as str<PyType>  PyType))))
; [eval] p2_19 ==> issubtype(typeof(_res_10), str())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_19@877@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2658 | p2_19@877@01 | live]
; [else-branch: 2658 | !(p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2658 | p2_19@877@01]
; [eval] issubtype(typeof(_res_10), str())
; [eval] typeof(_res_10)
; [eval] str()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(assert (not (=>
  p2_19@877@01
  (issubtype<Bool> (typeof<PyType> _res_10@970@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_19@877@01
  (issubtype<Bool> (typeof<PyType> _res_10@970@01) (as str<PyType>  PyType))))
; [eval] (p1_19 && p2_19 ==> x_2 == x_2_0) ==> p1_19 && p2_19 ==> _res == _res_10
; [eval] p1_19 && p2_19 ==> x_2 == x_2_0
; [eval] p1_19 && p2_19
(push) ; 39
; [then-branch: 2659 | !(p1_19@876@01) | live]
; [else-branch: 2659 | p1_19@876@01 | live]
(push) ; 40
; [then-branch: 2659 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 40
(push) ; 40
; [else-branch: 2659 | p1_19@876@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not (and p1_19@876@01 p2_19@877@01))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not (and p1_19@876@01 p2_19@877@01)))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2660 | p1_19@876@01 && p2_19@877@01 | live]
; [else-branch: 2660 | !(p1_19@876@01 && p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2660 | p1_19@876@01 && p2_19@877@01]
(assert (and p1_19@876@01 p2_19@877@01))
; [eval] x_2 == x_2_0
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (and p1_19@876@01 p2_19@877@01))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01)))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2661 | p1_19@876@01 && p2_19@877@01 ==> x_2@886@01 == x_2_0@887@01 | live]
; [else-branch: 2661 | !(p1_19@876@01 && p2_19@877@01 ==> x_2@886@01 == x_2_0@887@01) | live]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2661 | p1_19@876@01 && p2_19@877@01 ==> x_2@886@01 == x_2_0@887@01]
(assert (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01)))
; [eval] p1_19 && p2_19 ==> _res == _res_10
; [eval] p1_19 && p2_19
(push) ; 41
; [then-branch: 2662 | !(p1_19@876@01) | live]
; [else-branch: 2662 | p1_19@876@01 | live]
(push) ; 42
; [then-branch: 2662 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
(pop) ; 42
(push) ; 42
; [else-branch: 2662 | p1_19@876@01]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not (and p1_19@876@01 p2_19@877@01))))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 42
(set-option :timeout 10)
(assert (not (and p1_19@876@01 p2_19@877@01)))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2663 | p1_19@876@01 && p2_19@877@01 | live]
; [else-branch: 2663 | !(p1_19@876@01 && p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 2663 | p1_19@876@01 && p2_19@877@01]
(assert (and p1_19@876@01 p2_19@877@01))
; [eval] _res == _res_10
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (and p1_19@876@01 p2_19@877@01))
(pop) ; 40
(push) ; 40
; [else-branch: 2661 | !(p1_19@876@01 && p2_19@877@01 ==> x_2@886@01 == x_2_0@887@01)]
(assert (not (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))
  (and
    (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))
    p1_19@876@01
    p2_19@877@01)))
; Joined path conditions
(assert (or
  (not (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01)))
  (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))))
(push) ; 39
(assert (not (=>
  (and
    (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))
    (and p1_19@876@01 p2_19@877@01))
  (= _res@969@01 _res_10@970@01))))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 39
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 39
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 39
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 39
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 39
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 39
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_9@921@01 tmp_10@943@01)) (not (= tmp_10@943@01 tmp_9@921@01))))
; [eval] (p1_19 && p2_19 ==> x_2 == x_2_0) ==> p1_19 && p2_19 ==> _res == _res_10
; [eval] p1_19 && p2_19 ==> x_2 == x_2_0
; [eval] p1_19 && p2_19
(set-option :timeout 0)
(push) ; 39
; [then-branch: 2664 | !(p1_19@876@01) | live]
; [else-branch: 2664 | p1_19@876@01 | live]
(push) ; 40
; [then-branch: 2664 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))
(assert false)
(pop) ; 40
(set-option :timeout 0)
(push) ; 40
; [else-branch: 2664 | p1_19@876@01]
(assert p1_19@876@01)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_10@943@01 tmp_9@921@01)) (not (= tmp_9@921@01 tmp_10@943@01))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=> (not p1_19@876@01) false))
; Joined path conditions
(assert (=>
  p1_19@876@01
  (and
    p1_19@876@01
    (not (= tmp_10@943@01 tmp_9@921@01))
    (not (= tmp_9@921@01 tmp_10@943@01)))))
(set-option :timeout 0)
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not (and p1_19@876@01 p2_19@877@01))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not (and p1_19@876@01 p2_19@877@01)))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2665 | p1_19@876@01 && p2_19@877@01 | live]
; [else-branch: 2665 | !(p1_19@876@01 && p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2665 | p1_19@876@01 && p2_19@877@01]
(assert (and p1_19@876@01 p2_19@877@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_10@943@01 tmp_9@921@01)) (not (= tmp_9@921@01 tmp_10@943@01))))
; [eval] x_2 == x_2_0
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  (and p1_19@876@01 p2_19@877@01)
  (and
    p1_19@876@01
    p2_19@877@01
    (not (= tmp_10@943@01 tmp_9@921@01))
    (not (= tmp_9@921@01 tmp_10@943@01)))))
(assert (and p1_19@876@01 p2_19@877@01))
(set-option :timeout 0)
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01)))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2666 | p1_19@876@01 && p2_19@877@01 ==> x_2@886@01 == x_2_0@887@01 | live]
; [else-branch: 2666 | !(p1_19@876@01 && p2_19@877@01 ==> x_2@886@01 == x_2_0@887@01) | live]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2666 | p1_19@876@01 && p2_19@877@01 ==> x_2@886@01 == x_2_0@887@01]
(assert (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_10@943@01 tmp_9@921@01)) (not (= tmp_9@921@01 tmp_10@943@01))))
; [eval] p1_19 && p2_19 ==> _res == _res_10
; [eval] p1_19 && p2_19
(set-option :timeout 0)
(push) ; 41
; [then-branch: 2667 | !(p1_19@876@01) | live]
; [else-branch: 2667 | p1_19@876@01 | live]
(push) ; 42
; [then-branch: 2667 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unsat
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unsat
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))
(assert false)
(pop) ; 42
(set-option :timeout 0)
(push) ; 42
; [else-branch: 2667 | p1_19@876@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_9@921@01 tmp_10@943@01)) (not (= tmp_10@943@01 tmp_9@921@01))))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_19@876@01
  (and (not (= tmp_9@921@01 tmp_10@943@01)) (not (= tmp_10@943@01 tmp_9@921@01)))))
(set-option :timeout 0)
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not (and p1_19@876@01 p2_19@877@01))))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 42
(set-option :timeout 10)
(assert (not (and p1_19@876@01 p2_19@877@01)))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2668 | p1_19@876@01 && p2_19@877@01 | live]
; [else-branch: 2668 | !(p1_19@876@01 && p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 2668 | p1_19@876@01 && p2_19@877@01]
(assert (and p1_19@876@01 p2_19@877@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_9@921@01 tmp_10@943@01)) (not (= tmp_10@943@01 tmp_9@921@01))))
; [eval] _res == _res_10
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  (and p1_19@876@01 p2_19@877@01)
  (and
    p1_19@876@01
    p2_19@877@01
    (not (= tmp_9@921@01 tmp_10@943@01))
    (not (= tmp_10@943@01 tmp_9@921@01)))))
(assert (and p1_19@876@01 p2_19@877@01))
(pop) ; 40
(set-option :timeout 0)
(push) ; 40
; [else-branch: 2666 | !(p1_19@876@01 && p2_19@877@01 ==> x_2@886@01 == x_2_0@887@01)]
(assert (not (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_10@943@01 tmp_9@921@01)) (not (= tmp_9@921@01 tmp_10@943@01))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))
  (and
    (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))
    (not (= tmp_10@943@01 tmp_9@921@01))
    (not (= tmp_9@921@01 tmp_10@943@01))
    (=>
      p1_19@876@01
      (and
        (not (= tmp_9@921@01 tmp_10@943@01))
        (not (= tmp_10@943@01 tmp_9@921@01))))
    (=>
      (and p1_19@876@01 p2_19@877@01)
      (and
        p1_19@876@01
        p2_19@877@01
        (not (= tmp_9@921@01 tmp_10@943@01))
        (not (= tmp_10@943@01 tmp_9@921@01))))
    p1_19@876@01
    p2_19@877@01)))
; Joined path conditions
(assert (=>
  (not (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01)))
  (and
    (not (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01)))
    (not (= tmp_10@943@01 tmp_9@921@01))
    (not (= tmp_9@921@01 tmp_10@943@01)))))
(set-option :timeout 0)
(push) ; 39
(assert (not (=>
  (and
    (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))
    (and p1_19@876@01 p2_19@877@01))
  (= _res@969@01 _res_10@970@01))))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 39
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 39
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 39
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 39
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 39
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 39
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_9@921@01 tmp_10@943@01)) (not (= tmp_10@943@01 tmp_9@921@01))))
; [eval] (p1_19 && p2_19 ==> x_2 == x_2_0) ==> p1_19 && p2_19 ==> _res == _res_10
; [eval] p1_19 && p2_19 ==> x_2 == x_2_0
; [eval] p1_19 && p2_19
(set-option :timeout 0)
(push) ; 39
; [then-branch: 2669 | !(p1_19@876@01) | live]
; [else-branch: 2669 | p1_19@876@01 | live]
(push) ; 40
; [then-branch: 2669 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))
(assert false)
(pop) ; 40
(set-option :timeout 0)
(push) ; 40
; [else-branch: 2669 | p1_19@876@01]
(assert p1_19@876@01)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_9@921@01 tmp_10@943@01)) (not (= tmp_10@943@01 tmp_9@921@01))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_19@876@01
  (and
    p1_19@876@01
    (not (= tmp_9@921@01 tmp_10@943@01))
    (not (= tmp_10@943@01 tmp_9@921@01)))))
(set-option :timeout 0)
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not (and p1_19@876@01 p2_19@877@01))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not (and p1_19@876@01 p2_19@877@01)))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2670 | p1_19@876@01 && p2_19@877@01 | live]
; [else-branch: 2670 | !(p1_19@876@01 && p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2670 | p1_19@876@01 && p2_19@877@01]
(assert (and p1_19@876@01 p2_19@877@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_9@921@01 tmp_10@943@01)) (not (= tmp_10@943@01 tmp_9@921@01))))
; [eval] x_2 == x_2_0
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  (and p1_19@876@01 p2_19@877@01)
  (and
    p1_19@876@01
    p2_19@877@01
    (not (= tmp_9@921@01 tmp_10@943@01))
    (not (= tmp_10@943@01 tmp_9@921@01)))))
(assert (and p1_19@876@01 p2_19@877@01))
(set-option :timeout 0)
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01)))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2671 | p1_19@876@01 && p2_19@877@01 ==> x_2@886@01 == x_2_0@887@01 | live]
; [else-branch: 2671 | !(p1_19@876@01 && p2_19@877@01 ==> x_2@886@01 == x_2_0@887@01) | live]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2671 | p1_19@876@01 && p2_19@877@01 ==> x_2@886@01 == x_2_0@887@01]
(assert (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_9@921@01 tmp_10@943@01)) (not (= tmp_10@943@01 tmp_9@921@01))))
; [eval] p1_19 && p2_19 ==> _res == _res_10
; [eval] p1_19 && p2_19
(set-option :timeout 0)
(push) ; 41
; [then-branch: 2672 | !(p1_19@876@01) | live]
; [else-branch: 2672 | p1_19@876@01 | live]
(push) ; 42
; [then-branch: 2672 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unsat
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unsat
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))
(assert false)
(pop) ; 42
(set-option :timeout 0)
(push) ; 42
; [else-branch: 2672 | p1_19@876@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_10@943@01 tmp_9@921@01)) (not (= tmp_9@921@01 tmp_10@943@01))))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_19@876@01
  (and (not (= tmp_10@943@01 tmp_9@921@01)) (not (= tmp_9@921@01 tmp_10@943@01)))))
(set-option :timeout 0)
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not (and p1_19@876@01 p2_19@877@01))))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 42
(set-option :timeout 10)
(assert (not (and p1_19@876@01 p2_19@877@01)))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2673 | p1_19@876@01 && p2_19@877@01 | live]
; [else-branch: 2673 | !(p1_19@876@01 && p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 2673 | p1_19@876@01 && p2_19@877@01]
(assert (and p1_19@876@01 p2_19@877@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_10@943@01 tmp_9@921@01)) (not (= tmp_9@921@01 tmp_10@943@01))))
; [eval] _res == _res_10
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (and p1_19@876@01 p2_19@877@01))
(pop) ; 40
(set-option :timeout 0)
(push) ; 40
; [else-branch: 2671 | !(p1_19@876@01 && p2_19@877@01 ==> x_2@886@01 == x_2_0@887@01)]
(assert (not (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_9@921@01 tmp_10@943@01)) (not (= tmp_10@943@01 tmp_9@921@01))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))
  (and
    (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))
    (not (= tmp_9@921@01 tmp_10@943@01))
    (not (= tmp_10@943@01 tmp_9@921@01))
    (=>
      p1_19@876@01
      (and
        (not (= tmp_10@943@01 tmp_9@921@01))
        (not (= tmp_9@921@01 tmp_10@943@01))))
    p1_19@876@01
    p2_19@877@01)))
; Joined path conditions
(assert (=>
  (not (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01)))
  (and
    (not (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01)))
    (not (= tmp_9@921@01 tmp_10@943@01))
    (not (= tmp_10@943@01 tmp_9@921@01)))))
(set-option :timeout 0)
(push) ; 39
(assert (not (=>
  (and
    (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))
    (and p1_19@876@01 p2_19@877@01))
  (= _res@969@01 _res_10@970@01))))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 39
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 39
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 39
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 39
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 39
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 39
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_9@921@01 tmp_10@943@01)) (not (= tmp_10@943@01 tmp_9@921@01))))
; [eval] (p1_19 && p2_19 ==> x_2 == x_2_0) ==> p1_19 && p2_19 ==> _res == _res_10
; [eval] p1_19 && p2_19 ==> x_2 == x_2_0
; [eval] p1_19 && p2_19
(set-option :timeout 0)
(push) ; 39
; [then-branch: 2674 | !(p1_19@876@01) | live]
; [else-branch: 2674 | p1_19@876@01 | live]
(push) ; 40
; [then-branch: 2674 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))
(assert false)
(pop) ; 40
(set-option :timeout 0)
(push) ; 40
; [else-branch: 2674 | p1_19@876@01]
(assert p1_19@876@01)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_10@943@01 tmp_9@921@01)) (not (= tmp_9@921@01 tmp_10@943@01))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not (and p1_19@876@01 p2_19@877@01))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not (and p1_19@876@01 p2_19@877@01)))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2675 | p1_19@876@01 && p2_19@877@01 | live]
; [else-branch: 2675 | !(p1_19@876@01 && p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2675 | p1_19@876@01 && p2_19@877@01]
(assert (and p1_19@876@01 p2_19@877@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_10@943@01 tmp_9@921@01)) (not (= tmp_9@921@01 tmp_10@943@01))))
; [eval] x_2 == x_2_0
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (and p1_19@876@01 p2_19@877@01))
(set-option :timeout 0)
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01)))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2676 | p1_19@876@01 && p2_19@877@01 ==> x_2@886@01 == x_2_0@887@01 | live]
; [else-branch: 2676 | !(p1_19@876@01 && p2_19@877@01 ==> x_2@886@01 == x_2_0@887@01) | live]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2676 | p1_19@876@01 && p2_19@877@01 ==> x_2@886@01 == x_2_0@887@01]
(assert (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_10@943@01 tmp_9@921@01)) (not (= tmp_9@921@01 tmp_10@943@01))))
; [eval] p1_19 && p2_19 ==> _res == _res_10
; [eval] p1_19 && p2_19
(set-option :timeout 0)
(push) ; 41
; [then-branch: 2677 | !(p1_19@876@01) | live]
; [else-branch: 2677 | p1_19@876@01 | live]
(push) ; 42
; [then-branch: 2677 | !(p1_19@876@01)]
(assert (not p1_19@876@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unsat
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unsat
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))
(assert false)
(pop) ; 42
(set-option :timeout 0)
(push) ; 42
; [else-branch: 2677 | p1_19@876@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_9@921@01 tmp_10@943@01)) (not (= tmp_10@943@01 tmp_9@921@01))))
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_19@876@01
  (and (not (= tmp_9@921@01 tmp_10@943@01)) (not (= tmp_10@943@01 tmp_9@921@01)))))
(set-option :timeout 0)
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not (and p1_19@876@01 p2_19@877@01))))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 42
(set-option :timeout 10)
(assert (not (and p1_19@876@01 p2_19@877@01)))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2678 | p1_19@876@01 && p2_19@877@01 | live]
; [else-branch: 2678 | !(p1_19@876@01 && p2_19@877@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 2678 | p1_19@876@01 && p2_19@877@01]
(assert (and p1_19@876@01 p2_19@877@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (= tmp_10@943@01 tmp_9@921@01)))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_9@921@01 tmp_10@943@01)) (not (= tmp_10@943@01 tmp_9@921@01))))
; [eval] _res == _res_10
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (and p1_19@876@01 p2_19@877@01))
(pop) ; 40
(set-option :timeout 0)
(push) ; 40
; [else-branch: 2676 | !(p1_19@876@01 && p2_19@877@01 ==> x_2@886@01 == x_2_0@887@01)]
(assert (not (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (= tmp_9@921@01 tmp_10@943@01)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@940@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@962@01))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@940@01)))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= tmp_10@943@01 tmp_9@921@01)) (not (= tmp_9@921@01 tmp_10@943@01))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))
  (and
    (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))
    (not (= tmp_10@943@01 tmp_9@921@01))
    (not (= tmp_9@921@01 tmp_10@943@01))
    (=>
      p1_19@876@01
      (and
        (not (= tmp_9@921@01 tmp_10@943@01))
        (not (= tmp_10@943@01 tmp_9@921@01))))
    p1_19@876@01
    p2_19@877@01)))
; Joined path conditions
(set-option :timeout 0)
(push) ; 39
(assert (not (=>
  (and
    (=> (and p1_19@876@01 p2_19@877@01) (= x_2@886@01 x_2_0@887@01))
    (and p1_19@876@01 p2_19@877@01))
  (= _res@969@01 _res_10@970@01))))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- string_container_lowval ----------
(declare-const p1_21@971@01 Bool)
(declare-const p2_21@972@01 Bool)
(declare-const _cthread_169@973@01 $Ref)
(declare-const _cthread_169_0@974@01 $Ref)
(declare-const _caller_measures_169@975@01 Seq<Measure$>)
(declare-const _caller_measures_169_0@976@01 Seq<Measure$>)
(declare-const _residue_169@977@01 $Perm)
(declare-const _residue_169_0@978@01 $Perm)
(declare-const secret_10@979@01 $Ref)
(declare-const secret_10_0@980@01 $Ref)
(declare-const x_3@981@01 $Ref)
(declare-const x_3_0@982@01 $Ref)
(declare-const _current_wait_level_169@983@01 $Perm)
(declare-const _current_wait_level_169_0@984@01 $Perm)
(declare-const _res@985@01 $Ref)
(declare-const _res_11@986@01 $Ref)
(declare-const p1_21@987@01 Bool)
(declare-const p2_21@988@01 Bool)
(declare-const _cthread_169@989@01 $Ref)
(declare-const _cthread_169_0@990@01 $Ref)
(declare-const _caller_measures_169@991@01 Seq<Measure$>)
(declare-const _caller_measures_169_0@992@01 Seq<Measure$>)
(declare-const _residue_169@993@01 $Perm)
(declare-const _residue_169_0@994@01 $Perm)
(declare-const secret_10@995@01 $Ref)
(declare-const secret_10_0@996@01 $Ref)
(declare-const x_3@997@01 $Ref)
(declare-const x_3_0@998@01 $Ref)
(declare-const _current_wait_level_169@999@01 $Perm)
(declare-const _current_wait_level_169_0@1000@01 $Perm)
(declare-const _res@1001@01 $Ref)
(declare-const _res_11@1002@01 $Ref)
(push) ; 1
(declare-const $t@1003@01 $Snap)
(assert (= $t@1003@01 ($Snap.combine ($Snap.first $t@1003@01) ($Snap.second $t@1003@01))))
(assert (= ($Snap.first $t@1003@01) $Snap.unit))
; [eval] p1_21 ==> _cthread_169 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2679 | p1_21@987@01 | live]
; [else-branch: 2679 | !(p1_21@987@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2679 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] _cthread_169 != null
(pop) ; 3
(push) ; 3
; [else-branch: 2679 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_21@987@01) p1_21@987@01))
(assert (=> p1_21@987@01 (not (= _cthread_169@989@01 $Ref.null))))
(assert (=
  ($Snap.second $t@1003@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1003@01))
    ($Snap.second ($Snap.second $t@1003@01)))))
(assert (= ($Snap.first ($Snap.second $t@1003@01)) $Snap.unit))
; [eval] p2_21 ==> _cthread_169_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2680 | p2_21@988@01 | live]
; [else-branch: 2680 | !(p2_21@988@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2680 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] _cthread_169_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 2680 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_21@988@01) p2_21@988@01))
(assert (=> p2_21@988@01 (not (= _cthread_169_0@990@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@1003@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1003@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1003@01))) $Snap.unit))
; [eval] p1_21 ==> issubtype(typeof(_cthread_169), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2681 | p1_21@987@01 | live]
; [else-branch: 2681 | !(p1_21@987@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2681 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] issubtype(typeof(_cthread_169), Thread_0())
; [eval] typeof(_cthread_169)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 2681 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> _cthread_169@989@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))
  $Snap.unit))
; [eval] p2_21 ==> issubtype(typeof(_cthread_169_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2682 | p2_21@988@01 | live]
; [else-branch: 2682 | !(p2_21@988@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2682 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] issubtype(typeof(_cthread_169_0), Thread_0())
; [eval] typeof(_cthread_169_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 2682 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_21@988@01
  (issubtype<Bool> (typeof<PyType> _cthread_169_0@990@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))))
  $Snap.unit))
; [eval] p1_21 ==> issubtype(typeof(secret_10), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2683 | p1_21@987@01 | live]
; [else-branch: 2683 | !(p1_21@987@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2683 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] issubtype(typeof(secret_10), bool())
; [eval] typeof(secret_10)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 2683 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> secret_10@995@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))))
  $Snap.unit))
; [eval] p2_21 ==> issubtype(typeof(secret_10_0), bool())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2684 | p2_21@988@01 | live]
; [else-branch: 2684 | !(p2_21@988@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2684 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] issubtype(typeof(secret_10_0), bool())
; [eval] typeof(secret_10_0)
; [eval] bool()
(pop) ; 3
(push) ; 3
; [else-branch: 2684 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_21@988@01
  (issubtype<Bool> (typeof<PyType> secret_10_0@996@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))))))
  $Snap.unit))
; [eval] p1_21 ==> issubtype(typeof(x_3), str())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2685 | p1_21@987@01 | live]
; [else-branch: 2685 | !(p1_21@987@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2685 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] issubtype(typeof(x_3), str())
; [eval] typeof(x_3)
; [eval] str()
(pop) ; 3
(push) ; 3
; [else-branch: 2685 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> x_3@997@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))))))
  $Snap.unit))
; [eval] p2_21 ==> issubtype(typeof(x_3_0), str())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2686 | p2_21@988@01 | live]
; [else-branch: 2686 | !(p2_21@988@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2686 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] issubtype(typeof(x_3_0), str())
; [eval] typeof(x_3_0)
; [eval] str()
(pop) ; 3
(push) ; 3
; [else-branch: 2686 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_21@988@01
  (issubtype<Bool> (typeof<PyType> x_3_0@998@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))))))))
  $Snap.unit))
; [eval] p1_21 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2687 | p1_21@987@01 | live]
; [else-branch: 2687 | !(p1_21@987@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2687 | p1_21@987@01]
(assert p1_21@987@01)
(pop) ; 3
(push) ; 3
; [else-branch: 2687 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))))))))
  $Snap.unit))
; [eval] p2_21 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2688 | p2_21@988@01 | live]
; [else-branch: 2688 | !(p2_21@988@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2688 | p2_21@988@01]
(assert p2_21@988@01)
(pop) ; 3
(push) ; 3
; [else-branch: 2688 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@1004@01 $Snap)
(assert (= $t@1004@01 ($Snap.combine ($Snap.first $t@1004@01) ($Snap.second $t@1004@01))))
(assert (= ($Snap.first $t@1004@01) $Snap.unit))
; [eval] p1_21 ==> (forperm _r_32: Ref [_r_32.MustReleaseBounded] :: Level(_r_32) <= _current_wait_level_169) && ((forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: Level(_r_32) <= _current_wait_level_169) && _residue_169 <= _current_wait_level_169)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2689 | p1_21@987@01 | live]
; [else-branch: 2689 | !(p1_21@987@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2689 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] (forperm _r_32: Ref [_r_32.MustReleaseBounded] :: Level(_r_32) <= _current_wait_level_169) && ((forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: Level(_r_32) <= _current_wait_level_169) && _residue_169 <= _current_wait_level_169)
; [eval] (forperm _r_32: Ref [_r_32.MustReleaseBounded] :: Level(_r_32) <= _current_wait_level_169)
(push) ; 5
; [then-branch: 2690 | False | live]
; [else-branch: 2690 | True | live]
(push) ; 6
; [then-branch: 2690 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 2690 | True]
; [eval] (forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: Level(_r_32) <= _current_wait_level_169)
(push) ; 7
; [then-branch: 2691 | False | live]
; [else-branch: 2691 | True | live]
(push) ; 8
; [then-branch: 2691 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2691 | True]
; [eval] _residue_169 <= _current_wait_level_169
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 2689 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p1_21@987@01 (<= _residue_169@993@01 _current_wait_level_169@999@01)))
(assert (=
  ($Snap.second $t@1004@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1004@01))
    ($Snap.second ($Snap.second $t@1004@01)))))
(assert (= ($Snap.first ($Snap.second $t@1004@01)) $Snap.unit))
; [eval] p2_21 ==> (forperm _r_32: Ref [_r_32.MustReleaseBoundedp] :: Level(_r_32) <= _current_wait_level_169_0) && ((forperm _r_32: Ref [_r_32.MustReleaseUnboundedp] :: Level(_r_32) <= _current_wait_level_169_0) && _residue_169_0 <= _current_wait_level_169_0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2692 | p2_21@988@01 | live]
; [else-branch: 2692 | !(p2_21@988@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2692 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] (forperm _r_32: Ref [_r_32.MustReleaseBoundedp] :: Level(_r_32) <= _current_wait_level_169_0) && ((forperm _r_32: Ref [_r_32.MustReleaseUnboundedp] :: Level(_r_32) <= _current_wait_level_169_0) && _residue_169_0 <= _current_wait_level_169_0)
; [eval] (forperm _r_32: Ref [_r_32.MustReleaseBoundedp] :: Level(_r_32) <= _current_wait_level_169_0)
(push) ; 5
; [then-branch: 2693 | False | live]
; [else-branch: 2693 | True | live]
(push) ; 6
; [then-branch: 2693 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 2693 | True]
; [eval] (forperm _r_32: Ref [_r_32.MustReleaseUnboundedp] :: Level(_r_32) <= _current_wait_level_169_0)
(push) ; 7
; [then-branch: 2694 | False | live]
; [else-branch: 2694 | True | live]
(push) ; 8
; [then-branch: 2694 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 2694 | True]
; [eval] _residue_169_0 <= _current_wait_level_169_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 2692 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p2_21@988@01 (<= _residue_169_0@994@01 _current_wait_level_169_0@1000@01)))
(assert (=
  ($Snap.second ($Snap.second $t@1004@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1004@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1004@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1004@01))) $Snap.unit))
; [eval] p1_21 ==> issubtype(typeof(_res), str())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2695 | p1_21@987@01 | live]
; [else-branch: 2695 | !(p1_21@987@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2695 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 4
(push) ; 4
; [else-branch: 2695 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> _res@1001@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1004@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1004@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1004@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1004@01))))
  $Snap.unit))
; [eval] p2_21 ==> issubtype(typeof(_res_11), str())
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2696 | p2_21@988@01 | live]
; [else-branch: 2696 | !(p2_21@988@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2696 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] issubtype(typeof(_res_11), str())
; [eval] typeof(_res_11)
; [eval] str()
(pop) ; 4
(push) ; 4
; [else-branch: 2696 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_21@988@01
  (issubtype<Bool> (typeof<PyType> _res_11@1002@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1004@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1004@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1004@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1004@01)))))
  $Snap.unit))
; [eval] (p1_21 && p2_21 ==> x_3 == x_3_0) ==> p1_21 && p2_21 ==> str___eq__(_res, _res_11)
; [eval] p1_21 && p2_21 ==> x_3 == x_3_0
; [eval] p1_21 && p2_21
(push) ; 3
; [then-branch: 2697 | !(p1_21@987@01) | live]
; [else-branch: 2697 | p1_21@987@01 | live]
(push) ; 4
; [then-branch: 2697 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 4
(push) ; 4
; [else-branch: 2697 | p1_21@987@01]
(assert p1_21@987@01)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1_21@987@01 (not p1_21@987@01)))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (and p1_21@987@01 p2_21@988@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and p1_21@987@01 p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2698 | p1_21@987@01 && p2_21@988@01 | live]
; [else-branch: 2698 | !(p1_21@987@01 && p2_21@988@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2698 | p1_21@987@01 && p2_21@988@01]
(assert (and p1_21@987@01 p2_21@988@01))
; [eval] x_3 == x_3_0
(pop) ; 4
(push) ; 4
; [else-branch: 2698 | !(p1_21@987@01 && p2_21@988@01)]
(assert (not (and p1_21@987@01 p2_21@988@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (and p1_21@987@01 p2_21@988@01)) (and p1_21@987@01 p2_21@988@01)))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2699 | p1_21@987@01 && p2_21@988@01 ==> x_3@997@01 == x_3_0@998@01 | live]
; [else-branch: 2699 | !(p1_21@987@01 && p2_21@988@01 ==> x_3@997@01 == x_3_0@998@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2699 | p1_21@987@01 && p2_21@988@01 ==> x_3@997@01 == x_3_0@998@01]
(assert (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01)))
; [eval] p1_21 && p2_21 ==> str___eq__(_res, _res_11)
; [eval] p1_21 && p2_21
(push) ; 5
; [then-branch: 2700 | !(p1_21@987@01) | live]
; [else-branch: 2700 | p1_21@987@01 | live]
(push) ; 6
; [then-branch: 2700 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2700 | p1_21@987@01]
(assert p1_21@987@01)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (and p1_21@987@01 p2_21@988@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and p1_21@987@01 p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2701 | p1_21@987@01 && p2_21@988@01 | live]
; [else-branch: 2701 | !(p1_21@987@01 && p2_21@988@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2701 | p1_21@987@01 && p2_21@988@01]
(assert (and p1_21@987@01 p2_21@988@01))
; [eval] str___eq__(_res, _res_11)
(push) ; 7
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> _res@1001@01) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@1001@01) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit _res@1001@01 _res_11@1002@01))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@1001@01) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit _res@1001@01 _res_11@1002@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 2701 | !(p1_21@987@01 && p2_21@988@01)]
(assert (not (and p1_21@987@01 p2_21@988@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and p1_21@987@01 p2_21@988@01)
  (and
    p1_21@987@01
    p2_21@988@01
    (issubtype<Bool> (typeof<PyType> _res@1001@01) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit _res@1001@01 _res_11@1002@01))))
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 2699 | !(p1_21@987@01 && p2_21@988@01 ==> x_3@997@01 == x_3_0@998@01)]
(assert (not (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))
  (and
    (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))
    (=>
      (and p1_21@987@01 p2_21@988@01)
      (and
        p1_21@987@01
        p2_21@988@01
        (issubtype<Bool> (typeof<PyType> _res@1001@01) (as str<PyType>  PyType))
        (str___eq__%precondition $Snap.unit _res@1001@01 _res_11@1002@01))))))
; Joined path conditions
(assert (or
  (not (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01)))
  (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))))
(assert (=>
  (and
    (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))
    (and p1_21@987@01 p2_21@988@01))
  (str___eq__ $Snap.unit _res@1001@01 _res_11@1002@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1004@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1004@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1004@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1004@01))))))
  $Snap.unit))
; [eval] p1_21 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2702 | p1_21@987@01 | live]
; [else-branch: 2702 | !(p1_21@987@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2702 | p1_21@987@01]
(assert p1_21@987@01)
(pop) ; 4
(push) ; 4
; [else-branch: 2702 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1004@01))))))
  $Snap.unit))
; [eval] p2_21 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2703 | p2_21@988@01 | live]
; [else-branch: 2703 | !(p2_21@988@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2703 | p2_21@988@01]
(assert p2_21@988@01)
(pop) ; 4
(push) ; 4
; [else-branch: 2703 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
(push) ; 2
; [exec]
; var ret1_10: Bool
(declare-const ret1_10@1005@01 Bool)
; [exec]
; var ret2_10: Bool
(declare-const ret2_10@1006@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@1007@01 $Ref)
; [exec]
; var _err_11: Ref
(declare-const _err_11@1008@01 $Ref)
; [exec]
; var a_5: Ref
(declare-const a_5@1009@01 $Ref)
; [exec]
; var a_5_0: Ref
(declare-const a_5_0@1010@01 $Ref)
; [exec]
; var b_5: Ref
(declare-const b_5@1011@01 $Ref)
; [exec]
; var b_5_0: Ref
(declare-const b_5_0@1012@01 $Ref)
; [exec]
; var secret_22: Ref
(declare-const secret_22@1013@01 $Ref)
; [exec]
; var secret_22_0: Ref
(declare-const secret_22_0@1014@01 $Ref)
; [exec]
; var x_7: Ref
(declare-const x_7@1015@01 $Ref)
; [exec]
; var x_7_0: Ref
(declare-const x_7_0@1016@01 $Ref)
; [exec]
; var StringContainer_res_1: Ref
(declare-const StringContainer_res_1@1017@01 $Ref)
; [exec]
; var StringContainer_res_1_0: Ref
(declare-const StringContainer_res_1_0@1018@01 $Ref)
; [exec]
; var StringContainer_res_2: Ref
(declare-const StringContainer_res_2@1019@01 $Ref)
; [exec]
; var StringContainer_res_2_0: Ref
(declare-const StringContainer_res_2_0@1020@01 $Ref)
; [exec]
; var _cwl_169: Perm
(declare-const _cwl_169@1021@01 $Perm)
; [exec]
; var _cwl_169_0: Perm
(declare-const _cwl_169_0@1022@01 $Perm)
; [exec]
; var _method_measures_169: Seq[Measure$]
(declare-const _method_measures_169@1023@01 Seq<Measure$>)
; [exec]
; var _method_measures_169_0: Seq[Measure$]
(declare-const _method_measures_169_0@1024@01 Seq<Measure$>)
; [exec]
; var tmp_11: Ref
(declare-const tmp_11@1025@01 $Ref)
; [exec]
; var tmp_12: Ref
(declare-const tmp_12@1026@01 $Ref)
; [exec]
; var p1_22: Bool
(declare-const p1_22@1027@01 Bool)
; [exec]
; var p2_22: Bool
(declare-const p2_22@1028@01 Bool)
; [exec]
; var p3_10: Bool
(declare-const p3_10@1029@01 Bool)
; [exec]
; var p4_10: Bool
(declare-const p4_10@1030@01 Bool)
; [exec]
; inhale p1_21
(declare-const $t@1031@01 $Snap)
(assert (= $t@1031@01 $Snap.unit))
(assert p1_21@987@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ret1_10 := false
; [exec]
; ret2_10 := false
; [eval] p1_21 && !ret1_10
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2704 | !(p1_21@987@01) | live]
; [else-branch: 2704 | p1_21@987@01 | live]
(push) ; 4
; [then-branch: 2704 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 4
(push) ; 4
; [else-branch: 2704 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or p1_21@987@01 (not p1_21@987@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2705 | p1_21@987@01 | live]
; [else-branch: 2705 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2705 | p1_21@987@01]
; [exec]
; _method_measures_169 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; secret_22 := secret_10
; [exec]
; x_7 := x_3
; [eval] p2_21 && !ret2_10
(push) ; 4
; [then-branch: 2706 | !(p2_21@988@01) | live]
; [else-branch: 2706 | p2_21@988@01 | live]
(push) ; 5
; [then-branch: 2706 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 5
(push) ; 5
; [else-branch: 2706 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or p2_21@988@01 (not p2_21@988@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2707 | p2_21@988@01 | live]
; [else-branch: 2707 | !(p2_21@988@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2707 | p2_21@988@01]
(assert p2_21@988@01)
; [exec]
; _method_measures_169_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res_11 := null
; [exec]
; _err_11 := null
; [exec]
; secret_22_0 := secret_10_0
; [exec]
; x_7_0 := x_3_0
; [exec]
; tmp_11 := new()
(declare-const tmp_11@1032@01 $Ref)
(assert (not (= tmp_11@1032@01 $Ref.null)))
(assert (not (= tmp_11@1032@01 StringContainer_res_2@1019@01)))
(assert (not (= tmp_11@1032@01 tmp_11@1025@01)))
(assert (not (= tmp_11@1032@01 tmp_12@1026@01)))
(assert (not (= tmp_11@1032@01 secret_10@995@01)))
(assert (not (= tmp_11@1032@01 a_5_0@1010@01)))
(assert (not (= tmp_11@1032@01 _cthread_169@989@01)))
(assert (not (= tmp_11@1032@01 b_5@1011@01)))
(assert (not (= tmp_11@1032@01 StringContainer_res_1_0@1018@01)))
(assert (not (= tmp_11@1032@01 _cthread_169_0@990@01)))
(assert (not (= tmp_11@1032@01 a_5@1009@01)))
(assert (not (= tmp_11@1032@01 StringContainer_res_2_0@1020@01)))
(assert (not (= tmp_11@1032@01 secret_10_0@996@01)))
(assert (not (= tmp_11@1032@01 StringContainer_res_1@1017@01)))
(assert (not (= tmp_11@1032@01 b_5_0@1012@01)))
(assert (not (= tmp_11@1032@01 x_3_0@998@01)))
(assert (not (= tmp_11@1032@01 x_3@997@01)))
; [eval] p1_21 && !ret1_10
(push) ; 5
; [then-branch: 2708 | !(p1_21@987@01) | live]
; [else-branch: 2708 | p1_21@987@01 | live]
(push) ; 6
; [then-branch: 2708 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 6
(push) ; 6
; [else-branch: 2708 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2709 | p1_21@987@01 | live]
; [else-branch: 2709 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2709 | p1_21@987@01]
; [exec]
; StringContainer_res_1 := tmp_11
; [eval] p2_21 && !ret2_10
(push) ; 6
; [then-branch: 2710 | !(p2_21@988@01) | live]
; [else-branch: 2710 | p2_21@988@01 | live]
(push) ; 7
; [then-branch: 2710 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 7
(push) ; 7
; [else-branch: 2710 | p2_21@988@01]
; [eval] !ret2_10
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2711 | p2_21@988@01 | live]
; [else-branch: 2711 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 2711 | p2_21@988@01]
; [exec]
; StringContainer_res_1_0 := tmp_11
; [eval] p1_21 && !ret1_10
(push) ; 7
; [then-branch: 2712 | !(p1_21@987@01) | live]
; [else-branch: 2712 | p1_21@987@01 | live]
(push) ; 8
; [then-branch: 2712 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2712 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2713 | p1_21@987@01 | live]
; [else-branch: 2713 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 2713 | p1_21@987@01]
; [exec]
; inhale typeof(StringContainer_res_1) == StringContainer()
(declare-const $t@1033@01 $Snap)
(assert (= $t@1033@01 $Snap.unit))
; [eval] typeof(StringContainer_res_1) == StringContainer()
; [eval] typeof(StringContainer_res_1)
; [eval] StringContainer()
(assert (= (typeof<PyType> tmp_11@1032@01) (as StringContainer<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(StringContainer_res_1, 39259342834620444863618799033642229331027), write)
(declare-const $t@1034@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [eval] p2_21 && !ret2_10
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2714 | !(p2_21@988@01) | live]
; [else-branch: 2714 | p2_21@988@01 | live]
(push) ; 9
; [then-branch: 2714 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2714 | p2_21@988@01]
; [eval] !ret2_10
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2715 | p2_21@988@01 | live]
; [else-branch: 2715 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 2715 | p2_21@988@01]
; [exec]
; inhale typeof(StringContainer_res_1_0) == StringContainer()
(declare-const $t@1035@01 $Snap)
(assert (= $t@1035@01 $Snap.unit))
; [eval] typeof(StringContainer_res_1_0) == StringContainer()
; [eval] typeof(StringContainer_res_1_0)
; [eval] StringContainer()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(StringContainer_res_1_0, 39259342834620444863618799033642229331027), write)
(declare-const $t@1036@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [eval] p1_21 && !ret1_10 || p2_21 && !ret2_10
; [eval] p1_21 && !ret1_10
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2716 | !(p1_21@987@01) | live]
; [else-branch: 2716 | p1_21@987@01 | live]
(push) ; 10
; [then-branch: 2716 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2716 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 2717 | p1_21@987@01 | live]
; [else-branch: 2717 | !(p1_21@987@01) | live]
(push) ; 10
; [then-branch: 2717 | p1_21@987@01]
(pop) ; 10
(push) ; 10
; [else-branch: 2717 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
; [eval] p2_21 && !ret2_10
(push) ; 11
; [then-branch: 2718 | !(p2_21@988@01) | live]
; [else-branch: 2718 | p2_21@988@01 | live]
(push) ; 12
; [then-branch: 2718 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 12
(push) ; 12
; [else-branch: 2718 | p2_21@988@01]
; [eval] !ret2_10
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not (or p1_21@987@01 p2_21@988@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (or p1_21@987@01 p2_21@988@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2719 | p1_21@987@01 || p2_21@988@01 | live]
; [else-branch: 2719 | !(p1_21@987@01 || p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 2719 | p1_21@987@01 || p2_21@988@01]
(assert (or p1_21@987@01 p2_21@988@01))
; [exec]
; var tmp1_61: Ref
(declare-const tmp1_61@1037@01 $Ref)
; [exec]
; var tmp2_61: Ref
(declare-const tmp2_61@1038@01 $Ref)
; [exec]
; var tmp1_62: Seq[Measure$]
(declare-const tmp1_62@1039@01 Seq<Measure$>)
; [exec]
; var tmp2_62: Seq[Measure$]
(declare-const tmp2_62@1040@01 Seq<Measure$>)
; [exec]
; var tmp1_63: Perm
(declare-const tmp1_63@1041@01 $Perm)
; [exec]
; var tmp2_63: Perm
(declare-const tmp2_63@1042@01 $Perm)
; [exec]
; var tmp1_64: Ref
(declare-const tmp1_64@1043@01 $Ref)
; [exec]
; var tmp2_64: Ref
(declare-const tmp2_64@1044@01 $Ref)
; [exec]
; var tmp1_65: Ref
(declare-const tmp1_65@1045@01 $Ref)
; [exec]
; var tmp2_65: Ref
(declare-const tmp2_65@1046@01 $Ref)
; [exec]
; var tmp1_66: Perm
(declare-const tmp1_66@1047@01 $Perm)
; [exec]
; var tmp2_66: Perm
(declare-const tmp2_66@1048@01 $Perm)
; [eval] p1_21 && !ret1_10
(push) ; 10
; [then-branch: 2720 | !(p1_21@987@01) | live]
; [else-branch: 2720 | p1_21@987@01 | live]
(push) ; 11
; [then-branch: 2720 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 11
(push) ; 11
; [else-branch: 2720 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2721 | p1_21@987@01 | live]
; [else-branch: 2721 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 2721 | p1_21@987@01]
; [exec]
; tmp1_61 := _cthread_169
; [exec]
; tmp1_62 := _method_measures_169
; [exec]
; tmp1_63 := _residue_169
; [exec]
; tmp1_64 := StringContainer_res_1
; [exec]
; tmp1_65 := x_7
; [eval] p2_21 && !ret2_10
(push) ; 11
; [then-branch: 2722 | !(p2_21@988@01) | live]
; [else-branch: 2722 | p2_21@988@01 | live]
(push) ; 12
; [then-branch: 2722 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 12
(push) ; 12
; [else-branch: 2722 | p2_21@988@01]
; [eval] !ret2_10
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2723 | p2_21@988@01 | live]
; [else-branch: 2723 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 2723 | p2_21@988@01]
; [exec]
; tmp2_61 := _cthread_169_0
; [exec]
; tmp2_62 := _method_measures_169_0
; [exec]
; tmp2_63 := _residue_169_0
; [exec]
; tmp2_64 := StringContainer_res_1_0
; [exec]
; tmp2_65 := x_7_0
; [exec]
; tmp1_66, tmp2_66 := StringContainer___init__(p1_21 && !ret1_10, p2_21 &&
;   !ret2_10, tmp1_61, tmp2_61, tmp1_62, tmp2_62, tmp1_63, tmp2_63, tmp1_64, tmp2_64,
;   tmp1_65, tmp2_65)
; [eval] p1_21 && !ret1_10
(push) ; 12
; [then-branch: 2724 | !(p1_21@987@01) | live]
; [else-branch: 2724 | p1_21@987@01 | live]
(push) ; 13
; [then-branch: 2724 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 13
(push) ; 13
; [else-branch: 2724 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [eval] p2_21 && !ret2_10
(push) ; 12
; [then-branch: 2725 | !(p2_21@988@01) | live]
; [else-branch: 2725 | p2_21@988@01 | live]
(push) ; 13
; [then-branch: 2725 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 13
(push) ; 13
; [else-branch: 2725 | p2_21@988@01]
; [eval] !ret2_10
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [eval] p1_26 ==> _cthread_157 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2726 | p1_21@987@01 | live]
; [else-branch: 2726 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2726 | p1_21@987@01]
; [eval] _cthread_157 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p2_26 ==> _cthread_157_0 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2727 | p2_21@988@01 | live]
; [else-branch: 2727 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2727 | p2_21@988@01]
; [eval] _cthread_157_0 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1_26 ==> issubtype(typeof(_cthread_157), Thread_0())
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2728 | p1_21@987@01 | live]
; [else-branch: 2728 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2728 | p1_21@987@01]
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p2_26 ==> issubtype(typeof(_cthread_157_0), Thread_0())
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2729 | p2_21@988@01 | live]
; [else-branch: 2729 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2729 | p2_21@988@01]
; [eval] issubtype(typeof(_cthread_157_0), Thread_0())
; [eval] typeof(_cthread_157_0)
; [eval] Thread_0()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1_26 ==> self_0 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2730 | p1_21@987@01 | live]
; [else-branch: 2730 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2730 | p1_21@987@01]
; [eval] self_0 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=> p1_21@987@01 (not (= tmp_11@1032@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=> p1_21@987@01 (not (= tmp_11@1032@01 $Ref.null))))
; [eval] p2_26 ==> self_0_0 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2731 | p2_21@988@01 | live]
; [else-branch: 2731 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2731 | p2_21@988@01]
; [eval] self_0_0 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=> p2_21@988@01 (not (= tmp_11@1032@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=> p2_21@988@01 (not (= tmp_11@1032@01 $Ref.null))))
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2732 | p1_21@987@01 | live]
; [else-branch: 2732 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 2732 | p1_21@987@01]
(push) ; 13
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2733 | p2_21@988@01 | live]
; [else-branch: 2733 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 2733 | p2_21@988@01]
; [eval] p1_26 ==> issubtype(typeof(self_0), StringContainer())
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2734 | p1_21@987@01 | live]
; [else-branch: 2734 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2734 | p1_21@987@01]
; [eval] issubtype(typeof(self_0), StringContainer())
; [eval] typeof(self_0)
; [eval] StringContainer()
(pop) ; 15
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> tmp_11@1032@01) (as StringContainer<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> tmp_11@1032@01) (as StringContainer<PyType>  PyType))))
; [eval] p2_26 ==> issubtype(typeof(self_0_0), StringContainer())
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2735 | p2_21@988@01 | live]
; [else-branch: 2735 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2735 | p2_21@988@01]
; [eval] issubtype(typeof(self_0_0), StringContainer())
; [eval] typeof(self_0_0)
; [eval] StringContainer()
(pop) ; 15
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (=>
  p2_21@988@01
  (issubtype<Bool> (typeof<PyType> tmp_11@1032@01) (as StringContainer<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_21@988@01
  (issubtype<Bool> (typeof<PyType> tmp_11@1032@01) (as StringContainer<PyType>  PyType))))
; [eval] p1_26 ==> issubtype(typeof(s), str())
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2736 | p1_21@987@01 | live]
; [else-branch: 2736 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2736 | p1_21@987@01]
; [eval] issubtype(typeof(s), str())
; [eval] typeof(s)
; [eval] str()
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] p2_26 ==> issubtype(typeof(s_1), str())
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2737 | p2_21@988@01 | live]
; [else-branch: 2737 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2737 | p2_21@988@01]
; [eval] issubtype(typeof(s_1), str())
; [eval] typeof(s_1)
; [eval] str()
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] p1_26 ==> self_0 != null
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2738 | p1_21@987@01 | live]
; [else-branch: 2738 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2738 | p1_21@987@01]
; [eval] self_0 != null
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] p2_26 ==> self_0_0 != null
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2739 | p2_21@988@01 | live]
; [else-branch: 2739 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2739 | p2_21@988@01]
; [eval] self_0_0 != null
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] p1_26 ==> perm(MustTerminate(_cthread_157)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false))))
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2740 | p1_21@987@01 | live]
; [else-branch: 2740 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2740 | p1_21@987@01]
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 16
; [then-branch: 2741 | False | live]
; [else-branch: 2741 | True | live]
(push) ; 17
; [then-branch: 2741 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 2741 | True]
; [eval] (forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false)
(push) ; 18
; [then-branch: 2742 | False | live]
; [else-branch: 2742 | True | live]
(push) ; 19
; [then-branch: 2742 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 2742 | True]
; [eval] (forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false)
(push) ; 20
; [then-branch: 2743 | False | live]
; [else-branch: 2743 | True | live]
(push) ; 21
; [then-branch: 2743 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 2743 | True]
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false)
(push) ; 22
; [then-branch: 2744 | False | live]
; [else-branch: 2744 | True | live]
(push) ; 23
; [then-branch: 2744 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 2744 | True]
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false)
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] p2_26 ==> perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_40: Ref [MustInvokeBounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBoundedp] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnboundedp] :: false))))
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2745 | p2_21@988@01 | live]
; [else-branch: 2745 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2745 | p2_21@988@01]
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_40: Ref [MustInvokeBounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBoundedp] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none
; [eval] perm(MustTerminate_0(_cthread_157_0))
(push) ; 16
; [then-branch: 2746 | False | live]
; [else-branch: 2746 | True | live]
(push) ; 17
; [then-branch: 2746 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 2746 | True]
; [eval] (forperm _r_40: Ref [MustInvokeBounded_0(_r_40)] :: false)
(push) ; 18
; [then-branch: 2747 | False | live]
; [else-branch: 2747 | True | live]
(push) ; 19
; [then-branch: 2747 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 2747 | True]
; [eval] (forperm _r_40: Ref [MustInvokeUnbounded_0(_r_40)] :: false)
(push) ; 20
; [then-branch: 2748 | False | live]
; [else-branch: 2748 | True | live]
(push) ; 21
; [then-branch: 2748 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 2748 | True]
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseBoundedp] :: false)
(push) ; 22
; [then-branch: 2749 | False | live]
; [else-branch: 2749 | True | live]
(push) ; 23
; [then-branch: 2749 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 2749 | True]
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseUnboundedp] :: false)
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(declare-const _current_wait_level_157@1049@01 $Perm)
(declare-const _current_wait_level_157_0@1050@01 $Perm)
(declare-const $t@1051@01 $Snap)
(assert (= $t@1051@01 ($Snap.combine ($Snap.first $t@1051@01) ($Snap.second $t@1051@01))))
(assert (= ($Snap.first $t@1051@01) $Snap.unit))
; [eval] p1_26 ==> (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2750 | p1_21@987@01 | live]
; [else-branch: 2750 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2750 | p1_21@987@01]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157)
(push) ; 16
; [then-branch: 2751 | False | live]
; [else-branch: 2751 | True | live]
(push) ; 17
; [then-branch: 2751 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 2751 | True]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157)
(push) ; 18
; [then-branch: 2752 | False | live]
; [else-branch: 2752 | True | live]
(push) ; 19
; [then-branch: 2752 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 2752 | True]
; [eval] _residue_157 <= _current_wait_level_157
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=> p1_21@987@01 (<= _residue_169@993@01 _current_wait_level_157@1049@01)))
(assert (=
  ($Snap.second $t@1051@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1051@01))
    ($Snap.second ($Snap.second $t@1051@01)))))
(assert (= ($Snap.first ($Snap.second $t@1051@01)) $Snap.unit))
; [eval] p2_26 ==> (forperm _r_38: Ref [_r_38.MustReleaseBoundedp] :: Level(_r_38) <= _current_wait_level_157_0) && ((forperm _r_38: Ref [_r_38.MustReleaseUnboundedp] :: Level(_r_38) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2753 | p2_21@988@01 | live]
; [else-branch: 2753 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2753 | p2_21@988@01]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBoundedp] :: Level(_r_38) <= _current_wait_level_157_0) && ((forperm _r_38: Ref [_r_38.MustReleaseUnboundedp] :: Level(_r_38) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBoundedp] :: Level(_r_38) <= _current_wait_level_157_0)
(push) ; 16
; [then-branch: 2754 | False | live]
; [else-branch: 2754 | True | live]
(push) ; 17
; [then-branch: 2754 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 2754 | True]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnboundedp] :: Level(_r_38) <= _current_wait_level_157_0)
(push) ; 18
; [then-branch: 2755 | False | live]
; [else-branch: 2755 | True | live]
(push) ; 19
; [then-branch: 2755 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 2755 | True]
; [eval] _residue_157_0 <= _current_wait_level_157_0
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=> p2_21@988@01 (<= _residue_169_0@994@01 _current_wait_level_157_0@1050@01)))
(assert (=
  ($Snap.second ($Snap.second $t@1051@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1051@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1051@01))))))
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2756 | p1_21@987@01 | live]
; [else-branch: 2756 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 2756 | p1_21@987@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1051@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1051@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01)))))))
(push) ; 15
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2757 | p2_21@988@01 | live]
; [else-branch: 2757 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 2757 | p2_21@988@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01)))))
  $Snap.unit))
; [eval] p1_26 ==> issubtype(typeof(self_0.StringContainer_s), str())
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2758 | p1_21@987@01 | live]
; [else-branch: 2758 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2758 | p1_21@987@01]
; [eval] issubtype(typeof(self_0.StringContainer_s), str())
; [eval] typeof(self_0.StringContainer_s)
; [eval] str()
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1051@01))))) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01))))))
  $Snap.unit))
; [eval] p2_26 ==> issubtype(typeof(self_0_0.StringContainer_sp), str())
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2759 | p2_21@988@01 | live]
; [else-branch: 2759 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2759 | p2_21@988@01]
; [eval] issubtype(typeof(self_0_0.StringContainer_sp), str())
; [eval] typeof(self_0_0.StringContainer_sp)
; [eval] str()
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  p2_21@988@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1051@01)))))) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01)))))))
  $Snap.unit))
; [eval] p1_26 ==> str___eq__(self_0.StringContainer_s, s)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2760 | p1_21@987@01 | live]
; [else-branch: 2760 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2760 | p1_21@987@01]
; [eval] str___eq__(self_0.StringContainer_s, s)
(push) ; 18
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1051@01))))) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1051@01))))) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1051@01)))) x_3@997@01))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1051@01))))) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1051@01)))) x_3@997@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  p1_21@987@01
  (and
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1051@01))))) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1051@01)))) x_3@997@01))))
(assert (=>
  p1_21@987@01
  (str___eq__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1051@01)))) x_3@997@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01))))))))
  $Snap.unit))
; [eval] p2_26 ==> str___eq__(self_0_0.StringContainer_sp, s_1)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2761 | p2_21@988@01 | live]
; [else-branch: 2761 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2761 | p2_21@988@01]
; [eval] str___eq__(self_0_0.StringContainer_sp, s_1)
(push) ; 18
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1051@01)))))) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1051@01)))))) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1051@01))))) x_3_0@998@01))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1051@01)))))) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1051@01))))) x_3_0@998@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  p2_21@988@01
  (and
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1051@01)))))) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1051@01))))) x_3_0@998@01))))
(assert (=>
  p2_21@988@01
  (str___eq__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1051@01))))) x_3_0@998@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01)))))))))
  $Snap.unit))
; [eval] p1_26 ==> true
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2762 | p1_21@987@01 | live]
; [else-branch: 2762 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2762 | p1_21@987@01]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1051@01)))))))))
  $Snap.unit))
; [eval] p2_26 ==> true
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2763 | p2_21@988@01 | live]
; [else-branch: 2763 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2763 | p2_21@988@01]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] p1_21 && !ret1_10
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2764 | !(p1_21@987@01) | live]
; [else-branch: 2764 | p1_21@987@01 | live]
(push) ; 17
; [then-branch: 2764 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 17
(push) ; 17
; [else-branch: 2764 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2765 | p1_21@987@01 | live]
; [else-branch: 2765 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 2765 | p1_21@987@01]
; [exec]
; _cwl_169 := tmp1_66
; [eval] p2_21 && !ret2_10
(push) ; 17
; [then-branch: 2766 | !(p2_21@988@01) | live]
; [else-branch: 2766 | p2_21@988@01 | live]
(push) ; 18
; [then-branch: 2766 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 18
(push) ; 18
; [else-branch: 2766 | p2_21@988@01]
; [eval] !ret2_10
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2767 | p2_21@988@01 | live]
; [else-branch: 2767 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 2767 | p2_21@988@01]
; [exec]
; _cwl_169_0 := tmp2_66
; [eval] p1_21 && !ret1_10
(push) ; 18
; [then-branch: 2768 | !(p1_21@987@01) | live]
; [else-branch: 2768 | p1_21@987@01 | live]
(push) ; 19
; [then-branch: 2768 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 19
(push) ; 19
; [else-branch: 2768 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2769 | p1_21@987@01 | live]
; [else-branch: 2769 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 2769 | p1_21@987@01]
; [exec]
; a_5 := StringContainer_res_1
; [exec]
; inhale _isDefined(3497825)
(declare-const $t@1052@01 $Snap)
(assert (= $t@1052@01 $Snap.unit))
; [eval] _isDefined(3497825)
(push) ; 19
(assert (_isDefined%precondition $Snap.unit 3497825))
(pop) ; 19
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3497825))
(assert (_isDefined $Snap.unit 3497825))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_21 && !ret2_10
(set-option :timeout 0)
(push) ; 19
; [then-branch: 2770 | !(p2_21@988@01) | live]
; [else-branch: 2770 | p2_21@988@01 | live]
(push) ; 20
; [then-branch: 2770 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 20
(push) ; 20
; [else-branch: 2770 | p2_21@988@01]
; [eval] !ret2_10
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2771 | p2_21@988@01 | live]
; [else-branch: 2771 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 2771 | p2_21@988@01]
; [exec]
; a_5_0 := StringContainer_res_1_0
; [exec]
; inhale true
(declare-const $t@1053@01 $Snap)
(assert (= $t@1053@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; tmp_12 := new()
(declare-const tmp_12@1054@01 $Ref)
(assert (not (= tmp_12@1054@01 $Ref.null)))
(assert (not (= tmp_12@1054@01 StringContainer_res_2@1019@01)))
(assert (not (= tmp_12@1054@01 tmp_12@1026@01)))
(assert (not (= tmp_12@1054@01 secret_10@995@01)))
(assert (not (= tmp_12@1054@01 _cthread_169@989@01)))
(assert (not (= tmp_12@1054@01 b_5@1011@01)))
(assert (not
  (=
    tmp_12@1054@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1051@01))))))))
(assert (not
  (=
    tmp_12@1054@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1051@01)))))))
(assert (not (= tmp_12@1054@01 _cthread_169_0@990@01)))
(assert (not (= tmp_12@1054@01 StringContainer_res_2_0@1020@01)))
(assert (not (= tmp_12@1054@01 secret_10_0@996@01)))
(assert (not (= tmp_12@1054@01 tmp_11@1032@01)))
(assert (not (= tmp_12@1054@01 b_5_0@1012@01)))
(assert (not (= tmp_12@1054@01 x_3_0@998@01)))
(assert (not (= tmp_12@1054@01 x_3@997@01)))
; [eval] p1_21 && !ret1_10
(set-option :timeout 0)
(push) ; 20
; [then-branch: 2772 | !(p1_21@987@01) | live]
; [else-branch: 2772 | p1_21@987@01 | live]
(push) ; 21
; [then-branch: 2772 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 21
(push) ; 21
; [else-branch: 2772 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2773 | p1_21@987@01 | live]
; [else-branch: 2773 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 2773 | p1_21@987@01]
; [exec]
; StringContainer_res_2 := tmp_12
; [eval] p2_21 && !ret2_10
(push) ; 21
; [then-branch: 2774 | !(p2_21@988@01) | live]
; [else-branch: 2774 | p2_21@988@01 | live]
(push) ; 22
; [then-branch: 2774 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2774 | p2_21@988@01]
; [eval] !ret2_10
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2775 | p2_21@988@01 | live]
; [else-branch: 2775 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 2775 | p2_21@988@01]
; [exec]
; StringContainer_res_2_0 := tmp_12
; [eval] p1_21 && !ret1_10
(push) ; 22
; [then-branch: 2776 | !(p1_21@987@01) | live]
; [else-branch: 2776 | p1_21@987@01 | live]
(push) ; 23
; [then-branch: 2776 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 23
(push) ; 23
; [else-branch: 2776 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2777 | p1_21@987@01 | live]
; [else-branch: 2777 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 2777 | p1_21@987@01]
; [exec]
; inhale typeof(StringContainer_res_2) == StringContainer()
(declare-const $t@1055@01 $Snap)
(assert (= $t@1055@01 $Snap.unit))
; [eval] typeof(StringContainer_res_2) == StringContainer()
; [eval] typeof(StringContainer_res_2)
; [eval] StringContainer()
(assert (= (typeof<PyType> tmp_12@1054@01) (as StringContainer<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(StringContainer_res_2, 39259342834620444863618799033642229331027), write)
(declare-const $t@1056@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [eval] p2_21 && !ret2_10
(set-option :timeout 0)
(push) ; 23
; [then-branch: 2778 | !(p2_21@988@01) | live]
; [else-branch: 2778 | p2_21@988@01 | live]
(push) ; 24
; [then-branch: 2778 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 24
(push) ; 24
; [else-branch: 2778 | p2_21@988@01]
; [eval] !ret2_10
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2779 | p2_21@988@01 | live]
; [else-branch: 2779 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 2779 | p2_21@988@01]
; [exec]
; inhale typeof(StringContainer_res_2_0) == StringContainer()
(declare-const $t@1057@01 $Snap)
(assert (= $t@1057@01 $Snap.unit))
; [eval] typeof(StringContainer_res_2_0) == StringContainer()
; [eval] typeof(StringContainer_res_2_0)
; [eval] StringContainer()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet_0(StringContainer_res_2_0, 39259342834620444863618799033642229331027), write)
(declare-const $t@1058@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [eval] p1_21 && !ret1_10 || p2_21 && !ret2_10
; [eval] p1_21 && !ret1_10
(set-option :timeout 0)
(push) ; 24
; [then-branch: 2780 | !(p1_21@987@01) | live]
; [else-branch: 2780 | p1_21@987@01 | live]
(push) ; 25
; [then-branch: 2780 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 25
(push) ; 25
; [else-branch: 2780 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 2781 | p1_21@987@01 | live]
; [else-branch: 2781 | !(p1_21@987@01) | live]
(push) ; 25
; [then-branch: 2781 | p1_21@987@01]
(pop) ; 25
(push) ; 25
; [else-branch: 2781 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
; [eval] p2_21 && !ret2_10
(push) ; 26
; [then-branch: 2782 | !(p2_21@988@01) | live]
; [else-branch: 2782 | p2_21@988@01 | live]
(push) ; 27
; [then-branch: 2782 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2782 | p2_21@988@01]
; [eval] !ret2_10
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not (or p1_21@987@01 p2_21@988@01))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2783 | p1_21@987@01 || p2_21@988@01 | live]
; [else-branch: 2783 | !(p1_21@987@01 || p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 2783 | p1_21@987@01 || p2_21@988@01]
; [exec]
; var tmp1_67: Ref
(declare-const tmp1_67@1059@01 $Ref)
; [exec]
; var tmp2_67: Ref
(declare-const tmp2_67@1060@01 $Ref)
; [exec]
; var tmp1_68: Seq[Measure$]
(declare-const tmp1_68@1061@01 Seq<Measure$>)
; [exec]
; var tmp2_68: Seq[Measure$]
(declare-const tmp2_68@1062@01 Seq<Measure$>)
; [exec]
; var tmp1_69: Perm
(declare-const tmp1_69@1063@01 $Perm)
; [exec]
; var tmp2_69: Perm
(declare-const tmp2_69@1064@01 $Perm)
; [exec]
; var tmp1_70: Ref
(declare-const tmp1_70@1065@01 $Ref)
; [exec]
; var tmp2_70: Ref
(declare-const tmp2_70@1066@01 $Ref)
; [exec]
; var tmp1_71: Ref
(declare-const tmp1_71@1067@01 $Ref)
; [exec]
; var tmp2_71: Ref
(declare-const tmp2_71@1068@01 $Ref)
; [exec]
; var tmp1_72: Perm
(declare-const tmp1_72@1069@01 $Perm)
; [exec]
; var tmp2_72: Perm
(declare-const tmp2_72@1070@01 $Perm)
; [eval] p1_21 && !ret1_10
(push) ; 25
; [then-branch: 2784 | !(p1_21@987@01) | live]
; [else-branch: 2784 | p1_21@987@01 | live]
(push) ; 26
; [then-branch: 2784 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 26
(push) ; 26
; [else-branch: 2784 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2785 | p1_21@987@01 | live]
; [else-branch: 2785 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 2785 | p1_21@987@01]
; [exec]
; tmp1_67 := _cthread_169
; [exec]
; tmp1_68 := _method_measures_169
; [exec]
; tmp1_69 := _residue_169
; [exec]
; tmp1_70 := StringContainer_res_2
; [exec]
; tmp1_71 := x_7
; [eval] p2_21 && !ret2_10
(push) ; 26
; [then-branch: 2786 | !(p2_21@988@01) | live]
; [else-branch: 2786 | p2_21@988@01 | live]
(push) ; 27
; [then-branch: 2786 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2786 | p2_21@988@01]
; [eval] !ret2_10
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2787 | p2_21@988@01 | live]
; [else-branch: 2787 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 2787 | p2_21@988@01]
; [exec]
; tmp2_67 := _cthread_169_0
; [exec]
; tmp2_68 := _method_measures_169_0
; [exec]
; tmp2_69 := _residue_169_0
; [exec]
; tmp2_70 := StringContainer_res_2_0
; [exec]
; tmp2_71 := x_7_0
; [exec]
; tmp1_72, tmp2_72 := StringContainer___init__(p1_21 && !ret1_10, p2_21 &&
;   !ret2_10, tmp1_67, tmp2_67, tmp1_68, tmp2_68, tmp1_69, tmp2_69, tmp1_70, tmp2_70,
;   tmp1_71, tmp2_71)
; [eval] p1_21 && !ret1_10
(push) ; 27
; [then-branch: 2788 | !(p1_21@987@01) | live]
; [else-branch: 2788 | p1_21@987@01 | live]
(push) ; 28
; [then-branch: 2788 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2788 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [eval] p2_21 && !ret2_10
(push) ; 27
; [then-branch: 2789 | !(p2_21@988@01) | live]
; [else-branch: 2789 | p2_21@988@01 | live]
(push) ; 28
; [then-branch: 2789 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 28
(push) ; 28
; [else-branch: 2789 | p2_21@988@01]
; [eval] !ret2_10
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [eval] p1_26 ==> _cthread_157 != null
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2790 | p1_21@987@01 | live]
; [else-branch: 2790 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2790 | p1_21@987@01]
; [eval] _cthread_157 != null
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2_26 ==> _cthread_157_0 != null
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2791 | p2_21@988@01 | live]
; [else-branch: 2791 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2791 | p2_21@988@01]
; [eval] _cthread_157_0 != null
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1_26 ==> issubtype(typeof(_cthread_157), Thread_0())
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2792 | p1_21@987@01 | live]
; [else-branch: 2792 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2792 | p1_21@987@01]
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2_26 ==> issubtype(typeof(_cthread_157_0), Thread_0())
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2793 | p2_21@988@01 | live]
; [else-branch: 2793 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2793 | p2_21@988@01]
; [eval] issubtype(typeof(_cthread_157_0), Thread_0())
; [eval] typeof(_cthread_157_0)
; [eval] Thread_0()
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1_26 ==> self_0 != null
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2794 | p1_21@987@01 | live]
; [else-branch: 2794 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2794 | p1_21@987@01]
; [eval] self_0 != null
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=> p1_21@987@01 (not (= tmp_12@1054@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=> p1_21@987@01 (not (= tmp_12@1054@01 $Ref.null))))
; [eval] p2_26 ==> self_0_0 != null
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2795 | p2_21@988@01 | live]
; [else-branch: 2795 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2795 | p2_21@988@01]
; [eval] self_0_0 != null
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=> p2_21@988@01 (not (= tmp_12@1054@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=> p2_21@988@01 (not (= tmp_12@1054@01 $Ref.null))))
(push) ; 27
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2796 | p1_21@987@01 | live]
; [else-branch: 2796 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 2796 | p1_21@987@01]
(push) ; 28
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2797 | p2_21@988@01 | live]
; [else-branch: 2797 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 2797 | p2_21@988@01]
; [eval] p1_26 ==> issubtype(typeof(self_0), StringContainer())
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2798 | p1_21@987@01 | live]
; [else-branch: 2798 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2798 | p1_21@987@01]
; [eval] issubtype(typeof(self_0), StringContainer())
; [eval] typeof(self_0)
; [eval] StringContainer()
(pop) ; 30
(pop) ; 29
; Joined path conditions
(push) ; 29
(assert (not (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> tmp_12@1054@01) (as StringContainer<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> tmp_12@1054@01) (as StringContainer<PyType>  PyType))))
; [eval] p2_26 ==> issubtype(typeof(self_0_0), StringContainer())
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2799 | p2_21@988@01 | live]
; [else-branch: 2799 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2799 | p2_21@988@01]
; [eval] issubtype(typeof(self_0_0), StringContainer())
; [eval] typeof(self_0_0)
; [eval] StringContainer()
(pop) ; 30
(pop) ; 29
; Joined path conditions
(push) ; 29
(assert (not (=>
  p2_21@988@01
  (issubtype<Bool> (typeof<PyType> tmp_12@1054@01) (as StringContainer<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_21@988@01
  (issubtype<Bool> (typeof<PyType> tmp_12@1054@01) (as StringContainer<PyType>  PyType))))
; [eval] p1_26 ==> issubtype(typeof(s), str())
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2800 | p1_21@987@01 | live]
; [else-branch: 2800 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2800 | p1_21@987@01]
; [eval] issubtype(typeof(s), str())
; [eval] typeof(s)
; [eval] str()
(pop) ; 30
(pop) ; 29
; Joined path conditions
; [eval] p2_26 ==> issubtype(typeof(s_1), str())
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2801 | p2_21@988@01 | live]
; [else-branch: 2801 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2801 | p2_21@988@01]
; [eval] issubtype(typeof(s_1), str())
; [eval] typeof(s_1)
; [eval] str()
(pop) ; 30
(pop) ; 29
; Joined path conditions
; [eval] p1_26 ==> self_0 != null
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2802 | p1_21@987@01 | live]
; [else-branch: 2802 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2802 | p1_21@987@01]
; [eval] self_0 != null
(pop) ; 30
(pop) ; 29
; Joined path conditions
; [eval] p2_26 ==> self_0_0 != null
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2803 | p2_21@988@01 | live]
; [else-branch: 2803 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2803 | p2_21@988@01]
; [eval] self_0_0 != null
(pop) ; 30
(pop) ; 29
; Joined path conditions
; [eval] p1_26 ==> perm(MustTerminate(_cthread_157)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false))))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2804 | p1_21@987@01 | live]
; [else-branch: 2804 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2804 | p1_21@987@01]
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 31
; [then-branch: 2805 | False | live]
; [else-branch: 2805 | True | live]
(push) ; 32
; [then-branch: 2805 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2805 | True]
; [eval] (forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false)
(push) ; 33
; [then-branch: 2806 | False | live]
; [else-branch: 2806 | True | live]
(push) ; 34
; [then-branch: 2806 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 2806 | True]
; [eval] (forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false)
(push) ; 35
; [then-branch: 2807 | False | live]
; [else-branch: 2807 | True | live]
(push) ; 36
; [then-branch: 2807 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 2807 | True]
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false)
(push) ; 37
; [then-branch: 2808 | False | live]
; [else-branch: 2808 | True | live]
(push) ; 38
; [then-branch: 2808 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 2808 | True]
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false)
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; [eval] p2_26 ==> perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_40: Ref [MustInvokeBounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBoundedp] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnboundedp] :: false))))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2809 | p2_21@988@01 | live]
; [else-branch: 2809 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2809 | p2_21@988@01]
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_40: Ref [MustInvokeBounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBoundedp] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none
; [eval] perm(MustTerminate_0(_cthread_157_0))
(push) ; 31
; [then-branch: 2810 | False | live]
; [else-branch: 2810 | True | live]
(push) ; 32
; [then-branch: 2810 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2810 | True]
; [eval] (forperm _r_40: Ref [MustInvokeBounded_0(_r_40)] :: false)
(push) ; 33
; [then-branch: 2811 | False | live]
; [else-branch: 2811 | True | live]
(push) ; 34
; [then-branch: 2811 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 2811 | True]
; [eval] (forperm _r_40: Ref [MustInvokeUnbounded_0(_r_40)] :: false)
(push) ; 35
; [then-branch: 2812 | False | live]
; [else-branch: 2812 | True | live]
(push) ; 36
; [then-branch: 2812 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 2812 | True]
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseBoundedp] :: false)
(push) ; 37
; [then-branch: 2813 | False | live]
; [else-branch: 2813 | True | live]
(push) ; 38
; [then-branch: 2813 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 2813 | True]
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseUnboundedp] :: false)
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
(declare-const _current_wait_level_157@1071@01 $Perm)
(declare-const _current_wait_level_157_0@1072@01 $Perm)
(declare-const $t@1073@01 $Snap)
(assert (= $t@1073@01 ($Snap.combine ($Snap.first $t@1073@01) ($Snap.second $t@1073@01))))
(assert (= ($Snap.first $t@1073@01) $Snap.unit))
; [eval] p1_26 ==> (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2814 | p1_21@987@01 | live]
; [else-branch: 2814 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2814 | p1_21@987@01]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157)
(push) ; 31
; [then-branch: 2815 | False | live]
; [else-branch: 2815 | True | live]
(push) ; 32
; [then-branch: 2815 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2815 | True]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157)
(push) ; 33
; [then-branch: 2816 | False | live]
; [else-branch: 2816 | True | live]
(push) ; 34
; [then-branch: 2816 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 2816 | True]
; [eval] _residue_157 <= _current_wait_level_157
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (=> p1_21@987@01 (<= _residue_169@993@01 _current_wait_level_157@1071@01)))
(assert (=
  ($Snap.second $t@1073@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1073@01))
    ($Snap.second ($Snap.second $t@1073@01)))))
(assert (= ($Snap.first ($Snap.second $t@1073@01)) $Snap.unit))
; [eval] p2_26 ==> (forperm _r_38: Ref [_r_38.MustReleaseBoundedp] :: Level(_r_38) <= _current_wait_level_157_0) && ((forperm _r_38: Ref [_r_38.MustReleaseUnboundedp] :: Level(_r_38) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2817 | p2_21@988@01 | live]
; [else-branch: 2817 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2817 | p2_21@988@01]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBoundedp] :: Level(_r_38) <= _current_wait_level_157_0) && ((forperm _r_38: Ref [_r_38.MustReleaseUnboundedp] :: Level(_r_38) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBoundedp] :: Level(_r_38) <= _current_wait_level_157_0)
(push) ; 31
; [then-branch: 2818 | False | live]
; [else-branch: 2818 | True | live]
(push) ; 32
; [then-branch: 2818 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 2818 | True]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnboundedp] :: Level(_r_38) <= _current_wait_level_157_0)
(push) ; 33
; [then-branch: 2819 | False | live]
; [else-branch: 2819 | True | live]
(push) ; 34
; [then-branch: 2819 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 2819 | True]
; [eval] _residue_157_0 <= _current_wait_level_157_0
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (=> p2_21@988@01 (<= _residue_169_0@994@01 _current_wait_level_157_0@1072@01)))
(assert (=
  ($Snap.second ($Snap.second $t@1073@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1073@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1073@01))))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2820 | p1_21@987@01 | live]
; [else-branch: 2820 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 2820 | p1_21@987@01]
(push) ; 30
(set-option :timeout 10)
(assert (not (= tmp_11@1032@01 tmp_12@1054@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1073@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1073@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01)))))))
(set-option :timeout 0)
(push) ; 30
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2821 | p2_21@988@01 | live]
; [else-branch: 2821 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 2821 | p2_21@988@01]
(push) ; 31
(set-option :timeout 10)
(assert (not (= tmp_11@1032@01 tmp_12@1054@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01)))))
  $Snap.unit))
; [eval] p1_26 ==> issubtype(typeof(self_0.StringContainer_s), str())
(set-option :timeout 0)
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2822 | p1_21@987@01 | live]
; [else-branch: 2822 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2822 | p1_21@987@01]
; [eval] issubtype(typeof(self_0.StringContainer_s), str())
; [eval] typeof(self_0.StringContainer_s)
; [eval] str()
(pop) ; 32
(pop) ; 31
; Joined path conditions
(assert (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1073@01))))) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01))))))
  $Snap.unit))
; [eval] p2_26 ==> issubtype(typeof(self_0_0.StringContainer_sp), str())
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2823 | p2_21@988@01 | live]
; [else-branch: 2823 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2823 | p2_21@988@01]
; [eval] issubtype(typeof(self_0_0.StringContainer_sp), str())
; [eval] typeof(self_0_0.StringContainer_sp)
; [eval] str()
(pop) ; 32
(pop) ; 31
; Joined path conditions
(assert (=>
  p2_21@988@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1073@01)))))) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01)))))))
  $Snap.unit))
; [eval] p1_26 ==> str___eq__(self_0.StringContainer_s, s)
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2824 | p1_21@987@01 | live]
; [else-branch: 2824 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2824 | p1_21@987@01]
; [eval] str___eq__(self_0.StringContainer_s, s)
(push) ; 33
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 34
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1073@01))))) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1073@01))))) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1073@01)))) x_3@997@01))
(pop) ; 33
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1073@01))))) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1073@01)))) x_3@997@01)))
(pop) ; 32
(pop) ; 31
; Joined path conditions
(assert (=>
  p1_21@987@01
  (and
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1073@01))))) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1073@01)))) x_3@997@01))))
(assert (=>
  p1_21@987@01
  (str___eq__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1073@01)))) x_3@997@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01))))))))
  $Snap.unit))
; [eval] p2_26 ==> str___eq__(self_0_0.StringContainer_sp, s_1)
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2825 | p2_21@988@01 | live]
; [else-branch: 2825 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2825 | p2_21@988@01]
; [eval] str___eq__(self_0_0.StringContainer_sp, s_1)
(push) ; 33
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 34
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1073@01)))))) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1073@01)))))) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1073@01))))) x_3_0@998@01))
(pop) ; 33
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1073@01)))))) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1073@01))))) x_3_0@998@01)))
(pop) ; 32
(pop) ; 31
; Joined path conditions
(assert (=>
  p2_21@988@01
  (and
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1073@01)))))) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1073@01))))) x_3_0@998@01))))
(assert (=>
  p2_21@988@01
  (str___eq__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1073@01))))) x_3_0@998@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01)))))))))
  $Snap.unit))
; [eval] p1_26 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2826 | p1_21@987@01 | live]
; [else-branch: 2826 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2826 | p1_21@987@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1073@01)))))))))
  $Snap.unit))
; [eval] p2_26 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2827 | p2_21@988@01 | live]
; [else-branch: 2827 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2827 | p2_21@988@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] p1_21 && !ret1_10
(set-option :timeout 0)
(push) ; 31
; [then-branch: 2828 | !(p1_21@987@01) | live]
; [else-branch: 2828 | p1_21@987@01 | live]
(push) ; 32
; [then-branch: 2828 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 32
(push) ; 32
; [else-branch: 2828 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2829 | p1_21@987@01 | live]
; [else-branch: 2829 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 2829 | p1_21@987@01]
; [exec]
; _cwl_169 := tmp1_72
; [eval] p2_21 && !ret2_10
(push) ; 32
; [then-branch: 2830 | !(p2_21@988@01) | live]
; [else-branch: 2830 | p2_21@988@01 | live]
(push) ; 33
; [then-branch: 2830 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 33
(push) ; 33
; [else-branch: 2830 | p2_21@988@01]
; [eval] !ret2_10
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2831 | p2_21@988@01 | live]
; [else-branch: 2831 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 2831 | p2_21@988@01]
; [exec]
; _cwl_169_0 := tmp2_72
; [eval] p1_21 && !ret1_10
(push) ; 33
; [then-branch: 2832 | !(p1_21@987@01) | live]
; [else-branch: 2832 | p1_21@987@01 | live]
(push) ; 34
; [then-branch: 2832 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 34
(push) ; 34
; [else-branch: 2832 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2833 | p1_21@987@01 | live]
; [else-branch: 2833 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 2833 | p1_21@987@01]
; [exec]
; b_5 := StringContainer_res_2
; [exec]
; inhale _isDefined(3497826)
(declare-const $t@1074@01 $Snap)
(assert (= $t@1074@01 $Snap.unit))
; [eval] _isDefined(3497826)
(push) ; 34
(assert (_isDefined%precondition $Snap.unit 3497826))
(pop) ; 34
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3497826))
(assert (_isDefined $Snap.unit 3497826))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_21 && !ret2_10
(set-option :timeout 0)
(push) ; 34
; [then-branch: 2834 | !(p2_21@988@01) | live]
; [else-branch: 2834 | p2_21@988@01 | live]
(push) ; 35
; [then-branch: 2834 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 35
(push) ; 35
; [else-branch: 2834 | p2_21@988@01]
; [eval] !ret2_10
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2835 | p2_21@988@01 | live]
; [else-branch: 2835 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 2835 | p2_21@988@01]
; [exec]
; b_5_0 := StringContainer_res_2_0
; [exec]
; inhale true
(declare-const $t@1075@01 $Snap)
(assert (= $t@1075@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; p1_22 := p1_21 && (!ret1_10 && bool___unbox__(secret_22))
; [eval] p1_21 && (!ret1_10 && bool___unbox__(secret_22))
(set-option :timeout 0)
(push) ; 35
; [then-branch: 2836 | !(p1_21@987@01) | live]
; [else-branch: 2836 | p1_21@987@01 | live]
(push) ; 36
; [then-branch: 2836 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 36
(push) ; 36
; [else-branch: 2836 | p1_21@987@01]
; [eval] !ret1_10
(push) ; 37
; [then-branch: 2837 | False | live]
; [else-branch: 2837 | True | live]
(push) ; 38
; [then-branch: 2837 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 2837 | True]
; [eval] bool___unbox__(secret_22)
(push) ; 39
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 40
(assert (not (issubtype<Bool> (typeof<PyType> secret_10@995@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_10@995@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_10@995@01))
(pop) ; 39
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_10@995@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_10@995@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_10@995@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_10@995@01)))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_21@987@01
  (and
    (issubtype<Bool> (typeof<PyType> secret_10@995@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_10@995@01))))
(declare-const p1_22@1076@01 Bool)
(assert (= p1_22@1076@01 (and p1_21@987@01 (bool___unbox__ $Snap.unit secret_10@995@01))))
; [exec]
; p2_22 := p2_21 && (!ret2_10 && bool___unbox__(secret_22_0))
; [eval] p2_21 && (!ret2_10 && bool___unbox__(secret_22_0))
(push) ; 35
; [then-branch: 2838 | !(p2_21@988@01) | live]
; [else-branch: 2838 | p2_21@988@01 | live]
(push) ; 36
; [then-branch: 2838 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 36
(push) ; 36
; [else-branch: 2838 | p2_21@988@01]
; [eval] !ret2_10
(push) ; 37
; [then-branch: 2839 | False | live]
; [else-branch: 2839 | True | live]
(push) ; 38
; [then-branch: 2839 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 2839 | True]
; [eval] bool___unbox__(secret_22_0)
(push) ; 39
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 40
(assert (not (issubtype<Bool> (typeof<PyType> secret_10_0@996@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_10_0@996@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_10_0@996@01))
(pop) ; 39
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_10_0@996@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_10_0@996@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_10_0@996@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_10_0@996@01)))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_21@988@01
  (and
    (issubtype<Bool> (typeof<PyType> secret_10_0@996@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_10_0@996@01))))
(declare-const p2_22@1077@01 Bool)
(assert (=
  p2_22@1077@01
  (and p2_21@988@01 (bool___unbox__ $Snap.unit secret_10_0@996@01))))
; [exec]
; p3_10 := p1_21 && (!ret1_10 && !bool___unbox__(secret_22))
; [eval] p1_21 && (!ret1_10 && !bool___unbox__(secret_22))
(push) ; 35
; [then-branch: 2840 | !(p1_21@987@01) | live]
; [else-branch: 2840 | p1_21@987@01 | live]
(push) ; 36
; [then-branch: 2840 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 36
(push) ; 36
; [else-branch: 2840 | p1_21@987@01]
; [eval] !ret1_10
(push) ; 37
; [then-branch: 2841 | False | live]
; [else-branch: 2841 | True | live]
(push) ; 38
; [then-branch: 2841 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 2841 | True]
; [eval] !bool___unbox__(secret_22)
; [eval] bool___unbox__(secret_22)
(push) ; 39
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 40
(assert (not (issubtype<Bool> (typeof<PyType> secret_10@995@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_10@995@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_10@995@01))
(pop) ; 39
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_10@995@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_10@995@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_10@995@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_10@995@01)))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(declare-const p3_10@1078@01 Bool)
(assert (=
  p3_10@1078@01
  (and p1_21@987@01 (not (bool___unbox__ $Snap.unit secret_10@995@01)))))
; [exec]
; p4_10 := p2_21 && (!ret2_10 && !bool___unbox__(secret_22_0))
; [eval] p2_21 && (!ret2_10 && !bool___unbox__(secret_22_0))
(push) ; 35
; [then-branch: 2842 | !(p2_21@988@01) | live]
; [else-branch: 2842 | p2_21@988@01 | live]
(push) ; 36
; [then-branch: 2842 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 36
(push) ; 36
; [else-branch: 2842 | p2_21@988@01]
; [eval] !ret2_10
(push) ; 37
; [then-branch: 2843 | False | live]
; [else-branch: 2843 | True | live]
(push) ; 38
; [then-branch: 2843 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 2843 | True]
; [eval] !bool___unbox__(secret_22_0)
; [eval] bool___unbox__(secret_22_0)
(push) ; 39
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 40
(assert (not (issubtype<Bool> (typeof<PyType> secret_10_0@996@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_10_0@996@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_10_0@996@01))
(pop) ; 39
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_10_0@996@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_10_0@996@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_10_0@996@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_10_0@996@01)))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(declare-const p4_10@1079@01 Bool)
(assert (=
  p4_10@1079@01
  (and p2_21@988@01 (not (bool___unbox__ $Snap.unit secret_10_0@996@01)))))
; [eval] p1_22 && !ret1_10
(push) ; 35
; [then-branch: 2844 | !(p1_22@1076@01) | live]
; [else-branch: 2844 | p1_22@1076@01 | live]
(push) ; 36
; [then-branch: 2844 | !(p1_22@1076@01)]
(assert (not p1_22@1076@01))
(pop) ; 36
(push) ; 36
; [else-branch: 2844 | p1_22@1076@01]
(assert p1_22@1076@01)
; [eval] !ret1_10
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or p1_22@1076@01 (not p1_22@1076@01)))
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_22@1076@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not p1_22@1076@01))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2845 | p1_22@1076@01 | live]
; [else-branch: 2845 | !(p1_22@1076@01) | live]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 2845 | p1_22@1076@01]
(assert p1_22@1076@01)
; [exec]
; _res := _checkDefined(a_5, 3497825).StringContainer_s
; [eval] _checkDefined(a_5, 3497825)
(push) ; 36
; [eval] _isDefined(id)
(push) ; 37
(pop) ; 37
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_11@1032@01 3497825))
(pop) ; 36
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_11@1032@01 3497825))
(push) ; 36
(set-option :timeout 10)
(assert (not (= tmp_12@1054@01 (_checkDefined $Snap.unit tmp_11@1032@01 3497825))))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (= tmp_11@1032@01 (_checkDefined $Snap.unit tmp_11@1032@01 3497825))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(declare-const _res@1080@01 $Ref)
(assert (=
  _res@1080@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1051@01))))))
; [exec]
; ret1_10 := true
; [eval] p2_22 && !ret2_10
(set-option :timeout 0)
(push) ; 36
; [then-branch: 2846 | !(p2_22@1077@01) | live]
; [else-branch: 2846 | p2_22@1077@01 | live]
(push) ; 37
; [then-branch: 2846 | !(p2_22@1077@01)]
(assert (not p2_22@1077@01))
(pop) ; 37
(push) ; 37
; [else-branch: 2846 | p2_22@1077@01]
(assert p2_22@1077@01)
; [eval] !ret2_10
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or p2_22@1077@01 (not p2_22@1077@01)))
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_22@1077@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not p2_22@1077@01))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2847 | p2_22@1077@01 | live]
; [else-branch: 2847 | !(p2_22@1077@01) | live]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 2847 | p2_22@1077@01]
(assert p2_22@1077@01)
; [exec]
; _res_11 := a_5_0.StringContainer_sp
(declare-const _res_11@1081@01 $Ref)
(assert (=
  _res_11@1081@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1051@01)))))))
; [exec]
; ret2_10 := true
; [eval] p1_21 && !ret1_10
(push) ; 37
; [then-branch: 2848 | !(p1_21@987@01) | live]
; [else-branch: 2848 | p1_21@987@01 | live]
(push) ; 38
; [then-branch: 2848 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 38
(push) ; 38
; [else-branch: 2848 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
; [then-branch: 2849 | False | dead]
; [else-branch: 2849 | True | live]
(push) ; 37
; [else-branch: 2849 | True]
(pop) ; 37
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 37
; [then-branch: 2850 | !(p1_21@987@01) | live]
; [else-branch: 2850 | p1_21@987@01 | live]
(push) ; 38
; [then-branch: 2850 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 38
(push) ; 38
; [else-branch: 2850 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2851 | True | live]
; [else-branch: 2851 | False | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2851 | True]
; [eval] p2_21 && !ret2_10
(push) ; 38
; [then-branch: 2852 | !(p2_21@988@01) | live]
; [else-branch: 2852 | p2_21@988@01 | live]
(push) ; 39
; [then-branch: 2852 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 39
(push) ; 39
; [else-branch: 2852 | p2_21@988@01]
; [eval] !ret2_10
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
; [then-branch: 2853 | False | dead]
; [else-branch: 2853 | True | live]
(push) ; 38
; [else-branch: 2853 | True]
(pop) ; 38
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 38
; [then-branch: 2854 | !(p2_21@988@01) | live]
; [else-branch: 2854 | p2_21@988@01 | live]
(push) ; 39
; [then-branch: 2854 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 39
(push) ; 39
; [else-branch: 2854 | p2_21@988@01]
; [eval] !ret2_10
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2855 | True | live]
; [else-branch: 2855 | False | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 2855 | True]
; [exec]
; assert true
; [eval] p1_21 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2856 | p1_21@987@01 | live]
; [else-branch: 2856 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2856 | p1_21@987@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_21 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2857 | p2_21@988@01 | live]
; [else-branch: 2857 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2857 | p2_21@988@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p1_21 ==> issubtype(typeof(_res), str())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2858 | p1_21@987@01 | live]
; [else-branch: 2858 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2858 | p1_21@987@01]
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(assert (not (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> _res@1080@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> _res@1080@01) (as str<PyType>  PyType))))
; [eval] p2_21 ==> issubtype(typeof(_res_11), str())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2859 | p2_21@988@01 | live]
; [else-branch: 2859 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2859 | p2_21@988@01]
; [eval] issubtype(typeof(_res_11), str())
; [eval] typeof(_res_11)
; [eval] str()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(assert (not (=>
  p2_21@988@01
  (issubtype<Bool> (typeof<PyType> _res_11@1081@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_21@988@01
  (issubtype<Bool> (typeof<PyType> _res_11@1081@01) (as str<PyType>  PyType))))
; [eval] (p1_21 && p2_21 ==> x_3 == x_3_0) ==> p1_21 && p2_21 ==> str___eq__(_res, _res_11)
; [eval] p1_21 && p2_21 ==> x_3 == x_3_0
; [eval] p1_21 && p2_21
(push) ; 39
; [then-branch: 2860 | !(p1_21@987@01) | live]
; [else-branch: 2860 | p1_21@987@01 | live]
(push) ; 40
; [then-branch: 2860 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 40
(push) ; 40
; [else-branch: 2860 | p1_21@987@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not (and p1_21@987@01 p2_21@988@01))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not (and p1_21@987@01 p2_21@988@01)))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2861 | p1_21@987@01 && p2_21@988@01 | live]
; [else-branch: 2861 | !(p1_21@987@01 && p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2861 | p1_21@987@01 && p2_21@988@01]
(assert (and p1_21@987@01 p2_21@988@01))
; [eval] x_3 == x_3_0
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (and p1_21@987@01 p2_21@988@01))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01)))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2862 | p1_21@987@01 && p2_21@988@01 ==> x_3@997@01 == x_3_0@998@01 | live]
; [else-branch: 2862 | !(p1_21@987@01 && p2_21@988@01 ==> x_3@997@01 == x_3_0@998@01) | live]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2862 | p1_21@987@01 && p2_21@988@01 ==> x_3@997@01 == x_3_0@998@01]
(assert (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01)))
; [eval] p1_21 && p2_21 ==> str___eq__(_res, _res_11)
; [eval] p1_21 && p2_21
(push) ; 41
; [then-branch: 2863 | !(p1_21@987@01) | live]
; [else-branch: 2863 | p1_21@987@01 | live]
(push) ; 42
; [then-branch: 2863 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 42
(push) ; 42
; [else-branch: 2863 | p1_21@987@01]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not (and p1_21@987@01 p2_21@988@01))))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 42
(set-option :timeout 10)
(assert (not (and p1_21@987@01 p2_21@988@01)))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2864 | p1_21@987@01 && p2_21@988@01 | live]
; [else-branch: 2864 | !(p1_21@987@01 && p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 2864 | p1_21@987@01 && p2_21@988@01]
(assert (and p1_21@987@01 p2_21@988@01))
; [eval] str___eq__(_res, _res_11)
(push) ; 43
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> _res@1080@01) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@1080@01) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit _res@1080@01 _res_11@1081@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@1080@01) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit _res@1080@01 _res_11@1081@01)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  (and p1_21@987@01 p2_21@988@01)
  (and
    p1_21@987@01
    p2_21@988@01
    (issubtype<Bool> (typeof<PyType> _res@1080@01) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit _res@1080@01 _res_11@1081@01))))
(assert (and p1_21@987@01 p2_21@988@01))
(pop) ; 40
(push) ; 40
; [else-branch: 2862 | !(p1_21@987@01 && p2_21@988@01 ==> x_3@997@01 == x_3_0@998@01)]
(assert (not (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))
  (and
    (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))
    (=>
      (and p1_21@987@01 p2_21@988@01)
      (and
        p1_21@987@01
        p2_21@988@01
        (issubtype<Bool> (typeof<PyType> _res@1080@01) (as str<PyType>  PyType))
        (str___eq__%precondition $Snap.unit _res@1080@01 _res_11@1081@01)))
    p1_21@987@01
    p2_21@988@01)))
; Joined path conditions
(assert (or
  (not (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01)))
  (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))))
(push) ; 39
(assert (not (=>
  (and
    (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))
    (and p1_21@987@01 p2_21@988@01))
  (str___eq__ $Snap.unit _res@1080@01 _res_11@1081@01))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))
    (and p1_21@987@01 p2_21@988@01))
  (str___eq__ $Snap.unit _res@1080@01 _res_11@1081@01)))
; [eval] p1_21 ==> (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2865 | p1_21@987@01 | live]
; [else-branch: 2865 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2865 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false)
(push) ; 41
; [then-branch: 2866 | False | live]
; [else-branch: 2866 | True | live]
(push) ; 42
; [then-branch: 2866 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2866 | True]
; [eval] (forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false)
(push) ; 43
; [then-branch: 2867 | False | live]
; [else-branch: 2867 | True | live]
(push) ; 44
; [then-branch: 2867 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 2867 | True]
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false)
(push) ; 45
; [then-branch: 2868 | False | live]
; [else-branch: 2868 | True | live]
(push) ; 46
; [then-branch: 2868 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 2868 | True]
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert p1_21@987@01)
; [eval] p2_21 ==> (forperm _r_33: Ref [MustInvokeBounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBoundedp] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnboundedp] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2869 | p2_21@988@01 | live]
; [else-branch: 2869 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2869 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] (forperm _r_33: Ref [MustInvokeBounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBoundedp] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_33: Ref [MustInvokeBounded_0(_r_33)] :: false)
(push) ; 41
; [then-branch: 2870 | False | live]
; [else-branch: 2870 | True | live]
(push) ; 42
; [then-branch: 2870 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2870 | True]
; [eval] (forperm _r_33: Ref [MustInvokeUnbounded_0(_r_33)] :: false)
(push) ; 43
; [then-branch: 2871 | False | live]
; [else-branch: 2871 | True | live]
(push) ; 44
; [then-branch: 2871 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 2871 | True]
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseBoundedp] :: false)
(push) ; 45
; [then-branch: 2872 | False | live]
; [else-branch: 2872 | True | live]
(push) ; 46
; [then-branch: 2872 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 2872 | True]
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseUnboundedp] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert p2_21@988@01)
(pop) ; 38
(pop) ; 37
(pop) ; 36
(push) ; 36
; [else-branch: 2847 | !(p2_22@1077@01)]
(assert (not p2_22@1077@01))
(pop) ; 36
; [eval] !(p2_22 && !ret2_10)
; [eval] p2_22 && !ret2_10
(push) ; 36
; [then-branch: 2873 | !(p2_22@1077@01) | live]
; [else-branch: 2873 | p2_22@1077@01 | live]
(push) ; 37
; [then-branch: 2873 | !(p2_22@1077@01)]
(assert (not p2_22@1077@01))
(pop) ; 37
(push) ; 37
; [else-branch: 2873 | p2_22@1077@01]
(assert p2_22@1077@01)
; [eval] !ret2_10
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(set-option :timeout 10)
(assert (not p2_22@1077@01))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_22@1077@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2874 | !(p2_22@1077@01) | live]
; [else-branch: 2874 | p2_22@1077@01 | live]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 2874 | !(p2_22@1077@01)]
(assert (not p2_22@1077@01))
; [eval] p1_21 && !ret1_10
(push) ; 37
; [then-branch: 2875 | !(p1_21@987@01) | live]
; [else-branch: 2875 | p1_21@987@01 | live]
(push) ; 38
; [then-branch: 2875 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 38
(push) ; 38
; [else-branch: 2875 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] !ret1_10
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
; [then-branch: 2876 | False | dead]
; [else-branch: 2876 | True | live]
(push) ; 37
; [else-branch: 2876 | True]
(pop) ; 37
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 37
; [then-branch: 2877 | !(p1_21@987@01) | live]
; [else-branch: 2877 | p1_21@987@01 | live]
(push) ; 38
; [then-branch: 2877 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 38
(push) ; 38
; [else-branch: 2877 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] !ret1_10
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2878 | True | live]
; [else-branch: 2878 | False | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2878 | True]
; [eval] p2_21 && !ret2_10
(push) ; 38
; [then-branch: 2879 | !(p2_21@988@01) | live]
; [else-branch: 2879 | p2_21@988@01 | live]
(push) ; 39
; [then-branch: 2879 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 39
(push) ; 39
; [else-branch: 2879 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 38
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2880 | p2_21@988@01 | live]
; [else-branch: 2880 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 2880 | p2_21@988@01]
(assert p2_21@988@01)
; [exec]
; _res_11 := b_5_0.StringContainer_sp
(declare-const _res_11@1082@01 $Ref)
(assert (=
  _res_11@1082@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1073@01)))))))
; [exec]
; ret2_10 := true
; [exec]
; assert true
; [eval] p1_21 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2881 | p1_21@987@01 | live]
; [else-branch: 2881 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2881 | p1_21@987@01]
(assert p1_21@987@01)
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert p1_21@987@01)
; [eval] p2_21 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2882 | p2_21@988@01 | live]
; [else-branch: 2882 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2882 | p2_21@988@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p1_21 ==> issubtype(typeof(_res), str())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2883 | p1_21@987@01 | live]
; [else-branch: 2883 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2883 | p1_21@987@01]
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(assert (not (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> _res@1080@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> _res@1080@01) (as str<PyType>  PyType))))
; [eval] p2_21 ==> issubtype(typeof(_res_11), str())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2884 | p2_21@988@01 | live]
; [else-branch: 2884 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2884 | p2_21@988@01]
; [eval] issubtype(typeof(_res_11), str())
; [eval] typeof(_res_11)
; [eval] str()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(assert (not (=>
  p2_21@988@01
  (issubtype<Bool> (typeof<PyType> _res_11@1082@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_21@988@01
  (issubtype<Bool> (typeof<PyType> _res_11@1082@01) (as str<PyType>  PyType))))
; [eval] (p1_21 && p2_21 ==> x_3 == x_3_0) ==> p1_21 && p2_21 ==> str___eq__(_res, _res_11)
; [eval] p1_21 && p2_21 ==> x_3 == x_3_0
; [eval] p1_21 && p2_21
(push) ; 39
; [then-branch: 2885 | !(p1_21@987@01) | live]
; [else-branch: 2885 | p1_21@987@01 | live]
(push) ; 40
; [then-branch: 2885 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 40
(push) ; 40
; [else-branch: 2885 | p1_21@987@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not (and p1_21@987@01 p2_21@988@01))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not (and p1_21@987@01 p2_21@988@01)))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2886 | p1_21@987@01 && p2_21@988@01 | live]
; [else-branch: 2886 | !(p1_21@987@01 && p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2886 | p1_21@987@01 && p2_21@988@01]
(assert (and p1_21@987@01 p2_21@988@01))
; [eval] x_3 == x_3_0
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (and p1_21@987@01 p2_21@988@01))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01)))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2887 | p1_21@987@01 && p2_21@988@01 ==> x_3@997@01 == x_3_0@998@01 | live]
; [else-branch: 2887 | !(p1_21@987@01 && p2_21@988@01 ==> x_3@997@01 == x_3_0@998@01) | live]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2887 | p1_21@987@01 && p2_21@988@01 ==> x_3@997@01 == x_3_0@998@01]
(assert (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01)))
; [eval] p1_21 && p2_21 ==> str___eq__(_res, _res_11)
; [eval] p1_21 && p2_21
(push) ; 41
; [then-branch: 2888 | !(p1_21@987@01) | live]
; [else-branch: 2888 | p1_21@987@01 | live]
(push) ; 42
; [then-branch: 2888 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 42
(push) ; 42
; [else-branch: 2888 | p1_21@987@01]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not (and p1_21@987@01 p2_21@988@01))))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 42
(set-option :timeout 10)
(assert (not (and p1_21@987@01 p2_21@988@01)))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2889 | p1_21@987@01 && p2_21@988@01 | live]
; [else-branch: 2889 | !(p1_21@987@01 && p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 2889 | p1_21@987@01 && p2_21@988@01]
(assert (and p1_21@987@01 p2_21@988@01))
; [eval] str___eq__(_res, _res_11)
(push) ; 43
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> _res@1080@01) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@1080@01) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit _res@1080@01 _res_11@1082@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@1080@01) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit _res@1080@01 _res_11@1082@01)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  (and p1_21@987@01 p2_21@988@01)
  (and
    p1_21@987@01
    p2_21@988@01
    (issubtype<Bool> (typeof<PyType> _res@1080@01) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit _res@1080@01 _res_11@1082@01))))
(assert (and p1_21@987@01 p2_21@988@01))
(pop) ; 40
(push) ; 40
; [else-branch: 2887 | !(p1_21@987@01 && p2_21@988@01 ==> x_3@997@01 == x_3_0@998@01)]
(assert (not (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))
  (and
    (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))
    (=>
      (and p1_21@987@01 p2_21@988@01)
      (and
        p1_21@987@01
        p2_21@988@01
        (issubtype<Bool> (typeof<PyType> _res@1080@01) (as str<PyType>  PyType))
        (str___eq__%precondition $Snap.unit _res@1080@01 _res_11@1082@01)))
    p1_21@987@01
    p2_21@988@01)))
; Joined path conditions
(assert (or
  (not (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01)))
  (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))))
(push) ; 39
(assert (not (=>
  (and
    (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))
    (and p1_21@987@01 p2_21@988@01))
  (str___eq__ $Snap.unit _res@1080@01 _res_11@1082@01))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))
    (and p1_21@987@01 p2_21@988@01))
  (str___eq__ $Snap.unit _res@1080@01 _res_11@1082@01)))
; [eval] p1_21 ==> (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2890 | p1_21@987@01 | live]
; [else-branch: 2890 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2890 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false)
(push) ; 41
; [then-branch: 2891 | False | live]
; [else-branch: 2891 | True | live]
(push) ; 42
; [then-branch: 2891 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2891 | True]
; [eval] (forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false)
(push) ; 43
; [then-branch: 2892 | False | live]
; [else-branch: 2892 | True | live]
(push) ; 44
; [then-branch: 2892 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 2892 | True]
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false)
(push) ; 45
; [then-branch: 2893 | False | live]
; [else-branch: 2893 | True | live]
(push) ; 46
; [then-branch: 2893 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 2893 | True]
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert p1_21@987@01)
; [eval] p2_21 ==> (forperm _r_33: Ref [MustInvokeBounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBoundedp] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnboundedp] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2894 | p2_21@988@01 | live]
; [else-branch: 2894 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2894 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] (forperm _r_33: Ref [MustInvokeBounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBoundedp] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_33: Ref [MustInvokeBounded_0(_r_33)] :: false)
(push) ; 41
; [then-branch: 2895 | False | live]
; [else-branch: 2895 | True | live]
(push) ; 42
; [then-branch: 2895 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2895 | True]
; [eval] (forperm _r_33: Ref [MustInvokeUnbounded_0(_r_33)] :: false)
(push) ; 43
; [then-branch: 2896 | False | live]
; [else-branch: 2896 | True | live]
(push) ; 44
; [then-branch: 2896 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 2896 | True]
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseBoundedp] :: false)
(push) ; 45
; [then-branch: 2897 | False | live]
; [else-branch: 2897 | True | live]
(push) ; 46
; [then-branch: 2897 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 2897 | True]
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseUnboundedp] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert p2_21@988@01)
(pop) ; 38
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 38
; [then-branch: 2898 | !(p2_21@988@01) | live]
; [else-branch: 2898 | p2_21@988@01 | live]
(push) ; 39
; [then-branch: 2898 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 39
(push) ; 39
; [else-branch: 2898 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2899 | !(p2_21@988@01) | dead]
; [else-branch: 2899 | p2_21@988@01 | live]
(set-option :timeout 0)
(push) ; 38
; [else-branch: 2899 | p2_21@988@01]
(assert p2_21@988@01)
(pop) ; 38
(pop) ; 37
(pop) ; 36
(push) ; 36
; [else-branch: 2874 | p2_22@1077@01]
(assert p2_22@1077@01)
(pop) ; 36
(pop) ; 35
(push) ; 35
; [else-branch: 2845 | !(p1_22@1076@01)]
(assert (not p1_22@1076@01))
(pop) ; 35
; [eval] !(p1_22 && !ret1_10)
; [eval] p1_22 && !ret1_10
(push) ; 35
; [then-branch: 2900 | !(p1_22@1076@01) | live]
; [else-branch: 2900 | p1_22@1076@01 | live]
(push) ; 36
; [then-branch: 2900 | !(p1_22@1076@01)]
(assert (not p1_22@1076@01))
(pop) ; 36
(push) ; 36
; [else-branch: 2900 | p1_22@1076@01]
(assert p1_22@1076@01)
; [eval] !ret1_10
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not p1_22@1076@01))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_22@1076@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2901 | !(p1_22@1076@01) | live]
; [else-branch: 2901 | p1_22@1076@01 | live]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 2901 | !(p1_22@1076@01)]
(assert (not p1_22@1076@01))
; [eval] p2_22 && !ret2_10
(push) ; 36
; [then-branch: 2902 | !(p2_22@1077@01) | live]
; [else-branch: 2902 | p2_22@1077@01 | live]
(push) ; 37
; [then-branch: 2902 | !(p2_22@1077@01)]
(assert (not p2_22@1077@01))
(pop) ; 37
(push) ; 37
; [else-branch: 2902 | p2_22@1077@01]
(assert p2_22@1077@01)
; [eval] !ret2_10
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or p2_22@1077@01 (not p2_22@1077@01)))
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_22@1077@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not p2_22@1077@01))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2903 | p2_22@1077@01 | live]
; [else-branch: 2903 | !(p2_22@1077@01) | live]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 2903 | p2_22@1077@01]
(assert p2_22@1077@01)
; [exec]
; _res_11 := a_5_0.StringContainer_sp
(declare-const _res_11@1083@01 $Ref)
(assert (=
  _res_11@1083@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1051@01)))))))
; [exec]
; ret2_10 := true
; [eval] p1_21 && !ret1_10
(push) ; 37
; [then-branch: 2904 | !(p1_21@987@01) | live]
; [else-branch: 2904 | p1_21@987@01 | live]
(push) ; 38
; [then-branch: 2904 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 38
(push) ; 38
; [else-branch: 2904 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] !ret1_10
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2905 | p1_21@987@01 | live]
; [else-branch: 2905 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2905 | p1_21@987@01]
(assert p1_21@987@01)
; [exec]
; _res := _checkDefined(b_5, 3497826).StringContainer_s
; [eval] _checkDefined(b_5, 3497826)
(push) ; 38
; [eval] _isDefined(id)
(push) ; 39
(pop) ; 39
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_12@1054@01 3497826))
(pop) ; 38
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_12@1054@01 3497826))
(push) ; 38
(set-option :timeout 10)
(assert (not (= tmp_12@1054@01 (_checkDefined $Snap.unit tmp_12@1054@01 3497826))))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(declare-const _res@1084@01 $Ref)
(assert (=
  _res@1084@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1073@01))))))
; [exec]
; ret1_10 := true
; [eval] p2_21 && !ret2_10
(set-option :timeout 0)
(push) ; 38
; [then-branch: 2906 | !(p2_21@988@01) | live]
; [else-branch: 2906 | p2_21@988@01 | live]
(push) ; 39
; [then-branch: 2906 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 39
(push) ; 39
; [else-branch: 2906 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
; [then-branch: 2907 | False | dead]
; [else-branch: 2907 | True | live]
(push) ; 38
; [else-branch: 2907 | True]
(pop) ; 38
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 38
; [then-branch: 2908 | !(p2_21@988@01) | live]
; [else-branch: 2908 | p2_21@988@01 | live]
(push) ; 39
; [then-branch: 2908 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 39
(push) ; 39
; [else-branch: 2908 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2909 | True | live]
; [else-branch: 2909 | False | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 2909 | True]
; [exec]
; assert true
; [eval] p1_21 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2910 | p1_21@987@01 | live]
; [else-branch: 2910 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2910 | p1_21@987@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_21 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2911 | p2_21@988@01 | live]
; [else-branch: 2911 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2911 | p2_21@988@01]
(assert p2_21@988@01)
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert p2_21@988@01)
; [eval] p1_21 ==> issubtype(typeof(_res), str())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2912 | p1_21@987@01 | live]
; [else-branch: 2912 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2912 | p1_21@987@01]
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(assert (not (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> _res@1084@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> _res@1084@01) (as str<PyType>  PyType))))
; [eval] p2_21 ==> issubtype(typeof(_res_11), str())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2913 | p2_21@988@01 | live]
; [else-branch: 2913 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2913 | p2_21@988@01]
; [eval] issubtype(typeof(_res_11), str())
; [eval] typeof(_res_11)
; [eval] str()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(assert (not (=>
  p2_21@988@01
  (issubtype<Bool> (typeof<PyType> _res_11@1083@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_21@988@01
  (issubtype<Bool> (typeof<PyType> _res_11@1083@01) (as str<PyType>  PyType))))
; [eval] (p1_21 && p2_21 ==> x_3 == x_3_0) ==> p1_21 && p2_21 ==> str___eq__(_res, _res_11)
; [eval] p1_21 && p2_21 ==> x_3 == x_3_0
; [eval] p1_21 && p2_21
(push) ; 39
; [then-branch: 2914 | !(p1_21@987@01) | live]
; [else-branch: 2914 | p1_21@987@01 | live]
(push) ; 40
; [then-branch: 2914 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 40
(push) ; 40
; [else-branch: 2914 | p1_21@987@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not (and p1_21@987@01 p2_21@988@01))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not (and p1_21@987@01 p2_21@988@01)))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2915 | p1_21@987@01 && p2_21@988@01 | live]
; [else-branch: 2915 | !(p1_21@987@01 && p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2915 | p1_21@987@01 && p2_21@988@01]
(assert (and p1_21@987@01 p2_21@988@01))
; [eval] x_3 == x_3_0
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (and p1_21@987@01 p2_21@988@01))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01)))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2916 | p1_21@987@01 && p2_21@988@01 ==> x_3@997@01 == x_3_0@998@01 | live]
; [else-branch: 2916 | !(p1_21@987@01 && p2_21@988@01 ==> x_3@997@01 == x_3_0@998@01) | live]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2916 | p1_21@987@01 && p2_21@988@01 ==> x_3@997@01 == x_3_0@998@01]
(assert (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01)))
; [eval] p1_21 && p2_21 ==> str___eq__(_res, _res_11)
; [eval] p1_21 && p2_21
(push) ; 41
; [then-branch: 2917 | !(p1_21@987@01) | live]
; [else-branch: 2917 | p1_21@987@01 | live]
(push) ; 42
; [then-branch: 2917 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 42
(push) ; 42
; [else-branch: 2917 | p1_21@987@01]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not (and p1_21@987@01 p2_21@988@01))))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 42
(set-option :timeout 10)
(assert (not (and p1_21@987@01 p2_21@988@01)))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2918 | p1_21@987@01 && p2_21@988@01 | live]
; [else-branch: 2918 | !(p1_21@987@01 && p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 2918 | p1_21@987@01 && p2_21@988@01]
(assert (and p1_21@987@01 p2_21@988@01))
; [eval] str___eq__(_res, _res_11)
(push) ; 43
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> _res@1084@01) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@1084@01) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit _res@1084@01 _res_11@1083@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@1084@01) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit _res@1084@01 _res_11@1083@01)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  (and p1_21@987@01 p2_21@988@01)
  (and
    p1_21@987@01
    p2_21@988@01
    (issubtype<Bool> (typeof<PyType> _res@1084@01) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit _res@1084@01 _res_11@1083@01))))
(assert (and p1_21@987@01 p2_21@988@01))
(pop) ; 40
(push) ; 40
; [else-branch: 2916 | !(p1_21@987@01 && p2_21@988@01 ==> x_3@997@01 == x_3_0@998@01)]
(assert (not (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))
  (and
    (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))
    (=>
      (and p1_21@987@01 p2_21@988@01)
      (and
        p1_21@987@01
        p2_21@988@01
        (issubtype<Bool> (typeof<PyType> _res@1084@01) (as str<PyType>  PyType))
        (str___eq__%precondition $Snap.unit _res@1084@01 _res_11@1083@01)))
    p1_21@987@01
    p2_21@988@01)))
; Joined path conditions
(assert (or
  (not (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01)))
  (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))))
(push) ; 39
(assert (not (=>
  (and
    (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))
    (and p1_21@987@01 p2_21@988@01))
  (str___eq__ $Snap.unit _res@1084@01 _res_11@1083@01))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))
    (and p1_21@987@01 p2_21@988@01))
  (str___eq__ $Snap.unit _res@1084@01 _res_11@1083@01)))
; [eval] p1_21 ==> (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2919 | p1_21@987@01 | live]
; [else-branch: 2919 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2919 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false)
(push) ; 41
; [then-branch: 2920 | False | live]
; [else-branch: 2920 | True | live]
(push) ; 42
; [then-branch: 2920 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2920 | True]
; [eval] (forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false)
(push) ; 43
; [then-branch: 2921 | False | live]
; [else-branch: 2921 | True | live]
(push) ; 44
; [then-branch: 2921 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 2921 | True]
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false)
(push) ; 45
; [then-branch: 2922 | False | live]
; [else-branch: 2922 | True | live]
(push) ; 46
; [then-branch: 2922 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 2922 | True]
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert p1_21@987@01)
; [eval] p2_21 ==> (forperm _r_33: Ref [MustInvokeBounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBoundedp] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnboundedp] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2923 | p2_21@988@01 | live]
; [else-branch: 2923 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2923 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] (forperm _r_33: Ref [MustInvokeBounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBoundedp] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_33: Ref [MustInvokeBounded_0(_r_33)] :: false)
(push) ; 41
; [then-branch: 2924 | False | live]
; [else-branch: 2924 | True | live]
(push) ; 42
; [then-branch: 2924 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2924 | True]
; [eval] (forperm _r_33: Ref [MustInvokeUnbounded_0(_r_33)] :: false)
(push) ; 43
; [then-branch: 2925 | False | live]
; [else-branch: 2925 | True | live]
(push) ; 44
; [then-branch: 2925 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 2925 | True]
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseBoundedp] :: false)
(push) ; 45
; [then-branch: 2926 | False | live]
; [else-branch: 2926 | True | live]
(push) ; 46
; [then-branch: 2926 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 2926 | True]
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseUnboundedp] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert p2_21@988@01)
(pop) ; 38
(pop) ; 37
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 37
; [then-branch: 2927 | !(p1_21@987@01) | live]
; [else-branch: 2927 | p1_21@987@01 | live]
(push) ; 38
; [then-branch: 2927 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 38
(push) ; 38
; [else-branch: 2927 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] !ret1_10
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2928 | !(p1_21@987@01) | dead]
; [else-branch: 2928 | p1_21@987@01 | live]
(set-option :timeout 0)
(push) ; 37
; [else-branch: 2928 | p1_21@987@01]
(assert p1_21@987@01)
(pop) ; 37
(pop) ; 36
(push) ; 36
; [else-branch: 2903 | !(p2_22@1077@01)]
(assert (not p2_22@1077@01))
(pop) ; 36
; [eval] !(p2_22 && !ret2_10)
; [eval] p2_22 && !ret2_10
(push) ; 36
; [then-branch: 2929 | !(p2_22@1077@01) | live]
; [else-branch: 2929 | p2_22@1077@01 | live]
(push) ; 37
; [then-branch: 2929 | !(p2_22@1077@01)]
(assert (not p2_22@1077@01))
(pop) ; 37
(push) ; 37
; [else-branch: 2929 | p2_22@1077@01]
(assert p2_22@1077@01)
; [eval] !ret2_10
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(set-option :timeout 10)
(assert (not p2_22@1077@01))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_22@1077@01)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2930 | !(p2_22@1077@01) | live]
; [else-branch: 2930 | p2_22@1077@01 | live]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 2930 | !(p2_22@1077@01)]
(assert (not p2_22@1077@01))
; [eval] p1_21 && !ret1_10
(push) ; 37
; [then-branch: 2931 | !(p1_21@987@01) | live]
; [else-branch: 2931 | p1_21@987@01 | live]
(push) ; 38
; [then-branch: 2931 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 38
(push) ; 38
; [else-branch: 2931 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] !ret1_10
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2932 | p1_21@987@01 | live]
; [else-branch: 2932 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 2932 | p1_21@987@01]
(assert p1_21@987@01)
; [exec]
; _res := _checkDefined(b_5, 3497826).StringContainer_s
; [eval] _checkDefined(b_5, 3497826)
(push) ; 38
; [eval] _isDefined(id)
(push) ; 39
(pop) ; 39
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_12@1054@01 3497826))
(pop) ; 38
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_12@1054@01 3497826))
(push) ; 38
(set-option :timeout 10)
(assert (not (= tmp_12@1054@01 (_checkDefined $Snap.unit tmp_12@1054@01 3497826))))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(declare-const _res@1085@01 $Ref)
(assert (=
  _res@1085@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1073@01))))))
; [exec]
; ret1_10 := true
; [eval] p2_21 && !ret2_10
(set-option :timeout 0)
(push) ; 38
; [then-branch: 2933 | !(p2_21@988@01) | live]
; [else-branch: 2933 | p2_21@988@01 | live]
(push) ; 39
; [then-branch: 2933 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 39
(push) ; 39
; [else-branch: 2933 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 38
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2934 | p2_21@988@01 | live]
; [else-branch: 2934 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 2934 | p2_21@988@01]
(assert p2_21@988@01)
; [exec]
; _res_11 := b_5_0.StringContainer_sp
(declare-const _res_11@1086@01 $Ref)
(assert (=
  _res_11@1086@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1073@01)))))))
; [exec]
; ret2_10 := true
; [exec]
; assert true
; [eval] p1_21 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2935 | p1_21@987@01 | live]
; [else-branch: 2935 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2935 | p1_21@987@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_21 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2936 | p2_21@988@01 | live]
; [else-branch: 2936 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2936 | p2_21@988@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p1_21 ==> issubtype(typeof(_res), str())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2937 | p1_21@987@01 | live]
; [else-branch: 2937 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2937 | p1_21@987@01]
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(assert (not (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> _res@1085@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> _res@1085@01) (as str<PyType>  PyType))))
; [eval] p2_21 ==> issubtype(typeof(_res_11), str())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2938 | p2_21@988@01 | live]
; [else-branch: 2938 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2938 | p2_21@988@01]
; [eval] issubtype(typeof(_res_11), str())
; [eval] typeof(_res_11)
; [eval] str()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(assert (not (=>
  p2_21@988@01
  (issubtype<Bool> (typeof<PyType> _res_11@1086@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_21@988@01
  (issubtype<Bool> (typeof<PyType> _res_11@1086@01) (as str<PyType>  PyType))))
; [eval] (p1_21 && p2_21 ==> x_3 == x_3_0) ==> p1_21 && p2_21 ==> str___eq__(_res, _res_11)
; [eval] p1_21 && p2_21 ==> x_3 == x_3_0
; [eval] p1_21 && p2_21
(push) ; 39
; [then-branch: 2939 | !(p1_21@987@01) | live]
; [else-branch: 2939 | p1_21@987@01 | live]
(push) ; 40
; [then-branch: 2939 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 40
(push) ; 40
; [else-branch: 2939 | p1_21@987@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not (and p1_21@987@01 p2_21@988@01))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not (and p1_21@987@01 p2_21@988@01)))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2940 | p1_21@987@01 && p2_21@988@01 | live]
; [else-branch: 2940 | !(p1_21@987@01 && p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2940 | p1_21@987@01 && p2_21@988@01]
(assert (and p1_21@987@01 p2_21@988@01))
; [eval] x_3 == x_3_0
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (and p1_21@987@01 p2_21@988@01))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01)))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2941 | p1_21@987@01 && p2_21@988@01 ==> x_3@997@01 == x_3_0@998@01 | live]
; [else-branch: 2941 | !(p1_21@987@01 && p2_21@988@01 ==> x_3@997@01 == x_3_0@998@01) | live]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2941 | p1_21@987@01 && p2_21@988@01 ==> x_3@997@01 == x_3_0@998@01]
(assert (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01)))
; [eval] p1_21 && p2_21 ==> str___eq__(_res, _res_11)
; [eval] p1_21 && p2_21
(push) ; 41
; [then-branch: 2942 | !(p1_21@987@01) | live]
; [else-branch: 2942 | p1_21@987@01 | live]
(push) ; 42
; [then-branch: 2942 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 42
(push) ; 42
; [else-branch: 2942 | p1_21@987@01]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
(push) ; 42
(set-option :timeout 10)
(assert (not (not (and p1_21@987@01 p2_21@988@01))))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 42
(set-option :timeout 10)
(assert (not (and p1_21@987@01 p2_21@988@01)))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2943 | p1_21@987@01 && p2_21@988@01 | live]
; [else-branch: 2943 | !(p1_21@987@01 && p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 2943 | p1_21@987@01 && p2_21@988@01]
(assert (and p1_21@987@01 p2_21@988@01))
; [eval] str___eq__(_res, _res_11)
(push) ; 43
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 44
(assert (not (issubtype<Bool> (typeof<PyType> _res@1085@01) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@1085@01) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit _res@1085@01 _res_11@1086@01))
(pop) ; 43
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@1085@01) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit _res@1085@01 _res_11@1086@01)))
(pop) ; 42
(pop) ; 41
; Joined path conditions
(assert (=>
  (and p1_21@987@01 p2_21@988@01)
  (and
    p1_21@987@01
    p2_21@988@01
    (issubtype<Bool> (typeof<PyType> _res@1085@01) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit _res@1085@01 _res_11@1086@01))))
(assert (and p1_21@987@01 p2_21@988@01))
(pop) ; 40
(push) ; 40
; [else-branch: 2941 | !(p1_21@987@01 && p2_21@988@01 ==> x_3@997@01 == x_3_0@998@01)]
(assert (not (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (=>
  (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))
  (and
    (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))
    (=>
      (and p1_21@987@01 p2_21@988@01)
      (and
        p1_21@987@01
        p2_21@988@01
        (issubtype<Bool> (typeof<PyType> _res@1085@01) (as str<PyType>  PyType))
        (str___eq__%precondition $Snap.unit _res@1085@01 _res_11@1086@01)))
    p1_21@987@01
    p2_21@988@01)))
; Joined path conditions
(assert (or
  (not (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01)))
  (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))))
(push) ; 39
(assert (not (=>
  (and
    (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))
    (and p1_21@987@01 p2_21@988@01))
  (str___eq__ $Snap.unit _res@1085@01 _res_11@1086@01))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (=> (and p1_21@987@01 p2_21@988@01) (= x_3@997@01 x_3_0@998@01))
    (and p1_21@987@01 p2_21@988@01))
  (str___eq__ $Snap.unit _res@1085@01 _res_11@1086@01)))
; [eval] p1_21 ==> (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2944 | p1_21@987@01 | live]
; [else-branch: 2944 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2944 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false)
(push) ; 41
; [then-branch: 2945 | False | live]
; [else-branch: 2945 | True | live]
(push) ; 42
; [then-branch: 2945 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2945 | True]
; [eval] (forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false)
(push) ; 43
; [then-branch: 2946 | False | live]
; [else-branch: 2946 | True | live]
(push) ; 44
; [then-branch: 2946 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 2946 | True]
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false)
(push) ; 45
; [then-branch: 2947 | False | live]
; [else-branch: 2947 | True | live]
(push) ; 46
; [then-branch: 2947 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 2947 | True]
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert p1_21@987@01)
; [eval] p2_21 ==> (forperm _r_33: Ref [MustInvokeBounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBoundedp] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnboundedp] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 40
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2948 | p2_21@988@01 | live]
; [else-branch: 2948 | !(p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 2948 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] (forperm _r_33: Ref [MustInvokeBounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBoundedp] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_33: Ref [MustInvokeBounded_0(_r_33)] :: false)
(push) ; 41
; [then-branch: 2949 | False | live]
; [else-branch: 2949 | True | live]
(push) ; 42
; [then-branch: 2949 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 2949 | True]
; [eval] (forperm _r_33: Ref [MustInvokeUnbounded_0(_r_33)] :: false)
(push) ; 43
; [then-branch: 2950 | False | live]
; [else-branch: 2950 | True | live]
(push) ; 44
; [then-branch: 2950 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 2950 | True]
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseBoundedp] :: false)
(push) ; 45
; [then-branch: 2951 | False | live]
; [else-branch: 2951 | True | live]
(push) ; 46
; [then-branch: 2951 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 2951 | True]
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseUnboundedp] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert p2_21@988@01)
(pop) ; 38
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 38
; [then-branch: 2952 | !(p2_21@988@01) | live]
; [else-branch: 2952 | p2_21@988@01 | live]
(push) ; 39
; [then-branch: 2952 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 39
(push) ; 39
; [else-branch: 2952 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2953 | !(p2_21@988@01) | dead]
; [else-branch: 2953 | p2_21@988@01 | live]
(set-option :timeout 0)
(push) ; 38
; [else-branch: 2953 | p2_21@988@01]
(assert p2_21@988@01)
(pop) ; 38
(pop) ; 37
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 37
; [then-branch: 2954 | !(p1_21@987@01) | live]
; [else-branch: 2954 | p1_21@987@01 | live]
(push) ; 38
; [then-branch: 2954 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 38
(push) ; 38
; [else-branch: 2954 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] !ret1_10
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2955 | !(p1_21@987@01) | dead]
; [else-branch: 2955 | p1_21@987@01 | live]
(set-option :timeout 0)
(push) ; 37
; [else-branch: 2955 | p1_21@987@01]
(assert p1_21@987@01)
(pop) ; 37
(pop) ; 36
(push) ; 36
; [else-branch: 2930 | p2_22@1077@01]
(assert p2_22@1077@01)
(pop) ; 36
(pop) ; 35
(push) ; 35
; [else-branch: 2901 | p1_22@1076@01]
(assert p1_22@1076@01)
(pop) ; 35
(pop) ; 34
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 34
; [then-branch: 2956 | !(p2_21@988@01) | live]
; [else-branch: 2956 | p2_21@988@01 | live]
(push) ; 35
; [then-branch: 2956 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 35
(push) ; 35
; [else-branch: 2956 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2957 | !(p2_21@988@01) | dead]
; [else-branch: 2957 | p2_21@988@01 | live]
(set-option :timeout 0)
(push) ; 34
; [else-branch: 2957 | p2_21@988@01]
(assert p2_21@988@01)
(pop) ; 34
(pop) ; 33
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 33
; [then-branch: 2958 | !(p1_21@987@01) | live]
; [else-branch: 2958 | p1_21@987@01 | live]
(push) ; 34
; [then-branch: 2958 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 34
(push) ; 34
; [else-branch: 2958 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] !ret1_10
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2959 | !(p1_21@987@01) | dead]
; [else-branch: 2959 | p1_21@987@01 | live]
(set-option :timeout 0)
(push) ; 33
; [else-branch: 2959 | p1_21@987@01]
(assert p1_21@987@01)
(pop) ; 33
(pop) ; 32
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 32
; [then-branch: 2960 | !(p2_21@988@01) | live]
; [else-branch: 2960 | p2_21@988@01 | live]
(push) ; 33
; [then-branch: 2960 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 33
(push) ; 33
; [else-branch: 2960 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2961 | !(p2_21@988@01) | dead]
; [else-branch: 2961 | p2_21@988@01 | live]
(set-option :timeout 0)
(push) ; 32
; [else-branch: 2961 | p2_21@988@01]
(assert p2_21@988@01)
(pop) ; 32
(pop) ; 31
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 31
; [then-branch: 2962 | !(p1_21@987@01) | live]
; [else-branch: 2962 | p1_21@987@01 | live]
(push) ; 32
; [then-branch: 2962 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 32
(push) ; 32
; [else-branch: 2962 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] !ret1_10
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2963 | !(p1_21@987@01) | dead]
; [else-branch: 2963 | p1_21@987@01 | live]
(set-option :timeout 0)
(push) ; 31
; [else-branch: 2963 | p1_21@987@01]
(assert p1_21@987@01)
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 26
; [then-branch: 2964 | !(p2_21@988@01) | live]
; [else-branch: 2964 | p2_21@988@01 | live]
(push) ; 27
; [then-branch: 2964 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2964 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2965 | !(p2_21@988@01) | dead]
; [else-branch: 2965 | p2_21@988@01 | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 2965 | p2_21@988@01]
(assert p2_21@988@01)
(pop) ; 26
(pop) ; 25
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 25
; [then-branch: 2966 | !(p1_21@987@01) | live]
; [else-branch: 2966 | p1_21@987@01 | live]
(push) ; 26
; [then-branch: 2966 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 26
(push) ; 26
; [else-branch: 2966 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] !ret1_10
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2967 | !(p1_21@987@01) | dead]
; [else-branch: 2967 | p1_21@987@01 | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 2967 | p1_21@987@01]
(assert p1_21@987@01)
(pop) ; 25
(pop) ; 24
; [eval] !(p1_21 && !ret1_10 || p2_21 && !ret2_10)
; [eval] p1_21 && !ret1_10 || p2_21 && !ret2_10
; [eval] p1_21 && !ret1_10
(push) ; 24
; [then-branch: 2968 | !(p1_21@987@01) | live]
; [else-branch: 2968 | p1_21@987@01 | live]
(push) ; 25
; [then-branch: 2968 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 25
(push) ; 25
; [else-branch: 2968 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] !ret1_10
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 2969 | p1_21@987@01 | live]
; [else-branch: 2969 | !(p1_21@987@01) | live]
(push) ; 25
; [then-branch: 2969 | p1_21@987@01]
(assert p1_21@987@01)
(pop) ; 25
(push) ; 25
; [else-branch: 2969 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
; [eval] p2_21 && !ret2_10
(push) ; 26
; [then-branch: 2970 | !(p2_21@988@01) | live]
; [else-branch: 2970 | p2_21@988@01 | live]
(push) ; 27
; [then-branch: 2970 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 27
(push) ; 27
; [else-branch: 2970 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 2971 | !(p1_21@987@01 || p2_21@988@01) | dead]
; [else-branch: 2971 | p1_21@987@01 || p2_21@988@01 | live]
(push) ; 24
; [else-branch: 2971 | p1_21@987@01 || p2_21@988@01]
(pop) ; 24
(pop) ; 23
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 23
; [then-branch: 2972 | !(p2_21@988@01) | live]
; [else-branch: 2972 | p2_21@988@01 | live]
(push) ; 24
; [then-branch: 2972 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 24
(push) ; 24
; [else-branch: 2972 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2973 | !(p2_21@988@01) | dead]
; [else-branch: 2973 | p2_21@988@01 | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 2973 | p2_21@988@01]
(assert p2_21@988@01)
(pop) ; 23
(pop) ; 22
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 22
; [then-branch: 2974 | !(p1_21@987@01) | live]
; [else-branch: 2974 | p1_21@987@01 | live]
(push) ; 23
; [then-branch: 2974 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 23
(push) ; 23
; [else-branch: 2974 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] !ret1_10
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2975 | !(p1_21@987@01) | dead]
; [else-branch: 2975 | p1_21@987@01 | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 2975 | p1_21@987@01]
(assert p1_21@987@01)
(pop) ; 22
(pop) ; 21
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 21
; [then-branch: 2976 | !(p2_21@988@01) | live]
; [else-branch: 2976 | p2_21@988@01 | live]
(push) ; 22
; [then-branch: 2976 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 22
(push) ; 22
; [else-branch: 2976 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2977 | !(p2_21@988@01) | dead]
; [else-branch: 2977 | p2_21@988@01 | live]
(set-option :timeout 0)
(push) ; 21
; [else-branch: 2977 | p2_21@988@01]
(assert p2_21@988@01)
(pop) ; 21
(pop) ; 20
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 20
; [then-branch: 2978 | !(p1_21@987@01) | live]
; [else-branch: 2978 | p1_21@987@01 | live]
(push) ; 21
; [then-branch: 2978 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 21
(push) ; 21
; [else-branch: 2978 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] !ret1_10
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2979 | !(p1_21@987@01) | dead]
; [else-branch: 2979 | p1_21@987@01 | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 2979 | p1_21@987@01]
(assert p1_21@987@01)
(pop) ; 20
(pop) ; 19
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 19
; [then-branch: 2980 | !(p2_21@988@01) | live]
; [else-branch: 2980 | p2_21@988@01 | live]
(push) ; 20
; [then-branch: 2980 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 20
(push) ; 20
; [else-branch: 2980 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2981 | !(p2_21@988@01) | dead]
; [else-branch: 2981 | p2_21@988@01 | live]
(set-option :timeout 0)
(push) ; 19
; [else-branch: 2981 | p2_21@988@01]
(assert p2_21@988@01)
(pop) ; 19
(pop) ; 18
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 18
; [then-branch: 2982 | !(p1_21@987@01) | live]
; [else-branch: 2982 | p1_21@987@01 | live]
(push) ; 19
; [then-branch: 2982 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 19
(push) ; 19
; [else-branch: 2982 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] !ret1_10
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2983 | !(p1_21@987@01) | dead]
; [else-branch: 2983 | p1_21@987@01 | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 2983 | p1_21@987@01]
(assert p1_21@987@01)
(pop) ; 18
(pop) ; 17
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 17
; [then-branch: 2984 | !(p2_21@988@01) | live]
; [else-branch: 2984 | p2_21@988@01 | live]
(push) ; 18
; [then-branch: 2984 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 18
(push) ; 18
; [else-branch: 2984 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2985 | !(p2_21@988@01) | dead]
; [else-branch: 2985 | p2_21@988@01 | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 2985 | p2_21@988@01]
(assert p2_21@988@01)
(pop) ; 17
(pop) ; 16
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 16
; [then-branch: 2986 | !(p1_21@987@01) | live]
; [else-branch: 2986 | p1_21@987@01 | live]
(push) ; 17
; [then-branch: 2986 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 17
(push) ; 17
; [else-branch: 2986 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] !ret1_10
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2987 | !(p1_21@987@01) | dead]
; [else-branch: 2987 | p1_21@987@01 | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 2987 | p1_21@987@01]
(assert p1_21@987@01)
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 11
; [then-branch: 2988 | !(p2_21@988@01) | live]
; [else-branch: 2988 | p2_21@988@01 | live]
(push) ; 12
; [then-branch: 2988 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 12
(push) ; 12
; [else-branch: 2988 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2989 | !(p2_21@988@01) | dead]
; [else-branch: 2989 | p2_21@988@01 | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 2989 | p2_21@988@01]
(assert p2_21@988@01)
(pop) ; 11
(pop) ; 10
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 10
; [then-branch: 2990 | !(p1_21@987@01) | live]
; [else-branch: 2990 | p1_21@987@01 | live]
(push) ; 11
; [then-branch: 2990 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 11
(push) ; 11
; [else-branch: 2990 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] !ret1_10
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2991 | !(p1_21@987@01) | dead]
; [else-branch: 2991 | p1_21@987@01 | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 2991 | p1_21@987@01]
(assert p1_21@987@01)
(pop) ; 10
(pop) ; 9
; [eval] !(p1_21 && !ret1_10 || p2_21 && !ret2_10)
; [eval] p1_21 && !ret1_10 || p2_21 && !ret2_10
; [eval] p1_21 && !ret1_10
(push) ; 9
; [then-branch: 2992 | !(p1_21@987@01) | live]
; [else-branch: 2992 | p1_21@987@01 | live]
(push) ; 10
; [then-branch: 2992 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 10
(push) ; 10
; [else-branch: 2992 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] !ret1_10
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 2993 | p1_21@987@01 | live]
; [else-branch: 2993 | !(p1_21@987@01) | live]
(push) ; 10
; [then-branch: 2993 | p1_21@987@01]
(assert p1_21@987@01)
(pop) ; 10
(push) ; 10
; [else-branch: 2993 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
; [eval] p2_21 && !ret2_10
(push) ; 11
; [then-branch: 2994 | !(p2_21@988@01) | live]
; [else-branch: 2994 | p2_21@988@01 | live]
(push) ; 12
; [then-branch: 2994 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 12
(push) ; 12
; [else-branch: 2994 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (or p1_21@987@01 p2_21@988@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2995 | !(p1_21@987@01 || p2_21@988@01) | dead]
; [else-branch: 2995 | p1_21@987@01 || p2_21@988@01 | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 2995 | p1_21@987@01 || p2_21@988@01]
(assert (or p1_21@987@01 p2_21@988@01))
(pop) ; 9
(pop) ; 8
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 8
; [then-branch: 2996 | !(p2_21@988@01) | live]
; [else-branch: 2996 | p2_21@988@01 | live]
(push) ; 9
; [then-branch: 2996 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 9
(push) ; 9
; [else-branch: 2996 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2997 | !(p2_21@988@01) | dead]
; [else-branch: 2997 | p2_21@988@01 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 2997 | p2_21@988@01]
(assert p2_21@988@01)
(pop) ; 8
(pop) ; 7
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 7
; [then-branch: 2998 | !(p1_21@987@01) | live]
; [else-branch: 2998 | p1_21@987@01 | live]
(push) ; 8
; [then-branch: 2998 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 8
(push) ; 8
; [else-branch: 2998 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] !ret1_10
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2999 | !(p1_21@987@01) | dead]
; [else-branch: 2999 | p1_21@987@01 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 2999 | p1_21@987@01]
(assert p1_21@987@01)
(pop) ; 7
(pop) ; 6
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 6
; [then-branch: 3000 | !(p2_21@988@01) | live]
; [else-branch: 3000 | p2_21@988@01 | live]
(push) ; 7
; [then-branch: 3000 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 7
(push) ; 7
; [else-branch: 3000 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3001 | !(p2_21@988@01) | dead]
; [else-branch: 3001 | p2_21@988@01 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 3001 | p2_21@988@01]
(assert p2_21@988@01)
(pop) ; 6
(pop) ; 5
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 5
; [then-branch: 3002 | !(p1_21@987@01) | live]
; [else-branch: 3002 | p1_21@987@01 | live]
(push) ; 6
; [then-branch: 3002 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 6
(push) ; 6
; [else-branch: 3002 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] !ret1_10
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3003 | !(p1_21@987@01) | dead]
; [else-branch: 3003 | p1_21@987@01 | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 3003 | p1_21@987@01]
(assert p1_21@987@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 2707 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 4
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 4
; [then-branch: 3004 | !(p2_21@988@01) | live]
; [else-branch: 3004 | p2_21@988@01 | live]
(push) ; 5
; [then-branch: 3004 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
(pop) ; 5
(push) ; 5
; [else-branch: 3004 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_21@988@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3005 | !(p2_21@988@01) | live]
; [else-branch: 3005 | p2_21@988@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 3005 | !(p2_21@988@01)]
(assert (not p2_21@988@01))
; [exec]
; tmp_11 := new()
(declare-const tmp_11@1087@01 $Ref)
(assert (not (= tmp_11@1087@01 $Ref.null)))
(assert (not (= tmp_11@1087@01 StringContainer_res_2@1019@01)))
(assert (not (= tmp_11@1087@01 tmp_11@1025@01)))
(assert (not (= tmp_11@1087@01 tmp_12@1026@01)))
(assert (not (= tmp_11@1087@01 secret_10@995@01)))
(assert (not (= tmp_11@1087@01 _err_11@1008@01)))
(assert (not (= tmp_11@1087@01 secret_22_0@1014@01)))
(assert (not (= tmp_11@1087@01 a_5_0@1010@01)))
(assert (not (= tmp_11@1087@01 _cthread_169@989@01)))
(assert (not (= tmp_11@1087@01 b_5@1011@01)))
(assert (not (= tmp_11@1087@01 StringContainer_res_1_0@1018@01)))
(assert (not (= tmp_11@1087@01 _cthread_169_0@990@01)))
(assert (not (= tmp_11@1087@01 a_5@1009@01)))
(assert (not (= tmp_11@1087@01 StringContainer_res_2_0@1020@01)))
(assert (not (= tmp_11@1087@01 secret_10_0@996@01)))
(assert (not (= tmp_11@1087@01 StringContainer_res_1@1017@01)))
(assert (not (= tmp_11@1087@01 b_5_0@1012@01)))
(assert (not (= tmp_11@1087@01 x_3_0@998@01)))
(assert (not (= tmp_11@1087@01 x_3@997@01)))
(assert (not (= tmp_11@1087@01 _res_11@1002@01)))
(assert (not (= tmp_11@1087@01 x_7_0@1016@01)))
; [eval] p1_21 && !ret1_10
(push) ; 5
; [then-branch: 3006 | !(p1_21@987@01) | live]
; [else-branch: 3006 | p1_21@987@01 | live]
(push) ; 6
; [then-branch: 3006 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 6
(push) ; 6
; [else-branch: 3006 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] !ret1_10
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3007 | p1_21@987@01 | live]
; [else-branch: 3007 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3007 | p1_21@987@01]
(assert p1_21@987@01)
; [exec]
; StringContainer_res_1 := tmp_11
; [eval] p2_21 && !ret2_10
(push) ; 6
; [then-branch: 3008 | !(p2_21@988@01) | live]
; [else-branch: 3008 | p2_21@988@01 | live]
(push) ; 7
; [then-branch: 3008 | !(p2_21@988@01)]
(pop) ; 7
(push) ; 7
; [else-branch: 3008 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [then-branch: 3009 | p2_21@988@01 | dead]
; [else-branch: 3009 | !(p2_21@988@01) | live]
(push) ; 6
; [else-branch: 3009 | !(p2_21@988@01)]
(pop) ; 6
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 6
; [then-branch: 3010 | !(p2_21@988@01) | live]
; [else-branch: 3010 | p2_21@988@01 | live]
(push) ; 7
; [then-branch: 3010 | !(p2_21@988@01)]
(pop) ; 7
(push) ; 7
; [else-branch: 3010 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3011 | !(p2_21@988@01) | live]
; [else-branch: 3011 | p2_21@988@01 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3011 | !(p2_21@988@01)]
; [eval] p1_21 && !ret1_10
(push) ; 7
; [then-branch: 3012 | !(p1_21@987@01) | live]
; [else-branch: 3012 | p1_21@987@01 | live]
(push) ; 8
; [then-branch: 3012 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3012 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3013 | p1_21@987@01 | live]
; [else-branch: 3013 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3013 | p1_21@987@01]
; [exec]
; inhale typeof(StringContainer_res_1) == StringContainer()
(declare-const $t@1088@01 $Snap)
(assert (= $t@1088@01 $Snap.unit))
; [eval] typeof(StringContainer_res_1) == StringContainer()
; [eval] typeof(StringContainer_res_1)
; [eval] StringContainer()
(assert (= (typeof<PyType> tmp_11@1087@01) (as StringContainer<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(StringContainer_res_1, 39259342834620444863618799033642229331027), write)
(declare-const $t@1089@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [eval] p2_21 && !ret2_10
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3014 | !(p2_21@988@01) | live]
; [else-branch: 3014 | p2_21@988@01 | live]
(push) ; 9
; [then-branch: 3014 | !(p2_21@988@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 3014 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 3015 | p2_21@988@01 | dead]
; [else-branch: 3015 | !(p2_21@988@01) | live]
(push) ; 8
; [else-branch: 3015 | !(p2_21@988@01)]
(pop) ; 8
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 8
; [then-branch: 3016 | !(p2_21@988@01) | live]
; [else-branch: 3016 | p2_21@988@01 | live]
(push) ; 9
; [then-branch: 3016 | !(p2_21@988@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 3016 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3017 | !(p2_21@988@01) | live]
; [else-branch: 3017 | p2_21@988@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3017 | !(p2_21@988@01)]
; [eval] p1_21 && !ret1_10 || p2_21 && !ret2_10
; [eval] p1_21 && !ret1_10
(push) ; 9
; [then-branch: 3018 | !(p1_21@987@01) | live]
; [else-branch: 3018 | p1_21@987@01 | live]
(push) ; 10
; [then-branch: 3018 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 10
(push) ; 10
; [else-branch: 3018 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 3019 | p1_21@987@01 | live]
; [else-branch: 3019 | !(p1_21@987@01) | live]
(push) ; 10
; [then-branch: 3019 | p1_21@987@01]
(pop) ; 10
(push) ; 10
; [else-branch: 3019 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
; [eval] p2_21 && !ret2_10
(push) ; 11
; [then-branch: 3020 | !(p2_21@988@01) | live]
; [else-branch: 3020 | p2_21@988@01 | live]
(push) ; 12
; [then-branch: 3020 | !(p2_21@988@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 3020 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not (or p1_21@987@01 p2_21@988@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (or p1_21@987@01 p2_21@988@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3021 | p1_21@987@01 || p2_21@988@01 | live]
; [else-branch: 3021 | !(p1_21@987@01 || p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3021 | p1_21@987@01 || p2_21@988@01]
(assert (or p1_21@987@01 p2_21@988@01))
; [exec]
; var tmp1_61: Ref
(declare-const tmp1_61@1090@01 $Ref)
; [exec]
; var tmp2_61: Ref
(declare-const tmp2_61@1091@01 $Ref)
; [exec]
; var tmp1_62: Seq[Measure$]
(declare-const tmp1_62@1092@01 Seq<Measure$>)
; [exec]
; var tmp2_62: Seq[Measure$]
(declare-const tmp2_62@1093@01 Seq<Measure$>)
; [exec]
; var tmp1_63: Perm
(declare-const tmp1_63@1094@01 $Perm)
; [exec]
; var tmp2_63: Perm
(declare-const tmp2_63@1095@01 $Perm)
; [exec]
; var tmp1_64: Ref
(declare-const tmp1_64@1096@01 $Ref)
; [exec]
; var tmp2_64: Ref
(declare-const tmp2_64@1097@01 $Ref)
; [exec]
; var tmp1_65: Ref
(declare-const tmp1_65@1098@01 $Ref)
; [exec]
; var tmp2_65: Ref
(declare-const tmp2_65@1099@01 $Ref)
; [exec]
; var tmp1_66: Perm
(declare-const tmp1_66@1100@01 $Perm)
; [exec]
; var tmp2_66: Perm
(declare-const tmp2_66@1101@01 $Perm)
; [eval] p1_21 && !ret1_10
(push) ; 10
; [then-branch: 3022 | !(p1_21@987@01) | live]
; [else-branch: 3022 | p1_21@987@01 | live]
(push) ; 11
; [then-branch: 3022 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 11
(push) ; 11
; [else-branch: 3022 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3023 | p1_21@987@01 | live]
; [else-branch: 3023 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3023 | p1_21@987@01]
; [exec]
; tmp1_61 := _cthread_169
; [exec]
; tmp1_62 := _method_measures_169
; [exec]
; tmp1_63 := _residue_169
; [exec]
; tmp1_64 := StringContainer_res_1
; [exec]
; tmp1_65 := x_7
; [eval] p2_21 && !ret2_10
(push) ; 11
; [then-branch: 3024 | !(p2_21@988@01) | live]
; [else-branch: 3024 | p2_21@988@01 | live]
(push) ; 12
; [then-branch: 3024 | !(p2_21@988@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 3024 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [then-branch: 3025 | p2_21@988@01 | dead]
; [else-branch: 3025 | !(p2_21@988@01) | live]
(push) ; 11
; [else-branch: 3025 | !(p2_21@988@01)]
(pop) ; 11
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 11
; [then-branch: 3026 | !(p2_21@988@01) | live]
; [else-branch: 3026 | p2_21@988@01 | live]
(push) ; 12
; [then-branch: 3026 | !(p2_21@988@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 3026 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3027 | !(p2_21@988@01) | live]
; [else-branch: 3027 | p2_21@988@01 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3027 | !(p2_21@988@01)]
; [exec]
; tmp1_66, tmp2_66 := StringContainer___init__(p1_21 && !ret1_10, p2_21 &&
;   !ret2_10, tmp1_61, tmp2_61, tmp1_62, tmp2_62, tmp1_63, tmp2_63, tmp1_64, tmp2_64,
;   tmp1_65, tmp2_65)
; [eval] p1_21 && !ret1_10
(push) ; 12
; [then-branch: 3028 | !(p1_21@987@01) | live]
; [else-branch: 3028 | p1_21@987@01 | live]
(push) ; 13
; [then-branch: 3028 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 13
(push) ; 13
; [else-branch: 3028 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [eval] p2_21 && !ret2_10
(push) ; 12
; [then-branch: 3029 | !(p2_21@988@01) | live]
; [else-branch: 3029 | p2_21@988@01 | live]
(push) ; 13
; [then-branch: 3029 | !(p2_21@988@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 3029 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [eval] p1_26 ==> _cthread_157 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3030 | p1_21@987@01 | live]
; [else-branch: 3030 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3030 | p1_21@987@01]
; [eval] _cthread_157 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p2_26 ==> _cthread_157_0 != null
(push) ; 12
; [then-branch: 3031 | p2_21@988@01 | dead]
; [else-branch: 3031 | !(p2_21@988@01) | live]
(push) ; 13
; [else-branch: 3031 | !(p2_21@988@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1_26 ==> issubtype(typeof(_cthread_157), Thread_0())
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3032 | p1_21@987@01 | live]
; [else-branch: 3032 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3032 | p1_21@987@01]
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p2_26 ==> issubtype(typeof(_cthread_157_0), Thread_0())
(push) ; 12
; [then-branch: 3033 | p2_21@988@01 | dead]
; [else-branch: 3033 | !(p2_21@988@01) | live]
(push) ; 13
; [else-branch: 3033 | !(p2_21@988@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1_26 ==> self_0 != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3034 | p1_21@987@01 | live]
; [else-branch: 3034 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3034 | p1_21@987@01]
; [eval] self_0 != null
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=> p1_21@987@01 (not (= tmp_11@1087@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=> p1_21@987@01 (not (= tmp_11@1087@01 $Ref.null))))
; [eval] p2_26 ==> self_0_0 != null
(push) ; 12
; [then-branch: 3035 | p2_21@988@01 | dead]
; [else-branch: 3035 | !(p2_21@988@01) | live]
(push) ; 13
; [else-branch: 3035 | !(p2_21@988@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3036 | p1_21@987@01 | live]
; [else-branch: 3036 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3036 | p1_21@987@01]
; [then-branch: 3037 | p2_21@988@01 | dead]
; [else-branch: 3037 | !(p2_21@988@01) | live]
(push) ; 13
; [else-branch: 3037 | !(p2_21@988@01)]
; [eval] p1_26 ==> issubtype(typeof(self_0), StringContainer())
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3038 | p1_21@987@01 | live]
; [else-branch: 3038 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 3038 | p1_21@987@01]
; [eval] issubtype(typeof(self_0), StringContainer())
; [eval] typeof(self_0)
; [eval] StringContainer()
(pop) ; 15
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> tmp_11@1087@01) (as StringContainer<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> tmp_11@1087@01) (as StringContainer<PyType>  PyType))))
; [eval] p2_26 ==> issubtype(typeof(self_0_0), StringContainer())
(push) ; 14
; [then-branch: 3039 | p2_21@988@01 | dead]
; [else-branch: 3039 | !(p2_21@988@01) | live]
(push) ; 15
; [else-branch: 3039 | !(p2_21@988@01)]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] p1_26 ==> issubtype(typeof(s), str())
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3040 | p1_21@987@01 | live]
; [else-branch: 3040 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 3040 | p1_21@987@01]
; [eval] issubtype(typeof(s), str())
; [eval] typeof(s)
; [eval] str()
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] p2_26 ==> issubtype(typeof(s_1), str())
(push) ; 14
; [then-branch: 3041 | p2_21@988@01 | dead]
; [else-branch: 3041 | !(p2_21@988@01) | live]
(push) ; 15
; [else-branch: 3041 | !(p2_21@988@01)]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] p1_26 ==> self_0 != null
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3042 | p1_21@987@01 | live]
; [else-branch: 3042 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 3042 | p1_21@987@01]
; [eval] self_0 != null
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] p2_26 ==> self_0_0 != null
(push) ; 14
; [then-branch: 3043 | p2_21@988@01 | dead]
; [else-branch: 3043 | !(p2_21@988@01) | live]
(push) ; 15
; [else-branch: 3043 | !(p2_21@988@01)]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] p1_26 ==> perm(MustTerminate(_cthread_157)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false))))
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3044 | p1_21@987@01 | live]
; [else-branch: 3044 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 3044 | p1_21@987@01]
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 16
; [then-branch: 3045 | False | live]
; [else-branch: 3045 | True | live]
(push) ; 17
; [then-branch: 3045 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 3045 | True]
; [eval] (forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false)
(push) ; 18
; [then-branch: 3046 | False | live]
; [else-branch: 3046 | True | live]
(push) ; 19
; [then-branch: 3046 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 3046 | True]
; [eval] (forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false)
(push) ; 20
; [then-branch: 3047 | False | live]
; [else-branch: 3047 | True | live]
(push) ; 21
; [then-branch: 3047 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 3047 | True]
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false)
(push) ; 22
; [then-branch: 3048 | False | live]
; [else-branch: 3048 | True | live]
(push) ; 23
; [then-branch: 3048 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 3048 | True]
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false)
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] p2_26 ==> perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_40: Ref [MustInvokeBounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBoundedp] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnboundedp] :: false))))
(push) ; 14
; [then-branch: 3049 | p2_21@988@01 | dead]
; [else-branch: 3049 | !(p2_21@988@01) | live]
(push) ; 15
; [else-branch: 3049 | !(p2_21@988@01)]
(pop) ; 15
(pop) ; 14
; Joined path conditions
(declare-const _current_wait_level_157@1102@01 $Perm)
(declare-const _current_wait_level_157_0@1103@01 $Perm)
(declare-const $t@1104@01 $Snap)
(assert (= $t@1104@01 ($Snap.combine ($Snap.first $t@1104@01) ($Snap.second $t@1104@01))))
(assert (= ($Snap.first $t@1104@01) $Snap.unit))
; [eval] p1_26 ==> (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3050 | p1_21@987@01 | live]
; [else-branch: 3050 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 3050 | p1_21@987@01]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157)
(push) ; 16
; [then-branch: 3051 | False | live]
; [else-branch: 3051 | True | live]
(push) ; 17
; [then-branch: 3051 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 3051 | True]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157)
(push) ; 18
; [then-branch: 3052 | False | live]
; [else-branch: 3052 | True | live]
(push) ; 19
; [then-branch: 3052 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 3052 | True]
; [eval] _residue_157 <= _current_wait_level_157
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=> p1_21@987@01 (<= _residue_169@993@01 _current_wait_level_157@1102@01)))
(assert (=
  ($Snap.second $t@1104@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1104@01))
    ($Snap.second ($Snap.second $t@1104@01)))))
(assert (= ($Snap.first ($Snap.second $t@1104@01)) $Snap.unit))
; [eval] p2_26 ==> (forperm _r_38: Ref [_r_38.MustReleaseBoundedp] :: Level(_r_38) <= _current_wait_level_157_0) && ((forperm _r_38: Ref [_r_38.MustReleaseUnboundedp] :: Level(_r_38) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
(push) ; 14
; [then-branch: 3053 | p2_21@988@01 | dead]
; [else-branch: 3053 | !(p2_21@988@01) | live]
(push) ; 15
; [else-branch: 3053 | !(p2_21@988@01)]
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@1104@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1104@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1104@01))))))
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3054 | p1_21@987@01 | live]
; [else-branch: 3054 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3054 | p1_21@987@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1104@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1104@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01)))))))
; [then-branch: 3055 | p2_21@988@01 | dead]
; [else-branch: 3055 | !(p2_21@988@01) | live]
(push) ; 15
; [else-branch: 3055 | !(p2_21@988@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1104@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01)))))
  $Snap.unit))
; [eval] p1_26 ==> issubtype(typeof(self_0.StringContainer_s), str())
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3056 | p1_21@987@01 | live]
; [else-branch: 3056 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 3056 | p1_21@987@01]
; [eval] issubtype(typeof(self_0.StringContainer_s), str())
; [eval] typeof(self_0.StringContainer_s)
; [eval] str()
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1104@01))))) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01))))))
  $Snap.unit))
; [eval] p2_26 ==> issubtype(typeof(self_0_0.StringContainer_sp), str())
(push) ; 16
; [then-branch: 3057 | p2_21@988@01 | dead]
; [else-branch: 3057 | !(p2_21@988@01) | live]
(push) ; 17
; [else-branch: 3057 | !(p2_21@988@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01)))))))
  $Snap.unit))
; [eval] p1_26 ==> str___eq__(self_0.StringContainer_s, s)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3058 | p1_21@987@01 | live]
; [else-branch: 3058 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 3058 | p1_21@987@01]
; [eval] str___eq__(self_0.StringContainer_s, s)
(push) ; 18
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1104@01))))) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1104@01))))) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1104@01)))) x_3@997@01))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1104@01))))) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1104@01)))) x_3@997@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  p1_21@987@01
  (and
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1104@01))))) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1104@01)))) x_3@997@01))))
(assert (=>
  p1_21@987@01
  (str___eq__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1104@01)))) x_3@997@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01))))))))
  $Snap.unit))
; [eval] p2_26 ==> str___eq__(self_0_0.StringContainer_sp, s_1)
(push) ; 16
; [then-branch: 3059 | p2_21@988@01 | dead]
; [else-branch: 3059 | !(p2_21@988@01) | live]
(push) ; 17
; [else-branch: 3059 | !(p2_21@988@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01)))))))))
  $Snap.unit))
; [eval] p1_26 ==> true
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3060 | p1_21@987@01 | live]
; [else-branch: 3060 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 3060 | p1_21@987@01]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1104@01)))))))))
  $Snap.unit))
; [eval] p2_26 ==> true
(push) ; 16
; [then-branch: 3061 | p2_21@988@01 | dead]
; [else-branch: 3061 | !(p2_21@988@01) | live]
(push) ; 17
; [else-branch: 3061 | !(p2_21@988@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] p1_21 && !ret1_10
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3062 | !(p1_21@987@01) | live]
; [else-branch: 3062 | p1_21@987@01 | live]
(push) ; 17
; [then-branch: 3062 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 17
(push) ; 17
; [else-branch: 3062 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3063 | p1_21@987@01 | live]
; [else-branch: 3063 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3063 | p1_21@987@01]
; [exec]
; _cwl_169 := tmp1_66
; [eval] p2_21 && !ret2_10
(push) ; 17
; [then-branch: 3064 | !(p2_21@988@01) | live]
; [else-branch: 3064 | p2_21@988@01 | live]
(push) ; 18
; [then-branch: 3064 | !(p2_21@988@01)]
(pop) ; 18
(push) ; 18
; [else-branch: 3064 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [then-branch: 3065 | p2_21@988@01 | dead]
; [else-branch: 3065 | !(p2_21@988@01) | live]
(push) ; 17
; [else-branch: 3065 | !(p2_21@988@01)]
(pop) ; 17
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 17
; [then-branch: 3066 | !(p2_21@988@01) | live]
; [else-branch: 3066 | p2_21@988@01 | live]
(push) ; 18
; [then-branch: 3066 | !(p2_21@988@01)]
(pop) ; 18
(push) ; 18
; [else-branch: 3066 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3067 | !(p2_21@988@01) | live]
; [else-branch: 3067 | p2_21@988@01 | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 3067 | !(p2_21@988@01)]
; [eval] p1_21 && !ret1_10
(push) ; 18
; [then-branch: 3068 | !(p1_21@987@01) | live]
; [else-branch: 3068 | p1_21@987@01 | live]
(push) ; 19
; [then-branch: 3068 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 19
(push) ; 19
; [else-branch: 3068 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3069 | p1_21@987@01 | live]
; [else-branch: 3069 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 3069 | p1_21@987@01]
; [exec]
; a_5 := StringContainer_res_1
; [exec]
; inhale _isDefined(3497825)
(declare-const $t@1105@01 $Snap)
(assert (= $t@1105@01 $Snap.unit))
; [eval] _isDefined(3497825)
(push) ; 19
(assert (_isDefined%precondition $Snap.unit 3497825))
(pop) ; 19
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3497825))
(assert (_isDefined $Snap.unit 3497825))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_21 && !ret2_10
(set-option :timeout 0)
(push) ; 19
; [then-branch: 3070 | !(p2_21@988@01) | live]
; [else-branch: 3070 | p2_21@988@01 | live]
(push) ; 20
; [then-branch: 3070 | !(p2_21@988@01)]
(pop) ; 20
(push) ; 20
; [else-branch: 3070 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 3071 | p2_21@988@01 | dead]
; [else-branch: 3071 | !(p2_21@988@01) | live]
(push) ; 19
; [else-branch: 3071 | !(p2_21@988@01)]
(pop) ; 19
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 19
; [then-branch: 3072 | !(p2_21@988@01) | live]
; [else-branch: 3072 | p2_21@988@01 | live]
(push) ; 20
; [then-branch: 3072 | !(p2_21@988@01)]
(pop) ; 20
(push) ; 20
; [else-branch: 3072 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3073 | !(p2_21@988@01) | live]
; [else-branch: 3073 | p2_21@988@01 | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 3073 | !(p2_21@988@01)]
; [exec]
; tmp_12 := new()
(declare-const tmp_12@1106@01 $Ref)
(assert (not (= tmp_12@1106@01 $Ref.null)))
(assert (not (= tmp_12@1106@01 StringContainer_res_2@1019@01)))
(assert (not (= tmp_12@1106@01 tmp_12@1026@01)))
(assert (not (= tmp_12@1106@01 secret_10@995@01)))
(assert (not (= tmp_12@1106@01 _err_11@1008@01)))
(assert (not (= tmp_12@1106@01 secret_22_0@1014@01)))
(assert (not (= tmp_12@1106@01 a_5_0@1010@01)))
(assert (not (= tmp_12@1106@01 tmp2_65@1099@01)))
(assert (not (= tmp_12@1106@01 _cthread_169@989@01)))
(assert (not (= tmp_12@1106@01 b_5@1011@01)))
(assert (not (= tmp_12@1106@01 StringContainer_res_1_0@1018@01)))
(assert (not (= tmp_12@1106@01 tmp2_64@1097@01)))
(assert (not (= tmp_12@1106@01 _cthread_169_0@990@01)))
(assert (not (= tmp_12@1106@01 StringContainer_res_2_0@1020@01)))
(assert (not (= tmp_12@1106@01 secret_10_0@996@01)))
(assert (not (= tmp_12@1106@01 tmp_11@1087@01)))
(assert (not
  (=
    tmp_12@1106@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1104@01)))))))
(assert (not (= tmp_12@1106@01 b_5_0@1012@01)))
(assert (not (= tmp_12@1106@01 tmp2_61@1091@01)))
(assert (not (= tmp_12@1106@01 x_3_0@998@01)))
(assert (not (= tmp_12@1106@01 x_3@997@01)))
(assert (not (= tmp_12@1106@01 _res_11@1002@01)))
(assert (not (= tmp_12@1106@01 x_7_0@1016@01)))
; [eval] p1_21 && !ret1_10
(push) ; 20
; [then-branch: 3074 | !(p1_21@987@01) | live]
; [else-branch: 3074 | p1_21@987@01 | live]
(push) ; 21
; [then-branch: 3074 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 21
(push) ; 21
; [else-branch: 3074 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3075 | p1_21@987@01 | live]
; [else-branch: 3075 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 3075 | p1_21@987@01]
; [exec]
; StringContainer_res_2 := tmp_12
; [eval] p2_21 && !ret2_10
(push) ; 21
; [then-branch: 3076 | !(p2_21@988@01) | live]
; [else-branch: 3076 | p2_21@988@01 | live]
(push) ; 22
; [then-branch: 3076 | !(p2_21@988@01)]
(pop) ; 22
(push) ; 22
; [else-branch: 3076 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 3077 | p2_21@988@01 | dead]
; [else-branch: 3077 | !(p2_21@988@01) | live]
(push) ; 21
; [else-branch: 3077 | !(p2_21@988@01)]
(pop) ; 21
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 21
; [then-branch: 3078 | !(p2_21@988@01) | live]
; [else-branch: 3078 | p2_21@988@01 | live]
(push) ; 22
; [then-branch: 3078 | !(p2_21@988@01)]
(pop) ; 22
(push) ; 22
; [else-branch: 3078 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3079 | !(p2_21@988@01) | live]
; [else-branch: 3079 | p2_21@988@01 | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 3079 | !(p2_21@988@01)]
; [eval] p1_21 && !ret1_10
(push) ; 22
; [then-branch: 3080 | !(p1_21@987@01) | live]
; [else-branch: 3080 | p1_21@987@01 | live]
(push) ; 23
; [then-branch: 3080 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 23
(push) ; 23
; [else-branch: 3080 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3081 | p1_21@987@01 | live]
; [else-branch: 3081 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3081 | p1_21@987@01]
; [exec]
; inhale typeof(StringContainer_res_2) == StringContainer()
(declare-const $t@1107@01 $Snap)
(assert (= $t@1107@01 $Snap.unit))
; [eval] typeof(StringContainer_res_2) == StringContainer()
; [eval] typeof(StringContainer_res_2)
; [eval] StringContainer()
(assert (= (typeof<PyType> tmp_12@1106@01) (as StringContainer<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(StringContainer_res_2, 39259342834620444863618799033642229331027), write)
(declare-const $t@1108@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [eval] p2_21 && !ret2_10
(set-option :timeout 0)
(push) ; 23
; [then-branch: 3082 | !(p2_21@988@01) | live]
; [else-branch: 3082 | p2_21@988@01 | live]
(push) ; 24
; [then-branch: 3082 | !(p2_21@988@01)]
(pop) ; 24
(push) ; 24
; [else-branch: 3082 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 3083 | p2_21@988@01 | dead]
; [else-branch: 3083 | !(p2_21@988@01) | live]
(push) ; 23
; [else-branch: 3083 | !(p2_21@988@01)]
(pop) ; 23
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 23
; [then-branch: 3084 | !(p2_21@988@01) | live]
; [else-branch: 3084 | p2_21@988@01 | live]
(push) ; 24
; [then-branch: 3084 | !(p2_21@988@01)]
(pop) ; 24
(push) ; 24
; [else-branch: 3084 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3085 | !(p2_21@988@01) | live]
; [else-branch: 3085 | p2_21@988@01 | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 3085 | !(p2_21@988@01)]
; [eval] p1_21 && !ret1_10 || p2_21 && !ret2_10
; [eval] p1_21 && !ret1_10
(push) ; 24
; [then-branch: 3086 | !(p1_21@987@01) | live]
; [else-branch: 3086 | p1_21@987@01 | live]
(push) ; 25
; [then-branch: 3086 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 25
(push) ; 25
; [else-branch: 3086 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 3087 | p1_21@987@01 | live]
; [else-branch: 3087 | !(p1_21@987@01) | live]
(push) ; 25
; [then-branch: 3087 | p1_21@987@01]
(pop) ; 25
(push) ; 25
; [else-branch: 3087 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
; [eval] p2_21 && !ret2_10
(push) ; 26
; [then-branch: 3088 | !(p2_21@988@01) | live]
; [else-branch: 3088 | p2_21@988@01 | live]
(push) ; 27
; [then-branch: 3088 | !(p2_21@988@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 3088 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (not (or p1_21@987@01 p2_21@988@01))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3089 | p1_21@987@01 || p2_21@988@01 | live]
; [else-branch: 3089 | !(p1_21@987@01 || p2_21@988@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 3089 | p1_21@987@01 || p2_21@988@01]
; [exec]
; var tmp1_67: Ref
(declare-const tmp1_67@1109@01 $Ref)
; [exec]
; var tmp2_67: Ref
(declare-const tmp2_67@1110@01 $Ref)
; [exec]
; var tmp1_68: Seq[Measure$]
(declare-const tmp1_68@1111@01 Seq<Measure$>)
; [exec]
; var tmp2_68: Seq[Measure$]
(declare-const tmp2_68@1112@01 Seq<Measure$>)
; [exec]
; var tmp1_69: Perm
(declare-const tmp1_69@1113@01 $Perm)
; [exec]
; var tmp2_69: Perm
(declare-const tmp2_69@1114@01 $Perm)
; [exec]
; var tmp1_70: Ref
(declare-const tmp1_70@1115@01 $Ref)
; [exec]
; var tmp2_70: Ref
(declare-const tmp2_70@1116@01 $Ref)
; [exec]
; var tmp1_71: Ref
(declare-const tmp1_71@1117@01 $Ref)
; [exec]
; var tmp2_71: Ref
(declare-const tmp2_71@1118@01 $Ref)
; [exec]
; var tmp1_72: Perm
(declare-const tmp1_72@1119@01 $Perm)
; [exec]
; var tmp2_72: Perm
(declare-const tmp2_72@1120@01 $Perm)
; [eval] p1_21 && !ret1_10
(push) ; 25
; [then-branch: 3090 | !(p1_21@987@01) | live]
; [else-branch: 3090 | p1_21@987@01 | live]
(push) ; 26
; [then-branch: 3090 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3090 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3091 | p1_21@987@01 | live]
; [else-branch: 3091 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 3091 | p1_21@987@01]
; [exec]
; tmp1_67 := _cthread_169
; [exec]
; tmp1_68 := _method_measures_169
; [exec]
; tmp1_69 := _residue_169
; [exec]
; tmp1_70 := StringContainer_res_2
; [exec]
; tmp1_71 := x_7
; [eval] p2_21 && !ret2_10
(push) ; 26
; [then-branch: 3092 | !(p2_21@988@01) | live]
; [else-branch: 3092 | p2_21@988@01 | live]
(push) ; 27
; [then-branch: 3092 | !(p2_21@988@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 3092 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
; [then-branch: 3093 | p2_21@988@01 | dead]
; [else-branch: 3093 | !(p2_21@988@01) | live]
(push) ; 26
; [else-branch: 3093 | !(p2_21@988@01)]
(pop) ; 26
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 26
; [then-branch: 3094 | !(p2_21@988@01) | live]
; [else-branch: 3094 | p2_21@988@01 | live]
(push) ; 27
; [then-branch: 3094 | !(p2_21@988@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 3094 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(push) ; 26
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3095 | !(p2_21@988@01) | live]
; [else-branch: 3095 | p2_21@988@01 | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 3095 | !(p2_21@988@01)]
; [exec]
; tmp1_72, tmp2_72 := StringContainer___init__(p1_21 && !ret1_10, p2_21 &&
;   !ret2_10, tmp1_67, tmp2_67, tmp1_68, tmp2_68, tmp1_69, tmp2_69, tmp1_70, tmp2_70,
;   tmp1_71, tmp2_71)
; [eval] p1_21 && !ret1_10
(push) ; 27
; [then-branch: 3096 | !(p1_21@987@01) | live]
; [else-branch: 3096 | p1_21@987@01 | live]
(push) ; 28
; [then-branch: 3096 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 28
(push) ; 28
; [else-branch: 3096 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [eval] p2_21 && !ret2_10
(push) ; 27
; [then-branch: 3097 | !(p2_21@988@01) | live]
; [else-branch: 3097 | p2_21@988@01 | live]
(push) ; 28
; [then-branch: 3097 | !(p2_21@988@01)]
(pop) ; 28
(push) ; 28
; [else-branch: 3097 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
; [eval] p1_26 ==> _cthread_157 != null
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3098 | p1_21@987@01 | live]
; [else-branch: 3098 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 3098 | p1_21@987@01]
; [eval] _cthread_157 != null
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2_26 ==> _cthread_157_0 != null
(push) ; 27
; [then-branch: 3099 | p2_21@988@01 | dead]
; [else-branch: 3099 | !(p2_21@988@01) | live]
(push) ; 28
; [else-branch: 3099 | !(p2_21@988@01)]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1_26 ==> issubtype(typeof(_cthread_157), Thread_0())
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3100 | p1_21@987@01 | live]
; [else-branch: 3100 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 3100 | p1_21@987@01]
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p2_26 ==> issubtype(typeof(_cthread_157_0), Thread_0())
(push) ; 27
; [then-branch: 3101 | p2_21@988@01 | dead]
; [else-branch: 3101 | !(p2_21@988@01) | live]
(push) ; 28
; [else-branch: 3101 | !(p2_21@988@01)]
(pop) ; 28
(pop) ; 27
; Joined path conditions
; [eval] p1_26 ==> self_0 != null
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3102 | p1_21@987@01 | live]
; [else-branch: 3102 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 3102 | p1_21@987@01]
; [eval] self_0 != null
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=> p1_21@987@01 (not (= tmp_12@1106@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=> p1_21@987@01 (not (= tmp_12@1106@01 $Ref.null))))
; [eval] p2_26 ==> self_0_0 != null
(push) ; 27
; [then-branch: 3103 | p2_21@988@01 | dead]
; [else-branch: 3103 | !(p2_21@988@01) | live]
(push) ; 28
; [else-branch: 3103 | !(p2_21@988@01)]
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3104 | p1_21@987@01 | live]
; [else-branch: 3104 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 3104 | p1_21@987@01]
; [then-branch: 3105 | p2_21@988@01 | dead]
; [else-branch: 3105 | !(p2_21@988@01) | live]
(push) ; 28
; [else-branch: 3105 | !(p2_21@988@01)]
; [eval] p1_26 ==> issubtype(typeof(self_0), StringContainer())
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3106 | p1_21@987@01 | live]
; [else-branch: 3106 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 3106 | p1_21@987@01]
; [eval] issubtype(typeof(self_0), StringContainer())
; [eval] typeof(self_0)
; [eval] StringContainer()
(pop) ; 30
(pop) ; 29
; Joined path conditions
(push) ; 29
(assert (not (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> tmp_12@1106@01) (as StringContainer<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> tmp_12@1106@01) (as StringContainer<PyType>  PyType))))
; [eval] p2_26 ==> issubtype(typeof(self_0_0), StringContainer())
(push) ; 29
; [then-branch: 3107 | p2_21@988@01 | dead]
; [else-branch: 3107 | !(p2_21@988@01) | live]
(push) ; 30
; [else-branch: 3107 | !(p2_21@988@01)]
(pop) ; 30
(pop) ; 29
; Joined path conditions
; [eval] p1_26 ==> issubtype(typeof(s), str())
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3108 | p1_21@987@01 | live]
; [else-branch: 3108 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 3108 | p1_21@987@01]
; [eval] issubtype(typeof(s), str())
; [eval] typeof(s)
; [eval] str()
(pop) ; 30
(pop) ; 29
; Joined path conditions
; [eval] p2_26 ==> issubtype(typeof(s_1), str())
(push) ; 29
; [then-branch: 3109 | p2_21@988@01 | dead]
; [else-branch: 3109 | !(p2_21@988@01) | live]
(push) ; 30
; [else-branch: 3109 | !(p2_21@988@01)]
(pop) ; 30
(pop) ; 29
; Joined path conditions
; [eval] p1_26 ==> self_0 != null
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3110 | p1_21@987@01 | live]
; [else-branch: 3110 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 3110 | p1_21@987@01]
; [eval] self_0 != null
(pop) ; 30
(pop) ; 29
; Joined path conditions
; [eval] p2_26 ==> self_0_0 != null
(push) ; 29
; [then-branch: 3111 | p2_21@988@01 | dead]
; [else-branch: 3111 | !(p2_21@988@01) | live]
(push) ; 30
; [else-branch: 3111 | !(p2_21@988@01)]
(pop) ; 30
(pop) ; 29
; Joined path conditions
; [eval] p1_26 ==> perm(MustTerminate(_cthread_157)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false))))
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3112 | p1_21@987@01 | live]
; [else-branch: 3112 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 3112 | p1_21@987@01]
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 31
; [then-branch: 3113 | False | live]
; [else-branch: 3113 | True | live]
(push) ; 32
; [then-branch: 3113 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 3113 | True]
; [eval] (forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false)
(push) ; 33
; [then-branch: 3114 | False | live]
; [else-branch: 3114 | True | live]
(push) ; 34
; [then-branch: 3114 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 3114 | True]
; [eval] (forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false)
(push) ; 35
; [then-branch: 3115 | False | live]
; [else-branch: 3115 | True | live]
(push) ; 36
; [then-branch: 3115 | False]
(assert false)
(pop) ; 36
(push) ; 36
; [else-branch: 3115 | True]
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false)
(push) ; 37
; [then-branch: 3116 | False | live]
; [else-branch: 3116 | True | live]
(push) ; 38
; [then-branch: 3116 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 3116 | True]
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false)
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
; [eval] p2_26 ==> perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_40: Ref [MustInvokeBounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBoundedp] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnboundedp] :: false))))
(push) ; 29
; [then-branch: 3117 | p2_21@988@01 | dead]
; [else-branch: 3117 | !(p2_21@988@01) | live]
(push) ; 30
; [else-branch: 3117 | !(p2_21@988@01)]
(pop) ; 30
(pop) ; 29
; Joined path conditions
(declare-const _current_wait_level_157@1121@01 $Perm)
(declare-const _current_wait_level_157_0@1122@01 $Perm)
(declare-const $t@1123@01 $Snap)
(assert (= $t@1123@01 ($Snap.combine ($Snap.first $t@1123@01) ($Snap.second $t@1123@01))))
(assert (= ($Snap.first $t@1123@01) $Snap.unit))
; [eval] p1_26 ==> (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
(push) ; 29
(push) ; 30
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3118 | p1_21@987@01 | live]
; [else-branch: 3118 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 3118 | p1_21@987@01]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157)
(push) ; 31
; [then-branch: 3119 | False | live]
; [else-branch: 3119 | True | live]
(push) ; 32
; [then-branch: 3119 | False]
(assert false)
(pop) ; 32
(push) ; 32
; [else-branch: 3119 | True]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157)
(push) ; 33
; [then-branch: 3120 | False | live]
; [else-branch: 3120 | True | live]
(push) ; 34
; [then-branch: 3120 | False]
(assert false)
(pop) ; 34
(push) ; 34
; [else-branch: 3120 | True]
; [eval] _residue_157 <= _current_wait_level_157
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (=> p1_21@987@01 (<= _residue_169@993@01 _current_wait_level_157@1121@01)))
(assert (=
  ($Snap.second $t@1123@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1123@01))
    ($Snap.second ($Snap.second $t@1123@01)))))
(assert (= ($Snap.first ($Snap.second $t@1123@01)) $Snap.unit))
; [eval] p2_26 ==> (forperm _r_38: Ref [_r_38.MustReleaseBoundedp] :: Level(_r_38) <= _current_wait_level_157_0) && ((forperm _r_38: Ref [_r_38.MustReleaseUnboundedp] :: Level(_r_38) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
(push) ; 29
; [then-branch: 3121 | p2_21@988@01 | dead]
; [else-branch: 3121 | !(p2_21@988@01) | live]
(push) ; 30
; [else-branch: 3121 | !(p2_21@988@01)]
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@1123@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1123@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1123@01))))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3122 | p1_21@987@01 | live]
; [else-branch: 3122 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 3122 | p1_21@987@01]
(push) ; 30
(set-option :timeout 10)
(assert (not (= tmp_11@1087@01 tmp_12@1106@01)))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1123@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1123@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01)))))))
; [then-branch: 3123 | p2_21@988@01 | dead]
; [else-branch: 3123 | !(p2_21@988@01) | live]
(set-option :timeout 0)
(push) ; 30
; [else-branch: 3123 | !(p2_21@988@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1123@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01)))))
  $Snap.unit))
; [eval] p1_26 ==> issubtype(typeof(self_0.StringContainer_s), str())
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3124 | p1_21@987@01 | live]
; [else-branch: 3124 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 3124 | p1_21@987@01]
; [eval] issubtype(typeof(self_0.StringContainer_s), str())
; [eval] typeof(self_0.StringContainer_s)
; [eval] str()
(pop) ; 32
(pop) ; 31
; Joined path conditions
(assert (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1123@01))))) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01))))))
  $Snap.unit))
; [eval] p2_26 ==> issubtype(typeof(self_0_0.StringContainer_sp), str())
(push) ; 31
; [then-branch: 3125 | p2_21@988@01 | dead]
; [else-branch: 3125 | !(p2_21@988@01) | live]
(push) ; 32
; [else-branch: 3125 | !(p2_21@988@01)]
(pop) ; 32
(pop) ; 31
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01)))))))
  $Snap.unit))
; [eval] p1_26 ==> str___eq__(self_0.StringContainer_s, s)
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3126 | p1_21@987@01 | live]
; [else-branch: 3126 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 3126 | p1_21@987@01]
; [eval] str___eq__(self_0.StringContainer_s, s)
(push) ; 33
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 34
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1123@01))))) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1123@01))))) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1123@01)))) x_3@997@01))
(pop) ; 33
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1123@01))))) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1123@01)))) x_3@997@01)))
(pop) ; 32
(pop) ; 31
; Joined path conditions
(assert (=>
  p1_21@987@01
  (and
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1123@01))))) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1123@01)))) x_3@997@01))))
(assert (=>
  p1_21@987@01
  (str___eq__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1123@01)))) x_3@997@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01))))))))
  $Snap.unit))
; [eval] p2_26 ==> str___eq__(self_0_0.StringContainer_sp, s_1)
(push) ; 31
; [then-branch: 3127 | p2_21@988@01 | dead]
; [else-branch: 3127 | !(p2_21@988@01) | live]
(push) ; 32
; [else-branch: 3127 | !(p2_21@988@01)]
(pop) ; 32
(pop) ; 31
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01)))))))))
  $Snap.unit))
; [eval] p1_26 ==> true
(push) ; 31
(push) ; 32
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3128 | p1_21@987@01 | live]
; [else-branch: 3128 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 3128 | p1_21@987@01]
(pop) ; 32
(pop) ; 31
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1123@01)))))))))
  $Snap.unit))
; [eval] p2_26 ==> true
(push) ; 31
; [then-branch: 3129 | p2_21@988@01 | dead]
; [else-branch: 3129 | !(p2_21@988@01) | live]
(push) ; 32
; [else-branch: 3129 | !(p2_21@988@01)]
(pop) ; 32
(pop) ; 31
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] p1_21 && !ret1_10
(set-option :timeout 0)
(push) ; 31
; [then-branch: 3130 | !(p1_21@987@01) | live]
; [else-branch: 3130 | p1_21@987@01 | live]
(push) ; 32
; [then-branch: 3130 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 32
(push) ; 32
; [else-branch: 3130 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(push) ; 31
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3131 | p1_21@987@01 | live]
; [else-branch: 3131 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 3131 | p1_21@987@01]
; [exec]
; _cwl_169 := tmp1_72
; [eval] p2_21 && !ret2_10
(push) ; 32
; [then-branch: 3132 | !(p2_21@988@01) | live]
; [else-branch: 3132 | p2_21@988@01 | live]
(push) ; 33
; [then-branch: 3132 | !(p2_21@988@01)]
(pop) ; 33
(push) ; 33
; [else-branch: 3132 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
; [then-branch: 3133 | p2_21@988@01 | dead]
; [else-branch: 3133 | !(p2_21@988@01) | live]
(push) ; 32
; [else-branch: 3133 | !(p2_21@988@01)]
(pop) ; 32
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 32
; [then-branch: 3134 | !(p2_21@988@01) | live]
; [else-branch: 3134 | p2_21@988@01 | live]
(push) ; 33
; [then-branch: 3134 | !(p2_21@988@01)]
(pop) ; 33
(push) ; 33
; [else-branch: 3134 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3135 | !(p2_21@988@01) | live]
; [else-branch: 3135 | p2_21@988@01 | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 3135 | !(p2_21@988@01)]
; [eval] p1_21 && !ret1_10
(push) ; 33
; [then-branch: 3136 | !(p1_21@987@01) | live]
; [else-branch: 3136 | p1_21@987@01 | live]
(push) ; 34
; [then-branch: 3136 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 34
(push) ; 34
; [else-branch: 3136 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3137 | p1_21@987@01 | live]
; [else-branch: 3137 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 3137 | p1_21@987@01]
; [exec]
; b_5 := StringContainer_res_2
; [exec]
; inhale _isDefined(3497826)
(declare-const $t@1124@01 $Snap)
(assert (= $t@1124@01 $Snap.unit))
; [eval] _isDefined(3497826)
(push) ; 34
(assert (_isDefined%precondition $Snap.unit 3497826))
(pop) ; 34
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3497826))
(assert (_isDefined $Snap.unit 3497826))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p2_21 && !ret2_10
(set-option :timeout 0)
(push) ; 34
; [then-branch: 3138 | !(p2_21@988@01) | live]
; [else-branch: 3138 | p2_21@988@01 | live]
(push) ; 35
; [then-branch: 3138 | !(p2_21@988@01)]
(pop) ; 35
(push) ; 35
; [else-branch: 3138 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
; [then-branch: 3139 | p2_21@988@01 | dead]
; [else-branch: 3139 | !(p2_21@988@01) | live]
(push) ; 34
; [else-branch: 3139 | !(p2_21@988@01)]
(pop) ; 34
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 34
; [then-branch: 3140 | !(p2_21@988@01) | live]
; [else-branch: 3140 | p2_21@988@01 | live]
(push) ; 35
; [then-branch: 3140 | !(p2_21@988@01)]
(pop) ; 35
(push) ; 35
; [else-branch: 3140 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3141 | !(p2_21@988@01) | live]
; [else-branch: 3141 | p2_21@988@01 | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 3141 | !(p2_21@988@01)]
; [exec]
; p1_22 := p1_21 && (!ret1_10 && bool___unbox__(secret_22))
; [eval] p1_21 && (!ret1_10 && bool___unbox__(secret_22))
(push) ; 35
; [then-branch: 3142 | !(p1_21@987@01) | live]
; [else-branch: 3142 | p1_21@987@01 | live]
(push) ; 36
; [then-branch: 3142 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 36
(push) ; 36
; [else-branch: 3142 | p1_21@987@01]
; [eval] !ret1_10
(push) ; 37
; [then-branch: 3143 | False | live]
; [else-branch: 3143 | True | live]
(push) ; 38
; [then-branch: 3143 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 3143 | True]
; [eval] bool___unbox__(secret_22)
(push) ; 39
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 40
(assert (not (issubtype<Bool> (typeof<PyType> secret_10@995@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_10@995@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_10@995@01))
(pop) ; 39
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_10@995@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_10@995@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_10@995@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_10@995@01)))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_21@987@01
  (and
    (issubtype<Bool> (typeof<PyType> secret_10@995@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_10@995@01))))
(declare-const p1_22@1125@01 Bool)
(assert (= p1_22@1125@01 (and p1_21@987@01 (bool___unbox__ $Snap.unit secret_10@995@01))))
; [exec]
; p2_22 := p2_21 && (!ret2_10 && bool___unbox__(secret_22_0))
; [eval] p2_21 && (!ret2_10 && bool___unbox__(secret_22_0))
(push) ; 35
; [then-branch: 3144 | !(p2_21@988@01) | live]
; [else-branch: 3144 | p2_21@988@01 | live]
(push) ; 36
; [then-branch: 3144 | !(p2_21@988@01)]
(pop) ; 36
(push) ; 36
; [else-branch: 3144 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(push) ; 37
; [then-branch: 3145 | False | live]
; [else-branch: 3145 | True | live]
(push) ; 38
; [then-branch: 3145 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 3145 | True]
; [eval] bool___unbox__(secret_22_0)
(push) ; 39
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 40
(assert (not (issubtype<Bool> (typeof<PyType> secret_22_0@1014@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_22_0@1014@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_22_0@1014@01))
(pop) ; 39
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_22_0@1014@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_22_0@1014@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_22_0@1014@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_22_0@1014@01)))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_21@988@01
  (and
    p2_21@988@01
    (issubtype<Bool> (typeof<PyType> secret_22_0@1014@01) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit secret_22_0@1014@01))))
(declare-const p2_22@1126@01 Bool)
(assert (=
  p2_22@1126@01
  (and p2_21@988@01 (bool___unbox__ $Snap.unit secret_22_0@1014@01))))
; [exec]
; p3_10 := p1_21 && (!ret1_10 && !bool___unbox__(secret_22))
; [eval] p1_21 && (!ret1_10 && !bool___unbox__(secret_22))
(push) ; 35
; [then-branch: 3146 | !(p1_21@987@01) | live]
; [else-branch: 3146 | p1_21@987@01 | live]
(push) ; 36
; [then-branch: 3146 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 36
(push) ; 36
; [else-branch: 3146 | p1_21@987@01]
; [eval] !ret1_10
(push) ; 37
; [then-branch: 3147 | False | live]
; [else-branch: 3147 | True | live]
(push) ; 38
; [then-branch: 3147 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 3147 | True]
; [eval] !bool___unbox__(secret_22)
; [eval] bool___unbox__(secret_22)
(push) ; 39
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 40
(assert (not (issubtype<Bool> (typeof<PyType> secret_10@995@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_10@995@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_10@995@01))
(pop) ; 39
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_10@995@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_10@995@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_10@995@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_10@995@01)))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(declare-const p3_10@1127@01 Bool)
(assert (=
  p3_10@1127@01
  (and p1_21@987@01 (not (bool___unbox__ $Snap.unit secret_10@995@01)))))
; [exec]
; p4_10 := p2_21 && (!ret2_10 && !bool___unbox__(secret_22_0))
; [eval] p2_21 && (!ret2_10 && !bool___unbox__(secret_22_0))
(push) ; 35
; [then-branch: 3148 | !(p2_21@988@01) | live]
; [else-branch: 3148 | p2_21@988@01 | live]
(push) ; 36
; [then-branch: 3148 | !(p2_21@988@01)]
(pop) ; 36
(push) ; 36
; [else-branch: 3148 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(push) ; 37
; [then-branch: 3149 | False | live]
; [else-branch: 3149 | True | live]
(push) ; 38
; [then-branch: 3149 | False]
(assert false)
(pop) ; 38
(push) ; 38
; [else-branch: 3149 | True]
; [eval] !bool___unbox__(secret_22_0)
; [eval] bool___unbox__(secret_22_0)
(push) ; 39
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 40
(assert (not (issubtype<Bool> (typeof<PyType> secret_22_0@1014@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> secret_22_0@1014@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit secret_22_0@1014@01))
(pop) ; 39
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_22_0@1014@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_22_0@1014@01)))
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> secret_22_0@1014@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit secret_22_0@1014@01)))
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(declare-const p4_10@1128@01 Bool)
(assert (=
  p4_10@1128@01
  (and p2_21@988@01 (not (bool___unbox__ $Snap.unit secret_22_0@1014@01)))))
; [eval] p1_22 && !ret1_10
(push) ; 35
; [then-branch: 3150 | !(p1_22@1125@01) | live]
; [else-branch: 3150 | p1_22@1125@01 | live]
(push) ; 36
; [then-branch: 3150 | !(p1_22@1125@01)]
(assert (not p1_22@1125@01))
(pop) ; 36
(push) ; 36
; [else-branch: 3150 | p1_22@1125@01]
(assert p1_22@1125@01)
; [eval] !ret1_10
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(assert (or p1_22@1125@01 (not p1_22@1125@01)))
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_22@1125@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not p1_22@1125@01))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3151 | p1_22@1125@01 | live]
; [else-branch: 3151 | !(p1_22@1125@01) | live]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 3151 | p1_22@1125@01]
(assert p1_22@1125@01)
; [exec]
; _res := _checkDefined(a_5, 3497825).StringContainer_s
; [eval] _checkDefined(a_5, 3497825)
(push) ; 36
; [eval] _isDefined(id)
(push) ; 37
(pop) ; 37
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_11@1087@01 3497825))
(pop) ; 36
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_11@1087@01 3497825))
(push) ; 36
(set-option :timeout 10)
(assert (not (= tmp_12@1106@01 (_checkDefined $Snap.unit tmp_11@1087@01 3497825))))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (= tmp_11@1087@01 (_checkDefined $Snap.unit tmp_11@1087@01 3497825))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(declare-const _res@1129@01 $Ref)
(assert (=
  _res@1129@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1104@01))))))
; [exec]
; ret1_10 := true
; [eval] p2_22 && !ret2_10
(set-option :timeout 0)
(push) ; 36
; [then-branch: 3152 | !(p2_22@1126@01) | live]
; [else-branch: 3152 | p2_22@1126@01 | live]
(push) ; 37
; [then-branch: 3152 | !(p2_22@1126@01)]
(assert (not p2_22@1126@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3152 | p2_22@1126@01]
(assert p2_22@1126@01)
; [eval] !ret2_10
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or p2_22@1126@01 (not p2_22@1126@01)))
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_22@1126@01)))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3153 | p2_22@1126@01 | dead]
; [else-branch: 3153 | !(p2_22@1126@01) | live]
(set-option :timeout 0)
(push) ; 36
; [else-branch: 3153 | !(p2_22@1126@01)]
(assert (not p2_22@1126@01))
(pop) ; 36
; [eval] !(p2_22 && !ret2_10)
; [eval] p2_22 && !ret2_10
(push) ; 36
; [then-branch: 3154 | !(p2_22@1126@01) | live]
; [else-branch: 3154 | p2_22@1126@01 | live]
(push) ; 37
; [then-branch: 3154 | !(p2_22@1126@01)]
(assert (not p2_22@1126@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3154 | p2_22@1126@01]
(assert p2_22@1126@01)
; [eval] !ret2_10
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(set-option :timeout 10)
(assert (not p2_22@1126@01))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_22@1126@01)))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3155 | !(p2_22@1126@01) | live]
; [else-branch: 3155 | p2_22@1126@01 | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 3155 | !(p2_22@1126@01)]
(assert (not p2_22@1126@01))
; [eval] p1_21 && !ret1_10
(push) ; 37
; [then-branch: 3156 | !(p1_21@987@01) | live]
; [else-branch: 3156 | p1_21@987@01 | live]
(push) ; 38
; [then-branch: 3156 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 38
(push) ; 38
; [else-branch: 3156 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
; [then-branch: 3157 | False | dead]
; [else-branch: 3157 | True | live]
(push) ; 37
; [else-branch: 3157 | True]
(pop) ; 37
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 37
; [then-branch: 3158 | !(p1_21@987@01) | live]
; [else-branch: 3158 | p1_21@987@01 | live]
(push) ; 38
; [then-branch: 3158 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 38
(push) ; 38
; [else-branch: 3158 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3159 | True | live]
; [else-branch: 3159 | False | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3159 | True]
; [eval] p2_21 && !ret2_10
(push) ; 38
; [then-branch: 3160 | !(p2_21@988@01) | live]
; [else-branch: 3160 | p2_21@988@01 | live]
(push) ; 39
; [then-branch: 3160 | !(p2_21@988@01)]
(pop) ; 39
(push) ; 39
; [else-branch: 3160 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
; [then-branch: 3161 | p2_21@988@01 | dead]
; [else-branch: 3161 | !(p2_21@988@01) | live]
(push) ; 38
; [else-branch: 3161 | !(p2_21@988@01)]
(pop) ; 38
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 38
; [then-branch: 3162 | !(p2_21@988@01) | live]
; [else-branch: 3162 | p2_21@988@01 | live]
(push) ; 39
; [then-branch: 3162 | !(p2_21@988@01)]
(pop) ; 39
(push) ; 39
; [else-branch: 3162 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3163 | !(p2_21@988@01) | live]
; [else-branch: 3163 | p2_21@988@01 | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 3163 | !(p2_21@988@01)]
; [exec]
; assert true
; [eval] p1_21 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3164 | p1_21@987@01 | live]
; [else-branch: 3164 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3164 | p1_21@987@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_21 ==> true
(push) ; 39
; [then-branch: 3165 | p2_21@988@01 | dead]
; [else-branch: 3165 | !(p2_21@988@01) | live]
(push) ; 40
; [else-branch: 3165 | !(p2_21@988@01)]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p1_21 ==> issubtype(typeof(_res), str())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3166 | p1_21@987@01 | live]
; [else-branch: 3166 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3166 | p1_21@987@01]
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(assert (not (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> _res@1129@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> _res@1129@01) (as str<PyType>  PyType))))
; [eval] p2_21 ==> issubtype(typeof(_res_11), str())
(push) ; 39
; [then-branch: 3167 | p2_21@988@01 | dead]
; [else-branch: 3167 | !(p2_21@988@01) | live]
(push) ; 40
; [else-branch: 3167 | !(p2_21@988@01)]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] (p1_21 && p2_21 ==> x_3 == x_3_0) ==> p1_21 && p2_21 ==> str___eq__(_res, _res_11)
; [eval] p1_21 && p2_21 ==> x_3 == x_3_0
; [eval] p1_21 && p2_21
(push) ; 39
; [then-branch: 3168 | !(p1_21@987@01) | live]
; [else-branch: 3168 | p1_21@987@01 | live]
(push) ; 40
; [then-branch: 3168 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 40
(push) ; 40
; [else-branch: 3168 | p1_21@987@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not (and p1_21@987@01 p2_21@988@01))))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3169 | p1_21@987@01 && p2_21@988@01 | dead]
; [else-branch: 3169 | !(p1_21@987@01 && p2_21@988@01) | live]
(set-option :timeout 0)
(push) ; 40
; [else-branch: 3169 | !(p1_21@987@01 && p2_21@988@01)]
(assert (not (and p1_21@987@01 p2_21@988@01)))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (not (and p1_21@987@01 p2_21@988@01)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3170 | True | live]
; [else-branch: 3170 | False | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3170 | True]
; [eval] p1_21 && p2_21 ==> str___eq__(_res, _res_11)
; [eval] p1_21 && p2_21
(push) ; 41
; [then-branch: 3171 | !(p1_21@987@01) | live]
; [else-branch: 3171 | p1_21@987@01 | live]
(push) ; 42
; [then-branch: 3171 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 42
(push) ; 42
; [else-branch: 3171 | p1_21@987@01]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
; [then-branch: 3172 | p1_21@987@01 && p2_21@988@01 | dead]
; [else-branch: 3172 | !(p1_21@987@01 && p2_21@988@01) | live]
(push) ; 42
; [else-branch: 3172 | !(p1_21@987@01 && p2_21@988@01)]
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p1_21 ==> (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3173 | p1_21@987@01 | live]
; [else-branch: 3173 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3173 | p1_21@987@01]
; [eval] (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false)
(push) ; 41
; [then-branch: 3174 | False | live]
; [else-branch: 3174 | True | live]
(push) ; 42
; [then-branch: 3174 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 3174 | True]
; [eval] (forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false)
(push) ; 43
; [then-branch: 3175 | False | live]
; [else-branch: 3175 | True | live]
(push) ; 44
; [then-branch: 3175 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 3175 | True]
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false)
(push) ; 45
; [then-branch: 3176 | False | live]
; [else-branch: 3176 | True | live]
(push) ; 46
; [then-branch: 3176 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 3176 | True]
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_21 ==> (forperm _r_33: Ref [MustInvokeBounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBoundedp] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnboundedp] :: false)))
(push) ; 39
; [then-branch: 3177 | p2_21@988@01 | dead]
; [else-branch: 3177 | !(p2_21@988@01) | live]
(push) ; 40
; [else-branch: 3177 | !(p2_21@988@01)]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
(push) ; 35
; [else-branch: 3151 | !(p1_22@1125@01)]
(assert (not p1_22@1125@01))
(pop) ; 35
; [eval] !(p1_22 && !ret1_10)
; [eval] p1_22 && !ret1_10
(push) ; 35
; [then-branch: 3178 | !(p1_22@1125@01) | live]
; [else-branch: 3178 | p1_22@1125@01 | live]
(push) ; 36
; [then-branch: 3178 | !(p1_22@1125@01)]
(assert (not p1_22@1125@01))
(pop) ; 36
(push) ; 36
; [else-branch: 3178 | p1_22@1125@01]
(assert p1_22@1125@01)
; [eval] !ret1_10
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not p1_22@1125@01))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 35
(set-option :timeout 10)
(assert (not (not p1_22@1125@01)))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3179 | !(p1_22@1125@01) | live]
; [else-branch: 3179 | p1_22@1125@01 | live]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 3179 | !(p1_22@1125@01)]
(assert (not p1_22@1125@01))
; [eval] p2_22 && !ret2_10
(push) ; 36
; [then-branch: 3180 | !(p2_22@1126@01) | live]
; [else-branch: 3180 | p2_22@1126@01 | live]
(push) ; 37
; [then-branch: 3180 | !(p2_22@1126@01)]
(assert (not p2_22@1126@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3180 | p2_22@1126@01]
(assert p2_22@1126@01)
; [eval] !ret2_10
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(assert (or p2_22@1126@01 (not p2_22@1126@01)))
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_22@1126@01)))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3181 | p2_22@1126@01 | dead]
; [else-branch: 3181 | !(p2_22@1126@01) | live]
(set-option :timeout 0)
(push) ; 36
; [else-branch: 3181 | !(p2_22@1126@01)]
(assert (not p2_22@1126@01))
(pop) ; 36
; [eval] !(p2_22 && !ret2_10)
; [eval] p2_22 && !ret2_10
(push) ; 36
; [then-branch: 3182 | !(p2_22@1126@01) | live]
; [else-branch: 3182 | p2_22@1126@01 | live]
(push) ; 37
; [then-branch: 3182 | !(p2_22@1126@01)]
(assert (not p2_22@1126@01))
(pop) ; 37
(push) ; 37
; [else-branch: 3182 | p2_22@1126@01]
(assert p2_22@1126@01)
; [eval] !ret2_10
(pop) ; 37
(pop) ; 36
; Joined path conditions
; Joined path conditions
(push) ; 36
(set-option :timeout 10)
(assert (not p2_22@1126@01))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (not p2_22@1126@01)))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3183 | !(p2_22@1126@01) | live]
; [else-branch: 3183 | p2_22@1126@01 | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 3183 | !(p2_22@1126@01)]
(assert (not p2_22@1126@01))
; [eval] p1_21 && !ret1_10
(push) ; 37
; [then-branch: 3184 | !(p1_21@987@01) | live]
; [else-branch: 3184 | p1_21@987@01 | live]
(push) ; 38
; [then-branch: 3184 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 38
(push) ; 38
; [else-branch: 3184 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3185 | p1_21@987@01 | live]
; [else-branch: 3185 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 3185 | p1_21@987@01]
; [exec]
; _res := _checkDefined(b_5, 3497826).StringContainer_s
; [eval] _checkDefined(b_5, 3497826)
(push) ; 38
; [eval] _isDefined(id)
(push) ; 39
(pop) ; 39
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_12@1106@01 3497826))
(pop) ; 38
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit tmp_12@1106@01 3497826))
(push) ; 38
(set-option :timeout 10)
(assert (not (= tmp_12@1106@01 (_checkDefined $Snap.unit tmp_12@1106@01 3497826))))
(check-sat)
; unsat
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(declare-const _res@1130@01 $Ref)
(assert (=
  _res@1130@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1123@01))))))
; [exec]
; ret1_10 := true
; [eval] p2_21 && !ret2_10
(set-option :timeout 0)
(push) ; 38
; [then-branch: 3186 | !(p2_21@988@01) | live]
; [else-branch: 3186 | p2_21@988@01 | live]
(push) ; 39
; [then-branch: 3186 | !(p2_21@988@01)]
(pop) ; 39
(push) ; 39
; [else-branch: 3186 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
; [then-branch: 3187 | p2_21@988@01 | dead]
; [else-branch: 3187 | !(p2_21@988@01) | live]
(push) ; 38
; [else-branch: 3187 | !(p2_21@988@01)]
(pop) ; 38
; [eval] !(p2_21 && !ret2_10)
; [eval] p2_21 && !ret2_10
(push) ; 38
; [then-branch: 3188 | !(p2_21@988@01) | live]
; [else-branch: 3188 | p2_21@988@01 | live]
(push) ; 39
; [then-branch: 3188 | !(p2_21@988@01)]
(pop) ; 39
(push) ; 39
; [else-branch: 3188 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not p2_21@988@01))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3189 | !(p2_21@988@01) | live]
; [else-branch: 3189 | p2_21@988@01 | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 3189 | !(p2_21@988@01)]
; [exec]
; assert true
; [eval] p1_21 ==> true
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3190 | p1_21@987@01 | live]
; [else-branch: 3190 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3190 | p1_21@987@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_21 ==> true
(push) ; 39
; [then-branch: 3191 | p2_21@988@01 | dead]
; [else-branch: 3191 | !(p2_21@988@01) | live]
(push) ; 40
; [else-branch: 3191 | !(p2_21@988@01)]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p1_21 ==> issubtype(typeof(_res), str())
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3192 | p1_21@987@01 | live]
; [else-branch: 3192 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3192 | p1_21@987@01]
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 40
(pop) ; 39
; Joined path conditions
(push) ; 39
(assert (not (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> _res@1130@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_21@987@01
  (issubtype<Bool> (typeof<PyType> _res@1130@01) (as str<PyType>  PyType))))
; [eval] p2_21 ==> issubtype(typeof(_res_11), str())
(push) ; 39
; [then-branch: 3193 | p2_21@988@01 | dead]
; [else-branch: 3193 | !(p2_21@988@01) | live]
(push) ; 40
; [else-branch: 3193 | !(p2_21@988@01)]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] (p1_21 && p2_21 ==> x_3 == x_3_0) ==> p1_21 && p2_21 ==> str___eq__(_res, _res_11)
; [eval] p1_21 && p2_21 ==> x_3 == x_3_0
; [eval] p1_21 && p2_21
(push) ; 39
; [then-branch: 3194 | !(p1_21@987@01) | live]
; [else-branch: 3194 | p1_21@987@01 | live]
(push) ; 40
; [then-branch: 3194 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 40
(push) ; 40
; [else-branch: 3194 | p1_21@987@01]
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not (and p1_21@987@01 p2_21@988@01))))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3195 | p1_21@987@01 && p2_21@988@01 | dead]
; [else-branch: 3195 | !(p1_21@987@01 && p2_21@988@01) | live]
(set-option :timeout 0)
(push) ; 40
; [else-branch: 3195 | !(p1_21@987@01 && p2_21@988@01)]
(assert (not (and p1_21@987@01 p2_21@988@01)))
(pop) ; 40
(pop) ; 39
; Joined path conditions
(assert (not (and p1_21@987@01 p2_21@988@01)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3196 | True | live]
; [else-branch: 3196 | False | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3196 | True]
; [eval] p1_21 && p2_21 ==> str___eq__(_res, _res_11)
; [eval] p1_21 && p2_21
(push) ; 41
; [then-branch: 3197 | !(p1_21@987@01) | live]
; [else-branch: 3197 | p1_21@987@01 | live]
(push) ; 42
; [then-branch: 3197 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 42
(push) ; 42
; [else-branch: 3197 | p1_21@987@01]
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(push) ; 41
; [then-branch: 3198 | p1_21@987@01 && p2_21@988@01 | dead]
; [else-branch: 3198 | !(p1_21@987@01 && p2_21@988@01) | live]
(push) ; 42
; [else-branch: 3198 | !(p1_21@987@01 && p2_21@988@01)]
(pop) ; 42
(pop) ; 41
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p1_21 ==> (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))
(push) ; 39
(push) ; 40
(set-option :timeout 10)
(assert (not (not p1_21@987@01)))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3199 | p1_21@987@01 | live]
; [else-branch: 3199 | !(p1_21@987@01) | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 3199 | p1_21@987@01]
; [eval] (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false)
(push) ; 41
; [then-branch: 3200 | False | live]
; [else-branch: 3200 | True | live]
(push) ; 42
; [then-branch: 3200 | False]
(assert false)
(pop) ; 42
(push) ; 42
; [else-branch: 3200 | True]
; [eval] (forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false)
(push) ; 43
; [then-branch: 3201 | False | live]
; [else-branch: 3201 | True | live]
(push) ; 44
; [then-branch: 3201 | False]
(assert false)
(pop) ; 44
(push) ; 44
; [else-branch: 3201 | True]
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false)
(push) ; 45
; [then-branch: 3202 | False | live]
; [else-branch: 3202 | True | live]
(push) ; 46
; [then-branch: 3202 | False]
(assert false)
(pop) ; 46
(push) ; 46
; [else-branch: 3202 | True]
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(pop) ; 42
(pop) ; 41
; Joined path conditions
; Joined path conditions
(pop) ; 40
(pop) ; 39
; Joined path conditions
; [eval] p2_21 ==> (forperm _r_33: Ref [MustInvokeBounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBoundedp] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnboundedp] :: false)))
(push) ; 39
; [then-branch: 3203 | p2_21@988@01 | dead]
; [else-branch: 3203 | !(p2_21@988@01) | live]
(push) ; 40
; [else-branch: 3203 | !(p2_21@988@01)]
(pop) ; 40
(pop) ; 39
; Joined path conditions
(pop) ; 38
(pop) ; 37
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 37
; [then-branch: 3204 | !(p1_21@987@01) | live]
; [else-branch: 3204 | p1_21@987@01 | live]
(push) ; 38
; [then-branch: 3204 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 38
(push) ; 38
; [else-branch: 3204 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
; [then-branch: 3205 | !(p1_21@987@01) | dead]
; [else-branch: 3205 | p1_21@987@01 | live]
(push) ; 37
; [else-branch: 3205 | p1_21@987@01]
(pop) ; 37
(pop) ; 36
(pop) ; 35
(push) ; 35
; [else-branch: 3179 | p1_22@1125@01]
(assert p1_22@1125@01)
(pop) ; 35
(pop) ; 34
(pop) ; 33
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 33
; [then-branch: 3206 | !(p1_21@987@01) | live]
; [else-branch: 3206 | p1_21@987@01 | live]
(push) ; 34
; [then-branch: 3206 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 34
(push) ; 34
; [else-branch: 3206 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
; [then-branch: 3207 | !(p1_21@987@01) | dead]
; [else-branch: 3207 | p1_21@987@01 | live]
(push) ; 33
; [else-branch: 3207 | p1_21@987@01]
(pop) ; 33
(pop) ; 32
(pop) ; 31
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 31
; [then-branch: 3208 | !(p1_21@987@01) | live]
; [else-branch: 3208 | p1_21@987@01 | live]
(push) ; 32
; [then-branch: 3208 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 32
(push) ; 32
; [else-branch: 3208 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
; [then-branch: 3209 | !(p1_21@987@01) | dead]
; [else-branch: 3209 | p1_21@987@01 | live]
(push) ; 31
; [else-branch: 3209 | p1_21@987@01]
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 25
; [then-branch: 3210 | !(p1_21@987@01) | live]
; [else-branch: 3210 | p1_21@987@01 | live]
(push) ; 26
; [then-branch: 3210 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 26
(push) ; 26
; [else-branch: 3210 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 3211 | !(p1_21@987@01) | dead]
; [else-branch: 3211 | p1_21@987@01 | live]
(push) ; 25
; [else-branch: 3211 | p1_21@987@01]
(pop) ; 25
(pop) ; 24
; [eval] !(p1_21 && !ret1_10 || p2_21 && !ret2_10)
; [eval] p1_21 && !ret1_10 || p2_21 && !ret2_10
; [eval] p1_21 && !ret1_10
(push) ; 24
; [then-branch: 3212 | !(p1_21@987@01) | live]
; [else-branch: 3212 | p1_21@987@01 | live]
(push) ; 25
; [then-branch: 3212 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 25
(push) ; 25
; [else-branch: 3212 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 3213 | p1_21@987@01 | live]
; [else-branch: 3213 | !(p1_21@987@01) | live]
(push) ; 25
; [then-branch: 3213 | p1_21@987@01]
(pop) ; 25
(push) ; 25
; [else-branch: 3213 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
; [eval] p2_21 && !ret2_10
(push) ; 26
; [then-branch: 3214 | !(p2_21@988@01) | live]
; [else-branch: 3214 | p2_21@988@01 | live]
(push) ; 27
; [then-branch: 3214 | !(p2_21@988@01)]
(pop) ; 27
(push) ; 27
; [else-branch: 3214 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [then-branch: 3215 | !(p1_21@987@01 || p2_21@988@01) | dead]
; [else-branch: 3215 | p1_21@987@01 || p2_21@988@01 | live]
(push) ; 24
; [else-branch: 3215 | p1_21@987@01 || p2_21@988@01]
(pop) ; 24
(pop) ; 23
(pop) ; 22
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 22
; [then-branch: 3216 | !(p1_21@987@01) | live]
; [else-branch: 3216 | p1_21@987@01 | live]
(push) ; 23
; [then-branch: 3216 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 23
(push) ; 23
; [else-branch: 3216 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 3217 | !(p1_21@987@01) | dead]
; [else-branch: 3217 | p1_21@987@01 | live]
(push) ; 22
; [else-branch: 3217 | p1_21@987@01]
(pop) ; 22
(pop) ; 21
(pop) ; 20
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 20
; [then-branch: 3218 | !(p1_21@987@01) | live]
; [else-branch: 3218 | p1_21@987@01 | live]
(push) ; 21
; [then-branch: 3218 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 21
(push) ; 21
; [else-branch: 3218 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 3219 | !(p1_21@987@01) | dead]
; [else-branch: 3219 | p1_21@987@01 | live]
(push) ; 20
; [else-branch: 3219 | p1_21@987@01]
(pop) ; 20
(pop) ; 19
(pop) ; 18
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 18
; [then-branch: 3220 | !(p1_21@987@01) | live]
; [else-branch: 3220 | p1_21@987@01 | live]
(push) ; 19
; [then-branch: 3220 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 19
(push) ; 19
; [else-branch: 3220 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
; [then-branch: 3221 | !(p1_21@987@01) | dead]
; [else-branch: 3221 | p1_21@987@01 | live]
(push) ; 18
; [else-branch: 3221 | p1_21@987@01]
(pop) ; 18
(pop) ; 17
(pop) ; 16
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 16
; [then-branch: 3222 | !(p1_21@987@01) | live]
; [else-branch: 3222 | p1_21@987@01 | live]
(push) ; 17
; [then-branch: 3222 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 17
(push) ; 17
; [else-branch: 3222 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 3223 | !(p1_21@987@01) | dead]
; [else-branch: 3223 | p1_21@987@01 | live]
(push) ; 16
; [else-branch: 3223 | p1_21@987@01]
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 10
; [then-branch: 3224 | !(p1_21@987@01) | live]
; [else-branch: 3224 | p1_21@987@01 | live]
(push) ; 11
; [then-branch: 3224 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 11
(push) ; 11
; [else-branch: 3224 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 3225 | !(p1_21@987@01) | dead]
; [else-branch: 3225 | p1_21@987@01 | live]
(push) ; 10
; [else-branch: 3225 | p1_21@987@01]
(pop) ; 10
(pop) ; 9
; [eval] !(p1_21 && !ret1_10 || p2_21 && !ret2_10)
; [eval] p1_21 && !ret1_10 || p2_21 && !ret2_10
; [eval] p1_21 && !ret1_10
(push) ; 9
; [then-branch: 3226 | !(p1_21@987@01) | live]
; [else-branch: 3226 | p1_21@987@01 | live]
(push) ; 10
; [then-branch: 3226 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 10
(push) ; 10
; [else-branch: 3226 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 3227 | p1_21@987@01 | live]
; [else-branch: 3227 | !(p1_21@987@01) | live]
(push) ; 10
; [then-branch: 3227 | p1_21@987@01]
(pop) ; 10
(push) ; 10
; [else-branch: 3227 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
; [eval] p2_21 && !ret2_10
(push) ; 11
; [then-branch: 3228 | !(p2_21@988@01) | live]
; [else-branch: 3228 | p2_21@988@01 | live]
(push) ; 12
; [then-branch: 3228 | !(p2_21@988@01)]
(pop) ; 12
(push) ; 12
; [else-branch: 3228 | p2_21@988@01]
(assert p2_21@988@01)
; [eval] !ret2_10
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (or p1_21@987@01 p2_21@988@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3229 | !(p1_21@987@01 || p2_21@988@01) | dead]
; [else-branch: 3229 | p1_21@987@01 || p2_21@988@01 | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 3229 | p1_21@987@01 || p2_21@988@01]
(assert (or p1_21@987@01 p2_21@988@01))
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 7
; [then-branch: 3230 | !(p1_21@987@01) | live]
; [else-branch: 3230 | p1_21@987@01 | live]
(push) ; 8
; [then-branch: 3230 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3230 | p1_21@987@01]
; [eval] !ret1_10
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 3231 | !(p1_21@987@01) | dead]
; [else-branch: 3231 | p1_21@987@01 | live]
(push) ; 7
; [else-branch: 3231 | p1_21@987@01]
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 5
; [then-branch: 3232 | !(p1_21@987@01) | live]
; [else-branch: 3232 | p1_21@987@01 | live]
(push) ; 6
; [then-branch: 3232 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 6
(push) ; 6
; [else-branch: 3232 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] !ret1_10
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3233 | !(p1_21@987@01) | dead]
; [else-branch: 3233 | p1_21@987@01 | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 3233 | p1_21@987@01]
(assert p1_21@987@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 3005 | p2_21@988@01]
(assert p2_21@988@01)
(pop) ; 4
(pop) ; 3
; [eval] !(p1_21 && !ret1_10)
; [eval] p1_21 && !ret1_10
(push) ; 3
; [then-branch: 3234 | !(p1_21@987@01) | live]
; [else-branch: 3234 | p1_21@987@01 | live]
(push) ; 4
; [then-branch: 3234 | !(p1_21@987@01)]
(assert (not p1_21@987@01))
(pop) ; 4
(push) ; 4
; [else-branch: 3234 | p1_21@987@01]
(assert p1_21@987@01)
; [eval] !ret1_10
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not p1_21@987@01))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3235 | !(p1_21@987@01) | dead]
; [else-branch: 3235 | p1_21@987@01 | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 3235 | p1_21@987@01]
(assert p1_21@987@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- Example___init__ ----------
(declare-const p1_23@1131@01 Bool)
(declare-const p2_23@1132@01 Bool)
(declare-const _cthread_156@1133@01 $Ref)
(declare-const _cthread_156_0@1134@01 $Ref)
(declare-const _caller_measures_156@1135@01 Seq<Measure$>)
(declare-const _caller_measures_156_0@1136@01 Seq<Measure$>)
(declare-const _residue_156@1137@01 $Perm)
(declare-const _residue_156_0@1138@01 $Perm)
(declare-const self@1139@01 $Ref)
(declare-const self_3@1140@01 $Ref)
(declare-const _current_wait_level_156@1141@01 $Perm)
(declare-const _current_wait_level_156_0@1142@01 $Perm)
(declare-const p1_23@1143@01 Bool)
(declare-const p2_23@1144@01 Bool)
(declare-const _cthread_156@1145@01 $Ref)
(declare-const _cthread_156_0@1146@01 $Ref)
(declare-const _caller_measures_156@1147@01 Seq<Measure$>)
(declare-const _caller_measures_156_0@1148@01 Seq<Measure$>)
(declare-const _residue_156@1149@01 $Perm)
(declare-const _residue_156_0@1150@01 $Perm)
(declare-const self@1151@01 $Ref)
(declare-const self_3@1152@01 $Ref)
(declare-const _current_wait_level_156@1153@01 $Perm)
(declare-const _current_wait_level_156_0@1154@01 $Perm)
(push) ; 1
(declare-const $t@1155@01 $Snap)
(assert (= $t@1155@01 ($Snap.combine ($Snap.first $t@1155@01) ($Snap.second $t@1155@01))))
(assert (= ($Snap.first $t@1155@01) $Snap.unit))
; [eval] p1_23 ==> _cthread_156 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_23@1143@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3236 | p1_23@1143@01 | live]
; [else-branch: 3236 | !(p1_23@1143@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3236 | p1_23@1143@01]
(assert p1_23@1143@01)
; [eval] _cthread_156 != null
(pop) ; 3
(push) ; 3
; [else-branch: 3236 | !(p1_23@1143@01)]
(assert (not p1_23@1143@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_23@1143@01) p1_23@1143@01))
(assert (=> p1_23@1143@01 (not (= _cthread_156@1145@01 $Ref.null))))
(assert (=
  ($Snap.second $t@1155@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1155@01))
    ($Snap.second ($Snap.second $t@1155@01)))))
(assert (= ($Snap.first ($Snap.second $t@1155@01)) $Snap.unit))
; [eval] p2_23 ==> _cthread_156_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_23@1144@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3237 | p2_23@1144@01 | live]
; [else-branch: 3237 | !(p2_23@1144@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3237 | p2_23@1144@01]
(assert p2_23@1144@01)
; [eval] _cthread_156_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 3237 | !(p2_23@1144@01)]
(assert (not p2_23@1144@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_23@1144@01) p2_23@1144@01))
(assert (=> p2_23@1144@01 (not (= _cthread_156_0@1146@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@1155@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1155@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1155@01))) $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(_cthread_156), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_23@1143@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3238 | p1_23@1143@01 | live]
; [else-branch: 3238 | !(p1_23@1143@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3238 | p1_23@1143@01]
(assert p1_23@1143@01)
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 3238 | !(p1_23@1143@01)]
(assert (not p1_23@1143@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_23@1143@01
  (issubtype<Bool> (typeof<PyType> _cthread_156@1145@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(_cthread_156_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_23@1144@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3239 | p2_23@1144@01 | live]
; [else-branch: 3239 | !(p2_23@1144@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3239 | p2_23@1144@01]
(assert p2_23@1144@01)
; [eval] issubtype(typeof(_cthread_156_0), Thread_0())
; [eval] typeof(_cthread_156_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 3239 | !(p2_23@1144@01)]
(assert (not p2_23@1144@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_23@1144@01
  (issubtype<Bool> (typeof<PyType> _cthread_156_0@1146@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))
  $Snap.unit))
; [eval] p1_23 ==> self != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_23@1143@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3240 | p1_23@1143@01 | live]
; [else-branch: 3240 | !(p1_23@1143@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3240 | p1_23@1143@01]
(assert p1_23@1143@01)
; [eval] self != null
(pop) ; 3
(push) ; 3
; [else-branch: 3240 | !(p1_23@1143@01)]
(assert (not p1_23@1143@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=> p1_23@1143@01 (not (= self@1151@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))
  $Snap.unit))
; [eval] p2_23 ==> self_3 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_23@1144@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3241 | p2_23@1144@01 | live]
; [else-branch: 3241 | !(p2_23@1144@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3241 | p2_23@1144@01]
(assert p2_23@1144@01)
; [eval] self_3 != null
(pop) ; 3
(push) ; 3
; [else-branch: 3241 | !(p2_23@1144@01)]
(assert (not p2_23@1144@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=> p2_23@1144@01 (not (= self_3@1152@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))
(push) ; 2
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not p1_23@1143@01))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3242 | p1_23@1143@01 | live]
; [else-branch: 3242 | !(p1_23@1143@01) | live]
(set-option :timeout 0)
(push) ; 2
; [then-branch: 3242 | p1_23@1143@01]
(assert p1_23@1143@01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_23@1144@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3243 | p2_23@1144@01 | live]
; [else-branch: 3243 | !(p2_23@1144@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3243 | p2_23@1144@01]
(assert p2_23@1144@01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3244 | p1_23@1143@01 | live]
; [else-branch: 3244 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 3244 | p1_23@1143@01]
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3245 | p2_23@1144@01 | live]
; [else-branch: 3245 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3245 | p2_23@1144@01]
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self), Example())
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3246 | p1_23@1143@01 | live]
; [else-branch: 3246 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3246 | p1_23@1143@01]
; [eval] issubtype(typeof(self), Example())
; [eval] typeof(self)
; [eval] Example()
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  p1_23@1143@01
  (issubtype<Bool> (typeof<PyType> self@1151@01) (as Example<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3), Example())
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3247 | p2_23@1144@01 | live]
; [else-branch: 3247 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3247 | p2_23@1144@01]
; [eval] issubtype(typeof(self_3), Example())
; [eval] typeof(self_3)
; [eval] Example()
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  p2_23@1144@01
  (issubtype<Bool> (typeof<PyType> self_3@1152@01) (as Example<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> self != null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3248 | p1_23@1143@01 | live]
; [else-branch: 3248 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3248 | p1_23@1143@01]
; [eval] self != null
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> self_3 != null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3249 | p2_23@1144@01 | live]
; [else-branch: 3249 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3249 | p2_23@1144@01]
; [eval] self_3 != null
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> true
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3250 | p1_23@1143@01 | live]
; [else-branch: 3250 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3250 | p1_23@1143@01]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> true
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3251 | p2_23@1144@01 | live]
; [else-branch: 3251 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3251 | p2_23@1144@01]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(declare-const $t@1156@01 $Snap)
(assert (= $t@1156@01 ($Snap.combine ($Snap.first $t@1156@01) ($Snap.second $t@1156@01))))
(assert (= ($Snap.first $t@1156@01) $Snap.unit))
; [eval] p1_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3252 | p1_23@1143@01 | live]
; [else-branch: 3252 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3252 | p1_23@1143@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 9
; [then-branch: 3253 | False | live]
; [else-branch: 3253 | True | live]
(push) ; 10
; [then-branch: 3253 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3253 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 11
; [then-branch: 3254 | False | live]
; [else-branch: 3254 | True | live]
(push) ; 12
; [then-branch: 3254 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 3254 | True]
; [eval] _residue_156 <= _current_wait_level_156
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=> p1_23@1143@01 (<= _residue_156@1149@01 _current_wait_level_156@1153@01)))
(assert (=
  ($Snap.second $t@1156@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1156@01))
    ($Snap.second ($Snap.second $t@1156@01)))))
(assert (= ($Snap.first ($Snap.second $t@1156@01)) $Snap.unit))
; [eval] p2_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3255 | p2_23@1144@01 | live]
; [else-branch: 3255 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3255 | p2_23@1144@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 9
; [then-branch: 3256 | False | live]
; [else-branch: 3256 | True | live]
(push) ; 10
; [then-branch: 3256 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3256 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 11
; [then-branch: 3257 | False | live]
; [else-branch: 3257 | True | live]
(push) ; 12
; [then-branch: 3257 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 3257 | True]
; [eval] _residue_156_0 <= _current_wait_level_156_0
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=> p2_23@1144@01 (<= _residue_156_0@1150@01 _current_wait_level_156_0@1154@01)))
(assert (=
  ($Snap.second ($Snap.second $t@1156@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1156@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3258 | p1_23@1143@01 | live]
; [else-branch: 3258 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3258 | p1_23@1143@01]
(assert (not (= self@1151@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3259 | p2_23@1144@01 | live]
; [else-branch: 3259 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3259 | p2_23@1144@01]
(assert (not (= self_3@1152@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_f), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3260 | p1_23@1143@01 | live]
; [else-branch: 3260 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3260 | p1_23@1143@01]
; [eval] issubtype(typeof(self.Example_f), int())
; [eval] typeof(self.Example_f)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  p1_23@1143@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1156@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_fp), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3261 | p2_23@1144@01 | live]
; [else-branch: 3261 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3261 | p2_23@1144@01]
; [eval] issubtype(typeof(self_3.Example_fp), int())
; [eval] typeof(self_3.Example_fp)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  p2_23@1144@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3262 | p1_23@1143@01 | live]
; [else-branch: 3262 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3262 | p1_23@1143@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))))
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3263 | p2_23@1144@01 | live]
; [else-branch: 3263 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3263 | p2_23@1144@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_g), int())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3264 | p1_23@1143@01 | live]
; [else-branch: 3264 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3264 | p1_23@1143@01]
; [eval] issubtype(typeof(self.Example_g), int())
; [eval] typeof(self.Example_g)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  p1_23@1143@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_gp), int())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3265 | p2_23@1144@01 | live]
; [else-branch: 3265 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3265 | p2_23@1144@01]
; [eval] issubtype(typeof(self_3.Example_gp), int())
; [eval] typeof(self_3.Example_gp)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  p2_23@1144@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_f, __prim__int___box__(0))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3266 | p1_23@1143@01 | live]
; [else-branch: 3266 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3266 | p1_23@1143@01]
; [eval] int___eq__(self.Example_f, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1156@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1156@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1156@01)))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1156@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1156@01)))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  p1_23@1143@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1156@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1156@01)))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p1_23@1143@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1156@01)))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_fp, __prim__int___box__(0))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3267 | p2_23@1144@01 | live]
; [else-branch: 3267 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3267 | p2_23@1144@01]
; [eval] int___eq__(self_3.Example_fp, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  p2_23@1144@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p2_23@1144@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_g, __prim__int___box__(1))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3268 | p1_23@1143@01 | live]
; [else-branch: 3268 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3268 | p1_23@1143@01]
; [eval] int___eq__(self.Example_g, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  p1_23@1143@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p1_23@1143@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_gp, __prim__int___box__(1))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3269 | p2_23@1144@01 | live]
; [else-branch: 3269 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3269 | p2_23@1144@01]
; [eval] int___eq__(self_3.Example_gp, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  p2_23@1144@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p2_23@1144@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3270 | p1_23@1143@01 | live]
; [else-branch: 3270 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3270 | p1_23@1143@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1156@01)))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3271 | p2_23@1144@01 | live]
; [else-branch: 3271 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3271 | p2_23@1144@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [exec]
; var _err: Ref
(declare-const _err@1157@01 $Ref)
; [exec]
; var _err_12: Ref
(declare-const _err_12@1158@01 $Ref)
; [exec]
; var self_1: Ref
(declare-const self_1@1159@01 $Ref)
; [exec]
; var self_1_0: Ref
(declare-const self_1_0@1160@01 $Ref)
; [exec]
; var _cwl_156: Perm
(declare-const _cwl_156@1161@01 $Perm)
; [exec]
; var _cwl_156_0: Perm
(declare-const _cwl_156_0@1162@01 $Perm)
; [exec]
; var _method_measures_156: Seq[Measure$]
(declare-const _method_measures_156@1163@01 Seq<Measure$>)
; [exec]
; var _method_measures_156_0: Seq[Measure$]
(declare-const _method_measures_156_0@1164@01 Seq<Measure$>)
; [exec]
; var p1_24: Bool
(declare-const p1_24@1165@01 Bool)
; [exec]
; var p2_24: Bool
(declare-const p2_24@1166@01 Bool)
; [exec]
; var p3_11: Bool
(declare-const p3_11@1167@01 Bool)
; [exec]
; var p4_11: Bool
(declare-const p4_11@1168@01 Bool)
; [exec]
; var p1_25: Bool
(declare-const p1_25@1169@01 Bool)
; [exec]
; var p2_25: Bool
(declare-const p2_25@1170@01 Bool)
; [exec]
; var p3_12: Bool
(declare-const p3_12@1171@01 Bool)
; [exec]
; var p4_12: Bool
(declare-const p4_12@1172@01 Bool)
; [exec]
; inhale p1_23
(declare-const $t@1173@01 $Snap)
(assert (= $t@1173@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3272 | p1_23@1143@01 | live]
; [else-branch: 3272 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3272 | p1_23@1143@01]
; [exec]
; _method_measures_156 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self) == Example()
(declare-const $t@1174@01 $Snap)
(assert (= $t@1174@01 $Snap.unit))
; [eval] typeof(self) == Example()
; [eval] typeof(self)
; [eval] Example()
(assert (= (typeof<PyType> self@1151@01) (as Example<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_1 := self
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3273 | p2_23@1144@01 | live]
; [else-branch: 3273 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3273 | p2_23@1144@01]
; [exec]
; _method_measures_156_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_3) == Example()
(declare-const $t@1175@01 $Snap)
(assert (= $t@1175@01 $Snap.unit))
; [eval] typeof(self_3) == Example()
; [eval] typeof(self_3)
; [eval] Example()
(assert (= (typeof<PyType> self_3@1152@01) (as Example<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err_12 := null
; [exec]
; self_1_0 := self_3
; [exec]
; p1_24 := p1_23 && perm(_MaySet(self_1, 1888441915154752436293)) > none
; [eval] p1_23 && perm(_MaySet(self_1, 1888441915154752436293)) > none
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3274 | !(p1_23@1143@01) | live]
; [else-branch: 3274 | p1_23@1143@01 | live]
(push) ; 10
; [then-branch: 3274 | !(p1_23@1143@01)]
(assert (not p1_23@1143@01))
(pop) ; 10
(push) ; 10
; [else-branch: 3274 | p1_23@1143@01]
; [eval] perm(_MaySet(self_1, 1888441915154752436293)) > none
; [eval] perm(_MaySet(self_1, 1888441915154752436293))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or p1_23@1143@01 (not p1_23@1143@01)))
; [exec]
; p2_24 := p2_23 && perm(_MaySet_0(self_1_0, 1888441915154752436293)) > none
; [eval] p2_23 && perm(_MaySet_0(self_1_0, 1888441915154752436293)) > none
(push) ; 9
; [then-branch: 3275 | !(p2_23@1144@01) | live]
; [else-branch: 3275 | p2_23@1144@01 | live]
(push) ; 10
; [then-branch: 3275 | !(p2_23@1144@01)]
(assert (not p2_23@1144@01))
(pop) ; 10
(push) ; 10
; [else-branch: 3275 | p2_23@1144@01]
; [eval] perm(_MaySet_0(self_1_0, 1888441915154752436293)) > none
; [eval] perm(_MaySet_0(self_1_0, 1888441915154752436293))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or p2_23@1144@01 (not p2_23@1144@01)))
; [exec]
; p3_11 := p1_23 && !(perm(_MaySet(self_1, 1888441915154752436293)) > none)
; [eval] p1_23 && !(perm(_MaySet(self_1, 1888441915154752436293)) > none)
(push) ; 9
; [then-branch: 3276 | !(p1_23@1143@01) | live]
; [else-branch: 3276 | p1_23@1143@01 | live]
(push) ; 10
; [then-branch: 3276 | !(p1_23@1143@01)]
(assert (not p1_23@1143@01))
(pop) ; 10
(push) ; 10
; [else-branch: 3276 | p1_23@1143@01]
; [eval] !(perm(_MaySet(self_1, 1888441915154752436293)) > none)
; [eval] perm(_MaySet(self_1, 1888441915154752436293)) > none
; [eval] perm(_MaySet(self_1, 1888441915154752436293))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [exec]
; p4_11 := p2_23 &&
;   !(perm(_MaySet_0(self_1_0, 1888441915154752436293)) > none)
; [eval] p2_23 && !(perm(_MaySet_0(self_1_0, 1888441915154752436293)) > none)
(push) ; 9
; [then-branch: 3277 | !(p2_23@1144@01) | live]
; [else-branch: 3277 | p2_23@1144@01 | live]
(push) ; 10
; [then-branch: 3277 | !(p2_23@1144@01)]
(assert (not p2_23@1144@01))
(pop) ; 10
(push) ; 10
; [else-branch: 3277 | p2_23@1144@01]
; [eval] !(perm(_MaySet_0(self_1_0, 1888441915154752436293)) > none)
; [eval] perm(_MaySet_0(self_1_0, 1888441915154752436293)) > none
; [eval] perm(_MaySet_0(self_1_0, 1888441915154752436293))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3278 | p1_23@1143@01 | live]
; [else-branch: 3278 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3278 | p1_23@1143@01]
; [exec]
; exhale acc(_MaySet(self_1, 1888441915154752436293), write)
; [exec]
; inhale acc(self_1.Example_f, write)
(declare-const $t@1176@01 $Ref)
(assert (not (= self@1151@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3279 | p2_23@1144@01 | live]
; [else-branch: 3279 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3279 | p2_23@1144@01]
; [exec]
; exhale acc(_MaySet_0(self_1_0, 1888441915154752436293), write)
; [exec]
; inhale acc(self_1_0.Example_fp, write)
(declare-const $t@1177@01 $Ref)
(assert (not (= self_3@1152@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3280 | p1_23@1143@01 | live]
; [else-branch: 3280 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3280 | p1_23@1143@01]
; [exec]
; self_1.Example_f := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 12
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 12
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const Example_f@1178@01 $Ref)
(assert (= Example_f@1178@01 (__prim__int___box__ $Snap.unit 0)))
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3281 | p2_23@1144@01 | live]
; [else-branch: 3281 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3281 | p2_23@1144@01]
; [exec]
; self_1_0.Example_fp := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const Example_fp@1179@01 $Ref)
(assert (= Example_fp@1179@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; p1_25 := p1_23 && perm(_MaySet(self_1, 1906888659228461987909)) > none
; [eval] p1_23 && perm(_MaySet(self_1, 1906888659228461987909)) > none
(push) ; 13
; [then-branch: 3282 | !(p1_23@1143@01) | live]
; [else-branch: 3282 | p1_23@1143@01 | live]
(push) ; 14
; [then-branch: 3282 | !(p1_23@1143@01)]
(assert (not p1_23@1143@01))
(pop) ; 14
(push) ; 14
; [else-branch: 3282 | p1_23@1143@01]
; [eval] perm(_MaySet(self_1, 1906888659228461987909)) > none
; [eval] perm(_MaySet(self_1, 1906888659228461987909))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [exec]
; p2_25 := p2_23 && perm(_MaySet_0(self_1_0, 1906888659228461987909)) > none
; [eval] p2_23 && perm(_MaySet_0(self_1_0, 1906888659228461987909)) > none
(push) ; 13
; [then-branch: 3283 | !(p2_23@1144@01) | live]
; [else-branch: 3283 | p2_23@1144@01 | live]
(push) ; 14
; [then-branch: 3283 | !(p2_23@1144@01)]
(assert (not p2_23@1144@01))
(pop) ; 14
(push) ; 14
; [else-branch: 3283 | p2_23@1144@01]
; [eval] perm(_MaySet_0(self_1_0, 1906888659228461987909)) > none
; [eval] perm(_MaySet_0(self_1_0, 1906888659228461987909))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [exec]
; p3_12 := p1_23 && !(perm(_MaySet(self_1, 1906888659228461987909)) > none)
; [eval] p1_23 && !(perm(_MaySet(self_1, 1906888659228461987909)) > none)
(push) ; 13
; [then-branch: 3284 | !(p1_23@1143@01) | live]
; [else-branch: 3284 | p1_23@1143@01 | live]
(push) ; 14
; [then-branch: 3284 | !(p1_23@1143@01)]
(assert (not p1_23@1143@01))
(pop) ; 14
(push) ; 14
; [else-branch: 3284 | p1_23@1143@01]
; [eval] !(perm(_MaySet(self_1, 1906888659228461987909)) > none)
; [eval] perm(_MaySet(self_1, 1906888659228461987909)) > none
; [eval] perm(_MaySet(self_1, 1906888659228461987909))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [exec]
; p4_12 := p2_23 &&
;   !(perm(_MaySet_0(self_1_0, 1906888659228461987909)) > none)
; [eval] p2_23 && !(perm(_MaySet_0(self_1_0, 1906888659228461987909)) > none)
(push) ; 13
; [then-branch: 3285 | !(p2_23@1144@01) | live]
; [else-branch: 3285 | p2_23@1144@01 | live]
(push) ; 14
; [then-branch: 3285 | !(p2_23@1144@01)]
(assert (not p2_23@1144@01))
(pop) ; 14
(push) ; 14
; [else-branch: 3285 | p2_23@1144@01]
; [eval] !(perm(_MaySet_0(self_1_0, 1906888659228461987909)) > none)
; [eval] perm(_MaySet_0(self_1_0, 1906888659228461987909)) > none
; [eval] perm(_MaySet_0(self_1_0, 1906888659228461987909))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3286 | p1_23@1143@01 | live]
; [else-branch: 3286 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3286 | p1_23@1143@01]
; [exec]
; exhale acc(_MaySet(self_1, 1906888659228461987909), write)
; [exec]
; inhale acc(self_1.Example_g, write)
(declare-const $t@1180@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3287 | p2_23@1144@01 | live]
; [else-branch: 3287 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3287 | p2_23@1144@01]
; [exec]
; exhale acc(_MaySet_0(self_1_0, 1906888659228461987909), write)
; [exec]
; inhale acc(self_1_0.Example_gp, write)
(declare-const $t@1181@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3288 | p1_23@1143@01 | live]
; [else-branch: 3288 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 3288 | p1_23@1143@01]
; [exec]
; self_1.Example_g := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 16
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 16
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const Example_g@1182@01 $Ref)
(assert (= Example_g@1182@01 (__prim__int___box__ $Snap.unit 1)))
(push) ; 16
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3289 | p2_23@1144@01 | live]
; [else-branch: 3289 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3289 | p2_23@1144@01]
; [exec]
; self_1_0.Example_gp := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 17
(pop) ; 17
; Joined path conditions
(declare-const Example_gp@1183@01 $Ref)
(assert (= Example_gp@1183@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; assert true
; [eval] p1_23 ==> true
(push) ; 17
(push) ; 18
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3290 | p1_23@1143@01 | live]
; [else-branch: 3290 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 3290 | p1_23@1143@01]
(pop) ; 18
(pop) ; 17
; Joined path conditions
; [eval] p2_23 ==> true
(push) ; 17
(push) ; 18
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3291 | p2_23@1144@01 | live]
; [else-branch: 3291 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 3291 | p2_23@1144@01]
(pop) ; 18
(pop) ; 17
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3292 | p1_23@1143@01 | live]
; [else-branch: 3292 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 3292 | p1_23@1143@01]
(push) ; 18
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3293 | p2_23@1144@01 | live]
; [else-branch: 3293 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 3293 | p2_23@1144@01]
; [eval] p1_23 ==> issubtype(typeof(self.Example_f), int())
(push) ; 19
(push) ; 20
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3294 | p1_23@1143@01 | live]
; [else-branch: 3294 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 3294 | p1_23@1143@01]
; [eval] issubtype(typeof(self.Example_f), int())
; [eval] typeof(self.Example_f)
; [eval] int()
(pop) ; 20
(pop) ; 19
; Joined path conditions
(push) ; 19
(assert (not (=>
  p1_23@1143@01
  (issubtype<Bool> (typeof<PyType> Example_f@1178@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_23@1143@01
  (issubtype<Bool> (typeof<PyType> Example_f@1178@01) (as int<PyType>  PyType))))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_fp), int())
(push) ; 19
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3295 | p2_23@1144@01 | live]
; [else-branch: 3295 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 3295 | p2_23@1144@01]
; [eval] issubtype(typeof(self_3.Example_fp), int())
; [eval] typeof(self_3.Example_fp)
; [eval] int()
(pop) ; 20
(pop) ; 19
; Joined path conditions
(push) ; 19
(assert (not (=>
  p2_23@1144@01
  (issubtype<Bool> (typeof<PyType> Example_fp@1179@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_23@1144@01
  (issubtype<Bool> (typeof<PyType> Example_fp@1179@01) (as int<PyType>  PyType))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3296 | p1_23@1143@01 | live]
; [else-branch: 3296 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 3296 | p1_23@1143@01]
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3297 | p2_23@1144@01 | live]
; [else-branch: 3297 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 3297 | p2_23@1144@01]
; [eval] p1_23 ==> issubtype(typeof(self.Example_g), int())
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3298 | p1_23@1143@01 | live]
; [else-branch: 3298 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3298 | p1_23@1143@01]
; [eval] issubtype(typeof(self.Example_g), int())
; [eval] typeof(self.Example_g)
; [eval] int()
(pop) ; 22
(pop) ; 21
; Joined path conditions
(push) ; 21
(assert (not (=>
  p1_23@1143@01
  (issubtype<Bool> (typeof<PyType> Example_g@1182@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_23@1143@01
  (issubtype<Bool> (typeof<PyType> Example_g@1182@01) (as int<PyType>  PyType))))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_gp), int())
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3299 | p2_23@1144@01 | live]
; [else-branch: 3299 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3299 | p2_23@1144@01]
; [eval] issubtype(typeof(self_3.Example_gp), int())
; [eval] typeof(self_3.Example_gp)
; [eval] int()
(pop) ; 22
(pop) ; 21
; Joined path conditions
(push) ; 21
(assert (not (=>
  p2_23@1144@01
  (issubtype<Bool> (typeof<PyType> Example_gp@1183@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_23@1144@01
  (issubtype<Bool> (typeof<PyType> Example_gp@1183@01) (as int<PyType>  PyType))))
; [eval] p1_23 ==> int___eq__(self.Example_f, __prim__int___box__(0))
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3300 | p1_23@1143@01 | live]
; [else-branch: 3300 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3300 | p1_23@1143@01]
; [eval] int___eq__(self.Example_f, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 23
(pop) ; 23
; Joined path conditions
(push) ; 23
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> Example_f@1178@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Example_f@1178@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Example_f@1178@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Example_f@1178@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Example_f@1178@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (=>
  p1_23@1143@01
  (and
    (issubtype<Bool> (typeof<PyType> Example_f@1178@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Example_f@1178@01 (__prim__int___box__ $Snap.unit 0)))))
(push) ; 21
(assert (not (=>
  p1_23@1143@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Example_f@1178@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_23@1143@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Example_f@1178@01 (__prim__int___box__ $Snap.unit 0))))
; [eval] p2_23 ==> int___eq__(self_3.Example_fp, __prim__int___box__(0))
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3301 | p2_23@1144@01 | live]
; [else-branch: 3301 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3301 | p2_23@1144@01]
; [eval] int___eq__(self_3.Example_fp, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 23
(pop) ; 23
; Joined path conditions
(push) ; 23
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> Example_fp@1179@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Example_fp@1179@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Example_fp@1179@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Example_fp@1179@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Example_fp@1179@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (=>
  p2_23@1144@01
  (and
    (issubtype<Bool> (typeof<PyType> Example_fp@1179@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Example_fp@1179@01 (__prim__int___box__ $Snap.unit 0)))))
(push) ; 21
(assert (not (=>
  p2_23@1144@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Example_fp@1179@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_23@1144@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Example_fp@1179@01 (__prim__int___box__ $Snap.unit 0))))
; [eval] p1_23 ==> int___eq__(self.Example_g, __prim__int___box__(1))
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3302 | p1_23@1143@01 | live]
; [else-branch: 3302 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3302 | p1_23@1143@01]
; [eval] int___eq__(self.Example_g, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 23
(pop) ; 23
; Joined path conditions
(push) ; 23
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> Example_g@1182@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Example_g@1182@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Example_g@1182@01 (__prim__int___box__ $Snap.unit 1)))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Example_g@1182@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Example_g@1182@01 (__prim__int___box__ $Snap.unit 1))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (=>
  p1_23@1143@01
  (and
    (issubtype<Bool> (typeof<PyType> Example_g@1182@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Example_g@1182@01 (__prim__int___box__ $Snap.unit 1)))))
(push) ; 21
(assert (not (=>
  p1_23@1143@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Example_g@1182@01 (__prim__int___box__ $Snap.unit 1)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_23@1143@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Example_g@1182@01 (__prim__int___box__ $Snap.unit 1))))
; [eval] p2_23 ==> int___eq__(self_3.Example_gp, __prim__int___box__(1))
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3303 | p2_23@1144@01 | live]
; [else-branch: 3303 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3303 | p2_23@1144@01]
; [eval] int___eq__(self_3.Example_gp, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 23
(pop) ; 23
; Joined path conditions
(push) ; 23
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> Example_gp@1183@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Example_gp@1183@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Example_gp@1183@01 (__prim__int___box__ $Snap.unit 1)))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Example_gp@1183@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Example_gp@1183@01 (__prim__int___box__ $Snap.unit 1))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (=>
  p2_23@1144@01
  (and
    (issubtype<Bool> (typeof<PyType> Example_gp@1183@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Example_gp@1183@01 (__prim__int___box__ $Snap.unit 1)))))
(push) ; 21
(assert (not (=>
  p2_23@1144@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Example_gp@1183@01 (__prim__int___box__ $Snap.unit 1)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_23@1144@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Example_gp@1183@01 (__prim__int___box__ $Snap.unit 1))))
; [eval] p1_23 ==> (forperm _r_36: Ref [MustInvokeBounded(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBounded] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: false)))
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3304 | p1_23@1143@01 | live]
; [else-branch: 3304 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3304 | p1_23@1143@01]
; [eval] (forperm _r_36: Ref [MustInvokeBounded(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBounded] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_36: Ref [MustInvokeBounded(_r_36)] :: false)
(push) ; 23
; [then-branch: 3305 | False | live]
; [else-branch: 3305 | True | live]
(push) ; 24
; [then-branch: 3305 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 3305 | True]
; [eval] (forperm _r_36: Ref [MustInvokeUnbounded(_r_36)] :: false)
(push) ; 25
; [then-branch: 3306 | False | live]
; [else-branch: 3306 | True | live]
(push) ; 26
; [then-branch: 3306 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 3306 | True]
; [eval] (forperm _r_36: Ref [_r_36.MustReleaseBounded] :: false)
(push) ; 27
; [then-branch: 3307 | False | live]
; [else-branch: 3307 | True | live]
(push) ; 28
; [then-branch: 3307 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 3307 | True]
; [eval] (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: false)
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] p2_23 ==> (forperm _r_36: Ref [MustInvokeBounded_0(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded_0(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBoundedp] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnboundedp] :: false)))
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3308 | p2_23@1144@01 | live]
; [else-branch: 3308 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3308 | p2_23@1144@01]
; [eval] (forperm _r_36: Ref [MustInvokeBounded_0(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded_0(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBoundedp] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_36: Ref [MustInvokeBounded_0(_r_36)] :: false)
(push) ; 23
; [then-branch: 3309 | False | live]
; [else-branch: 3309 | True | live]
(push) ; 24
; [then-branch: 3309 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 3309 | True]
; [eval] (forperm _r_36: Ref [MustInvokeUnbounded_0(_r_36)] :: false)
(push) ; 25
; [then-branch: 3310 | False | live]
; [else-branch: 3310 | True | live]
(push) ; 26
; [then-branch: 3310 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 3310 | True]
; [eval] (forperm _r_36: Ref [_r_36.MustReleaseBoundedp] :: false)
(push) ; 27
; [then-branch: 3311 | False | live]
; [else-branch: 3311 | True | live]
(push) ; 28
; [then-branch: 3311 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 3311 | True]
; [eval] (forperm _r_36: Ref [_r_36.MustReleaseUnboundedp] :: false)
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
; [eval] !p2_23
; [then-branch: 3312 | !(p2_23@1144@01) | dead]
; [else-branch: 3312 | p2_23@1144@01 | live]
(push) ; 16
; [else-branch: 3312 | p2_23@1144@01]
(pop) ; 16
(pop) ; 15
; [eval] !p1_23
; [then-branch: 3313 | !(p1_23@1143@01) | dead]
; [else-branch: 3313 | p1_23@1143@01 | live]
(push) ; 15
; [else-branch: 3313 | p1_23@1143@01]
(pop) ; 15
(pop) ; 14
; [eval] !p2_25
; [then-branch: 3314 | !(p2_23@1144@01) | dead]
; [else-branch: 3314 | p2_23@1144@01 | live]
(push) ; 14
; [else-branch: 3314 | p2_23@1144@01]
(pop) ; 14
(pop) ; 13
; [eval] !p1_25
; [then-branch: 3315 | !(p1_23@1143@01) | dead]
; [else-branch: 3315 | p1_23@1143@01 | live]
(push) ; 13
; [else-branch: 3315 | p1_23@1143@01]
(pop) ; 13
(pop) ; 12
; [eval] !p2_23
; [then-branch: 3316 | !(p2_23@1144@01) | dead]
; [else-branch: 3316 | p2_23@1144@01 | live]
(push) ; 12
; [else-branch: 3316 | p2_23@1144@01]
(pop) ; 12
(pop) ; 11
; [eval] !p1_23
; [then-branch: 3317 | !(p1_23@1143@01) | dead]
; [else-branch: 3317 | p1_23@1143@01 | live]
(push) ; 11
; [else-branch: 3317 | p1_23@1143@01]
(pop) ; 11
(pop) ; 10
; [eval] !p2_24
; [then-branch: 3318 | !(p2_23@1144@01) | dead]
; [else-branch: 3318 | p2_23@1144@01 | live]
(push) ; 10
; [else-branch: 3318 | p2_23@1144@01]
(pop) ; 10
(pop) ; 9
; [eval] !p1_24
; [then-branch: 3319 | !(p1_23@1143@01) | dead]
; [else-branch: 3319 | p1_23@1143@01 | live]
(push) ; 9
; [else-branch: 3319 | p1_23@1143@01]
(pop) ; 9
(pop) ; 8
; [eval] !p2_23
; [then-branch: 3320 | !(p2_23@1144@01) | dead]
; [else-branch: 3320 | p2_23@1144@01 | live]
(push) ; 8
; [else-branch: 3320 | p2_23@1144@01]
(pop) ; 8
(pop) ; 7
; [eval] !p1_23
; [then-branch: 3321 | !(p1_23@1143@01) | dead]
; [else-branch: 3321 | p1_23@1143@01 | live]
(push) ; 7
; [else-branch: 3321 | p1_23@1143@01]
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 3243 | !(p2_23@1144@01)]
(assert (not p2_23@1144@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3322 | p1_23@1143@01 | live]
; [else-branch: 3322 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 3322 | p1_23@1143@01]
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))
; [then-branch: 3323 | p2_23@1144@01 | dead]
; [else-branch: 3323 | !(p2_23@1144@01) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 3323 | !(p2_23@1144@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self), Example())
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3324 | p1_23@1143@01 | live]
; [else-branch: 3324 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3324 | p1_23@1143@01]
; [eval] issubtype(typeof(self), Example())
; [eval] typeof(self)
; [eval] Example()
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  p1_23@1143@01
  (issubtype<Bool> (typeof<PyType> self@1151@01) (as Example<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3), Example())
(push) ; 6
; [then-branch: 3325 | p2_23@1144@01 | dead]
; [else-branch: 3325 | !(p2_23@1144@01) | live]
(push) ; 7
; [else-branch: 3325 | !(p2_23@1144@01)]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> self != null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3326 | p1_23@1143@01 | live]
; [else-branch: 3326 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3326 | p1_23@1143@01]
; [eval] self != null
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> self_3 != null
(push) ; 6
; [then-branch: 3327 | p2_23@1144@01 | dead]
; [else-branch: 3327 | !(p2_23@1144@01) | live]
(push) ; 7
; [else-branch: 3327 | !(p2_23@1144@01)]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> true
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3328 | p1_23@1143@01 | live]
; [else-branch: 3328 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3328 | p1_23@1143@01]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> true
(push) ; 6
; [then-branch: 3329 | p2_23@1144@01 | dead]
; [else-branch: 3329 | !(p2_23@1144@01) | live]
(push) ; 7
; [else-branch: 3329 | !(p2_23@1144@01)]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(declare-const $t@1184@01 $Snap)
(assert (= $t@1184@01 ($Snap.combine ($Snap.first $t@1184@01) ($Snap.second $t@1184@01))))
(assert (= ($Snap.first $t@1184@01) $Snap.unit))
; [eval] p1_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3330 | p1_23@1143@01 | live]
; [else-branch: 3330 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3330 | p1_23@1143@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 9
; [then-branch: 3331 | False | live]
; [else-branch: 3331 | True | live]
(push) ; 10
; [then-branch: 3331 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3331 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156)
(push) ; 11
; [then-branch: 3332 | False | live]
; [else-branch: 3332 | True | live]
(push) ; 12
; [then-branch: 3332 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 3332 | True]
; [eval] _residue_156 <= _current_wait_level_156
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=> p1_23@1143@01 (<= _residue_156@1149@01 _current_wait_level_156@1153@01)))
(assert (=
  ($Snap.second $t@1184@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1184@01))
    ($Snap.second ($Snap.second $t@1184@01)))))
(assert (= ($Snap.first ($Snap.second $t@1184@01)) $Snap.unit))
; [eval] p2_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
(push) ; 7
; [then-branch: 3333 | p2_23@1144@01 | dead]
; [else-branch: 3333 | !(p2_23@1144@01) | live]
(push) ; 8
; [else-branch: 3333 | !(p2_23@1144@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@1184@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1184@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3334 | p1_23@1143@01 | live]
; [else-branch: 3334 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3334 | p1_23@1143@01]
(assert (not (= self@1151@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))
; [then-branch: 3335 | p2_23@1144@01 | dead]
; [else-branch: 3335 | !(p2_23@1144@01) | live]
(push) ; 8
; [else-branch: 3335 | !(p2_23@1144@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_f), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3336 | p1_23@1143@01 | live]
; [else-branch: 3336 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3336 | p1_23@1143@01]
; [eval] issubtype(typeof(self.Example_f), int())
; [eval] typeof(self.Example_f)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  p1_23@1143@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1184@01))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_fp), int())
(push) ; 9
; [then-branch: 3337 | p2_23@1144@01 | dead]
; [else-branch: 3337 | !(p2_23@1144@01) | live]
(push) ; 10
; [else-branch: 3337 | !(p2_23@1144@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3338 | p1_23@1143@01 | live]
; [else-branch: 3338 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3338 | p1_23@1143@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))))))
; [then-branch: 3339 | p2_23@1144@01 | dead]
; [else-branch: 3339 | !(p2_23@1144@01) | live]
(push) ; 10
; [else-branch: 3339 | !(p2_23@1144@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_g), int())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3340 | p1_23@1143@01 | live]
; [else-branch: 3340 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3340 | p1_23@1143@01]
; [eval] issubtype(typeof(self.Example_g), int())
; [eval] typeof(self.Example_g)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  p1_23@1143@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_gp), int())
(push) ; 11
; [then-branch: 3341 | p2_23@1144@01 | dead]
; [else-branch: 3341 | !(p2_23@1144@01) | live]
(push) ; 12
; [else-branch: 3341 | !(p2_23@1144@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_f, __prim__int___box__(0))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3342 | p1_23@1143@01 | live]
; [else-branch: 3342 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3342 | p1_23@1143@01]
; [eval] int___eq__(self.Example_f, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1184@01))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1184@01))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1184@01)))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1184@01))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1184@01)))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  p1_23@1143@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1184@01))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1184@01)))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p1_23@1143@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1184@01)))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_fp, __prim__int___box__(0))
(push) ; 11
; [then-branch: 3343 | p2_23@1144@01 | dead]
; [else-branch: 3343 | !(p2_23@1144@01) | live]
(push) ; 12
; [else-branch: 3343 | !(p2_23@1144@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_g, __prim__int___box__(1))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3344 | p1_23@1143@01 | live]
; [else-branch: 3344 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3344 | p1_23@1143@01]
; [eval] int___eq__(self.Example_g, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  p1_23@1143@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p1_23@1143@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_gp, __prim__int___box__(1))
(push) ; 11
; [then-branch: 3345 | p2_23@1144@01 | dead]
; [else-branch: 3345 | !(p2_23@1144@01) | live]
(push) ; 12
; [else-branch: 3345 | !(p2_23@1144@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3346 | p1_23@1143@01 | live]
; [else-branch: 3346 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3346 | p1_23@1143@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1184@01)))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> true
(push) ; 11
; [then-branch: 3347 | p2_23@1144@01 | dead]
; [else-branch: 3347 | !(p2_23@1144@01) | live]
(push) ; 12
; [else-branch: 3347 | !(p2_23@1144@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [exec]
; var _err: Ref
(declare-const _err@1185@01 $Ref)
; [exec]
; var _err_12: Ref
(declare-const _err_12@1186@01 $Ref)
; [exec]
; var self_1: Ref
(declare-const self_1@1187@01 $Ref)
; [exec]
; var self_1_0: Ref
(declare-const self_1_0@1188@01 $Ref)
; [exec]
; var _cwl_156: Perm
(declare-const _cwl_156@1189@01 $Perm)
; [exec]
; var _cwl_156_0: Perm
(declare-const _cwl_156_0@1190@01 $Perm)
; [exec]
; var _method_measures_156: Seq[Measure$]
(declare-const _method_measures_156@1191@01 Seq<Measure$>)
; [exec]
; var _method_measures_156_0: Seq[Measure$]
(declare-const _method_measures_156_0@1192@01 Seq<Measure$>)
; [exec]
; var p1_24: Bool
(declare-const p1_24@1193@01 Bool)
; [exec]
; var p2_24: Bool
(declare-const p2_24@1194@01 Bool)
; [exec]
; var p3_11: Bool
(declare-const p3_11@1195@01 Bool)
; [exec]
; var p4_11: Bool
(declare-const p4_11@1196@01 Bool)
; [exec]
; var p1_25: Bool
(declare-const p1_25@1197@01 Bool)
; [exec]
; var p2_25: Bool
(declare-const p2_25@1198@01 Bool)
; [exec]
; var p3_12: Bool
(declare-const p3_12@1199@01 Bool)
; [exec]
; var p4_12: Bool
(declare-const p4_12@1200@01 Bool)
; [exec]
; inhale p1_23
(declare-const $t@1201@01 $Snap)
(assert (= $t@1201@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3348 | p1_23@1143@01 | live]
; [else-branch: 3348 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3348 | p1_23@1143@01]
; [exec]
; _method_measures_156 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self) == Example()
(declare-const $t@1202@01 $Snap)
(assert (= $t@1202@01 $Snap.unit))
; [eval] typeof(self) == Example()
; [eval] typeof(self)
; [eval] Example()
(assert (= (typeof<PyType> self@1151@01) (as Example<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_1 := self
; [then-branch: 3349 | p2_23@1144@01 | dead]
; [else-branch: 3349 | !(p2_23@1144@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 3349 | !(p2_23@1144@01)]
(pop) ; 8
; [eval] !p2_23
(push) ; 8
(set-option :timeout 10)
(assert (not p2_23@1144@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3350 | !(p2_23@1144@01) | live]
; [else-branch: 3350 | p2_23@1144@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3350 | !(p2_23@1144@01)]
; [exec]
; p1_24 := p1_23 && perm(_MaySet(self_1, 1888441915154752436293)) > none
; [eval] p1_23 && perm(_MaySet(self_1, 1888441915154752436293)) > none
(push) ; 9
; [then-branch: 3351 | !(p1_23@1143@01) | live]
; [else-branch: 3351 | p1_23@1143@01 | live]
(push) ; 10
; [then-branch: 3351 | !(p1_23@1143@01)]
(assert (not p1_23@1143@01))
(pop) ; 10
(push) ; 10
; [else-branch: 3351 | p1_23@1143@01]
; [eval] perm(_MaySet(self_1, 1888441915154752436293)) > none
; [eval] perm(_MaySet(self_1, 1888441915154752436293))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or p1_23@1143@01 (not p1_23@1143@01)))
; [exec]
; p2_24 := p2_23 && perm(_MaySet_0(self_1_0, 1888441915154752436293)) > none
; [eval] p2_23 && perm(_MaySet_0(self_1_0, 1888441915154752436293)) > none
(push) ; 9
; [then-branch: 3352 | !(p2_23@1144@01) | live]
; [else-branch: 3352 | p2_23@1144@01 | live]
(push) ; 10
; [then-branch: 3352 | !(p2_23@1144@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 3352 | p2_23@1144@01]
(assert p2_23@1144@01)
; [eval] perm(_MaySet_0(self_1_0, 1888441915154752436293)) > none
; [eval] perm(_MaySet_0(self_1_0, 1888441915154752436293))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or p2_23@1144@01 (not p2_23@1144@01)))
; [exec]
; p3_11 := p1_23 && !(perm(_MaySet(self_1, 1888441915154752436293)) > none)
; [eval] p1_23 && !(perm(_MaySet(self_1, 1888441915154752436293)) > none)
(push) ; 9
; [then-branch: 3353 | !(p1_23@1143@01) | live]
; [else-branch: 3353 | p1_23@1143@01 | live]
(push) ; 10
; [then-branch: 3353 | !(p1_23@1143@01)]
(assert (not p1_23@1143@01))
(pop) ; 10
(push) ; 10
; [else-branch: 3353 | p1_23@1143@01]
; [eval] !(perm(_MaySet(self_1, 1888441915154752436293)) > none)
; [eval] perm(_MaySet(self_1, 1888441915154752436293)) > none
; [eval] perm(_MaySet(self_1, 1888441915154752436293))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [exec]
; p4_11 := p2_23 &&
;   !(perm(_MaySet_0(self_1_0, 1888441915154752436293)) > none)
; [eval] p2_23 && !(perm(_MaySet_0(self_1_0, 1888441915154752436293)) > none)
(push) ; 9
; [then-branch: 3354 | !(p2_23@1144@01) | live]
; [else-branch: 3354 | p2_23@1144@01 | live]
(push) ; 10
; [then-branch: 3354 | !(p2_23@1144@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 3354 | p2_23@1144@01]
(assert p2_23@1144@01)
; [eval] !(perm(_MaySet_0(self_1_0, 1888441915154752436293)) > none)
; [eval] perm(_MaySet_0(self_1_0, 1888441915154752436293)) > none
; [eval] perm(_MaySet_0(self_1_0, 1888441915154752436293))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3355 | p1_23@1143@01 | live]
; [else-branch: 3355 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3355 | p1_23@1143@01]
; [exec]
; exhale acc(_MaySet(self_1, 1888441915154752436293), write)
; [exec]
; inhale acc(self_1.Example_f, write)
(declare-const $t@1203@01 $Ref)
(assert (not (= self@1151@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [then-branch: 3356 | False | dead]
; [else-branch: 3356 | True | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 3356 | True]
(pop) ; 10
; [eval] !p2_24
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3357 | True | live]
; [else-branch: 3357 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3357 | True]
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3358 | p1_23@1143@01 | live]
; [else-branch: 3358 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3358 | p1_23@1143@01]
; [exec]
; self_1.Example_f := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 12
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 12
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const Example_f@1204@01 $Ref)
(assert (= Example_f@1204@01 (__prim__int___box__ $Snap.unit 0)))
; [then-branch: 3359 | p2_23@1144@01 | dead]
; [else-branch: 3359 | !(p2_23@1144@01) | live]
(push) ; 12
; [else-branch: 3359 | !(p2_23@1144@01)]
(pop) ; 12
; [eval] !p2_23
(push) ; 12
(set-option :timeout 10)
(assert (not p2_23@1144@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3360 | !(p2_23@1144@01) | live]
; [else-branch: 3360 | p2_23@1144@01 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3360 | !(p2_23@1144@01)]
; [exec]
; p1_25 := p1_23 && perm(_MaySet(self_1, 1906888659228461987909)) > none
; [eval] p1_23 && perm(_MaySet(self_1, 1906888659228461987909)) > none
(push) ; 13
; [then-branch: 3361 | !(p1_23@1143@01) | live]
; [else-branch: 3361 | p1_23@1143@01 | live]
(push) ; 14
; [then-branch: 3361 | !(p1_23@1143@01)]
(assert (not p1_23@1143@01))
(pop) ; 14
(push) ; 14
; [else-branch: 3361 | p1_23@1143@01]
; [eval] perm(_MaySet(self_1, 1906888659228461987909)) > none
; [eval] perm(_MaySet(self_1, 1906888659228461987909))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [exec]
; p2_25 := p2_23 && perm(_MaySet_0(self_1_0, 1906888659228461987909)) > none
; [eval] p2_23 && perm(_MaySet_0(self_1_0, 1906888659228461987909)) > none
(push) ; 13
; [then-branch: 3362 | !(p2_23@1144@01) | live]
; [else-branch: 3362 | p2_23@1144@01 | live]
(push) ; 14
; [then-branch: 3362 | !(p2_23@1144@01)]
(pop) ; 14
(push) ; 14
; [else-branch: 3362 | p2_23@1144@01]
(assert p2_23@1144@01)
; [eval] perm(_MaySet_0(self_1_0, 1906888659228461987909)) > none
; [eval] perm(_MaySet_0(self_1_0, 1906888659228461987909))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [exec]
; p3_12 := p1_23 && !(perm(_MaySet(self_1, 1906888659228461987909)) > none)
; [eval] p1_23 && !(perm(_MaySet(self_1, 1906888659228461987909)) > none)
(push) ; 13
; [then-branch: 3363 | !(p1_23@1143@01) | live]
; [else-branch: 3363 | p1_23@1143@01 | live]
(push) ; 14
; [then-branch: 3363 | !(p1_23@1143@01)]
(assert (not p1_23@1143@01))
(pop) ; 14
(push) ; 14
; [else-branch: 3363 | p1_23@1143@01]
; [eval] !(perm(_MaySet(self_1, 1906888659228461987909)) > none)
; [eval] perm(_MaySet(self_1, 1906888659228461987909)) > none
; [eval] perm(_MaySet(self_1, 1906888659228461987909))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [exec]
; p4_12 := p2_23 &&
;   !(perm(_MaySet_0(self_1_0, 1906888659228461987909)) > none)
; [eval] p2_23 && !(perm(_MaySet_0(self_1_0, 1906888659228461987909)) > none)
(push) ; 13
; [then-branch: 3364 | !(p2_23@1144@01) | live]
; [else-branch: 3364 | p2_23@1144@01 | live]
(push) ; 14
; [then-branch: 3364 | !(p2_23@1144@01)]
(pop) ; 14
(push) ; 14
; [else-branch: 3364 | p2_23@1144@01]
(assert p2_23@1144@01)
; [eval] !(perm(_MaySet_0(self_1_0, 1906888659228461987909)) > none)
; [eval] perm(_MaySet_0(self_1_0, 1906888659228461987909)) > none
; [eval] perm(_MaySet_0(self_1_0, 1906888659228461987909))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3365 | p1_23@1143@01 | live]
; [else-branch: 3365 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 3365 | p1_23@1143@01]
; [exec]
; exhale acc(_MaySet(self_1, 1906888659228461987909), write)
; [exec]
; inhale acc(self_1.Example_g, write)
(declare-const $t@1205@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [then-branch: 3366 | False | dead]
; [else-branch: 3366 | True | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 3366 | True]
(pop) ; 14
; [eval] !p2_25
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3367 | True | live]
; [else-branch: 3367 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3367 | True]
(push) ; 15
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3368 | p1_23@1143@01 | live]
; [else-branch: 3368 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 3368 | p1_23@1143@01]
; [exec]
; self_1.Example_g := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 16
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 16
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const Example_g@1206@01 $Ref)
(assert (= Example_g@1206@01 (__prim__int___box__ $Snap.unit 1)))
; [then-branch: 3369 | p2_23@1144@01 | dead]
; [else-branch: 3369 | !(p2_23@1144@01) | live]
(push) ; 16
; [else-branch: 3369 | !(p2_23@1144@01)]
(pop) ; 16
; [eval] !p2_23
(push) ; 16
(set-option :timeout 10)
(assert (not p2_23@1144@01))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3370 | !(p2_23@1144@01) | live]
; [else-branch: 3370 | p2_23@1144@01 | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 3370 | !(p2_23@1144@01)]
; [exec]
; assert true
; [eval] p1_23 ==> true
(push) ; 17
(push) ; 18
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3371 | p1_23@1143@01 | live]
; [else-branch: 3371 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 3371 | p1_23@1143@01]
(pop) ; 18
(pop) ; 17
; Joined path conditions
; [eval] p2_23 ==> true
(push) ; 17
; [then-branch: 3372 | p2_23@1144@01 | dead]
; [else-branch: 3372 | !(p2_23@1144@01) | live]
(push) ; 18
; [else-branch: 3372 | !(p2_23@1144@01)]
(pop) ; 18
(pop) ; 17
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3373 | p1_23@1143@01 | live]
; [else-branch: 3373 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 3373 | p1_23@1143@01]
; [then-branch: 3374 | p2_23@1144@01 | dead]
; [else-branch: 3374 | !(p2_23@1144@01) | live]
(push) ; 18
; [else-branch: 3374 | !(p2_23@1144@01)]
; [eval] p1_23 ==> issubtype(typeof(self.Example_f), int())
(push) ; 19
(push) ; 20
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3375 | p1_23@1143@01 | live]
; [else-branch: 3375 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 3375 | p1_23@1143@01]
; [eval] issubtype(typeof(self.Example_f), int())
; [eval] typeof(self.Example_f)
; [eval] int()
(pop) ; 20
(pop) ; 19
; Joined path conditions
(push) ; 19
(assert (not (=>
  p1_23@1143@01
  (issubtype<Bool> (typeof<PyType> Example_f@1204@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_23@1143@01
  (issubtype<Bool> (typeof<PyType> Example_f@1204@01) (as int<PyType>  PyType))))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_fp), int())
(push) ; 19
; [then-branch: 3376 | p2_23@1144@01 | dead]
; [else-branch: 3376 | !(p2_23@1144@01) | live]
(push) ; 20
; [else-branch: 3376 | !(p2_23@1144@01)]
(pop) ; 20
(pop) ; 19
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3377 | p1_23@1143@01 | live]
; [else-branch: 3377 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 3377 | p1_23@1143@01]
; [then-branch: 3378 | p2_23@1144@01 | dead]
; [else-branch: 3378 | !(p2_23@1144@01) | live]
(push) ; 20
; [else-branch: 3378 | !(p2_23@1144@01)]
; [eval] p1_23 ==> issubtype(typeof(self.Example_g), int())
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3379 | p1_23@1143@01 | live]
; [else-branch: 3379 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3379 | p1_23@1143@01]
; [eval] issubtype(typeof(self.Example_g), int())
; [eval] typeof(self.Example_g)
; [eval] int()
(pop) ; 22
(pop) ; 21
; Joined path conditions
(push) ; 21
(assert (not (=>
  p1_23@1143@01
  (issubtype<Bool> (typeof<PyType> Example_g@1206@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_23@1143@01
  (issubtype<Bool> (typeof<PyType> Example_g@1206@01) (as int<PyType>  PyType))))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_gp), int())
(push) ; 21
; [then-branch: 3380 | p2_23@1144@01 | dead]
; [else-branch: 3380 | !(p2_23@1144@01) | live]
(push) ; 22
; [else-branch: 3380 | !(p2_23@1144@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] p1_23 ==> int___eq__(self.Example_f, __prim__int___box__(0))
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3381 | p1_23@1143@01 | live]
; [else-branch: 3381 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3381 | p1_23@1143@01]
; [eval] int___eq__(self.Example_f, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 23
(pop) ; 23
; Joined path conditions
(push) ; 23
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> Example_f@1204@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Example_f@1204@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Example_f@1204@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Example_f@1204@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Example_f@1204@01 (__prim__int___box__ $Snap.unit 0))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (=>
  p1_23@1143@01
  (and
    (issubtype<Bool> (typeof<PyType> Example_f@1204@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Example_f@1204@01 (__prim__int___box__ $Snap.unit 0)))))
(push) ; 21
(assert (not (=>
  p1_23@1143@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Example_f@1204@01 (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_23@1143@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Example_f@1204@01 (__prim__int___box__ $Snap.unit 0))))
; [eval] p2_23 ==> int___eq__(self_3.Example_fp, __prim__int___box__(0))
(push) ; 21
; [then-branch: 3382 | p2_23@1144@01 | dead]
; [else-branch: 3382 | !(p2_23@1144@01) | live]
(push) ; 22
; [else-branch: 3382 | !(p2_23@1144@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] p1_23 ==> int___eq__(self.Example_g, __prim__int___box__(1))
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3383 | p1_23@1143@01 | live]
; [else-branch: 3383 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3383 | p1_23@1143@01]
; [eval] int___eq__(self.Example_g, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 23
(pop) ; 23
; Joined path conditions
(push) ; 23
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> Example_g@1206@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Example_g@1206@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Example_g@1206@01 (__prim__int___box__ $Snap.unit 1)))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Example_g@1206@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Example_g@1206@01 (__prim__int___box__ $Snap.unit 1))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (=>
  p1_23@1143@01
  (and
    (issubtype<Bool> (typeof<PyType> Example_g@1206@01) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Example_g@1206@01 (__prim__int___box__ $Snap.unit 1)))))
(push) ; 21
(assert (not (=>
  p1_23@1143@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Example_g@1206@01 (__prim__int___box__ $Snap.unit 1)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_23@1143@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Example_g@1206@01 (__prim__int___box__ $Snap.unit 1))))
; [eval] p2_23 ==> int___eq__(self_3.Example_gp, __prim__int___box__(1))
(push) ; 21
; [then-branch: 3384 | p2_23@1144@01 | dead]
; [else-branch: 3384 | !(p2_23@1144@01) | live]
(push) ; 22
; [else-branch: 3384 | !(p2_23@1144@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] p1_23 ==> (forperm _r_36: Ref [MustInvokeBounded(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBounded] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: false)))
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not (not p1_23@1143@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3385 | p1_23@1143@01 | live]
; [else-branch: 3385 | !(p1_23@1143@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 3385 | p1_23@1143@01]
; [eval] (forperm _r_36: Ref [MustInvokeBounded(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBounded] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_36: Ref [MustInvokeBounded(_r_36)] :: false)
(push) ; 23
; [then-branch: 3386 | False | live]
; [else-branch: 3386 | True | live]
(push) ; 24
; [then-branch: 3386 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 3386 | True]
; [eval] (forperm _r_36: Ref [MustInvokeUnbounded(_r_36)] :: false)
(push) ; 25
; [then-branch: 3387 | False | live]
; [else-branch: 3387 | True | live]
(push) ; 26
; [then-branch: 3387 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 3387 | True]
; [eval] (forperm _r_36: Ref [_r_36.MustReleaseBounded] :: false)
(push) ; 27
; [then-branch: 3388 | False | live]
; [else-branch: 3388 | True | live]
(push) ; 28
; [then-branch: 3388 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 3388 | True]
; [eval] (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: false)
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] p2_23 ==> (forperm _r_36: Ref [MustInvokeBounded_0(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded_0(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBoundedp] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnboundedp] :: false)))
(push) ; 21
; [then-branch: 3389 | p2_23@1144@01 | dead]
; [else-branch: 3389 | !(p2_23@1144@01) | live]
(push) ; 22
; [else-branch: 3389 | !(p2_23@1144@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [eval] !p1_23
; [then-branch: 3390 | !(p1_23@1143@01) | dead]
; [else-branch: 3390 | p1_23@1143@01 | live]
(push) ; 15
; [else-branch: 3390 | p1_23@1143@01]
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [eval] !p1_25
; [then-branch: 3391 | !(p1_23@1143@01) | dead]
; [else-branch: 3391 | p1_23@1143@01 | live]
(push) ; 13
; [else-branch: 3391 | p1_23@1143@01]
(pop) ; 13
(pop) ; 12
(pop) ; 11
; [eval] !p1_23
; [then-branch: 3392 | !(p1_23@1143@01) | dead]
; [else-branch: 3392 | p1_23@1143@01 | live]
(push) ; 11
; [else-branch: 3392 | p1_23@1143@01]
(pop) ; 11
(pop) ; 10
(pop) ; 9
; [eval] !p1_24
; [then-branch: 3393 | !(p1_23@1143@01) | dead]
; [else-branch: 3393 | p1_23@1143@01 | live]
(push) ; 9
; [else-branch: 3393 | p1_23@1143@01]
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [eval] !p1_23
; [then-branch: 3394 | !(p1_23@1143@01) | dead]
; [else-branch: 3394 | p1_23@1143@01 | live]
(push) ; 7
; [else-branch: 3394 | p1_23@1143@01]
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [else-branch: 3242 | !(p1_23@1143@01)]
(assert (not p1_23@1143@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_23@1144@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3395 | p2_23@1144@01 | live]
; [else-branch: 3395 | !(p2_23@1144@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3395 | p2_23@1144@01]
(assert p2_23@1144@01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))
; [then-branch: 3396 | p1_23@1143@01 | dead]
; [else-branch: 3396 | !(p1_23@1143@01) | live]
(push) ; 4
; [else-branch: 3396 | !(p1_23@1143@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3397 | p2_23@1144@01 | live]
; [else-branch: 3397 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3397 | p2_23@1144@01]
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self), Example())
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3398 | p1_23@1143@01 | dead]
; [else-branch: 3398 | !(p1_23@1143@01) | live]
(push) ; 7
; [else-branch: 3398 | !(p1_23@1143@01)]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3), Example())
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3399 | p2_23@1144@01 | live]
; [else-branch: 3399 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3399 | p2_23@1144@01]
; [eval] issubtype(typeof(self_3), Example())
; [eval] typeof(self_3)
; [eval] Example()
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  p2_23@1144@01
  (issubtype<Bool> (typeof<PyType> self_3@1152@01) (as Example<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> self != null
(push) ; 6
; [then-branch: 3400 | p1_23@1143@01 | dead]
; [else-branch: 3400 | !(p1_23@1143@01) | live]
(push) ; 7
; [else-branch: 3400 | !(p1_23@1143@01)]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> self_3 != null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3401 | p2_23@1144@01 | live]
; [else-branch: 3401 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3401 | p2_23@1144@01]
; [eval] self_3 != null
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> true
(push) ; 6
; [then-branch: 3402 | p1_23@1143@01 | dead]
; [else-branch: 3402 | !(p1_23@1143@01) | live]
(push) ; 7
; [else-branch: 3402 | !(p1_23@1143@01)]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> true
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3403 | p2_23@1144@01 | live]
; [else-branch: 3403 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3403 | p2_23@1144@01]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(declare-const $t@1207@01 $Snap)
(assert (= $t@1207@01 ($Snap.combine ($Snap.first $t@1207@01) ($Snap.second $t@1207@01))))
(assert (= ($Snap.first $t@1207@01) $Snap.unit))
; [eval] p1_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
(push) ; 7
; [then-branch: 3404 | p1_23@1143@01 | dead]
; [else-branch: 3404 | !(p1_23@1143@01) | live]
(push) ; 8
; [else-branch: 3404 | !(p1_23@1143@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second $t@1207@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1207@01))
    ($Snap.second ($Snap.second $t@1207@01)))))
(assert (= ($Snap.first ($Snap.second $t@1207@01)) $Snap.unit))
; [eval] p2_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3405 | p2_23@1144@01 | live]
; [else-branch: 3405 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3405 | p2_23@1144@01]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 9
; [then-branch: 3406 | False | live]
; [else-branch: 3406 | True | live]
(push) ; 10
; [then-branch: 3406 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3406 | True]
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0)
(push) ; 11
; [then-branch: 3407 | False | live]
; [else-branch: 3407 | True | live]
(push) ; 12
; [then-branch: 3407 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 3407 | True]
; [eval] _residue_156_0 <= _current_wait_level_156_0
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=> p2_23@1144@01 (<= _residue_156_0@1150@01 _current_wait_level_156_0@1154@01)))
(assert (=
  ($Snap.second ($Snap.second $t@1207@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1207@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))
; [then-branch: 3408 | p1_23@1143@01 | dead]
; [else-branch: 3408 | !(p1_23@1143@01) | live]
(push) ; 7
; [else-branch: 3408 | !(p1_23@1143@01)]
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1207@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3409 | p2_23@1144@01 | live]
; [else-branch: 3409 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3409 | p2_23@1144@01]
(assert (not (= self_3@1152@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_f), int())
(push) ; 9
; [then-branch: 3410 | p1_23@1143@01 | dead]
; [else-branch: 3410 | !(p1_23@1143@01) | live]
(push) ; 10
; [else-branch: 3410 | !(p1_23@1143@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_fp), int())
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3411 | p2_23@1144@01 | live]
; [else-branch: 3411 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3411 | p2_23@1144@01]
; [eval] issubtype(typeof(self_3.Example_fp), int())
; [eval] typeof(self_3.Example_fp)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  p2_23@1144@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))))))
; [then-branch: 3412 | p1_23@1143@01 | dead]
; [else-branch: 3412 | !(p1_23@1143@01) | live]
(push) ; 9
; [else-branch: 3412 | !(p1_23@1143@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))))
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3413 | p2_23@1144@01 | live]
; [else-branch: 3413 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3413 | p2_23@1144@01]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_g), int())
(push) ; 11
; [then-branch: 3414 | p1_23@1143@01 | dead]
; [else-branch: 3414 | !(p1_23@1143@01) | live]
(push) ; 12
; [else-branch: 3414 | !(p1_23@1143@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_gp), int())
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3415 | p2_23@1144@01 | live]
; [else-branch: 3415 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3415 | p2_23@1144@01]
; [eval] issubtype(typeof(self_3.Example_gp), int())
; [eval] typeof(self_3.Example_gp)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  p2_23@1144@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_f, __prim__int___box__(0))
(push) ; 11
; [then-branch: 3416 | p1_23@1143@01 | dead]
; [else-branch: 3416 | !(p1_23@1143@01) | live]
(push) ; 12
; [else-branch: 3416 | !(p1_23@1143@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_fp, __prim__int___box__(0))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3417 | p2_23@1144@01 | live]
; [else-branch: 3417 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3417 | p2_23@1144@01]
; [eval] int___eq__(self_3.Example_fp, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  p2_23@1144@01
  (and
    (__prim__int___box__%precondition $Snap.unit 0)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))) (__prim__int___box__ $Snap.unit 0)))))
(assert (=>
  p2_23@1144@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))) (__prim__int___box__ $Snap.unit 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_g, __prim__int___box__(1))
(push) ; 11
; [then-branch: 3418 | p1_23@1143@01 | dead]
; [else-branch: 3418 | !(p1_23@1143@01) | live]
(push) ; 12
; [else-branch: 3418 | !(p1_23@1143@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_gp, __prim__int___box__(1))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3419 | p2_23@1144@01 | live]
; [else-branch: 3419 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3419 | p2_23@1144@01]
; [eval] int___eq__(self_3.Example_gp, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  p2_23@1144@01
  (and
    (__prim__int___box__%precondition $Snap.unit 1)
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))))) (__prim__int___box__ $Snap.unit 1)))))
(assert (=>
  p2_23@1144@01
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))))) (__prim__int___box__ $Snap.unit 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> true
(push) ; 11
; [then-branch: 3420 | p1_23@1143@01 | dead]
; [else-branch: 3420 | !(p1_23@1143@01) | live]
(push) ; 12
; [else-branch: 3420 | !(p1_23@1143@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1207@01)))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_23@1144@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3421 | p2_23@1144@01 | live]
; [else-branch: 3421 | !(p2_23@1144@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3421 | p2_23@1144@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [exec]
; var _err: Ref
(declare-const _err@1208@01 $Ref)
; [exec]
; var _err_12: Ref
(declare-const _err_12@1209@01 $Ref)
; [exec]
; var self_1: Ref
(declare-const self_1@1210@01 $Ref)
; [exec]
; var self_1_0: Ref
(declare-const self_1_0@1211@01 $Ref)
; [exec]
; var _cwl_156: Perm
(declare-const _cwl_156@1212@01 $Perm)
; [exec]
; var _cwl_156_0: Perm
(declare-const _cwl_156_0@1213@01 $Perm)
; [exec]
; var _method_measures_156: Seq[Measure$]
(declare-const _method_measures_156@1214@01 Seq<Measure$>)
; [exec]
; var _method_measures_156_0: Seq[Measure$]
(declare-const _method_measures_156_0@1215@01 Seq<Measure$>)
; [exec]
; var p1_24: Bool
(declare-const p1_24@1216@01 Bool)
; [exec]
; var p2_24: Bool
(declare-const p2_24@1217@01 Bool)
; [exec]
; var p3_11: Bool
(declare-const p3_11@1218@01 Bool)
; [exec]
; var p4_11: Bool
(declare-const p4_11@1219@01 Bool)
; [exec]
; var p1_25: Bool
(declare-const p1_25@1220@01 Bool)
; [exec]
; var p2_25: Bool
(declare-const p2_25@1221@01 Bool)
; [exec]
; var p3_12: Bool
(declare-const p3_12@1222@01 Bool)
; [exec]
; var p4_12: Bool
(declare-const p4_12@1223@01 Bool)
; [exec]
; inhale p1_23
(declare-const $t@1224@01 $Snap)
(assert (= $t@1224@01 $Snap.unit))
(assert p1_23@1143@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [then-branch: 3422 | p1_23@1143@01 | dead]
; [else-branch: 3422 | !(p1_23@1143@01) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 3422 | !(p1_23@1143@01)]
(pop) ; 7
; [eval] !p1_23
; [then-branch: 3423 | !(p1_23@1143@01) | dead]
; [else-branch: 3423 | p1_23@1143@01 | live]
(push) ; 7
; [else-branch: 3423 | p1_23@1143@01]
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 3395 | !(p2_23@1144@01)]
(assert (not p2_23@1144@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))
; [then-branch: 3424 | p1_23@1143@01 | dead]
; [else-branch: 3424 | !(p1_23@1143@01) | live]
(push) ; 4
; [else-branch: 3424 | !(p1_23@1143@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))
; [then-branch: 3425 | p2_23@1144@01 | dead]
; [else-branch: 3425 | !(p2_23@1144@01) | live]
(push) ; 5
; [else-branch: 3425 | !(p2_23@1144@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self), Example())
(push) ; 6
; [then-branch: 3426 | p1_23@1143@01 | dead]
; [else-branch: 3426 | !(p1_23@1143@01) | live]
(push) ; 7
; [else-branch: 3426 | !(p1_23@1143@01)]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3), Example())
(push) ; 6
; [then-branch: 3427 | p2_23@1144@01 | dead]
; [else-branch: 3427 | !(p2_23@1144@01) | live]
(push) ; 7
; [else-branch: 3427 | !(p2_23@1144@01)]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> self != null
(push) ; 6
; [then-branch: 3428 | p1_23@1143@01 | dead]
; [else-branch: 3428 | !(p1_23@1143@01) | live]
(push) ; 7
; [else-branch: 3428 | !(p1_23@1143@01)]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> self_3 != null
(push) ; 6
; [then-branch: 3429 | p2_23@1144@01 | dead]
; [else-branch: 3429 | !(p2_23@1144@01) | live]
(push) ; 7
; [else-branch: 3429 | !(p2_23@1144@01)]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> true
(push) ; 6
; [then-branch: 3430 | p1_23@1143@01 | dead]
; [else-branch: 3430 | !(p1_23@1143@01) | live]
(push) ; 7
; [else-branch: 3430 | !(p1_23@1143@01)]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1155@01)))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> true
(push) ; 6
; [then-branch: 3431 | p2_23@1144@01 | dead]
; [else-branch: 3431 | !(p2_23@1144@01) | live]
(push) ; 7
; [else-branch: 3431 | !(p2_23@1144@01)]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(declare-const $t@1225@01 $Snap)
(assert (= $t@1225@01 ($Snap.combine ($Snap.first $t@1225@01) ($Snap.second $t@1225@01))))
(assert (= ($Snap.first $t@1225@01) $Snap.unit))
; [eval] p1_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
(push) ; 7
; [then-branch: 3432 | p1_23@1143@01 | dead]
; [else-branch: 3432 | !(p1_23@1143@01) | live]
(push) ; 8
; [else-branch: 3432 | !(p1_23@1143@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second $t@1225@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1225@01))
    ($Snap.second ($Snap.second $t@1225@01)))))
(assert (= ($Snap.first ($Snap.second $t@1225@01)) $Snap.unit))
; [eval] p2_23 ==> (forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
(push) ; 7
; [then-branch: 3433 | p2_23@1144@01 | dead]
; [else-branch: 3433 | !(p2_23@1144@01) | live]
(push) ; 8
; [else-branch: 3433 | !(p2_23@1144@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@1225@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1225@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))
; [then-branch: 3434 | p1_23@1143@01 | dead]
; [else-branch: 3434 | !(p1_23@1143@01) | live]
(push) ; 7
; [else-branch: 3434 | !(p1_23@1143@01)]
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1225@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))
; [then-branch: 3435 | p2_23@1144@01 | dead]
; [else-branch: 3435 | !(p2_23@1144@01) | live]
(push) ; 8
; [else-branch: 3435 | !(p2_23@1144@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_f), int())
(push) ; 9
; [then-branch: 3436 | p1_23@1143@01 | dead]
; [else-branch: 3436 | !(p1_23@1143@01) | live]
(push) ; 10
; [else-branch: 3436 | !(p1_23@1143@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_fp), int())
(push) ; 9
; [then-branch: 3437 | p2_23@1144@01 | dead]
; [else-branch: 3437 | !(p2_23@1144@01) | live]
(push) ; 10
; [else-branch: 3437 | !(p2_23@1144@01)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))))
; [then-branch: 3438 | p1_23@1143@01 | dead]
; [else-branch: 3438 | !(p1_23@1143@01) | live]
(push) ; 9
; [else-branch: 3438 | !(p1_23@1143@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))))
; [then-branch: 3439 | p2_23@1144@01 | dead]
; [else-branch: 3439 | !(p2_23@1144@01) | live]
(push) ; 10
; [else-branch: 3439 | !(p2_23@1144@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))
  $Snap.unit))
; [eval] p1_23 ==> issubtype(typeof(self.Example_g), int())
(push) ; 11
; [then-branch: 3440 | p1_23@1143@01 | dead]
; [else-branch: 3440 | !(p1_23@1143@01) | live]
(push) ; 12
; [else-branch: 3440 | !(p1_23@1143@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))))
  $Snap.unit))
; [eval] p2_23 ==> issubtype(typeof(self_3.Example_gp), int())
(push) ; 11
; [then-branch: 3441 | p2_23@1144@01 | dead]
; [else-branch: 3441 | !(p2_23@1144@01) | live]
(push) ; 12
; [else-branch: 3441 | !(p2_23@1144@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_f, __prim__int___box__(0))
(push) ; 11
; [then-branch: 3442 | p1_23@1143@01 | dead]
; [else-branch: 3442 | !(p1_23@1143@01) | live]
(push) ; 12
; [else-branch: 3442 | !(p1_23@1143@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_fp, __prim__int___box__(0))
(push) ; 11
; [then-branch: 3443 | p2_23@1144@01 | dead]
; [else-branch: 3443 | !(p2_23@1144@01) | live]
(push) ; 12
; [else-branch: 3443 | !(p2_23@1144@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> int___eq__(self.Example_g, __prim__int___box__(1))
(push) ; 11
; [then-branch: 3444 | p1_23@1143@01 | dead]
; [else-branch: 3444 | !(p1_23@1143@01) | live]
(push) ; 12
; [else-branch: 3444 | !(p1_23@1143@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> int___eq__(self_3.Example_gp, __prim__int___box__(1))
(push) ; 11
; [then-branch: 3445 | p2_23@1144@01 | dead]
; [else-branch: 3445 | !(p2_23@1144@01) | live]
(push) ; 12
; [else-branch: 3445 | !(p2_23@1144@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))))))))
  $Snap.unit))
; [eval] p1_23 ==> true
(push) ; 11
; [then-branch: 3446 | p1_23@1143@01 | dead]
; [else-branch: 3446 | !(p1_23@1143@01) | live]
(push) ; 12
; [else-branch: 3446 | !(p1_23@1143@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1225@01)))))))))))))))
  $Snap.unit))
; [eval] p2_23 ==> true
(push) ; 11
; [then-branch: 3447 | p2_23@1144@01 | dead]
; [else-branch: 3447 | !(p2_23@1144@01) | live]
(push) ; 12
; [else-branch: 3447 | !(p2_23@1144@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [exec]
; var _err: Ref
(declare-const _err@1226@01 $Ref)
; [exec]
; var _err_12: Ref
(declare-const _err_12@1227@01 $Ref)
; [exec]
; var self_1: Ref
(declare-const self_1@1228@01 $Ref)
; [exec]
; var self_1_0: Ref
(declare-const self_1_0@1229@01 $Ref)
; [exec]
; var _cwl_156: Perm
(declare-const _cwl_156@1230@01 $Perm)
; [exec]
; var _cwl_156_0: Perm
(declare-const _cwl_156_0@1231@01 $Perm)
; [exec]
; var _method_measures_156: Seq[Measure$]
(declare-const _method_measures_156@1232@01 Seq<Measure$>)
; [exec]
; var _method_measures_156_0: Seq[Measure$]
(declare-const _method_measures_156_0@1233@01 Seq<Measure$>)
; [exec]
; var p1_24: Bool
(declare-const p1_24@1234@01 Bool)
; [exec]
; var p2_24: Bool
(declare-const p2_24@1235@01 Bool)
; [exec]
; var p3_11: Bool
(declare-const p3_11@1236@01 Bool)
; [exec]
; var p4_11: Bool
(declare-const p4_11@1237@01 Bool)
; [exec]
; var p1_25: Bool
(declare-const p1_25@1238@01 Bool)
; [exec]
; var p2_25: Bool
(declare-const p2_25@1239@01 Bool)
; [exec]
; var p3_12: Bool
(declare-const p3_12@1240@01 Bool)
; [exec]
; var p4_12: Bool
(declare-const p4_12@1241@01 Bool)
; [exec]
; inhale p1_23
(declare-const $t@1242@01 $Snap)
(assert (= $t@1242@01 $Snap.unit))
(assert p1_23@1143@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [then-branch: 3448 | p1_23@1143@01 | dead]
; [else-branch: 3448 | !(p1_23@1143@01) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 3448 | !(p1_23@1143@01)]
(pop) ; 7
; [eval] !p1_23
; [then-branch: 3449 | !(p1_23@1143@01) | dead]
; [else-branch: 3449 | p1_23@1143@01 | live]
(push) ; 7
; [else-branch: 3449 | p1_23@1143@01]
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- StringContainer___init__ ----------
(declare-const p1_26@1243@01 Bool)
(declare-const p2_26@1244@01 Bool)
(declare-const _cthread_157@1245@01 $Ref)
(declare-const _cthread_157_0@1246@01 $Ref)
(declare-const _caller_measures_157@1247@01 Seq<Measure$>)
(declare-const _caller_measures_157_0@1248@01 Seq<Measure$>)
(declare-const _residue_157@1249@01 $Perm)
(declare-const _residue_157_0@1250@01 $Perm)
(declare-const self_0@1251@01 $Ref)
(declare-const self_0_0@1252@01 $Ref)
(declare-const s@1253@01 $Ref)
(declare-const s_1@1254@01 $Ref)
(declare-const _current_wait_level_157@1255@01 $Perm)
(declare-const _current_wait_level_157_0@1256@01 $Perm)
(declare-const p1_26@1257@01 Bool)
(declare-const p2_26@1258@01 Bool)
(declare-const _cthread_157@1259@01 $Ref)
(declare-const _cthread_157_0@1260@01 $Ref)
(declare-const _caller_measures_157@1261@01 Seq<Measure$>)
(declare-const _caller_measures_157_0@1262@01 Seq<Measure$>)
(declare-const _residue_157@1263@01 $Perm)
(declare-const _residue_157_0@1264@01 $Perm)
(declare-const self_0@1265@01 $Ref)
(declare-const self_0_0@1266@01 $Ref)
(declare-const s@1267@01 $Ref)
(declare-const s_1@1268@01 $Ref)
(declare-const _current_wait_level_157@1269@01 $Perm)
(declare-const _current_wait_level_157_0@1270@01 $Perm)
(push) ; 1
(declare-const $t@1271@01 $Snap)
(assert (= $t@1271@01 ($Snap.combine ($Snap.first $t@1271@01) ($Snap.second $t@1271@01))))
(assert (= ($Snap.first $t@1271@01) $Snap.unit))
; [eval] p1_26 ==> _cthread_157 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_26@1257@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3450 | p1_26@1257@01 | live]
; [else-branch: 3450 | !(p1_26@1257@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3450 | p1_26@1257@01]
(assert p1_26@1257@01)
; [eval] _cthread_157 != null
(pop) ; 3
(push) ; 3
; [else-branch: 3450 | !(p1_26@1257@01)]
(assert (not p1_26@1257@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_26@1257@01) p1_26@1257@01))
(assert (=> p1_26@1257@01 (not (= _cthread_157@1259@01 $Ref.null))))
(assert (=
  ($Snap.second $t@1271@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1271@01))
    ($Snap.second ($Snap.second $t@1271@01)))))
(assert (= ($Snap.first ($Snap.second $t@1271@01)) $Snap.unit))
; [eval] p2_26 ==> _cthread_157_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_26@1258@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_26@1258@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3451 | p2_26@1258@01 | live]
; [else-branch: 3451 | !(p2_26@1258@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3451 | p2_26@1258@01]
(assert p2_26@1258@01)
; [eval] _cthread_157_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 3451 | !(p2_26@1258@01)]
(assert (not p2_26@1258@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_26@1258@01) p2_26@1258@01))
(assert (=> p2_26@1258@01 (not (= _cthread_157_0@1260@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@1271@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1271@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1271@01))) $Snap.unit))
; [eval] p1_26 ==> issubtype(typeof(_cthread_157), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_26@1257@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3452 | p1_26@1257@01 | live]
; [else-branch: 3452 | !(p1_26@1257@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3452 | p1_26@1257@01]
(assert p1_26@1257@01)
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 3452 | !(p1_26@1257@01)]
(assert (not p1_26@1257@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_26@1257@01
  (issubtype<Bool> (typeof<PyType> _cthread_157@1259@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))
  $Snap.unit))
; [eval] p2_26 ==> issubtype(typeof(_cthread_157_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_26@1258@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_26@1258@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3453 | p2_26@1258@01 | live]
; [else-branch: 3453 | !(p2_26@1258@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3453 | p2_26@1258@01]
(assert p2_26@1258@01)
; [eval] issubtype(typeof(_cthread_157_0), Thread_0())
; [eval] typeof(_cthread_157_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 3453 | !(p2_26@1258@01)]
(assert (not p2_26@1258@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_26@1258@01
  (issubtype<Bool> (typeof<PyType> _cthread_157_0@1260@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))
  $Snap.unit))
; [eval] p1_26 ==> self_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_26@1257@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3454 | p1_26@1257@01 | live]
; [else-branch: 3454 | !(p1_26@1257@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3454 | p1_26@1257@01]
(assert p1_26@1257@01)
; [eval] self_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 3454 | !(p1_26@1257@01)]
(assert (not p1_26@1257@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=> p1_26@1257@01 (not (= self_0@1265@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))
  $Snap.unit))
; [eval] p2_26 ==> self_0_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_26@1258@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_26@1258@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3455 | p2_26@1258@01 | live]
; [else-branch: 3455 | !(p2_26@1258@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3455 | p2_26@1258@01]
(assert p2_26@1258@01)
; [eval] self_0_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 3455 | !(p2_26@1258@01)]
(assert (not p2_26@1258@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=> p2_26@1258@01 (not (= self_0_0@1266@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))
(push) ; 2
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not p1_26@1257@01))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3456 | p1_26@1257@01 | live]
; [else-branch: 3456 | !(p1_26@1257@01) | live]
(set-option :timeout 0)
(push) ; 2
; [then-branch: 3456 | p1_26@1257@01]
(assert p1_26@1257@01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_26@1258@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_26@1258@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3457 | p2_26@1258@01 | live]
; [else-branch: 3457 | !(p2_26@1258@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3457 | p2_26@1258@01]
(assert p2_26@1258@01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))
  $Snap.unit))
; [eval] p1_26 ==> issubtype(typeof(self_0), StringContainer())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3458 | p1_26@1257@01 | live]
; [else-branch: 3458 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3458 | p1_26@1257@01]
; [eval] issubtype(typeof(self_0), StringContainer())
; [eval] typeof(self_0)
; [eval] StringContainer()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p1_26@1257@01
  (issubtype<Bool> (typeof<PyType> self_0@1265@01) (as StringContainer<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))
  $Snap.unit))
; [eval] p2_26 ==> issubtype(typeof(self_0_0), StringContainer())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_26@1258@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3459 | p2_26@1258@01 | live]
; [else-branch: 3459 | !(p2_26@1258@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3459 | p2_26@1258@01]
; [eval] issubtype(typeof(self_0_0), StringContainer())
; [eval] typeof(self_0_0)
; [eval] StringContainer()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p2_26@1258@01
  (issubtype<Bool> (typeof<PyType> self_0_0@1266@01) (as StringContainer<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))
  $Snap.unit))
; [eval] p1_26 ==> issubtype(typeof(s), str())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3460 | p1_26@1257@01 | live]
; [else-branch: 3460 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3460 | p1_26@1257@01]
; [eval] issubtype(typeof(s), str())
; [eval] typeof(s)
; [eval] str()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p1_26@1257@01
  (issubtype<Bool> (typeof<PyType> s@1267@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))))
  $Snap.unit))
; [eval] p2_26 ==> issubtype(typeof(s_1), str())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_26@1258@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3461 | p2_26@1258@01 | live]
; [else-branch: 3461 | !(p2_26@1258@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3461 | p2_26@1258@01]
; [eval] issubtype(typeof(s_1), str())
; [eval] typeof(s_1)
; [eval] str()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p2_26@1258@01
  (issubtype<Bool> (typeof<PyType> s_1@1268@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))))
  $Snap.unit))
; [eval] p1_26 ==> self_0 != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3462 | p1_26@1257@01 | live]
; [else-branch: 3462 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3462 | p1_26@1257@01]
; [eval] self_0 != null
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))))))
  $Snap.unit))
; [eval] p2_26 ==> self_0_0 != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_26@1258@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3463 | p2_26@1258@01 | live]
; [else-branch: 3463 | !(p2_26@1258@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3463 | p2_26@1258@01]
; [eval] self_0_0 != null
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))))))
  $Snap.unit))
; [eval] p1_26 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3464 | p1_26@1257@01 | live]
; [else-branch: 3464 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3464 | p1_26@1257@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))))))
  $Snap.unit))
; [eval] p2_26 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_26@1258@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3465 | p2_26@1258@01 | live]
; [else-branch: 3465 | !(p2_26@1258@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3465 | p2_26@1258@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@1272@01 $Snap)
(assert (= $t@1272@01 ($Snap.combine ($Snap.first $t@1272@01) ($Snap.second $t@1272@01))))
(assert (= ($Snap.first $t@1272@01) $Snap.unit))
; [eval] p1_26 ==> (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3466 | p1_26@1257@01 | live]
; [else-branch: 3466 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3466 | p1_26@1257@01]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157)
(push) ; 7
; [then-branch: 3467 | False | live]
; [else-branch: 3467 | True | live]
(push) ; 8
; [then-branch: 3467 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 3467 | True]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157)
(push) ; 9
; [then-branch: 3468 | False | live]
; [else-branch: 3468 | True | live]
(push) ; 10
; [then-branch: 3468 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3468 | True]
; [eval] _residue_157 <= _current_wait_level_157
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p1_26@1257@01 (<= _residue_157@1263@01 _current_wait_level_157@1269@01)))
(assert (=
  ($Snap.second $t@1272@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1272@01))
    ($Snap.second ($Snap.second $t@1272@01)))))
(assert (= ($Snap.first ($Snap.second $t@1272@01)) $Snap.unit))
; [eval] p2_26 ==> (forperm _r_38: Ref [_r_38.MustReleaseBoundedp] :: Level(_r_38) <= _current_wait_level_157_0) && ((forperm _r_38: Ref [_r_38.MustReleaseUnboundedp] :: Level(_r_38) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_26@1258@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3469 | p2_26@1258@01 | live]
; [else-branch: 3469 | !(p2_26@1258@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3469 | p2_26@1258@01]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBoundedp] :: Level(_r_38) <= _current_wait_level_157_0) && ((forperm _r_38: Ref [_r_38.MustReleaseUnboundedp] :: Level(_r_38) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBoundedp] :: Level(_r_38) <= _current_wait_level_157_0)
(push) ; 7
; [then-branch: 3470 | False | live]
; [else-branch: 3470 | True | live]
(push) ; 8
; [then-branch: 3470 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 3470 | True]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnboundedp] :: Level(_r_38) <= _current_wait_level_157_0)
(push) ; 9
; [then-branch: 3471 | False | live]
; [else-branch: 3471 | True | live]
(push) ; 10
; [then-branch: 3471 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3471 | True]
; [eval] _residue_157_0 <= _current_wait_level_157_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p2_26@1258@01 (<= _residue_157_0@1264@01 _current_wait_level_157_0@1270@01)))
(assert (=
  ($Snap.second ($Snap.second $t@1272@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1272@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1272@01))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3472 | p1_26@1257@01 | live]
; [else-branch: 3472 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3472 | p1_26@1257@01]
(assert (not (= self_0@1265@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1272@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1272@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01)))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_26@1258@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3473 | p2_26@1258@01 | live]
; [else-branch: 3473 | !(p2_26@1258@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3473 | p2_26@1258@01]
(assert (not (= self_0_0@1266@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01)))))
  $Snap.unit))
; [eval] p1_26 ==> issubtype(typeof(self_0.StringContainer_s), str())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3474 | p1_26@1257@01 | live]
; [else-branch: 3474 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3474 | p1_26@1257@01]
; [eval] issubtype(typeof(self_0.StringContainer_s), str())
; [eval] typeof(self_0.StringContainer_s)
; [eval] str()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_26@1257@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1272@01))))) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01))))))
  $Snap.unit))
; [eval] p2_26 ==> issubtype(typeof(self_0_0.StringContainer_sp), str())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_26@1258@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3475 | p2_26@1258@01 | live]
; [else-branch: 3475 | !(p2_26@1258@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3475 | p2_26@1258@01]
; [eval] issubtype(typeof(self_0_0.StringContainer_sp), str())
; [eval] typeof(self_0_0.StringContainer_sp)
; [eval] str()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_26@1258@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1272@01)))))) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01)))))))
  $Snap.unit))
; [eval] p1_26 ==> str___eq__(self_0.StringContainer_s, s)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3476 | p1_26@1257@01 | live]
; [else-branch: 3476 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3476 | p1_26@1257@01]
; [eval] str___eq__(self_0.StringContainer_s, s)
(push) ; 9
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1272@01))))) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1272@01))))) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1272@01)))) s@1267@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1272@01))))) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1272@01)))) s@1267@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_26@1257@01
  (and
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1272@01))))) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1272@01)))) s@1267@01))))
(assert (=>
  p1_26@1257@01
  (str___eq__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1272@01)))) s@1267@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01))))))))
  $Snap.unit))
; [eval] p2_26 ==> str___eq__(self_0_0.StringContainer_sp, s_1)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_26@1258@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3477 | p2_26@1258@01 | live]
; [else-branch: 3477 | !(p2_26@1258@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3477 | p2_26@1258@01]
; [eval] str___eq__(self_0_0.StringContainer_sp, s_1)
(push) ; 9
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1272@01)))))) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1272@01)))))) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1272@01))))) s_1@1268@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1272@01)))))) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1272@01))))) s_1@1268@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_26@1258@01
  (and
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1272@01)))))) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1272@01))))) s_1@1268@01))))
(assert (=>
  p2_26@1258@01
  (str___eq__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1272@01))))) s_1@1268@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01)))))))))
  $Snap.unit))
; [eval] p1_26 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3478 | p1_26@1257@01 | live]
; [else-branch: 3478 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3478 | p1_26@1257@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1272@01)))))))))
  $Snap.unit))
; [eval] p2_26 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_26@1258@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3479 | p2_26@1258@01 | live]
; [else-branch: 3479 | !(p2_26@1258@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3479 | p2_26@1258@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var _err: Ref
(declare-const _err@1273@01 $Ref)
; [exec]
; var _err_13: Ref
(declare-const _err_13@1274@01 $Ref)
; [exec]
; var self_2: Ref
(declare-const self_2@1275@01 $Ref)
; [exec]
; var self_2_0: Ref
(declare-const self_2_0@1276@01 $Ref)
; [exec]
; var s_0: Ref
(declare-const s_0@1277@01 $Ref)
; [exec]
; var s_0_0: Ref
(declare-const s_0_0@1278@01 $Ref)
; [exec]
; var _cwl_157: Perm
(declare-const _cwl_157@1279@01 $Perm)
; [exec]
; var _cwl_157_0: Perm
(declare-const _cwl_157_0@1280@01 $Perm)
; [exec]
; var _method_measures_157: Seq[Measure$]
(declare-const _method_measures_157@1281@01 Seq<Measure$>)
; [exec]
; var _method_measures_157_0: Seq[Measure$]
(declare-const _method_measures_157_0@1282@01 Seq<Measure$>)
; [exec]
; var p1_27: Bool
(declare-const p1_27@1283@01 Bool)
; [exec]
; var p2_27: Bool
(declare-const p2_27@1284@01 Bool)
; [exec]
; var p3_13: Bool
(declare-const p3_13@1285@01 Bool)
; [exec]
; var p4_13: Bool
(declare-const p4_13@1286@01 Bool)
; [exec]
; inhale p1_26
(declare-const $t@1287@01 $Snap)
(assert (= $t@1287@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3480 | p1_26@1257@01 | live]
; [else-branch: 3480 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3480 | p1_26@1257@01]
; [exec]
; _method_measures_157 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_0) == StringContainer()
(declare-const $t@1288@01 $Snap)
(assert (= $t@1288@01 $Snap.unit))
; [eval] typeof(self_0) == StringContainer()
; [eval] typeof(self_0)
; [eval] StringContainer()
(assert (= (typeof<PyType> self_0@1265@01) (as StringContainer<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_2 := self_0
; [exec]
; s_0 := s
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_26@1258@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3481 | p2_26@1258@01 | live]
; [else-branch: 3481 | !(p2_26@1258@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3481 | p2_26@1258@01]
; [exec]
; _method_measures_157_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_0_0) == StringContainer()
(declare-const $t@1289@01 $Snap)
(assert (= $t@1289@01 $Snap.unit))
; [eval] typeof(self_0_0) == StringContainer()
; [eval] typeof(self_0_0)
; [eval] StringContainer()
(assert (= (typeof<PyType> self_0_0@1266@01) (as StringContainer<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err_13 := null
; [exec]
; self_2_0 := self_0_0
; [exec]
; s_0_0 := s_1
; [exec]
; p1_27 := p1_26 &&
;   perm(_MaySet(self_2, 39259342834620444863618799033642229331027)) > none
; [eval] p1_26 && perm(_MaySet(self_2, 39259342834620444863618799033642229331027)) > none
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3482 | !(p1_26@1257@01) | live]
; [else-branch: 3482 | p1_26@1257@01 | live]
(push) ; 8
; [then-branch: 3482 | !(p1_26@1257@01)]
(assert (not p1_26@1257@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3482 | p1_26@1257@01]
; [eval] perm(_MaySet(self_2, 39259342834620444863618799033642229331027)) > none
; [eval] perm(_MaySet(self_2, 39259342834620444863618799033642229331027))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_26@1257@01 (not p1_26@1257@01)))
; [exec]
; p2_27 := p2_26 &&
;   perm(_MaySet_0(self_2_0, 39259342834620444863618799033642229331027)) >
;   none
; [eval] p2_26 && perm(_MaySet_0(self_2_0, 39259342834620444863618799033642229331027)) > none
(push) ; 7
; [then-branch: 3483 | !(p2_26@1258@01) | live]
; [else-branch: 3483 | p2_26@1258@01 | live]
(push) ; 8
; [then-branch: 3483 | !(p2_26@1258@01)]
(assert (not p2_26@1258@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3483 | p2_26@1258@01]
; [eval] perm(_MaySet_0(self_2_0, 39259342834620444863618799033642229331027)) > none
; [eval] perm(_MaySet_0(self_2_0, 39259342834620444863618799033642229331027))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p2_26@1258@01 (not p2_26@1258@01)))
; [exec]
; p3_13 := p1_26 &&
;   !(perm(_MaySet(self_2, 39259342834620444863618799033642229331027)) > none)
; [eval] p1_26 && !(perm(_MaySet(self_2, 39259342834620444863618799033642229331027)) > none)
(push) ; 7
; [then-branch: 3484 | !(p1_26@1257@01) | live]
; [else-branch: 3484 | p1_26@1257@01 | live]
(push) ; 8
; [then-branch: 3484 | !(p1_26@1257@01)]
(assert (not p1_26@1257@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3484 | p1_26@1257@01]
; [eval] !(perm(_MaySet(self_2, 39259342834620444863618799033642229331027)) > none)
; [eval] perm(_MaySet(self_2, 39259342834620444863618799033642229331027)) > none
; [eval] perm(_MaySet(self_2, 39259342834620444863618799033642229331027))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [exec]
; p4_13 := p2_26 &&
;   !(perm(_MaySet_0(self_2_0, 39259342834620444863618799033642229331027)) >
;   none)
; [eval] p2_26 && !(perm(_MaySet_0(self_2_0, 39259342834620444863618799033642229331027)) > none)
(push) ; 7
; [then-branch: 3485 | !(p2_26@1258@01) | live]
; [else-branch: 3485 | p2_26@1258@01 | live]
(push) ; 8
; [then-branch: 3485 | !(p2_26@1258@01)]
(assert (not p2_26@1258@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3485 | p2_26@1258@01]
; [eval] !(perm(_MaySet_0(self_2_0, 39259342834620444863618799033642229331027)) > none)
; [eval] perm(_MaySet_0(self_2_0, 39259342834620444863618799033642229331027)) > none
; [eval] perm(_MaySet_0(self_2_0, 39259342834620444863618799033642229331027))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3486 | p1_26@1257@01 | live]
; [else-branch: 3486 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3486 | p1_26@1257@01]
; [exec]
; exhale acc(_MaySet(self_2, 39259342834620444863618799033642229331027), write)
; [exec]
; inhale acc(self_2.StringContainer_s, write)
(declare-const $t@1290@01 $Ref)
(assert (not (= self_0@1265@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_26@1258@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3487 | p2_26@1258@01 | live]
; [else-branch: 3487 | !(p2_26@1258@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3487 | p2_26@1258@01]
; [exec]
; exhale acc(_MaySet_0(self_2_0, 39259342834620444863618799033642229331027), write)
; [exec]
; inhale acc(self_2_0.StringContainer_sp, write)
(declare-const $t@1291@01 $Ref)
(assert (not (= self_0_0@1266@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3488 | p1_26@1257@01 | live]
; [else-branch: 3488 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3488 | p1_26@1257@01]
; [exec]
; self_2.StringContainer_s := s_0
(push) ; 10
(set-option :timeout 10)
(assert (not (not p2_26@1258@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3489 | p2_26@1258@01 | live]
; [else-branch: 3489 | !(p2_26@1258@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 3489 | p2_26@1258@01]
; [exec]
; self_2_0.StringContainer_sp := s_0_0
; [exec]
; assert true
; [eval] p1_26 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3490 | p1_26@1257@01 | live]
; [else-branch: 3490 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3490 | p1_26@1257@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] p2_26 ==> true
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_26@1258@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3491 | p2_26@1258@01 | live]
; [else-branch: 3491 | !(p2_26@1258@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3491 | p2_26@1258@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3492 | p1_26@1257@01 | live]
; [else-branch: 3492 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 3492 | p1_26@1257@01]
(push) ; 12
(set-option :timeout 10)
(assert (not (not p2_26@1258@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3493 | p2_26@1258@01 | live]
; [else-branch: 3493 | !(p2_26@1258@01) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 3493 | p2_26@1258@01]
; [eval] p1_26 ==> issubtype(typeof(self_0.StringContainer_s), str())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3494 | p1_26@1257@01 | live]
; [else-branch: 3494 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3494 | p1_26@1257@01]
; [eval] issubtype(typeof(self_0.StringContainer_s), str())
; [eval] typeof(self_0.StringContainer_s)
; [eval] str()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; [eval] p2_26 ==> issubtype(typeof(self_0_0.StringContainer_sp), str())
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_26@1258@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3495 | p2_26@1258@01 | live]
; [else-branch: 3495 | !(p2_26@1258@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3495 | p2_26@1258@01]
; [eval] issubtype(typeof(self_0_0.StringContainer_sp), str())
; [eval] typeof(self_0_0.StringContainer_sp)
; [eval] str()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; [eval] p1_26 ==> str___eq__(self_0.StringContainer_s, s)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3496 | p1_26@1257@01 | live]
; [else-branch: 3496 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3496 | p1_26@1257@01]
; [eval] str___eq__(self_0.StringContainer_s, s)
(push) ; 15
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> s@1267@01) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> s@1267@01) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit s@1267@01 s@1267@01))
(pop) ; 15
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> s@1267@01) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit s@1267@01 s@1267@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  p1_26@1257@01
  (and
    (issubtype<Bool> (typeof<PyType> s@1267@01) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit s@1267@01 s@1267@01))))
(push) ; 13
(assert (not (=> p1_26@1257@01 (str___eq__ $Snap.unit s@1267@01 s@1267@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=> p1_26@1257@01 (str___eq__ $Snap.unit s@1267@01 s@1267@01)))
; [eval] p2_26 ==> str___eq__(self_0_0.StringContainer_sp, s_1)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_26@1258@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3497 | p2_26@1258@01 | live]
; [else-branch: 3497 | !(p2_26@1258@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3497 | p2_26@1258@01]
; [eval] str___eq__(self_0_0.StringContainer_sp, s_1)
(push) ; 15
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> s_1@1268@01) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> s_1@1268@01) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit s_1@1268@01 s_1@1268@01))
(pop) ; 15
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> s_1@1268@01) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit s_1@1268@01 s_1@1268@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  p2_26@1258@01
  (and
    (issubtype<Bool> (typeof<PyType> s_1@1268@01) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit s_1@1268@01 s_1@1268@01))))
(push) ; 13
(assert (not (=> p2_26@1258@01 (str___eq__ $Snap.unit s_1@1268@01 s_1@1268@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=> p2_26@1258@01 (str___eq__ $Snap.unit s_1@1268@01 s_1@1268@01)))
; [eval] p1_26 ==> (forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false)))
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3498 | p1_26@1257@01 | live]
; [else-branch: 3498 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3498 | p1_26@1257@01]
; [eval] (forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false)
(push) ; 15
; [then-branch: 3499 | False | live]
; [else-branch: 3499 | True | live]
(push) ; 16
; [then-branch: 3499 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 3499 | True]
; [eval] (forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false)
(push) ; 17
; [then-branch: 3500 | False | live]
; [else-branch: 3500 | True | live]
(push) ; 18
; [then-branch: 3500 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 3500 | True]
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false)
(push) ; 19
; [then-branch: 3501 | False | live]
; [else-branch: 3501 | True | live]
(push) ; 20
; [then-branch: 3501 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 3501 | True]
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false)
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; [eval] p2_26 ==> (forperm _r_39: Ref [MustInvokeBounded_0(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded_0(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBoundedp] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnboundedp] :: false)))
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not p2_26@1258@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3502 | p2_26@1258@01 | live]
; [else-branch: 3502 | !(p2_26@1258@01) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 3502 | p2_26@1258@01]
; [eval] (forperm _r_39: Ref [MustInvokeBounded_0(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded_0(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBoundedp] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_39: Ref [MustInvokeBounded_0(_r_39)] :: false)
(push) ; 15
; [then-branch: 3503 | False | live]
; [else-branch: 3503 | True | live]
(push) ; 16
; [then-branch: 3503 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 3503 | True]
; [eval] (forperm _r_39: Ref [MustInvokeUnbounded_0(_r_39)] :: false)
(push) ; 17
; [then-branch: 3504 | False | live]
; [else-branch: 3504 | True | live]
(push) ; 18
; [then-branch: 3504 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 3504 | True]
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseBoundedp] :: false)
(push) ; 19
; [then-branch: 3505 | False | live]
; [else-branch: 3505 | True | live]
(push) ; 20
; [then-branch: 3505 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 3505 | True]
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseUnboundedp] :: false)
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
; [eval] !p2_26
; [then-branch: 3506 | !(p2_26@1258@01) | dead]
; [else-branch: 3506 | p2_26@1258@01 | live]
(push) ; 10
; [else-branch: 3506 | p2_26@1258@01]
(pop) ; 10
(pop) ; 9
; [eval] !p1_26
; [then-branch: 3507 | !(p1_26@1257@01) | dead]
; [else-branch: 3507 | p1_26@1257@01 | live]
(push) ; 9
; [else-branch: 3507 | p1_26@1257@01]
(pop) ; 9
(pop) ; 8
; [eval] !p2_27
; [then-branch: 3508 | !(p2_26@1258@01) | dead]
; [else-branch: 3508 | p2_26@1258@01 | live]
(push) ; 8
; [else-branch: 3508 | p2_26@1258@01]
(pop) ; 8
(pop) ; 7
; [eval] !p1_27
; [then-branch: 3509 | !(p1_26@1257@01) | dead]
; [else-branch: 3509 | p1_26@1257@01 | live]
(push) ; 7
; [else-branch: 3509 | p1_26@1257@01]
(pop) ; 7
(pop) ; 6
; [eval] !p2_26
; [then-branch: 3510 | !(p2_26@1258@01) | dead]
; [else-branch: 3510 | p2_26@1258@01 | live]
(push) ; 6
; [else-branch: 3510 | p2_26@1258@01]
(pop) ; 6
(pop) ; 5
; [eval] !p1_26
; [then-branch: 3511 | !(p1_26@1257@01) | dead]
; [else-branch: 3511 | p1_26@1257@01 | live]
(push) ; 5
; [else-branch: 3511 | p1_26@1257@01]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 3457 | !(p2_26@1258@01)]
(assert (not p2_26@1258@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))
  $Snap.unit))
; [eval] p1_26 ==> issubtype(typeof(self_0), StringContainer())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3512 | p1_26@1257@01 | live]
; [else-branch: 3512 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3512 | p1_26@1257@01]
; [eval] issubtype(typeof(self_0), StringContainer())
; [eval] typeof(self_0)
; [eval] StringContainer()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p1_26@1257@01
  (issubtype<Bool> (typeof<PyType> self_0@1265@01) (as StringContainer<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))
  $Snap.unit))
; [eval] p2_26 ==> issubtype(typeof(self_0_0), StringContainer())
(push) ; 4
; [then-branch: 3513 | p2_26@1258@01 | dead]
; [else-branch: 3513 | !(p2_26@1258@01) | live]
(push) ; 5
; [else-branch: 3513 | !(p2_26@1258@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))
  $Snap.unit))
; [eval] p1_26 ==> issubtype(typeof(s), str())
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3514 | p1_26@1257@01 | live]
; [else-branch: 3514 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3514 | p1_26@1257@01]
; [eval] issubtype(typeof(s), str())
; [eval] typeof(s)
; [eval] str()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  p1_26@1257@01
  (issubtype<Bool> (typeof<PyType> s@1267@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))))
  $Snap.unit))
; [eval] p2_26 ==> issubtype(typeof(s_1), str())
(push) ; 4
; [then-branch: 3515 | p2_26@1258@01 | dead]
; [else-branch: 3515 | !(p2_26@1258@01) | live]
(push) ; 5
; [else-branch: 3515 | !(p2_26@1258@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))))
  $Snap.unit))
; [eval] p1_26 ==> self_0 != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3516 | p1_26@1257@01 | live]
; [else-branch: 3516 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3516 | p1_26@1257@01]
; [eval] self_0 != null
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))))))
  $Snap.unit))
; [eval] p2_26 ==> self_0_0 != null
(push) ; 4
; [then-branch: 3517 | p2_26@1258@01 | dead]
; [else-branch: 3517 | !(p2_26@1258@01) | live]
(push) ; 5
; [else-branch: 3517 | !(p2_26@1258@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))))))
  $Snap.unit))
; [eval] p1_26 ==> true
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3518 | p1_26@1257@01 | live]
; [else-branch: 3518 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3518 | p1_26@1257@01]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1271@01)))))))))))))))
  $Snap.unit))
; [eval] p2_26 ==> true
(push) ; 4
; [then-branch: 3519 | p2_26@1258@01 | dead]
; [else-branch: 3519 | !(p2_26@1258@01) | live]
(push) ; 5
; [else-branch: 3519 | !(p2_26@1258@01)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@1292@01 $Snap)
(assert (= $t@1292@01 ($Snap.combine ($Snap.first $t@1292@01) ($Snap.second $t@1292@01))))
(assert (= ($Snap.first $t@1292@01) $Snap.unit))
; [eval] p1_26 ==> (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3520 | p1_26@1257@01 | live]
; [else-branch: 3520 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3520 | p1_26@1257@01]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157)
(push) ; 7
; [then-branch: 3521 | False | live]
; [else-branch: 3521 | True | live]
(push) ; 8
; [then-branch: 3521 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 3521 | True]
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157)
(push) ; 9
; [then-branch: 3522 | False | live]
; [else-branch: 3522 | True | live]
(push) ; 10
; [then-branch: 3522 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 3522 | True]
; [eval] _residue_157 <= _current_wait_level_157
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=> p1_26@1257@01 (<= _residue_157@1263@01 _current_wait_level_157@1269@01)))
(assert (=
  ($Snap.second $t@1292@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1292@01))
    ($Snap.second ($Snap.second $t@1292@01)))))
(assert (= ($Snap.first ($Snap.second $t@1292@01)) $Snap.unit))
; [eval] p2_26 ==> (forperm _r_38: Ref [_r_38.MustReleaseBoundedp] :: Level(_r_38) <= _current_wait_level_157_0) && ((forperm _r_38: Ref [_r_38.MustReleaseUnboundedp] :: Level(_r_38) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
(push) ; 5
; [then-branch: 3523 | p2_26@1258@01 | dead]
; [else-branch: 3523 | !(p2_26@1258@01) | live]
(push) ; 6
; [else-branch: 3523 | !(p2_26@1258@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@1292@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1292@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1292@01))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3524 | p1_26@1257@01 | live]
; [else-branch: 3524 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3524 | p1_26@1257@01]
(assert (not (= self_0@1265@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1292@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1292@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01)))))))
; [then-branch: 3525 | p2_26@1258@01 | dead]
; [else-branch: 3525 | !(p2_26@1258@01) | live]
(push) ; 6
; [else-branch: 3525 | !(p2_26@1258@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1292@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01)))))
  $Snap.unit))
; [eval] p1_26 ==> issubtype(typeof(self_0.StringContainer_s), str())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3526 | p1_26@1257@01 | live]
; [else-branch: 3526 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3526 | p1_26@1257@01]
; [eval] issubtype(typeof(self_0.StringContainer_s), str())
; [eval] typeof(self_0.StringContainer_s)
; [eval] str()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_26@1257@01
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1292@01))))) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01))))))
  $Snap.unit))
; [eval] p2_26 ==> issubtype(typeof(self_0_0.StringContainer_sp), str())
(push) ; 7
; [then-branch: 3527 | p2_26@1258@01 | dead]
; [else-branch: 3527 | !(p2_26@1258@01) | live]
(push) ; 8
; [else-branch: 3527 | !(p2_26@1258@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01)))))))
  $Snap.unit))
; [eval] p1_26 ==> str___eq__(self_0.StringContainer_s, s)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3528 | p1_26@1257@01 | live]
; [else-branch: 3528 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3528 | p1_26@1257@01]
; [eval] str___eq__(self_0.StringContainer_s, s)
(push) ; 9
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1292@01))))) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1292@01))))) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1292@01)))) s@1267@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1292@01))))) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1292@01)))) s@1267@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_26@1257@01
  (and
    (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1292@01))))) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1292@01)))) s@1267@01))))
(assert (=>
  p1_26@1257@01
  (str___eq__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@1292@01)))) s@1267@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01))))))))
  $Snap.unit))
; [eval] p2_26 ==> str___eq__(self_0_0.StringContainer_sp, s_1)
(push) ; 7
; [then-branch: 3529 | p2_26@1258@01 | dead]
; [else-branch: 3529 | !(p2_26@1258@01) | live]
(push) ; 8
; [else-branch: 3529 | !(p2_26@1258@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01)))))))))
  $Snap.unit))
; [eval] p1_26 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3530 | p1_26@1257@01 | live]
; [else-branch: 3530 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3530 | p1_26@1257@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1292@01)))))))))
  $Snap.unit))
; [eval] p2_26 ==> true
(push) ; 7
; [then-branch: 3531 | p2_26@1258@01 | dead]
; [else-branch: 3531 | !(p2_26@1258@01) | live]
(push) ; 8
; [else-branch: 3531 | !(p2_26@1258@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; var _err: Ref
(declare-const _err@1293@01 $Ref)
; [exec]
; var _err_13: Ref
(declare-const _err_13@1294@01 $Ref)
; [exec]
; var self_2: Ref
(declare-const self_2@1295@01 $Ref)
; [exec]
; var self_2_0: Ref
(declare-const self_2_0@1296@01 $Ref)
; [exec]
; var s_0: Ref
(declare-const s_0@1297@01 $Ref)
; [exec]
; var s_0_0: Ref
(declare-const s_0_0@1298@01 $Ref)
; [exec]
; var _cwl_157: Perm
(declare-const _cwl_157@1299@01 $Perm)
; [exec]
; var _cwl_157_0: Perm
(declare-const _cwl_157_0@1300@01 $Perm)
; [exec]
; var _method_measures_157: Seq[Measure$]
(declare-const _method_measures_157@1301@01 Seq<Measure$>)
; [exec]
; var _method_measures_157_0: Seq[Measure$]
(declare-const _method_measures_157_0@1302@01 Seq<Measure$>)
; [exec]
; var p1_27: Bool
(declare-const p1_27@1303@01 Bool)
; [exec]
; var p2_27: Bool
(declare-const p2_27@1304@01 Bool)
; [exec]
; var p3_13: Bool
(declare-const p3_13@1305@01 Bool)
; [exec]
; var p4_13: Bool
(declare-const p4_13@1306@01 Bool)
; [exec]
; inhale p1_26
(declare-const $t@1307@01 $Snap)
(assert (= $t@1307@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3532 | p1_26@1257@01 | live]
; [else-branch: 3532 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3532 | p1_26@1257@01]
; [exec]
; _method_measures_157 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_0) == StringContainer()
(declare-const $t@1308@01 $Snap)
(assert (= $t@1308@01 $Snap.unit))
; [eval] typeof(self_0) == StringContainer()
; [eval] typeof(self_0)
; [eval] StringContainer()
(assert (= (typeof<PyType> self_0@1265@01) (as StringContainer<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_2 := self_0
; [exec]
; s_0 := s
; [then-branch: 3533 | p2_26@1258@01 | dead]
; [else-branch: 3533 | !(p2_26@1258@01) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 3533 | !(p2_26@1258@01)]
(pop) ; 6
; [eval] !p2_26
(push) ; 6
(set-option :timeout 10)
(assert (not p2_26@1258@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3534 | !(p2_26@1258@01) | live]
; [else-branch: 3534 | p2_26@1258@01 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 3534 | !(p2_26@1258@01)]
; [exec]
; p1_27 := p1_26 &&
;   perm(_MaySet(self_2, 39259342834620444863618799033642229331027)) > none
; [eval] p1_26 && perm(_MaySet(self_2, 39259342834620444863618799033642229331027)) > none
(push) ; 7
; [then-branch: 3535 | !(p1_26@1257@01) | live]
; [else-branch: 3535 | p1_26@1257@01 | live]
(push) ; 8
; [then-branch: 3535 | !(p1_26@1257@01)]
(assert (not p1_26@1257@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3535 | p1_26@1257@01]
; [eval] perm(_MaySet(self_2, 39259342834620444863618799033642229331027)) > none
; [eval] perm(_MaySet(self_2, 39259342834620444863618799033642229331027))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p1_26@1257@01 (not p1_26@1257@01)))
; [exec]
; p2_27 := p2_26 &&
;   perm(_MaySet_0(self_2_0, 39259342834620444863618799033642229331027)) >
;   none
; [eval] p2_26 && perm(_MaySet_0(self_2_0, 39259342834620444863618799033642229331027)) > none
(push) ; 7
; [then-branch: 3536 | !(p2_26@1258@01) | live]
; [else-branch: 3536 | p2_26@1258@01 | live]
(push) ; 8
; [then-branch: 3536 | !(p2_26@1258@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 3536 | p2_26@1258@01]
(assert p2_26@1258@01)
; [eval] perm(_MaySet_0(self_2_0, 39259342834620444863618799033642229331027)) > none
; [eval] perm(_MaySet_0(self_2_0, 39259342834620444863618799033642229331027))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or p2_26@1258@01 (not p2_26@1258@01)))
; [exec]
; p3_13 := p1_26 &&
;   !(perm(_MaySet(self_2, 39259342834620444863618799033642229331027)) > none)
; [eval] p1_26 && !(perm(_MaySet(self_2, 39259342834620444863618799033642229331027)) > none)
(push) ; 7
; [then-branch: 3537 | !(p1_26@1257@01) | live]
; [else-branch: 3537 | p1_26@1257@01 | live]
(push) ; 8
; [then-branch: 3537 | !(p1_26@1257@01)]
(assert (not p1_26@1257@01))
(pop) ; 8
(push) ; 8
; [else-branch: 3537 | p1_26@1257@01]
; [eval] !(perm(_MaySet(self_2, 39259342834620444863618799033642229331027)) > none)
; [eval] perm(_MaySet(self_2, 39259342834620444863618799033642229331027)) > none
; [eval] perm(_MaySet(self_2, 39259342834620444863618799033642229331027))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [exec]
; p4_13 := p2_26 &&
;   !(perm(_MaySet_0(self_2_0, 39259342834620444863618799033642229331027)) >
;   none)
; [eval] p2_26 && !(perm(_MaySet_0(self_2_0, 39259342834620444863618799033642229331027)) > none)
(push) ; 7
; [then-branch: 3538 | !(p2_26@1258@01) | live]
; [else-branch: 3538 | p2_26@1258@01 | live]
(push) ; 8
; [then-branch: 3538 | !(p2_26@1258@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 3538 | p2_26@1258@01]
(assert p2_26@1258@01)
; [eval] !(perm(_MaySet_0(self_2_0, 39259342834620444863618799033642229331027)) > none)
; [eval] perm(_MaySet_0(self_2_0, 39259342834620444863618799033642229331027)) > none
; [eval] perm(_MaySet_0(self_2_0, 39259342834620444863618799033642229331027))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3539 | p1_26@1257@01 | live]
; [else-branch: 3539 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 3539 | p1_26@1257@01]
; [exec]
; exhale acc(_MaySet(self_2, 39259342834620444863618799033642229331027), write)
; [exec]
; inhale acc(self_2.StringContainer_s, write)
(declare-const $t@1309@01 $Ref)
(assert (not (= self_0@1265@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [then-branch: 3540 | False | dead]
; [else-branch: 3540 | True | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 3540 | True]
(pop) ; 8
; [eval] !p2_27
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3541 | True | live]
; [else-branch: 3541 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 3541 | True]
(push) ; 9
(set-option :timeout 10)
(assert (not (not p1_26@1257@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3542 | p1_26@1257@01 | live]
; [else-branch: 3542 | !(p1_26@1257@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3542 | p1_26@1257@01]
; [exec]
; self_2.StringContainer_s := s_0
; [then-branch: 3543 | p2_26@1258@01 | dead]
; [else-branch: 3543 | !(p2_26@1258@01) | live]
(push) ; 10
; [else-branch: 3543 | !(p2_26@1258@01)]
(pop) ; 10
; [eval] !p2_26
(push) ; 10
(set-option :timeout 10)
(assert (not p2_26@1258@01))
(check-sat)
