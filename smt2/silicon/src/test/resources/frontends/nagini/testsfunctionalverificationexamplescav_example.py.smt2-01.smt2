(get-info :version)
; (:version "4.12.1")
; Started: 2024-12-29 14:47:17
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<PyType> 0)
(declare-sort Seq<Measure$> 0)
(declare-sort Seq<$Ref> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<_Name> 0)
(declare-sort Set<Int> 0)
(declare-sort Set<Seq<$Ref>> 0)
(declare-sort Set<Set<$Ref>> 0)
(declare-sort Set<$Snap> 0)
(declare-sort PyType 0)
(declare-sort SIFDomain<Ref> 0)
(declare-sort _list_ce_helper 0)
(declare-sort _Name 0)
(declare-sort Measure$ 0)
(declare-sort $FVF<list_acc> 0)
(declare-sort $FVF<Ticket_discount_code> 0)
(declare-sort $FVF<__previous> 0)
(declare-sort $PSF<Ticket_state> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<PyType>To$Snap (Seq<PyType>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<PyType> ($Snap) Seq<PyType>)
(assert (forall ((x Seq<PyType>)) (!
    (= x ($SortWrappers.$SnapToSeq<PyType>($SortWrappers.Seq<PyType>To$Snap x)))
    :pattern (($SortWrappers.Seq<PyType>To$Snap x))
    :qid |$Snap.$SnapToSeq<PyType>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<PyType>To$Snap($SortWrappers.$SnapToSeq<PyType> x)))
    :pattern (($SortWrappers.$SnapToSeq<PyType> x))
    :qid |$Snap.Seq<PyType>To$SnapToSeq<PyType>|
    )))
(declare-fun $SortWrappers.Seq<Measure$>To$Snap (Seq<Measure$>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Measure$> ($Snap) Seq<Measure$>)
(assert (forall ((x Seq<Measure$>)) (!
    (= x ($SortWrappers.$SnapToSeq<Measure$>($SortWrappers.Seq<Measure$>To$Snap x)))
    :pattern (($SortWrappers.Seq<Measure$>To$Snap x))
    :qid |$Snap.$SnapToSeq<Measure$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Measure$>To$Snap($SortWrappers.$SnapToSeq<Measure$> x)))
    :pattern (($SortWrappers.$SnapToSeq<Measure$> x))
    :qid |$Snap.Seq<Measure$>To$SnapToSeq<Measure$>|
    )))
(declare-fun $SortWrappers.Seq<$Ref>To$Snap (Seq<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<$Ref> ($Snap) Seq<$Ref>)
(assert (forall ((x Seq<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSeq<$Ref>($SortWrappers.Seq<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Seq<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSeq<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<$Ref>To$Snap($SortWrappers.$SnapToSeq<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSeq<$Ref> x))
    :qid |$Snap.Seq<$Ref>To$SnapToSeq<$Ref>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<_Name>To$Snap (Set<_Name>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<_Name> ($Snap) Set<_Name>)
(assert (forall ((x Set<_Name>)) (!
    (= x ($SortWrappers.$SnapToSet<_Name>($SortWrappers.Set<_Name>To$Snap x)))
    :pattern (($SortWrappers.Set<_Name>To$Snap x))
    :qid |$Snap.$SnapToSet<_Name>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<_Name>To$Snap($SortWrappers.$SnapToSet<_Name> x)))
    :pattern (($SortWrappers.$SnapToSet<_Name> x))
    :qid |$Snap.Set<_Name>To$SnapToSet<_Name>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<$Ref>>To$Snap (Set<Seq<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<$Ref>> ($Snap) Set<Seq<$Ref>>)
(assert (forall ((x Set<Seq<$Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<$Ref>>($SortWrappers.Set<Seq<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<$Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<$Ref>>To$Snap($SortWrappers.$SnapToSet<Seq<$Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<$Ref>> x))
    :qid |$Snap.Set<Seq<$Ref>>To$SnapToSet<Seq<$Ref>>|
    )))
(declare-fun $SortWrappers.Set<Set<$Ref>>To$Snap (Set<Set<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Set<$Ref>> ($Snap) Set<Set<$Ref>>)
(assert (forall ((x Set<Set<$Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Set<$Ref>>($SortWrappers.Set<Set<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Set<$Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Set<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Set<$Ref>>To$Snap($SortWrappers.$SnapToSet<Set<$Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Set<$Ref>> x))
    :qid |$Snap.Set<Set<$Ref>>To$SnapToSet<Set<$Ref>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.PyTypeTo$Snap (PyType) $Snap)
(declare-fun $SortWrappers.$SnapToPyType ($Snap) PyType)
(assert (forall ((x PyType)) (!
    (= x ($SortWrappers.$SnapToPyType($SortWrappers.PyTypeTo$Snap x)))
    :pattern (($SortWrappers.PyTypeTo$Snap x))
    :qid |$Snap.$SnapToPyTypeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.PyTypeTo$Snap($SortWrappers.$SnapToPyType x)))
    :pattern (($SortWrappers.$SnapToPyType x))
    :qid |$Snap.PyTypeTo$SnapToPyType|
    )))
(declare-fun $SortWrappers.SIFDomain<Ref>To$Snap (SIFDomain<Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSIFDomain<Ref> ($Snap) SIFDomain<Ref>)
(assert (forall ((x SIFDomain<Ref>)) (!
    (= x ($SortWrappers.$SnapToSIFDomain<Ref>($SortWrappers.SIFDomain<Ref>To$Snap x)))
    :pattern (($SortWrappers.SIFDomain<Ref>To$Snap x))
    :qid |$Snap.$SnapToSIFDomain<Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.SIFDomain<Ref>To$Snap($SortWrappers.$SnapToSIFDomain<Ref> x)))
    :pattern (($SortWrappers.$SnapToSIFDomain<Ref> x))
    :qid |$Snap.SIFDomain<Ref>To$SnapToSIFDomain<Ref>|
    )))
(declare-fun $SortWrappers._list_ce_helperTo$Snap (_list_ce_helper) $Snap)
(declare-fun $SortWrappers.$SnapTo_list_ce_helper ($Snap) _list_ce_helper)
(assert (forall ((x _list_ce_helper)) (!
    (= x ($SortWrappers.$SnapTo_list_ce_helper($SortWrappers._list_ce_helperTo$Snap x)))
    :pattern (($SortWrappers._list_ce_helperTo$Snap x))
    :qid |$Snap.$SnapTo_list_ce_helperTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._list_ce_helperTo$Snap($SortWrappers.$SnapTo_list_ce_helper x)))
    :pattern (($SortWrappers.$SnapTo_list_ce_helper x))
    :qid |$Snap._list_ce_helperTo$SnapTo_list_ce_helper|
    )))
(declare-fun $SortWrappers._NameTo$Snap (_Name) $Snap)
(declare-fun $SortWrappers.$SnapTo_Name ($Snap) _Name)
(assert (forall ((x _Name)) (!
    (= x ($SortWrappers.$SnapTo_Name($SortWrappers._NameTo$Snap x)))
    :pattern (($SortWrappers._NameTo$Snap x))
    :qid |$Snap.$SnapTo_NameTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._NameTo$Snap($SortWrappers.$SnapTo_Name x)))
    :pattern (($SortWrappers.$SnapTo_Name x))
    :qid |$Snap._NameTo$SnapTo_Name|
    )))
(declare-fun $SortWrappers.Measure$To$Snap (Measure$) $Snap)
(declare-fun $SortWrappers.$SnapToMeasure$ ($Snap) Measure$)
(assert (forall ((x Measure$)) (!
    (= x ($SortWrappers.$SnapToMeasure$($SortWrappers.Measure$To$Snap x)))
    :pattern (($SortWrappers.Measure$To$Snap x))
    :qid |$Snap.$SnapToMeasure$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Measure$To$Snap($SortWrappers.$SnapToMeasure$ x)))
    :pattern (($SortWrappers.$SnapToMeasure$ x))
    :qid |$Snap.Measure$To$SnapToMeasure$|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<list_acc>To$Snap ($FVF<list_acc>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<list_acc> ($Snap) $FVF<list_acc>)
(assert (forall ((x $FVF<list_acc>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<list_acc>($SortWrappers.$FVF<list_acc>To$Snap x)))
    :pattern (($SortWrappers.$FVF<list_acc>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<list_acc>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<list_acc>To$Snap($SortWrappers.$SnapTo$FVF<list_acc> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<list_acc> x))
    :qid |$Snap.$FVF<list_acc>To$SnapTo$FVF<list_acc>|
    )))
(declare-fun $SortWrappers.$FVF<Ticket_discount_code>To$Snap ($FVF<Ticket_discount_code>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Ticket_discount_code> ($Snap) $FVF<Ticket_discount_code>)
(assert (forall ((x $FVF<Ticket_discount_code>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Ticket_discount_code>($SortWrappers.$FVF<Ticket_discount_code>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Ticket_discount_code>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Ticket_discount_code>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Ticket_discount_code>To$Snap($SortWrappers.$SnapTo$FVF<Ticket_discount_code> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Ticket_discount_code> x))
    :qid |$Snap.$FVF<Ticket_discount_code>To$SnapTo$FVF<Ticket_discount_code>|
    )))
(declare-fun $SortWrappers.$FVF<__previous>To$Snap ($FVF<__previous>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<__previous> ($Snap) $FVF<__previous>)
(assert (forall ((x $FVF<__previous>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<__previous>($SortWrappers.$FVF<__previous>To$Snap x)))
    :pattern (($SortWrappers.$FVF<__previous>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<__previous>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<__previous>To$Snap($SortWrappers.$SnapTo$FVF<__previous> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<__previous> x))
    :qid |$Snap.$FVF<__previous>To$SnapTo$FVF<__previous>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$PSF<Ticket_state>To$Snap ($PSF<Ticket_state>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<Ticket_state> ($Snap) $PSF<Ticket_state>)
(assert (forall ((x $PSF<Ticket_state>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<Ticket_state>($SortWrappers.$PSF<Ticket_state>To$Snap x)))
    :pattern (($SortWrappers.$PSF<Ticket_state>To$Snap x))
    :qid |$Snap.$SnapTo$PSF<Ticket_state>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PSF<Ticket_state>To$Snap($SortWrappers.$SnapTo$PSF<Ticket_state> x)))
    :pattern (($SortWrappers.$SnapTo$PSF<Ticket_state> x))
    :qid |$Snap.$PSF<Ticket_state>To$SnapTo$PSF<Ticket_state>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<_Name>) Int)
(declare-const Set_empty Set<_Name>)
(declare-fun Set_in (_Name Set<_Name>) Bool)
(declare-fun Set_singleton (_Name) Set<_Name>)
(declare-fun Set_unionone (Set<_Name> _Name) Set<_Name>)
(declare-fun Set_union (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_intersection (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_difference (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_subset (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_equal (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_skolem_diff (Set<_Name> Set<_Name>) _Name)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_skolem_diff (Set<Int> Set<Int>) Int)
(declare-fun Set_card (Set<Seq<$Ref>>) Int)
(declare-const Set_empty Set<Seq<$Ref>>)
(declare-fun Set_in (Seq<$Ref> Set<Seq<$Ref>>) Bool)
(declare-fun Set_singleton (Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_unionone (Set<Seq<$Ref>> Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_union (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_intersection (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_difference (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_subset (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_equal (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_skolem_diff (Set<Seq<$Ref>> Set<Seq<$Ref>>) Seq<$Ref>)
(declare-fun Set_card (Set<Set<$Ref>>) Int)
(declare-const Set_empty Set<Set<$Ref>>)
(declare-fun Set_in (Set<$Ref> Set<Set<$Ref>>) Bool)
(declare-fun Set_singleton (Set<$Ref>) Set<Set<$Ref>>)
(declare-fun Set_unionone (Set<Set<$Ref>> Set<$Ref>) Set<Set<$Ref>>)
(declare-fun Set_union (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_intersection (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_difference (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_subset (Set<Set<$Ref>> Set<Set<$Ref>>) Bool)
(declare-fun Set_equal (Set<Set<$Ref>> Set<Set<$Ref>>) Bool)
(declare-fun Set_skolem_diff (Set<Set<$Ref>> Set<Set<$Ref>>) Set<$Ref>)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-fun Seq_length (Seq<PyType>) Int)
(declare-const Seq_empty Seq<PyType>)
(declare-fun Seq_singleton (PyType) Seq<PyType>)
(declare-fun Seq_append (Seq<PyType> Seq<PyType>) Seq<PyType>)
(declare-fun Seq_index (Seq<PyType> Int) PyType)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<PyType> Int PyType) Seq<PyType>)
(declare-fun Seq_take (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_drop (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_contains (Seq<PyType> PyType) Bool)
(declare-fun Seq_contains_trigger (Seq<PyType> PyType) Bool)
(declare-fun Seq_skolem (Seq<PyType> PyType) Int)
(declare-fun Seq_equal (Seq<PyType> Seq<PyType>) Bool)
(declare-fun Seq_skolem_diff (Seq<PyType> Seq<PyType>) Int)
(declare-fun Seq_length (Seq<Measure$>) Int)
(declare-const Seq_empty Seq<Measure$>)
(declare-fun Seq_singleton (Measure$) Seq<Measure$>)
(declare-fun Seq_append (Seq<Measure$> Seq<Measure$>) Seq<Measure$>)
(declare-fun Seq_index (Seq<Measure$> Int) Measure$)
(declare-fun Seq_update (Seq<Measure$> Int Measure$) Seq<Measure$>)
(declare-fun Seq_take (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_drop (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_contains (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_contains_trigger (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_skolem (Seq<Measure$> Measure$) Int)
(declare-fun Seq_equal (Seq<Measure$> Seq<Measure$>) Bool)
(declare-fun Seq_skolem_diff (Seq<Measure$> Seq<Measure$>) Int)
(declare-fun Seq_length (Seq<$Ref>) Int)
(declare-const Seq_empty Seq<$Ref>)
(declare-fun Seq_singleton ($Ref) Seq<$Ref>)
(declare-fun Seq_append (Seq<$Ref> Seq<$Ref>) Seq<$Ref>)
(declare-fun Seq_index (Seq<$Ref> Int) $Ref)
(declare-fun Seq_update (Seq<$Ref> Int $Ref) Seq<$Ref>)
(declare-fun Seq_take (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_drop (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_contains (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_contains_trigger (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_skolem (Seq<$Ref> $Ref) Int)
(declare-fun Seq_equal (Seq<$Ref> Seq<$Ref>) Bool)
(declare-fun Seq_skolem_diff (Seq<$Ref> Seq<$Ref>) Int)
(declare-fun Measure$create<Measure$> (Bool $Ref Int) Measure$)
(declare-fun Measure$guard<Bool> (Measure$) Bool)
(declare-fun Measure$key<Ref> (Measure$) $Ref)
(declare-fun Measure$value<Int> (Measure$) Int)
(declare-fun Low<Bool> ($Ref) Bool)
(declare-fun seq_ref_length<Int> (Seq<$Ref>) Int)
(declare-fun seq_ref_index<Ref> (Seq<$Ref> Int) $Ref)
(declare-fun extends_<Bool> (PyType PyType) Bool)
(declare-fun issubtype<Bool> (PyType PyType) Bool)
(declare-fun isnotsubtype<Bool> (PyType PyType) Bool)
(declare-fun tuple_args<Seq<PyType>> (PyType) Seq<PyType>)
(declare-fun typeof<PyType> ($Ref) PyType)
(declare-fun get_basic<PyType> (PyType) PyType)
(declare-fun union_type_1<PyType> (PyType) PyType)
(declare-fun union_type_2<PyType> (PyType PyType) PyType)
(declare-fun union_type_3<PyType> (PyType PyType PyType) PyType)
(declare-fun union_type_4<PyType> (PyType PyType PyType PyType) PyType)
(declare-const object<PyType> PyType)
(declare-const list_basic<PyType> PyType)
(declare-fun list<PyType> (PyType) PyType)
(declare-fun list_arg<PyType> (PyType Int) PyType)
(declare-const set_basic<PyType> PyType)
(declare-fun set<PyType> (PyType) PyType)
(declare-fun set_arg<PyType> (PyType Int) PyType)
(declare-const dict_basic<PyType> PyType)
(declare-fun dict<PyType> (PyType PyType) PyType)
(declare-fun dict_arg<PyType> (PyType Int) PyType)
(declare-const int<PyType> PyType)
(declare-const float<PyType> PyType)
(declare-const bool<PyType> PyType)
(declare-const NoneType<PyType> PyType)
(declare-const Exception<PyType> PyType)
(declare-const ConnectionRefusedError<PyType> PyType)
(declare-const traceback<PyType> PyType)
(declare-const str<PyType> PyType)
(declare-const bytes<PyType> PyType)
(declare-const tuple_basic<PyType> PyType)
(declare-fun tuple<PyType> (Seq<PyType>) PyType)
(declare-fun tuple_arg<PyType> (PyType Int) PyType)
(declare-const PSeq_basic<PyType> PyType)
(declare-fun PSeq<PyType> (PyType) PyType)
(declare-fun PSeq_arg<PyType> (PyType Int) PyType)
(declare-const PSet_basic<PyType> PyType)
(declare-fun PSet<PyType> (PyType) PyType)
(declare-fun PSet_arg<PyType> (PyType Int) PyType)
(declare-const PMultiset_basic<PyType> PyType)
(declare-fun PMultiset<PyType> (PyType) PyType)
(declare-fun PMultiset_arg<PyType> (PyType Int) PyType)
(declare-const slice<PyType> PyType)
(declare-const py_range<PyType> PyType)
(declare-const Iterator_basic<PyType> PyType)
(declare-fun Iterator<PyType> (PyType) PyType)
(declare-fun Iterator_arg<PyType> (PyType Int) PyType)
(declare-const Thread_0<PyType> PyType)
(declare-const LevelType<PyType> PyType)
(declare-const type<PyType> PyType)
(declare-const Place<PyType> PyType)
(declare-const __prim__Seq_type<PyType> PyType)
(declare-const SoldoutException<PyType> PyType)
(declare-const Ticket<PyType> PyType)
(declare-fun _combine<_Name> (_Name _Name) _Name)
(declare-fun _single<_Name> (Int) _Name)
(declare-fun _get_combined_prefix<_Name> (_Name) _Name)
(declare-fun _get_combined_name<_Name> (_Name) _Name)
(declare-fun _get_value<Int> (_Name) Int)
(declare-fun _name_type<Bool> (_Name) Bool)
(declare-fun _is_single<Bool> (_Name) Bool)
(declare-fun _is_combined<Bool> (_Name) Bool)
; /field_value_functions_declarations.smt2 [list_acc: Seq[Ref]]
(declare-fun $FVF.domain_list_acc ($FVF<list_acc>) Set<$Ref>)
(declare-fun $FVF.lookup_list_acc ($FVF<list_acc> $Ref) Seq<$Ref>)
(declare-fun $FVF.after_list_acc ($FVF<list_acc> $FVF<list_acc>) Bool)
(declare-fun $FVF.loc_list_acc (Seq<$Ref> $Ref) Bool)
(declare-fun $FVF.perm_list_acc ($FPM $Ref) $Perm)
(declare-const $fvfTOP_list_acc $FVF<list_acc>)
; /field_value_functions_declarations.smt2 [Ticket_discount_code: Ref]
(declare-fun $FVF.domain_Ticket_discount_code ($FVF<Ticket_discount_code>) Set<$Ref>)
(declare-fun $FVF.lookup_Ticket_discount_code ($FVF<Ticket_discount_code> $Ref) $Ref)
(declare-fun $FVF.after_Ticket_discount_code ($FVF<Ticket_discount_code> $FVF<Ticket_discount_code>) Bool)
(declare-fun $FVF.loc_Ticket_discount_code ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Ticket_discount_code ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Ticket_discount_code $FVF<Ticket_discount_code>)
; /field_value_functions_declarations.smt2 [__previous: Seq[Ref]]
(declare-fun $FVF.domain___previous ($FVF<__previous>) Set<$Ref>)
(declare-fun $FVF.lookup___previous ($FVF<__previous> $Ref) Seq<$Ref>)
(declare-fun $FVF.after___previous ($FVF<__previous> $FVF<__previous>) Bool)
(declare-fun $FVF.loc___previous (Seq<$Ref> $Ref) Bool)
(declare-fun $FVF.perm___previous ($FPM $Ref) $Perm)
(declare-const $fvfTOP___previous $FVF<__previous>)
; /predicate_snap_functions_declarations.smt2 [Ticket_state: Snap]
(declare-fun $PSF.domain_Ticket_state ($PSF<Ticket_state>) Set<$Snap>)
(declare-fun $PSF.lookup_Ticket_state ($PSF<Ticket_state> $Snap) $Snap)
(declare-fun $PSF.after_Ticket_state ($PSF<Ticket_state> $PSF<Ticket_state>) Bool)
(declare-fun $PSF.loc_Ticket_state ($Snap $Snap) Bool)
(declare-fun $PSF.perm_Ticket_state ($PPM $Snap) $Perm)
(declare-const $psfTOP_Ticket_state $PSF<Ticket_state>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun tuple___val__ ($Snap $Ref) Seq<$Ref>)
(declare-fun tuple___val__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun tuple___val__%stateless ($Ref) Bool)
(declare-fun tuple___val__%precondition ($Snap $Ref) Bool)
(declare-fun tuple___len__ ($Snap $Ref) Int)
(declare-fun tuple___len__%limited ($Snap $Ref) Int)
(declare-fun tuple___len__%stateless ($Ref) Bool)
(declare-fun tuple___len__%precondition ($Snap $Ref) Bool)
(declare-fun str___val__ ($Snap $Ref) Int)
(declare-fun str___val__%limited ($Snap $Ref) Int)
(declare-fun str___val__%stateless ($Ref) Bool)
(declare-fun str___val__%precondition ($Snap $Ref) Bool)
(declare-fun str___len__ ($Snap $Ref) Int)
(declare-fun str___len__%limited ($Snap $Ref) Int)
(declare-fun str___len__%stateless ($Ref) Bool)
(declare-fun str___len__%precondition ($Snap $Ref) Bool)
(declare-fun _isDefined ($Snap Int) Bool)
(declare-fun _isDefined%limited ($Snap Int) Bool)
(declare-fun _isDefined%stateless (Int) Bool)
(declare-fun _isDefined%precondition ($Snap Int) Bool)
(declare-fun PSeq___sil_seq__ ($Snap $Ref) Seq<$Ref>)
(declare-fun PSeq___sil_seq__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun PSeq___sil_seq__%stateless ($Ref) Bool)
(declare-fun PSeq___sil_seq__%precondition ($Snap $Ref) Bool)
(declare-fun tuple___getitem__ ($Snap $Ref Int) $Ref)
(declare-fun tuple___getitem__%limited ($Snap $Ref Int) $Ref)
(declare-fun tuple___getitem__%stateless ($Ref Int) Bool)
(declare-fun tuple___getitem__%precondition ($Snap $Ref Int) Bool)
(declare-fun bool___unbox__ ($Snap $Ref) Bool)
(declare-fun bool___unbox__%limited ($Snap $Ref) Bool)
(declare-fun bool___unbox__%stateless ($Ref) Bool)
(declare-fun bool___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__bool___box__ ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%limited ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%stateless (Bool) Bool)
(declare-fun __prim__bool___box__%precondition ($Snap Bool) Bool)
(declare-fun int___unbox__ ($Snap $Ref) Int)
(declare-fun int___unbox__%limited ($Snap $Ref) Int)
(declare-fun int___unbox__%stateless ($Ref) Bool)
(declare-fun int___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__int___box__ ($Snap Int) $Ref)
(declare-fun __prim__int___box__%limited ($Snap Int) $Ref)
(declare-fun __prim__int___box__%stateless (Int) Bool)
(declare-fun __prim__int___box__%precondition ($Snap Int) Bool)
(declare-fun Level ($Snap $Ref) $Perm)
(declare-fun Level%limited ($Snap $Ref) $Perm)
(declare-fun Level%stateless ($Ref) Bool)
(declare-fun Level%precondition ($Snap $Ref) Bool)
(declare-fun str___create__ ($Snap Int Int) $Ref)
(declare-fun str___create__%limited ($Snap Int Int) $Ref)
(declare-fun str___create__%stateless (Int Int) Bool)
(declare-fun str___create__%precondition ($Snap Int Int) Bool)
(declare-fun __file__ ($Snap) $Ref)
(declare-fun __file__%limited ($Snap) $Ref)
(declare-const __file__%stateless Bool)
(declare-fun __file__%precondition ($Snap) Bool)
(declare-fun _checkDefined ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%limited ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%stateless ($Ref Int) Bool)
(declare-fun _checkDefined%precondition ($Snap $Ref Int) Bool)
(declare-fun list___sil_seq__ ($Snap $Ref) Seq<$Ref>)
(declare-fun list___sil_seq__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun list___sil_seq__%stateless ($Ref) Bool)
(declare-fun list___sil_seq__%precondition ($Snap $Ref) Bool)
(declare-fun PSeq___create__ ($Snap Seq<$Ref> PyType) $Ref)
(declare-fun PSeq___create__%limited ($Snap Seq<$Ref> PyType) $Ref)
(declare-fun PSeq___create__%stateless (Seq<$Ref> PyType) Bool)
(declare-fun PSeq___create__%precondition ($Snap Seq<$Ref> PyType) Bool)
(declare-fun tuple___create2__ ($Snap $Ref $Ref PyType PyType Int) $Ref)
(declare-fun tuple___create2__%limited ($Snap $Ref $Ref PyType PyType Int) $Ref)
(declare-fun tuple___create2__%stateless ($Ref $Ref PyType PyType Int) Bool)
(declare-fun tuple___create2__%precondition ($Snap $Ref $Ref PyType PyType Int) Bool)
(declare-fun Measure$check ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%limited ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%stateless (Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%precondition ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun str___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%stateless ($Ref $Ref) Bool)
(declare-fun str___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun int___gt__ ($Snap Int Int) Bool)
(declare-fun int___gt__%limited ($Snap Int Int) Bool)
(declare-fun int___gt__%stateless (Int Int) Bool)
(declare-fun int___gt__%precondition ($Snap Int Int) Bool)
(declare-fun int___sub__ ($Snap Int Int) Int)
(declare-fun int___sub__%limited ($Snap Int Int) Int)
(declare-fun int___sub__%stateless (Int Int) Bool)
(declare-fun int___sub__%precondition ($Snap Int Int) Bool)
(declare-fun list___len__ ($Snap $Ref) Int)
(declare-fun list___len__%limited ($Snap $Ref) Int)
(declare-fun list___len__%stateless ($Ref) Bool)
(declare-fun list___len__%precondition ($Snap $Ref) Bool)
(declare-fun PSeq___len__ ($Snap $Ref) Int)
(declare-fun PSeq___len__%limited ($Snap $Ref) Int)
(declare-fun PSeq___len__%stateless ($Ref) Bool)
(declare-fun PSeq___len__%precondition ($Snap $Ref) Bool)
(declare-fun int___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%stateless ($Ref $Ref) Bool)
(declare-fun int___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun __name__ ($Snap) $Ref)
(declare-fun __name__%limited ($Snap) $Ref)
(declare-const __name__%stateless Bool)
(declare-fun __name__%precondition ($Snap) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun MustTerminate%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeBounded%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeUnbounded%trigger ($Snap $Ref) Bool)
(declare-fun _MaySet%trigger ($Snap $Ref Int) Bool)
(declare-fun Ticket_state%trigger ($Snap $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct bool<PyType> float<PyType> bytes<PyType> slice<PyType> list_basic<PyType> set_basic<PyType> ConnectionRefusedError<PyType> PMultiset_basic<PyType> PSet_basic<PyType> Iterator_basic<PyType> PSeq_basic<PyType> SoldoutException<PyType> traceback<PyType> dict_basic<PyType> type<PyType> py_range<PyType> int<PyType> Exception<PyType> __prim__Seq_type<PyType> tuple_basic<PyType> str<PyType> object<PyType> Ticket<PyType> Thread_0<PyType> Place<PyType> LevelType<PyType> NoneType<PyType>))
; ////////// Axioms
(assert (forall ((s Seq<PyType>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<PyType>)) 0))
(assert (forall ((s Seq<PyType>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (not (= s1 (as Seq_empty  Seq<PyType>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (x PyType)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<PyType>) (x PyType) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<PyType>) (b Seq<PyType>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x PyType) (y PyType)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Measure$>)) 0))
(assert (forall ((s Seq<Measure$>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (not (= s1 (as Seq_empty  Seq<Measure$>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Measure$>) (b Seq<Measure$>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Measure$) (y Measure$)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<$Ref>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<$Ref>)) 0))
(assert (forall ((s Seq<$Ref>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (not (= s1 (as Seq_empty  Seq<$Ref>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<$Ref>) (b Seq<$Ref>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x $Ref) (y $Ref)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<_Name>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o _Name)) (!
  (not (Set_in o (as Set_empty  Set<_Name>)))
  :pattern ((Set_in o (as Set_empty  Set<_Name>)))
  )))
(assert (forall ((s Set<_Name>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<_Name>)))
    (=> (not (= (Set_card s) 0)) (exists ((x _Name))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r _Name)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r _Name) (o _Name)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r _Name)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (o _Name)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (Set_subset a b)
    (forall ((o _Name)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Int)) (!
  (not (Set_in o (as Set_empty  Set<Int>)))
  :pattern ((Set_in o (as Set_empty  Set<Int>)))
  )))
(assert (forall ((s Set<Int>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Int))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Int)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Int) (o Int)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Int)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Int>) (x Int) (o Int)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Int>) (x Int) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (Set_subset a b)
    (forall ((o Int)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Seq<$Ref>)) (!
  (not (Set_in o (as Set_empty  Set<Seq<$Ref>>)))
  :pattern ((Set_in o (as Set_empty  Set<Seq<$Ref>>)))
  )))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<$Ref>>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Seq<$Ref>))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Seq<$Ref>)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Seq<$Ref>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Seq<$Ref>)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>) (y Seq<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=
    (Set_subset a b)
    (forall ((o Seq<$Ref>)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Set<$Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Set<$Ref>)) (!
  (not (Set_in o (as Set_empty  Set<Set<$Ref>>)))
  :pattern ((Set_in o (as Set_empty  Set<Set<$Ref>>)))
  )))
(assert (forall ((s Set<Set<$Ref>>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Set<$Ref>>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Set<$Ref>))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Set<$Ref>)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Set<$Ref>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Set<$Ref>)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>) (y Set<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (y Set<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (y Set<$Ref>)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (y Set<$Ref>)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (=
    (Set_subset a b)
    (forall ((o Set<$Ref>)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$guard<Bool> (Measure$create<Measure$> g k v)) g)
  :pattern ((Measure$guard<Bool> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A0|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$key<Ref> (Measure$create<Measure$> g k v)) k)
  :pattern ((Measure$key<Ref> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A1|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$value<Int> (Measure$create<Measure$> g k v)) v)
  :pattern ((Measure$value<Int> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A2|)))
(assert (forall ((x $Ref)) (!
  (Low<Bool> x)
  :pattern ((Low<Bool> x))
  :qid |prog.low_true|)))
(assert (forall ((___s Seq<$Ref>)) (!
  (= (Seq_length ___s) (seq_ref_length<Int> ___s))
  :pattern ((Seq_length ___s))
  :qid |prog.relate_length|)))
(assert (forall ((___s Seq<$Ref>) (___i Int)) (!
  (= (Seq_index ___s ___i) (seq_ref_index<Ref> ___s ___i))
  :pattern ((Seq_index ___s ___i))
  :qid |prog.relate_index|)))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (issubtype<Bool> middle super))
    (issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> sub middle) (issubtype<Bool> middle super))
  :qid |prog.issubtype_transitivity|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ type_)
  :pattern ((issubtype<Bool> type_ type_))
  :qid |prog.issubtype_reflexivity|)))
(assert (forall ((sub PyType) (sub2 PyType)) (!
  (=> (extends_<Bool> sub sub2) (issubtype<Bool> sub sub2))
  :pattern ((extends_<Bool> sub sub2))
  :qid |prog.extends_implies_subtype|)))
(assert (forall ((r $Ref)) (!
  (=
    (issubtype<Bool> (typeof<PyType> r) (as NoneType<PyType>  PyType))
    (= r $Ref.null))
  :pattern ((typeof<PyType> r))
  :qid |prog.null_nonetype|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ (as object<PyType>  PyType))
  :pattern ((issubtype<Bool> type_ (as object<PyType>  PyType)))
  :qid |prog.issubtype_object|)))
(assert (forall ((sub PyType) (sub2 PyType) (super PyType)) (!
  (=>
    (and
      (extends_<Bool> sub super)
      (and (extends_<Bool> sub2 super) (not (= sub sub2))))
    (and (isnotsubtype<Bool> sub sub2) (isnotsubtype<Bool> sub2 sub)))
  :pattern ((extends_<Bool> sub super) (extends_<Bool> sub2 super))
  :qid |prog.issubtype_exclusion|)))
(assert (forall ((sub PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub super) (not (= sub super)))
    (not (issubtype<Bool> super sub)))
  :pattern ((issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> super sub))
  :qid |prog.issubtype_exclusion_2|)))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
    (not (issubtype<Bool> sub super)))
  :pattern ((issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
  :qid |prog.issubtype_exclusion_propagation|)))
(assert (forall ((seq Seq<PyType>) (i Int) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (issubtype<Bool> (tuple_arg<PyType> Z i) (Seq_index seq i)))
  :pattern ((tuple<PyType> seq) (tuple_arg<PyType> Z i))
  :qid |prog.tuple_arg_def|)))
(assert (forall ((seq Seq<PyType>) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (= (Seq_length (tuple_args<Seq<PyType>> Z)) (Seq_length seq)))
  :pattern ((issubtype<Bool> Z (tuple<PyType> seq)))
  :qid |prog.tuple_args_def|)))
(assert (forall ((seq1 Seq<PyType>) (seq2 Seq<PyType>)) (!
  (=>
    (and
      (not (Seq_equal seq1 seq2))
      (and
        (= (Seq_length seq1) (Seq_length seq2))
        (forall ((i Int)) (!
          (=>
            (and (>= i 0) (< i (Seq_length seq1)))
            (issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          :pattern ((issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          ))))
    (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq1) (Seq_length seq2))
  :pattern ((Seq_length seq1) (tuple<PyType> seq2))
  :pattern ((Seq_length seq1) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq2) (Seq_length seq1))
  :pattern ((Seq_length seq2) (tuple<PyType> seq1))
  :pattern ((Seq_length seq2) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :qid |prog.tuple_self_subtype|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> X (union_type_1<PyType> arg_1)) (issubtype<Bool> X arg_1))
  :pattern ((issubtype<Bool> X (union_type_1<PyType> arg_1)))
  :qid |prog.union_subtype_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2))
    (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2)))
  :pattern ((issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2)))
  :qid |prog.union_subtype_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3))
    (or
      (issubtype<Bool> X arg_1)
      (or (issubtype<Bool> X arg_2) (issubtype<Bool> X arg_3))))
  :pattern ((issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3)))
  :qid |prog.union_subtype_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4))
    (or
      (issubtype<Bool> X arg_1)
      (or
        (issubtype<Bool> X arg_2)
        (or (issubtype<Bool> X arg_3) (issubtype<Bool> X arg_4)))))
  :pattern ((issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4)))
  :qid |prog.union_subtype_4|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> (union_type_1<PyType> arg_1) X) (issubtype<Bool> arg_1 X))
  :pattern ((issubtype<Bool> (union_type_1<PyType> arg_1) X))
  :qid |prog.subtype_union_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X)
    (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X)))
  :pattern ((issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X))
  :qid |prog.subtype_union_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and (issubtype<Bool> arg_2 X) (issubtype<Bool> arg_3 X))))
  :pattern ((issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X))
  :qid |prog.subtype_union_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and
        (issubtype<Bool> arg_2 X)
        (and (issubtype<Bool> arg_3 X) (issubtype<Bool> arg_4 X)))))
  :pattern ((issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X))
  :qid |prog.subtype_union_4|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (list<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (list<PyType> var0)) (as list_basic<PyType>  PyType)))
  :pattern ((list<PyType> var0))
  :qid |prog.subtype_list|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (list<PyType> arg0)) (= (list_arg<PyType> Z 0) arg0))
  :pattern ((list<PyType> arg0) (list_arg<PyType> Z 0))
  :qid |prog.list_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (set<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (set<PyType> var0)) (as set_basic<PyType>  PyType)))
  :pattern ((set<PyType> var0))
  :qid |prog.subtype_set|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (set<PyType> arg0)) (= (set_arg<PyType> Z 0) arg0))
  :pattern ((set<PyType> arg0) (set_arg<PyType> Z 0))
  :qid |prog.set_args0|)))
(assert (forall ((var0 PyType) (var1 PyType)) (!
  (and
    (extends_<Bool> (dict<PyType> var0 var1) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (dict<PyType> var0 var1))
      (as dict_basic<PyType>  PyType)))
  :pattern ((dict<PyType> var0 var1))
  :qid |prog.subtype_dict|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 0) arg0))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 0))
  :qid |prog.dict_args0|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 1) arg1))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 1))
  :qid |prog.dict_args1|)))
(assert (and
  (extends_<Bool> (as int<PyType>  PyType) (as float<PyType>  PyType))
  (= (get_basic<PyType> (as int<PyType>  PyType)) (as int<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as float<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as float<PyType>  PyType)) (as float<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bool<PyType>  PyType) (as int<PyType>  PyType))
  (= (get_basic<PyType> (as bool<PyType>  PyType)) (as bool<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as NoneType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as NoneType<PyType>  PyType))
    (as NoneType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Exception<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Exception<PyType>  PyType))
    (as Exception<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as ConnectionRefusedError<PyType>  PyType) (as Exception<PyType>  PyType))
  (=
    (get_basic<PyType> (as ConnectionRefusedError<PyType>  PyType))
    (as ConnectionRefusedError<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as traceback<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as traceback<PyType>  PyType))
    (as traceback<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as str<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as str<PyType>  PyType)) (as str<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bytes<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as bytes<PyType>  PyType)) (as bytes<PyType>  PyType))))
(assert (forall ((args Seq<PyType>)) (!
  (and
    (=>
      (forall ((e PyType)) (!
        (=> (Seq_contains args e) (= e (as object<PyType>  PyType)))
        :pattern ((Seq_contains args e))
        :pattern ((Seq_contains_trigger args e))
        ))
      (extends_<Bool> (tuple<PyType> args) (as object<PyType>  PyType)))
    (= (get_basic<PyType> (tuple<PyType> args)) (as tuple_basic<PyType>  PyType)))
  :pattern ((tuple<PyType> args))
  :qid |prog.subtype_tuple|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSeq<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSeq<PyType> var0)) (as PSeq_basic<PyType>  PyType)))
  :pattern ((PSeq<PyType> var0))
  :qid |prog.subtype_PSeq|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSeq<PyType> arg0)) (= (PSeq_arg<PyType> Z 0) arg0))
  :pattern ((PSeq<PyType> arg0) (PSeq_arg<PyType> Z 0))
  :qid |prog.PSeq_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSet<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSet<PyType> var0)) (as PSet_basic<PyType>  PyType)))
  :pattern ((PSet<PyType> var0))
  :qid |prog.subtype_PSet|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSet<PyType> arg0)) (= (PSet_arg<PyType> Z 0) arg0))
  :pattern ((PSet<PyType> arg0) (PSet_arg<PyType> Z 0))
  :qid |prog.PSet_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PMultiset<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (PMultiset<PyType> var0))
      (as PMultiset_basic<PyType>  PyType)))
  :pattern ((PMultiset<PyType> var0))
  :qid |prog.subtype_PMultiset|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (PMultiset<PyType> arg0))
    (= (PMultiset_arg<PyType> Z 0) arg0))
  :pattern ((PMultiset<PyType> arg0) (PMultiset_arg<PyType> Z 0))
  :qid |prog.PMultiset_args0|)))
(assert (and
  (extends_<Bool> (as slice<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as slice<PyType>  PyType)) (as slice<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as py_range<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as py_range<PyType>  PyType))
    (as py_range<PyType>  PyType))))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (Iterator<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (Iterator<PyType> var0))
      (as Iterator_basic<PyType>  PyType)))
  :pattern ((Iterator<PyType> var0))
  :qid |prog.subtype_Iterator|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (Iterator<PyType> arg0))
    (= (Iterator_arg<PyType> Z 0) arg0))
  :pattern ((Iterator<PyType> arg0) (Iterator_arg<PyType> Z 0))
  :qid |prog.Iterator_args0|)))
(assert (and
  (extends_<Bool> (as Thread_0<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Thread_0<PyType>  PyType))
    (as Thread_0<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as LevelType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as LevelType<PyType>  PyType))
    (as LevelType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as type<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as type<PyType>  PyType)) (as type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Place<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as Place<PyType>  PyType)) (as Place<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as __prim__Seq_type<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as __prim__Seq_type<PyType>  PyType))
    (as __prim__Seq_type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as SoldoutException<PyType>  PyType) (as Exception<PyType>  PyType))
  (=
    (get_basic<PyType> (as SoldoutException<PyType>  PyType))
    (as SoldoutException<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Ticket<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as Ticket<PyType>  PyType)) (as Ticket<PyType>  PyType))))
(assert (forall ((i Int)) (!
  (= (_get_value<Int> (_single<_Name> i)) i)
  :pattern ((_single<_Name> i))
  :qid |prog.decompose_single|)))
(assert (forall ((n _Name)) (!
  (=> (_is_single<Bool> n) (= n (_single<_Name> (_get_value<Int> n))))
  :pattern ((_get_value<Int> n))
  :qid |prog.compose_single|)))
(assert (forall ((i Int)) (!
  (_name_type<Bool> (_single<_Name> i))
  :pattern ((_single<_Name> i))
  :qid |prog.type_of_single|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (and
    (= (_get_combined_prefix<_Name> (_combine<_Name> n1 n2)) n1)
    (= (_get_combined_name<_Name> (_combine<_Name> n1 n2)) n2))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.decompose_combined|)))
(assert (forall ((n _Name)) (!
  (=>
    (_is_combined<Bool> n)
    (=
      n
      (_combine<_Name> (_get_combined_prefix<_Name> n) (_get_combined_name<_Name> n))))
  :pattern ((_get_combined_prefix<_Name> n))
  :pattern ((_get_combined_name<_Name> n))
  :qid |prog.compose_combined|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (not (_name_type<Bool> (_combine<_Name> n1 n2)))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.type_of_composed|)))
(assert (forall ((n _Name)) (!
  (= (_name_type<Bool> n) (_is_single<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_single|)))
(assert (forall ((n _Name)) (!
  (= (not (_name_type<Bool> n)) (_is_combined<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_combined|)))
; /field_value_functions_axioms.smt2 [list_acc: Seq[Ref]]
(assert (forall ((vs $FVF<list_acc>) (ws $FVF<list_acc>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_list_acc vs) ($FVF.domain_list_acc ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_list_acc vs))
            (= ($FVF.lookup_list_acc vs x) ($FVF.lookup_list_acc ws x)))
          :pattern (($FVF.lookup_list_acc vs x) ($FVF.lookup_list_acc ws x))
          :qid |qp.$FVF<list_acc>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<list_acc>To$Snap vs)
              ($SortWrappers.$FVF<list_acc>To$Snap ws)
              )
    :qid |qp.$FVF<list_acc>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_list_acc pm r))
    :pattern (($FVF.perm_list_acc pm r)))))
(assert (forall ((r $Ref) (f Seq<$Ref>)) (!
    (= ($FVF.loc_list_acc f r) true)
    :pattern (($FVF.loc_list_acc f r)))))
; /field_value_functions_axioms.smt2 [Ticket_discount_code: Ref]
(assert (forall ((vs $FVF<Ticket_discount_code>) (ws $FVF<Ticket_discount_code>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_Ticket_discount_code vs) ($FVF.domain_Ticket_discount_code ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_Ticket_discount_code vs))
            (= ($FVF.lookup_Ticket_discount_code vs x) ($FVF.lookup_Ticket_discount_code ws x)))
          :pattern (($FVF.lookup_Ticket_discount_code vs x) ($FVF.lookup_Ticket_discount_code ws x))
          :qid |qp.$FVF<Ticket_discount_code>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Ticket_discount_code>To$Snap vs)
              ($SortWrappers.$FVF<Ticket_discount_code>To$Snap ws)
              )
    :qid |qp.$FVF<Ticket_discount_code>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Ticket_discount_code pm r))
    :pattern (($FVF.perm_Ticket_discount_code pm r)))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Ticket_discount_code f r) true)
    :pattern (($FVF.loc_Ticket_discount_code f r)))))
; /field_value_functions_axioms.smt2 [__previous: Seq[Ref]]
(assert (forall ((vs $FVF<__previous>) (ws $FVF<__previous>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain___previous vs) ($FVF.domain___previous ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain___previous vs))
            (= ($FVF.lookup___previous vs x) ($FVF.lookup___previous ws x)))
          :pattern (($FVF.lookup___previous vs x) ($FVF.lookup___previous ws x))
          :qid |qp.$FVF<__previous>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<__previous>To$Snap vs)
              ($SortWrappers.$FVF<__previous>To$Snap ws)
              )
    :qid |qp.$FVF<__previous>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm___previous pm r))
    :pattern (($FVF.perm___previous pm r)))))
(assert (forall ((r $Ref) (f Seq<$Ref>)) (!
    (= ($FVF.loc___previous f r) true)
    :pattern (($FVF.loc___previous f r)))))
; /predicate_snap_functions_axioms.smt2 [Ticket_state: Snap]
(assert (forall ((vs $PSF<Ticket_state>) (ws $PSF<Ticket_state>)) (!
    (=>
      (and
        (Set_equal ($PSF.domain_Ticket_state vs) ($PSF.domain_Ticket_state ws))
        (forall ((x $Snap)) (!
          (=>
            (Set_in x ($PSF.domain_Ticket_state vs))
            (= ($PSF.lookup_Ticket_state vs x) ($PSF.lookup_Ticket_state ws x)))
          :pattern (($PSF.lookup_Ticket_state vs x) ($PSF.lookup_Ticket_state ws x))
          :qid |qp.$PSF<Ticket_state>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$PSF<Ticket_state>To$Snap vs)
              ($SortWrappers.$PSF<Ticket_state>To$Snap ws)
              )
    :qid |qp.$PSF<Ticket_state>-eq-outer|
    )))
(assert (forall ((s $Snap) (pm $PPM)) (!
    ($Perm.isValidVar ($PSF.perm_Ticket_state pm s))
    :pattern (($PSF.perm_Ticket_state pm s)))))
(assert (forall ((s $Snap) (f $Snap)) (!
    (= ($PSF.loc_Ticket_state f s) true)
    :pattern (($PSF.loc_Ticket_state f s)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun letvar@66@00 ($Snap $Ref Int) Int)
(declare-fun $k@73@00 () $Perm)
(declare-fun letvar@76@00 ($Snap $Ref $Ref PyType PyType Int) Int)
(declare-fun letvar@77@00 ($Snap $Ref $Ref PyType PyType Int) Int)
(declare-fun $k@80@00 () $Perm)
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (= (tuple___val__%limited s@$ self@0@00) (tuple___val__ s@$ self@0@00))
  :pattern ((tuple___val__ s@$ self@0@00))
  :qid |quant-u-2793|)))
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (tuple___val__%stateless self@0@00)
  :pattern ((tuple___val__%limited s@$ self@0@00))
  :qid |quant-u-2794|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (= (tuple___len__%limited s@$ self@2@00) (tuple___len__ s@$ self@2@00))
  :pattern ((tuple___len__ s@$ self@2@00))
  :qid |quant-u-2795|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (tuple___len__%stateless self@2@00)
  :pattern ((tuple___len__%limited s@$ self@2@00))
  :qid |quant-u-2796|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (tuple___len__%limited s@$ self@2@00))) (=>
    (tuple___len__%precondition s@$ self@2@00)
    (and
      (=
        result@3@00
        (Seq_length (tuple_args<Seq<PyType>> (typeof<PyType> self@2@00))))
      (= result@3@00 (Seq_length (tuple___val__ $Snap.unit self@2@00))))))
  :pattern ((tuple___len__%limited s@$ self@2@00))
  :qid |quant-u-2845|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (tuple___len__%limited s@$ self@2@00))) true)
  :pattern ((tuple___len__%limited s@$ self@2@00))
  :qid |quant-u-2846|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (tuple___len__%limited s@$ self@2@00))) (=>
    (tuple___len__%precondition s@$ self@2@00)
    (tuple___val__%precondition $Snap.unit self@2@00)))
  :pattern ((tuple___len__%limited s@$ self@2@00))
  :qid |quant-u-2847|)))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (= (str___val__%limited s@$ self@4@00) (str___val__ s@$ self@4@00))
  :pattern ((str___val__ s@$ self@4@00))
  :qid |quant-u-2797|)))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (str___val__%stateless self@4@00)
  :pattern ((str___val__%limited s@$ self@4@00))
  :qid |quant-u-2798|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref)) (!
  (= (str___len__%limited s@$ self@6@00) (str___len__ s@$ self@6@00))
  :pattern ((str___len__ s@$ self@6@00))
  :qid |quant-u-2799|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref)) (!
  (str___len__%stateless self@6@00)
  :pattern ((str___len__%limited s@$ self@6@00))
  :qid |quant-u-2800|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref)) (!
  (let ((result@7@00 (str___len__%limited s@$ self@6@00))) (=>
    (str___len__%precondition s@$ self@6@00)
    (>= result@7@00 0)))
  :pattern ((str___len__%limited s@$ self@6@00))
  :qid |quant-u-2848|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref)) (!
  (let ((result@7@00 (str___len__%limited s@$ self@6@00))) true)
  :pattern ((str___len__%limited s@$ self@6@00))
  :qid |quant-u-2849|)))
(assert (forall ((s@$ $Snap) (id@8@00 Int)) (!
  (= (_isDefined%limited s@$ id@8@00) (_isDefined s@$ id@8@00))
  :pattern ((_isDefined s@$ id@8@00))
  :qid |quant-u-2801|)))
(assert (forall ((s@$ $Snap) (id@8@00 Int)) (!
  (_isDefined%stateless id@8@00)
  :pattern ((_isDefined%limited s@$ id@8@00))
  :qid |quant-u-2802|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (= (PSeq___sil_seq__%limited s@$ box@10@00) (PSeq___sil_seq__ s@$ box@10@00))
  :pattern ((PSeq___sil_seq__ s@$ box@10@00))
  :qid |quant-u-2803|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (PSeq___sil_seq__%stateless box@10@00)
  :pattern ((PSeq___sil_seq__%limited s@$ box@10@00))
  :qid |quant-u-2804|)))
(assert (forall ((s@$ $Snap) (self@12@00 $Ref) (key@13@00 Int)) (!
  (=
    (tuple___getitem__%limited s@$ self@12@00 key@13@00)
    (tuple___getitem__ s@$ self@12@00 key@13@00))
  :pattern ((tuple___getitem__ s@$ self@12@00 key@13@00))
  :qid |quant-u-2805|)))
(assert (forall ((s@$ $Snap) (self@12@00 $Ref) (key@13@00 Int)) (!
  (tuple___getitem__%stateless self@12@00 key@13@00)
  :pattern ((tuple___getitem__%limited s@$ self@12@00 key@13@00))
  :qid |quant-u-2806|)))
(assert (forall ((s@$ $Snap) (self@12@00 $Ref) (key@13@00 Int)) (!
  (let ((result@14@00 (tuple___getitem__%limited s@$ self@12@00 key@13@00))) (=>
    (tuple___getitem__%precondition s@$ self@12@00 key@13@00)
    (and
      (=>
        (>= key@13@00 0)
        (issubtype<Bool> (typeof<PyType> result@14@00) (tuple_arg<PyType> (typeof<PyType> self@12@00) key@13@00)))
      (=>
        (< key@13@00 0)
        (issubtype<Bool> (typeof<PyType> result@14@00) (tuple_arg<PyType> (typeof<PyType> self@12@00) (+
          (tuple___len__ $Snap.unit self@12@00)
          key@13@00))))
      (=>
        (>= key@13@00 0)
        (=
          result@14@00
          (Seq_index (tuple___val__ $Snap.unit self@12@00) key@13@00)))
      (=>
        (< key@13@00 0)
        (=
          result@14@00
          (Seq_index
            (tuple___val__ $Snap.unit self@12@00)
            (+ (tuple___len__ $Snap.unit self@12@00) key@13@00)))))))
  :pattern ((tuple___getitem__%limited s@$ self@12@00 key@13@00))
  :qid |quant-u-2850|)))
(assert (forall ((s@$ $Snap) (self@12@00 $Ref) (key@13@00 Int)) (!
  (let ((result@14@00 (tuple___getitem__%limited s@$ self@12@00 key@13@00))) true)
  :pattern ((tuple___getitem__%limited s@$ self@12@00 key@13@00))
  :qid |quant-u-2851|)))
(assert (forall ((s@$ $Snap) (self@12@00 $Ref) (key@13@00 Int)) (!
  (let ((result@14@00 (tuple___getitem__%limited s@$ self@12@00 key@13@00))) (=>
    (and
      (tuple___getitem__%precondition s@$ self@12@00 key@13@00)
      (< key@13@00 0))
    (tuple___len__%precondition $Snap.unit self@12@00)))
  :pattern ((tuple___getitem__%limited s@$ self@12@00 key@13@00))
  :qid |quant-u-2852|)))
(assert (forall ((s@$ $Snap) (self@12@00 $Ref) (key@13@00 Int)) (!
  (let ((result@14@00 (tuple___getitem__%limited s@$ self@12@00 key@13@00))) (=>
    (and
      (tuple___getitem__%precondition s@$ self@12@00 key@13@00)
      (>= key@13@00 0))
    (tuple___val__%precondition $Snap.unit self@12@00)))
  :pattern ((tuple___getitem__%limited s@$ self@12@00 key@13@00))
  :qid |quant-u-2853|)))
(assert (forall ((s@$ $Snap) (self@12@00 $Ref) (key@13@00 Int)) (!
  (let ((result@14@00 (tuple___getitem__%limited s@$ self@12@00 key@13@00))) (=>
    (and
      (tuple___getitem__%precondition s@$ self@12@00 key@13@00)
      (< key@13@00 0))
    (and
      (tuple___val__%precondition $Snap.unit self@12@00)
      (tuple___len__%precondition $Snap.unit self@12@00))))
  :pattern ((tuple___getitem__%limited s@$ self@12@00 key@13@00))
  :qid |quant-u-2854|)))
(assert (forall ((s@$ $Snap) (box@15@00 $Ref)) (!
  (= (bool___unbox__%limited s@$ box@15@00) (bool___unbox__ s@$ box@15@00))
  :pattern ((bool___unbox__ s@$ box@15@00))
  :qid |quant-u-2807|)))
(assert (forall ((s@$ $Snap) (box@15@00 $Ref)) (!
  (bool___unbox__%stateless box@15@00)
  :pattern ((bool___unbox__%limited s@$ box@15@00))
  :qid |quant-u-2808|)))
(assert (forall ((s@$ $Snap) (box@15@00 $Ref)) (!
  (let ((result@16@00 (bool___unbox__%limited s@$ box@15@00))) (=>
    (bool___unbox__%precondition s@$ box@15@00)
    (= (__prim__bool___box__%limited $Snap.unit result@16@00) box@15@00)))
  :pattern ((bool___unbox__%limited s@$ box@15@00))
  :qid |quant-u-2855|)))
(assert (forall ((s@$ $Snap) (box@15@00 $Ref)) (!
  (let ((result@16@00 (bool___unbox__%limited s@$ box@15@00))) (=>
    (bool___unbox__%precondition s@$ box@15@00)
    (__prim__bool___box__%precondition $Snap.unit result@16@00)))
  :pattern ((bool___unbox__%limited s@$ box@15@00))
  :qid |quant-u-2856|)))
(assert (forall ((s@$ $Snap) (prim@17@00 Bool)) (!
  (=
    (__prim__bool___box__%limited s@$ prim@17@00)
    (__prim__bool___box__ s@$ prim@17@00))
  :pattern ((__prim__bool___box__ s@$ prim@17@00))
  :qid |quant-u-2809|)))
(assert (forall ((s@$ $Snap) (prim@17@00 Bool)) (!
  (__prim__bool___box__%stateless prim@17@00)
  :pattern ((__prim__bool___box__%limited s@$ prim@17@00))
  :qid |quant-u-2810|)))
(assert (forall ((s@$ $Snap) (prim@17@00 Bool)) (!
  (let ((result@18@00 (__prim__bool___box__%limited s@$ prim@17@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@17@00)
    (and
      (= (typeof<PyType> result@18@00) (as bool<PyType>  PyType))
      (= (bool___unbox__%limited $Snap.unit result@18@00) prim@17@00)
      (= (int___unbox__%limited $Snap.unit result@18@00) (ite prim@17@00 1 0)))))
  :pattern ((__prim__bool___box__%limited s@$ prim@17@00))
  :qid |quant-u-2857|)))
(assert (forall ((s@$ $Snap) (prim@17@00 Bool)) (!
  (let ((result@18@00 (__prim__bool___box__%limited s@$ prim@17@00))) true)
  :pattern ((__prim__bool___box__%limited s@$ prim@17@00))
  :qid |quant-u-2858|)))
(assert (forall ((s@$ $Snap) (prim@17@00 Bool)) (!
  (let ((result@18@00 (__prim__bool___box__%limited s@$ prim@17@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@17@00)
    (bool___unbox__%precondition $Snap.unit result@18@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@17@00))
  :qid |quant-u-2859|)))
(assert (forall ((s@$ $Snap) (prim@17@00 Bool)) (!
  (let ((result@18@00 (__prim__bool___box__%limited s@$ prim@17@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@17@00)
    (int___unbox__%precondition $Snap.unit result@18@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@17@00))
  :qid |quant-u-2860|)))
(assert (forall ((s@$ $Snap) (box@19@00 $Ref)) (!
  (= (int___unbox__%limited s@$ box@19@00) (int___unbox__ s@$ box@19@00))
  :pattern ((int___unbox__ s@$ box@19@00))
  :qid |quant-u-2811|)))
(assert (forall ((s@$ $Snap) (box@19@00 $Ref)) (!
  (int___unbox__%stateless box@19@00)
  :pattern ((int___unbox__%limited s@$ box@19@00))
  :qid |quant-u-2812|)))
(assert (forall ((s@$ $Snap) (box@19@00 $Ref)) (!
  (let ((result@20@00 (int___unbox__%limited s@$ box@19@00))) (=>
    (int___unbox__%precondition s@$ box@19@00)
    (and
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> box@19@00) (as bool<PyType>  PyType)))
        (= (__prim__int___box__%limited $Snap.unit result@20@00) box@19@00))
      (=>
        (issubtype<Bool> (typeof<PyType> box@19@00) (as bool<PyType>  PyType))
        (=
          (__prim__bool___box__%limited $Snap.unit (not (= result@20@00 0)))
          box@19@00)))))
  :pattern ((int___unbox__%limited s@$ box@19@00))
  :qid |quant-u-2861|)))
(assert (forall ((s@$ $Snap) (box@19@00 $Ref)) (!
  (let ((result@20@00 (int___unbox__%limited s@$ box@19@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@19@00)
      (not
        (issubtype<Bool> (typeof<PyType> box@19@00) (as bool<PyType>  PyType))))
    (__prim__int___box__%precondition $Snap.unit result@20@00)))
  :pattern ((int___unbox__%limited s@$ box@19@00))
  :qid |quant-u-2862|)))
(assert (forall ((s@$ $Snap) (box@19@00 $Ref)) (!
  (let ((result@20@00 (int___unbox__%limited s@$ box@19@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@19@00)
      (issubtype<Bool> (typeof<PyType> box@19@00) (as bool<PyType>  PyType)))
    (__prim__bool___box__%precondition $Snap.unit (not (= result@20@00 0)))))
  :pattern ((int___unbox__%limited s@$ box@19@00))
  :qid |quant-u-2863|)))
(assert (forall ((s@$ $Snap) (prim@21@00 Int)) (!
  (=
    (__prim__int___box__%limited s@$ prim@21@00)
    (__prim__int___box__ s@$ prim@21@00))
  :pattern ((__prim__int___box__ s@$ prim@21@00))
  :qid |quant-u-2813|)))
(assert (forall ((s@$ $Snap) (prim@21@00 Int)) (!
  (__prim__int___box__%stateless prim@21@00)
  :pattern ((__prim__int___box__%limited s@$ prim@21@00))
  :qid |quant-u-2814|)))
(assert (forall ((s@$ $Snap) (prim@21@00 Int)) (!
  (let ((result@22@00 (__prim__int___box__%limited s@$ prim@21@00))) (=>
    (__prim__int___box__%precondition s@$ prim@21@00)
    (and
      (= (typeof<PyType> result@22@00) (as int<PyType>  PyType))
      (= (int___unbox__%limited $Snap.unit result@22@00) prim@21@00))))
  :pattern ((__prim__int___box__%limited s@$ prim@21@00))
  :qid |quant-u-2864|)))
(assert (forall ((s@$ $Snap) (prim@21@00 Int)) (!
  (let ((result@22@00 (__prim__int___box__%limited s@$ prim@21@00))) true)
  :pattern ((__prim__int___box__%limited s@$ prim@21@00))
  :qid |quant-u-2865|)))
(assert (forall ((s@$ $Snap) (prim@21@00 Int)) (!
  (let ((result@22@00 (__prim__int___box__%limited s@$ prim@21@00))) (=>
    (__prim__int___box__%precondition s@$ prim@21@00)
    (int___unbox__%precondition $Snap.unit result@22@00)))
  :pattern ((__prim__int___box__%limited s@$ prim@21@00))
  :qid |quant-u-2866|)))
(assert (forall ((s@$ $Snap) (r@23@00 $Ref)) (!
  (= (Level%limited s@$ r@23@00) (Level s@$ r@23@00))
  :pattern ((Level s@$ r@23@00))
  :qid |quant-u-2815|)))
(assert (forall ((s@$ $Snap) (r@23@00 $Ref)) (!
  (Level%stateless r@23@00)
  :pattern ((Level%limited s@$ r@23@00))
  :qid |quant-u-2816|)))
(assert (forall ((s@$ $Snap) (len@25@00 Int) (value@26@00 Int)) (!
  (=
    (str___create__%limited s@$ len@25@00 value@26@00)
    (str___create__ s@$ len@25@00 value@26@00))
  :pattern ((str___create__ s@$ len@25@00 value@26@00))
  :qid |quant-u-2817|)))
(assert (forall ((s@$ $Snap) (len@25@00 Int) (value@26@00 Int)) (!
  (str___create__%stateless len@25@00 value@26@00)
  :pattern ((str___create__%limited s@$ len@25@00 value@26@00))
  :qid |quant-u-2818|)))
(assert (forall ((s@$ $Snap) (len@25@00 Int) (value@26@00 Int)) (!
  (let ((result@27@00 (str___create__%limited s@$ len@25@00 value@26@00))) (=>
    (str___create__%precondition s@$ len@25@00 value@26@00)
    (and
      (= (str___len__ $Snap.unit result@27@00) len@25@00)
      (= (str___val__ $Snap.unit result@27@00) value@26@00)
      (= (typeof<PyType> result@27@00) (as str<PyType>  PyType)))))
  :pattern ((str___create__%limited s@$ len@25@00 value@26@00))
  :qid |quant-u-2867|)))
(assert (forall ((s@$ $Snap) (len@25@00 Int) (value@26@00 Int)) (!
  (let ((result@27@00 (str___create__%limited s@$ len@25@00 value@26@00))) (=>
    (str___create__%precondition s@$ len@25@00 value@26@00)
    (str___len__%precondition $Snap.unit result@27@00)))
  :pattern ((str___create__%limited s@$ len@25@00 value@26@00))
  :qid |quant-u-2868|)))
(assert (forall ((s@$ $Snap) (len@25@00 Int) (value@26@00 Int)) (!
  (let ((result@27@00 (str___create__%limited s@$ len@25@00 value@26@00))) (=>
    (str___create__%precondition s@$ len@25@00 value@26@00)
    (str___val__%precondition $Snap.unit result@27@00)))
  :pattern ((str___create__%limited s@$ len@25@00 value@26@00))
  :qid |quant-u-2869|)))
(assert (forall ((s@$ $Snap) (len@25@00 Int) (value@26@00 Int)) (!
  (let ((result@27@00 (str___create__%limited s@$ len@25@00 value@26@00))) true)
  :pattern ((str___create__%limited s@$ len@25@00 value@26@00))
  :qid |quant-u-2870|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__file__%limited s@$) (__file__ s@$))
  :pattern ((__file__ s@$))
  :qid |quant-u-2819|)))
(assert (forall ((s@$ $Snap)) (!
  (as __file__%stateless  Bool)
  :pattern ((__file__%limited s@$))
  :qid |quant-u-2820|)))
(assert (forall ((s@$ $Snap) (val@29@00 $Ref) (id@30@00 Int)) (!
  (=
    (_checkDefined%limited s@$ val@29@00 id@30@00)
    (_checkDefined s@$ val@29@00 id@30@00))
  :pattern ((_checkDefined s@$ val@29@00 id@30@00))
  :qid |quant-u-2821|)))
(assert (forall ((s@$ $Snap) (val@29@00 $Ref) (id@30@00 Int)) (!
  (_checkDefined%stateless val@29@00 id@30@00)
  :pattern ((_checkDefined%limited s@$ val@29@00 id@30@00))
  :qid |quant-u-2822|)))
(assert (forall ((s@$ $Snap) (val@29@00 $Ref) (id@30@00 Int)) (!
  (=>
    (_checkDefined%precondition s@$ val@29@00 id@30@00)
    (= (_checkDefined s@$ val@29@00 id@30@00) val@29@00))
  :pattern ((_checkDefined s@$ val@29@00 id@30@00))
  :qid |quant-u-2871|)))
(assert (forall ((s@$ $Snap) (val@29@00 $Ref) (id@30@00 Int)) (!
  true
  :pattern ((_checkDefined s@$ val@29@00 id@30@00))
  :qid |quant-u-2872|)))
(assert (forall ((s@$ $Snap) (self@32@00 $Ref)) (!
  (= (list___sil_seq__%limited s@$ self@32@00) (list___sil_seq__ s@$ self@32@00))
  :pattern ((list___sil_seq__ s@$ self@32@00))
  :qid |quant-u-2823|)))
(assert (forall ((s@$ $Snap) (self@32@00 $Ref)) (!
  (list___sil_seq__%stateless self@32@00)
  :pattern ((list___sil_seq__%limited s@$ self@32@00))
  :qid |quant-u-2824|)))
(assert (forall ((s@$ $Snap) (self@32@00 $Ref)) (!
  (and
    ($Perm.isReadVar $k@73@00)
    (=>
      (list___sil_seq__%precondition s@$ self@32@00)
      (= (list___sil_seq__ s@$ self@32@00) ($SortWrappers.$SnapToSeq<$Ref> s@$))))
  :pattern ((list___sil_seq__ s@$ self@32@00))
  :qid |quant-u-2873|)))
(assert (forall ((s@$ $Snap) (self@32@00 $Ref)) (!
  true
  :pattern ((list___sil_seq__ s@$ self@32@00))
  :qid |quant-u-2874|)))
(assert (forall ((s@$ $Snap) (prim@34@00 Seq<$Ref>) (cont_type@35@00 PyType)) (!
  (=
    (PSeq___create__%limited s@$ prim@34@00 cont_type@35@00)
    (PSeq___create__ s@$ prim@34@00 cont_type@35@00))
  :pattern ((PSeq___create__ s@$ prim@34@00 cont_type@35@00))
  :qid |quant-u-2825|)))
(assert (forall ((s@$ $Snap) (prim@34@00 Seq<$Ref>) (cont_type@35@00 PyType)) (!
  (PSeq___create__%stateless prim@34@00 cont_type@35@00)
  :pattern ((PSeq___create__%limited s@$ prim@34@00 cont_type@35@00))
  :qid |quant-u-2826|)))
(assert (forall ((s@$ $Snap) (prim@34@00 Seq<$Ref>) (cont_type@35@00 PyType)) (!
  (let ((result@36@00 (PSeq___create__%limited s@$ prim@34@00 cont_type@35@00))) (=>
    (PSeq___create__%precondition s@$ prim@34@00 cont_type@35@00)
    (and
      (= (typeof<PyType> result@36@00) (PSeq<PyType> cont_type@35@00))
      (Seq_equal (PSeq___sil_seq__ $Snap.unit result@36@00) prim@34@00))))
  :pattern ((PSeq___create__%limited s@$ prim@34@00 cont_type@35@00))
  :qid |quant-u-2875|)))
(assert (forall ((s@$ $Snap) (prim@34@00 Seq<$Ref>) (cont_type@35@00 PyType)) (!
  (let ((result@36@00 (PSeq___create__%limited s@$ prim@34@00 cont_type@35@00))) true)
  :pattern ((PSeq___create__%limited s@$ prim@34@00 cont_type@35@00))
  :qid |quant-u-2876|)))
(assert (forall ((s@$ $Snap) (prim@34@00 Seq<$Ref>) (cont_type@35@00 PyType)) (!
  (let ((result@36@00 (PSeq___create__%limited s@$ prim@34@00 cont_type@35@00))) (=>
    (PSeq___create__%precondition s@$ prim@34@00 cont_type@35@00)
    (PSeq___sil_seq__%precondition $Snap.unit result@36@00)))
  :pattern ((PSeq___create__%limited s@$ prim@34@00 cont_type@35@00))
  :qid |quant-u-2877|)))
(assert (forall ((s@$ $Snap) (arg0@37@00 $Ref) (arg1@38@00 $Ref) (t0@39@00 PyType) (t1@40@00 PyType) (ctr@41@00 Int)) (!
  (=
    (tuple___create2__%limited s@$ arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00)
    (tuple___create2__ s@$ arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00))
  :pattern ((tuple___create2__ s@$ arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00))
  :qid |quant-u-2827|)))
(assert (forall ((s@$ $Snap) (arg0@37@00 $Ref) (arg1@38@00 $Ref) (t0@39@00 PyType) (t1@40@00 PyType) (ctr@41@00 Int)) (!
  (tuple___create2__%stateless arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00)
  :pattern ((tuple___create2__%limited s@$ arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00))
  :qid |quant-u-2828|)))
(assert (forall ((s@$ $Snap) (arg0@37@00 $Ref) (arg1@38@00 $Ref) (t0@39@00 PyType) (t1@40@00 PyType) (ctr@41@00 Int)) (!
  (let ((result@42@00 (tuple___create2__%limited s@$ arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00))) (=>
    (tuple___create2__%precondition s@$ arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00)
    (and
      (not (= result@42@00 $Ref.null))
      (=
        (typeof<PyType> result@42@00)
        (tuple<PyType> (Seq_append
          (Seq_singleton t0@39@00)
          (Seq_singleton t1@40@00))))
      (Seq_equal
        (tuple_args<Seq<PyType>> (typeof<PyType> result@42@00))
        (Seq_append (Seq_singleton t0@39@00) (Seq_singleton t1@40@00)))
      (Seq_equal
        (tuple___val__ $Snap.unit result@42@00)
        (Seq_append (Seq_singleton arg0@37@00) (Seq_singleton arg1@38@00)))
      (and
        (= (tuple___len__ $Snap.unit result@42@00) 2)
        (and
          (= (tuple___getitem__ $Snap.unit result@42@00 0) arg0@37@00)
          (= (tuple___getitem__ $Snap.unit result@42@00 1) arg1@38@00))))))
  :pattern ((tuple___create2__%limited s@$ arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00))
  :qid |quant-u-2878|)))
(assert (forall ((s@$ $Snap) (arg0@37@00 $Ref) (arg1@38@00 $Ref) (t0@39@00 PyType) (t1@40@00 PyType) (ctr@41@00 Int)) (!
  (let ((result@42@00 (tuple___create2__%limited s@$ arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00))) true)
  :pattern ((tuple___create2__%limited s@$ arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00))
  :qid |quant-u-2879|)))
(assert (forall ((s@$ $Snap) (arg0@37@00 $Ref) (arg1@38@00 $Ref) (t0@39@00 PyType) (t1@40@00 PyType) (ctr@41@00 Int)) (!
  (let ((result@42@00 (tuple___create2__%limited s@$ arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00))) true)
  :pattern ((tuple___create2__%limited s@$ arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00))
  :qid |quant-u-2880|)))
(assert (forall ((s@$ $Snap) (arg0@37@00 $Ref) (arg1@38@00 $Ref) (t0@39@00 PyType) (t1@40@00 PyType) (ctr@41@00 Int)) (!
  (let ((result@42@00 (tuple___create2__%limited s@$ arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00))) true)
  :pattern ((tuple___create2__%limited s@$ arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00))
  :qid |quant-u-2881|)))
(assert (forall ((s@$ $Snap) (arg0@37@00 $Ref) (arg1@38@00 $Ref) (t0@39@00 PyType) (t1@40@00 PyType) (ctr@41@00 Int)) (!
  (let ((result@42@00 (tuple___create2__%limited s@$ arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00))) true)
  :pattern ((tuple___create2__%limited s@$ arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00))
  :qid |quant-u-2882|)))
(assert (forall ((s@$ $Snap) (arg0@37@00 $Ref) (arg1@38@00 $Ref) (t0@39@00 PyType) (t1@40@00 PyType) (ctr@41@00 Int)) (!
  (let ((result@42@00 (tuple___create2__%limited s@$ arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00))) (=>
    (tuple___create2__%precondition s@$ arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00)
    (tuple___val__%precondition $Snap.unit result@42@00)))
  :pattern ((tuple___create2__%limited s@$ arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00))
  :qid |quant-u-2883|)))
(assert (forall ((s@$ $Snap) (arg0@37@00 $Ref) (arg1@38@00 $Ref) (t0@39@00 PyType) (t1@40@00 PyType) (ctr@41@00 Int)) (!
  (let ((result@42@00 (tuple___create2__%limited s@$ arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00))) (=>
    (tuple___create2__%precondition s@$ arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00)
    (and
      (tuple___len__%precondition $Snap.unit result@42@00)
      (=>
        (= (tuple___len__ $Snap.unit result@42@00) 2)
        (and
          (tuple___getitem__%precondition $Snap.unit result@42@00 0)
          (=>
            (= (tuple___getitem__ $Snap.unit result@42@00 0) arg0@37@00)
            (tuple___getitem__%precondition $Snap.unit result@42@00 1)))))))
  :pattern ((tuple___create2__%limited s@$ arg0@37@00 arg1@38@00 t0@39@00 t1@40@00 ctr@41@00))
  :qid |quant-u-2884|)))
(assert (forall ((s@$ $Snap) (map@43@00 Seq<Measure$>) (key@44@00 $Ref) (value@45@00 Int)) (!
  (=
    (Measure$check%limited s@$ map@43@00 key@44@00 value@45@00)
    (Measure$check s@$ map@43@00 key@44@00 value@45@00))
  :pattern ((Measure$check s@$ map@43@00 key@44@00 value@45@00))
  :qid |quant-u-2829|)))
(assert (forall ((s@$ $Snap) (map@43@00 Seq<Measure$>) (key@44@00 $Ref) (value@45@00 Int)) (!
  (Measure$check%stateless map@43@00 key@44@00 value@45@00)
  :pattern ((Measure$check%limited s@$ map@43@00 key@44@00 value@45@00))
  :qid |quant-u-2830|)))
(assert (forall ((s@$ $Snap) (map@43@00 Seq<Measure$>) (key@44@00 $Ref) (value@45@00 Int)) (!
  (=>
    (Measure$check%precondition s@$ map@43@00 key@44@00 value@45@00)
    (=
      (Measure$check s@$ map@43@00 key@44@00 value@45@00)
      (forall ((m Measure$)) (!
        (=>
          (and
            (Seq_contains map@43@00 m)
            (and (Measure$guard<Bool> m) (= (Measure$key<Ref> m) key@44@00)))
          (> (Measure$value<Int> m) value@45@00))
        :pattern ((Seq_contains map@43@00 m))
        :pattern ((Seq_contains_trigger map@43@00 m))
        :pattern ((Seq_contains_trigger map@43@00 m))
        ))))
  :pattern ((Measure$check s@$ map@43@00 key@44@00 value@45@00))
  :qid |quant-u-2885|)))
(assert (forall ((s@$ $Snap) (map@43@00 Seq<Measure$>) (key@44@00 $Ref) (value@45@00 Int)) (!
  true
  :pattern ((Measure$check s@$ map@43@00 key@44@00 value@45@00))
  :qid |quant-u-2886|)))
(assert (forall ((s@$ $Snap) (self@47@00 $Ref) (other@48@00 $Ref)) (!
  (=
    (str___eq__%limited s@$ self@47@00 other@48@00)
    (str___eq__ s@$ self@47@00 other@48@00))
  :pattern ((str___eq__ s@$ self@47@00 other@48@00))
  :qid |quant-u-2831|)))
(assert (forall ((s@$ $Snap) (self@47@00 $Ref) (other@48@00 $Ref)) (!
  (str___eq__%stateless self@47@00 other@48@00)
  :pattern ((str___eq__%limited s@$ self@47@00 other@48@00))
  :qid |quant-u-2832|)))
(assert (forall ((s@$ $Snap) (self@47@00 $Ref) (other@48@00 $Ref)) (!
  (let ((result@49@00 (str___eq__%limited s@$ self@47@00 other@48@00))) (=>
    (str___eq__%precondition s@$ self@47@00 other@48@00)
    (and
      (=
        (=
          (str___val__ $Snap.unit self@47@00)
          (str___val__ $Snap.unit other@48@00))
        result@49@00)
      (=>
        result@49@00
        (=
          (str___len__ $Snap.unit self@47@00)
          (str___len__ $Snap.unit other@48@00))))))
  :pattern ((str___eq__%limited s@$ self@47@00 other@48@00))
  :qid |quant-u-2887|)))
(assert (forall ((s@$ $Snap) (self@47@00 $Ref) (other@48@00 $Ref)) (!
  (let ((result@49@00 (str___eq__%limited s@$ self@47@00 other@48@00))) (=>
    (str___eq__%precondition s@$ self@47@00 other@48@00)
    (and
      (str___val__%precondition $Snap.unit self@47@00)
      (str___val__%precondition $Snap.unit other@48@00))))
  :pattern ((str___eq__%limited s@$ self@47@00 other@48@00))
  :qid |quant-u-2888|)))
(assert (forall ((s@$ $Snap) (self@47@00 $Ref) (other@48@00 $Ref)) (!
  (let ((result@49@00 (str___eq__%limited s@$ self@47@00 other@48@00))) (=>
    (and (str___eq__%precondition s@$ self@47@00 other@48@00) result@49@00)
    (and
      (str___len__%precondition $Snap.unit self@47@00)
      (str___len__%precondition $Snap.unit other@48@00))))
  :pattern ((str___eq__%limited s@$ self@47@00 other@48@00))
  :qid |quant-u-2889|)))
(assert (forall ((s@$ $Snap) (self@50@00 Int) (other@51@00 Int)) (!
  (=
    (int___gt__%limited s@$ self@50@00 other@51@00)
    (int___gt__ s@$ self@50@00 other@51@00))
  :pattern ((int___gt__ s@$ self@50@00 other@51@00))
  :qid |quant-u-2833|)))
(assert (forall ((s@$ $Snap) (self@50@00 Int) (other@51@00 Int)) (!
  (int___gt__%stateless self@50@00 other@51@00)
  :pattern ((int___gt__%limited s@$ self@50@00 other@51@00))
  :qid |quant-u-2834|)))
(assert (forall ((s@$ $Snap) (self@50@00 Int) (other@51@00 Int)) (!
  (=>
    (int___gt__%precondition s@$ self@50@00 other@51@00)
    (= (int___gt__ s@$ self@50@00 other@51@00) (> self@50@00 other@51@00)))
  :pattern ((int___gt__ s@$ self@50@00 other@51@00))
  :qid |quant-u-2890|)))
(assert (forall ((s@$ $Snap) (self@50@00 Int) (other@51@00 Int)) (!
  true
  :pattern ((int___gt__ s@$ self@50@00 other@51@00))
  :qid |quant-u-2891|)))
(assert (forall ((s@$ $Snap) (self@53@00 Int) (other@54@00 Int)) (!
  (=
    (int___sub__%limited s@$ self@53@00 other@54@00)
    (int___sub__ s@$ self@53@00 other@54@00))
  :pattern ((int___sub__ s@$ self@53@00 other@54@00))
  :qid |quant-u-2835|)))
(assert (forall ((s@$ $Snap) (self@53@00 Int) (other@54@00 Int)) (!
  (int___sub__%stateless self@53@00 other@54@00)
  :pattern ((int___sub__%limited s@$ self@53@00 other@54@00))
  :qid |quant-u-2836|)))
(assert (forall ((s@$ $Snap) (self@53@00 Int) (other@54@00 Int)) (!
  (=>
    (int___sub__%precondition s@$ self@53@00 other@54@00)
    (= (int___sub__ s@$ self@53@00 other@54@00) (- self@53@00 other@54@00)))
  :pattern ((int___sub__ s@$ self@53@00 other@54@00))
  :qid |quant-u-2892|)))
(assert (forall ((s@$ $Snap) (self@53@00 Int) (other@54@00 Int)) (!
  true
  :pattern ((int___sub__ s@$ self@53@00 other@54@00))
  :qid |quant-u-2893|)))
(assert (forall ((s@$ $Snap) (self@56@00 $Ref)) (!
  (= (list___len__%limited s@$ self@56@00) (list___len__ s@$ self@56@00))
  :pattern ((list___len__ s@$ self@56@00))
  :qid |quant-u-2837|)))
(assert (forall ((s@$ $Snap) (self@56@00 $Ref)) (!
  (list___len__%stateless self@56@00)
  :pattern ((list___len__%limited s@$ self@56@00))
  :qid |quant-u-2838|)))
(assert (forall ((s@$ $Snap) (self@56@00 $Ref)) (!
  (and
    ($Perm.isReadVar $k@80@00)
    (=>
      (list___len__%precondition s@$ self@56@00)
      (=
        (list___len__ s@$ self@56@00)
        (Seq_length ($SortWrappers.$SnapToSeq<$Ref> ($Snap.second s@$))))))
  :pattern ((list___len__ s@$ self@56@00))
  :qid |quant-u-2894|)))
(assert (forall ((s@$ $Snap) (self@56@00 $Ref)) (!
  true
  :pattern ((list___len__ s@$ self@56@00))
  :qid |quant-u-2895|)))
(assert (forall ((s@$ $Snap) (self@58@00 $Ref)) (!
  (= (PSeq___len__%limited s@$ self@58@00) (PSeq___len__ s@$ self@58@00))
  :pattern ((PSeq___len__ s@$ self@58@00))
  :qid |quant-u-2839|)))
(assert (forall ((s@$ $Snap) (self@58@00 $Ref)) (!
  (PSeq___len__%stateless self@58@00)
  :pattern ((PSeq___len__%limited s@$ self@58@00))
  :qid |quant-u-2840|)))
(assert (forall ((s@$ $Snap) (self@58@00 $Ref)) (!
  (let ((result@59@00 (PSeq___len__%limited s@$ self@58@00))) (=>
    (PSeq___len__%precondition s@$ self@58@00)
    (= result@59@00 (Seq_length (PSeq___sil_seq__ $Snap.unit self@58@00)))))
  :pattern ((PSeq___len__%limited s@$ self@58@00))
  :qid |quant-u-2896|)))
(assert (forall ((s@$ $Snap) (self@58@00 $Ref)) (!
  (let ((result@59@00 (PSeq___len__%limited s@$ self@58@00))) (=>
    (PSeq___len__%precondition s@$ self@58@00)
    (PSeq___sil_seq__%precondition $Snap.unit self@58@00)))
  :pattern ((PSeq___len__%limited s@$ self@58@00))
  :qid |quant-u-2897|)))
(assert (forall ((s@$ $Snap) (self@60@00 $Ref) (other@61@00 $Ref)) (!
  (=
    (int___eq__%limited s@$ self@60@00 other@61@00)
    (int___eq__ s@$ self@60@00 other@61@00))
  :pattern ((int___eq__ s@$ self@60@00 other@61@00))
  :qid |quant-u-2841|)))
(assert (forall ((s@$ $Snap) (self@60@00 $Ref) (other@61@00 $Ref)) (!
  (int___eq__%stateless self@60@00 other@61@00)
  :pattern ((int___eq__%limited s@$ self@60@00 other@61@00))
  :qid |quant-u-2842|)))
(assert (forall ((s@$ $Snap) (self@60@00 $Ref) (other@61@00 $Ref)) (!
  (=>
    (int___eq__%precondition s@$ self@60@00 other@61@00)
    (=
      (int___eq__ s@$ self@60@00 other@61@00)
      (=
        (int___unbox__ $Snap.unit self@60@00)
        (int___unbox__ $Snap.unit other@61@00))))
  :pattern ((int___eq__ s@$ self@60@00 other@61@00))
  :qid |quant-u-2898|)))
(assert (forall ((s@$ $Snap) (self@60@00 $Ref) (other@61@00 $Ref)) (!
  (=>
    (int___eq__%precondition s@$ self@60@00 other@61@00)
    (and
      (int___unbox__%precondition $Snap.unit self@60@00)
      (int___unbox__%precondition $Snap.unit other@61@00)))
  :pattern ((int___eq__ s@$ self@60@00 other@61@00))
  :qid |quant-u-2899|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__name__%limited s@$) (__name__ s@$))
  :pattern ((__name__ s@$))
  :qid |quant-u-2843|)))
(assert (forall ((s@$ $Snap)) (!
  (as __name__%stateless  Bool)
  :pattern ((__name__%limited s@$))
  :qid |quant-u-2844|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- get_seats ----------
(declare-const _cthread_159@0@01 $Ref)
(declare-const _caller_measures_159@1@01 Seq<Measure$>)
(declare-const _residue_159@2@01 $Perm)
(declare-const id_0@3@01 $Ref)
(declare-const num_0@4@01 $Ref)
(declare-const _current_wait_level_159@5@01 $Perm)
(declare-const _res@6@01 $Ref)
(declare-const _err@7@01 $Ref)
(declare-const _cthread_159@8@01 $Ref)
(declare-const _caller_measures_159@9@01 Seq<Measure$>)
(declare-const _residue_159@10@01 $Perm)
(declare-const id_0@11@01 $Ref)
(declare-const num_0@12@01 $Ref)
(declare-const _current_wait_level_159@13@01 $Perm)
(declare-const _res@14@01 $Ref)
(declare-const _err@15@01 $Ref)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@16@01 $Snap)
(assert (= $t@16@01 ($Snap.combine ($Snap.first $t@16@01) ($Snap.second $t@16@01))))
(assert (= ($Snap.first $t@16@01) $Snap.unit))
; [eval] _cthread_159 != null
(assert (not (= _cthread_159@8@01 $Ref.null)))
(assert (=
  ($Snap.second $t@16@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@16@01))
    ($Snap.second ($Snap.second $t@16@01)))))
(assert (= ($Snap.first ($Snap.second $t@16@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_159), Thread_0())
; [eval] typeof(_cthread_159)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_159@8@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@16@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@16@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@16@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@16@01))) $Snap.unit))
; [eval] issubtype(typeof(id_0), int())
; [eval] typeof(id_0)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> id_0@11@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@16@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@01))))
  $Snap.unit))
; [eval] issubtype(typeof(num_0), int())
; [eval] typeof(num_0)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> num_0@12@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@01)))))
  $Snap.unit))
; [eval] int___gt__(int___unbox__(num_0), 0)
; [eval] int___unbox__(num_0)
(push) ; 2
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit num_0@12@01))
(pop) ; 2
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit num_0@12@01))
(push) ; 2
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit num_0@12@01) 0))
(pop) ; 2
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit num_0@12@01) 0))
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit num_0@12@01) 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@17@01 $Snap)
(assert (= $t@17@01 ($Snap.combine ($Snap.first $t@17@01) ($Snap.second $t@17@01))))
(assert (= ($Snap.first $t@17@01) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_159)
(assert (=
  ($Snap.second $t@17@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@17@01))
    ($Snap.second ($Snap.second $t@17@01)))))
(assert (= ($Snap.first ($Snap.second $t@17@01)) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_159)
(assert (=
  ($Snap.second ($Snap.second $t@17@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@17@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@17@01))) $Snap.unit))
; [eval] _residue_159 <= _current_wait_level_159
(assert (<= _residue_159@10@01 _current_wait_level_159@13@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@17@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@17@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@17@01))))
  $Snap.unit))
; [eval] _err == null ==> issubtype(typeof(_res), list(tuple(Seq(int(), int()))))
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@15@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@15@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 0 | _err@15@01 == Null | live]
; [else-branch: 0 | _err@15@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 0 | _err@15@01 == Null]
(assert (= _err@15@01 $Ref.null))
; [eval] issubtype(typeof(_res), list(tuple(Seq(int(), int()))))
; [eval] typeof(_res)
; [eval] list(tuple(Seq(int(), int())))
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (=
  (Seq_length
    (Seq_append
      (Seq_singleton (as int<PyType>  PyType))
      (Seq_singleton (as int<PyType>  PyType))))
  2))
(pop) ; 4
(push) ; 4
; [else-branch: 0 | _err@15@01 != Null]
(assert (not (= _err@15@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (= _err@15@01 $Ref.null)
  (and
    (= _err@15@01 $Ref.null)
    (=
      (Seq_length
        (Seq_append
          (Seq_singleton (as int<PyType>  PyType))
          (Seq_singleton (as int<PyType>  PyType))))
      2))))
; Joined path conditions
(assert (or (not (= _err@15@01 $Ref.null)) (= _err@15@01 $Ref.null)))
(assert (=>
  (= _err@15@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@14@01) (list<PyType> (tuple<PyType> (Seq_append
    (Seq_singleton (as int<PyType>  PyType))
    (Seq_singleton (as int<PyType>  PyType))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))))
; [eval] _err == null
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@15@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@15@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1 | _err@15@01 == Null | live]
; [else-branch: 1 | _err@15@01 != Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1 | _err@15@01 == Null]
(assert (= _err@15@01 $Ref.null))
(assert (not (= _res@14@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))
  $Snap.unit))
; [eval] _err == null ==> int___eq__(__prim__int___box__(list___len__(_res)), num_0)
; [eval] _err == null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@15@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2 | _err@15@01 == Null | live]
; [else-branch: 2 | _err@15@01 != Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2 | _err@15@01 == Null]
; [eval] int___eq__(__prim__int___box__(list___len__(_res)), num_0)
; [eval] __prim__int___box__(list___len__(_res))
; [eval] list___len__(_res)
(push) ; 6
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> _res@14@01) (list<PyType> (list_arg<PyType> (typeof<PyType> _res@14@01) 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@14@01) (list<PyType> (list_arg<PyType> (typeof<PyType> _res@14@01) 0))))
(declare-const $k@18@01 $Perm)
(assert ($Perm.isReadVar $k@18@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))) _res@14@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@18@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@14@01) (list<PyType> (list_arg<PyType> (typeof<PyType> _res@14@01) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))) _res@14@01)))
(set-option :timeout 0)
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))) _res@14@01)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))) _res@14@01)))
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))) _res@14@01))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))) _res@14@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))) _res@14@01)) num_0@12@01))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))) _res@14@01))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))) _res@14@01)) num_0@12@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@18@01))
(assert (=>
  (= _err@15@01 $Ref.null)
  (and
    (issubtype<Bool> (typeof<PyType> _res@14@01) (list<PyType> (list_arg<PyType> (typeof<PyType> _res@14@01) 0)))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))) _res@14@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))) _res@14@01))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))) _res@14@01))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))) _res@14@01)) num_0@12@01))))
(assert (=>
  (= _err@15@01 $Ref.null)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))) _res@14@01)) num_0@12@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))
  $Snap.unit))
; [eval] _err != null && issubtype(typeof(_err), SoldoutException()) ==> true
; [eval] _err != null && issubtype(typeof(_err), SoldoutException())
; [eval] _err != null
(push) ; 4
; [then-branch: 3 | _err@15@01 == Null | live]
; [else-branch: 3 | _err@15@01 != Null | live]
(push) ; 5
; [then-branch: 3 | _err@15@01 == Null]
(pop) ; 5
(push) ; 5
; [else-branch: 3 | _err@15@01 != Null]
(assert (not (= _err@15@01 $Ref.null)))
; [eval] issubtype(typeof(_err), SoldoutException())
; [eval] typeof(_err)
; [eval] SoldoutException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@15@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@15@01) (as SoldoutException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4 | _err@15@01 != Null && issubtype[Bool](typeof[PyType](_err@15@01), SoldoutException[PyType]) | dead]
; [else-branch: 4 | !(_err@15@01 != Null && issubtype[Bool](typeof[PyType](_err@15@01), SoldoutException[PyType])) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 4 | !(_err@15@01 != Null && issubtype[Bool](typeof[PyType](_err@15@01), SoldoutException[PyType]))]
(assert (not
  (and
    (not (= _err@15@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@15@01) (as SoldoutException<PyType>  PyType)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not
  (and
    (not (= _err@15@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@15@01) (as SoldoutException<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), SoldoutException())
; [eval] _err != null
(push) ; 4
; [then-branch: 5 | _err@15@01 != Null | dead]
; [else-branch: 5 | _err@15@01 == Null | live]
(push) ; 5
; [else-branch: 5 | _err@15@01 == Null]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(pop) ; 3
(push) ; 3
; [else-branch: 1 | _err@15@01 != Null]
(assert (not (= _err@15@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))
  $Snap.unit))
; [eval] _err == null ==> int___eq__(__prim__int___box__(list___len__(_res)), num_0)
; [eval] _err == null
(push) ; 4
; [then-branch: 6 | _err@15@01 == Null | dead]
; [else-branch: 6 | _err@15@01 != Null | live]
(push) ; 5
; [else-branch: 6 | _err@15@01 != Null]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))
  $Snap.unit))
; [eval] _err != null && issubtype(typeof(_err), SoldoutException()) ==> true
; [eval] _err != null && issubtype(typeof(_err), SoldoutException())
; [eval] _err != null
(push) ; 4
; [then-branch: 7 | _err@15@01 == Null | live]
; [else-branch: 7 | _err@15@01 != Null | live]
(push) ; 5
; [then-branch: 7 | _err@15@01 == Null]
(assert (= _err@15@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 7 | _err@15@01 != Null]
; [eval] issubtype(typeof(_err), SoldoutException())
; [eval] typeof(_err)
; [eval] SoldoutException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@15@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@15@01) (as SoldoutException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not (= _err@15@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@15@01) (as SoldoutException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 8 | _err@15@01 != Null && issubtype[Bool](typeof[PyType](_err@15@01), SoldoutException[PyType]) | live]
; [else-branch: 8 | !(_err@15@01 != Null && issubtype[Bool](typeof[PyType](_err@15@01), SoldoutException[PyType])) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 8 | _err@15@01 != Null && issubtype[Bool](typeof[PyType](_err@15@01), SoldoutException[PyType])]
(assert (and
  (not (= _err@15@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@15@01) (as SoldoutException<PyType>  PyType))))
(pop) ; 5
(push) ; 5
; [else-branch: 8 | !(_err@15@01 != Null && issubtype[Bool](typeof[PyType](_err@15@01), SoldoutException[PyType]))]
(assert (not
  (and
    (not (= _err@15@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@15@01) (as SoldoutException<PyType>  PyType)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= _err@15@01 $Ref.null))
      (issubtype<Bool> (typeof<PyType> _err@15@01) (as SoldoutException<PyType>  PyType))))
  (and
    (not (= _err@15@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@15@01) (as SoldoutException<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), SoldoutException())
; [eval] _err != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@15@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@15@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 9 | _err@15@01 != Null | live]
; [else-branch: 9 | _err@15@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 9 | _err@15@01 != Null]
(assert (not (= _err@15@01 $Ref.null)))
; [eval] issubtype(typeof(_err), SoldoutException())
; [eval] typeof(_err)
; [eval] SoldoutException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not (= _err@15@01 $Ref.null)))
(assert (=>
  (not (= _err@15@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@15@01) (as SoldoutException<PyType>  PyType))))
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_159: Perm
(declare-const _cwl_159@19@01 $Perm)
; [exec]
; _res := null
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- order_tickets ----------
(declare-const _cthread_160@20@01 $Ref)
(declare-const _caller_measures_160@21@01 Seq<Measure$>)
(declare-const _residue_160@22@01 $Perm)
(declare-const num_1@23@01 $Ref)
(declare-const show_id@24@01 $Ref)
(declare-const code_0@25@01 $Ref)
(declare-const _current_wait_level_160@26@01 $Perm)
(declare-const _res@27@01 $Ref)
(declare-const _err@28@01 $Ref)
(declare-const _cthread_160@29@01 $Ref)
(declare-const _caller_measures_160@30@01 Seq<Measure$>)
(declare-const _residue_160@31@01 $Perm)
(declare-const num_1@32@01 $Ref)
(declare-const show_id@33@01 $Ref)
(declare-const code_0@34@01 $Ref)
(declare-const _current_wait_level_160@35@01 $Perm)
(declare-const _res@36@01 $Ref)
(declare-const _err@37@01 $Ref)
(push) ; 1
(declare-const $t@38@01 $Snap)
(assert (= $t@38@01 ($Snap.combine ($Snap.first $t@38@01) ($Snap.second $t@38@01))))
(assert (= ($Snap.first $t@38@01) $Snap.unit))
; [eval] _cthread_160 != null
(assert (not (= _cthread_160@29@01 $Ref.null)))
(assert (=
  ($Snap.second $t@38@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@38@01))
    ($Snap.second ($Snap.second $t@38@01)))))
(assert (= ($Snap.first ($Snap.second $t@38@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_160), Thread_0())
; [eval] typeof(_cthread_160)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_160@29@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@38@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@38@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@38@01))) $Snap.unit))
; [eval] issubtype(typeof(num_1), int())
; [eval] typeof(num_1)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> num_1@32@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@38@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@38@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@38@01))))
  $Snap.unit))
; [eval] issubtype(typeof(show_id), int())
; [eval] typeof(show_id)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> show_id@33@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))
  $Snap.unit))
; [eval] code_0 == null || issubtype(typeof(code_0), str())
; [eval] code_0 == null
(push) ; 2
; [then-branch: 10 | code_0@34@01 == Null | live]
; [else-branch: 10 | code_0@34@01 != Null | live]
(push) ; 3
; [then-branch: 10 | code_0@34@01 == Null]
(assert (= code_0@34@01 $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 10 | code_0@34@01 != Null]
(assert (not (= code_0@34@01 $Ref.null)))
; [eval] issubtype(typeof(code_0), str())
; [eval] typeof(code_0)
; [eval] str()
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (= code_0@34@01 $Ref.null)) (= code_0@34@01 $Ref.null)))
(assert (or
  (= code_0@34@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> code_0@34@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
  $Snap.unit))
; [eval] int___gt__(int___unbox__(num_1), 0)
; [eval] int___unbox__(num_1)
(push) ; 2
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit num_1@32@01))
(pop) ; 2
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit num_1@32@01))
(push) ; 2
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit num_1@32@01) 0))
(pop) ; 2
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit num_1@32@01) 0))
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit num_1@32@01) 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@39@01 $Snap)
(assert (= $t@39@01 ($Snap.combine ($Snap.first $t@39@01) ($Snap.second $t@39@01))))
(assert (= ($Snap.first $t@39@01) $Snap.unit))
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseBounded] :: Level(_r_3) <= _current_wait_level_160)
(assert (=
  ($Snap.second $t@39@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@39@01))
    ($Snap.second ($Snap.second $t@39@01)))))
(assert (= ($Snap.first ($Snap.second $t@39@01)) $Snap.unit))
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: Level(_r_3) <= _current_wait_level_160)
(assert (=
  ($Snap.second ($Snap.second $t@39@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@39@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@39@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@39@01))) $Snap.unit))
; [eval] _residue_160 <= _current_wait_level_160
(assert (<= _residue_160@31@01 _current_wait_level_160@35@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@39@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@39@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@39@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@39@01))))
  $Snap.unit))
; [eval] _err == null ==> issubtype(typeof(_res), list(Ticket()))
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@37@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@37@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 11 | _err@37@01 == Null | live]
; [else-branch: 11 | _err@37@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 11 | _err@37@01 == Null]
(assert (= _err@37@01 $Ref.null))
; [eval] issubtype(typeof(_res), list(Ticket()))
; [eval] typeof(_res)
; [eval] list(Ticket())
; [eval] Ticket()
(pop) ; 4
(push) ; 4
; [else-branch: 11 | _err@37@01 != Null]
(assert (not (= _err@37@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@37@01 $Ref.null)) (= _err@37@01 $Ref.null)))
(assert (=>
  (= _err@37@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@36@01) (list<PyType> (as Ticket<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@39@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@39@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@39@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@39@01)))))
  $Snap.unit))
; [eval] _err != null && issubtype(typeof(_err), SoldoutException()) ==> true
; [eval] _err != null && issubtype(typeof(_err), SoldoutException())
; [eval] _err != null
(push) ; 3
; [then-branch: 12 | _err@37@01 == Null | live]
; [else-branch: 12 | _err@37@01 != Null | live]
(push) ; 4
; [then-branch: 12 | _err@37@01 == Null]
(assert (= _err@37@01 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 12 | _err@37@01 != Null]
(assert (not (= _err@37@01 $Ref.null)))
; [eval] issubtype(typeof(_err), SoldoutException())
; [eval] typeof(_err)
; [eval] SoldoutException()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@37@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@37@01) (as SoldoutException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= _err@37@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@37@01) (as SoldoutException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 13 | _err@37@01 != Null && issubtype[Bool](typeof[PyType](_err@37@01), SoldoutException[PyType]) | live]
; [else-branch: 13 | !(_err@37@01 != Null && issubtype[Bool](typeof[PyType](_err@37@01), SoldoutException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 13 | _err@37@01 != Null && issubtype[Bool](typeof[PyType](_err@37@01), SoldoutException[PyType])]
(assert (and
  (not (= _err@37@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@37@01) (as SoldoutException<PyType>  PyType))))
(pop) ; 4
(push) ; 4
; [else-branch: 13 | !(_err@37@01 != Null && issubtype[Bool](typeof[PyType](_err@37@01), SoldoutException[PyType]))]
(assert (not
  (and
    (not (= _err@37@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@37@01) (as SoldoutException<PyType>  PyType)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= _err@37@01 $Ref.null))
      (issubtype<Bool> (typeof<PyType> _err@37@01) (as SoldoutException<PyType>  PyType))))
  (and
    (not (= _err@37@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@37@01) (as SoldoutException<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@39@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@39@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@39@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@39@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), SoldoutException())
; [eval] _err != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@37@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@37@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 14 | _err@37@01 != Null | live]
; [else-branch: 14 | _err@37@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 14 | _err@37@01 != Null]
(assert (not (= _err@37@01 $Ref.null)))
; [eval] issubtype(typeof(_err), SoldoutException())
; [eval] typeof(_err)
; [eval] SoldoutException()
(pop) ; 4
(push) ; 4
; [else-branch: 14 | _err@37@01 == Null]
(assert (= _err@37@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (= _err@37@01 $Ref.null) (not (= _err@37@01 $Ref.null))))
(assert (=>
  (not (= _err@37@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@37@01) (as SoldoutException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@39@01))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var seats: Ref
(declare-const seats@40@01 $Ref)
; [exec]
; var res: Ref
(declare-const res@41@01 $Ref)
; [exec]
; var row_0: Ref
(declare-const row_0@42@01 $Ref)
; [exec]
; var seat_0: Ref
(declare-const seat_0@43@01 $Ref)
; [exec]
; var ticket: Ref
(declare-const ticket@44@01 $Ref)
; [exec]
; var num_2: Ref
(declare-const num_2@45@01 $Ref)
; [exec]
; var show_id_0: Ref
(declare-const show_id_0@46@01 $Ref)
; [exec]
; var code_1: Ref
(declare-const code_1@47@01 $Ref)
; [exec]
; var get_seats_res: Ref
(declare-const get_seats_res@48@01 $Ref)
; [exec]
; var list_0: Ref
(declare-const list_0@49@01 $Ref)
; [exec]
; var iterable: Ref
(declare-const iterable@50@01 $Ref)
; [exec]
; var iter: Ref
(declare-const iter@51@01 $Ref)
; [exec]
; var loop_target: Ref
(declare-const loop_target@52@01 $Ref)
; [exec]
; var iter_err: Ref
(declare-const iter_err@53@01 $Ref)
; [exec]
; var seqtmp: Seq[Ref]
(declare-const seqtmp@54@01 Seq<$Ref>)
; [exec]
; var _loop_measures: Seq[Measure$]
(declare-const _loop_measures@55@01 Seq<Measure$>)
; [exec]
; var _loop_check_before: Bool
(declare-const _loop_check_before@56@01 Bool)
; [exec]
; var _loop_termination_flag: Bool
(declare-const _loop_termination_flag@57@01 Bool)
; [exec]
; var _loop_original_must_terminate: Perm
(declare-const _loop_original_must_terminate@58@01 $Perm)
; [exec]
; var _residue_161: Perm
(declare-const _residue_161@59@01 $Perm)
; [exec]
; var Ticket_res: Ref
(declare-const Ticket_res@60@01 $Ref)
; [exec]
; var _cwl_160: Perm
(declare-const _cwl_160@61@01 $Perm)
; [exec]
; var _method_measures_160: Seq[Measure$]
(declare-const _method_measures_160@62@01 Seq<Measure$>)
; [exec]
; _method_measures_160 := Seq(Measure$create(true, _cthread_160, 2))
; [eval] Seq(Measure$create(true, _cthread_160, 2))
; [eval] Measure$create(true, _cthread_160, 2)
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_160@29@01 2)))
  1))
(declare-const _method_measures_160@63@01 Seq<Measure$>)
(assert (=
  _method_measures_160@63@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_160@29@01 2))))
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; num_2 := num_1
; [exec]
; show_id_0 := show_id
; [exec]
; code_1 := code_0
; [exec]
; _cwl_160, get_seats_res, _err := get_seats(_cthread_160, _method_measures_160,
;   _residue_160, show_id_0, num_2)
; [eval] _cthread_159 != null
; [eval] issubtype(typeof(_cthread_159), Thread_0())
; [eval] typeof(_cthread_159)
; [eval] Thread_0()
; [eval] issubtype(typeof(id_0), int())
; [eval] typeof(id_0)
; [eval] int()
; [eval] issubtype(typeof(num_0), int())
; [eval] typeof(num_0)
; [eval] int()
; [eval] int___gt__(int___unbox__(num_0), 0)
; [eval] int___unbox__(num_0)
(push) ; 3
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 3
; Joined path conditions
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] Measure$check(_caller_measures_159, _cthread_159, 1) || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] Measure$check(_caller_measures_159, _cthread_159, 1)
(push) ; 3
(assert (Measure$check%precondition $Snap.unit _method_measures_160@63@01 _cthread_160@29@01 1))
(pop) ; 3
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _method_measures_160@63@01 _cthread_160@29@01 1))
(push) ; 3
; [then-branch: 15 | Measure$check(_, _method_measures_160@63@01, _cthread_160@29@01, 1) | live]
; [else-branch: 15 | !(Measure$check(_, _method_measures_160@63@01, _cthread_160@29@01, 1)) | live]
(push) ; 4
; [then-branch: 15 | Measure$check(_, _method_measures_160@63@01, _cthread_160@29@01, 1)]
(assert (Measure$check $Snap.unit _method_measures_160@63@01 _cthread_160@29@01 1))
(pop) ; 4
(push) ; 4
; [else-branch: 15 | !(Measure$check(_, _method_measures_160@63@01, _cthread_160@29@01, 1))]
(assert (not (Measure$check $Snap.unit _method_measures_160@63@01 _cthread_160@29@01 1)))
; [eval] perm(MustTerminate(_cthread_159)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_159)) == none
; [eval] perm(MustTerminate(_cthread_159))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Measure$check $Snap.unit _method_measures_160@63@01 _cthread_160@29@01 1))
  (Measure$check $Snap.unit _method_measures_160@63@01 _cthread_160@29@01 1)))
(push) ; 3
(assert (not (Measure$check $Snap.unit _method_measures_160@63@01 _cthread_160@29@01 1)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit _method_measures_160@63@01 _cthread_160@29@01 1))
(declare-const _current_wait_level_159@64@01 $Perm)
(declare-const _res@65@01 $Ref)
(declare-const _err@66@01 $Ref)
(declare-const $t@67@01 $Snap)
(assert (= $t@67@01 ($Snap.combine ($Snap.first $t@67@01) ($Snap.second $t@67@01))))
(assert (= ($Snap.first $t@67@01) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_159)
(assert (=
  ($Snap.second $t@67@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@67@01))
    ($Snap.second ($Snap.second $t@67@01)))))
(assert (= ($Snap.first ($Snap.second $t@67@01)) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_159)
(assert (=
  ($Snap.second ($Snap.second $t@67@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@67@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@67@01))) $Snap.unit))
; [eval] _residue_159 <= _current_wait_level_159
(assert (<= _residue_160@31@01 _current_wait_level_159@64@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@67@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@67@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@67@01))))
  $Snap.unit))
; [eval] _err == null ==> issubtype(typeof(_res), list(tuple(Seq(int(), int()))))
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@66@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@66@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 16 | _err@66@01 == Null | live]
; [else-branch: 16 | _err@66@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 16 | _err@66@01 == Null]
(assert (= _err@66@01 $Ref.null))
; [eval] issubtype(typeof(_res), list(tuple(Seq(int(), int()))))
; [eval] typeof(_res)
; [eval] list(tuple(Seq(int(), int())))
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (=
  (Seq_length
    (Seq_append
      (Seq_singleton (as int<PyType>  PyType))
      (Seq_singleton (as int<PyType>  PyType))))
  2))
(pop) ; 4
(push) ; 4
; [else-branch: 16 | _err@66@01 != Null]
(assert (not (= _err@66@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (= _err@66@01 $Ref.null)
  (and
    (= _err@66@01 $Ref.null)
    (=
      (Seq_length
        (Seq_append
          (Seq_singleton (as int<PyType>  PyType))
          (Seq_singleton (as int<PyType>  PyType))))
      2))))
; Joined path conditions
(assert (or (not (= _err@66@01 $Ref.null)) (= _err@66@01 $Ref.null)))
(assert (=>
  (= _err@66@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@65@01) (list<PyType> (tuple<PyType> (Seq_append
    (Seq_singleton (as int<PyType>  PyType))
    (Seq_singleton (as int<PyType>  PyType))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))
; [eval] _err == null
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@66@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@66@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 17 | _err@66@01 == Null | live]
; [else-branch: 17 | _err@66@01 != Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 17 | _err@66@01 == Null]
(assert (= _err@66@01 $Ref.null))
(assert (not (= _res@65@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
  $Snap.unit))
; [eval] _err == null ==> int___eq__(__prim__int___box__(list___len__(_res)), num_0)
; [eval] _err == null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@66@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 18 | _err@66@01 == Null | live]
; [else-branch: 18 | _err@66@01 != Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 18 | _err@66@01 == Null]
; [eval] int___eq__(__prim__int___box__(list___len__(_res)), num_0)
; [eval] __prim__int___box__(list___len__(_res))
; [eval] list___len__(_res)
(push) ; 6
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> _res@65@01) (list<PyType> (list_arg<PyType> (typeof<PyType> _res@65@01) 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@65@01) (list<PyType> (list_arg<PyType> (typeof<PyType> _res@65@01) 0))))
(declare-const $k@68@01 $Perm)
(assert ($Perm.isReadVar $k@68@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@68@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) _res@65@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@68@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> _res@65@01) (list<PyType> (list_arg<PyType> (typeof<PyType> _res@65@01) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) _res@65@01)))
(set-option :timeout 0)
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) _res@65@01)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) _res@65@01)))
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) _res@65@01))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) _res@65@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) _res@65@01)) num_1@32@01))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) _res@65@01))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) _res@65@01)) num_1@32@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@68@01))
(assert (=>
  (= _err@66@01 $Ref.null)
  (and
    (issubtype<Bool> (typeof<PyType> _res@65@01) (list<PyType> (list_arg<PyType> (typeof<PyType> _res@65@01) 0)))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) _res@65@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) _res@65@01))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) _res@65@01))) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) _res@65@01)) num_1@32@01))))
(assert (=>
  (= _err@66@01 $Ref.null)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) _res@65@01)) num_1@32@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
  $Snap.unit))
; [eval] _err != null && issubtype(typeof(_err), SoldoutException()) ==> true
; [eval] _err != null && issubtype(typeof(_err), SoldoutException())
; [eval] _err != null
(push) ; 4
; [then-branch: 19 | _err@66@01 == Null | live]
; [else-branch: 19 | _err@66@01 != Null | live]
(push) ; 5
; [then-branch: 19 | _err@66@01 == Null]
(pop) ; 5
(push) ; 5
; [else-branch: 19 | _err@66@01 != Null]
(assert (not (= _err@66@01 $Ref.null)))
; [eval] issubtype(typeof(_err), SoldoutException())
; [eval] typeof(_err)
; [eval] SoldoutException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@66@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@66@01) (as SoldoutException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 20 | _err@66@01 != Null && issubtype[Bool](typeof[PyType](_err@66@01), SoldoutException[PyType]) | dead]
; [else-branch: 20 | !(_err@66@01 != Null && issubtype[Bool](typeof[PyType](_err@66@01), SoldoutException[PyType])) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 20 | !(_err@66@01 != Null && issubtype[Bool](typeof[PyType](_err@66@01), SoldoutException[PyType]))]
(assert (not
  (and
    (not (= _err@66@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@66@01) (as SoldoutException<PyType>  PyType)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not
  (and
    (not (= _err@66@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@66@01) (as SoldoutException<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), SoldoutException())
; [eval] _err != null
(push) ; 4
; [then-branch: 21 | _err@66@01 != Null | dead]
; [else-branch: 21 | _err@66@01 == Null | live]
(push) ; 5
; [else-branch: 21 | _err@66@01 == Null]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] _err != null
; [then-branch: 22 | _err@66@01 != Null | dead]
; [else-branch: 22 | _err@66@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 22 | _err@66@01 == Null]
(pop) ; 4
; [eval] !(_err != null)
; [eval] _err != null
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@66@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 23 | _err@66@01 == Null | live]
; [else-branch: 23 | _err@66@01 != Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 23 | _err@66@01 == Null]
; [exec]
; seats := get_seats_res
; [exec]
; inhale _isDefined(495873779059)
(declare-const $t@69@01 $Snap)
(assert (= $t@69@01 $Snap.unit))
; [eval] _isDefined(495873779059)
(push) ; 5
(assert (_isDefined%precondition $Snap.unit 495873779059))
(pop) ; 5
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 495873779059))
(assert (_isDefined $Snap.unit 495873779059))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_160, list_0 := list___init__(_cthread_160, _method_measures_160, _residue_160)
; [eval] _cthread_8 != null
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
; [eval] issubtype(typeof(_cthread_8), Thread_0())
; [eval] typeof(_cthread_8)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const _current_wait_level_8@70@01 $Perm)
(declare-const res@71@01 $Ref)
(declare-const $t@72@01 $Snap)
(assert (= $t@72@01 ($Snap.combine ($Snap.first $t@72@01) ($Snap.second $t@72@01))))
(assert (= ($Snap.first $t@72@01) $Snap.unit))
; [eval] (forperm _r_19: Ref [_r_19.MustReleaseBounded] :: Level(_r_19) <= _current_wait_level_8)
(assert (=
  ($Snap.second $t@72@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@72@01))
    ($Snap.second ($Snap.second $t@72@01)))))
(assert (= ($Snap.first ($Snap.second $t@72@01)) $Snap.unit))
; [eval] (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: Level(_r_19) <= _current_wait_level_8)
(assert (=
  ($Snap.second ($Snap.second $t@72@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@72@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@72@01))) $Snap.unit))
; [eval] _residue_8 <= _current_wait_level_8
(assert (<= _residue_160@31@01 _current_wait_level_8@70@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@72@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (= _res@65@01 res@71@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@71@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
  $Snap.unit))
; [eval] res.list_acc == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
  $Snap.unit))
; [eval] typeof(res) == list(list_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] list(list_arg(typeof(res), 0))
; [eval] list_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@71@01)
  (list<PyType> (list_arg<PyType> (typeof<PyType> res@71@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
  $Snap.unit))
; [eval] (Low(res): Bool)
(assert (Low<Bool> res@71@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(list_0), list(Ticket()))
(declare-const $t@73@01 $Snap)
(assert (= $t@73@01 $Snap.unit))
; [eval] issubtype(typeof(list_0), list(Ticket()))
; [eval] typeof(list_0)
; [eval] list(Ticket())
; [eval] Ticket()
(assert (issubtype<Bool> (typeof<PyType> res@71@01) (list<PyType> (as Ticket<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; res := list_0
; [exec]
; inhale _isDefined(7562610)
(declare-const $t@74@01 $Snap)
(assert (= $t@74@01 $Snap.unit))
; [eval] _isDefined(7562610)
(set-option :timeout 0)
(push) ; 5
(assert (_isDefined%precondition $Snap.unit 7562610))
(pop) ; 5
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 7562610))
(assert (_isDefined $Snap.unit 7562610))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; iterable := _checkDefined(seats, 495873779059)
; [eval] _checkDefined(seats, 495873779059)
(set-option :timeout 0)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@65@01 495873779059))
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@65@01 495873779059))
(declare-const iterable@75@01 $Ref)
(assert (= iterable@75@01 (_checkDefined $Snap.unit _res@65@01 495873779059)))
; [exec]
; _cwl_160, iter := list___iter__(_cthread_160, _method_measures_160, _residue_160,
;   iterable)
; [eval] _cthread_13 != null
; [eval] Measure$check(_caller_measures_13, _cthread_13, 1)
(push) ; 5
(pop) ; 5
; Joined path conditions
; [eval] issubtype(typeof(_cthread_13), Thread_0())
; [eval] typeof(_cthread_13)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> iterable@75@01) (list<PyType> (list_arg<PyType> (typeof<PyType> iterable@75@01) 0)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> iterable@75@01) (list<PyType> (list_arg<PyType> (typeof<PyType> iterable@75@01) 0))))
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@71@01 iterable@75@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _res@65@01 iterable@75@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_13, _cthread_13, 1)
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const _current_wait_level_13@76@01 $Perm)
(declare-const _res@77@01 $Ref)
(declare-const $t@78@01 $Snap)
(assert (= $t@78@01 ($Snap.combine ($Snap.first $t@78@01) ($Snap.second $t@78@01))))
(assert (= ($Snap.first $t@78@01) $Snap.unit))
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_13)
(assert (=
  ($Snap.second $t@78@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@78@01))
    ($Snap.second ($Snap.second $t@78@01)))))
(assert (= ($Snap.first ($Snap.second $t@78@01)) $Snap.unit))
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_13)
(assert (=
  ($Snap.second ($Snap.second $t@78@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@78@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@78@01))) $Snap.unit))
; [eval] _residue_13 <= _current_wait_level_13
(assert (<= _residue_160@31@01 _current_wait_level_13@76@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@78@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@78@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@78@01))))
  $Snap.unit))
; [eval] _res != self
(assert (not (= _res@77@01 iterable@75@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@71@01 _res@77@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _res@65@01 _res@77@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= _res@77@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _res@77@01 iterable@75@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@71@01 iterable@75@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _res@65@01 iterable@75@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
  $Snap.unit))
; [eval] _res.list_acc == self.list_acc
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _res@65@01 iterable@75@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))
  $Snap.unit))
; [eval] _res.__container == self
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))
  iterable@75@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))
  $Snap.unit))
; [eval] _res.__iter_index == 0
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))))
  $Snap.unit))
; [eval] _res.__previous == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), Iterator(list_arg(typeof(self), 0)))
; [eval] typeof(_res)
; [eval] Iterator(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> _res@77@01) (Iterator<PyType> (list_arg<PyType> (typeof<PyType> iterable@75@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_160, loop_target, iter_err := Iterator___next__(_cthread_160, _method_measures_160,
;   _residue_160, iter)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const _current_wait_level_149@79@01 $Perm)
(declare-const _res@80@01 $Ref)
(declare-const _err@81@01 $Ref)
(declare-const $t@82@01 $Snap)
(assert (= $t@82@01 ($Snap.combine ($Snap.first $t@82@01) ($Snap.second $t@82@01))))
(assert (= ($Snap.first $t@82@01) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: Level(_r_15) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@82@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@82@01))
    ($Snap.second ($Snap.second $t@82@01)))))
(assert (= ($Snap.first ($Snap.second $t@82@01)) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: Level(_r_15) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@82@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@82@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@82@01))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_160@31@01 _current_wait_level_149@79@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@82@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))))
  (not (= _err@81@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@81@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@81@01 $Ref.null)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 24 | _err@81@01 == Null | live]
; [else-branch: 24 | _err@81@01 != Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 24 | _err@81@01 == Null]
(assert (= _err@81@01 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (= _err@81@01 $Ref.null))
(assert (=>
  (= _err@81@01 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@81@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 25 | _err@81@01 == Null | live]
; [else-branch: 25 | _err@81@01 != Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 25 | _err@81@01 == Null]
; [eval] self.__iter_index > 0
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (= _err@81@01 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@81@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 26 | _err@81@01 == Null | live]
; [else-branch: 26 | _err@81@01 != Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 26 | _err@81@01 == Null]
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (= _err@81@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 27 | |First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0 | live]
; [else-branch: 27 | !(|First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 27 | |First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 5
; [then-branch: 28 | _err@81@01 != Null | dead]
; [else-branch: 28 | _err@81@01 == Null | live]
(push) ; 6
; [else-branch: 28 | _err@81@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 5
; [then-branch: 29 | _err@81@01 != Null | dead]
; [else-branch: 29 | _err@81@01 == Null | live]
(push) ; 6
; [else-branch: 29 | _err@81@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 30 | |First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0 | live]
; [else-branch: 30 | !(|First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 30 | |First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0]
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 7
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 31 | _res@80@01 != First:(Second:(Second:(Second:(Second:($t@78@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) - 1] | live]
; [else-branch: 31 | _res@80@01 == First:(Second:(Second:(Second:(Second:($t@78@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) - 1] | live]
(push) ; 8
; [then-branch: 31 | _res@80@01 != First:(Second:(Second:(Second:(Second:($t@78@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) - 1]]
(assert (not
  (=
    _res@80@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
        1)))))
(pop) ; 8
(push) ; 8
; [else-branch: 31 | _res@80@01 == First:(Second:(Second:(Second:(Second:($t@78@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) - 1]]
(assert (=
  _res@80@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    _res@80@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
        1)))
  (not
    (=
      _res@80@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
          1))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0)
  (or
    (=
      _res@80@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
          1)))
    (not
      (=
        _res@80@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
            1)))))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0)
  (and
    (=
      _res@80@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
          1)))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
      _res@80@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 32 | |First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0 | live]
; [else-branch: 32 | !(|First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 32 | |First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0]
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@80@01) (Iterator_arg<PyType> (typeof<PyType> _res@77@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@83@01 $Ref)
(push) ; 5
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 6
; [then-branch: 33 | r@83@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01)))))))))))) | live]
; [else-branch: 33 | !(r@83@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))))))) | live]
(push) ; 7
; [then-branch: 33 | r@83@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))))
  r@83@01))
(pop) ; 7
(push) ; 7
; [else-branch: 33 | !(r@83@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01)))))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))))
    r@83@01)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 8
; [then-branch: 34 | !(First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) > 1) | live]
; [else-branch: 34 | First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) > 1 | live]
(push) ; 9
; [then-branch: 34 | !(First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
    1)))
(pop) ; 9
(push) ; 9
; [else-branch: 34 | First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(push) ; 10
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 35 | r@83@01 != First:(Second:(Second:(Second:(Second:($t@78@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) - 2] | live]
; [else-branch: 35 | r@83@01 == First:(Second:(Second:(Second:(Second:($t@78@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) - 2] | live]
(push) ; 11
; [then-branch: 35 | r@83@01 != First:(Second:(Second:(Second:(Second:($t@78@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) - 2]]
(assert (not
  (=
    r@83@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
        2)))))
(pop) ; 11
(push) ; 11
; [else-branch: 35 | r@83@01 == First:(Second:(Second:(Second:(Second:($t@78@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) - 2]]
(assert (=
  r@83@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
      2))))
; [eval] _err == null
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    r@83@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
        2)))
  (not
    (=
      r@83@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
          2))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
    1)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
      1)
    (or
      (=
        r@83@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
            2)))
      (not
        (=
          r@83@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
              2))))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
    1)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
      1))))
(push) ; 8
; [then-branch: 36 | First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) > 1 && r@83@01 == First:(Second:(Second:(Second:(Second:($t@78@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) - 2] && _err@81@01 == Null | live]
; [else-branch: 36 | !(First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) > 1 && r@83@01 == First:(Second:(Second:(Second:(Second:($t@78@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) - 2] && _err@81@01 == Null) | live]
(push) ; 9
; [then-branch: 36 | First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) > 1 && r@83@01 == First:(Second:(Second:(Second:(Second:($t@78@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) - 2] && _err@81@01 == Null]
(assert (and
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
    1)
  (and
    (=
      r@83@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
          2)))
    (= _err@81@01 $Ref.null))))
(pop) ; 9
(push) ; 9
; [else-branch: 36 | !(First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) > 1 && r@83@01 == First:(Second:(Second:(Second:(Second:($t@78@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) - 2] && _err@81@01 == Null)]
(assert (not
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
      1)
    (and
      (=
        r@83@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
            2)))
      (= _err@81@01 $Ref.null)))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 10
; [then-branch: 37 | !(First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) > 0) | live]
; [else-branch: 37 | First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) > 0 | live]
(push) ; 11
; [then-branch: 37 | !(First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
    0)))
(pop) ; 11
(push) ; 11
; [else-branch: 37 | First:(Second:(Second:(Second:(Second:(Second:($t@82@01)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
  0))
; [eval] _err != null
(push) ; 12
; [then-branch: 38 | _err@81@01 == Null | live]
; [else-branch: 38 | _err@81@01 != Null | live]
(push) ; 13
; [then-branch: 38 | _err@81@01 == Null]
(assert (= _err@81@01 $Ref.null))
(pop) ; 13
(push) ; 13
; [else-branch: 38 | _err@81@01 != Null]
(assert (not (= _err@81@01 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 14
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@81@01 $Ref.null)) (= _err@81@01 $Ref.null)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
    0)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
      0)
    (or (not (= _err@81@01 $Ref.null)) (= _err@81@01 $Ref.null)))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
      1)
    (and
      (=
        r@83@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
            2)))
      (= _err@81@01 $Ref.null)))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
      1)
    (=
      r@83@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
          2)))
    (= _err@81@01 $Ref.null))))
; Joined path conditions
(assert (=>
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
        1)
      (and
        (=
          r@83@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
              2)))
        (= _err@81@01 $Ref.null))))
  (and
    (not
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
          1)
        (and
          (=
            r@83@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                2)))
          (= _err@81@01 $Ref.null))))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
        0)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
          0)
        (or (not (= _err@81@01 $Ref.null)) (= _err@81@01 $Ref.null))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
          0))))))
(assert (or
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
        1)
      (and
        (=
          r@83@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
              2)))
        (= _err@81@01 $Ref.null))))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
      1)
    (and
      (=
        r@83@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
            2)))
      (= _err@81@01 $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))))
      r@83@01))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))))
        r@83@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
        1)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
          1)
        (or
          (=
            r@83@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                2)))
          (not
            (=
              r@83@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                  2)))))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
        1)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
          1)))
    (=>
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
          1)
        (and
          (=
            r@83@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                2)))
          (= _err@81@01 $Ref.null)))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
          1)
        (=
          r@83@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
              2)))
        (= _err@81@01 $Ref.null)))
    (=>
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
            1)
          (and
            (=
              r@83@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                  2)))
            (= _err@81@01 $Ref.null))))
      (and
        (not
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
              1)
            (and
              (=
                r@83@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                    2)))
              (= _err@81@01 $Ref.null))))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
            0)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
              0)
            (or (not (= _err@81@01 $Ref.null)) (= _err@81@01 $Ref.null))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
              0)))))
    (or
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
            1)
          (and
            (=
              r@83@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                  2)))
            (= _err@81@01 $Ref.null))))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
          1)
        (and
          (=
            r@83@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                2)))
          (= _err@81@01 $Ref.null)))))))
(assert (or
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))))
      r@83@01))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))))
    r@83@01)))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@83@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))))
          r@83@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))))
            r@83@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
              1)
            (or
              (=
                r@83@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                    2)))
              (not
                (=
                  r@83@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
              1)
            (and
              (=
                r@83@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                    2)))
              (= _err@81@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
              1)
            (=
              r@83@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                  2)))
            (= _err@81@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                1)
              (and
                (=
                  r@83@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                      2)))
                (= _err@81@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                  1)
                (and
                  (=
                    r@83@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                        2)))
                  (= _err@81@01 $Ref.null))))
            (=>
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                0)
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                  0)
                (or (not (= _err@81@01 $Ref.null)) (= _err@81@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                1)
              (and
                (=
                  r@83@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                      2)))
                (= _err@81@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
              1)
            (and
              (=
                r@83@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                    2)))
              (= _err@81@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))))
          r@83@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))))
        r@83@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))
    r@83@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))
    r@83@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@902@12@902@289-aux|)))
(assert (forall ((r@83@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))))
          r@83@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))))
            r@83@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
              1)
            (or
              (=
                r@83@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                    2)))
              (not
                (=
                  r@83@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
              1)
            (and
              (=
                r@83@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                    2)))
              (= _err@81@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
              1)
            (=
              r@83@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                  2)))
            (= _err@81@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                1)
              (and
                (=
                  r@83@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                      2)))
                (= _err@81@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                  1)
                (and
                  (=
                    r@83@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                        2)))
                  (= _err@81@01 $Ref.null))))
            (=>
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                0)
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                  0)
                (or (not (= _err@81@01 $Ref.null)) (= _err@81@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                1)
              (and
                (=
                  r@83@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                      2)))
                (= _err@81@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
              1)
            (and
              (=
                r@83@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                    2)))
              (= _err@81@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))))
          r@83@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))))
        r@83@01)))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))
    r@83@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@902@12@902@289-aux|)))
(assert (forall ((r@83@01 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))
      r@83@01)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))))))
        r@83@01)
      (or
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
            1)
          (and
            (=
              r@83@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                  2)))
            (= _err@81@01 $Ref.null)))
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
            0)
          (and
            (not (= _err@81@01 $Ref.null))
            (=
              r@83@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
                  1))))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))
    r@83@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))
    r@83@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@902@12@902@289|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@81@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@81@01 $Ref.null)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 39 | _err@81@01 == Null | live]
; [else-branch: 39 | _err@81@01 != Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 39 | _err@81@01 == Null]
(assert (= _err@81@01 $Ref.null))
; [exec]
; row_0 := tuple___getitem__(loop_target, 0)
; [eval] tuple___getitem__(loop_target, 0)
(push) ; 6
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 7
(assert (tuple___len__%precondition $Snap.unit _res@80@01))
(pop) ; 7
; Joined path conditions
(assert (tuple___len__%precondition $Snap.unit _res@80@01))
(declare-const letvar@84@01 Int)
(assert (= (as letvar@84@01  Int) (tuple___len__ $Snap.unit _res@80@01)))
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 40 | True | live]
; [else-branch: 40 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 40 | True]
; [eval] key < ln
(pop) ; 8
(pop) ; 7
; Joined path conditions
(push) ; 7
; [then-branch: 41 | !(0 < tuple___len__(_, _res@80@01)) | live]
; [else-branch: 41 | 0 < tuple___len__(_, _res@80@01) | live]
(push) ; 8
; [then-branch: 41 | !(0 < tuple___len__(_, _res@80@01))]
(assert (not (< 0 (tuple___len__ $Snap.unit _res@80@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 41 | 0 < tuple___len__(_, _res@80@01)]
(assert (< 0 (tuple___len__ $Snap.unit _res@80@01)))
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 9
; [then-branch: 42 | False | dead]
; [else-branch: 42 | True | live]
(push) ; 10
; [else-branch: 42 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (< 0 (tuple___len__ $Snap.unit _res@80@01))
  (not (< 0 (tuple___len__ $Snap.unit _res@80@01)))))
(push) ; 7
(assert (not (< 0 (tuple___len__ $Snap.unit _res@80@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (< 0 (tuple___len__ $Snap.unit _res@80@01)))
(assert (tuple___getitem__%precondition $Snap.unit _res@80@01 0))
(pop) ; 6
; Joined path conditions
(assert (and
  (tuple___len__%precondition $Snap.unit _res@80@01)
  (= (as letvar@84@01  Int) (tuple___len__ $Snap.unit _res@80@01))
  (or
    (< 0 (tuple___len__ $Snap.unit _res@80@01))
    (not (< 0 (tuple___len__ $Snap.unit _res@80@01))))
  (< 0 (tuple___len__ $Snap.unit _res@80@01))
  (tuple___getitem__%precondition $Snap.unit _res@80@01 0)))
(declare-const row_0@85@01 $Ref)
(assert (= row_0@85@01 (tuple___getitem__ $Snap.unit _res@80@01 0)))
; [exec]
; inhale _isDefined(207760093042)
(declare-const $t@86@01 $Snap)
(assert (= $t@86@01 $Snap.unit))
; [eval] _isDefined(207760093042)
(push) ; 6
(assert (_isDefined%precondition $Snap.unit 207760093042))
(pop) ; 6
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 207760093042))
(assert (_isDefined $Snap.unit 207760093042))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; seat_0 := tuple___getitem__(loop_target, 1)
; [eval] tuple___getitem__(loop_target, 1)
(set-option :timeout 0)
(push) ; 6
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const letvar@87@01 Int)
(assert (= (as letvar@87@01  Int) (tuple___len__ $Snap.unit _res@80@01)))
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 43 | True | live]
; [else-branch: 43 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 43 | True]
; [eval] key < ln
(pop) ; 8
(pop) ; 7
; Joined path conditions
(push) ; 7
; [then-branch: 44 | !(1 < tuple___len__(_, _res@80@01)) | live]
; [else-branch: 44 | 1 < tuple___len__(_, _res@80@01) | live]
(push) ; 8
; [then-branch: 44 | !(1 < tuple___len__(_, _res@80@01))]
(assert (not (< 1 (tuple___len__ $Snap.unit _res@80@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 44 | 1 < tuple___len__(_, _res@80@01)]
(assert (< 1 (tuple___len__ $Snap.unit _res@80@01)))
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 9
; [then-branch: 45 | False | dead]
; [else-branch: 45 | True | live]
(push) ; 10
; [else-branch: 45 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (< 1 (tuple___len__ $Snap.unit _res@80@01))
  (not (< 1 (tuple___len__ $Snap.unit _res@80@01)))))
(push) ; 7
(assert (not (< 1 (tuple___len__ $Snap.unit _res@80@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (< 1 (tuple___len__ $Snap.unit _res@80@01)))
(assert (tuple___getitem__%precondition $Snap.unit _res@80@01 1))
(pop) ; 6
; Joined path conditions
(assert (and
  (= (as letvar@87@01  Int) (tuple___len__ $Snap.unit _res@80@01))
  (or
    (< 1 (tuple___len__ $Snap.unit _res@80@01))
    (not (< 1 (tuple___len__ $Snap.unit _res@80@01))))
  (< 1 (tuple___len__ $Snap.unit _res@80@01))
  (tuple___getitem__%precondition $Snap.unit _res@80@01 1)))
(declare-const seat_0@88@01 $Ref)
(assert (= seat_0@88@01 (tuple___getitem__ $Snap.unit _res@80@01 1)))
; [exec]
; inhale _isDefined(53186532566387)
(declare-const $t@89@01 $Snap)
(assert (= $t@89@01 $Snap.unit))
; [eval] _isDefined(53186532566387)
(push) ; 6
(assert (_isDefined%precondition $Snap.unit 53186532566387))
(pop) ; 6
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 53186532566387))
(assert (_isDefined $Snap.unit 53186532566387))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; seqtmp := iterable.list_acc
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _res@77@01 iterable@75@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _res@65@01 iterable@75@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const seqtmp@90@01 Seq<$Ref>)
(assert (=
  seqtmp@90@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))
; [exec]
; _loop_original_must_terminate := perm(MustTerminate(_cthread_160))
; [eval] perm(MustTerminate(_cthread_160))
(declare-const _loop_original_must_terminate@91@01 $Perm)
(assert (= _loop_original_must_terminate@91@01 $Perm.Write))
; [exec]
; _loop_termination_flag := true
; [exec]
; _loop_check_before := true
(declare-const _loop_measures@92@01 Seq<Measure$>)
(declare-const Ticket_res@93@01 $Ref)
(declare-const _cwl_160@94@01 $Perm)
(declare-const ticket@95@01 $Ref)
(declare-const loop_target@96@01 $Ref)
(declare-const iter_err@97@01 $Ref)
(declare-const row_0@98@01 $Ref)
(declare-const seat_0@99@01 $Ref)
(declare-const _loop_check_before@100@01 Bool)
(set-option :timeout 0)
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@101@01 $Snap)
(assert (= $t@101@01 ($Snap.combine ($Snap.first $t@101@01) ($Snap.second $t@101@01))))
(assert (= ($Snap.first $t@101@01) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _residue_161)
(assert (=
  ($Snap.second $t@101@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@101@01))
    ($Snap.second ($Snap.second $t@101@01)))))
(assert (= ($Snap.first ($Snap.second $t@101@01)) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _residue_161)
(assert (=
  ($Snap.second ($Snap.second $t@101@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@101@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@101@01))) $Snap.unit))
; [eval] _residue_160 <= _residue_161
(assert (<= _residue_160@31@01 _residue_161@59@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@101@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
(assert (not (= iterable@75@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= iterable@75@01 _res@77@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
  $Snap.unit))
; [eval] iter.list_acc == iterable.list_acc
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
  $Snap.unit))
; [eval] seqtmp == iterable.list_acc
(assert (Seq_equal
  seqtmp@90@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= iter_err@97@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= iter_err@97@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 46 | iter_err@97@01 == Null | live]
; [else-branch: 46 | iter_err@97@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 46 | iter_err@97@01 == Null]
(assert (= iter_err@97@01 $Ref.null))
; [eval] iter.__iter_index - 1 == |iter.__previous|
; [eval] iter.__iter_index - 1
; [eval] |iter.__previous|
(pop) ; 8
(push) ; 8
; [else-branch: 46 | iter_err@97@01 != Null]
(assert (not (= iter_err@97@01 $Ref.null)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (not (= iter_err@97@01 $Ref.null)) (= iter_err@97@01 $Ref.null)))
(assert (=>
  (= iter_err@97@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))
  $Snap.unit))
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= iter_err@97@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= iter_err@97@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 47 | iter_err@97@01 != Null | live]
; [else-branch: 47 | iter_err@97@01 == Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 47 | iter_err@97@01 != Null]
(assert (not (= iter_err@97@01 $Ref.null)))
; [eval] iter.__iter_index == |iter.__previous|
; [eval] |iter.__previous|
(pop) ; 8
(push) ; 8
; [else-branch: 47 | iter_err@97@01 == Null]
(assert (= iter_err@97@01 $Ref.null))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (= iter_err@97@01 $Ref.null) (not (= iter_err@97@01 $Ref.null))))
(assert (=>
  (not (= iter_err@97@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= iter_err@97@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= iter_err@97@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 48 | iter_err@97@01 == Null | live]
; [else-branch: 48 | iter_err@97@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 48 | iter_err@97@01 == Null]
(assert (= iter_err@97@01 $Ref.null))
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(pop) ; 8
(push) ; 8
; [else-branch: 48 | iter_err@97@01 != Null]
(assert (not (= iter_err@97@01 $Ref.null)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (= iter_err@97@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))
  $Snap.unit))
; [eval] iter.__iter_index >= 0
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))
  $Snap.unit))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 49 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 49 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 49 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
  0))
; [eval] iter.__iter_index > 0
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 50 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 50 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 50 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 9
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (=
    loop_target@96@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 51 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 51 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 51 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
    loop_target@96@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= iter_err@97@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= iter_err@97@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 52 | iter_err@97@01 == Null | live]
; [else-branch: 52 | iter_err@97@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 52 | iter_err@97@01 == Null]
(assert (= iter_err@97@01 $Ref.null))
; [eval] iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(pop) ; 8
(push) ; 8
; [else-branch: 52 | iter_err@97@01 != Null]
(assert (not (= iter_err@97@01 $Ref.null)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (= iter_err@97@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), tuple(Seq(int(), int())))
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 53 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 53 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 53 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), tuple(Seq(int(), int())))
; [eval] typeof(loop_target)
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (=
  (Seq_length
    (Seq_append
      (Seq_singleton (as int<PyType>  PyType))
      (Seq_singleton (as int<PyType>  PyType))))
  2))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (=
    (Seq_length
      (Seq_append
        (Seq_singleton (as int<PyType>  PyType))
        (Seq_singleton (as int<PyType>  PyType))))
    2)))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target@96@01) (tuple<PyType> (Seq_append
    (Seq_singleton (as int<PyType>  PyType))
    (Seq_singleton (as int<PyType>  PyType)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> row_0 == tuple___getitem__(loop_target, 0) && _isDefined(207760093042)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 54 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 54 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 54 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] row_0 == tuple___getitem__(loop_target, 0) && _isDefined(207760093042)
; [eval] row_0 == tuple___getitem__(loop_target, 0)
; [eval] tuple___getitem__(loop_target, 0)
(push) ; 9
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 10
(assert (tuple___len__%precondition $Snap.unit loop_target@96@01))
(pop) ; 10
; Joined path conditions
(assert (tuple___len__%precondition $Snap.unit loop_target@96@01))
(declare-const letvar@102@01 Int)
(assert (= (as letvar@102@01  Int) (tuple___len__ $Snap.unit loop_target@96@01)))
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 55 | True | live]
; [else-branch: 55 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 55 | True]
; [eval] key < ln
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 56 | !(0 < tuple___len__(_, loop_target@96@01)) | live]
; [else-branch: 56 | 0 < tuple___len__(_, loop_target@96@01) | live]
(push) ; 11
; [then-branch: 56 | !(0 < tuple___len__(_, loop_target@96@01))]
(assert (not (< 0 (tuple___len__ $Snap.unit loop_target@96@01))))
(pop) ; 11
(push) ; 11
; [else-branch: 56 | 0 < tuple___len__(_, loop_target@96@01)]
(assert (< 0 (tuple___len__ $Snap.unit loop_target@96@01)))
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 12
; [then-branch: 57 | False | dead]
; [else-branch: 57 | True | live]
(push) ; 13
; [else-branch: 57 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (< 0 (tuple___len__ $Snap.unit loop_target@96@01))
  (not (< 0 (tuple___len__ $Snap.unit loop_target@96@01)))))
(push) ; 10
(assert (not (< 0 (tuple___len__ $Snap.unit loop_target@96@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< 0 (tuple___len__ $Snap.unit loop_target@96@01)))
(assert (tuple___getitem__%precondition $Snap.unit loop_target@96@01 0))
(pop) ; 9
; Joined path conditions
(assert (and
  (tuple___len__%precondition $Snap.unit loop_target@96@01)
  (= (as letvar@102@01  Int) (tuple___len__ $Snap.unit loop_target@96@01))
  (or
    (< 0 (tuple___len__ $Snap.unit loop_target@96@01))
    (not (< 0 (tuple___len__ $Snap.unit loop_target@96@01))))
  (< 0 (tuple___len__ $Snap.unit loop_target@96@01))
  (tuple___getitem__%precondition $Snap.unit loop_target@96@01 0)))
(push) ; 9
; [then-branch: 58 | row_0@98@01 != tuple___getitem__(_, loop_target@96@01, 0) | live]
; [else-branch: 58 | row_0@98@01 == tuple___getitem__(_, loop_target@96@01, 0) | live]
(push) ; 10
; [then-branch: 58 | row_0@98@01 != tuple___getitem__(_, loop_target@96@01, 0)]
(assert (not (= row_0@98@01 (tuple___getitem__ $Snap.unit loop_target@96@01 0))))
(pop) ; 10
(push) ; 10
; [else-branch: 58 | row_0@98@01 == tuple___getitem__(_, loop_target@96@01, 0)]
(assert (= row_0@98@01 (tuple___getitem__ $Snap.unit loop_target@96@01 0)))
; [eval] _isDefined(207760093042)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (= row_0@98@01 (tuple___getitem__ $Snap.unit loop_target@96@01 0))
  (not (= row_0@98@01 (tuple___getitem__ $Snap.unit loop_target@96@01 0)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (tuple___len__%precondition $Snap.unit loop_target@96@01)
    (= (as letvar@102@01  Int) (tuple___len__ $Snap.unit loop_target@96@01))
    (or
      (< 0 (tuple___len__ $Snap.unit loop_target@96@01))
      (not (< 0 (tuple___len__ $Snap.unit loop_target@96@01))))
    (< 0 (tuple___len__ $Snap.unit loop_target@96@01))
    (tuple___getitem__%precondition $Snap.unit loop_target@96@01 0)
    (or
      (= row_0@98@01 (tuple___getitem__ $Snap.unit loop_target@96@01 0))
      (not (= row_0@98@01 (tuple___getitem__ $Snap.unit loop_target@96@01 0)))))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= row_0@98@01 (tuple___getitem__ $Snap.unit loop_target@96@01 0))
    (_isDefined $Snap.unit 207760093042))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> seat_0 == tuple___getitem__(loop_target, 1) && _isDefined(53186532566387)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 59 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 59 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 59 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] seat_0 == tuple___getitem__(loop_target, 1) && _isDefined(53186532566387)
; [eval] seat_0 == tuple___getitem__(loop_target, 1)
; [eval] tuple___getitem__(loop_target, 1)
(push) ; 9
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 10
(assert (tuple___len__%precondition $Snap.unit loop_target@96@01))
(pop) ; 10
; Joined path conditions
(assert (tuple___len__%precondition $Snap.unit loop_target@96@01))
(declare-const letvar@103@01 Int)
(assert (= (as letvar@103@01  Int) (tuple___len__ $Snap.unit loop_target@96@01)))
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 60 | True | live]
; [else-branch: 60 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 60 | True]
; [eval] key < ln
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 61 | !(1 < tuple___len__(_, loop_target@96@01)) | live]
; [else-branch: 61 | 1 < tuple___len__(_, loop_target@96@01) | live]
(push) ; 11
; [then-branch: 61 | !(1 < tuple___len__(_, loop_target@96@01))]
(assert (not (< 1 (tuple___len__ $Snap.unit loop_target@96@01))))
(pop) ; 11
(push) ; 11
; [else-branch: 61 | 1 < tuple___len__(_, loop_target@96@01)]
(assert (< 1 (tuple___len__ $Snap.unit loop_target@96@01)))
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 12
; [then-branch: 62 | False | dead]
; [else-branch: 62 | True | live]
(push) ; 13
; [else-branch: 62 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (< 1 (tuple___len__ $Snap.unit loop_target@96@01))
  (not (< 1 (tuple___len__ $Snap.unit loop_target@96@01)))))
(push) ; 10
(assert (not (< 1 (tuple___len__ $Snap.unit loop_target@96@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< 1 (tuple___len__ $Snap.unit loop_target@96@01)))
(assert (tuple___getitem__%precondition $Snap.unit loop_target@96@01 1))
(pop) ; 9
; Joined path conditions
(assert (and
  (tuple___len__%precondition $Snap.unit loop_target@96@01)
  (= (as letvar@103@01  Int) (tuple___len__ $Snap.unit loop_target@96@01))
  (or
    (< 1 (tuple___len__ $Snap.unit loop_target@96@01))
    (not (< 1 (tuple___len__ $Snap.unit loop_target@96@01))))
  (< 1 (tuple___len__ $Snap.unit loop_target@96@01))
  (tuple___getitem__%precondition $Snap.unit loop_target@96@01 1)))
(push) ; 9
; [then-branch: 63 | seat_0@99@01 != tuple___getitem__(_, loop_target@96@01, 1) | live]
; [else-branch: 63 | seat_0@99@01 == tuple___getitem__(_, loop_target@96@01, 1) | live]
(push) ; 10
; [then-branch: 63 | seat_0@99@01 != tuple___getitem__(_, loop_target@96@01, 1)]
(assert (not (= seat_0@99@01 (tuple___getitem__ $Snap.unit loop_target@96@01 1))))
(pop) ; 10
(push) ; 10
; [else-branch: 63 | seat_0@99@01 == tuple___getitem__(_, loop_target@96@01, 1)]
(assert (= seat_0@99@01 (tuple___getitem__ $Snap.unit loop_target@96@01 1)))
; [eval] _isDefined(53186532566387)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (= seat_0@99@01 (tuple___getitem__ $Snap.unit loop_target@96@01 1))
  (not (= seat_0@99@01 (tuple___getitem__ $Snap.unit loop_target@96@01 1)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (tuple___len__%precondition $Snap.unit loop_target@96@01)
    (= (as letvar@103@01  Int) (tuple___len__ $Snap.unit loop_target@96@01))
    (or
      (< 1 (tuple___len__ $Snap.unit loop_target@96@01))
      (not (< 1 (tuple___len__ $Snap.unit loop_target@96@01))))
    (< 1 (tuple___len__ $Snap.unit loop_target@96@01))
    (tuple___getitem__%precondition $Snap.unit loop_target@96@01 1)
    (or
      (= seat_0@99@01 (tuple___getitem__ $Snap.unit loop_target@96@01 1))
      (not (= seat_0@99@01 (tuple___getitem__ $Snap.unit loop_target@96@01 1)))))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= seat_0@99@01 (tuple___getitem__ $Snap.unit loop_target@96@01 1))
    (_isDefined $Snap.unit 53186532566387))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))
  $Snap.unit))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= iter_err@97@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= iter_err@97@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 64 | iter_err@97@01 != Null | live]
; [else-branch: 64 | iter_err@97@01 == Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 64 | iter_err@97@01 != Null]
(assert (not (= iter_err@97@01 $Ref.null)))
; [eval] iter.__previous == iter.list_acc
(pop) ; 8
(push) ; 8
; [else-branch: 64 | iter_err@97@01 == Null]
(assert (= iter_err@97@01 $Ref.null))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= iter_err@97@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 65 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| == 0 | dead]
; [else-branch: 65 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| != 0 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 65 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))
; [eval] _checkDefined(res, 7562610)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@71@01 7562610))
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@71@01 7562610))
(push) ; 7
(set-option :timeout 10)
(assert (not (= _res@77@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= iterable@75@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(assert (not (= (_checkDefined $Snap.unit res@71@01 7562610) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
  $Snap.unit))
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(res, 7562610))), __prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] __prim__int___box__(list___len__(_checkDefined(res, 7562610)))
; [eval] list___len__(_checkDefined(res, 7562610))
; [eval] _checkDefined(res, 7562610)
(set-option :timeout 0)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@71@01 7562610)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@71@01 7562610)) 0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@71@01 7562610)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@71@01 7562610)) 0))))
(declare-const $k@104@01 $Perm)
(assert ($Perm.isReadVar $k@104@01))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@104@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610)))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@104@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@71@01 7562610)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@71@01 7562610)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(set-option :timeout 0)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610))))
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(push) ; 7
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType)))
(pop) ; 7
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType)))
(push) ; 7
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType))))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610)))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610)))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType))))))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610)))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType)))))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))))
(declare-const lambda46_30$t@105@01 $Ref)
(push) ; 7
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] issubtype(typeof(lambda46_30$t), Ticket())
; [eval] typeof(lambda46_30$t)
; [eval] Ticket()
(push) ; 8
; [then-branch: 66 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@105@01), Ticket[PyType])) | live]
; [else-branch: 66 | issubtype[Bool](typeof[PyType](lambda46_30$t@105@01), Ticket[PyType]) | live]
(push) ; 9
; [then-branch: 66 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@105@01), Ticket[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@105@01) (as Ticket<PyType>  PyType))))
(pop) ; 9
(push) ; 9
; [else-branch: 66 | issubtype[Bool](typeof[PyType](lambda46_30$t@105@01), Ticket[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda46_30$t@105@01) (as Ticket<PyType>  PyType)))
; [eval] (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] _checkDefined(res, 7562610)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@105@01) (as Ticket<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@105@01) (as Ticket<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@105@01) (as Ticket<PyType>  PyType))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@105@01)))
(pop) ; 7
(declare-fun inv@106@01 ($Ref) $Ref)
(declare-fun img@107@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda46_30$t@105@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@105@01) (as Ticket<PyType>  PyType))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
        lambda46_30$t@105@01))
    (or
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@105@01) (as Ticket<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@105@01) (as Ticket<PyType>  PyType)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@105@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@105@01))
  :qid |Ticket_state-aux|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((lambda46_30$t1@105@01 $Ref) (lambda46_30$t2@105@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t1@105@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
          lambda46_30$t1@105@01))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t2@105@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
          lambda46_30$t2@105@01))
      (= lambda46_30$t1@105@01 lambda46_30$t2@105@01))
    (= lambda46_30$t1@105@01 lambda46_30$t2@105@01))
  
  :qid |Ticket_state-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda46_30$t@105@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@105@01) (as Ticket<PyType>  PyType))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
        lambda46_30$t@105@01))
    (and
      (= (inv@106@01 lambda46_30$t@105@01) lambda46_30$t@105@01)
      (img@107@01 lambda46_30$t@105@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@105@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@105@01))
  :qid |quant-u-2901|)))
(assert (forall ((self_1 $Ref)) (!
  (=>
    (and
      (img@107@01 self_1)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@106@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
          (inv@106@01 self_1))))
    (= (inv@106@01 self_1) self_1))
  :pattern ((inv@106@01 self_1))
  :qid |Ticket_state-fctOfInv|)))
; Permissions are non-negative
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))))))
(declare-const lambda46_30$t@108@01 $Ref)
(push) ; 7
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null)
; [eval] issubtype(typeof(lambda46_30$t), Ticket())
; [eval] typeof(lambda46_30$t)
; [eval] Ticket()
(push) ; 8
; [then-branch: 67 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@108@01), Ticket[PyType])) | live]
; [else-branch: 67 | issubtype[Bool](typeof[PyType](lambda46_30$t@108@01), Ticket[PyType]) | live]
(push) ; 9
; [then-branch: 67 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@108@01), Ticket[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@108@01) (as Ticket<PyType>  PyType))))
(pop) ; 9
(push) ; 9
; [else-branch: 67 | issubtype[Bool](typeof[PyType](lambda46_30$t@108@01), Ticket[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda46_30$t@108@01) (as Ticket<PyType>  PyType)))
; [eval] (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] _checkDefined(res, 7562610)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 68 | !(lambda46_30$t@108@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@101@01)))))))))))))))))))))))))) | live]
; [else-branch: 68 | lambda46_30$t@108@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@101@01))))))))))))))))))))))))) | live]
(push) ; 11
; [then-branch: 68 | !(lambda46_30$t@108@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@101@01))))))))))))))))))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@108@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 68 | lambda46_30$t@108@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@101@01)))))))))))))))))))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
  lambda46_30$t@108@01))
; [eval] code_1 != null
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@108@01)
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
      lambda46_30$t@108@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@108@01) (as Ticket<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@108@01) (as Ticket<PyType>  PyType))
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
        lambda46_30$t@108@01)
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
          lambda46_30$t@108@01))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@108@01) (as Ticket<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@108@01) (as Ticket<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@108@01) (as Ticket<PyType>  PyType))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
      lambda46_30$t@108@01)
    (not (= code_0@34@01 $Ref.null)))))
(pop) ; 7
(declare-fun inv@109@01 ($Ref) $Ref)
(declare-fun img@110@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda46_30$t@108@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@108@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
          lambda46_30$t@108@01)
        (not (= code_0@34@01 $Ref.null))))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@108@01) (as Ticket<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@108@01) (as Ticket<PyType>  PyType))
          (or
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
              lambda46_30$t@108@01)
            (not
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
                lambda46_30$t@108@01)))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@108@01) (as Ticket<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@108@01) (as Ticket<PyType>  PyType))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@108@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@108@01))
  :qid |Ticket_discount_code-aux|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((lambda46_30$t1@108@01 $Ref) (lambda46_30$t2@108@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t1@108@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            lambda46_30$t1@108@01)
          (not (= code_0@34@01 $Ref.null))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t2@108@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            lambda46_30$t2@108@01)
          (not (= code_0@34@01 $Ref.null))))
      (= lambda46_30$t1@108@01 lambda46_30$t2@108@01))
    (= lambda46_30$t1@108@01 lambda46_30$t2@108@01))
  
  :qid |Ticket_discount_code-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda46_30$t@108@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@108@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
          lambda46_30$t@108@01)
        (not (= code_0@34@01 $Ref.null))))
    (and
      (= (inv@109@01 lambda46_30$t@108@01) lambda46_30$t@108@01)
      (img@110@01 lambda46_30$t@108@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@108@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@108@01))
  :qid |quant-u-2903|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@110@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            (inv@109@01 r))
          (not (= code_0@34@01 $Ref.null)))))
    (= (inv@109@01 r) r))
  :pattern ((inv@109@01 r))
  :qid |Ticket_discount_code-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda46_30$t@108@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@108@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
          lambda46_30$t@108@01)
        (not (= code_0@34@01 $Ref.null))))
    (not (= lambda46_30$t@108@01 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@108@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@108@01))
  :qid |Ticket_discount_code-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda46_30$t: Ref :: { (lambda46_30$t in _checkDefined(res, 7562610).list_acc) } issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null) ==> issubtype(typeof(lambda46_30$t.Ticket_discount_code), str()))
(declare-const lambda46_30$t@111@01 $Ref)
(push) ; 7
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null) ==> issubtype(typeof(lambda46_30$t.Ticket_discount_code), str())
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null)
; [eval] issubtype(typeof(lambda46_30$t), Ticket())
; [eval] typeof(lambda46_30$t)
; [eval] Ticket()
(push) ; 8
; [then-branch: 69 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@111@01), Ticket[PyType])) | live]
; [else-branch: 69 | issubtype[Bool](typeof[PyType](lambda46_30$t@111@01), Ticket[PyType]) | live]
(push) ; 9
; [then-branch: 69 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@111@01), Ticket[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))))
(pop) ; 9
(push) ; 9
; [else-branch: 69 | issubtype[Bool](typeof[PyType](lambda46_30$t@111@01), Ticket[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType)))
; [eval] (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] _checkDefined(res, 7562610)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 70 | !(lambda46_30$t@111@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@101@01)))))))))))))))))))))))))) | live]
; [else-branch: 70 | lambda46_30$t@111@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@101@01))))))))))))))))))))))))) | live]
(push) ; 11
; [then-branch: 70 | !(lambda46_30$t@111@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@101@01))))))))))))))))))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@111@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 70 | lambda46_30$t@111@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@101@01)))))))))))))))))))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
  lambda46_30$t@111@01))
; [eval] code_1 != null
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@111@01)
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
      lambda46_30$t@111@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
        lambda46_30$t@111@01)
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
          lambda46_30$t@111@01))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType)))))
(push) ; 8
; [then-branch: 71 | issubtype[Bool](typeof[PyType](lambda46_30$t@111@01), Ticket[PyType]) && lambda46_30$t@111@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@101@01))))))))))))))))))))))))) && code_0@34@01 != Null | live]
; [else-branch: 71 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@111@01), Ticket[PyType]) && lambda46_30$t@111@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@101@01))))))))))))))))))))))))) && code_0@34@01 != Null) | live]
(push) ; 9
; [then-branch: 71 | issubtype[Bool](typeof[PyType](lambda46_30$t@111@01), Ticket[PyType]) && lambda46_30$t@111@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@101@01))))))))))))))))))))))))) && code_0@34@01 != Null]
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
      lambda46_30$t@111@01)
    (not (= code_0@34@01 $Ref.null)))))
; [eval] issubtype(typeof(lambda46_30$t.Ticket_discount_code), str())
; [eval] typeof(lambda46_30$t.Ticket_discount_code)
(push) ; 10
(assert (not (and
  (img@110@01 lambda46_30$t@111@01)
  (and
    (issubtype<Bool> (typeof<PyType> (inv@109@01 lambda46_30$t@111@01)) (as Ticket<PyType>  PyType))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
        (inv@109@01 lambda46_30$t@111@01))
      (not (= code_0@34@01 $Ref.null)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] str()
(pop) ; 9
(push) ; 9
; [else-branch: 71 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@111@01), Ticket[PyType]) && lambda46_30$t@111@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@101@01))))))))))))))))))))))))) && code_0@34@01 != Null)]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
        lambda46_30$t@111@01)
      (not (= code_0@34@01 $Ref.null))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
        lambda46_30$t@111@01)
      (not (= code_0@34@01 $Ref.null))))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
      lambda46_30$t@111@01)
    (not (= code_0@34@01 $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
          lambda46_30$t@111@01)
        (not (= code_0@34@01 $Ref.null)))))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
        lambda46_30$t@111@01)
      (not (= code_0@34@01 $Ref.null))))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda46_30$t@111@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
        (or
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            lambda46_30$t@111@01)
          (not
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
              lambda46_30$t@111@01)))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            lambda46_30$t@111@01)
          (not (= code_0@34@01 $Ref.null))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
          lambda46_30$t@111@01)
        (not (= code_0@34@01 $Ref.null))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
              lambda46_30$t@111@01)
            (not (= code_0@34@01 $Ref.null)))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            lambda46_30$t@111@01)
          (not (= code_0@34@01 $Ref.null))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@111@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@111@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802-aux|)))
(assert (forall ((lambda46_30$t@111@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
        (or
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            lambda46_30$t@111@01)
          (not
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
              lambda46_30$t@111@01)))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            lambda46_30$t@111@01)
          (not (= code_0@34@01 $Ref.null))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
          lambda46_30$t@111@01)
        (not (= code_0@34@01 $Ref.null))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
              lambda46_30$t@111@01)
            (not (= code_0@34@01 $Ref.null)))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            lambda46_30$t@111@01)
          (not (= code_0@34@01 $Ref.null))))))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@111@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802-aux|)))
(assert (forall ((lambda46_30$t@111@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
          lambda46_30$t@111@01)
        (not (= code_0@34@01 $Ref.null))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Ticket_discount_code ($SortWrappers.$SnapTo$FVF<Ticket_discount_code> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))) lambda46_30$t@111@01)) (as str<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@111@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@111@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))) > 0
; [eval] iter_err == null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= iter_err@97@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= iter_err@97@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 72 | iter_err@97@01 == Null | live]
; [else-branch: 72 | iter_err@97@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 72 | iter_err@97@01 == Null]
(assert (= iter_err@97@01 $Ref.null))
; [eval] int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))) > 0
; [eval] int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610)))
; [eval] list___len__(_checkDefined(seats, 495873779059))
; [eval] _checkDefined(seats, 495873779059)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) 0)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) 0))))
(declare-const $k@112@01 $Perm)
(assert ($Perm.isReadVar $k@112@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@71@01 7562610)
  (_checkDefined $Snap.unit _res@65@01 495873779059))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _res@77@01 (_checkDefined $Snap.unit _res@65@01 495873779059))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@112@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@112@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059))))
; [eval] list___len__(_checkDefined(res, 7562610))
; [eval] _checkDefined(res, 7562610)
(set-option :timeout 0)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@113@01 $Perm)
(assert ($Perm.isReadVar $k@113@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@113@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@113@01))
(set-option :timeout 0)
(push) ; 9
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(pop) ; 9
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(pop) ; 8
(push) ; 8
; [else-branch: 72 | iter_err@97@01 != Null]
(assert (not (= iter_err@97@01 $Ref.null)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@112@01))
(assert ($Perm.isReadVar $k@113@01))
(assert (=>
  (= iter_err@97@01 $Ref.null)
  (and
    (= iter_err@97@01 $Ref.null)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) 0)))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610))))))
; Joined path conditions
(assert (=>
  (= iter_err@97@01 $Ref.null)
  (>
    (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))))))
  $Snap.unit))
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
(push) ; 7
(set-option :timeout 10)
(assert (not (= _res@77@01 iterable@75@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= _res@65@01 iterable@75@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] iter.list_acc == iterable.list_acc
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= _res@77@01 iterable@75@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= _res@65@01 iterable@75@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] seqtmp == iterable.list_acc
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= _res@77@01 iterable@75@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= _res@65@01 iterable@75@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (Seq_equal
  seqtmp@90@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  seqtmp@90@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@81@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 73 | _err@81@01 == Null | live]
; [else-branch: 73 | _err@81@01 != Null | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 73 | _err@81@01 == Null]
; [eval] iter.__iter_index - 1 == |iter.__previous|
; [eval] iter.__iter_index - 1
; [eval] |iter.__previous|
(pop) ; 8
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (=>
  (= _err@81@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@81@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))))))
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 7
; [then-branch: 74 | _err@81@01 != Null | dead]
; [else-branch: 74 | _err@81@01 == Null | live]
(push) ; 8
; [else-branch: 74 | _err@81@01 == Null]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@81@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 75 | _err@81@01 == Null | live]
; [else-branch: 75 | _err@81@01 != Null | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 75 | _err@81@01 == Null]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(pop) ; 8
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (=>
  (= _err@81@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@81@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0)))
; [eval] iter.__iter_index >= 0
(push) ; 7
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 7
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 76 | |First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0 | live]
; [else-branch: 76 | !(|First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 76 | |First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0]
; [eval] iter.__iter_index > 0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 77 | |First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0 | live]
; [else-branch: 77 | !(|First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 77 | |First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 9
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0)
  (=
    _res@80@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0)
  (=
    _res@80@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 78 | |First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0 | live]
; [else-branch: 78 | !(|First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 78 | |First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
    _res@80@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))
    _res@80@01)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@81@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 79 | _err@81@01 == Null | live]
; [else-branch: 79 | _err@81@01 != Null | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 79 | _err@81@01 == Null]
; [eval] iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), tuple(Seq(int(), int())))
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 80 | |First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0 | live]
; [else-branch: 80 | !(|First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 80 | |First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), tuple(Seq(int(), int())))
; [eval] typeof(loop_target)
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (=
  (Seq_length
    (Seq_append
      (Seq_singleton (as int<PyType>  PyType))
      (Seq_singleton (as int<PyType>  PyType))))
  2))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0)
  (=
    (Seq_length
      (Seq_append
        (Seq_singleton (as int<PyType>  PyType))
        (Seq_singleton (as int<PyType>  PyType))))
    2)))
(push) ; 7
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@80@01) (tuple<PyType> (Seq_append
    (Seq_singleton (as int<PyType>  PyType))
    (Seq_singleton (as int<PyType>  PyType))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@80@01) (tuple<PyType> (Seq_append
    (Seq_singleton (as int<PyType>  PyType))
    (Seq_singleton (as int<PyType>  PyType)))))))
; [eval] |iter.list_acc| > 0 ==> row_0 == tuple___getitem__(loop_target, 0) && _isDefined(207760093042)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 81 | |First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0 | live]
; [else-branch: 81 | !(|First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 81 | |First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0]
; [eval] row_0 == tuple___getitem__(loop_target, 0) && _isDefined(207760093042)
; [eval] row_0 == tuple___getitem__(loop_target, 0)
; [eval] tuple___getitem__(loop_target, 0)
(push) ; 9
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 10
(pop) ; 10
; Joined path conditions
(declare-const letvar@114@01 Int)
(assert (= (as letvar@114@01  Int) (tuple___len__ $Snap.unit _res@80@01)))
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 82 | True | live]
; [else-branch: 82 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 82 | True]
; [eval] key < ln
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 83 | !(0 < tuple___len__(_, _res@80@01)) | live]
; [else-branch: 83 | 0 < tuple___len__(_, _res@80@01) | live]
(push) ; 11
; [then-branch: 83 | !(0 < tuple___len__(_, _res@80@01))]
(assert (not (< 0 (tuple___len__ $Snap.unit _res@80@01))))
(pop) ; 11
(push) ; 11
; [else-branch: 83 | 0 < tuple___len__(_, _res@80@01)]
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 12
; [then-branch: 84 | False | dead]
; [else-branch: 84 | True | live]
(push) ; 13
; [else-branch: 84 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Joined path conditions
(assert (= (as letvar@114@01  Int) (tuple___len__ $Snap.unit _res@80@01)))
(push) ; 9
; [then-branch: 85 | row_0@85@01 != tuple___getitem__(_, _res@80@01, 0) | live]
; [else-branch: 85 | row_0@85@01 == tuple___getitem__(_, _res@80@01, 0) | live]
(push) ; 10
; [then-branch: 85 | row_0@85@01 != tuple___getitem__(_, _res@80@01, 0)]
(assert (not (= row_0@85@01 (tuple___getitem__ $Snap.unit _res@80@01 0))))
(pop) ; 10
(push) ; 10
; [else-branch: 85 | row_0@85@01 == tuple___getitem__(_, _res@80@01, 0)]
; [eval] _isDefined(207760093042)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (= row_0@85@01 (tuple___getitem__ $Snap.unit _res@80@01 0))
  (not (= row_0@85@01 (tuple___getitem__ $Snap.unit _res@80@01 0)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0)
  (and
    (= (as letvar@114@01  Int) (tuple___len__ $Snap.unit _res@80@01))
    (or
      (= row_0@85@01 (tuple___getitem__ $Snap.unit _res@80@01 0))
      (not (= row_0@85@01 (tuple___getitem__ $Snap.unit _res@80@01 0)))))))
(push) ; 7
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0)
  (and
    (= row_0@85@01 (tuple___getitem__ $Snap.unit _res@80@01 0))
    (_isDefined $Snap.unit 207760093042)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0)
  (and
    (= row_0@85@01 (tuple___getitem__ $Snap.unit _res@80@01 0))
    (_isDefined $Snap.unit 207760093042))))
; [eval] |iter.list_acc| > 0 ==> seat_0 == tuple___getitem__(loop_target, 1) && _isDefined(53186532566387)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 86 | |First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0 | live]
; [else-branch: 86 | !(|First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 86 | |First:(Second:(Second:(Second:(Second:($t@78@01)))))| > 0]
; [eval] seat_0 == tuple___getitem__(loop_target, 1) && _isDefined(53186532566387)
; [eval] seat_0 == tuple___getitem__(loop_target, 1)
; [eval] tuple___getitem__(loop_target, 1)
(push) ; 9
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 10
(pop) ; 10
; Joined path conditions
(declare-const letvar@115@01 Int)
(assert (= (as letvar@115@01  Int) (tuple___len__ $Snap.unit _res@80@01)))
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 87 | True | live]
; [else-branch: 87 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 87 | True]
; [eval] key < ln
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 88 | !(1 < tuple___len__(_, _res@80@01)) | live]
; [else-branch: 88 | 1 < tuple___len__(_, _res@80@01) | live]
(push) ; 11
; [then-branch: 88 | !(1 < tuple___len__(_, _res@80@01))]
(assert (not (< 1 (tuple___len__ $Snap.unit _res@80@01))))
(pop) ; 11
(push) ; 11
; [else-branch: 88 | 1 < tuple___len__(_, _res@80@01)]
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 12
; [then-branch: 89 | False | dead]
; [else-branch: 89 | True | live]
(push) ; 13
; [else-branch: 89 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Joined path conditions
(assert (= (as letvar@115@01  Int) (tuple___len__ $Snap.unit _res@80@01)))
(push) ; 9
; [then-branch: 90 | seat_0@88@01 != tuple___getitem__(_, _res@80@01, 1) | live]
; [else-branch: 90 | seat_0@88@01 == tuple___getitem__(_, _res@80@01, 1) | live]
(push) ; 10
; [then-branch: 90 | seat_0@88@01 != tuple___getitem__(_, _res@80@01, 1)]
(assert (not (= seat_0@88@01 (tuple___getitem__ $Snap.unit _res@80@01 1))))
(pop) ; 10
(push) ; 10
; [else-branch: 90 | seat_0@88@01 == tuple___getitem__(_, _res@80@01, 1)]
; [eval] _isDefined(53186532566387)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (= seat_0@88@01 (tuple___getitem__ $Snap.unit _res@80@01 1))
  (not (= seat_0@88@01 (tuple___getitem__ $Snap.unit _res@80@01 1)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0)
  (and
    (= (as letvar@115@01  Int) (tuple___len__ $Snap.unit _res@80@01))
    (or
      (= seat_0@88@01 (tuple___getitem__ $Snap.unit _res@80@01 1))
      (not (= seat_0@88@01 (tuple___getitem__ $Snap.unit _res@80@01 1)))))))
(push) ; 7
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0)
  (and
    (= seat_0@88@01 (tuple___getitem__ $Snap.unit _res@80@01 1))
    (_isDefined $Snap.unit 53186532566387)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0)
  (and
    (= seat_0@88@01 (tuple___getitem__ $Snap.unit _res@80@01 1))
    (_isDefined $Snap.unit 53186532566387))))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 7
; [then-branch: 91 | _err@81@01 != Null | dead]
; [else-branch: 91 | _err@81@01 == Null | live]
(push) ; 8
; [else-branch: 91 | _err@81@01 == Null]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 92 | |First:(Second:(Second:(Second:(Second:($t@78@01)))))| == 0 | dead]
; [else-branch: 92 | |First:(Second:(Second:(Second:(Second:($t@78@01)))))| != 0 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 92 | |First:(Second:(Second:(Second:(Second:($t@78@01)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))
    0)))
; [eval] _checkDefined(res, 7562610)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@71@01 7562610))
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@71@01 7562610))
(push) ; 7
(set-option :timeout 10)
(assert (not (= res@71@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(res, 7562610))), __prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] __prim__int___box__(list___len__(_checkDefined(res, 7562610)))
; [eval] list___len__(_checkDefined(res, 7562610))
; [eval] _checkDefined(res, 7562610)
(set-option :timeout 0)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@71@01 7562610)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@71@01 7562610)) 0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@71@01 7562610)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@71@01 7562610)) 0))))
(declare-const $k@116@01 $Perm)
(assert ($Perm.isReadVar $k@116@01))
(push) ; 8
(set-option :timeout 10)
(assert (not (= _res@77@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _res@65@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= res@71@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@116@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@116@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@71@01 7562610)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@71@01 7562610)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(set-option :timeout 0)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(push) ; 7
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))) (as int<PyType>  PyType)))
(pop) ; 7
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))) (as int<PyType>  PyType)))
(push) ; 7
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))) (as int<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))) (as int<PyType>  PyType))))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))) (as int<PyType>  PyType))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))) (as int<PyType>  PyType))))))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))) (as int<PyType>  PyType)))))))
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))) (as int<PyType>  PyType)))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))) (as int<PyType>  PyType))))))
(declare-const lambda46_30$t@117@01 $Ref)
(push) ; 7
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] issubtype(typeof(lambda46_30$t), Ticket())
; [eval] typeof(lambda46_30$t)
; [eval] Ticket()
(push) ; 8
; [then-branch: 93 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@117@01), Ticket[PyType])) | live]
; [else-branch: 93 | issubtype[Bool](typeof[PyType](lambda46_30$t@117@01), Ticket[PyType]) | live]
(push) ; 9
; [then-branch: 93 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@117@01), Ticket[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@117@01) (as Ticket<PyType>  PyType))))
(pop) ; 9
(push) ; 9
; [else-branch: 93 | issubtype[Bool](typeof[PyType](lambda46_30$t@117@01), Ticket[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda46_30$t@117@01) (as Ticket<PyType>  PyType)))
; [eval] (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] _checkDefined(res, 7562610)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (= _res@77@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _res@65@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= res@71@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@117@01) (as Ticket<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@117@01) (as Ticket<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@117@01) (as Ticket<PyType>  PyType))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    lambda46_30$t@117@01)))
(pop) ; 7
(declare-fun inv@118@01 ($Ref) $Ref)
(declare-fun img@119@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda46_30$t@117@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@117@01) (as Ticket<PyType>  PyType))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
        lambda46_30$t@117@01))
    (or
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@117@01) (as Ticket<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@117@01) (as Ticket<PyType>  PyType)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    lambda46_30$t@117@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    lambda46_30$t@117@01))
  :qid |Ticket_state-aux|)))
; Check receiver injectivity
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((lambda46_30$t1@117@01 $Ref) (lambda46_30$t2@117@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t1@117@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
          lambda46_30$t1@117@01))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t2@117@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
          lambda46_30$t2@117@01))
      (= lambda46_30$t1@117@01 lambda46_30$t2@117@01))
    (= lambda46_30$t1@117@01 lambda46_30$t2@117@01))
  
  :qid |Ticket_state-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda46_30$t@117@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@117@01) (as Ticket<PyType>  PyType))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
        lambda46_30$t@117@01))
    (and
      (= (inv@118@01 lambda46_30$t@117@01) lambda46_30$t@117@01)
      (img@119@01 lambda46_30$t@117@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    lambda46_30$t@117@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    lambda46_30$t@117@01))
  :qid |Ticket_state-invOfFct|)))
(assert (forall ((self_1 $Ref)) (!
  (=>
    (and
      (img@119@01 self_1)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@118@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
          (inv@118@01 self_1))))
    (= (inv@118@01 self_1) self_1))
  :pattern ((inv@118@01 self_1))
  :qid |Ticket_state-fctOfInv|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((self_1 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@118@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
          (inv@118@01 self_1)))
      (img@119@01 self_1)
      (= self_1 (inv@118@01 self_1)))
    false)
  
  :qid |quant-u-2905|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
(declare-const lambda46_30$t@120@01 $Ref)
(push) ; 7
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null)
; [eval] issubtype(typeof(lambda46_30$t), Ticket())
; [eval] typeof(lambda46_30$t)
; [eval] Ticket()
(push) ; 8
; [then-branch: 94 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@120@01), Ticket[PyType])) | live]
; [else-branch: 94 | issubtype[Bool](typeof[PyType](lambda46_30$t@120@01), Ticket[PyType]) | live]
(push) ; 9
; [then-branch: 94 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@120@01), Ticket[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@120@01) (as Ticket<PyType>  PyType))))
(pop) ; 9
(push) ; 9
; [else-branch: 94 | issubtype[Bool](typeof[PyType](lambda46_30$t@120@01), Ticket[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda46_30$t@120@01) (as Ticket<PyType>  PyType)))
; [eval] (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] _checkDefined(res, 7562610)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (= _res@77@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _res@65@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= res@71@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
; [then-branch: 95 | !(lambda46_30$t@120@01 in First:(Second:(Second:(Second:($t@72@01))))) | live]
; [else-branch: 95 | lambda46_30$t@120@01 in First:(Second:(Second:(Second:($t@72@01)))) | live]
(push) ; 11
; [then-branch: 95 | !(lambda46_30$t@120@01 in First:(Second:(Second:(Second:($t@72@01)))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    lambda46_30$t@120@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 95 | lambda46_30$t@120@01 in First:(Second:(Second:(Second:($t@72@01))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
  lambda46_30$t@120@01))
; [eval] code_1 != null
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    lambda46_30$t@120@01)
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
      lambda46_30$t@120@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@120@01) (as Ticket<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@120@01) (as Ticket<PyType>  PyType))
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
        lambda46_30$t@120@01)
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
          lambda46_30$t@120@01))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@120@01) (as Ticket<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@120@01) (as Ticket<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@120@01) (as Ticket<PyType>  PyType))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
      lambda46_30$t@120@01)
    (not (= code_0@34@01 $Ref.null)))))
(pop) ; 7
(declare-fun inv@121@01 ($Ref) $Ref)
(declare-fun img@122@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda46_30$t@120@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@120@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
          lambda46_30$t@120@01)
        (not (= code_0@34@01 $Ref.null))))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@120@01) (as Ticket<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@120@01) (as Ticket<PyType>  PyType))
          (or
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
              lambda46_30$t@120@01)
            (not
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
                lambda46_30$t@120@01)))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@120@01) (as Ticket<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@120@01) (as Ticket<PyType>  PyType))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    lambda46_30$t@120@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    lambda46_30$t@120@01))
  :qid |Ticket_discount_code-aux|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((lambda46_30$t1@120@01 $Ref) (lambda46_30$t2@120@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t1@120@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
            lambda46_30$t1@120@01)
          (not (= code_0@34@01 $Ref.null))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t2@120@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
            lambda46_30$t2@120@01)
          (not (= code_0@34@01 $Ref.null))))
      (= lambda46_30$t1@120@01 lambda46_30$t2@120@01))
    (= lambda46_30$t1@120@01 lambda46_30$t2@120@01))
  
  :qid |Ticket_discount_code-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda46_30$t@120@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@120@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
          lambda46_30$t@120@01)
        (not (= code_0@34@01 $Ref.null))))
    (and
      (= (inv@121@01 lambda46_30$t@120@01) lambda46_30$t@120@01)
      (img@122@01 lambda46_30$t@120@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    lambda46_30$t@120@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    lambda46_30$t@120@01))
  :qid |Ticket_discount_code-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@122@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@121@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
            (inv@121@01 r))
          (not (= code_0@34@01 $Ref.null)))))
    (= (inv@121@01 r) r))
  :pattern ((inv@121@01 r))
  :qid |Ticket_discount_code-fctOfInv|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@121@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
            (inv@121@01 r))
          (not (= code_0@34@01 $Ref.null))))
      (img@122@01 r)
      (= r (inv@121@01 r)))
    false)
  
  :qid |quant-u-2907|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [eval] (forall lambda46_30$t: Ref :: { (lambda46_30$t in _checkDefined(res, 7562610).list_acc) } issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null) ==> issubtype(typeof(lambda46_30$t.Ticket_discount_code), str()))
(declare-const lambda46_30$t@123@01 $Ref)
(push) ; 7
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null) ==> issubtype(typeof(lambda46_30$t.Ticket_discount_code), str())
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null)
; [eval] issubtype(typeof(lambda46_30$t), Ticket())
; [eval] typeof(lambda46_30$t)
; [eval] Ticket()
(push) ; 8
; [then-branch: 96 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@123@01), Ticket[PyType])) | live]
; [else-branch: 96 | issubtype[Bool](typeof[PyType](lambda46_30$t@123@01), Ticket[PyType]) | live]
(push) ; 9
; [then-branch: 96 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@123@01), Ticket[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))))
(pop) ; 9
(push) ; 9
; [else-branch: 96 | issubtype[Bool](typeof[PyType](lambda46_30$t@123@01), Ticket[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType)))
; [eval] (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] _checkDefined(res, 7562610)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (= _res@77@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _res@65@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= res@71@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
; [then-branch: 97 | !(lambda46_30$t@123@01 in First:(Second:(Second:(Second:($t@72@01))))) | live]
; [else-branch: 97 | lambda46_30$t@123@01 in First:(Second:(Second:(Second:($t@72@01)))) | live]
(push) ; 11
; [then-branch: 97 | !(lambda46_30$t@123@01 in First:(Second:(Second:(Second:($t@72@01)))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    lambda46_30$t@123@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 97 | lambda46_30$t@123@01 in First:(Second:(Second:(Second:($t@72@01))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
  lambda46_30$t@123@01))
; [eval] code_1 != null
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    lambda46_30$t@123@01)
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
      lambda46_30$t@123@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
        lambda46_30$t@123@01)
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
          lambda46_30$t@123@01))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType)))))
(push) ; 8
; [then-branch: 98 | issubtype[Bool](typeof[PyType](lambda46_30$t@123@01), Ticket[PyType]) && lambda46_30$t@123@01 in First:(Second:(Second:(Second:($t@72@01)))) && code_0@34@01 != Null | live]
; [else-branch: 98 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@123@01), Ticket[PyType]) && lambda46_30$t@123@01 in First:(Second:(Second:(Second:($t@72@01)))) && code_0@34@01 != Null) | live]
(push) ; 9
; [then-branch: 98 | issubtype[Bool](typeof[PyType](lambda46_30$t@123@01), Ticket[PyType]) && lambda46_30$t@123@01 in First:(Second:(Second:(Second:($t@72@01)))) && code_0@34@01 != Null]
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
      lambda46_30$t@123@01)
    (not (= code_0@34@01 $Ref.null)))))
; [eval] issubtype(typeof(lambda46_30$t.Ticket_discount_code), str())
; [eval] typeof(lambda46_30$t.Ticket_discount_code)
(declare-const sm@124@01 $FVF<Ticket_discount_code>)
; Definitional axioms for snapshot map values
(declare-const pm@125@01 $FPM)
(assert (forall ((r $Ref)) (!
  (= ($FVF.perm_Ticket_discount_code (as pm@125@01  $FPM) r) $Perm.No)
  :pattern (($FVF.perm_Ticket_discount_code (as pm@125@01  $FPM) r))
  :qid |qp.resPrmSumDef0|)))
(push) ; 10
(assert (not (<
  $Perm.No
  ($FVF.perm_Ticket_discount_code (as pm@125@01  $FPM) lambda46_30$t@123@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] str()
(pop) ; 9
(push) ; 9
; [else-branch: 98 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@123@01), Ticket[PyType]) && lambda46_30$t@123@01 in First:(Second:(Second:(Second:($t@72@01)))) && code_0@34@01 != Null)]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
        lambda46_30$t@123@01)
      (not (= code_0@34@01 $Ref.null))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (= ($FVF.perm_Ticket_discount_code (as pm@125@01  $FPM) r) $Perm.No)
  :pattern (($FVF.perm_Ticket_discount_code (as pm@125@01  $FPM) r))
  :qid |qp.resPrmSumDef0|)))
(assert (=>
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
        lambda46_30$t@123@01)
      (not (= code_0@34@01 $Ref.null))))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
      lambda46_30$t@123@01)
    (not (= code_0@34@01 $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
          lambda46_30$t@123@01)
        (not (= code_0@34@01 $Ref.null)))))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
        lambda46_30$t@123@01)
      (not (= code_0@34@01 $Ref.null))))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (= ($FVF.perm_Ticket_discount_code (as pm@125@01  $FPM) r) $Perm.No)
  :pattern (($FVF.perm_Ticket_discount_code (as pm@125@01  $FPM) r))
  :qid |qp.resPrmSumDef0|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda46_30$t@123@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
        (or
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
            lambda46_30$t@123@01)
          (not
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
              lambda46_30$t@123@01)))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
            lambda46_30$t@123@01)
          (not (= code_0@34@01 $Ref.null))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
          lambda46_30$t@123@01)
        (not (= code_0@34@01 $Ref.null))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
              lambda46_30$t@123@01)
            (not (= code_0@34@01 $Ref.null)))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
            lambda46_30$t@123@01)
          (not (= code_0@34@01 $Ref.null))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    lambda46_30$t@123@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    lambda46_30$t@123@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802-aux|)))
(assert (forall ((lambda46_30$t@123@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
        (or
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
            lambda46_30$t@123@01)
          (not
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
              lambda46_30$t@123@01)))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
            lambda46_30$t@123@01)
          (not (= code_0@34@01 $Ref.null))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
          lambda46_30$t@123@01)
        (not (= code_0@34@01 $Ref.null))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
              lambda46_30$t@123@01)
            (not (= code_0@34@01 $Ref.null)))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
            lambda46_30$t@123@01)
          (not (= code_0@34@01 $Ref.null))))))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    lambda46_30$t@123@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802-aux|)))
(push) ; 7
(assert (not (forall ((lambda46_30$t@123@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
          lambda46_30$t@123@01)
        (not (= code_0@34@01 $Ref.null))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Ticket_discount_code (as sm@124@01  $FVF<Ticket_discount_code>) lambda46_30$t@123@01)) (as str<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    lambda46_30$t@123@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    lambda46_30$t@123@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    lambda46_30$t@123@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda46_30$t@123@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@123@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
          lambda46_30$t@123@01)
        (not (= code_0@34@01 $Ref.null))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Ticket_discount_code (as sm@124@01  $FVF<Ticket_discount_code>) lambda46_30$t@123@01)) (as str<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    lambda46_30$t@123@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    lambda46_30$t@123@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802|)))
; [eval] iter_err == null ==> int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))) > 0
; [eval] iter_err == null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@81@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 99 | _err@81@01 == Null | live]
; [else-branch: 99 | _err@81@01 != Null | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 99 | _err@81@01 == Null]
; [eval] int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))) > 0
; [eval] int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610)))
; [eval] list___len__(_checkDefined(seats, 495873779059))
; [eval] _checkDefined(seats, 495873779059)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) 0)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) 0))))
(declare-const $k@126@01 $Perm)
(assert ($Perm.isReadVar $k@126@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (= _res@77@01 (_checkDefined $Snap.unit _res@65@01 495873779059))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _res@65@01 (_checkDefined $Snap.unit _res@65@01 495873779059))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@126@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@126@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059))))
; [eval] list___len__(_checkDefined(res, 7562610))
; [eval] _checkDefined(res, 7562610)
(set-option :timeout 0)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@127@01 $Perm)
(assert ($Perm.isReadVar $k@127@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (= _res@77@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _res@65@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= res@71@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@127@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@127@01))
(set-option :timeout 0)
(push) ; 9
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(pop) ; 9
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@126@01))
(assert ($Perm.isReadVar $k@127@01))
(assert (=>
  (= _err@81@01 $Ref.null)
  (and
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) 0)))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))))
(push) ; 7
(assert (not (=>
  (= _err@81@01 $Ref.null)
  (>
    (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@81@01 $Ref.null)
  (>
    (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
    0)))
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 100 | True | live]
; [else-branch: 100 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 100 | True]
; [eval] _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 7
; [then-branch: 101 | False | dead]
; [else-branch: 101 | True | live]
(push) ; 8
; [else-branch: 101 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@110@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            (inv@109@01 r))
          (not (= code_0@34@01 $Ref.null)))))
    (= (inv@109@01 r) r))
  :pattern ((inv@109@01 r))
  :qid |Ticket_discount_code-fctOfInv|)))
(assert ($Perm.isReadVar $k@112@01))
(assert ($Perm.isReadVar $k@113@01))
(assert (forall ((lambda46_30$t@108@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@108@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
          lambda46_30$t@108@01)
        (not (= code_0@34@01 $Ref.null))))
    (and
      (= (inv@109@01 lambda46_30$t@108@01) lambda46_30$t@108@01)
      (img@110@01 lambda46_30$t@108@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@108@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@108@01))
  :qid |quant-u-2903|)))
(assert (forall ((lambda46_30$t@108@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@108@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
          lambda46_30$t@108@01)
        (not (= code_0@34@01 $Ref.null))))
    (not (= lambda46_30$t@108@01 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@108@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@108@01))
  :qid |Ticket_discount_code-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((lambda46_30$t@111@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
        (or
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            lambda46_30$t@111@01)
          (not
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
              lambda46_30$t@111@01)))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            lambda46_30$t@111@01)
          (not (= code_0@34@01 $Ref.null))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
          lambda46_30$t@111@01)
        (not (= code_0@34@01 $Ref.null))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
              lambda46_30$t@111@01)
            (not (= code_0@34@01 $Ref.null)))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            lambda46_30$t@111@01)
          (not (= code_0@34@01 $Ref.null))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@111@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@111@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802-aux|)))
(assert (forall ((lambda46_30$t@111@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
        (or
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            lambda46_30$t@111@01)
          (not
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
              lambda46_30$t@111@01)))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            lambda46_30$t@111@01)
          (not (= code_0@34@01 $Ref.null))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
          lambda46_30$t@111@01)
        (not (= code_0@34@01 $Ref.null))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
              lambda46_30$t@111@01)
            (not (= code_0@34@01 $Ref.null)))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            lambda46_30$t@111@01)
          (not (= code_0@34@01 $Ref.null))))))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@111@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802-aux|)))
(assert (forall ((lambda46_30$t@111@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@111@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
          lambda46_30$t@111@01)
        (not (= code_0@34@01 $Ref.null))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Ticket_discount_code ($SortWrappers.$SnapTo$FVF<Ticket_discount_code> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))) lambda46_30$t@111@01)) (as str<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@111@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@111@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=>
  (= iter_err@97@01 $Ref.null)
  (and
    (= iter_err@97@01 $Ref.null)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) 0)))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610))))))
(assert (=>
  (= iter_err@97@01 $Ref.null)
  (>
    (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((self_1 $Ref)) (!
  (=>
    (and
      (img@107@01 self_1)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@106@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
          (inv@106@01 self_1))))
    (= (inv@106@01 self_1) self_1))
  :pattern ((inv@106@01 self_1))
  :qid |Ticket_state-fctOfInv|)))
(assert (forall ((lambda46_30$t@105@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@105@01) (as Ticket<PyType>  PyType))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
        lambda46_30$t@105@01))
    (and
      (= (inv@106@01 lambda46_30$t@105@01) lambda46_30$t@105@01)
      (img@107@01 lambda46_30$t@105@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@105@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@105@01))
  :qid |quant-u-2901|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))))))
(assert (forall ((lambda46_30$t@108@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@108@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
          lambda46_30$t@108@01)
        (not (= code_0@34@01 $Ref.null))))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@108@01) (as Ticket<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@108@01) (as Ticket<PyType>  PyType))
          (or
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
              lambda46_30$t@108@01)
            (not
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
                lambda46_30$t@108@01)))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@108@01) (as Ticket<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@108@01) (as Ticket<PyType>  PyType))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@108@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@108@01))
  :qid |Ticket_discount_code-aux|)))
(assert ($Perm.isReadVar $k@104@01))
(assert (= $t@101@01 ($Snap.combine ($Snap.first $t@101@01) ($Snap.second $t@101@01))))
(assert (= ($Snap.first $t@101@01) $Snap.unit))
(assert (=
  ($Snap.second $t@101@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@101@01))
    ($Snap.second ($Snap.second $t@101@01)))))
(assert (= ($Snap.first ($Snap.second $t@101@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@101@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@101@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@101@01))) $Snap.unit))
(assert (<= _residue_160@31@01 _residue_161@59@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@101@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
(assert (not (= iterable@75@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
  $Snap.unit))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
  $Snap.unit))
(assert (Seq_equal
  seqtmp@90@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
  $Snap.unit))
(assert (or (not (= iter_err@97@01 $Ref.null)) (= iter_err@97@01 $Ref.null)))
(assert (=>
  (= iter_err@97@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))
  $Snap.unit))
(assert (or (= iter_err@97@01 $Ref.null) (not (= iter_err@97@01 $Ref.null))))
(assert (=>
  (not (= iter_err@97@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))
  $Snap.unit))
(assert (=>
  (= iter_err@97@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))
  $Snap.unit))
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))
  $Snap.unit))
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))
  $Snap.unit))
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (=
    loop_target@96@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
    loop_target@96@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))
  $Snap.unit))
(assert (=>
  (= iter_err@97@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (=
    (Seq_length
      (Seq_append
        (Seq_singleton (as int<PyType>  PyType))
        (Seq_singleton (as int<PyType>  PyType))))
    2)))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target@96@01) (tuple<PyType> (Seq_append
    (Seq_singleton (as int<PyType>  PyType))
    (Seq_singleton (as int<PyType>  PyType)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (tuple___len__%precondition $Snap.unit loop_target@96@01)
    (= (as letvar@102@01  Int) (tuple___len__ $Snap.unit loop_target@96@01))
    (or
      (< 0 (tuple___len__ $Snap.unit loop_target@96@01))
      (not (< 0 (tuple___len__ $Snap.unit loop_target@96@01))))
    (< 0 (tuple___len__ $Snap.unit loop_target@96@01))
    (tuple___getitem__%precondition $Snap.unit loop_target@96@01 0)
    (or
      (= row_0@98@01 (tuple___getitem__ $Snap.unit loop_target@96@01 0))
      (not (= row_0@98@01 (tuple___getitem__ $Snap.unit loop_target@96@01 0)))))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= row_0@98@01 (tuple___getitem__ $Snap.unit loop_target@96@01 0))
    (_isDefined $Snap.unit 207760093042))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (tuple___len__%precondition $Snap.unit loop_target@96@01)
    (= (as letvar@103@01  Int) (tuple___len__ $Snap.unit loop_target@96@01))
    (or
      (< 1 (tuple___len__ $Snap.unit loop_target@96@01))
      (not (< 1 (tuple___len__ $Snap.unit loop_target@96@01))))
    (< 1 (tuple___len__ $Snap.unit loop_target@96@01))
    (tuple___getitem__%precondition $Snap.unit loop_target@96@01 1)
    (or
      (= seat_0@99@01 (tuple___getitem__ $Snap.unit loop_target@96@01 1))
      (not (= seat_0@99@01 (tuple___getitem__ $Snap.unit loop_target@96@01 1)))))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= seat_0@99@01 (tuple___getitem__ $Snap.unit loop_target@96@01 1))
    (_isDefined $Snap.unit 53186532566387))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))
  $Snap.unit))
(assert (=>
  (not (= iter_err@97@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))
(assert (not (= (_checkDefined $Snap.unit res@71@01 7562610) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
  $Snap.unit))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610)))
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType)))
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType))))
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType)))))
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610)))) (as int<PyType>  PyType)))
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType))))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))) (as int<PyType>  PyType))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))))
(assert (forall ((lambda46_30$t@105@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@105@01) (as Ticket<PyType>  PyType))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
        lambda46_30$t@105@01))
    (or
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@105@01) (as Ticket<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@105@01) (as Ticket<PyType>  PyType)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@105@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    lambda46_30$t@105@01))
  :qid |Ticket_state-aux|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 8
; [eval] iter_err == null
(pop) ; 8
(push) ; 8
; [eval] !(iter_err == null)
; [eval] iter_err == null
(pop) ; 8
; Loop head block: Follow loop-internal edges
; [eval] iter_err == null
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= iter_err@97@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= iter_err@97@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 102 | iter_err@97@01 == Null | live]
; [else-branch: 102 | iter_err@97@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 102 | iter_err@97@01 == Null]
(assert (= iter_err@97@01 $Ref.null))
; [exec]
; _loop_measures := Seq(Measure$create(true, _cthread_160, int___sub__(list___len__(_checkDefined(seats,
;   495873779059)), list___len__(_checkDefined(res, 7562610)))))
; [eval] Seq(Measure$create(true, _cthread_160, int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610)))))
; [eval] Measure$create(true, _cthread_160, int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))))
; [eval] int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610)))
; [eval] list___len__(_checkDefined(seats, 495873779059))
; [eval] _checkDefined(seats, 495873779059)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) 0)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) 0))))
(declare-const $k@128@01 $Perm)
(assert ($Perm.isReadVar $k@128@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@71@01 7562610)
  (_checkDefined $Snap.unit _res@65@01 495873779059))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _res@77@01 (_checkDefined $Snap.unit _res@65@01 495873779059))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@128@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@128@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@65@01 495873779059)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059))))
; [eval] list___len__(_checkDefined(res, 7562610))
; [eval] _checkDefined(res, 7562610)
(set-option :timeout 0)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@129@01 $Perm)
(assert ($Perm.isReadVar $k@129@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@129@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@129@01))
(set-option :timeout 0)
(push) ; 9
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(pop) ; 9
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610))))))
  1))
(declare-const _loop_measures@130@01 Seq<Measure$>)
(assert (=
  _loop_measures@130@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@71@01 7562610)))))))
; [exec]
; Ticket_res := new()
(declare-const Ticket_res@131@01 $Ref)
(assert (not (= Ticket_res@131@01 $Ref.null)))
(assert (not (= Ticket_res@131@01 show_id@33@01)))
(assert (not (= Ticket_res@131@01 _res@65@01)))
(assert (not (= Ticket_res@131@01 code_0@34@01)))
(assert (not (= Ticket_res@131@01 ticket@95@01)))
(assert (not (= Ticket_res@131@01 Ticket_res@93@01)))
(assert (not (= Ticket_res@131@01 iterable@75@01)))
(assert (not (= Ticket_res@131@01 num_1@32@01)))
(assert (not (= Ticket_res@131@01 _err@66@01)))
(assert (not (= Ticket_res@131@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(assert (not (= Ticket_res@131@01 res@71@01)))
(assert (not (= Ticket_res@131@01 loop_target@96@01)))
(assert (not (= Ticket_res@131@01 iter_err@97@01)))
(assert (not (= Ticket_res@131@01 _cthread_160@29@01)))
(assert (not (= Ticket_res@131@01 seat_0@99@01)))
(assert (not (= Ticket_res@131@01 _res@77@01)))
(assert (not (= Ticket_res@131@01 row_0@98@01)))
(assert (not (Seq_contains seqtmp@90@01 Ticket_res@131@01)))
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    Ticket_res@131@01)))
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
    Ticket_res@131@01)))
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
    Ticket_res@131@01)))
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))
    Ticket_res@131@01)))
; [exec]
; inhale typeof(Ticket_res) == Ticket()
(declare-const $t@132@01 $Snap)
(assert (= $t@132@01 $Snap.unit))
; [eval] typeof(Ticket_res) == Ticket()
; [eval] typeof(Ticket_res)
; [eval] Ticket()
(assert (= (typeof<PyType> Ticket_res@131@01) (as Ticket<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Ticket_res, 2036589462893379814238060391131476), write)
(declare-const $t@133@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Ticket_res, 564017441487491594152276), write)
(declare-const $t@134@01 $Snap)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Ticket_res, 140695336058778200607779156), write)
(declare-const $t@135@01 $Snap)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Ticket_res, 578847845651634811226368290157834565233854867796), write)
(declare-const $t@136@01 $Snap)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_160 := Ticket___init__(_cthread_160, _method_measures_160, _residue_161,
;   Ticket_res, show_id_0, _checkDefined(row_0, 207760093042), _checkDefined(seat_0,
;   53186532566387))
; [eval] _checkDefined(row_0, 207760093042)
(set-option :timeout 0)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit row_0@98@01 207760093042))
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit row_0@98@01 207760093042))
; [eval] _checkDefined(seat_0, 53186532566387)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit seat_0@99@01 53186532566387))
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit seat_0@99@01 53186532566387))
; [eval] _cthread_156 != null
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
; [eval] self != null
; [eval] issubtype(typeof(self), Ticket())
; [eval] typeof(self)
; [eval] Ticket()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> Ticket_res@131@01) (as Ticket<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Ticket_res@131@01) (as Ticket<PyType>  PyType)))
; [eval] issubtype(typeof(show), int())
; [eval] typeof(show)
; [eval] int()
; [eval] issubtype(typeof(row), int())
; [eval] typeof(row)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit row_0@98@01 207760093042)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit row_0@98@01 207760093042)) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(seat), int())
; [eval] typeof(seat)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit seat_0@99@01 53186532566387)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit seat_0@99@01 53186532566387)) (as int<PyType>  PyType)))
; [eval] self != null
; [eval] Measure$check(_caller_measures_156, _cthread_156, 1) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false))))
; [eval] Measure$check(_caller_measures_156, _cthread_156, 1)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
; [then-branch: 103 | Measure$check(_, _method_measures_160@63@01, _cthread_160@29@01, 1) | live]
; [else-branch: 103 | !(Measure$check(_, _method_measures_160@63@01, _cthread_160@29@01, 1)) | live]
(push) ; 10
; [then-branch: 103 | Measure$check(_, _method_measures_160@63@01, _cthread_160@29@01, 1)]
(pop) ; 10
(push) ; 10
; [else-branch: 103 | !(Measure$check(_, _method_measures_160@63@01, _cthread_160@29@01, 1))]
(assert (not (Measure$check $Snap.unit _method_measures_160@63@01 _cthread_160@29@01 1)))
; [eval] perm(MustTerminate(_cthread_156)) == none && ((forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(declare-const _current_wait_level_156@137@01 $Perm)
(declare-const $t@138@01 $Snap)
(assert (= $t@138@01 ($Snap.combine ($Snap.first $t@138@01) ($Snap.second $t@138@01))))
(assert (= ($Snap.first $t@138@01) $Snap.unit))
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _current_wait_level_156)
(assert (=
  ($Snap.second $t@138@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@138@01))
    ($Snap.second ($Snap.second $t@138@01)))))
(assert (= ($Snap.first ($Snap.second $t@138@01)) $Snap.unit))
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _current_wait_level_156)
(assert (=
  ($Snap.second ($Snap.second $t@138@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@138@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@138@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@138@01))) $Snap.unit))
; [eval] _residue_156 <= _current_wait_level_156
(assert (<= _residue_161@59@01 _current_wait_level_156@137@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@138@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@138@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@138@01)))))))
(declare-const sm@139@01 $PSF<Ticket_state>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($PSF.lookup_Ticket_state (as sm@139@01  $PSF<Ticket_state>) ($SortWrappers.$RefTo$Snap Ticket_res@131@01))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@138@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@138@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@138@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@138@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@138@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; ticket := Ticket_res
; [exec]
; inhale _isDefined(127978942196084)
(declare-const $t@140@01 $Snap)
(assert (= $t@140@01 $Snap.unit))
; [eval] _isDefined(127978942196084)
(set-option :timeout 0)
(push) ; 9
(assert (_isDefined%precondition $Snap.unit 127978942196084))
(pop) ; 9
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 127978942196084))
(assert (_isDefined $Snap.unit 127978942196084))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] code_1 != null
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= code_0@34@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= code_0@34@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 104 | code_0@34@01 != Null | live]
; [else-branch: 104 | code_0@34@01 == Null | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 104 | code_0@34@01 != Null]
(assert (not (= code_0@34@01 $Ref.null)))
; [eval] perm(_MaySet(_checkDefined(ticket, 127978942196084), 578847845651634811226368290157834565233854867796)) > none
; [eval] perm(_MaySet(_checkDefined(ticket, 127978942196084), 578847845651634811226368290157834565233854867796))
; [eval] _checkDefined(ticket, 127978942196084)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit Ticket_res@131@01 127978942196084))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit Ticket_res@131@01 127978942196084))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (>
    (ite
      (=
        (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)
        Ticket_res@131@01)
      $Perm.Write
      $Perm.No)
    $Perm.No))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (>
  (ite
    (=
      (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)
      Ticket_res@131@01)
    $Perm.Write
    $Perm.No)
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 105 | (_checkDefined(_, Ticket_res@131@01, 127978942196084) == Ticket_res@131@01 ? W : Z) > Z | live]
; [else-branch: 105 | !((_checkDefined(_, Ticket_res@131@01, 127978942196084) == Ticket_res@131@01 ? W : Z) > Z) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 105 | (_checkDefined(_, Ticket_res@131@01, 127978942196084) == Ticket_res@131@01 ? W : Z) > Z]
(assert (>
  (ite
    (=
      (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)
      Ticket_res@131@01)
    $Perm.Write
    $Perm.No)
  $Perm.No))
; [exec]
; exhale acc(_MaySet(_checkDefined(ticket, 127978942196084), 578847845651634811226368290157834565233854867796), write)
; [eval] _checkDefined(ticket, 127978942196084)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  Ticket_res@131@01
  (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(_checkDefined(ticket, 127978942196084).Ticket_discount_code, write)
; [eval] _checkDefined(ticket, 127978942196084)
(set-option :timeout 0)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(declare-const $t@141@01 $Ref)
(declare-const sm@142@01 $FVF<Ticket_discount_code>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Ticket_discount_code (as sm@142@01  $FVF<Ticket_discount_code>) (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
  $t@141@01))
(assert (<=
  $Perm.No
  (ite
    (=
      (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)
      (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)
      (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)
    (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
  (not
    (= (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084) $Ref.null))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _checkDefined(ticket, 127978942196084).Ticket_discount_code := code_1
; [eval] _checkDefined(ticket, 127978942196084)
(set-option :timeout 0)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
; Precomputing data for removing quantified permissions
(define-fun pTaken@143@01 ((r $Ref)) $Perm
  (ite
    (= r (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
    ($Perm.min
      (ite
        (= r (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@144@01 ((r $Ref)) $Perm
  (ite
    (= r (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
    ($Perm.min
      (ite
        (and
          (img@110@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
            (and
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
                (inv@109@01 r))
              (not (= code_0@34@01 $Ref.null)))))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@143@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)
        (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
      $Perm.Write
      $Perm.No)
    (pTaken@143@01 (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
    (= (- $Perm.Write (pTaken@143@01 r)) $Perm.No))
  
  :qid |quant-u-2910|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@145@01 $FVF<Ticket_discount_code>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_Ticket_discount_code (as sm@145@01  $FVF<Ticket_discount_code>) (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
  code_0@34@01))
; [exec]
; _cwl_160 := list_append(_cthread_160, _method_measures_160, _residue_161, _checkDefined(res,
;   7562610), _checkDefined(ticket, 127978942196084))
; [eval] _checkDefined(res, 7562610)
(set-option :timeout 0)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
; [eval] _checkDefined(ticket, 127978942196084)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
; [eval] _cthread_9 != null
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] issubtype(typeof(_cthread_9), Thread_0())
; [eval] typeof(_cthread_9)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(item), list_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@71@01 7562610)) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@71@01 7562610)) 0)))
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const _current_wait_level_9@146@01 $Perm)
(declare-const $t@147@01 $Snap)
(assert (= $t@147@01 ($Snap.combine ($Snap.first $t@147@01) ($Snap.second $t@147@01))))
(assert (= ($Snap.first $t@147@01) $Snap.unit))
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: Level(_r_21) <= _current_wait_level_9)
(assert (=
  ($Snap.second $t@147@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@147@01))
    ($Snap.second ($Snap.second $t@147@01)))))
(assert (= ($Snap.first ($Snap.second $t@147@01)) $Snap.unit))
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: Level(_r_21) <= _current_wait_level_9)
(assert (=
  ($Snap.second ($Snap.second $t@147@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@147@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@147@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@147@01))) $Snap.unit))
; [eval] _residue_9 <= _current_wait_level_9
(assert (<= _residue_161@59@01 _current_wait_level_9@146@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@147@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (= iterable@75@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _res@77@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@147@01))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc)
; [eval] Seq(item)
(assert (=
  (Seq_length
    (Seq_singleton (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)))
  1))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    (Seq_singleton (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label loop_end
; [exec]
; _cwl_160, loop_target, iter_err := Iterator___next__(_cthread_160, _method_measures_160,
;   _residue_160, iter)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const _current_wait_level_149@148@01 $Perm)
(declare-const _res@149@01 $Ref)
(declare-const _err@150@01 $Ref)
(declare-const $t@151@01 $Snap)
(assert (= $t@151@01 ($Snap.combine ($Snap.first $t@151@01) ($Snap.second $t@151@01))))
(assert (= ($Snap.first $t@151@01) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: Level(_r_15) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@151@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@151@01))
    ($Snap.second ($Snap.second $t@151@01)))))
(assert (= ($Snap.first ($Snap.second $t@151@01)) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: Level(_r_15) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@151@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@151@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@151@01))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_160@31@01 _current_wait_level_149@148@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@151@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))
  (not (= _err@150@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= _err@150@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _err@150@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 106 | _err@150@01 == Null | live]
; [else-branch: 106 | _err@150@01 != Null | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 106 | _err@150@01 == Null]
(assert (= _err@150@01 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 12
(push) ; 12
; [else-branch: 106 | _err@150@01 != Null]
(assert (not (= _err@150@01 $Ref.null)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@150@01 $Ref.null)) (= _err@150@01 $Ref.null)))
(assert (=>
  (= _err@150@01 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= _err@150@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _err@150@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 107 | _err@150@01 == Null | live]
; [else-branch: 107 | _err@150@01 != Null | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 107 | _err@150@01 == Null]
(assert (= _err@150@01 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 12
(push) ; 12
; [else-branch: 107 | _err@150@01 != Null]
(assert (not (= _err@150@01 $Ref.null)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@150@01 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= _err@150@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _err@150@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 108 | _err@150@01 == Null | live]
; [else-branch: 108 | _err@150@01 != Null | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 108 | _err@150@01 == Null]
(assert (= _err@150@01 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 12
(push) ; 12
; [else-branch: 108 | _err@150@01 != Null]
(assert (not (= _err@150@01 $Ref.null)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@150@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 109 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 109 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 109 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] self.__iter_index > 0
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (= _err@150@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= _err@150@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 110 | _err@150@01 != Null | live]
; [else-branch: 110 | _err@150@01 == Null | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 110 | _err@150@01 != Null]
(assert (not (= _err@150@01 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 12
(push) ; 12
; [else-branch: 110 | _err@150@01 == Null]
(assert (= _err@150@01 $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (= _err@150@01 $Ref.null) (not (= _err@150@01 $Ref.null))))
(assert (=>
  (not (= _err@150@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (= _err@150@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= _err@150@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 111 | _err@150@01 != Null | live]
; [else-branch: 111 | _err@150@01 == Null | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 111 | _err@150@01 != Null]
(assert (not (= _err@150@01 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 12
(push) ; 12
; [else-branch: 111 | _err@150@01 == Null]
(assert (= _err@150@01 $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= _err@150@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 112 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 112 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 112 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 13
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
; [then-branch: 113 | _res@149@01 != First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) - 1] | live]
; [else-branch: 113 | _res@149@01 == First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) - 1] | live]
(push) ; 14
; [then-branch: 113 | _res@149@01 != First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) - 1]]
(assert (not
  (=
    _res@149@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
        1)))))
(pop) ; 14
(push) ; 14
; [else-branch: 113 | _res@149@01 == First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) - 1]]
(assert (=
  _res@149@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    _res@149@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
        1)))
  (not
    (=
      _res@149@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
          1))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (or
    (=
      _res@149@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
          1)))
    (not
      (=
        _res@149@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
            1)))))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (=
      _res@149@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
          1)))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      _res@149@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 114 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 114 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 114 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@149@01) (Iterator_arg<PyType> (typeof<PyType> _res@77@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@152@01 $Ref)
(push) ; 11
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 12
; [then-branch: 115 | r@152@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@101@01))))))))) | live]
; [else-branch: 115 | !(r@152@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@101@01)))))))))) | live]
(push) ; 13
; [then-branch: 115 | r@152@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@101@01)))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
  r@152@01))
(pop) ; 13
(push) ; 13
; [else-branch: 115 | !(r@152@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@101@01))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
    r@152@01)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 14
; [then-branch: 116 | !(First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) > 1) | live]
; [else-branch: 116 | First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) > 1 | live]
(push) ; 15
; [then-branch: 116 | !(First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    1)))
(pop) ; 15
(push) ; 15
; [else-branch: 116 | First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(push) ; 16
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
; [then-branch: 117 | r@152@01 != First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) - 2] | live]
; [else-branch: 117 | r@152@01 == First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) - 2] | live]
(push) ; 17
; [then-branch: 117 | r@152@01 != First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) - 2]]
(assert (not
  (=
    r@152@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
        2)))))
(pop) ; 17
(push) ; 17
; [else-branch: 117 | r@152@01 == First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) - 2]]
(assert (=
  r@152@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
      2))))
; [eval] _err == null
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    r@152@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
        2)))
  (not
    (=
      r@152@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
          2))))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    1)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
      1)
    (or
      (=
        r@152@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
            2)))
      (not
        (=
          r@152@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
              2))))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    1)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
      1))))
(push) ; 14
; [then-branch: 118 | First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) > 1 && r@152@01 == First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) - 2] && _err@150@01 == Null | live]
; [else-branch: 118 | !(First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) > 1 && r@152@01 == First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) - 2] && _err@150@01 == Null) | live]
(push) ; 15
; [then-branch: 118 | First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) > 1 && r@152@01 == First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) - 2] && _err@150@01 == Null]
(assert (and
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    1)
  (and
    (=
      r@152@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
          2)))
    (= _err@150@01 $Ref.null))))
(pop) ; 15
(push) ; 15
; [else-branch: 118 | !(First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) > 1 && r@152@01 == First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) - 2] && _err@150@01 == Null)]
(assert (not
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
      1)
    (and
      (=
        r@152@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
            2)))
      (= _err@150@01 $Ref.null)))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 16
; [then-branch: 119 | !(First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) > 0) | live]
; [else-branch: 119 | First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) > 0 | live]
(push) ; 17
; [then-branch: 119 | !(First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    0)))
(pop) ; 17
(push) ; 17
; [else-branch: 119 | First:(Second:(Second:(Second:(Second:(Second:($t@151@01)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
  0))
; [eval] _err != null
(push) ; 18
; [then-branch: 120 | _err@150@01 == Null | live]
; [else-branch: 120 | _err@150@01 != Null | live]
(push) ; 19
; [then-branch: 120 | _err@150@01 == Null]
(assert (= _err@150@01 $Ref.null))
(pop) ; 19
(push) ; 19
; [else-branch: 120 | _err@150@01 != Null]
(assert (not (= _err@150@01 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 20
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
      0))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
      1)
    (and
      (=
        r@152@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
            2)))
      (= _err@150@01 $Ref.null)))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
      1)
    (=
      r@152@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
          2)))
    (= _err@150@01 $Ref.null))))
; Joined path conditions
(assert (=>
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
        1)
      (and
        (=
          r@152@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
              2)))
        (= _err@150@01 $Ref.null))))
  (and
    (not
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
          1)
        (and
          (=
            r@152@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                2)))
          (= _err@150@01 $Ref.null))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
          0))))))
(assert (or
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
        1)
      (and
        (=
          r@152@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
              2)))
        (= _err@150@01 $Ref.null))))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
      1)
    (and
      (=
        r@152@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
            2)))
      (= _err@150@01 $Ref.null)))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
      r@152@01))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
        r@152@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
        1)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
          1)
        (or
          (=
            r@152@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                2)))
          (not
            (=
              r@152@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                  2)))))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
        1)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
          1)))
    (=>
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
          1)
        (and
          (=
            r@152@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                2)))
          (= _err@150@01 $Ref.null)))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
          1)
        (=
          r@152@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
              2)))
        (= _err@150@01 $Ref.null)))
    (=>
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
            1)
          (and
            (=
              r@152@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                  2)))
            (= _err@150@01 $Ref.null))))
      (and
        (not
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
              1)
            (and
              (=
                r@152@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                    2)))
              (= _err@150@01 $Ref.null))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
              0)))))
    (or
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
            1)
          (and
            (=
              r@152@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                  2)))
            (= _err@150@01 $Ref.null))))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
          1)
        (and
          (=
            r@152@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                2)))
          (= _err@150@01 $Ref.null)))))))
(assert (or
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
      r@152@01))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
    r@152@01)))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@152@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
          r@152@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
            r@152@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
              1)
            (or
              (=
                r@152@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                    2)))
              (not
                (=
                  r@152@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
              1)
            (and
              (=
                r@152@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                    2)))
              (= _err@150@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
              1)
            (=
              r@152@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                  2)))
            (= _err@150@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                1)
              (and
                (=
                  r@152@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                      2)))
                (= _err@150@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                  1)
                (and
                  (=
                    r@152@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                        2)))
                  (= _err@150@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                1)
              (and
                (=
                  r@152@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                      2)))
                (= _err@150@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
              1)
            (and
              (=
                r@152@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                    2)))
              (= _err@150@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
          r@152@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
        r@152@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))
    r@152@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))
    r@152@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@902@12@902@289-aux|)))
(assert (forall ((r@152@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
          r@152@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
            r@152@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
              1)
            (or
              (=
                r@152@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                    2)))
              (not
                (=
                  r@152@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
              1)
            (and
              (=
                r@152@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                    2)))
              (= _err@150@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
              1)
            (=
              r@152@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                  2)))
            (= _err@150@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                1)
              (and
                (=
                  r@152@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                      2)))
                (= _err@150@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                  1)
                (and
                  (=
                    r@152@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                        2)))
                  (= _err@150@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                1)
              (and
                (=
                  r@152@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                      2)))
                (= _err@150@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
              1)
            (and
              (=
                r@152@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                    2)))
              (= _err@150@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
          r@152@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
        r@152@01)))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))
    r@152@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@902@12@902@289-aux|)))
(assert (forall ((r@152@01 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))
      r@152@01)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
        r@152@01)
      (or
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
            1)
          (and
            (=
              r@152@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                  2)))
            (= _err@150@01 $Ref.null)))
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
            0)
          (and
            (not (= _err@150@01 $Ref.null))
            (=
              r@152@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
                  1))))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))
    r@152@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))
    r@152@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@902@12@902@289|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= _err@150@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _err@150@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 121 | _err@150@01 == Null | live]
; [else-branch: 121 | _err@150@01 != Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 121 | _err@150@01 == Null]
(assert (= _err@150@01 $Ref.null))
; [exec]
; row_0 := tuple___getitem__(loop_target, 0)
; [eval] tuple___getitem__(loop_target, 0)
(push) ; 12
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 13
(assert (tuple___len__%precondition $Snap.unit _res@149@01))
(pop) ; 13
; Joined path conditions
(assert (tuple___len__%precondition $Snap.unit _res@149@01))
(declare-const letvar@153@01 Int)
(assert (= (as letvar@153@01  Int) (tuple___len__ $Snap.unit _res@149@01)))
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 122 | True | live]
; [else-branch: 122 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 122 | True]
; [eval] key < ln
(pop) ; 14
(pop) ; 13
; Joined path conditions
(push) ; 13
; [then-branch: 123 | !(0 < tuple___len__(_, _res@149@01)) | live]
; [else-branch: 123 | 0 < tuple___len__(_, _res@149@01) | live]
(push) ; 14
; [then-branch: 123 | !(0 < tuple___len__(_, _res@149@01))]
(assert (not (< 0 (tuple___len__ $Snap.unit _res@149@01))))
(pop) ; 14
(push) ; 14
; [else-branch: 123 | 0 < tuple___len__(_, _res@149@01)]
(assert (< 0 (tuple___len__ $Snap.unit _res@149@01)))
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 15
; [then-branch: 124 | False | dead]
; [else-branch: 124 | True | live]
(push) ; 16
; [else-branch: 124 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (< 0 (tuple___len__ $Snap.unit _res@149@01))
  (not (< 0 (tuple___len__ $Snap.unit _res@149@01)))))
(push) ; 13
(assert (not (< 0 (tuple___len__ $Snap.unit _res@149@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (< 0 (tuple___len__ $Snap.unit _res@149@01)))
(assert (tuple___getitem__%precondition $Snap.unit _res@149@01 0))
(pop) ; 12
; Joined path conditions
(assert (and
  (tuple___len__%precondition $Snap.unit _res@149@01)
  (= (as letvar@153@01  Int) (tuple___len__ $Snap.unit _res@149@01))
  (or
    (< 0 (tuple___len__ $Snap.unit _res@149@01))
    (not (< 0 (tuple___len__ $Snap.unit _res@149@01))))
  (< 0 (tuple___len__ $Snap.unit _res@149@01))
  (tuple___getitem__%precondition $Snap.unit _res@149@01 0)))
(declare-const row_0@154@01 $Ref)
(assert (= row_0@154@01 (tuple___getitem__ $Snap.unit _res@149@01 0)))
; [exec]
; inhale _isDefined(207760093042)
(declare-const $t@155@01 $Snap)
(assert (= $t@155@01 $Snap.unit))
; [eval] _isDefined(207760093042)
(push) ; 12
(pop) ; 12
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; seat_0 := tuple___getitem__(loop_target, 1)
; [eval] tuple___getitem__(loop_target, 1)
(set-option :timeout 0)
(push) ; 12
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const letvar@156@01 Int)
(assert (= (as letvar@156@01  Int) (tuple___len__ $Snap.unit _res@149@01)))
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 125 | True | live]
; [else-branch: 125 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 125 | True]
; [eval] key < ln
(pop) ; 14
(pop) ; 13
; Joined path conditions
(push) ; 13
; [then-branch: 126 | !(1 < tuple___len__(_, _res@149@01)) | live]
; [else-branch: 126 | 1 < tuple___len__(_, _res@149@01) | live]
(push) ; 14
; [then-branch: 126 | !(1 < tuple___len__(_, _res@149@01))]
(assert (not (< 1 (tuple___len__ $Snap.unit _res@149@01))))
(pop) ; 14
(push) ; 14
; [else-branch: 126 | 1 < tuple___len__(_, _res@149@01)]
(assert (< 1 (tuple___len__ $Snap.unit _res@149@01)))
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 15
; [then-branch: 127 | False | dead]
; [else-branch: 127 | True | live]
(push) ; 16
; [else-branch: 127 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (< 1 (tuple___len__ $Snap.unit _res@149@01))
  (not (< 1 (tuple___len__ $Snap.unit _res@149@01)))))
(push) ; 13
(assert (not (< 1 (tuple___len__ $Snap.unit _res@149@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (< 1 (tuple___len__ $Snap.unit _res@149@01)))
(assert (tuple___getitem__%precondition $Snap.unit _res@149@01 1))
(pop) ; 12
; Joined path conditions
(assert (and
  (= (as letvar@156@01  Int) (tuple___len__ $Snap.unit _res@149@01))
  (or
    (< 1 (tuple___len__ $Snap.unit _res@149@01))
    (not (< 1 (tuple___len__ $Snap.unit _res@149@01))))
  (< 1 (tuple___len__ $Snap.unit _res@149@01))
  (tuple___getitem__%precondition $Snap.unit _res@149@01 1)))
(declare-const seat_0@157@01 $Ref)
(assert (= seat_0@157@01 (tuple___getitem__ $Snap.unit _res@149@01 1)))
; [exec]
; inhale _isDefined(53186532566387)
(declare-const $t@158@01 $Snap)
(assert (= $t@158@01 $Snap.unit))
; [eval] _isDefined(53186532566387)
(push) ; 12
(pop) ; 12
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_check_before := false
; [exec]
; assert _loop_termination_flag ==>
;   !(iter_err == null) ||
;   Measure$check(_loop_measures, _cthread_160, int___sub__(list___len__(_checkDefined(seats,
;   495873779059)), list___len__(_checkDefined(res, 7562610))))
; [eval] _loop_termination_flag ==> !(iter_err == null) || Measure$check(_loop_measures, _cthread_160, int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))))
(set-option :timeout 0)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 128 | True | live]
; [else-branch: 128 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 128 | True]
; [eval] !(iter_err == null) || Measure$check(_loop_measures, _cthread_160, int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))))
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 14
; [then-branch: 129 | _err@150@01 != Null | live]
; [else-branch: 129 | _err@150@01 == Null | live]
(push) ; 15
; [then-branch: 129 | _err@150@01 != Null]
(assert (not (= _err@150@01 $Ref.null)))
(pop) ; 15
(push) ; 15
; [else-branch: 129 | _err@150@01 == Null]
; [eval] Measure$check(_loop_measures, _cthread_160, int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))))
; [eval] int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610)))
; [eval] list___len__(_checkDefined(seats, 495873779059))
; [eval] _checkDefined(seats, 495873779059)
(push) ; 16
; [eval] _isDefined(id)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
; Joined path conditions
(push) ; 16
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@159@01 $Perm)
(assert ($Perm.isReadVar $k@159@01))
(push) ; 17
(set-option :timeout 10)
(assert (not (= _res@77@01 (_checkDefined $Snap.unit _res@65@01 495873779059))))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@71@01 7562610)
  (_checkDefined $Snap.unit _res@65@01 495873779059))))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No $k@159@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@159@01))
; [eval] list___len__(_checkDefined(res, 7562610))
; [eval] _checkDefined(res, 7562610)
(set-option :timeout 0)
(push) ; 16
; [eval] _isDefined(id)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
; Joined path conditions
(push) ; 16
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@160@01 $Perm)
(assert ($Perm.isReadVar $k@160@01))
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No $k@160@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@160@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
(set-option :timeout 0)
(push) ; 16
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(pop) ; 16
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(push) ; 16
(assert (Measure$check%precondition $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))
(pop) ; 16
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@159@01))
(assert ($Perm.isReadVar $k@160@01))
(assert (=>
  (= _err@150@01 $Ref.null)
  (and
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
    (Measure$check%precondition $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@159@01))
(assert ($Perm.isReadVar $k@160@01))
(assert (=>
  (= _err@150@01 $Ref.null)
  (and
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
    (Measure$check%precondition $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))))
(push) ; 12
(assert (not (or
  (not (= _err@150@01 $Ref.null))
  (Measure$check $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(assert (or
  (not (= _err@150@01 $Ref.null))
  (Measure$check $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))))
; Loop head block: Re-establish invariant
; [eval] iter.list_acc == iterable.list_acc
; [eval] seqtmp == iterable.list_acc
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (= _err@150@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 130 | _err@150@01 == Null | live]
; [else-branch: 130 | _err@150@01 != Null | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 130 | _err@150@01 == Null]
; [eval] iter.__iter_index - 1 == |iter.__previous|
; [eval] iter.__iter_index - 1
; [eval] |iter.__previous|
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=>
  (= _err@150@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@150@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))))))
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 12
; [then-branch: 131 | _err@150@01 != Null | dead]
; [else-branch: 131 | _err@150@01 == Null | live]
(push) ; 13
; [else-branch: 131 | _err@150@01 == Null]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (= _err@150@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 132 | _err@150@01 == Null | live]
; [else-branch: 132 | _err@150@01 != Null | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 132 | _err@150@01 == Null]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=>
  (= _err@150@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@150@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)))
; [eval] iter.__iter_index >= 0
(push) ; 12
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 12
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 133 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 133 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 133 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] iter.__iter_index > 0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 134 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 134 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 134 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 14
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (=
    _res@149@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (=
    _res@149@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 135 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 135 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 135 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
    _res@149@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
    _res@149@01)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (= _err@150@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 136 | _err@150@01 == Null | live]
; [else-branch: 136 | _err@150@01 != Null | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 136 | _err@150@01 == Null]
; [eval] iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), tuple(Seq(int(), int())))
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 137 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 137 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 137 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), tuple(Seq(int(), int())))
; [eval] typeof(loop_target)
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (=
  (Seq_length
    (Seq_append
      (Seq_singleton (as int<PyType>  PyType))
      (Seq_singleton (as int<PyType>  PyType))))
  2))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@149@01) (tuple<PyType> (Seq_append
    (Seq_singleton (as int<PyType>  PyType))
    (Seq_singleton (as int<PyType>  PyType))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@149@01) (tuple<PyType> (Seq_append
    (Seq_singleton (as int<PyType>  PyType))
    (Seq_singleton (as int<PyType>  PyType)))))))
; [eval] |iter.list_acc| > 0 ==> row_0 == tuple___getitem__(loop_target, 0) && _isDefined(207760093042)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 138 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 138 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 138 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] row_0 == tuple___getitem__(loop_target, 0) && _isDefined(207760093042)
; [eval] row_0 == tuple___getitem__(loop_target, 0)
; [eval] tuple___getitem__(loop_target, 0)
(push) ; 14
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 15
(pop) ; 15
; Joined path conditions
(declare-const letvar@161@01 Int)
(assert (= (as letvar@161@01  Int) (tuple___len__ $Snap.unit _res@149@01)))
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
; [then-branch: 139 | True | live]
; [else-branch: 139 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 139 | True]
; [eval] key < ln
(pop) ; 16
(pop) ; 15
; Joined path conditions
(push) ; 15
; [then-branch: 140 | !(0 < tuple___len__(_, _res@149@01)) | live]
; [else-branch: 140 | 0 < tuple___len__(_, _res@149@01) | live]
(push) ; 16
; [then-branch: 140 | !(0 < tuple___len__(_, _res@149@01))]
(assert (not (< 0 (tuple___len__ $Snap.unit _res@149@01))))
(pop) ; 16
(push) ; 16
; [else-branch: 140 | 0 < tuple___len__(_, _res@149@01)]
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 17
; [then-branch: 141 | False | dead]
; [else-branch: 141 | True | live]
(push) ; 18
; [else-branch: 141 | True]
(pop) ; 18
(pop) ; 17
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
; Joined path conditions
(assert (= (as letvar@161@01  Int) (tuple___len__ $Snap.unit _res@149@01)))
(push) ; 14
; [then-branch: 142 | row_0@154@01 != tuple___getitem__(_, _res@149@01, 0) | live]
; [else-branch: 142 | row_0@154@01 == tuple___getitem__(_, _res@149@01, 0) | live]
(push) ; 15
; [then-branch: 142 | row_0@154@01 != tuple___getitem__(_, _res@149@01, 0)]
(assert (not (= row_0@154@01 (tuple___getitem__ $Snap.unit _res@149@01 0))))
(pop) ; 15
(push) ; 15
; [else-branch: 142 | row_0@154@01 == tuple___getitem__(_, _res@149@01, 0)]
; [eval] _isDefined(207760093042)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (= row_0@154@01 (tuple___getitem__ $Snap.unit _res@149@01 0))
  (not (= row_0@154@01 (tuple___getitem__ $Snap.unit _res@149@01 0)))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= (as letvar@161@01  Int) (tuple___len__ $Snap.unit _res@149@01))
    (or
      (= row_0@154@01 (tuple___getitem__ $Snap.unit _res@149@01 0))
      (not (= row_0@154@01 (tuple___getitem__ $Snap.unit _res@149@01 0)))))))
(push) ; 12
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= row_0@154@01 (tuple___getitem__ $Snap.unit _res@149@01 0))
    (_isDefined $Snap.unit 207760093042)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= row_0@154@01 (tuple___getitem__ $Snap.unit _res@149@01 0))
    (_isDefined $Snap.unit 207760093042))))
; [eval] |iter.list_acc| > 0 ==> seat_0 == tuple___getitem__(loop_target, 1) && _isDefined(53186532566387)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 143 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 143 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 143 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] seat_0 == tuple___getitem__(loop_target, 1) && _isDefined(53186532566387)
; [eval] seat_0 == tuple___getitem__(loop_target, 1)
; [eval] tuple___getitem__(loop_target, 1)
(push) ; 14
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 15
(pop) ; 15
; Joined path conditions
(declare-const letvar@162@01 Int)
(assert (= (as letvar@162@01  Int) (tuple___len__ $Snap.unit _res@149@01)))
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
; [then-branch: 144 | True | live]
; [else-branch: 144 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 144 | True]
; [eval] key < ln
(pop) ; 16
(pop) ; 15
; Joined path conditions
(push) ; 15
; [then-branch: 145 | !(1 < tuple___len__(_, _res@149@01)) | live]
; [else-branch: 145 | 1 < tuple___len__(_, _res@149@01) | live]
(push) ; 16
; [then-branch: 145 | !(1 < tuple___len__(_, _res@149@01))]
(assert (not (< 1 (tuple___len__ $Snap.unit _res@149@01))))
(pop) ; 16
(push) ; 16
; [else-branch: 145 | 1 < tuple___len__(_, _res@149@01)]
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 17
; [then-branch: 146 | False | dead]
; [else-branch: 146 | True | live]
(push) ; 18
; [else-branch: 146 | True]
(pop) ; 18
(pop) ; 17
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
; Joined path conditions
(assert (= (as letvar@162@01  Int) (tuple___len__ $Snap.unit _res@149@01)))
(push) ; 14
; [then-branch: 147 | seat_0@157@01 != tuple___getitem__(_, _res@149@01, 1) | live]
; [else-branch: 147 | seat_0@157@01 == tuple___getitem__(_, _res@149@01, 1) | live]
(push) ; 15
; [then-branch: 147 | seat_0@157@01 != tuple___getitem__(_, _res@149@01, 1)]
(assert (not (= seat_0@157@01 (tuple___getitem__ $Snap.unit _res@149@01 1))))
(pop) ; 15
(push) ; 15
; [else-branch: 147 | seat_0@157@01 == tuple___getitem__(_, _res@149@01, 1)]
; [eval] _isDefined(53186532566387)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (= seat_0@157@01 (tuple___getitem__ $Snap.unit _res@149@01 1))
  (not (= seat_0@157@01 (tuple___getitem__ $Snap.unit _res@149@01 1)))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= (as letvar@162@01  Int) (tuple___len__ $Snap.unit _res@149@01))
    (or
      (= seat_0@157@01 (tuple___getitem__ $Snap.unit _res@149@01 1))
      (not (= seat_0@157@01 (tuple___getitem__ $Snap.unit _res@149@01 1)))))))
(push) ; 12
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= seat_0@157@01 (tuple___getitem__ $Snap.unit _res@149@01 1))
    (_isDefined $Snap.unit 53186532566387)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= seat_0@157@01 (tuple___getitem__ $Snap.unit _res@149@01 1))
    (_isDefined $Snap.unit 53186532566387))))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 12
; [then-branch: 148 | _err@150@01 != Null | dead]
; [else-branch: 148 | _err@150@01 == Null | live]
(push) ; 13
; [else-branch: 148 | _err@150@01 == Null]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 12
; [then-branch: 149 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| == 0 | dead]
; [else-branch: 149 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| != 0 | live]
(push) ; 13
; [else-branch: 149 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| != 0]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] _checkDefined(res, 7562610)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(res, 7562610))), __prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] __prim__int___box__(list___len__(_checkDefined(res, 7562610)))
; [eval] list___len__(_checkDefined(res, 7562610))
; [eval] _checkDefined(res, 7562610)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@163@01 $Perm)
(assert ($Perm.isReadVar $k@163@01))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@163@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@163@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
(set-option :timeout 0)
(push) ; 12
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(pop) ; 12
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(push) ; 12
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType)))
(push) ; 12
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))))
(pop) ; 12
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 12
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 12
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 12
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))))))
(pop) ; 12
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType)))))))
(push) ; 12
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))))))
(declare-const lambda46_30$t@164@01 $Ref)
(push) ; 12
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] issubtype(typeof(lambda46_30$t), Ticket())
; [eval] typeof(lambda46_30$t)
; [eval] Ticket()
(push) ; 13
; [then-branch: 150 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@164@01), Ticket[PyType])) | live]
; [else-branch: 150 | issubtype[Bool](typeof[PyType](lambda46_30$t@164@01), Ticket[PyType]) | live]
(push) ; 14
; [then-branch: 150 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@164@01), Ticket[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@164@01) (as Ticket<PyType>  PyType))))
(pop) ; 14
(push) ; 14
; [else-branch: 150 | issubtype[Bool](typeof[PyType](lambda46_30$t@164@01), Ticket[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda46_30$t@164@01) (as Ticket<PyType>  PyType)))
; [eval] (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] _checkDefined(res, 7562610)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@164@01) (as Ticket<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@164@01) (as Ticket<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@164@01) (as Ticket<PyType>  PyType))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@164@01)))
(pop) ; 12
(declare-fun inv@165@01 ($Ref) $Ref)
(declare-fun img@166@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda46_30$t@164@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@164@01) (as Ticket<PyType>  PyType))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
        lambda46_30$t@164@01))
    (or
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@164@01) (as Ticket<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@164@01) (as Ticket<PyType>  PyType)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@164@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@164@01))
  :qid |Ticket_state-aux|)))
; Check receiver injectivity
(push) ; 12
(assert (not (forall ((lambda46_30$t1@164@01 $Ref) (lambda46_30$t2@164@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t1@164@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t1@164@01))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t2@164@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t2@164@01))
      (= lambda46_30$t1@164@01 lambda46_30$t2@164@01))
    (= lambda46_30$t1@164@01 lambda46_30$t2@164@01))
  
  :qid |Ticket_state-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda46_30$t@164@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@164@01) (as Ticket<PyType>  PyType))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
        lambda46_30$t@164@01))
    (and
      (= (inv@165@01 lambda46_30$t@164@01) lambda46_30$t@164@01)
      (img@166@01 lambda46_30$t@164@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@164@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@164@01))
  :qid |Ticket_state-invOfFct|)))
(assert (forall ((self_1 $Ref)) (!
  (=>
    (and
      (img@166@01 self_1)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@165@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          (inv@165@01 self_1))))
    (= (inv@165@01 self_1) self_1))
  :pattern ((inv@165@01 self_1))
  :qid |Ticket_state-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@167@01 ((self_1 $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@165@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          (inv@165@01 self_1)))
      (img@166@01 self_1)
      (= self_1 (inv@165@01 self_1)))
    ($Perm.min
      (ite
        (and
          (img@107@01 self_1)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@106@01 self_1)) (as Ticket<PyType>  PyType))
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
              (inv@106@01 self_1))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@168@01 ((self_1 $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@165@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          (inv@165@01 self_1)))
      (img@166@01 self_1)
      (= self_1 (inv@165@01 self_1)))
    ($Perm.min
      (ite (= self_1 Ticket_res@131@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@167@01 self_1)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@107@01 self_1)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@106@01 self_1)) (as Ticket<PyType>  PyType))
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
              (inv@106@01 self_1))))
        $Perm.Write
        $Perm.No)
      (pTaken@167@01 self_1))
    $Perm.No)
  
  :qid |quant-u-2913|))))
(check-sat)
; unsat
(pop) ; 12
; 0.04s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@165@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          (inv@165@01 self_1)))
      (img@166@01 self_1)
      (= self_1 (inv@165@01 self_1)))
    (= (- $Perm.Write (pTaken@167@01 self_1)) $Perm.No))
  
  :qid |quant-u-2914|))))
(check-sat)
; unknown
(pop) ; 12
; 0.05s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@168@01 Ticket_res@131@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 12
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@165@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          (inv@165@01 self_1)))
      (img@166@01 self_1)
      (= self_1 (inv@165@01 self_1)))
    (=
      (- (- $Perm.Write (pTaken@167@01 self_1)) (pTaken@168@01 self_1))
      $Perm.No))
  
  :qid |quant-u-2916|))))
(check-sat)
; unsat
(pop) ; 12
; 0.05s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const lambda46_30$t@169@01 $Ref)
(set-option :timeout 0)
(push) ; 12
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null)
; [eval] issubtype(typeof(lambda46_30$t), Ticket())
; [eval] typeof(lambda46_30$t)
; [eval] Ticket()
(push) ; 13
; [then-branch: 151 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@169@01), Ticket[PyType])) | live]
; [else-branch: 151 | issubtype[Bool](typeof[PyType](lambda46_30$t@169@01), Ticket[PyType]) | live]
(push) ; 14
; [then-branch: 151 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@169@01), Ticket[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@169@01) (as Ticket<PyType>  PyType))))
(pop) ; 14
(push) ; 14
; [else-branch: 151 | issubtype[Bool](typeof[PyType](lambda46_30$t@169@01), Ticket[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda46_30$t@169@01) (as Ticket<PyType>  PyType)))
; [eval] (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] _checkDefined(res, 7562610)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [then-branch: 152 | !(lambda46_30$t@169@01 in First:(Second:(Second:(Second:($t@147@01))))) | live]
; [else-branch: 152 | lambda46_30$t@169@01 in First:(Second:(Second:(Second:($t@147@01)))) | live]
(push) ; 16
; [then-branch: 152 | !(lambda46_30$t@169@01 in First:(Second:(Second:(Second:($t@147@01)))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@169@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 152 | lambda46_30$t@169@01 in First:(Second:(Second:(Second:($t@147@01))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
  lambda46_30$t@169@01))
; [eval] code_1 != null
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@169@01)
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
      lambda46_30$t@169@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@169@01) (as Ticket<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@169@01) (as Ticket<PyType>  PyType))
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
        lambda46_30$t@169@01)
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t@169@01))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@169@01) (as Ticket<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@169@01) (as Ticket<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@169@01) (as Ticket<PyType>  PyType))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
      lambda46_30$t@169@01)
    (not (= code_0@34@01 $Ref.null)))))
(pop) ; 12
(declare-fun inv@170@01 ($Ref) $Ref)
(declare-fun img@171@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda46_30$t@169@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@169@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t@169@01)
        (not (= code_0@34@01 $Ref.null))))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@169@01) (as Ticket<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@169@01) (as Ticket<PyType>  PyType))
          (or
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
              lambda46_30$t@169@01)
            (not
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
                lambda46_30$t@169@01)))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@169@01) (as Ticket<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@169@01) (as Ticket<PyType>  PyType))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@169@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@169@01))
  :qid |Ticket_discount_code-aux|)))
; Check receiver injectivity
(push) ; 12
(assert (not (forall ((lambda46_30$t1@169@01 $Ref) (lambda46_30$t2@169@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t1@169@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            lambda46_30$t1@169@01)
          (not (= code_0@34@01 $Ref.null))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t2@169@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            lambda46_30$t2@169@01)
          (not (= code_0@34@01 $Ref.null))))
      (= lambda46_30$t1@169@01 lambda46_30$t2@169@01))
    (= lambda46_30$t1@169@01 lambda46_30$t2@169@01))
  
  :qid |Ticket_discount_code-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda46_30$t@169@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@169@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t@169@01)
        (not (= code_0@34@01 $Ref.null))))
    (and
      (= (inv@170@01 lambda46_30$t@169@01) lambda46_30$t@169@01)
      (img@171@01 lambda46_30$t@169@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@169@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@169@01))
  :qid |Ticket_discount_code-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@171@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@170@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            (inv@170@01 r))
          (not (= code_0@34@01 $Ref.null)))))
    (= (inv@170@01 r) r))
  :pattern ((inv@170@01 r))
  :qid |Ticket_discount_code-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@172@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@170@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            (inv@170@01 r))
          (not (= code_0@34@01 $Ref.null))))
      (img@171@01 r)
      (= r (inv@170@01 r)))
    ($Perm.min
      (ite
        (and
          (img@110@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
            (and
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
                (inv@109@01 r))
              (not (= code_0@34@01 $Ref.null)))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@173@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@170@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            (inv@170@01 r))
          (not (= code_0@34@01 $Ref.null))))
      (img@171@01 r)
      (= r (inv@170@01 r)))
    ($Perm.min
      (ite
        (= r (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@172@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@110@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
            (and
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
                (inv@109@01 r))
              (not (= code_0@34@01 $Ref.null)))))
        $Perm.Write
        $Perm.No)
      (pTaken@172@01 r))
    $Perm.No)
  
  :qid |quant-u-2919|))))
(check-sat)
; unsat
(pop) ; 12
; 0.05s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@170@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            (inv@170@01 r))
          (not (= code_0@34@01 $Ref.null))))
      (img@171@01 r)
      (= r (inv@170@01 r)))
    (= (- $Perm.Write (pTaken@172@01 r)) $Perm.No))
  
  :qid |quant-u-2920|))))
(check-sat)
; unknown
(pop) ; 12
; 0.05s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)
        (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
      $Perm.Write
      $Perm.No)
    (pTaken@173@01 (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@170@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            (inv@170@01 r))
          (not (= code_0@34@01 $Ref.null))))
      (img@171@01 r)
      (= r (inv@170@01 r)))
    (= (- (- $Perm.Write (pTaken@172@01 r)) (pTaken@173@01 r)) $Perm.No))
  
  :qid |quant-u-2922|))))
(check-sat)
; unsat
(pop) ; 12
; 0.05s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forall lambda46_30$t: Ref :: { (lambda46_30$t in _checkDefined(res, 7562610).list_acc) } issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null) ==> issubtype(typeof(lambda46_30$t.Ticket_discount_code), str()))
(declare-const lambda46_30$t@174@01 $Ref)
(set-option :timeout 0)
(push) ; 12
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null) ==> issubtype(typeof(lambda46_30$t.Ticket_discount_code), str())
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null)
; [eval] issubtype(typeof(lambda46_30$t), Ticket())
; [eval] typeof(lambda46_30$t)
; [eval] Ticket()
(push) ; 13
; [then-branch: 153 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@174@01), Ticket[PyType])) | live]
; [else-branch: 153 | issubtype[Bool](typeof[PyType](lambda46_30$t@174@01), Ticket[PyType]) | live]
(push) ; 14
; [then-branch: 153 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@174@01), Ticket[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))))
(pop) ; 14
(push) ; 14
; [else-branch: 153 | issubtype[Bool](typeof[PyType](lambda46_30$t@174@01), Ticket[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType)))
; [eval] (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] _checkDefined(res, 7562610)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [then-branch: 154 | !(lambda46_30$t@174@01 in First:(Second:(Second:(Second:($t@147@01))))) | live]
; [else-branch: 154 | lambda46_30$t@174@01 in First:(Second:(Second:(Second:($t@147@01)))) | live]
(push) ; 16
; [then-branch: 154 | !(lambda46_30$t@174@01 in First:(Second:(Second:(Second:($t@147@01)))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@174@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 154 | lambda46_30$t@174@01 in First:(Second:(Second:(Second:($t@147@01))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
  lambda46_30$t@174@01))
; [eval] code_1 != null
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@174@01)
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
      lambda46_30$t@174@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
        lambda46_30$t@174@01)
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t@174@01))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType)))))
(push) ; 13
; [then-branch: 155 | issubtype[Bool](typeof[PyType](lambda46_30$t@174@01), Ticket[PyType]) && lambda46_30$t@174@01 in First:(Second:(Second:(Second:($t@147@01)))) && code_0@34@01 != Null | live]
; [else-branch: 155 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@174@01), Ticket[PyType]) && lambda46_30$t@174@01 in First:(Second:(Second:(Second:($t@147@01)))) && code_0@34@01 != Null) | live]
(push) ; 14
; [then-branch: 155 | issubtype[Bool](typeof[PyType](lambda46_30$t@174@01), Ticket[PyType]) && lambda46_30$t@174@01 in First:(Second:(Second:(Second:($t@147@01)))) && code_0@34@01 != Null]
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
      lambda46_30$t@174@01)
    (not (= code_0@34@01 $Ref.null)))))
; [eval] issubtype(typeof(lambda46_30$t.Ticket_discount_code), str())
; [eval] typeof(lambda46_30$t.Ticket_discount_code)
(declare-const sm@175@01 $FVF<Ticket_discount_code>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
    (=
      ($FVF.lookup_Ticket_discount_code (as sm@175@01  $FVF<Ticket_discount_code>) r)
      ($FVF.lookup_Ticket_discount_code (as sm@145@01  $FVF<Ticket_discount_code>) r)))
  :pattern (($FVF.lookup_Ticket_discount_code (as sm@175@01  $FVF<Ticket_discount_code>) r))
  :pattern (($FVF.lookup_Ticket_discount_code (as sm@145@01  $FVF<Ticket_discount_code>) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@110@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            (inv@109@01 r))
          (not (= code_0@34@01 $Ref.null)))))
    (=
      ($FVF.lookup_Ticket_discount_code (as sm@175@01  $FVF<Ticket_discount_code>) r)
      ($FVF.lookup_Ticket_discount_code ($SortWrappers.$SnapTo$FVF<Ticket_discount_code> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Ticket_discount_code (as sm@175@01  $FVF<Ticket_discount_code>) r))
  :pattern (($FVF.lookup_Ticket_discount_code ($SortWrappers.$SnapTo$FVF<Ticket_discount_code> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef2|)))
(declare-const pm@176@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Ticket_discount_code (as pm@176@01  $FPM) r)
    (+
      (ite
        (= r (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
        $Perm.Write
        $Perm.No)
      (ite
        (and
          (img@110@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
            (and
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
                (inv@109@01 r))
              (not (= code_0@34@01 $Ref.null)))))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Ticket_discount_code (as pm@176@01  $FPM) r))
  :qid |qp.resPrmSumDef3|)))
(push) ; 15
(assert (not (<
  $Perm.No
  ($FVF.perm_Ticket_discount_code (as pm@176@01  $FPM) lambda46_30$t@174@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.04s
; (get-info :all-statistics)
; [eval] str()
(pop) ; 14
(push) ; 14
; [else-branch: 155 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@174@01), Ticket[PyType]) && lambda46_30$t@174@01 in First:(Second:(Second:(Second:($t@147@01)))) && code_0@34@01 != Null)]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
        lambda46_30$t@174@01)
      (not (= code_0@34@01 $Ref.null))))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
    (=
      ($FVF.lookup_Ticket_discount_code (as sm@175@01  $FVF<Ticket_discount_code>) r)
      ($FVF.lookup_Ticket_discount_code (as sm@145@01  $FVF<Ticket_discount_code>) r)))
  :pattern (($FVF.lookup_Ticket_discount_code (as sm@175@01  $FVF<Ticket_discount_code>) r))
  :pattern (($FVF.lookup_Ticket_discount_code (as sm@145@01  $FVF<Ticket_discount_code>) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@110@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            (inv@109@01 r))
          (not (= code_0@34@01 $Ref.null)))))
    (=
      ($FVF.lookup_Ticket_discount_code (as sm@175@01  $FVF<Ticket_discount_code>) r)
      ($FVF.lookup_Ticket_discount_code ($SortWrappers.$SnapTo$FVF<Ticket_discount_code> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Ticket_discount_code (as sm@175@01  $FVF<Ticket_discount_code>) r))
  :pattern (($FVF.lookup_Ticket_discount_code ($SortWrappers.$SnapTo$FVF<Ticket_discount_code> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Ticket_discount_code (as pm@176@01  $FPM) r)
    (+
      (ite
        (= r (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
        $Perm.Write
        $Perm.No)
      (ite
        (and
          (img@110@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
            (and
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
                (inv@109@01 r))
              (not (= code_0@34@01 $Ref.null)))))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Ticket_discount_code (as pm@176@01  $FPM) r))
  :qid |qp.resPrmSumDef3|)))
(assert (=>
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
        lambda46_30$t@174@01)
      (not (= code_0@34@01 $Ref.null))))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
      lambda46_30$t@174@01)
    (not (= code_0@34@01 $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t@174@01)
        (not (= code_0@34@01 $Ref.null)))))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
        lambda46_30$t@174@01)
      (not (= code_0@34@01 $Ref.null))))))
(pop) ; 12
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
    (=
      ($FVF.lookup_Ticket_discount_code (as sm@175@01  $FVF<Ticket_discount_code>) r)
      ($FVF.lookup_Ticket_discount_code (as sm@145@01  $FVF<Ticket_discount_code>) r)))
  :pattern (($FVF.lookup_Ticket_discount_code (as sm@175@01  $FVF<Ticket_discount_code>) r))
  :pattern (($FVF.lookup_Ticket_discount_code (as sm@145@01  $FVF<Ticket_discount_code>) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@110@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            (inv@109@01 r))
          (not (= code_0@34@01 $Ref.null)))))
    (=
      ($FVF.lookup_Ticket_discount_code (as sm@175@01  $FVF<Ticket_discount_code>) r)
      ($FVF.lookup_Ticket_discount_code ($SortWrappers.$SnapTo$FVF<Ticket_discount_code> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Ticket_discount_code (as sm@175@01  $FVF<Ticket_discount_code>) r))
  :pattern (($FVF.lookup_Ticket_discount_code ($SortWrappers.$SnapTo$FVF<Ticket_discount_code> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Ticket_discount_code (as pm@176@01  $FPM) r)
    (+
      (ite
        (= r (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
        $Perm.Write
        $Perm.No)
      (ite
        (and
          (img@110@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
            (and
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
                (inv@109@01 r))
              (not (= code_0@34@01 $Ref.null)))))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Ticket_discount_code (as pm@176@01  $FPM) r))
  :qid |qp.resPrmSumDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda46_30$t@174@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
        (or
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            lambda46_30$t@174@01)
          (not
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
              lambda46_30$t@174@01)))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            lambda46_30$t@174@01)
          (not (= code_0@34@01 $Ref.null))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t@174@01)
        (not (= code_0@34@01 $Ref.null))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
              lambda46_30$t@174@01)
            (not (= code_0@34@01 $Ref.null)))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            lambda46_30$t@174@01)
          (not (= code_0@34@01 $Ref.null))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@174@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@174@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802-aux|)))
(assert (forall ((lambda46_30$t@174@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
        (or
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            lambda46_30$t@174@01)
          (not
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
              lambda46_30$t@174@01)))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            lambda46_30$t@174@01)
          (not (= code_0@34@01 $Ref.null))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t@174@01)
        (not (= code_0@34@01 $Ref.null))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
              lambda46_30$t@174@01)
            (not (= code_0@34@01 $Ref.null)))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            lambda46_30$t@174@01)
          (not (= code_0@34@01 $Ref.null))))))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@174@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802-aux|)))
(push) ; 12
(assert (not (forall ((lambda46_30$t@174@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t@174@01)
        (not (= code_0@34@01 $Ref.null))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Ticket_discount_code (as sm@175@01  $FVF<Ticket_discount_code>) lambda46_30$t@174@01)) (as str<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@174@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@174@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@174@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802|))))
(check-sat)
; unsat
(pop) ; 12
; 0.04s
; (get-info :all-statistics)
(assert (forall ((lambda46_30$t@174@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@174@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t@174@01)
        (not (= code_0@34@01 $Ref.null))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Ticket_discount_code (as sm@175@01  $FVF<Ticket_discount_code>) lambda46_30$t@174@01)) (as str<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@174@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@174@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802|)))
; [eval] iter_err == null ==> int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))) > 0
; [eval] iter_err == null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (= _err@150@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 156 | _err@150@01 == Null | live]
; [else-branch: 156 | _err@150@01 != Null | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 156 | _err@150@01 == Null]
; [eval] int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))) > 0
; [eval] int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610)))
; [eval] list___len__(_checkDefined(seats, 495873779059))
; [eval] _checkDefined(seats, 495873779059)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@177@01 $Perm)
(assert ($Perm.isReadVar $k@177@01))
(push) ; 15
(set-option :timeout 10)
(assert (not (= _res@77@01 (_checkDefined $Snap.unit _res@65@01 495873779059))))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@71@01 7562610)
  (_checkDefined $Snap.unit _res@65@01 495873779059))))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@177@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@177@01))
; [eval] list___len__(_checkDefined(res, 7562610))
; [eval] _checkDefined(res, 7562610)
(set-option :timeout 0)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@178@01 $Perm)
(assert ($Perm.isReadVar $k@178@01))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@178@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@178@01))
(set-option :timeout 0)
(push) ; 14
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(pop) ; 14
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@177@01))
(assert ($Perm.isReadVar $k@178@01))
(assert (=>
  (= _err@150@01 $Ref.null)
  (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))
(push) ; 12
(assert (not (=>
  (= _err@150@01 $Ref.null)
  (>
    (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
    0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@150@01 $Ref.null)
  (>
    (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
    0)))
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))))
(push) ; 12
; [then-branch: 157 | False | dead]
; [else-branch: 157 | True | live]
(push) ; 13
; [else-branch: 157 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 158 | True | live]
; [else-branch: 158 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 158 | True]
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
(push) ; 14
; [then-branch: 159 | False | live]
; [else-branch: 159 | True | live]
(push) ; 15
; [then-branch: 159 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 159 | True]
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
(push) ; 16
; [then-branch: 160 | False | live]
; [else-branch: 160 | True | live]
(push) ; 17
; [then-branch: 160 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 160 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
(push) ; 18
; [then-branch: 161 | False | live]
; [else-branch: 161 | True | live]
(push) ; 19
; [then-branch: 161 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 161 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 121 | _err@150@01 != Null]
(assert (not (= _err@150@01 $Ref.null)))
(pop) ; 11
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 11
(set-option :timeout 10)
(assert (not (= _err@150@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= _err@150@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 162 | _err@150@01 != Null | live]
; [else-branch: 162 | _err@150@01 == Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 162 | _err@150@01 != Null]
(assert (not (= _err@150@01 $Ref.null)))
; [exec]
; _loop_check_before := false
; [exec]
; assert _loop_termination_flag ==>
;   !(iter_err == null) ||
;   Measure$check(_loop_measures, _cthread_160, int___sub__(list___len__(_checkDefined(seats,
;   495873779059)), list___len__(_checkDefined(res, 7562610))))
; [eval] _loop_termination_flag ==> !(iter_err == null) || Measure$check(_loop_measures, _cthread_160, int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))))
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 163 | True | live]
; [else-branch: 163 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 163 | True]
; [eval] !(iter_err == null) || Measure$check(_loop_measures, _cthread_160, int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))))
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 14
; [then-branch: 164 | _err@150@01 != Null | live]
; [else-branch: 164 | _err@150@01 == Null | live]
(push) ; 15
; [then-branch: 164 | _err@150@01 != Null]
(pop) ; 15
(push) ; 15
; [else-branch: 164 | _err@150@01 == Null]
(assert (= _err@150@01 $Ref.null))
; [eval] Measure$check(_loop_measures, _cthread_160, int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))))
; [eval] int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610)))
; [eval] list___len__(_checkDefined(seats, 495873779059))
; [eval] _checkDefined(seats, 495873779059)
(push) ; 16
; [eval] _isDefined(id)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
; Joined path conditions
(push) ; 16
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@179@01 $Perm)
(assert ($Perm.isReadVar $k@179@01))
(push) ; 17
(set-option :timeout 10)
(assert (not (= _res@77@01 (_checkDefined $Snap.unit _res@65@01 495873779059))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No $k@179@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)))
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@179@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)))
; [eval] list___len__(_checkDefined(res, 7562610))
; [eval] _checkDefined(res, 7562610)
(set-option :timeout 0)
(push) ; 16
; [eval] _isDefined(id)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
; Joined path conditions
(push) ; 16
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@180@01 $Perm)
(assert ($Perm.isReadVar $k@180@01))
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No $k@180@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@180@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
(set-option :timeout 0)
(push) ; 16
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(pop) ; 16
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(push) ; 16
(assert (Measure$check%precondition $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))
(pop) ; 16
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@179@01))
(assert ($Perm.isReadVar $k@180@01))
(assert (=>
  (= _err@150@01 $Ref.null)
  (and
    (= _err@150@01 $Ref.null)
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
    (Measure$check%precondition $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@179@01))
(assert ($Perm.isReadVar $k@180@01))
(assert (=>
  (= _err@150@01 $Ref.null)
  (and
    (= _err@150@01 $Ref.null)
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
    (Measure$check%precondition $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))))
(push) ; 12
(assert (not (or
  (not (= _err@150@01 $Ref.null))
  (Measure$check $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (or
  (not (= _err@150@01 $Ref.null))
  (Measure$check $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))))
; Loop head block: Re-establish invariant
; [eval] iter.list_acc == iterable.list_acc
; [eval] seqtmp == iterable.list_acc
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(push) ; 12
; [then-branch: 165 | _err@150@01 == Null | dead]
; [else-branch: 165 | _err@150@01 != Null | live]
(push) ; 13
; [else-branch: 165 | _err@150@01 != Null]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (= _err@150@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 166 | _err@150@01 != Null | live]
; [else-branch: 166 | _err@150@01 == Null | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 166 | _err@150@01 != Null]
; [eval] iter.__iter_index == |iter.__previous|
; [eval] |iter.__previous|
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=>
  (not (= _err@150@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= _err@150@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))))))
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 12
; [then-branch: 167 | _err@150@01 == Null | dead]
; [else-branch: 167 | _err@150@01 != Null | live]
(push) ; 13
; [else-branch: 167 | _err@150@01 != Null]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] iter.__iter_index >= 0
(push) ; 12
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 12
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 168 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 168 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 168 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] iter.__iter_index > 0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 169 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 169 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 169 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 14
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (=
    _res@149@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (=
    _res@149@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 170 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 170 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 170 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
    _res@149@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
    _res@149@01)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 12
; [then-branch: 171 | _err@150@01 == Null | dead]
; [else-branch: 171 | _err@150@01 != Null | live]
(push) ; 13
; [else-branch: 171 | _err@150@01 != Null]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), tuple(Seq(int(), int())))
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 172 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 172 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 172 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), tuple(Seq(int(), int())))
; [eval] typeof(loop_target)
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (=
  (Seq_length
    (Seq_append
      (Seq_singleton (as int<PyType>  PyType))
      (Seq_singleton (as int<PyType>  PyType))))
  2))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@149@01) (tuple<PyType> (Seq_append
    (Seq_singleton (as int<PyType>  PyType))
    (Seq_singleton (as int<PyType>  PyType))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@149@01) (tuple<PyType> (Seq_append
    (Seq_singleton (as int<PyType>  PyType))
    (Seq_singleton (as int<PyType>  PyType)))))))
; [eval] |iter.list_acc| > 0 ==> row_0 == tuple___getitem__(loop_target, 0) && _isDefined(207760093042)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 173 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 173 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 173 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] row_0 == tuple___getitem__(loop_target, 0) && _isDefined(207760093042)
; [eval] row_0 == tuple___getitem__(loop_target, 0)
; [eval] tuple___getitem__(loop_target, 0)
(push) ; 14
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 15
(assert (tuple___len__%precondition $Snap.unit _res@149@01))
(pop) ; 15
; Joined path conditions
(assert (tuple___len__%precondition $Snap.unit _res@149@01))
(declare-const letvar@181@01 Int)
(assert (= (as letvar@181@01  Int) (tuple___len__ $Snap.unit _res@149@01)))
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
; [then-branch: 174 | True | live]
; [else-branch: 174 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 174 | True]
; [eval] key < ln
(pop) ; 16
(pop) ; 15
; Joined path conditions
(push) ; 15
; [then-branch: 175 | !(0 < tuple___len__(_, _res@149@01)) | live]
; [else-branch: 175 | 0 < tuple___len__(_, _res@149@01) | live]
(push) ; 16
; [then-branch: 175 | !(0 < tuple___len__(_, _res@149@01))]
(assert (not (< 0 (tuple___len__ $Snap.unit _res@149@01))))
(pop) ; 16
(push) ; 16
; [else-branch: 175 | 0 < tuple___len__(_, _res@149@01)]
(assert (< 0 (tuple___len__ $Snap.unit _res@149@01)))
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 17
; [then-branch: 176 | False | dead]
; [else-branch: 176 | True | live]
(push) ; 18
; [else-branch: 176 | True]
(pop) ; 18
(pop) ; 17
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (< 0 (tuple___len__ $Snap.unit _res@149@01))
  (not (< 0 (tuple___len__ $Snap.unit _res@149@01)))))
(push) ; 15
(assert (not (< 0 (tuple___len__ $Snap.unit _res@149@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (< 0 (tuple___len__ $Snap.unit _res@149@01)))
(assert (tuple___getitem__%precondition $Snap.unit _res@149@01 0))
(pop) ; 14
; Joined path conditions
(assert (and
  (tuple___len__%precondition $Snap.unit _res@149@01)
  (= (as letvar@181@01  Int) (tuple___len__ $Snap.unit _res@149@01))
  (or
    (< 0 (tuple___len__ $Snap.unit _res@149@01))
    (not (< 0 (tuple___len__ $Snap.unit _res@149@01))))
  (< 0 (tuple___len__ $Snap.unit _res@149@01))
  (tuple___getitem__%precondition $Snap.unit _res@149@01 0)))
(push) ; 14
; [then-branch: 177 | row_0@98@01 != tuple___getitem__(_, _res@149@01, 0) | live]
; [else-branch: 177 | row_0@98@01 == tuple___getitem__(_, _res@149@01, 0) | live]
(push) ; 15
; [then-branch: 177 | row_0@98@01 != tuple___getitem__(_, _res@149@01, 0)]
(assert (not (= row_0@98@01 (tuple___getitem__ $Snap.unit _res@149@01 0))))
(pop) ; 15
(push) ; 15
; [else-branch: 177 | row_0@98@01 == tuple___getitem__(_, _res@149@01, 0)]
(assert (= row_0@98@01 (tuple___getitem__ $Snap.unit _res@149@01 0)))
; [eval] _isDefined(207760093042)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (= row_0@98@01 (tuple___getitem__ $Snap.unit _res@149@01 0))
  (not (= row_0@98@01 (tuple___getitem__ $Snap.unit _res@149@01 0)))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (tuple___len__%precondition $Snap.unit _res@149@01)
    (= (as letvar@181@01  Int) (tuple___len__ $Snap.unit _res@149@01))
    (or
      (< 0 (tuple___len__ $Snap.unit _res@149@01))
      (not (< 0 (tuple___len__ $Snap.unit _res@149@01))))
    (< 0 (tuple___len__ $Snap.unit _res@149@01))
    (tuple___getitem__%precondition $Snap.unit _res@149@01 0)
    (or
      (= row_0@98@01 (tuple___getitem__ $Snap.unit _res@149@01 0))
      (not (= row_0@98@01 (tuple___getitem__ $Snap.unit _res@149@01 0)))))))
(push) ; 12
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= row_0@98@01 (tuple___getitem__ $Snap.unit _res@149@01 0))
    (_isDefined $Snap.unit 207760093042)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= row_0@98@01 (tuple___getitem__ $Snap.unit _res@149@01 0))
    (_isDefined $Snap.unit 207760093042))))
; [eval] |iter.list_acc| > 0 ==> seat_0 == tuple___getitem__(loop_target, 1) && _isDefined(53186532566387)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 178 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 178 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 178 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] seat_0 == tuple___getitem__(loop_target, 1) && _isDefined(53186532566387)
; [eval] seat_0 == tuple___getitem__(loop_target, 1)
; [eval] tuple___getitem__(loop_target, 1)
(push) ; 14
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 15
(assert (tuple___len__%precondition $Snap.unit _res@149@01))
(pop) ; 15
; Joined path conditions
(assert (tuple___len__%precondition $Snap.unit _res@149@01))
(declare-const letvar@182@01 Int)
(assert (= (as letvar@182@01  Int) (tuple___len__ $Snap.unit _res@149@01)))
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
; [then-branch: 179 | True | live]
; [else-branch: 179 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 179 | True]
; [eval] key < ln
(pop) ; 16
(pop) ; 15
; Joined path conditions
(push) ; 15
; [then-branch: 180 | !(1 < tuple___len__(_, _res@149@01)) | live]
; [else-branch: 180 | 1 < tuple___len__(_, _res@149@01) | live]
(push) ; 16
; [then-branch: 180 | !(1 < tuple___len__(_, _res@149@01))]
(assert (not (< 1 (tuple___len__ $Snap.unit _res@149@01))))
(pop) ; 16
(push) ; 16
; [else-branch: 180 | 1 < tuple___len__(_, _res@149@01)]
(assert (< 1 (tuple___len__ $Snap.unit _res@149@01)))
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 17
; [then-branch: 181 | False | dead]
; [else-branch: 181 | True | live]
(push) ; 18
; [else-branch: 181 | True]
(pop) ; 18
(pop) ; 17
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (< 1 (tuple___len__ $Snap.unit _res@149@01))
  (not (< 1 (tuple___len__ $Snap.unit _res@149@01)))))
(push) ; 15
(assert (not (< 1 (tuple___len__ $Snap.unit _res@149@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (< 1 (tuple___len__ $Snap.unit _res@149@01)))
(assert (tuple___getitem__%precondition $Snap.unit _res@149@01 1))
(pop) ; 14
; Joined path conditions
(assert (and
  (tuple___len__%precondition $Snap.unit _res@149@01)
  (= (as letvar@182@01  Int) (tuple___len__ $Snap.unit _res@149@01))
  (or
    (< 1 (tuple___len__ $Snap.unit _res@149@01))
    (not (< 1 (tuple___len__ $Snap.unit _res@149@01))))
  (< 1 (tuple___len__ $Snap.unit _res@149@01))
  (tuple___getitem__%precondition $Snap.unit _res@149@01 1)))
(push) ; 14
; [then-branch: 182 | seat_0@99@01 != tuple___getitem__(_, _res@149@01, 1) | live]
; [else-branch: 182 | seat_0@99@01 == tuple___getitem__(_, _res@149@01, 1) | live]
(push) ; 15
; [then-branch: 182 | seat_0@99@01 != tuple___getitem__(_, _res@149@01, 1)]
(assert (not (= seat_0@99@01 (tuple___getitem__ $Snap.unit _res@149@01 1))))
(pop) ; 15
(push) ; 15
; [else-branch: 182 | seat_0@99@01 == tuple___getitem__(_, _res@149@01, 1)]
(assert (= seat_0@99@01 (tuple___getitem__ $Snap.unit _res@149@01 1)))
; [eval] _isDefined(53186532566387)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (= seat_0@99@01 (tuple___getitem__ $Snap.unit _res@149@01 1))
  (not (= seat_0@99@01 (tuple___getitem__ $Snap.unit _res@149@01 1)))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (tuple___len__%precondition $Snap.unit _res@149@01)
    (= (as letvar@182@01  Int) (tuple___len__ $Snap.unit _res@149@01))
    (or
      (< 1 (tuple___len__ $Snap.unit _res@149@01))
      (not (< 1 (tuple___len__ $Snap.unit _res@149@01))))
    (< 1 (tuple___len__ $Snap.unit _res@149@01))
    (tuple___getitem__%precondition $Snap.unit _res@149@01 1)
    (or
      (= seat_0@99@01 (tuple___getitem__ $Snap.unit _res@149@01 1))
      (not (= seat_0@99@01 (tuple___getitem__ $Snap.unit _res@149@01 1)))))))
(push) ; 12
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= seat_0@99@01 (tuple___getitem__ $Snap.unit _res@149@01 1))
    (_isDefined $Snap.unit 53186532566387)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= seat_0@99@01 (tuple___getitem__ $Snap.unit _res@149@01 1))
    (_isDefined $Snap.unit 53186532566387))))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (= _err@150@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 183 | _err@150@01 != Null | live]
; [else-branch: 183 | _err@150@01 == Null | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 183 | _err@150@01 != Null]
; [eval] iter.__previous == iter.list_acc
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 12
; [then-branch: 184 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| == 0 | dead]
; [else-branch: 184 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| != 0 | live]
(push) ; 13
; [else-branch: 184 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| != 0]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] _checkDefined(res, 7562610)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(res, 7562610))), __prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] __prim__int___box__(list___len__(_checkDefined(res, 7562610)))
; [eval] list___len__(_checkDefined(res, 7562610))
; [eval] _checkDefined(res, 7562610)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@183@01 $Perm)
(assert ($Perm.isReadVar $k@183@01))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@183@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@183@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
(set-option :timeout 0)
(push) ; 12
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(pop) ; 12
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(push) ; 12
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType)))
(push) ; 12
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))))
(pop) ; 12
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 12
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 12
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 12
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))))))
(pop) ; 12
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType)))))))
(push) ; 12
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))) (as int<PyType>  PyType))))))
(declare-const lambda46_30$t@184@01 $Ref)
(push) ; 12
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] issubtype(typeof(lambda46_30$t), Ticket())
; [eval] typeof(lambda46_30$t)
; [eval] Ticket()
(push) ; 13
; [then-branch: 185 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@184@01), Ticket[PyType])) | live]
; [else-branch: 185 | issubtype[Bool](typeof[PyType](lambda46_30$t@184@01), Ticket[PyType]) | live]
(push) ; 14
; [then-branch: 185 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@184@01), Ticket[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@184@01) (as Ticket<PyType>  PyType))))
(pop) ; 14
(push) ; 14
; [else-branch: 185 | issubtype[Bool](typeof[PyType](lambda46_30$t@184@01), Ticket[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda46_30$t@184@01) (as Ticket<PyType>  PyType)))
; [eval] (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] _checkDefined(res, 7562610)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@184@01) (as Ticket<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@184@01) (as Ticket<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@184@01) (as Ticket<PyType>  PyType))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@184@01)))
(pop) ; 12
(declare-fun inv@185@01 ($Ref) $Ref)
(declare-fun img@186@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda46_30$t@184@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@184@01) (as Ticket<PyType>  PyType))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
        lambda46_30$t@184@01))
    (or
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@184@01) (as Ticket<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@184@01) (as Ticket<PyType>  PyType)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@184@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@184@01))
  :qid |Ticket_state-aux|)))
; Check receiver injectivity
(push) ; 12
(assert (not (forall ((lambda46_30$t1@184@01 $Ref) (lambda46_30$t2@184@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t1@184@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t1@184@01))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t2@184@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t2@184@01))
      (= lambda46_30$t1@184@01 lambda46_30$t2@184@01))
    (= lambda46_30$t1@184@01 lambda46_30$t2@184@01))
  
  :qid |Ticket_state-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda46_30$t@184@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@184@01) (as Ticket<PyType>  PyType))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
        lambda46_30$t@184@01))
    (and
      (= (inv@185@01 lambda46_30$t@184@01) lambda46_30$t@184@01)
      (img@186@01 lambda46_30$t@184@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@184@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@184@01))
  :qid |Ticket_state-invOfFct|)))
(assert (forall ((self_1 $Ref)) (!
  (=>
    (and
      (img@186@01 self_1)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@185@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          (inv@185@01 self_1))))
    (= (inv@185@01 self_1) self_1))
  :pattern ((inv@185@01 self_1))
  :qid |Ticket_state-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@187@01 ((self_1 $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@185@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          (inv@185@01 self_1)))
      (img@186@01 self_1)
      (= self_1 (inv@185@01 self_1)))
    ($Perm.min
      (ite
        (and
          (img@107@01 self_1)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@106@01 self_1)) (as Ticket<PyType>  PyType))
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
              (inv@106@01 self_1))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@188@01 ((self_1 $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@185@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          (inv@185@01 self_1)))
      (img@186@01 self_1)
      (= self_1 (inv@185@01 self_1)))
    ($Perm.min
      (ite (= self_1 Ticket_res@131@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@187@01 self_1)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@107@01 self_1)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@106@01 self_1)) (as Ticket<PyType>  PyType))
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
              (inv@106@01 self_1))))
        $Perm.Write
        $Perm.No)
      (pTaken@187@01 self_1))
    $Perm.No)
  
  :qid |quant-u-2925|))))
(check-sat)
; unsat
(pop) ; 12
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@185@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          (inv@185@01 self_1)))
      (img@186@01 self_1)
      (= self_1 (inv@185@01 self_1)))
    (= (- $Perm.Write (pTaken@187@01 self_1)) $Perm.No))
  
  :qid |quant-u-2926|))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@188@01 Ticket_res@131@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@185@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          (inv@185@01 self_1)))
      (img@186@01 self_1)
      (= self_1 (inv@185@01 self_1)))
    (=
      (- (- $Perm.Write (pTaken@187@01 self_1)) (pTaken@188@01 self_1))
      $Perm.No))
  
  :qid |quant-u-2928|))))
(check-sat)
; unsat
(pop) ; 12
; 0.03s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const lambda46_30$t@189@01 $Ref)
(set-option :timeout 0)
(push) ; 12
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null)
; [eval] issubtype(typeof(lambda46_30$t), Ticket())
; [eval] typeof(lambda46_30$t)
; [eval] Ticket()
(push) ; 13
; [then-branch: 186 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@189@01), Ticket[PyType])) | live]
; [else-branch: 186 | issubtype[Bool](typeof[PyType](lambda46_30$t@189@01), Ticket[PyType]) | live]
(push) ; 14
; [then-branch: 186 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@189@01), Ticket[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@189@01) (as Ticket<PyType>  PyType))))
(pop) ; 14
(push) ; 14
; [else-branch: 186 | issubtype[Bool](typeof[PyType](lambda46_30$t@189@01), Ticket[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda46_30$t@189@01) (as Ticket<PyType>  PyType)))
; [eval] (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] _checkDefined(res, 7562610)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [then-branch: 187 | !(lambda46_30$t@189@01 in First:(Second:(Second:(Second:($t@147@01))))) | live]
; [else-branch: 187 | lambda46_30$t@189@01 in First:(Second:(Second:(Second:($t@147@01)))) | live]
(push) ; 16
; [then-branch: 187 | !(lambda46_30$t@189@01 in First:(Second:(Second:(Second:($t@147@01)))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@189@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 187 | lambda46_30$t@189@01 in First:(Second:(Second:(Second:($t@147@01))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
  lambda46_30$t@189@01))
; [eval] code_1 != null
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@189@01)
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
      lambda46_30$t@189@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@189@01) (as Ticket<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@189@01) (as Ticket<PyType>  PyType))
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
        lambda46_30$t@189@01)
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t@189@01))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@189@01) (as Ticket<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@189@01) (as Ticket<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@189@01) (as Ticket<PyType>  PyType))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
      lambda46_30$t@189@01)
    (not (= code_0@34@01 $Ref.null)))))
(pop) ; 12
(declare-fun inv@190@01 ($Ref) $Ref)
(declare-fun img@191@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda46_30$t@189@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@189@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t@189@01)
        (not (= code_0@34@01 $Ref.null))))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@189@01) (as Ticket<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@189@01) (as Ticket<PyType>  PyType))
          (or
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
              lambda46_30$t@189@01)
            (not
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
                lambda46_30$t@189@01)))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@189@01) (as Ticket<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@189@01) (as Ticket<PyType>  PyType))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@189@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@189@01))
  :qid |Ticket_discount_code-aux|)))
; Check receiver injectivity
(push) ; 12
(assert (not (forall ((lambda46_30$t1@189@01 $Ref) (lambda46_30$t2@189@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t1@189@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            lambda46_30$t1@189@01)
          (not (= code_0@34@01 $Ref.null))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t2@189@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            lambda46_30$t2@189@01)
          (not (= code_0@34@01 $Ref.null))))
      (= lambda46_30$t1@189@01 lambda46_30$t2@189@01))
    (= lambda46_30$t1@189@01 lambda46_30$t2@189@01))
  
  :qid |Ticket_discount_code-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda46_30$t@189@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@189@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t@189@01)
        (not (= code_0@34@01 $Ref.null))))
    (and
      (= (inv@190@01 lambda46_30$t@189@01) lambda46_30$t@189@01)
      (img@191@01 lambda46_30$t@189@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@189@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@189@01))
  :qid |Ticket_discount_code-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@191@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@190@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            (inv@190@01 r))
          (not (= code_0@34@01 $Ref.null)))))
    (= (inv@190@01 r) r))
  :pattern ((inv@190@01 r))
  :qid |Ticket_discount_code-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@192@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@190@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            (inv@190@01 r))
          (not (= code_0@34@01 $Ref.null))))
      (img@191@01 r)
      (= r (inv@190@01 r)))
    ($Perm.min
      (ite
        (and
          (img@110@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
            (and
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
                (inv@109@01 r))
              (not (= code_0@34@01 $Ref.null)))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@193@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@190@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            (inv@190@01 r))
          (not (= code_0@34@01 $Ref.null))))
      (img@191@01 r)
      (= r (inv@190@01 r)))
    ($Perm.min
      (ite
        (= r (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@192@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@110@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
            (and
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
                (inv@109@01 r))
              (not (= code_0@34@01 $Ref.null)))))
        $Perm.Write
        $Perm.No)
      (pTaken@192@01 r))
    $Perm.No)
  
  :qid |quant-u-2931|))))
(check-sat)
; unsat
(pop) ; 12
; 0.04s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@190@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            (inv@190@01 r))
          (not (= code_0@34@01 $Ref.null))))
      (img@191@01 r)
      (= r (inv@190@01 r)))
    (= (- $Perm.Write (pTaken@192@01 r)) $Perm.No))
  
  :qid |quant-u-2932|))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)
        (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
      $Perm.Write
      $Perm.No)
    (pTaken@193@01 (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@190@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            (inv@190@01 r))
          (not (= code_0@34@01 $Ref.null))))
      (img@191@01 r)
      (= r (inv@190@01 r)))
    (= (- (- $Perm.Write (pTaken@192@01 r)) (pTaken@193@01 r)) $Perm.No))
  
  :qid |quant-u-2934|))))
(check-sat)
; unsat
(pop) ; 12
; 0.03s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forall lambda46_30$t: Ref :: { (lambda46_30$t in _checkDefined(res, 7562610).list_acc) } issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null) ==> issubtype(typeof(lambda46_30$t.Ticket_discount_code), str()))
(declare-const lambda46_30$t@194@01 $Ref)
(set-option :timeout 0)
(push) ; 12
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null) ==> issubtype(typeof(lambda46_30$t.Ticket_discount_code), str())
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null)
; [eval] issubtype(typeof(lambda46_30$t), Ticket())
; [eval] typeof(lambda46_30$t)
; [eval] Ticket()
(push) ; 13
; [then-branch: 188 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@194@01), Ticket[PyType])) | live]
; [else-branch: 188 | issubtype[Bool](typeof[PyType](lambda46_30$t@194@01), Ticket[PyType]) | live]
(push) ; 14
; [then-branch: 188 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@194@01), Ticket[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))))
(pop) ; 14
(push) ; 14
; [else-branch: 188 | issubtype[Bool](typeof[PyType](lambda46_30$t@194@01), Ticket[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType)))
; [eval] (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] _checkDefined(res, 7562610)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [then-branch: 189 | !(lambda46_30$t@194@01 in First:(Second:(Second:(Second:($t@147@01))))) | live]
; [else-branch: 189 | lambda46_30$t@194@01 in First:(Second:(Second:(Second:($t@147@01)))) | live]
(push) ; 16
; [then-branch: 189 | !(lambda46_30$t@194@01 in First:(Second:(Second:(Second:($t@147@01)))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@194@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 189 | lambda46_30$t@194@01 in First:(Second:(Second:(Second:($t@147@01))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
  lambda46_30$t@194@01))
; [eval] code_1 != null
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@194@01)
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
      lambda46_30$t@194@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
        lambda46_30$t@194@01)
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t@194@01))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType)))))
(push) ; 13
; [then-branch: 190 | issubtype[Bool](typeof[PyType](lambda46_30$t@194@01), Ticket[PyType]) && lambda46_30$t@194@01 in First:(Second:(Second:(Second:($t@147@01)))) && code_0@34@01 != Null | live]
; [else-branch: 190 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@194@01), Ticket[PyType]) && lambda46_30$t@194@01 in First:(Second:(Second:(Second:($t@147@01)))) && code_0@34@01 != Null) | live]
(push) ; 14
; [then-branch: 190 | issubtype[Bool](typeof[PyType](lambda46_30$t@194@01), Ticket[PyType]) && lambda46_30$t@194@01 in First:(Second:(Second:(Second:($t@147@01)))) && code_0@34@01 != Null]
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
      lambda46_30$t@194@01)
    (not (= code_0@34@01 $Ref.null)))))
; [eval] issubtype(typeof(lambda46_30$t.Ticket_discount_code), str())
; [eval] typeof(lambda46_30$t.Ticket_discount_code)
(declare-const sm@195@01 $FVF<Ticket_discount_code>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
    (=
      ($FVF.lookup_Ticket_discount_code (as sm@195@01  $FVF<Ticket_discount_code>) r)
      ($FVF.lookup_Ticket_discount_code (as sm@145@01  $FVF<Ticket_discount_code>) r)))
  :pattern (($FVF.lookup_Ticket_discount_code (as sm@195@01  $FVF<Ticket_discount_code>) r))
  :pattern (($FVF.lookup_Ticket_discount_code (as sm@145@01  $FVF<Ticket_discount_code>) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@110@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            (inv@109@01 r))
          (not (= code_0@34@01 $Ref.null)))))
    (=
      ($FVF.lookup_Ticket_discount_code (as sm@195@01  $FVF<Ticket_discount_code>) r)
      ($FVF.lookup_Ticket_discount_code ($SortWrappers.$SnapTo$FVF<Ticket_discount_code> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Ticket_discount_code (as sm@195@01  $FVF<Ticket_discount_code>) r))
  :pattern (($FVF.lookup_Ticket_discount_code ($SortWrappers.$SnapTo$FVF<Ticket_discount_code> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef5|)))
(declare-const pm@196@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Ticket_discount_code (as pm@196@01  $FPM) r)
    (+
      (ite
        (= r (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
        $Perm.Write
        $Perm.No)
      (ite
        (and
          (img@110@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
            (and
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
                (inv@109@01 r))
              (not (= code_0@34@01 $Ref.null)))))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Ticket_discount_code (as pm@196@01  $FPM) r))
  :qid |qp.resPrmSumDef6|)))
(push) ; 15
(assert (not (<
  $Perm.No
  ($FVF.perm_Ticket_discount_code (as pm@196@01  $FPM) lambda46_30$t@194@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.04s
; (get-info :all-statistics)
; [eval] str()
(pop) ; 14
(push) ; 14
; [else-branch: 190 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@194@01), Ticket[PyType]) && lambda46_30$t@194@01 in First:(Second:(Second:(Second:($t@147@01)))) && code_0@34@01 != Null)]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
        lambda46_30$t@194@01)
      (not (= code_0@34@01 $Ref.null))))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
    (=
      ($FVF.lookup_Ticket_discount_code (as sm@195@01  $FVF<Ticket_discount_code>) r)
      ($FVF.lookup_Ticket_discount_code (as sm@145@01  $FVF<Ticket_discount_code>) r)))
  :pattern (($FVF.lookup_Ticket_discount_code (as sm@195@01  $FVF<Ticket_discount_code>) r))
  :pattern (($FVF.lookup_Ticket_discount_code (as sm@145@01  $FVF<Ticket_discount_code>) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@110@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            (inv@109@01 r))
          (not (= code_0@34@01 $Ref.null)))))
    (=
      ($FVF.lookup_Ticket_discount_code (as sm@195@01  $FVF<Ticket_discount_code>) r)
      ($FVF.lookup_Ticket_discount_code ($SortWrappers.$SnapTo$FVF<Ticket_discount_code> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Ticket_discount_code (as sm@195@01  $FVF<Ticket_discount_code>) r))
  :pattern (($FVF.lookup_Ticket_discount_code ($SortWrappers.$SnapTo$FVF<Ticket_discount_code> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Ticket_discount_code (as pm@196@01  $FPM) r)
    (+
      (ite
        (= r (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
        $Perm.Write
        $Perm.No)
      (ite
        (and
          (img@110@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
            (and
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
                (inv@109@01 r))
              (not (= code_0@34@01 $Ref.null)))))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Ticket_discount_code (as pm@196@01  $FPM) r))
  :qid |qp.resPrmSumDef6|)))
(assert (=>
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
        lambda46_30$t@194@01)
      (not (= code_0@34@01 $Ref.null))))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
      lambda46_30$t@194@01)
    (not (= code_0@34@01 $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t@194@01)
        (not (= code_0@34@01 $Ref.null)))))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
        lambda46_30$t@194@01)
      (not (= code_0@34@01 $Ref.null))))))
(pop) ; 12
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
    (=
      ($FVF.lookup_Ticket_discount_code (as sm@195@01  $FVF<Ticket_discount_code>) r)
      ($FVF.lookup_Ticket_discount_code (as sm@145@01  $FVF<Ticket_discount_code>) r)))
  :pattern (($FVF.lookup_Ticket_discount_code (as sm@195@01  $FVF<Ticket_discount_code>) r))
  :pattern (($FVF.lookup_Ticket_discount_code (as sm@145@01  $FVF<Ticket_discount_code>) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@110@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
            (inv@109@01 r))
          (not (= code_0@34@01 $Ref.null)))))
    (=
      ($FVF.lookup_Ticket_discount_code (as sm@195@01  $FVF<Ticket_discount_code>) r)
      ($FVF.lookup_Ticket_discount_code ($SortWrappers.$SnapTo$FVF<Ticket_discount_code> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Ticket_discount_code (as sm@195@01  $FVF<Ticket_discount_code>) r))
  :pattern (($FVF.lookup_Ticket_discount_code ($SortWrappers.$SnapTo$FVF<Ticket_discount_code> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Ticket_discount_code (as pm@196@01  $FPM) r)
    (+
      (ite
        (= r (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084))
        $Perm.Write
        $Perm.No)
      (ite
        (and
          (img@110@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
            (and
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
                (inv@109@01 r))
              (not (= code_0@34@01 $Ref.null)))))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Ticket_discount_code (as pm@196@01  $FPM) r))
  :qid |qp.resPrmSumDef6|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda46_30$t@194@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
        (or
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            lambda46_30$t@194@01)
          (not
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
              lambda46_30$t@194@01)))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            lambda46_30$t@194@01)
          (not (= code_0@34@01 $Ref.null))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t@194@01)
        (not (= code_0@34@01 $Ref.null))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
              lambda46_30$t@194@01)
            (not (= code_0@34@01 $Ref.null)))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            lambda46_30$t@194@01)
          (not (= code_0@34@01 $Ref.null))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@194@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@194@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802-aux|)))
(assert (forall ((lambda46_30$t@194@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
        (or
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            lambda46_30$t@194@01)
          (not
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
              lambda46_30$t@194@01)))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            lambda46_30$t@194@01)
          (not (= code_0@34@01 $Ref.null))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t@194@01)
        (not (= code_0@34@01 $Ref.null))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
              lambda46_30$t@194@01)
            (not (= code_0@34@01 $Ref.null)))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
            lambda46_30$t@194@01)
          (not (= code_0@34@01 $Ref.null))))))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@194@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802-aux|)))
(push) ; 12
(assert (not (forall ((lambda46_30$t@194@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t@194@01)
        (not (= code_0@34@01 $Ref.null))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Ticket_discount_code (as sm@195@01  $FVF<Ticket_discount_code>) lambda46_30$t@194@01)) (as str<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@194@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@194@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@194@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802|))))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(assert (forall ((lambda46_30$t@194@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@194@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
          lambda46_30$t@194@01)
        (not (= code_0@34@01 $Ref.null))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Ticket_discount_code (as sm@195@01  $FVF<Ticket_discount_code>) lambda46_30$t@194@01)) (as str<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@194@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@147@01)))))
    lambda46_30$t@194@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802|)))
; [eval] iter_err == null ==> int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))) > 0
; [eval] iter_err == null
(push) ; 12
; [then-branch: 191 | _err@150@01 == Null | dead]
; [else-branch: 191 | _err@150@01 != Null | live]
(push) ; 13
; [else-branch: 191 | _err@150@01 != Null]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))))
(push) ; 12
; [then-branch: 192 | False | dead]
; [else-branch: 192 | True | live]
(push) ; 13
; [else-branch: 192 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 193 | True | live]
; [else-branch: 193 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 193 | True]
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
(push) ; 14
; [then-branch: 194 | False | live]
; [else-branch: 194 | True | live]
(push) ; 15
; [then-branch: 194 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 194 | True]
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
(push) ; 16
; [then-branch: 195 | False | live]
; [else-branch: 195 | True | live]
(push) ; 17
; [then-branch: 195 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 195 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
(push) ; 18
; [then-branch: 196 | False | live]
; [else-branch: 196 | True | live]
(push) ; 19
; [then-branch: 196 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 196 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 162 | _err@150@01 == Null]
(assert (= _err@150@01 $Ref.null))
(pop) ; 11
(pop) ; 10
; [eval] !(perm(_MaySet(_checkDefined(ticket, 127978942196084), 578847845651634811226368290157834565233854867796)) > none)
; [eval] perm(_MaySet(_checkDefined(ticket, 127978942196084), 578847845651634811226368290157834565233854867796)) > none
; [eval] perm(_MaySet(_checkDefined(ticket, 127978942196084), 578847845651634811226368290157834565233854867796))
; [eval] _checkDefined(ticket, 127978942196084)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (>
  (ite
    (=
      (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)
      Ticket_res@131@01)
    $Perm.Write
    $Perm.No)
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 197 | !((_checkDefined(_, Ticket_res@131@01, 127978942196084) == Ticket_res@131@01 ? W : Z) > Z) | dead]
; [else-branch: 197 | (_checkDefined(_, Ticket_res@131@01, 127978942196084) == Ticket_res@131@01 ? W : Z) > Z | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 197 | (_checkDefined(_, Ticket_res@131@01, 127978942196084) == Ticket_res@131@01 ? W : Z) > Z]
(assert (>
  (ite
    (=
      (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)
      Ticket_res@131@01)
    $Perm.Write
    $Perm.No)
  $Perm.No))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 104 | code_0@34@01 == Null]
(assert (= code_0@34@01 $Ref.null))
(pop) ; 9
; [eval] !(code_1 != null)
; [eval] code_1 != null
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= code_0@34@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= code_0@34@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 198 | code_0@34@01 == Null | live]
; [else-branch: 198 | code_0@34@01 != Null | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 198 | code_0@34@01 == Null]
(assert (= code_0@34@01 $Ref.null))
; [exec]
; _cwl_160 := list_append(_cthread_160, _method_measures_160, _residue_161, _checkDefined(res,
;   7562610), _checkDefined(ticket, 127978942196084))
; [eval] _checkDefined(res, 7562610)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
; [eval] _checkDefined(ticket, 127978942196084)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit Ticket_res@131@01 127978942196084))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit Ticket_res@131@01 127978942196084))
; [eval] _cthread_9 != null
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 10
(pop) ; 10
; Joined path conditions
; [eval] issubtype(typeof(_cthread_9), Thread_0())
; [eval] typeof(_cthread_9)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(item), list_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@71@01 7562610)) 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@71@01 7562610)) 0)))
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 10
(pop) ; 10
; Joined path conditions
(declare-const _current_wait_level_9@197@01 $Perm)
(declare-const $t@198@01 $Snap)
(assert (= $t@198@01 ($Snap.combine ($Snap.first $t@198@01) ($Snap.second $t@198@01))))
(assert (= ($Snap.first $t@198@01) $Snap.unit))
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: Level(_r_21) <= _current_wait_level_9)
(assert (=
  ($Snap.second $t@198@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@198@01))
    ($Snap.second ($Snap.second $t@198@01)))))
(assert (= ($Snap.first ($Snap.second $t@198@01)) $Snap.unit))
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: Level(_r_21) <= _current_wait_level_9)
(assert (=
  ($Snap.second ($Snap.second $t@198@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@198@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@198@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@198@01))) $Snap.unit))
; [eval] _residue_9 <= _current_wait_level_9
(assert (<= _residue_161@59@01 _current_wait_level_9@197@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@198@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))))
(push) ; 10
(set-option :timeout 10)
(assert (not (= _res@77@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= iterable@75@01 (_checkDefined $Snap.unit res@71@01 7562610))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@01))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc)
; [eval] Seq(item)
(assert (=
  (Seq_length
    (Seq_singleton (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)))
  1))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
    (Seq_singleton (_checkDefined $Snap.unit Ticket_res@131@01 127978942196084)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label loop_end
; [exec]
; _cwl_160, loop_target, iter_err := Iterator___next__(_cthread_160, _method_measures_160,
;   _residue_160, iter)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(declare-const _current_wait_level_149@199@01 $Perm)
(declare-const _res@200@01 $Ref)
(declare-const _err@201@01 $Ref)
(declare-const $t@202@01 $Snap)
(assert (= $t@202@01 ($Snap.combine ($Snap.first $t@202@01) ($Snap.second $t@202@01))))
(assert (= ($Snap.first $t@202@01) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: Level(_r_15) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@202@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@202@01))
    ($Snap.second ($Snap.second $t@202@01)))))
(assert (= ($Snap.first ($Snap.second $t@202@01)) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: Level(_r_15) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@202@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@202@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@202@01))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_160@31@01 _current_wait_level_149@199@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@202@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@202@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))
  (not (= _err@201@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= _err@201@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _err@201@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 199 | _err@201@01 == Null | live]
; [else-branch: 199 | _err@201@01 != Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 199 | _err@201@01 == Null]
(assert (= _err@201@01 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 11
(push) ; 11
; [else-branch: 199 | _err@201@01 != Null]
(assert (not (= _err@201@01 $Ref.null)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@201@01 $Ref.null)) (= _err@201@01 $Ref.null)))
(assert (=>
  (= _err@201@01 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= _err@201@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _err@201@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 200 | _err@201@01 == Null | live]
; [else-branch: 200 | _err@201@01 != Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 200 | _err@201@01 == Null]
(assert (= _err@201@01 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 11
(push) ; 11
; [else-branch: 200 | _err@201@01 != Null]
(assert (not (= _err@201@01 $Ref.null)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@201@01 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= _err@201@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _err@201@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 201 | _err@201@01 == Null | live]
; [else-branch: 201 | _err@201@01 != Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 201 | _err@201@01 == Null]
(assert (= _err@201@01 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 11
(push) ; 11
; [else-branch: 201 | _err@201@01 != Null]
(assert (not (= _err@201@01 $Ref.null)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@201@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 202 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 202 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 202 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] self.__iter_index > 0
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= _err@201@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= _err@201@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 203 | _err@201@01 != Null | live]
; [else-branch: 203 | _err@201@01 == Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 203 | _err@201@01 != Null]
(assert (not (= _err@201@01 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 11
(push) ; 11
; [else-branch: 203 | _err@201@01 == Null]
(assert (= _err@201@01 $Ref.null))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (= _err@201@01 $Ref.null) (not (= _err@201@01 $Ref.null))))
(assert (=>
  (not (= _err@201@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= _err@201@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= _err@201@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 204 | _err@201@01 != Null | live]
; [else-branch: 204 | _err@201@01 == Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 204 | _err@201@01 != Null]
(assert (not (= _err@201@01 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 11
(push) ; 11
; [else-branch: 204 | _err@201@01 == Null]
(assert (= _err@201@01 $Ref.null))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= _err@201@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 205 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 205 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 205 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 206 | _res@200@01 != First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) - 1] | live]
; [else-branch: 206 | _res@200@01 == First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) - 1] | live]
(push) ; 13
; [then-branch: 206 | _res@200@01 != First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) - 1]]
(assert (not
  (=
    _res@200@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
        1)))))
(pop) ; 13
(push) ; 13
; [else-branch: 206 | _res@200@01 == First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) - 1]]
(assert (=
  _res@200@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    _res@200@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
        1)))
  (not
    (=
      _res@200@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
          1))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (or
    (=
      _res@200@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
          1)))
    (not
      (=
        _res@200@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
            1)))))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (=
      _res@200@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
          1)))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      _res@200@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 207 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 207 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 207 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@200@01) (Iterator_arg<PyType> (typeof<PyType> _res@77@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@203@01 $Ref)
(push) ; 10
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 11
; [then-branch: 208 | r@203@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@101@01))))))))) | live]
; [else-branch: 208 | !(r@203@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@101@01)))))))))) | live]
(push) ; 12
; [then-branch: 208 | r@203@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@101@01)))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
  r@203@01))
(pop) ; 12
(push) ; 12
; [else-branch: 208 | !(r@203@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@101@01))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
    r@203@01)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 13
; [then-branch: 209 | !(First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) > 1) | live]
; [else-branch: 209 | First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) > 1 | live]
(push) ; 14
; [then-branch: 209 | !(First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    1)))
(pop) ; 14
(push) ; 14
; [else-branch: 209 | First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(push) ; 15
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
; [then-branch: 210 | r@203@01 != First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) - 2] | live]
; [else-branch: 210 | r@203@01 == First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) - 2] | live]
(push) ; 16
; [then-branch: 210 | r@203@01 != First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) - 2]]
(assert (not
  (=
    r@203@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
        2)))))
(pop) ; 16
(push) ; 16
; [else-branch: 210 | r@203@01 == First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) - 2]]
(assert (=
  r@203@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
      2))))
; [eval] _err == null
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    r@203@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
        2)))
  (not
    (=
      r@203@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
          2))))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    1)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
      1)
    (or
      (=
        r@203@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
            2)))
      (not
        (=
          r@203@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
              2))))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    1)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
      1))))
(push) ; 13
; [then-branch: 211 | First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) > 1 && r@203@01 == First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) - 2] && _err@201@01 == Null | live]
; [else-branch: 211 | !(First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) > 1 && r@203@01 == First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) - 2] && _err@201@01 == Null) | live]
(push) ; 14
; [then-branch: 211 | First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) > 1 && r@203@01 == First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) - 2] && _err@201@01 == Null]
(assert (and
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    1)
  (and
    (=
      r@203@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
          2)))
    (= _err@201@01 $Ref.null))))
(pop) ; 14
(push) ; 14
; [else-branch: 211 | !(First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) > 1 && r@203@01 == First:(Second:(Second:(Second:(Second:($t@101@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) - 2] && _err@201@01 == Null)]
(assert (not
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
      1)
    (and
      (=
        r@203@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
            2)))
      (= _err@201@01 $Ref.null)))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 15
; [then-branch: 212 | !(First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) > 0) | live]
; [else-branch: 212 | First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) > 0 | live]
(push) ; 16
; [then-branch: 212 | !(First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    0)))
(pop) ; 16
(push) ; 16
; [else-branch: 212 | First:(Second:(Second:(Second:(Second:(Second:($t@202@01)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
  0))
; [eval] _err != null
(push) ; 17
; [then-branch: 213 | _err@201@01 == Null | live]
; [else-branch: 213 | _err@201@01 != Null | live]
(push) ; 18
; [then-branch: 213 | _err@201@01 == Null]
(assert (= _err@201@01 $Ref.null))
(pop) ; 18
(push) ; 18
; [else-branch: 213 | _err@201@01 != Null]
(assert (not (= _err@201@01 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 19
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
      0))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
      1)
    (and
      (=
        r@203@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
            2)))
      (= _err@201@01 $Ref.null)))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
      1)
    (=
      r@203@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
          2)))
    (= _err@201@01 $Ref.null))))
; Joined path conditions
(assert (=>
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
        1)
      (and
        (=
          r@203@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
              2)))
        (= _err@201@01 $Ref.null))))
  (and
    (not
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
          1)
        (and
          (=
            r@203@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                2)))
          (= _err@201@01 $Ref.null))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
          0))))))
(assert (or
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
        1)
      (and
        (=
          r@203@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
              2)))
        (= _err@201@01 $Ref.null))))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
      1)
    (and
      (=
        r@203@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
            2)))
      (= _err@201@01 $Ref.null)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
      r@203@01))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
        r@203@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
        1)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
          1)
        (or
          (=
            r@203@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                2)))
          (not
            (=
              r@203@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                  2)))))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
        1)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
          1)))
    (=>
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
          1)
        (and
          (=
            r@203@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                2)))
          (= _err@201@01 $Ref.null)))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
          1)
        (=
          r@203@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
              2)))
        (= _err@201@01 $Ref.null)))
    (=>
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
            1)
          (and
            (=
              r@203@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                  2)))
            (= _err@201@01 $Ref.null))))
      (and
        (not
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
              1)
            (and
              (=
                r@203@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                    2)))
              (= _err@201@01 $Ref.null))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
              0)))))
    (or
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
            1)
          (and
            (=
              r@203@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                  2)))
            (= _err@201@01 $Ref.null))))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
          1)
        (and
          (=
            r@203@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                2)))
          (= _err@201@01 $Ref.null)))))))
(assert (or
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
      r@203@01))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
    r@203@01)))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@203@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
          r@203@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
            r@203@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
              1)
            (or
              (=
                r@203@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                    2)))
              (not
                (=
                  r@203@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
              1)
            (and
              (=
                r@203@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                    2)))
              (= _err@201@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
              1)
            (=
              r@203@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                  2)))
            (= _err@201@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                1)
              (and
                (=
                  r@203@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                      2)))
                (= _err@201@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                  1)
                (and
                  (=
                    r@203@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                        2)))
                  (= _err@201@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                1)
              (and
                (=
                  r@203@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                      2)))
                (= _err@201@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
              1)
            (and
              (=
                r@203@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                    2)))
              (= _err@201@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
          r@203@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
        r@203@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))
    r@203@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))
    r@203@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@902@12@902@289-aux|)))
(assert (forall ((r@203@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
          r@203@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
            r@203@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
              1)
            (or
              (=
                r@203@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                    2)))
              (not
                (=
                  r@203@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
              1)
            (and
              (=
                r@203@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                    2)))
              (= _err@201@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
              1)
            (=
              r@203@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                  2)))
            (= _err@201@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                1)
              (and
                (=
                  r@203@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                      2)))
                (= _err@201@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                  1)
                (and
                  (=
                    r@203@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                        2)))
                  (= _err@201@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                1)
              (and
                (=
                  r@203@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                      2)))
                (= _err@201@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
              1)
            (and
              (=
                r@203@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                    2)))
              (= _err@201@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
          r@203@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
        r@203@01)))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))
    r@203@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@902@12@902@289-aux|)))
(assert (forall ((r@203@01 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))
      r@203@01)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
        r@203@01)
      (or
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
            1)
          (and
            (=
              r@203@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                  2)))
            (= _err@201@01 $Ref.null)))
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
            0)
          (and
            (not (= _err@201@01 $Ref.null))
            (=
              r@203@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
                  1))))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))
    r@203@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))
    r@203@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@902@12@902@289|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= _err@201@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _err@201@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 214 | _err@201@01 == Null | live]
; [else-branch: 214 | _err@201@01 != Null | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 214 | _err@201@01 == Null]
(assert (= _err@201@01 $Ref.null))
; [exec]
; row_0 := tuple___getitem__(loop_target, 0)
; [eval] tuple___getitem__(loop_target, 0)
(push) ; 11
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 12
(assert (tuple___len__%precondition $Snap.unit _res@200@01))
(pop) ; 12
; Joined path conditions
(assert (tuple___len__%precondition $Snap.unit _res@200@01))
(declare-const letvar@204@01 Int)
(assert (= (as letvar@204@01  Int) (tuple___len__ $Snap.unit _res@200@01)))
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 215 | True | live]
; [else-branch: 215 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 215 | True]
; [eval] key < ln
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 216 | !(0 < tuple___len__(_, _res@200@01)) | live]
; [else-branch: 216 | 0 < tuple___len__(_, _res@200@01) | live]
(push) ; 13
; [then-branch: 216 | !(0 < tuple___len__(_, _res@200@01))]
(assert (not (< 0 (tuple___len__ $Snap.unit _res@200@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 216 | 0 < tuple___len__(_, _res@200@01)]
(assert (< 0 (tuple___len__ $Snap.unit _res@200@01)))
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 14
; [then-branch: 217 | False | dead]
; [else-branch: 217 | True | live]
(push) ; 15
; [else-branch: 217 | True]
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (< 0 (tuple___len__ $Snap.unit _res@200@01))
  (not (< 0 (tuple___len__ $Snap.unit _res@200@01)))))
(push) ; 12
(assert (not (< 0 (tuple___len__ $Snap.unit _res@200@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (< 0 (tuple___len__ $Snap.unit _res@200@01)))
(assert (tuple___getitem__%precondition $Snap.unit _res@200@01 0))
(pop) ; 11
; Joined path conditions
(assert (and
  (tuple___len__%precondition $Snap.unit _res@200@01)
  (= (as letvar@204@01  Int) (tuple___len__ $Snap.unit _res@200@01))
  (or
    (< 0 (tuple___len__ $Snap.unit _res@200@01))
    (not (< 0 (tuple___len__ $Snap.unit _res@200@01))))
  (< 0 (tuple___len__ $Snap.unit _res@200@01))
  (tuple___getitem__%precondition $Snap.unit _res@200@01 0)))
(declare-const row_0@205@01 $Ref)
(assert (= row_0@205@01 (tuple___getitem__ $Snap.unit _res@200@01 0)))
; [exec]
; inhale _isDefined(207760093042)
(declare-const $t@206@01 $Snap)
(assert (= $t@206@01 $Snap.unit))
; [eval] _isDefined(207760093042)
(push) ; 11
(pop) ; 11
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; seat_0 := tuple___getitem__(loop_target, 1)
; [eval] tuple___getitem__(loop_target, 1)
(set-option :timeout 0)
(push) ; 11
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 12
(pop) ; 12
; Joined path conditions
(declare-const letvar@207@01 Int)
(assert (= (as letvar@207@01  Int) (tuple___len__ $Snap.unit _res@200@01)))
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 218 | True | live]
; [else-branch: 218 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 218 | True]
; [eval] key < ln
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 219 | !(1 < tuple___len__(_, _res@200@01)) | live]
; [else-branch: 219 | 1 < tuple___len__(_, _res@200@01) | live]
(push) ; 13
; [then-branch: 219 | !(1 < tuple___len__(_, _res@200@01))]
(assert (not (< 1 (tuple___len__ $Snap.unit _res@200@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 219 | 1 < tuple___len__(_, _res@200@01)]
(assert (< 1 (tuple___len__ $Snap.unit _res@200@01)))
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 14
; [then-branch: 220 | False | dead]
; [else-branch: 220 | True | live]
(push) ; 15
; [else-branch: 220 | True]
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (< 1 (tuple___len__ $Snap.unit _res@200@01))
  (not (< 1 (tuple___len__ $Snap.unit _res@200@01)))))
(push) ; 12
(assert (not (< 1 (tuple___len__ $Snap.unit _res@200@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (< 1 (tuple___len__ $Snap.unit _res@200@01)))
(assert (tuple___getitem__%precondition $Snap.unit _res@200@01 1))
(pop) ; 11
; Joined path conditions
(assert (and
  (= (as letvar@207@01  Int) (tuple___len__ $Snap.unit _res@200@01))
  (or
    (< 1 (tuple___len__ $Snap.unit _res@200@01))
    (not (< 1 (tuple___len__ $Snap.unit _res@200@01))))
  (< 1 (tuple___len__ $Snap.unit _res@200@01))
  (tuple___getitem__%precondition $Snap.unit _res@200@01 1)))
(declare-const seat_0@208@01 $Ref)
(assert (= seat_0@208@01 (tuple___getitem__ $Snap.unit _res@200@01 1)))
; [exec]
; inhale _isDefined(53186532566387)
(declare-const $t@209@01 $Snap)
(assert (= $t@209@01 $Snap.unit))
; [eval] _isDefined(53186532566387)
(push) ; 11
(pop) ; 11
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_check_before := false
; [exec]
; assert _loop_termination_flag ==>
;   !(iter_err == null) ||
;   Measure$check(_loop_measures, _cthread_160, int___sub__(list___len__(_checkDefined(seats,
;   495873779059)), list___len__(_checkDefined(res, 7562610))))
; [eval] _loop_termination_flag ==> !(iter_err == null) || Measure$check(_loop_measures, _cthread_160, int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))))
(set-option :timeout 0)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 221 | True | live]
; [else-branch: 221 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 221 | True]
; [eval] !(iter_err == null) || Measure$check(_loop_measures, _cthread_160, int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))))
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 13
; [then-branch: 222 | _err@201@01 != Null | live]
; [else-branch: 222 | _err@201@01 == Null | live]
(push) ; 14
; [then-branch: 222 | _err@201@01 != Null]
(assert (not (= _err@201@01 $Ref.null)))
(pop) ; 14
(push) ; 14
; [else-branch: 222 | _err@201@01 == Null]
; [eval] Measure$check(_loop_measures, _cthread_160, int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))))
; [eval] int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610)))
; [eval] list___len__(_checkDefined(seats, 495873779059))
; [eval] _checkDefined(seats, 495873779059)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@210@01 $Perm)
(assert ($Perm.isReadVar $k@210@01))
(push) ; 16
(set-option :timeout 10)
(assert (not (= _res@77@01 (_checkDefined $Snap.unit _res@65@01 495873779059))))
(check-sat)
; unknown
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@71@01 7562610)
  (_checkDefined $Snap.unit _res@65@01 495873779059))))
(check-sat)
; unknown
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@210@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@210@01))
; [eval] list___len__(_checkDefined(res, 7562610))
; [eval] _checkDefined(res, 7562610)
(set-option :timeout 0)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@211@01 $Perm)
(assert ($Perm.isReadVar $k@211@01))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@211@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
(set-option :timeout 0)
(push) ; 15
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(pop) ; 15
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(push) ; 15
(assert (Measure$check%precondition $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))
(pop) ; 15
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@210@01))
(assert ($Perm.isReadVar $k@211@01))
(assert (=>
  (= _err@201@01 $Ref.null)
  (and
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
    (Measure$check%precondition $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@210@01))
(assert ($Perm.isReadVar $k@211@01))
(assert (=>
  (= _err@201@01 $Ref.null)
  (and
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
    (Measure$check%precondition $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))))
(push) ; 11
(assert (not (or
  (not (= _err@201@01 $Ref.null))
  (Measure$check $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(assert (or
  (not (= _err@201@01 $Ref.null))
  (Measure$check $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))))
; Loop head block: Re-establish invariant
; [eval] iter.list_acc == iterable.list_acc
; [eval] seqtmp == iterable.list_acc
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= _err@201@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 223 | _err@201@01 == Null | live]
; [else-branch: 223 | _err@201@01 != Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 223 | _err@201@01 == Null]
; [eval] iter.__iter_index - 1 == |iter.__previous|
; [eval] iter.__iter_index - 1
; [eval] |iter.__previous|
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (= _err@201@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@201@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))))))
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 11
; [then-branch: 224 | _err@201@01 != Null | dead]
; [else-branch: 224 | _err@201@01 == Null | live]
(push) ; 12
; [else-branch: 224 | _err@201@01 == Null]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= _err@201@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 225 | _err@201@01 == Null | live]
; [else-branch: 225 | _err@201@01 != Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 225 | _err@201@01 == Null]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (= _err@201@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@201@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)))
; [eval] iter.__iter_index >= 0
(push) ; 11
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 11
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 226 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 226 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 226 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] iter.__iter_index > 0
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 227 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 227 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 227 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 13
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (=
    _res@200@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (=
    _res@200@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 228 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 228 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 228 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
    _res@200@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
    _res@200@01)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= _err@201@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 229 | _err@201@01 == Null | live]
; [else-branch: 229 | _err@201@01 != Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 229 | _err@201@01 == Null]
; [eval] iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), tuple(Seq(int(), int())))
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 230 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 230 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 230 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), tuple(Seq(int(), int())))
; [eval] typeof(loop_target)
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (=
  (Seq_length
    (Seq_append
      (Seq_singleton (as int<PyType>  PyType))
      (Seq_singleton (as int<PyType>  PyType))))
  2))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@200@01) (tuple<PyType> (Seq_append
    (Seq_singleton (as int<PyType>  PyType))
    (Seq_singleton (as int<PyType>  PyType))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@200@01) (tuple<PyType> (Seq_append
    (Seq_singleton (as int<PyType>  PyType))
    (Seq_singleton (as int<PyType>  PyType)))))))
; [eval] |iter.list_acc| > 0 ==> row_0 == tuple___getitem__(loop_target, 0) && _isDefined(207760093042)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 231 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 231 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 231 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] row_0 == tuple___getitem__(loop_target, 0) && _isDefined(207760093042)
; [eval] row_0 == tuple___getitem__(loop_target, 0)
; [eval] tuple___getitem__(loop_target, 0)
(push) ; 13
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const letvar@212@01 Int)
(assert (= (as letvar@212@01  Int) (tuple___len__ $Snap.unit _res@200@01)))
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [then-branch: 232 | True | live]
; [else-branch: 232 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 232 | True]
; [eval] key < ln
(pop) ; 15
(pop) ; 14
; Joined path conditions
(push) ; 14
; [then-branch: 233 | !(0 < tuple___len__(_, _res@200@01)) | live]
; [else-branch: 233 | 0 < tuple___len__(_, _res@200@01) | live]
(push) ; 15
; [then-branch: 233 | !(0 < tuple___len__(_, _res@200@01))]
(assert (not (< 0 (tuple___len__ $Snap.unit _res@200@01))))
(pop) ; 15
(push) ; 15
; [else-branch: 233 | 0 < tuple___len__(_, _res@200@01)]
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 16
; [then-branch: 234 | False | dead]
; [else-branch: 234 | True | live]
(push) ; 17
; [else-branch: 234 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Joined path conditions
(assert (= (as letvar@212@01  Int) (tuple___len__ $Snap.unit _res@200@01)))
(push) ; 13
; [then-branch: 235 | row_0@205@01 != tuple___getitem__(_, _res@200@01, 0) | live]
; [else-branch: 235 | row_0@205@01 == tuple___getitem__(_, _res@200@01, 0) | live]
(push) ; 14
; [then-branch: 235 | row_0@205@01 != tuple___getitem__(_, _res@200@01, 0)]
(assert (not (= row_0@205@01 (tuple___getitem__ $Snap.unit _res@200@01 0))))
(pop) ; 14
(push) ; 14
; [else-branch: 235 | row_0@205@01 == tuple___getitem__(_, _res@200@01, 0)]
; [eval] _isDefined(207760093042)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (= row_0@205@01 (tuple___getitem__ $Snap.unit _res@200@01 0))
  (not (= row_0@205@01 (tuple___getitem__ $Snap.unit _res@200@01 0)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= (as letvar@212@01  Int) (tuple___len__ $Snap.unit _res@200@01))
    (or
      (= row_0@205@01 (tuple___getitem__ $Snap.unit _res@200@01 0))
      (not (= row_0@205@01 (tuple___getitem__ $Snap.unit _res@200@01 0)))))))
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= row_0@205@01 (tuple___getitem__ $Snap.unit _res@200@01 0))
    (_isDefined $Snap.unit 207760093042)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= row_0@205@01 (tuple___getitem__ $Snap.unit _res@200@01 0))
    (_isDefined $Snap.unit 207760093042))))
; [eval] |iter.list_acc| > 0 ==> seat_0 == tuple___getitem__(loop_target, 1) && _isDefined(53186532566387)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 236 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 236 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 236 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] seat_0 == tuple___getitem__(loop_target, 1) && _isDefined(53186532566387)
; [eval] seat_0 == tuple___getitem__(loop_target, 1)
; [eval] tuple___getitem__(loop_target, 1)
(push) ; 13
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const letvar@213@01 Int)
(assert (= (as letvar@213@01  Int) (tuple___len__ $Snap.unit _res@200@01)))
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [then-branch: 237 | True | live]
; [else-branch: 237 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 237 | True]
; [eval] key < ln
(pop) ; 15
(pop) ; 14
; Joined path conditions
(push) ; 14
; [then-branch: 238 | !(1 < tuple___len__(_, _res@200@01)) | live]
; [else-branch: 238 | 1 < tuple___len__(_, _res@200@01) | live]
(push) ; 15
; [then-branch: 238 | !(1 < tuple___len__(_, _res@200@01))]
(assert (not (< 1 (tuple___len__ $Snap.unit _res@200@01))))
(pop) ; 15
(push) ; 15
; [else-branch: 238 | 1 < tuple___len__(_, _res@200@01)]
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 16
; [then-branch: 239 | False | dead]
; [else-branch: 239 | True | live]
(push) ; 17
; [else-branch: 239 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Joined path conditions
(assert (= (as letvar@213@01  Int) (tuple___len__ $Snap.unit _res@200@01)))
(push) ; 13
; [then-branch: 240 | seat_0@208@01 != tuple___getitem__(_, _res@200@01, 1) | live]
; [else-branch: 240 | seat_0@208@01 == tuple___getitem__(_, _res@200@01, 1) | live]
(push) ; 14
; [then-branch: 240 | seat_0@208@01 != tuple___getitem__(_, _res@200@01, 1)]
(assert (not (= seat_0@208@01 (tuple___getitem__ $Snap.unit _res@200@01 1))))
(pop) ; 14
(push) ; 14
; [else-branch: 240 | seat_0@208@01 == tuple___getitem__(_, _res@200@01, 1)]
; [eval] _isDefined(53186532566387)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (= seat_0@208@01 (tuple___getitem__ $Snap.unit _res@200@01 1))
  (not (= seat_0@208@01 (tuple___getitem__ $Snap.unit _res@200@01 1)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= (as letvar@213@01  Int) (tuple___len__ $Snap.unit _res@200@01))
    (or
      (= seat_0@208@01 (tuple___getitem__ $Snap.unit _res@200@01 1))
      (not (= seat_0@208@01 (tuple___getitem__ $Snap.unit _res@200@01 1)))))))
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= seat_0@208@01 (tuple___getitem__ $Snap.unit _res@200@01 1))
    (_isDefined $Snap.unit 53186532566387)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= seat_0@208@01 (tuple___getitem__ $Snap.unit _res@200@01 1))
    (_isDefined $Snap.unit 53186532566387))))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 11
; [then-branch: 241 | _err@201@01 != Null | dead]
; [else-branch: 241 | _err@201@01 == Null | live]
(push) ; 12
; [else-branch: 241 | _err@201@01 == Null]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 11
; [then-branch: 242 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| == 0 | dead]
; [else-branch: 242 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| != 0 | live]
(push) ; 12
; [else-branch: 242 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| != 0]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] _checkDefined(res, 7562610)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(res, 7562610))), __prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] __prim__int___box__(list___len__(_checkDefined(res, 7562610)))
; [eval] list___len__(_checkDefined(res, 7562610))
; [eval] _checkDefined(res, 7562610)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@214@01 $Perm)
(assert ($Perm.isReadVar $k@214@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@214@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@214@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
(set-option :timeout 0)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(push) ; 11
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType)))
(push) ; 11
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType)))))))
(push) ; 11
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))))))
(declare-const lambda46_30$t@215@01 $Ref)
(push) ; 11
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] issubtype(typeof(lambda46_30$t), Ticket())
; [eval] typeof(lambda46_30$t)
; [eval] Ticket()
(push) ; 12
; [then-branch: 243 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@215@01), Ticket[PyType])) | live]
; [else-branch: 243 | issubtype[Bool](typeof[PyType](lambda46_30$t@215@01), Ticket[PyType]) | live]
(push) ; 13
; [then-branch: 243 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@215@01), Ticket[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@215@01) (as Ticket<PyType>  PyType))))
(pop) ; 13
(push) ; 13
; [else-branch: 243 | issubtype[Bool](typeof[PyType](lambda46_30$t@215@01), Ticket[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda46_30$t@215@01) (as Ticket<PyType>  PyType)))
; [eval] (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] _checkDefined(res, 7562610)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@215@01) (as Ticket<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@215@01) (as Ticket<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@215@01) (as Ticket<PyType>  PyType))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@215@01)))
(pop) ; 11
(declare-fun inv@216@01 ($Ref) $Ref)
(declare-fun img@217@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda46_30$t@215@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@215@01) (as Ticket<PyType>  PyType))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
        lambda46_30$t@215@01))
    (or
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@215@01) (as Ticket<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@215@01) (as Ticket<PyType>  PyType)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@215@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@215@01))
  :qid |Ticket_state-aux|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((lambda46_30$t1@215@01 $Ref) (lambda46_30$t2@215@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t1@215@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t1@215@01))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t2@215@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t2@215@01))
      (= lambda46_30$t1@215@01 lambda46_30$t2@215@01))
    (= lambda46_30$t1@215@01 lambda46_30$t2@215@01))
  
  :qid |Ticket_state-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda46_30$t@215@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@215@01) (as Ticket<PyType>  PyType))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
        lambda46_30$t@215@01))
    (and
      (= (inv@216@01 lambda46_30$t@215@01) lambda46_30$t@215@01)
      (img@217@01 lambda46_30$t@215@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@215@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@215@01))
  :qid |Ticket_state-invOfFct|)))
(assert (forall ((self_1 $Ref)) (!
  (=>
    (and
      (img@217@01 self_1)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@216@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          (inv@216@01 self_1))))
    (= (inv@216@01 self_1) self_1))
  :pattern ((inv@216@01 self_1))
  :qid |Ticket_state-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@218@01 ((self_1 $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@216@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          (inv@216@01 self_1)))
      (img@217@01 self_1)
      (= self_1 (inv@216@01 self_1)))
    ($Perm.min
      (ite
        (and
          (img@107@01 self_1)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@106@01 self_1)) (as Ticket<PyType>  PyType))
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
              (inv@106@01 self_1))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@219@01 ((self_1 $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@216@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          (inv@216@01 self_1)))
      (img@217@01 self_1)
      (= self_1 (inv@216@01 self_1)))
    ($Perm.min
      (ite (= self_1 Ticket_res@131@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@218@01 self_1)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@107@01 self_1)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@106@01 self_1)) (as Ticket<PyType>  PyType))
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
              (inv@106@01 self_1))))
        $Perm.Write
        $Perm.No)
      (pTaken@218@01 self_1))
    $Perm.No)
  
  :qid |quant-u-2937|))))
(check-sat)
; unsat
(pop) ; 11
; 0.05s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@216@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          (inv@216@01 self_1)))
      (img@217@01 self_1)
      (= self_1 (inv@216@01 self_1)))
    (= (- $Perm.Write (pTaken@218@01 self_1)) $Perm.No))
  
  :qid |quant-u-2938|))))
(check-sat)
; unknown
(pop) ; 11
; 0.08s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@219@01 Ticket_res@131@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@216@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          (inv@216@01 self_1)))
      (img@217@01 self_1)
      (= self_1 (inv@216@01 self_1)))
    (=
      (- (- $Perm.Write (pTaken@218@01 self_1)) (pTaken@219@01 self_1))
      $Perm.No))
  
  :qid |quant-u-2940|))))
(check-sat)
; unsat
(pop) ; 11
; 0.08s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const lambda46_30$t@220@01 $Ref)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null)
; [eval] issubtype(typeof(lambda46_30$t), Ticket())
; [eval] typeof(lambda46_30$t)
; [eval] Ticket()
(push) ; 12
; [then-branch: 244 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@220@01), Ticket[PyType])) | live]
; [else-branch: 244 | issubtype[Bool](typeof[PyType](lambda46_30$t@220@01), Ticket[PyType]) | live]
(push) ; 13
; [then-branch: 244 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@220@01), Ticket[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@220@01) (as Ticket<PyType>  PyType))))
(pop) ; 13
(push) ; 13
; [else-branch: 244 | issubtype[Bool](typeof[PyType](lambda46_30$t@220@01), Ticket[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda46_30$t@220@01) (as Ticket<PyType>  PyType)))
; [eval] (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] _checkDefined(res, 7562610)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [then-branch: 245 | !(lambda46_30$t@220@01 in First:(Second:(Second:(Second:($t@198@01))))) | live]
; [else-branch: 245 | lambda46_30$t@220@01 in First:(Second:(Second:(Second:($t@198@01)))) | live]
(push) ; 15
; [then-branch: 245 | !(lambda46_30$t@220@01 in First:(Second:(Second:(Second:($t@198@01)))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@220@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 245 | lambda46_30$t@220@01 in First:(Second:(Second:(Second:($t@198@01))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
  lambda46_30$t@220@01))
; [eval] code_1 != null
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@220@01)
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
      lambda46_30$t@220@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@220@01) (as Ticket<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@220@01) (as Ticket<PyType>  PyType))
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
        lambda46_30$t@220@01)
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t@220@01))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@220@01) (as Ticket<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@220@01) (as Ticket<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@220@01) (as Ticket<PyType>  PyType))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
      lambda46_30$t@220@01)
    (not (= code_0@34@01 $Ref.null)))))
(pop) ; 11
(declare-fun inv@221@01 ($Ref) $Ref)
(declare-fun img@222@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda46_30$t@220@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@220@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t@220@01)
        (not (= code_0@34@01 $Ref.null))))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@220@01) (as Ticket<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@220@01) (as Ticket<PyType>  PyType))
          (or
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
              lambda46_30$t@220@01)
            (not
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
                lambda46_30$t@220@01)))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@220@01) (as Ticket<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@220@01) (as Ticket<PyType>  PyType))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@220@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@220@01))
  :qid |Ticket_discount_code-aux|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((lambda46_30$t1@220@01 $Ref) (lambda46_30$t2@220@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t1@220@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            lambda46_30$t1@220@01)
          (not (= code_0@34@01 $Ref.null))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t2@220@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            lambda46_30$t2@220@01)
          (not (= code_0@34@01 $Ref.null))))
      (= lambda46_30$t1@220@01 lambda46_30$t2@220@01))
    (= lambda46_30$t1@220@01 lambda46_30$t2@220@01))
  
  :qid |Ticket_discount_code-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda46_30$t@220@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@220@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t@220@01)
        (not (= code_0@34@01 $Ref.null))))
    (and
      (= (inv@221@01 lambda46_30$t@220@01) lambda46_30$t@220@01)
      (img@222@01 lambda46_30$t@220@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@220@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@220@01))
  :qid |Ticket_discount_code-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@222@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@221@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            (inv@221@01 r))
          (not (= code_0@34@01 $Ref.null)))))
    (= (inv@221@01 r) r))
  :pattern ((inv@221@01 r))
  :qid |Ticket_discount_code-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@223@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@221@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            (inv@221@01 r))
          (not (= code_0@34@01 $Ref.null))))
      (img@222@01 r)
      (= r (inv@221@01 r)))
    ($Perm.min
      (ite
        (and
          (img@110@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
            (and
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
                (inv@109@01 r))
              (not (= code_0@34@01 $Ref.null)))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@110@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
            (and
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
                (inv@109@01 r))
              (not (= code_0@34@01 $Ref.null)))))
        $Perm.Write
        $Perm.No)
      (pTaken@223@01 r))
    $Perm.No)
  
  :qid |quant-u-2943|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@221@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            (inv@221@01 r))
          (not (= code_0@34@01 $Ref.null))))
      (img@222@01 r)
      (= r (inv@221@01 r)))
    (= (- $Perm.Write (pTaken@223@01 r)) $Perm.No))
  
  :qid |quant-u-2944|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forall lambda46_30$t: Ref :: { (lambda46_30$t in _checkDefined(res, 7562610).list_acc) } issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null) ==> issubtype(typeof(lambda46_30$t.Ticket_discount_code), str()))
(declare-const lambda46_30$t@224@01 $Ref)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null) ==> issubtype(typeof(lambda46_30$t.Ticket_discount_code), str())
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null)
; [eval] issubtype(typeof(lambda46_30$t), Ticket())
; [eval] typeof(lambda46_30$t)
; [eval] Ticket()
(push) ; 12
; [then-branch: 246 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@224@01), Ticket[PyType])) | live]
; [else-branch: 246 | issubtype[Bool](typeof[PyType](lambda46_30$t@224@01), Ticket[PyType]) | live]
(push) ; 13
; [then-branch: 246 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@224@01), Ticket[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))))
(pop) ; 13
(push) ; 13
; [else-branch: 246 | issubtype[Bool](typeof[PyType](lambda46_30$t@224@01), Ticket[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType)))
; [eval] (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] _checkDefined(res, 7562610)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [then-branch: 247 | !(lambda46_30$t@224@01 in First:(Second:(Second:(Second:($t@198@01))))) | live]
; [else-branch: 247 | lambda46_30$t@224@01 in First:(Second:(Second:(Second:($t@198@01)))) | live]
(push) ; 15
; [then-branch: 247 | !(lambda46_30$t@224@01 in First:(Second:(Second:(Second:($t@198@01)))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@224@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 247 | lambda46_30$t@224@01 in First:(Second:(Second:(Second:($t@198@01))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
  lambda46_30$t@224@01))
; [eval] code_1 != null
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@224@01)
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
      lambda46_30$t@224@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
        lambda46_30$t@224@01)
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t@224@01))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType)))))
(push) ; 12
; [then-branch: 248 | issubtype[Bool](typeof[PyType](lambda46_30$t@224@01), Ticket[PyType]) && lambda46_30$t@224@01 in First:(Second:(Second:(Second:($t@198@01)))) && code_0@34@01 != Null | live]
; [else-branch: 248 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@224@01), Ticket[PyType]) && lambda46_30$t@224@01 in First:(Second:(Second:(Second:($t@198@01)))) && code_0@34@01 != Null) | live]
(push) ; 13
; [then-branch: 248 | issubtype[Bool](typeof[PyType](lambda46_30$t@224@01), Ticket[PyType]) && lambda46_30$t@224@01 in First:(Second:(Second:(Second:($t@198@01)))) && code_0@34@01 != Null]
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
      lambda46_30$t@224@01)
    (not (= code_0@34@01 $Ref.null)))))
; [eval] issubtype(typeof(lambda46_30$t.Ticket_discount_code), str())
; [eval] typeof(lambda46_30$t.Ticket_discount_code)
(push) ; 14
(assert (not (and
  (img@110@01 lambda46_30$t@224@01)
  (and
    (issubtype<Bool> (typeof<PyType> (inv@109@01 lambda46_30$t@224@01)) (as Ticket<PyType>  PyType))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
        (inv@109@01 lambda46_30$t@224@01))
      (not (= code_0@34@01 $Ref.null)))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] str()
(pop) ; 13
(push) ; 13
; [else-branch: 248 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@224@01), Ticket[PyType]) && lambda46_30$t@224@01 in First:(Second:(Second:(Second:($t@198@01)))) && code_0@34@01 != Null)]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
        lambda46_30$t@224@01)
      (not (= code_0@34@01 $Ref.null))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
        lambda46_30$t@224@01)
      (not (= code_0@34@01 $Ref.null))))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
      lambda46_30$t@224@01)
    (not (= code_0@34@01 $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t@224@01)
        (not (= code_0@34@01 $Ref.null)))))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
        lambda46_30$t@224@01)
      (not (= code_0@34@01 $Ref.null))))))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda46_30$t@224@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
        (or
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            lambda46_30$t@224@01)
          (not
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
              lambda46_30$t@224@01)))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            lambda46_30$t@224@01)
          (not (= code_0@34@01 $Ref.null))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t@224@01)
        (not (= code_0@34@01 $Ref.null))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
              lambda46_30$t@224@01)
            (not (= code_0@34@01 $Ref.null)))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            lambda46_30$t@224@01)
          (not (= code_0@34@01 $Ref.null))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@224@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@224@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802-aux|)))
(assert (forall ((lambda46_30$t@224@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
        (or
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            lambda46_30$t@224@01)
          (not
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
              lambda46_30$t@224@01)))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            lambda46_30$t@224@01)
          (not (= code_0@34@01 $Ref.null))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t@224@01)
        (not (= code_0@34@01 $Ref.null))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
              lambda46_30$t@224@01)
            (not (= code_0@34@01 $Ref.null)))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            lambda46_30$t@224@01)
          (not (= code_0@34@01 $Ref.null))))))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@224@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802-aux|)))
(push) ; 11
(assert (not (forall ((lambda46_30$t@224@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t@224@01)
        (not (= code_0@34@01 $Ref.null))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Ticket_discount_code ($SortWrappers.$SnapTo$FVF<Ticket_discount_code> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))) lambda46_30$t@224@01)) (as str<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@224@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@224@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@224@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda46_30$t@224@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@224@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t@224@01)
        (not (= code_0@34@01 $Ref.null))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Ticket_discount_code ($SortWrappers.$SnapTo$FVF<Ticket_discount_code> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))) lambda46_30$t@224@01)) (as str<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@224@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@224@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802|)))
; [eval] iter_err == null ==> int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))) > 0
; [eval] iter_err == null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= _err@201@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 249 | _err@201@01 == Null | live]
; [else-branch: 249 | _err@201@01 != Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 249 | _err@201@01 == Null]
; [eval] int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))) > 0
; [eval] int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610)))
; [eval] list___len__(_checkDefined(seats, 495873779059))
; [eval] _checkDefined(seats, 495873779059)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@225@01 $Perm)
(assert ($Perm.isReadVar $k@225@01))
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@77@01 (_checkDefined $Snap.unit _res@65@01 495873779059))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@71@01 7562610)
  (_checkDefined $Snap.unit _res@65@01 495873779059))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@225@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@225@01))
; [eval] list___len__(_checkDefined(res, 7562610))
; [eval] _checkDefined(res, 7562610)
(set-option :timeout 0)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@226@01 $Perm)
(assert ($Perm.isReadVar $k@226@01))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@226@01))
(set-option :timeout 0)
(push) ; 13
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(pop) ; 13
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@225@01))
(assert ($Perm.isReadVar $k@226@01))
(assert (=>
  (= _err@201@01 $Ref.null)
  (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))
(push) ; 11
(assert (not (=>
  (= _err@201@01 $Ref.null)
  (>
    (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@201@01 $Ref.null)
  (>
    (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
    0)))
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))))
(push) ; 11
; [then-branch: 250 | False | dead]
; [else-branch: 250 | True | live]
(push) ; 12
; [else-branch: 250 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 251 | True | live]
; [else-branch: 251 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 251 | True]
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
(push) ; 13
; [then-branch: 252 | False | live]
; [else-branch: 252 | True | live]
(push) ; 14
; [then-branch: 252 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 252 | True]
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
(push) ; 15
; [then-branch: 253 | False | live]
; [else-branch: 253 | True | live]
(push) ; 16
; [then-branch: 253 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 253 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
(push) ; 17
; [then-branch: 254 | False | live]
; [else-branch: 254 | True | live]
(push) ; 18
; [then-branch: 254 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 254 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 214 | _err@201@01 != Null]
(assert (not (= _err@201@01 $Ref.null)))
(pop) ; 10
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 10
(set-option :timeout 10)
(assert (not (= _err@201@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= _err@201@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 255 | _err@201@01 != Null | live]
; [else-branch: 255 | _err@201@01 == Null | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 255 | _err@201@01 != Null]
(assert (not (= _err@201@01 $Ref.null)))
; [exec]
; _loop_check_before := false
; [exec]
; assert _loop_termination_flag ==>
;   !(iter_err == null) ||
;   Measure$check(_loop_measures, _cthread_160, int___sub__(list___len__(_checkDefined(seats,
;   495873779059)), list___len__(_checkDefined(res, 7562610))))
; [eval] _loop_termination_flag ==> !(iter_err == null) || Measure$check(_loop_measures, _cthread_160, int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 256 | True | live]
; [else-branch: 256 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 256 | True]
; [eval] !(iter_err == null) || Measure$check(_loop_measures, _cthread_160, int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))))
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 13
; [then-branch: 257 | _err@201@01 != Null | live]
; [else-branch: 257 | _err@201@01 == Null | live]
(push) ; 14
; [then-branch: 257 | _err@201@01 != Null]
(pop) ; 14
(push) ; 14
; [else-branch: 257 | _err@201@01 == Null]
(assert (= _err@201@01 $Ref.null))
; [eval] Measure$check(_loop_measures, _cthread_160, int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))))
; [eval] int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610)))
; [eval] list___len__(_checkDefined(seats, 495873779059))
; [eval] _checkDefined(seats, 495873779059)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@227@01 $Perm)
(assert ($Perm.isReadVar $k@227@01))
(push) ; 16
(set-option :timeout 10)
(assert (not (= _res@77@01 (_checkDefined $Snap.unit _res@65@01 495873779059))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)))
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@227@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)))
; [eval] list___len__(_checkDefined(res, 7562610))
; [eval] _checkDefined(res, 7562610)
(set-option :timeout 0)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@228@01 $Perm)
(assert ($Perm.isReadVar $k@228@01))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@228@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@228@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
(set-option :timeout 0)
(push) ; 15
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(pop) ; 15
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(push) ; 15
(assert (Measure$check%precondition $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))
(pop) ; 15
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@227@01))
(assert ($Perm.isReadVar $k@228@01))
(assert (=>
  (= _err@201@01 $Ref.null)
  (and
    (= _err@201@01 $Ref.null)
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
    (Measure$check%precondition $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@227@01))
(assert ($Perm.isReadVar $k@228@01))
(assert (=>
  (= _err@201@01 $Ref.null)
  (and
    (= _err@201@01 $Ref.null)
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
    (Measure$check%precondition $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))))
(push) ; 11
(assert (not (or
  (not (= _err@201@01 $Ref.null))
  (Measure$check $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (or
  (not (= _err@201@01 $Ref.null))
  (Measure$check $Snap.unit _loop_measures@130@01 _cthread_160@29@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (_checkDefined $Snap.unit _res@65@01 495873779059)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))))
; Loop head block: Re-establish invariant
; [eval] iter.list_acc == iterable.list_acc
; [eval] seqtmp == iterable.list_acc
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(push) ; 11
; [then-branch: 258 | _err@201@01 == Null | dead]
; [else-branch: 258 | _err@201@01 != Null | live]
(push) ; 12
; [else-branch: 258 | _err@201@01 != Null]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (= _err@201@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 259 | _err@201@01 != Null | live]
; [else-branch: 259 | _err@201@01 == Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 259 | _err@201@01 != Null]
; [eval] iter.__iter_index == |iter.__previous|
; [eval] |iter.__previous|
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (not (= _err@201@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= _err@201@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))))))
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 11
; [then-branch: 260 | _err@201@01 == Null | dead]
; [else-branch: 260 | _err@201@01 != Null | live]
(push) ; 12
; [else-branch: 260 | _err@201@01 != Null]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] iter.__iter_index >= 0
(push) ; 11
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 11
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 261 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 261 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 261 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] iter.__iter_index > 0
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 262 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 262 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 262 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 13
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (=
    _res@200@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (=
    _res@200@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 263 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 263 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 263 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
    _res@200@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
    _res@200@01)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 11
; [then-branch: 264 | _err@201@01 == Null | dead]
; [else-branch: 264 | _err@201@01 != Null | live]
(push) ; 12
; [else-branch: 264 | _err@201@01 != Null]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), tuple(Seq(int(), int())))
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 265 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 265 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 265 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), tuple(Seq(int(), int())))
; [eval] typeof(loop_target)
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (=
  (Seq_length
    (Seq_append
      (Seq_singleton (as int<PyType>  PyType))
      (Seq_singleton (as int<PyType>  PyType))))
  2))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@200@01) (tuple<PyType> (Seq_append
    (Seq_singleton (as int<PyType>  PyType))
    (Seq_singleton (as int<PyType>  PyType))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@200@01) (tuple<PyType> (Seq_append
    (Seq_singleton (as int<PyType>  PyType))
    (Seq_singleton (as int<PyType>  PyType)))))))
; [eval] |iter.list_acc| > 0 ==> row_0 == tuple___getitem__(loop_target, 0) && _isDefined(207760093042)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 266 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 266 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 266 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] row_0 == tuple___getitem__(loop_target, 0) && _isDefined(207760093042)
; [eval] row_0 == tuple___getitem__(loop_target, 0)
; [eval] tuple___getitem__(loop_target, 0)
(push) ; 13
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 14
(assert (tuple___len__%precondition $Snap.unit _res@200@01))
(pop) ; 14
; Joined path conditions
(assert (tuple___len__%precondition $Snap.unit _res@200@01))
(declare-const letvar@229@01 Int)
(assert (= (as letvar@229@01  Int) (tuple___len__ $Snap.unit _res@200@01)))
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [then-branch: 267 | True | live]
; [else-branch: 267 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 267 | True]
; [eval] key < ln
(pop) ; 15
(pop) ; 14
; Joined path conditions
(push) ; 14
; [then-branch: 268 | !(0 < tuple___len__(_, _res@200@01)) | live]
; [else-branch: 268 | 0 < tuple___len__(_, _res@200@01) | live]
(push) ; 15
; [then-branch: 268 | !(0 < tuple___len__(_, _res@200@01))]
(assert (not (< 0 (tuple___len__ $Snap.unit _res@200@01))))
(pop) ; 15
(push) ; 15
; [else-branch: 268 | 0 < tuple___len__(_, _res@200@01)]
(assert (< 0 (tuple___len__ $Snap.unit _res@200@01)))
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 16
; [then-branch: 269 | False | dead]
; [else-branch: 269 | True | live]
(push) ; 17
; [else-branch: 269 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (< 0 (tuple___len__ $Snap.unit _res@200@01))
  (not (< 0 (tuple___len__ $Snap.unit _res@200@01)))))
(push) ; 14
(assert (not (< 0 (tuple___len__ $Snap.unit _res@200@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< 0 (tuple___len__ $Snap.unit _res@200@01)))
(assert (tuple___getitem__%precondition $Snap.unit _res@200@01 0))
(pop) ; 13
; Joined path conditions
(assert (and
  (tuple___len__%precondition $Snap.unit _res@200@01)
  (= (as letvar@229@01  Int) (tuple___len__ $Snap.unit _res@200@01))
  (or
    (< 0 (tuple___len__ $Snap.unit _res@200@01))
    (not (< 0 (tuple___len__ $Snap.unit _res@200@01))))
  (< 0 (tuple___len__ $Snap.unit _res@200@01))
  (tuple___getitem__%precondition $Snap.unit _res@200@01 0)))
(push) ; 13
; [then-branch: 270 | row_0@98@01 != tuple___getitem__(_, _res@200@01, 0) | live]
; [else-branch: 270 | row_0@98@01 == tuple___getitem__(_, _res@200@01, 0) | live]
(push) ; 14
; [then-branch: 270 | row_0@98@01 != tuple___getitem__(_, _res@200@01, 0)]
(assert (not (= row_0@98@01 (tuple___getitem__ $Snap.unit _res@200@01 0))))
(pop) ; 14
(push) ; 14
; [else-branch: 270 | row_0@98@01 == tuple___getitem__(_, _res@200@01, 0)]
(assert (= row_0@98@01 (tuple___getitem__ $Snap.unit _res@200@01 0)))
; [eval] _isDefined(207760093042)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (= row_0@98@01 (tuple___getitem__ $Snap.unit _res@200@01 0))
  (not (= row_0@98@01 (tuple___getitem__ $Snap.unit _res@200@01 0)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (tuple___len__%precondition $Snap.unit _res@200@01)
    (= (as letvar@229@01  Int) (tuple___len__ $Snap.unit _res@200@01))
    (or
      (< 0 (tuple___len__ $Snap.unit _res@200@01))
      (not (< 0 (tuple___len__ $Snap.unit _res@200@01))))
    (< 0 (tuple___len__ $Snap.unit _res@200@01))
    (tuple___getitem__%precondition $Snap.unit _res@200@01 0)
    (or
      (= row_0@98@01 (tuple___getitem__ $Snap.unit _res@200@01 0))
      (not (= row_0@98@01 (tuple___getitem__ $Snap.unit _res@200@01 0)))))))
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= row_0@98@01 (tuple___getitem__ $Snap.unit _res@200@01 0))
    (_isDefined $Snap.unit 207760093042)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= row_0@98@01 (tuple___getitem__ $Snap.unit _res@200@01 0))
    (_isDefined $Snap.unit 207760093042))))
; [eval] |iter.list_acc| > 0 ==> seat_0 == tuple___getitem__(loop_target, 1) && _isDefined(53186532566387)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 271 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0 | live]
; [else-branch: 271 | !(|First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 271 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| > 0]
; [eval] seat_0 == tuple___getitem__(loop_target, 1) && _isDefined(53186532566387)
; [eval] seat_0 == tuple___getitem__(loop_target, 1)
; [eval] tuple___getitem__(loop_target, 1)
(push) ; 13
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 14
(assert (tuple___len__%precondition $Snap.unit _res@200@01))
(pop) ; 14
; Joined path conditions
(assert (tuple___len__%precondition $Snap.unit _res@200@01))
(declare-const letvar@230@01 Int)
(assert (= (as letvar@230@01  Int) (tuple___len__ $Snap.unit _res@200@01)))
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [then-branch: 272 | True | live]
; [else-branch: 272 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 272 | True]
; [eval] key < ln
(pop) ; 15
(pop) ; 14
; Joined path conditions
(push) ; 14
; [then-branch: 273 | !(1 < tuple___len__(_, _res@200@01)) | live]
; [else-branch: 273 | 1 < tuple___len__(_, _res@200@01) | live]
(push) ; 15
; [then-branch: 273 | !(1 < tuple___len__(_, _res@200@01))]
(assert (not (< 1 (tuple___len__ $Snap.unit _res@200@01))))
(pop) ; 15
(push) ; 15
; [else-branch: 273 | 1 < tuple___len__(_, _res@200@01)]
(assert (< 1 (tuple___len__ $Snap.unit _res@200@01)))
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 16
; [then-branch: 274 | False | dead]
; [else-branch: 274 | True | live]
(push) ; 17
; [else-branch: 274 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (< 1 (tuple___len__ $Snap.unit _res@200@01))
  (not (< 1 (tuple___len__ $Snap.unit _res@200@01)))))
(push) ; 14
(assert (not (< 1 (tuple___len__ $Snap.unit _res@200@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< 1 (tuple___len__ $Snap.unit _res@200@01)))
(assert (tuple___getitem__%precondition $Snap.unit _res@200@01 1))
(pop) ; 13
; Joined path conditions
(assert (and
  (tuple___len__%precondition $Snap.unit _res@200@01)
  (= (as letvar@230@01  Int) (tuple___len__ $Snap.unit _res@200@01))
  (or
    (< 1 (tuple___len__ $Snap.unit _res@200@01))
    (not (< 1 (tuple___len__ $Snap.unit _res@200@01))))
  (< 1 (tuple___len__ $Snap.unit _res@200@01))
  (tuple___getitem__%precondition $Snap.unit _res@200@01 1)))
(push) ; 13
; [then-branch: 275 | seat_0@99@01 != tuple___getitem__(_, _res@200@01, 1) | live]
; [else-branch: 275 | seat_0@99@01 == tuple___getitem__(_, _res@200@01, 1) | live]
(push) ; 14
; [then-branch: 275 | seat_0@99@01 != tuple___getitem__(_, _res@200@01, 1)]
(assert (not (= seat_0@99@01 (tuple___getitem__ $Snap.unit _res@200@01 1))))
(pop) ; 14
(push) ; 14
; [else-branch: 275 | seat_0@99@01 == tuple___getitem__(_, _res@200@01, 1)]
(assert (= seat_0@99@01 (tuple___getitem__ $Snap.unit _res@200@01 1)))
; [eval] _isDefined(53186532566387)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (= seat_0@99@01 (tuple___getitem__ $Snap.unit _res@200@01 1))
  (not (= seat_0@99@01 (tuple___getitem__ $Snap.unit _res@200@01 1)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (tuple___len__%precondition $Snap.unit _res@200@01)
    (= (as letvar@230@01  Int) (tuple___len__ $Snap.unit _res@200@01))
    (or
      (< 1 (tuple___len__ $Snap.unit _res@200@01))
      (not (< 1 (tuple___len__ $Snap.unit _res@200@01))))
    (< 1 (tuple___len__ $Snap.unit _res@200@01))
    (tuple___getitem__%precondition $Snap.unit _res@200@01 1)
    (or
      (= seat_0@99@01 (tuple___getitem__ $Snap.unit _res@200@01 1))
      (not (= seat_0@99@01 (tuple___getitem__ $Snap.unit _res@200@01 1)))))))
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= seat_0@99@01 (tuple___getitem__ $Snap.unit _res@200@01 1))
    (_isDefined $Snap.unit 53186532566387)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    0)
  (and
    (= seat_0@99@01 (tuple___getitem__ $Snap.unit _res@200@01 1))
    (_isDefined $Snap.unit 53186532566387))))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (= _err@201@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 276 | _err@201@01 != Null | live]
; [else-branch: 276 | _err@201@01 == Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 276 | _err@201@01 != Null]
; [eval] iter.__previous == iter.list_acc
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 11
; [then-branch: 277 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| == 0 | dead]
; [else-branch: 277 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| != 0 | live]
(push) ; 12
; [else-branch: 277 | |First:(Second:(Second:(Second:(Second:($t@101@01)))))| != 0]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] _checkDefined(res, 7562610)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(res, 7562610))), __prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] __prim__int___box__(list___len__(_checkDefined(res, 7562610)))
; [eval] list___len__(_checkDefined(res, 7562610))
; [eval] _checkDefined(res, 7562610)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@231@01 $Perm)
(assert ($Perm.isReadVar $k@231@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@231@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@231@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))
(set-option :timeout 0)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))))
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(push) ; 11
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType)))
(push) ; 11
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610)))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType)))))))
(push) ; 11
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01))))) (_checkDefined $Snap.unit res@71@01 7562610))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))) (as int<PyType>  PyType))))))
(declare-const lambda46_30$t@232@01 $Ref)
(push) ; 11
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] issubtype(typeof(lambda46_30$t), Ticket())
; [eval] typeof(lambda46_30$t)
; [eval] Ticket()
(push) ; 12
; [then-branch: 278 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@232@01), Ticket[PyType])) | live]
; [else-branch: 278 | issubtype[Bool](typeof[PyType](lambda46_30$t@232@01), Ticket[PyType]) | live]
(push) ; 13
; [then-branch: 278 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@232@01), Ticket[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@232@01) (as Ticket<PyType>  PyType))))
(pop) ; 13
(push) ; 13
; [else-branch: 278 | issubtype[Bool](typeof[PyType](lambda46_30$t@232@01), Ticket[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda46_30$t@232@01) (as Ticket<PyType>  PyType)))
; [eval] (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] _checkDefined(res, 7562610)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@232@01) (as Ticket<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@232@01) (as Ticket<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@232@01) (as Ticket<PyType>  PyType))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@232@01)))
(pop) ; 11
(declare-fun inv@233@01 ($Ref) $Ref)
(declare-fun img@234@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda46_30$t@232@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@232@01) (as Ticket<PyType>  PyType))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
        lambda46_30$t@232@01))
    (or
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@232@01) (as Ticket<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@232@01) (as Ticket<PyType>  PyType)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@232@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@232@01))
  :qid |Ticket_state-aux|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((lambda46_30$t1@232@01 $Ref) (lambda46_30$t2@232@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t1@232@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t1@232@01))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t2@232@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t2@232@01))
      (= lambda46_30$t1@232@01 lambda46_30$t2@232@01))
    (= lambda46_30$t1@232@01 lambda46_30$t2@232@01))
  
  :qid |Ticket_state-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda46_30$t@232@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@232@01) (as Ticket<PyType>  PyType))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
        lambda46_30$t@232@01))
    (and
      (= (inv@233@01 lambda46_30$t@232@01) lambda46_30$t@232@01)
      (img@234@01 lambda46_30$t@232@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@232@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@232@01))
  :qid |Ticket_state-invOfFct|)))
(assert (forall ((self_1 $Ref)) (!
  (=>
    (and
      (img@234@01 self_1)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@233@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          (inv@233@01 self_1))))
    (= (inv@233@01 self_1) self_1))
  :pattern ((inv@233@01 self_1))
  :qid |Ticket_state-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@235@01 ((self_1 $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@233@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          (inv@233@01 self_1)))
      (img@234@01 self_1)
      (= self_1 (inv@233@01 self_1)))
    ($Perm.min
      (ite
        (and
          (img@107@01 self_1)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@106@01 self_1)) (as Ticket<PyType>  PyType))
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
              (inv@106@01 self_1))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@236@01 ((self_1 $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@233@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          (inv@233@01 self_1)))
      (img@234@01 self_1)
      (= self_1 (inv@233@01 self_1)))
    ($Perm.min
      (ite (= self_1 Ticket_res@131@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@235@01 self_1)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@107@01 self_1)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@106@01 self_1)) (as Ticket<PyType>  PyType))
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
              (inv@106@01 self_1))))
        $Perm.Write
        $Perm.No)
      (pTaken@235@01 self_1))
    $Perm.No)
  
  :qid |quant-u-2947|))))
(check-sat)
; unsat
(pop) ; 11
; 0.05s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@233@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          (inv@233@01 self_1)))
      (img@234@01 self_1)
      (= self_1 (inv@233@01 self_1)))
    (= (- $Perm.Write (pTaken@235@01 self_1)) $Perm.No))
  
  :qid |quant-u-2948|))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@236@01 Ticket_res@131@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@233@01 self_1)) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          (inv@233@01 self_1)))
      (img@234@01 self_1)
      (= self_1 (inv@233@01 self_1)))
    (=
      (- (- $Perm.Write (pTaken@235@01 self_1)) (pTaken@236@01 self_1))
      $Perm.No))
  
  :qid |quant-u-2950|))))
(check-sat)
; unsat
(pop) ; 11
; 0.03s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const lambda46_30$t@237@01 $Ref)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null)
; [eval] issubtype(typeof(lambda46_30$t), Ticket())
; [eval] typeof(lambda46_30$t)
; [eval] Ticket()
(push) ; 12
; [then-branch: 279 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@237@01), Ticket[PyType])) | live]
; [else-branch: 279 | issubtype[Bool](typeof[PyType](lambda46_30$t@237@01), Ticket[PyType]) | live]
(push) ; 13
; [then-branch: 279 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@237@01), Ticket[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@237@01) (as Ticket<PyType>  PyType))))
(pop) ; 13
(push) ; 13
; [else-branch: 279 | issubtype[Bool](typeof[PyType](lambda46_30$t@237@01), Ticket[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda46_30$t@237@01) (as Ticket<PyType>  PyType)))
; [eval] (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] _checkDefined(res, 7562610)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [then-branch: 280 | !(lambda46_30$t@237@01 in First:(Second:(Second:(Second:($t@198@01))))) | live]
; [else-branch: 280 | lambda46_30$t@237@01 in First:(Second:(Second:(Second:($t@198@01)))) | live]
(push) ; 15
; [then-branch: 280 | !(lambda46_30$t@237@01 in First:(Second:(Second:(Second:($t@198@01)))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@237@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 280 | lambda46_30$t@237@01 in First:(Second:(Second:(Second:($t@198@01))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
  lambda46_30$t@237@01))
; [eval] code_1 != null
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@237@01)
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
      lambda46_30$t@237@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@237@01) (as Ticket<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@237@01) (as Ticket<PyType>  PyType))
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
        lambda46_30$t@237@01)
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t@237@01))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@237@01) (as Ticket<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@237@01) (as Ticket<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@237@01) (as Ticket<PyType>  PyType))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
      lambda46_30$t@237@01)
    (not (= code_0@34@01 $Ref.null)))))
(pop) ; 11
(declare-fun inv@238@01 ($Ref) $Ref)
(declare-fun img@239@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda46_30$t@237@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@237@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t@237@01)
        (not (= code_0@34@01 $Ref.null))))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@237@01) (as Ticket<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@237@01) (as Ticket<PyType>  PyType))
          (or
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
              lambda46_30$t@237@01)
            (not
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
                lambda46_30$t@237@01)))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@237@01) (as Ticket<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@237@01) (as Ticket<PyType>  PyType))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@237@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@237@01))
  :qid |Ticket_discount_code-aux|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((lambda46_30$t1@237@01 $Ref) (lambda46_30$t2@237@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t1@237@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            lambda46_30$t1@237@01)
          (not (= code_0@34@01 $Ref.null))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t2@237@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            lambda46_30$t2@237@01)
          (not (= code_0@34@01 $Ref.null))))
      (= lambda46_30$t1@237@01 lambda46_30$t2@237@01))
    (= lambda46_30$t1@237@01 lambda46_30$t2@237@01))
  
  :qid |Ticket_discount_code-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda46_30$t@237@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@237@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t@237@01)
        (not (= code_0@34@01 $Ref.null))))
    (and
      (= (inv@238@01 lambda46_30$t@237@01) lambda46_30$t@237@01)
      (img@239@01 lambda46_30$t@237@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@237@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@237@01))
  :qid |Ticket_discount_code-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@239@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@238@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            (inv@238@01 r))
          (not (= code_0@34@01 $Ref.null)))))
    (= (inv@238@01 r) r))
  :pattern ((inv@238@01 r))
  :qid |Ticket_discount_code-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@240@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@238@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            (inv@238@01 r))
          (not (= code_0@34@01 $Ref.null))))
      (img@239@01 r)
      (= r (inv@238@01 r)))
    ($Perm.min
      (ite
        (and
          (img@110@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
            (and
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
                (inv@109@01 r))
              (not (= code_0@34@01 $Ref.null)))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@110@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@109@01 r)) (as Ticket<PyType>  PyType))
            (and
              (Seq_contains
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
                (inv@109@01 r))
              (not (= code_0@34@01 $Ref.null)))))
        $Perm.Write
        $Perm.No)
      (pTaken@240@01 r))
    $Perm.No)
  
  :qid |quant-u-2953|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@238@01 r)) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            (inv@238@01 r))
          (not (= code_0@34@01 $Ref.null))))
      (img@239@01 r)
      (= r (inv@238@01 r)))
    (= (- $Perm.Write (pTaken@240@01 r)) $Perm.No))
  
  :qid |quant-u-2954|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forall lambda46_30$t: Ref :: { (lambda46_30$t in _checkDefined(res, 7562610).list_acc) } issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null) ==> issubtype(typeof(lambda46_30$t.Ticket_discount_code), str()))
(declare-const lambda46_30$t@241@01 $Ref)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null) ==> issubtype(typeof(lambda46_30$t.Ticket_discount_code), str())
; [eval] issubtype(typeof(lambda46_30$t), Ticket()) && ((lambda46_30$t in _checkDefined(res, 7562610).list_acc) && code_1 != null)
; [eval] issubtype(typeof(lambda46_30$t), Ticket())
; [eval] typeof(lambda46_30$t)
; [eval] Ticket()
(push) ; 12
; [then-branch: 281 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@241@01), Ticket[PyType])) | live]
; [else-branch: 281 | issubtype[Bool](typeof[PyType](lambda46_30$t@241@01), Ticket[PyType]) | live]
(push) ; 13
; [then-branch: 281 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@241@01), Ticket[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))))
(pop) ; 13
(push) ; 13
; [else-branch: 281 | issubtype[Bool](typeof[PyType](lambda46_30$t@241@01), Ticket[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType)))
; [eval] (lambda46_30$t in _checkDefined(res, 7562610).list_acc)
; [eval] _checkDefined(res, 7562610)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [then-branch: 282 | !(lambda46_30$t@241@01 in First:(Second:(Second:(Second:($t@198@01))))) | live]
; [else-branch: 282 | lambda46_30$t@241@01 in First:(Second:(Second:(Second:($t@198@01)))) | live]
(push) ; 15
; [then-branch: 282 | !(lambda46_30$t@241@01 in First:(Second:(Second:(Second:($t@198@01)))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@241@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 282 | lambda46_30$t@241@01 in First:(Second:(Second:(Second:($t@198@01))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
  lambda46_30$t@241@01))
; [eval] code_1 != null
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@241@01)
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
      lambda46_30$t@241@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
        lambda46_30$t@241@01)
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t@241@01))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType)))))
(push) ; 12
; [then-branch: 283 | issubtype[Bool](typeof[PyType](lambda46_30$t@241@01), Ticket[PyType]) && lambda46_30$t@241@01 in First:(Second:(Second:(Second:($t@198@01)))) && code_0@34@01 != Null | live]
; [else-branch: 283 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@241@01), Ticket[PyType]) && lambda46_30$t@241@01 in First:(Second:(Second:(Second:($t@198@01)))) && code_0@34@01 != Null) | live]
(push) ; 13
; [then-branch: 283 | issubtype[Bool](typeof[PyType](lambda46_30$t@241@01), Ticket[PyType]) && lambda46_30$t@241@01 in First:(Second:(Second:(Second:($t@198@01)))) && code_0@34@01 != Null]
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
      lambda46_30$t@241@01)
    (not (= code_0@34@01 $Ref.null)))))
; [eval] issubtype(typeof(lambda46_30$t.Ticket_discount_code), str())
; [eval] typeof(lambda46_30$t.Ticket_discount_code)
(push) ; 14
(assert (not (and
  (img@110@01 lambda46_30$t@241@01)
  (and
    (issubtype<Bool> (typeof<PyType> (inv@109@01 lambda46_30$t@241@01)) (as Ticket<PyType>  PyType))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))
        (inv@109@01 lambda46_30$t@241@01))
      (not (= code_0@34@01 $Ref.null)))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] str()
(pop) ; 13
(push) ; 13
; [else-branch: 283 | !(issubtype[Bool](typeof[PyType](lambda46_30$t@241@01), Ticket[PyType]) && lambda46_30$t@241@01 in First:(Second:(Second:(Second:($t@198@01)))) && code_0@34@01 != Null)]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
        lambda46_30$t@241@01)
      (not (= code_0@34@01 $Ref.null))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
        lambda46_30$t@241@01)
      (not (= code_0@34@01 $Ref.null))))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
      lambda46_30$t@241@01)
    (not (= code_0@34@01 $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t@241@01)
        (not (= code_0@34@01 $Ref.null)))))
  (and
    (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
        lambda46_30$t@241@01)
      (not (= code_0@34@01 $Ref.null))))))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda46_30$t@241@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
        (or
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            lambda46_30$t@241@01)
          (not
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
              lambda46_30$t@241@01)))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            lambda46_30$t@241@01)
          (not (= code_0@34@01 $Ref.null))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t@241@01)
        (not (= code_0@34@01 $Ref.null))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
              lambda46_30$t@241@01)
            (not (= code_0@34@01 $Ref.null)))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            lambda46_30$t@241@01)
          (not (= code_0@34@01 $Ref.null))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@241@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@241@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802-aux|)))
(assert (forall ((lambda46_30$t@241@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
        (or
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            lambda46_30$t@241@01)
          (not
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
              lambda46_30$t@241@01)))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            lambda46_30$t@241@01)
          (not (= code_0@34@01 $Ref.null))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t@241@01)
        (not (= code_0@34@01 $Ref.null))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
              lambda46_30$t@241@01)
            (not (= code_0@34@01 $Ref.null)))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
            lambda46_30$t@241@01)
          (not (= code_0@34@01 $Ref.null))))))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@241@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802-aux|)))
(push) ; 11
(assert (not (forall ((lambda46_30$t@241@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t@241@01)
        (not (= code_0@34@01 $Ref.null))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Ticket_discount_code ($SortWrappers.$SnapTo$FVF<Ticket_discount_code> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))) lambda46_30$t@241@01)) (as str<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@241@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@241@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@241@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda46_30$t@241@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda46_30$t@241@01) (as Ticket<PyType>  PyType))
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
          lambda46_30$t@241@01)
        (not (= code_0@34@01 $Ref.null))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Ticket_discount_code ($SortWrappers.$SnapTo$FVF<Ticket_discount_code> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))))))))))))))))))))))) lambda46_30$t@241@01)) (as str<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@241@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@01)))))
    lambda46_30$t@241@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@716@529@716@802|)))
; [eval] iter_err == null ==> int___sub__(list___len__(_checkDefined(seats, 495873779059)), list___len__(_checkDefined(res, 7562610))) > 0
; [eval] iter_err == null
(push) ; 11
; [then-branch: 284 | _err@201@01 == Null | dead]
; [else-branch: 284 | _err@201@01 != Null | live]
(push) ; 12
; [else-branch: 284 | _err@201@01 != Null]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))))
(push) ; 11
; [then-branch: 285 | False | dead]
; [else-branch: 285 | True | live]
(push) ; 12
; [else-branch: 285 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 286 | True | live]
; [else-branch: 286 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 286 | True]
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
(push) ; 13
; [then-branch: 287 | False | live]
; [else-branch: 287 | True | live]
(push) ; 14
; [then-branch: 287 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 287 | True]
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
(push) ; 15
; [then-branch: 288 | False | live]
; [else-branch: 288 | True | live]
(push) ; 16
; [then-branch: 288 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 288 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
(push) ; 17
; [then-branch: 289 | False | live]
; [else-branch: 289 | True | live]
(push) ; 18
; [then-branch: 289 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 289 | True]
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 255 | _err@201@01 == Null]
(assert (= _err@201@01 $Ref.null))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 198 | code_0@34@01 != Null]
(assert (not (= code_0@34@01 $Ref.null)))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 102 | iter_err@97@01 != Null]
(assert (not (= iter_err@97@01 $Ref.null)))
(pop) ; 8
(push) ; 8
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@71@01 7562610) _res@65@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _res@77@01 _res@65@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= iterable@75@01 _res@65@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))))))))))))))))))))))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))
; [eval] !(iter_err == null)
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= iter_err@97@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= iter_err@97@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 290 | iter_err@97@01 != Null | live]
; [else-branch: 290 | iter_err@97@01 == Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 290 | iter_err@97@01 != Null]
(assert (not (= iter_err@97@01 $Ref.null)))
; [exec]
; exhale perm(MustTerminate(_cthread_160)) > none ==>
;   acc(MustTerminate(_cthread_160), perm(MustTerminate(_cthread_160)) -
;   _loop_original_must_terminate)
; [eval] perm(MustTerminate(_cthread_160)) > none
; [eval] perm(MustTerminate(_cthread_160))
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 291 | True | live]
; [else-branch: 291 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 291 | True]
; [eval] perm(MustTerminate(_cthread_160)) - _loop_original_must_terminate
; [eval] perm(MustTerminate(_cthread_160))
(push) ; 10
(assert (not (or
  (=
    (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@91@01)
    $Perm.No)
  (<
    $Perm.No
    (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@91@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@91@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@91@01)))))
(set-option :timeout 0)
(push) ; 10
(assert (not (or
  (=
    (-
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@91@01)
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@91@01)))
    $Perm.No)
  (<
    (-
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@91@01)
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@91@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [exec]
; _cwl_160 := Iterator___del__(_cthread_160, _method_measures_160, _residue_161,
;   iter)
; [eval] _cthread_150 != null
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(push) ; 10
(pop) ; 10
; Joined path conditions
; [eval] issubtype(typeof(_cthread_150), Thread_0())
; [eval] typeof(_cthread_150)
; [eval] Thread_0()
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(declare-const _current_wait_level_150@242@01 $Perm)
(declare-const $t@243@01 $Snap)
(assert (= $t@243@01 ($Snap.combine ($Snap.first $t@243@01) ($Snap.second $t@243@01))))
(assert (= ($Snap.first $t@243@01) $Snap.unit))
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_150)
(assert (=
  ($Snap.second $t@243@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@243@01))
    ($Snap.second ($Snap.second $t@243@01)))))
(assert (= ($Snap.first ($Snap.second $t@243@01)) $Snap.unit))
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_150)
(assert (=
  ($Snap.second ($Snap.second $t@243@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@243@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@243@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@243@01))) $Snap.unit))
; [eval] _residue_150 <= _current_wait_level_150
(assert (<= _residue_161@59@01 _current_wait_level_150@242@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@243@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@243@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@243@01)))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@243@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@243@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@243@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@243@01))))))))
; [eval] issubtype(typeof(self.__container), list(list_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] list(list_arg(typeof(self.__container), 0))
; [eval] list_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))) 0))))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))) 0)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 292 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))), 0))) | live]
; [else-branch: 292 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))), 0)))) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 292 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))) 0))))
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  iterable@75@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@243@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@243@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@243@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@243@01)))))))))
; [eval] issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1)))
; [eval] typeof(self.__container)
; [eval] dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))
; [eval] dict_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
; [eval] dict_arg(typeof(self.__container), 1)
; [eval] typeof(self.__container)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))) 1))))))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 293 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))), 1))) | dead]
; [else-branch: 293 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))), 1)))) | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 293 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))), 1))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@243@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))) 0))))))
(check-sat)
; unsat
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 294 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))), 0))) | dead]
; [else-branch: 294 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 294 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@78@01))))))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@78@01)))))))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@243@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; label post_loop
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; _res := _checkDefined(res, 7562610)
; [eval] _checkDefined(res, 7562610)
(set-option :timeout 0)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(declare-const _res@244@01 $Ref)
(assert (= _res@244@01 (_checkDefined $Snap.unit res@71@01 7562610)))
; [exec]
; label __end
; [eval] _err == null ==> issubtype(typeof(_res), list(Ticket()))
; [eval] _err == null
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 295 | True | live]
; [else-branch: 295 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 295 | True]
; [eval] issubtype(typeof(_res), list(Ticket()))
; [eval] typeof(_res)
; [eval] list(Ticket())
; [eval] Ticket()
(pop) ; 14
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> _res@244@01) (list<PyType> (as Ticket<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@244@01) (list<PyType> (as Ticket<PyType>  PyType))))
; [eval] _err != null && issubtype(typeof(_err), SoldoutException()) ==> true
; [eval] _err != null && issubtype(typeof(_err), SoldoutException())
; [eval] _err != null
(push) ; 13
; [then-branch: 296 | False | dead]
; [else-branch: 296 | True | live]
(push) ; 14
; [else-branch: 296 | True]
(pop) ; 14
(pop) ; 13
; Joined path conditions
; [eval] _err != null ==> issubtype(typeof(_err), SoldoutException())
; [eval] _err != null
(push) ; 13
; [then-branch: 297 | False | dead]
; [else-branch: 297 | True | live]
(push) ; 14
; [else-branch: 297 | True]
(pop) ; 14
(pop) ; 13
; Joined path conditions
; [eval] (forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false)
; [eval] (forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false)
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false)
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false)
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 290 | iter_err@97@01 == Null]
(assert (= iter_err@97@01 $Ref.null))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@81@01 $Ref.null)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 298 | _err@81@01 != Null | dead]
; [else-branch: 298 | _err@81@01 == Null | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 298 | _err@81@01 == Null]
(assert (= _err@81@01 $Ref.null))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 17 | _err@66@01 != Null]
(assert (not (= _err@66@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
  $Snap.unit))
; [eval] _err == null ==> int___eq__(__prim__int___box__(list___len__(_res)), num_0)
; [eval] _err == null
(push) ; 4
; [then-branch: 299 | _err@66@01 == Null | dead]
; [else-branch: 299 | _err@66@01 != Null | live]
(push) ; 5
; [else-branch: 299 | _err@66@01 != Null]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
  $Snap.unit))
; [eval] _err != null && issubtype(typeof(_err), SoldoutException()) ==> true
; [eval] _err != null && issubtype(typeof(_err), SoldoutException())
; [eval] _err != null
(push) ; 4
; [then-branch: 300 | _err@66@01 == Null | live]
; [else-branch: 300 | _err@66@01 != Null | live]
(push) ; 5
; [then-branch: 300 | _err@66@01 == Null]
(assert (= _err@66@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 300 | _err@66@01 != Null]
; [eval] issubtype(typeof(_err), SoldoutException())
; [eval] typeof(_err)
; [eval] SoldoutException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@66@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@66@01) (as SoldoutException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not (= _err@66@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@66@01) (as SoldoutException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 301 | _err@66@01 != Null && issubtype[Bool](typeof[PyType](_err@66@01), SoldoutException[PyType]) | live]
; [else-branch: 301 | !(_err@66@01 != Null && issubtype[Bool](typeof[PyType](_err@66@01), SoldoutException[PyType])) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 301 | _err@66@01 != Null && issubtype[Bool](typeof[PyType](_err@66@01), SoldoutException[PyType])]
(assert (and
  (not (= _err@66@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@66@01) (as SoldoutException<PyType>  PyType))))
(pop) ; 5
(push) ; 5
; [else-branch: 301 | !(_err@66@01 != Null && issubtype[Bool](typeof[PyType](_err@66@01), SoldoutException[PyType]))]
(assert (not
  (and
    (not (= _err@66@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@66@01) (as SoldoutException<PyType>  PyType)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= _err@66@01 $Ref.null))
      (issubtype<Bool> (typeof<PyType> _err@66@01) (as SoldoutException<PyType>  PyType))))
  (and
    (not (= _err@66@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@66@01) (as SoldoutException<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), SoldoutException())
; [eval] _err != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@66@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@66@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 302 | _err@66@01 != Null | live]
; [else-branch: 302 | _err@66@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 302 | _err@66@01 != Null]
(assert (not (= _err@66@01 $Ref.null)))
; [eval] issubtype(typeof(_err), SoldoutException())
; [eval] typeof(_err)
; [eval] SoldoutException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not (= _err@66@01 $Ref.null)))
(assert (=>
  (not (= _err@66@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@66@01) (as SoldoutException<PyType>  PyType))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] _err != null
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@66@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 303 | _err@66@01 != Null | live]
; [else-branch: 303 | _err@66@01 == Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 303 | _err@66@01 != Null]
; [exec]
; _err := _err
; [exec]
; label __end
; [eval] _err == null ==> issubtype(typeof(_res), list(Ticket()))
; [eval] _err == null
(push) ; 5
; [then-branch: 304 | _err@66@01 == Null | dead]
; [else-branch: 304 | _err@66@01 != Null | live]
(push) ; 6
; [else-branch: 304 | _err@66@01 != Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] _err != null && issubtype(typeof(_err), SoldoutException()) ==> true
; [eval] _err != null && issubtype(typeof(_err), SoldoutException())
; [eval] _err != null
(push) ; 5
; [then-branch: 305 | _err@66@01 == Null | live]
; [else-branch: 305 | _err@66@01 != Null | live]
(push) ; 6
; [then-branch: 305 | _err@66@01 == Null]
(assert (= _err@66@01 $Ref.null))
(pop) ; 6
(push) ; 6
; [else-branch: 305 | _err@66@01 != Null]
; [eval] issubtype(typeof(_err), SoldoutException())
; [eval] typeof(_err)
; [eval] SoldoutException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@66@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@66@01) (as SoldoutException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not (= _err@66@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@66@01) (as SoldoutException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 306 | _err@66@01 != Null && issubtype[Bool](typeof[PyType](_err@66@01), SoldoutException[PyType]) | live]
; [else-branch: 306 | !(_err@66@01 != Null && issubtype[Bool](typeof[PyType](_err@66@01), SoldoutException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 306 | _err@66@01 != Null && issubtype[Bool](typeof[PyType](_err@66@01), SoldoutException[PyType])]
(assert (and
  (not (= _err@66@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@66@01) (as SoldoutException<PyType>  PyType))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (and
  (not (= _err@66@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@66@01) (as SoldoutException<PyType>  PyType))))
; [eval] _err != null ==> issubtype(typeof(_err), SoldoutException())
; [eval] _err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@66@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 307 | _err@66@01 != Null | live]
; [else-branch: 307 | _err@66@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 307 | _err@66@01 != Null]
; [eval] issubtype(typeof(_err), SoldoutException())
; [eval] typeof(_err)
; [eval] SoldoutException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] (forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false)
; [eval] (forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false)
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false)
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false)
(pop) ; 4
; [eval] !(_err != null)
; [eval] _err != null
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@66@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 308 | _err@66@01 == Null | dead]
; [else-branch: 308 | _err@66@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 308 | _err@66@01 != Null]
(assert (not (= _err@66@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- Ticket___init__ ----------
(declare-const _cthread_156@245@01 $Ref)
(declare-const _caller_measures_156@246@01 Seq<Measure$>)
(declare-const _residue_156@247@01 $Perm)
(declare-const self@248@01 $Ref)
(declare-const show@249@01 $Ref)
(declare-const row@250@01 $Ref)
(declare-const seat@251@01 $Ref)
(declare-const _current_wait_level_156@252@01 $Perm)
(declare-const _cthread_156@253@01 $Ref)
(declare-const _caller_measures_156@254@01 Seq<Measure$>)
(declare-const _residue_156@255@01 $Perm)
(declare-const self@256@01 $Ref)
(declare-const show@257@01 $Ref)
(declare-const row@258@01 $Ref)
(declare-const seat@259@01 $Ref)
(declare-const _current_wait_level_156@260@01 $Perm)
(push) ; 1
(declare-const $t@261@01 $Snap)
(assert (= $t@261@01 ($Snap.combine ($Snap.first $t@261@01) ($Snap.second $t@261@01))))
(assert (= ($Snap.first $t@261@01) $Snap.unit))
; [eval] _cthread_156 != null
(assert (not (= _cthread_156@253@01 $Ref.null)))
(assert (=
  ($Snap.second $t@261@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@261@01))
    ($Snap.second ($Snap.second $t@261@01)))))
(assert (= ($Snap.first ($Snap.second $t@261@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_156@253@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@261@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@261@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@261@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@261@01))) $Snap.unit))
; [eval] self != null
(assert (not (= self@256@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@261@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@261@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01))))))))
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01)))))))))
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01))))))))))
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self), Ticket())
; [eval] typeof(self)
; [eval] Ticket()
(assert (issubtype<Bool> (typeof<PyType> self@256@01) (as Ticket<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01)))))))))
  $Snap.unit))
; [eval] issubtype(typeof(show), int())
; [eval] typeof(show)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> show@257@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(row), int())
; [eval] typeof(row)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> row@258@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01)))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(seat), int())
; [eval] typeof(seat)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> seat@259@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01))))))))))))
  $Snap.unit))
; [eval] self != null
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@261@01)))))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@262@01 $Snap)
(assert (= $t@262@01 ($Snap.combine ($Snap.first $t@262@01) ($Snap.second $t@262@01))))
(assert (= ($Snap.first $t@262@01) $Snap.unit))
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _current_wait_level_156)
(assert (=
  ($Snap.second $t@262@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@262@01))
    ($Snap.second ($Snap.second $t@262@01)))))
(assert (= ($Snap.first ($Snap.second $t@262@01)) $Snap.unit))
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _current_wait_level_156)
(assert (=
  ($Snap.second ($Snap.second $t@262@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@262@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@262@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@262@01))) $Snap.unit))
; [eval] _residue_156 <= _current_wait_level_156
(assert (<= _residue_156@255@01 _current_wait_level_156@260@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@262@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@262@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@262@01)))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@263@01 $Ref)
; [exec]
; var self_2: Ref
(declare-const self_2@264@01 $Ref)
; [exec]
; var show_0: Ref
(declare-const show_0@265@01 $Ref)
; [exec]
; var row_1: Ref
(declare-const row_1@266@01 $Ref)
; [exec]
; var seat_1: Ref
(declare-const seat_1@267@01 $Ref)
; [exec]
; var _cwl_156: Perm
(declare-const _cwl_156@268@01 $Perm)
; [exec]
; var _method_measures_156: Seq[Measure$]
(declare-const _method_measures_156@269@01 Seq<Measure$>)
; [exec]
; _method_measures_156 := Seq(Measure$create(true, _cthread_156, 1))
; [eval] Seq(Measure$create(true, _cthread_156, 1))
; [eval] Measure$create(true, _cthread_156, 1)
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_156@253@01 1)))
  1))
(declare-const _method_measures_156@270@01 Seq<Measure$>)
(assert (=
  _method_measures_156@270@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_156@253@01 1))))
; [exec]
; inhale typeof(self) == Ticket()
(declare-const $t@271@01 $Snap)
(assert (= $t@271@01 $Snap.unit))
; [eval] typeof(self) == Ticket()
; [eval] typeof(self)
; [eval] Ticket()
(assert (= (typeof<PyType> self@256@01) (as Ticket<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_2 := self
; [exec]
; show_0 := show
; [exec]
; row_1 := row
; [exec]
; seat_1 := seat
; [eval] perm(_MaySet(self_2, 2036589462893379814238060391131476)) > none
; [eval] perm(_MaySet(self_2, 2036589462893379814238060391131476))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 309 | True | live]
; [else-branch: 309 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 309 | True]
; [exec]
; exhale acc(_MaySet(self_2, 2036589462893379814238060391131476), write)
; [exec]
; inhale acc(self_2.Ticket_show_id, write)
(declare-const $t@272@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self_2.Ticket_show_id := show_0
; [eval] perm(_MaySet(self_2, 564017441487491594152276)) > none
; [eval] perm(_MaySet(self_2, 564017441487491594152276))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 310 | True | live]
; [else-branch: 310 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 310 | True]
; [exec]
; exhale acc(_MaySet(self_2, 564017441487491594152276), write)
; [exec]
; inhale acc(self_2.Ticket_row, write)
(declare-const $t@273@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self_2.Ticket_row := tuple___getitem__(tuple___create2__(row_1, seat_1, int(),
;   int(), 0), 0)
; [eval] tuple___getitem__(tuple___create2__(row_1, seat_1, int(), int(), 0), 0)
; [eval] tuple___create2__(row_1, seat_1, int(), int(), 0)
; [eval] int()
; [eval] int()
(set-option :timeout 0)
(push) ; 5
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0))
(pop) ; 5
; Joined path conditions
(assert (tuple___create2__%precondition ($Snap.combine $Snap.unit $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0))
(push) ; 5
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 6
(assert (tuple___len__%precondition $Snap.unit (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))
(pop) ; 6
; Joined path conditions
(assert (tuple___len__%precondition $Snap.unit (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))
(declare-const letvar@274@01 Int)
(assert (=
  (as letvar@274@01  Int)
  (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0))))
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 311 | True | live]
; [else-branch: 311 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 311 | True]
; [eval] key < ln
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
; [then-branch: 312 | !(0 < tuple___len__(_, tuple___create2__((_, _), row@258@01, seat@259@01, int[PyType], int[PyType], 0))) | live]
; [else-branch: 312 | 0 < tuple___len__(_, tuple___create2__((_, _), row@258@01, seat@259@01, int[PyType], int[PyType], 0)) | live]
(push) ; 7
; [then-branch: 312 | !(0 < tuple___len__(_, tuple___create2__((_, _), row@258@01, seat@259@01, int[PyType], int[PyType], 0)))]
(assert (not
  (<
    0
    (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
      $Snap.unit
      $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))))
(pop) ; 7
(push) ; 7
; [else-branch: 312 | 0 < tuple___len__(_, tuple___create2__((_, _), row@258@01, seat@259@01, int[PyType], int[PyType], 0))]
(assert (<
  0
  (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0))))
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 8
; [then-branch: 313 | False | dead]
; [else-branch: 313 | True | live]
(push) ; 9
; [else-branch: 313 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    0
    (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
      $Snap.unit
      $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))
  (not
    (<
      0
      (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
        $Snap.unit
        $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0))))))
(push) ; 6
(assert (not (<
  0
  (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<
  0
  (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0))))
(assert (tuple___getitem__%precondition $Snap.unit (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0) 0))
(pop) ; 5
; Joined path conditions
(assert (and
  (tuple___len__%precondition $Snap.unit (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0))
  (=
    (as letvar@274@01  Int)
    (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
      $Snap.unit
      $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))
  (or
    (<
      0
      (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
        $Snap.unit
        $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))
    (not
      (<
        0
        (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
          $Snap.unit
          $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))))
  (<
    0
    (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
      $Snap.unit
      $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))
  (tuple___getitem__%precondition $Snap.unit (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0) 0)))
(declare-const Ticket_row@275@01 $Ref)
(assert (=
  Ticket_row@275@01
  (tuple___getitem__ $Snap.unit (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0) 0)))
; [eval] perm(_MaySet(self_2, 140695336058778200607779156)) > none
; [eval] perm(_MaySet(self_2, 140695336058778200607779156))
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 314 | True | live]
; [else-branch: 314 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 314 | True]
; [exec]
; exhale acc(_MaySet(self_2, 140695336058778200607779156), write)
; [exec]
; inhale acc(self_2.Ticket_seat, write)
(declare-const $t@276@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self_2.Ticket_seat := tuple___getitem__(tuple___create2__(row_1, seat_1, int(),
;   int(), 0), 1)
; [eval] tuple___getitem__(tuple___create2__(row_1, seat_1, int(), int(), 0), 1)
; [eval] tuple___create2__(row_1, seat_1, int(), int(), 0)
; [eval] int()
; [eval] int()
(set-option :timeout 0)
(push) ; 6
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const letvar@277@01 Int)
(assert (=
  (as letvar@277@01  Int)
  (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0))))
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 315 | True | live]
; [else-branch: 315 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 315 | True]
; [eval] key < ln
(pop) ; 8
(pop) ; 7
; Joined path conditions
(push) ; 7
; [then-branch: 316 | !(1 < tuple___len__(_, tuple___create2__((_, _), row@258@01, seat@259@01, int[PyType], int[PyType], 0))) | live]
; [else-branch: 316 | 1 < tuple___len__(_, tuple___create2__((_, _), row@258@01, seat@259@01, int[PyType], int[PyType], 0)) | live]
(push) ; 8
; [then-branch: 316 | !(1 < tuple___len__(_, tuple___create2__((_, _), row@258@01, seat@259@01, int[PyType], int[PyType], 0)))]
(assert (not
  (<
    1
    (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
      $Snap.unit
      $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))))
(pop) ; 8
(push) ; 8
; [else-branch: 316 | 1 < tuple___len__(_, tuple___create2__((_, _), row@258@01, seat@259@01, int[PyType], int[PyType], 0))]
(assert (<
  1
  (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0))))
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 9
; [then-branch: 317 | False | dead]
; [else-branch: 317 | True | live]
(push) ; 10
; [else-branch: 317 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    1
    (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
      $Snap.unit
      $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))
  (not
    (<
      1
      (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
        $Snap.unit
        $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0))))))
(push) ; 7
(assert (not (<
  1
  (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<
  1
  (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0))))
(assert (tuple___getitem__%precondition $Snap.unit (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0) 1))
(pop) ; 6
; Joined path conditions
(assert (and
  (=
    (as letvar@277@01  Int)
    (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
      $Snap.unit
      $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))
  (or
    (<
      1
      (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
        $Snap.unit
        $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))
    (not
      (<
        1
        (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
          $Snap.unit
          $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))))
  (<
    1
    (tuple___len__ $Snap.unit (tuple___create2__ ($Snap.combine
      $Snap.unit
      $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))
  (tuple___getitem__%precondition $Snap.unit (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0) 1)))
(declare-const Ticket_seat@278@01 $Ref)
(assert (=
  Ticket_seat@278@01
  (tuple___getitem__ $Snap.unit (tuple___create2__ ($Snap.combine
    $Snap.unit
    $Snap.unit) row@258@01 seat@259@01 (as int<PyType>  PyType) (as int<PyType>  PyType) 0) 1)))
; [exec]
; fold acc(Ticket_state(self_2), write)
; [eval] issubtype(typeof(self_1), Ticket())
; [eval] typeof(self_1)
; [eval] Ticket()
; [eval] issubtype(typeof(self_1), Ticket())
; [eval] typeof(self_1)
; [eval] Ticket()
(push) ; 6
(set-option :timeout 10)
(assert (not (not (issubtype<Bool> (typeof<PyType> self@256@01) (as Ticket<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 318 | issubtype[Bool](typeof[PyType](self@256@01), Ticket[PyType]) | live]
; [else-branch: 318 | !(issubtype[Bool](typeof[PyType](self@256@01), Ticket[PyType])) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 318 | issubtype[Bool](typeof[PyType](self@256@01), Ticket[PyType])]
; [eval] issubtype(typeof(self_1.Ticket_show_id), int())
; [eval] typeof(self_1.Ticket_show_id)
; [eval] int()
; [eval] issubtype(typeof(self_1.Ticket_row), int())
; [eval] typeof(self_1.Ticket_row)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> Ticket_row@275@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Ticket_row@275@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_1.Ticket_seat), int())
; [eval] typeof(self_1.Ticket_seat)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> Ticket_seat@278@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Ticket_seat@278@01) (as int<PyType>  PyType)))
(assert (Ticket_state%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$RefTo$Snap show@257@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap Ticket_row@275@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.$RefTo$Snap Ticket_seat@278@01)
              $Snap.unit))))))) self@256@01))
; [exec]
; label __end
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false)
; [eval] (forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false)
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false)
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)
(pop) ; 6
(pop) ; 5
; [eval] !(perm(_MaySet(self_2, 140695336058778200607779156)) > none)
; [eval] perm(_MaySet(self_2, 140695336058778200607779156)) > none
; [eval] perm(_MaySet(self_2, 140695336058778200607779156))
; [then-branch: 319 | False | dead]
; [else-branch: 319 | True | live]
(push) ; 5
; [else-branch: 319 | True]
(pop) ; 5
(pop) ; 4
; [eval] !(perm(_MaySet(self_2, 564017441487491594152276)) > none)
; [eval] perm(_MaySet(self_2, 564017441487491594152276)) > none
; [eval] perm(_MaySet(self_2, 564017441487491594152276))
; [then-branch: 320 | False | dead]
; [else-branch: 320 | True | live]
(push) ; 4
; [else-branch: 320 | True]
(pop) ; 4
(pop) ; 3
; [eval] !(perm(_MaySet(self_2, 2036589462893379814238060391131476)) > none)
; [eval] perm(_MaySet(self_2, 2036589462893379814238060391131476)) > none
; [eval] perm(_MaySet(self_2, 2036589462893379814238060391131476))
; [then-branch: 321 | False | dead]
; [else-branch: 321 | True | live]
(push) ; 3
; [else-branch: 321 | True]
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- Ticket_set_discount ----------
(declare-const _cthread_157@279@01 $Ref)
(declare-const _caller_measures_157@280@01 Seq<Measure$>)
(declare-const _residue_157@281@01 $Perm)
(declare-const self_0@282@01 $Ref)
(declare-const code@283@01 $Ref)
(declare-const _current_wait_level_157@284@01 $Perm)
(declare-const _cthread_157@285@01 $Ref)
(declare-const _caller_measures_157@286@01 Seq<Measure$>)
(declare-const _residue_157@287@01 $Perm)
(declare-const self_0@288@01 $Ref)
(declare-const code@289@01 $Ref)
(declare-const _current_wait_level_157@290@01 $Perm)
(push) ; 1
(declare-const $t@291@01 $Snap)
(assert (= $t@291@01 ($Snap.combine ($Snap.first $t@291@01) ($Snap.second $t@291@01))))
(assert (= ($Snap.first $t@291@01) $Snap.unit))
; [eval] _cthread_157 != null
(assert (not (= _cthread_157@285@01 $Ref.null)))
(assert (=
  ($Snap.second $t@291@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@291@01))
    ($Snap.second ($Snap.second $t@291@01)))))
(assert (= ($Snap.first ($Snap.second $t@291@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_157@285@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@291@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@291@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@291@01))) $Snap.unit))
; [eval] issubtype(typeof(self_0), Ticket())
; [eval] typeof(self_0)
; [eval] Ticket()
(assert (issubtype<Bool> (typeof<PyType> self_0@288@01) (as Ticket<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@291@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))
  $Snap.unit))
; [eval] issubtype(typeof(code), str())
; [eval] typeof(code)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> code@289@01) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))
  $Snap.unit))
; [eval] self_0 != null
(assert (not (= self_0@288@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@292@01 $Snap)
(assert (= $t@292@01 ($Snap.combine ($Snap.first $t@292@01) ($Snap.second $t@292@01))))
(assert (= ($Snap.first $t@292@01) $Snap.unit))
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) <= _current_wait_level_157)
(assert (=
  ($Snap.second $t@292@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@292@01))
    ($Snap.second ($Snap.second $t@292@01)))))
(assert (= ($Snap.first ($Snap.second $t@292@01)) $Snap.unit))
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) <= _current_wait_level_157)
(assert (=
  ($Snap.second ($Snap.second $t@292@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@292@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@292@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@292@01))) $Snap.unit))
; [eval] _residue_157 <= _current_wait_level_157
(assert (<= _residue_157@287@01 _current_wait_level_157@290@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@292@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@293@01 $Ref)
; [exec]
; var self_3: Ref
(declare-const self_3@294@01 $Ref)
; [exec]
; var code_2: Ref
(declare-const code_2@295@01 $Ref)
; [exec]
; var _cwl_157: Perm
(declare-const _cwl_157@296@01 $Perm)
; [exec]
; var _method_measures_157: Seq[Measure$]
(declare-const _method_measures_157@297@01 Seq<Measure$>)
; [exec]
; _method_measures_157 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_0) == Ticket()
(declare-const $t@298@01 $Snap)
(assert (= $t@298@01 $Snap.unit))
; [eval] typeof(self_0) == Ticket()
; [eval] typeof(self_0)
; [eval] Ticket()
(assert (= (typeof<PyType> self_0@288@01) (as Ticket<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_3 := self_0
; [exec]
; code_2 := code
; [eval] perm(_MaySet(self_3, 578847845651634811226368290157834565233854867796)) > none
; [eval] perm(_MaySet(self_3, 578847845651634811226368290157834565233854867796))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 322 | True | live]
; [else-branch: 322 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 322 | True]
; [exec]
; exhale acc(_MaySet(self_3, 578847845651634811226368290157834565233854867796), write)
; [exec]
; inhale acc(self_3.Ticket_discount_code, write)
(declare-const $t@299@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self_3.Ticket_discount_code := code_2
; [exec]
; label __end
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 3
; [eval] !(perm(_MaySet(self_3, 578847845651634811226368290157834565233854867796)) > none)
; [eval] perm(_MaySet(self_3, 578847845651634811226368290157834565233854867796)) > none
; [eval] perm(_MaySet(self_3, 578847845651634811226368290157834565233854867796))
; [then-branch: 323 | False | dead]
; [else-branch: 323 | True | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 323 | True]
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- main ----------
(declare-const _cthread_161@300@01 $Ref)
(declare-const _caller_measures_161@301@01 Seq<Measure$>)
(declare-const _residue_162@302@01 $Perm)
(declare-const _current_wait_level_161@303@01 $Perm)
(declare-const _cthread_161@304@01 $Ref)
(declare-const _caller_measures_161@305@01 Seq<Measure$>)
(declare-const _residue_162@306@01 $Perm)
(declare-const _current_wait_level_161@307@01 $Perm)
(push) ; 1
(declare-const $t@308@01 $Snap)
(assert (= $t@308@01 ($Snap.combine ($Snap.first $t@308@01) ($Snap.second $t@308@01))))
(assert (= ($Snap.first $t@308@01) $Snap.unit))
; [eval] _cthread_161 != null
(assert (not (= _cthread_161@304@01 $Ref.null)))
(assert (=
  ($Snap.second $t@308@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@308@01))
    ($Snap.second ($Snap.second $t@308@01)))))
(assert (= ($Snap.first ($Snap.second $t@308@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_161), Thread_0())
; [eval] typeof(_cthread_161)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_161@304@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@308@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@309@01 $Snap)
(assert (= $t@309@01 ($Snap.combine ($Snap.first $t@309@01) ($Snap.second $t@309@01))))
(assert (= ($Snap.first $t@309@01) $Snap.unit))
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: Level(_r_12) <= _current_wait_level_161)
(assert (=
  ($Snap.second $t@309@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@309@01))
    ($Snap.second ($Snap.second $t@309@01)))))
(assert (= ($Snap.first ($Snap.second $t@309@01)) $Snap.unit))
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: Level(_r_12) <= _current_wait_level_161)
(assert (=
  ($Snap.second ($Snap.second $t@309@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@309@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@309@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@309@01))) $Snap.unit))
; [eval] _residue_162 <= _current_wait_level_161
(assert (<= _residue_162@306@01 _current_wait_level_161@307@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@309@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var module_defined_0: Bool
(declare-const module_defined_0@310@01 Bool)
; [exec]
; var module_names_0: Set[_Name]
(declare-const module_names_0@311@01 Set<_Name>)
; [exec]
; var _cwl_161: Perm
(declare-const _cwl_161@312@01 $Perm)
; [exec]
; var _method_measures_161: Seq[Measure$]
(declare-const _method_measures_161@313@01 Seq<Measure$>)
; [exec]
; _method_measures_161 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; module_defined_0 := true
; [exec]
; module_names_0 := Set[_Name]()
; [eval] Set[_Name]()
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872323072689856351)))
; [eval] (module_names_0 union Set(_single(6872323072689856351)))
; [eval] Set(_single(6872323072689856351))
; [eval] _single(6872323072689856351)
(declare-const module_names_0@314@01 Set<_Name>)
(assert (=
  module_names_0@314@01
  (Set_union (as Set_empty  Set<_Name>) (Set_singleton (_single<_Name> 6872323072689856351)))))
; [exec]
; inhale acc(__file__()._val, 99 / 100) &&
;   (issubtype(typeof(__file__()._val), str()) &&
;   issubtype(typeof(__file__()._val), str()))
(declare-const $t@315@01 $Snap)
(assert (= $t@315@01 ($Snap.combine ($Snap.first $t@315@01) ($Snap.second $t@315@01))))
; [eval] __file__()
(push) ; 3
(assert (__file__%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (__file__%precondition $Snap.unit))
(assert (not (= (__file__ $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@315@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@315@01))
    ($Snap.second ($Snap.second $t@315@01)))))
(assert (= ($Snap.first ($Snap.second $t@315@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._val), str())
; [eval] typeof(__file__()._val)
; [eval] __file__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@315@01))) (as str<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@315@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._val), str())
; [eval] typeof(__file__()._val)
; [eval] __file__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872323076851130207)))
; [eval] (module_names_0 union Set(_single(6872323076851130207)))
; [eval] Set(_single(6872323076851130207))
; [eval] _single(6872323076851130207)
(declare-const module_names_0@316@01 Set<_Name>)
(assert (=
  module_names_0@316@01
  (Set_union module_names_0@314@01 (Set_singleton (_single<_Name> 6872323076851130207)))))
; [exec]
; inhale acc(__name__()._val, 99 / 100) &&
;   (issubtype(typeof(__name__()._val), str()) &&
;   (issubtype(typeof(__name__()._val), str()) &&
;   str___eq__(str___create__(8, 6872332955275845471), __name__()._val)))
(declare-const $t@317@01 $Snap)
(assert (= $t@317@01 ($Snap.combine ($Snap.first $t@317@01) ($Snap.second $t@317@01))))
; [eval] __name__()
(set-option :timeout 0)
(push) ; 3
(assert (__name__%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (__name__%precondition $Snap.unit))
(push) ; 3
(set-option :timeout 10)
(assert (not (= (__file__ $Snap.unit) (__name__ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= (__name__ $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@317@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@317@01))
    ($Snap.second ($Snap.second $t@317@01)))))
(assert (= ($Snap.first ($Snap.second $t@317@01)) $Snap.unit))
; [eval] issubtype(typeof(__name__()._val), str())
; [eval] typeof(__name__()._val)
; [eval] __name__()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@317@01))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@317@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@317@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@317@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@317@01))) $Snap.unit))
; [eval] issubtype(typeof(__name__()._val), str())
; [eval] typeof(__name__()._val)
; [eval] __name__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@317@01))) $Snap.unit))
; [eval] str___eq__(str___create__(8, 6872332955275845471), __name__()._val)
; [eval] str___create__(8, 6872332955275845471)
(push) ; 3
(assert (str___create__%precondition $Snap.unit 8 6872332955275845471))
(pop) ; 3
; Joined path conditions
(assert (str___create__%precondition $Snap.unit 8 6872332955275845471))
; [eval] __name__()
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@317@01))))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@317@01)))))
(assert (str___eq__ $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@317@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(8038062462289584464661321053517)))
; [eval] (module_names_0 union Set(_single(8038062462289584464661321053517)))
; [eval] Set(_single(8038062462289584464661321053517))
; [eval] _single(8038062462289584464661321053517)
(declare-const module_names_0@318@01 Set<_Name>)
(assert (=
  module_names_0@318@01
  (Set_union module_names_0@316@01 (Set_singleton (_single<_Name> 8038062462289584464661321053517)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(1953720652)))
; [eval] (module_names_0 union Set(_single(1953720652)))
; [eval] Set(_single(1953720652))
; [eval] _single(1953720652)
(declare-const module_names_0@319@01 Set<_Name>)
(assert (=
  module_names_0@319@01
  (Set_union module_names_0@318@01 (Set_singleton (_single<_Name> 1953720652)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(435611006292)))
; [eval] (module_names_0 union Set(_single(435611006292)))
; [eval] Set(_single(435611006292))
; [eval] _single(435611006292)
(declare-const module_names_0@320@01 Set<_Name>)
(assert (=
  module_names_0@320@01
  (Set_union module_names_0@319@01 (Set_singleton (_single<_Name> 435611006292)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(146793563365898239306910909426909867859)))
; [eval] (module_names_0 union Set(_single(146793563365898239306910909426909867859)))
; [eval] Set(_single(146793563365898239306910909426909867859))
; [eval] _single(146793563365898239306910909426909867859)
(declare-const module_names_0@321@01 Set<_Name>)
(assert (=
  module_names_0@321@01
  (Set_union module_names_0@320@01 (Set_singleton (_single<_Name> 146793563365898239306910909426909867859)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(2129761664003936118119)))
; [eval] (module_names_0 union Set(_single(2129761664003936118119)))
; [eval] Set(_single(2129761664003936118119))
; [eval] _single(2129761664003936118119)
(declare-const module_names_0@322@01 Set<_Name>)
(assert (=
  module_names_0@322@01
  (Set_union module_names_0@321@01 (Set_singleton (_single<_Name> 2129761664003936118119)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872339552563453791)))
; [eval] (module_names_0 union Set(_single(6872339552563453791)))
; [eval] Set(_single(6872339552563453791))
; [eval] _single(6872339552563453791)
(declare-const module_names_0@323@01 Set<_Name>)
(assert (=
  module_names_0@323@01
  (Set_union module_names_0@322@01 (Set_singleton (_single<_Name> 6872339552563453791)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(36033797551066912423438214515)))
; [eval] (module_names_0 union Set(_single(36033797551066912423438214515)))
; [eval] Set(_single(36033797551066912423438214515))
; [eval] _single(36033797551066912423438214515)
(declare-const module_names_0@324@01 Set<_Name>)
(assert (=
  module_names_0@324@01
  (Set_union module_names_0@323@01 (Set_singleton (_single<_Name> 36033797551066912423438214515)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(127978942196052)))
; [eval] (module_names_0 union Set(_single(127978942196052)))
; [eval] Set(_single(127978942196052))
; [eval] _single(127978942196052)
(declare-const module_names_0@325@01 Set<_Name>)
(assert (=
  module_names_0@325@01
  (Set_union module_names_0@324@01 (Set_singleton (_single<_Name> 127978942196052)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(9147261558914496062541770551919)))
; [eval] (module_names_0 union Set(_single(9147261558914496062541770551919)))
; [eval] Set(_single(9147261558914496062541770551919))
; [eval] _single(9147261558914496062541770551919)
(declare-const module_names_0@326@01 Set<_Name>)
(assert (=
  module_names_0@326@01
  (Set_union module_names_0@325@01 (Set_singleton (_single<_Name> 9147261558914496062541770551919)))))
; [exec]
; label __end
; [eval] (forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false)
; [eval] (forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false)
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false)
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)
(pop) ; 2
(pop) ; 1
; ---------- Iterator___next__ ----------
(declare-const _cthread_149@327@01 $Ref)
(declare-const _caller_measures_149@328@01 Seq<Measure$>)
(declare-const _residue_149@329@01 $Perm)
(declare-const self@330@01 $Ref)
(declare-const _current_wait_level_149@331@01 $Perm)
(declare-const _res@332@01 $Ref)
(declare-const _err@333@01 $Ref)
(declare-const _cthread_149@334@01 $Ref)
(declare-const _caller_measures_149@335@01 Seq<Measure$>)
(declare-const _residue_149@336@01 $Perm)
(declare-const self@337@01 $Ref)
(declare-const _current_wait_level_149@338@01 $Perm)
(declare-const _res@339@01 $Ref)
(declare-const _err@340@01 $Ref)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@341@01 $Snap)
(assert (= $t@341@01 ($Snap.combine ($Snap.first $t@341@01) ($Snap.second $t@341@01))))
(assert (= ($Snap.first $t@341@01) $Snap.unit))
; [eval] _cthread_149 != null
(assert (not (= _cthread_149@334@01 $Ref.null)))
(assert (=
  ($Snap.second $t@341@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@341@01))
    ($Snap.second ($Snap.second $t@341@01)))))
(assert (= ($Snap.first ($Snap.second $t@341@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_149@335@01 _cthread_149@334@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_149@335@01 _cthread_149@334@01 1))
(assert (Measure$check $Snap.unit _caller_measures_149@335@01 _cthread_149@334@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@341@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@341@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@341@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_149@334@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@341@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@341@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
(assert (not (= self@337@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@342@01 $Snap)
(assert (= $t@342@01 ($Snap.combine ($Snap.first $t@342@01) ($Snap.second $t@342@01))))
(assert (= ($Snap.first $t@342@01) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: Level(_r_15) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@342@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@342@01))
    ($Snap.second ($Snap.second $t@342@01)))))
(assert (= ($Snap.first ($Snap.second $t@342@01)) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: Level(_r_15) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@342@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@342@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@342@01))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_149@336@01 _current_wait_level_149@338@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@342@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
  (not (= _err@340@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@340@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@340@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 324 | _err@340@01 == Null | live]
; [else-branch: 324 | _err@340@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 324 | _err@340@01 == Null]
(assert (= _err@340@01 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 4
(push) ; 4
; [else-branch: 324 | _err@340@01 != Null]
(assert (not (= _err@340@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@340@01 $Ref.null)) (= _err@340@01 $Ref.null)))
(assert (=>
  (= _err@340@01 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@340@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@340@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 325 | _err@340@01 == Null | live]
; [else-branch: 325 | _err@340@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 325 | _err@340@01 == Null]
(assert (= _err@340@01 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 4
(push) ; 4
; [else-branch: 325 | _err@340@01 != Null]
(assert (not (= _err@340@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@340@01 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@340@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@340@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 326 | _err@340@01 == Null | live]
; [else-branch: 326 | _err@340@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 326 | _err@340@01 == Null]
(assert (= _err@340@01 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 4
(push) ; 4
; [else-branch: 326 | _err@340@01 != Null]
(assert (not (= _err@340@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@340@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 327 | |First:(Second:(Second:(Second:($t@342@01))))| > 0 | live]
; [else-branch: 327 | !(|First:(Second:(Second:(Second:($t@342@01))))| > 0) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 327 | |First:(Second:(Second:(Second:($t@342@01))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 4
(push) ; 4
; [else-branch: 327 | !(|First:(Second:(Second:(Second:($t@342@01))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
      0))
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
    0)))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@340@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@340@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 328 | _err@340@01 != Null | live]
; [else-branch: 328 | _err@340@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 328 | _err@340@01 != Null]
(assert (not (= _err@340@01 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 4
(push) ; 4
; [else-branch: 328 | _err@340@01 == Null]
(assert (= _err@340@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (= _err@340@01 $Ref.null) (not (= _err@340@01 $Ref.null))))
(assert (=>
  (not (= _err@340@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@340@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@340@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 329 | _err@340@01 != Null | live]
; [else-branch: 329 | _err@340@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 329 | _err@340@01 != Null]
(assert (not (= _err@340@01 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 4
(push) ; 4
; [else-branch: 329 | _err@340@01 == Null]
(assert (= _err@340@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= _err@340@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 330 | |First:(Second:(Second:(Second:($t@342@01))))| > 0 | live]
; [else-branch: 330 | !(|First:(Second:(Second:(Second:($t@342@01))))| > 0) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 330 | |First:(Second:(Second:(Second:($t@342@01))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
  0))
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 5
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch: 331 | _res@339@01 != First:(Second:(Second:(Second:($t@342@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) - 1] | live]
; [else-branch: 331 | _res@339@01 == First:(Second:(Second:(Second:($t@342@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) - 1] | live]
(push) ; 6
; [then-branch: 331 | _res@339@01 != First:(Second:(Second:(Second:($t@342@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) - 1]]
(assert (not
  (=
    _res@339@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
        1)))))
(pop) ; 6
(push) ; 6
; [else-branch: 331 | _res@339@01 == First:(Second:(Second:(Second:($t@342@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) - 1]]
(assert (=
  _res@339@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    _res@339@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
        1)))
  (not
    (=
      _res@339@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
          1))))))
(pop) ; 4
(push) ; 4
; [else-branch: 330 | !(|First:(Second:(Second:(Second:($t@342@01))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
    0)
  (and
    (>
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
      0)
    (or
      (=
        _res@339@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
            1)))
      (not
        (=
          _res@339@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
              1))))))))
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
    0)
  (and
    (=
      _res@339@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
          1)))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
      _res@339@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 332 | |First:(Second:(Second:(Second:($t@342@01))))| > 0 | live]
; [else-branch: 332 | !(|First:(Second:(Second:(Second:($t@342@01))))| > 0) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 332 | |First:(Second:(Second:(Second:($t@342@01))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
  0))
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 4
(push) ; 4
; [else-branch: 332 | !(|First:(Second:(Second:(Second:($t@342@01))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@339@01) (Iterator_arg<PyType> (typeof<PyType> self@337@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@343@01 $Ref)
(push) ; 3
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 4
; [then-branch: 333 | r@343@01 in First:(Second:(Second:(Second:(Second:(Second:($t@341@01)))))) | live]
; [else-branch: 333 | !(r@343@01 in First:(Second:(Second:(Second:(Second:(Second:($t@341@01))))))) | live]
(push) ; 5
; [then-branch: 333 | r@343@01 in First:(Second:(Second:(Second:(Second:(Second:($t@341@01))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
  r@343@01))
(pop) ; 5
(push) ; 5
; [else-branch: 333 | !(r@343@01 in First:(Second:(Second:(Second:(Second:(Second:($t@341@01)))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
    r@343@01)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 6
; [then-branch: 334 | !(First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) > 1) | live]
; [else-branch: 334 | First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) > 1 | live]
(push) ; 7
; [then-branch: 334 | !(First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    1)))
(pop) ; 7
(push) ; 7
; [else-branch: 334 | First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(push) ; 8
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 335 | r@343@01 != First:(Second:(Second:(Second:($t@342@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) - 2] | live]
; [else-branch: 335 | r@343@01 == First:(Second:(Second:(Second:($t@342@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) - 2] | live]
(push) ; 9
; [then-branch: 335 | r@343@01 != First:(Second:(Second:(Second:($t@342@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) - 2]]
(assert (not
  (=
    r@343@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
        2)))))
(pop) ; 9
(push) ; 9
; [else-branch: 335 | r@343@01 == First:(Second:(Second:(Second:($t@342@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) - 2]]
(assert (=
  r@343@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
      2))))
; [eval] _err == null
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    r@343@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
        2)))
  (not
    (=
      r@343@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
          2))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    1)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
      1)
    (or
      (=
        r@343@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
            2)))
      (not
        (=
          r@343@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
              2))))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    1)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
      1))))
(push) ; 6
; [then-branch: 336 | First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) > 1 && r@343@01 == First:(Second:(Second:(Second:($t@342@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) - 2] && _err@340@01 == Null | live]
; [else-branch: 336 | !(First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) > 1 && r@343@01 == First:(Second:(Second:(Second:($t@342@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) - 2] && _err@340@01 == Null) | live]
(push) ; 7
; [then-branch: 336 | First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) > 1 && r@343@01 == First:(Second:(Second:(Second:($t@342@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) - 2] && _err@340@01 == Null]
(assert (and
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    1)
  (and
    (=
      r@343@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
          2)))
    (= _err@340@01 $Ref.null))))
(pop) ; 7
(push) ; 7
; [else-branch: 336 | !(First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) > 1 && r@343@01 == First:(Second:(Second:(Second:($t@342@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) - 2] && _err@340@01 == Null)]
(assert (not
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
      1)
    (and
      (=
        r@343@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
            2)))
      (= _err@340@01 $Ref.null)))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 8
; [then-branch: 337 | !(First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) > 0) | live]
; [else-branch: 337 | First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) > 0 | live]
(push) ; 9
; [then-branch: 337 | !(First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0)))
(pop) ; 9
(push) ; 9
; [else-branch: 337 | First:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
  0))
; [eval] _err != null
(push) ; 10
; [then-branch: 338 | _err@340@01 == Null | live]
; [else-branch: 338 | _err@340@01 != Null | live]
(push) ; 11
; [then-branch: 338 | _err@340@01 == Null]
(assert (= _err@340@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 338 | _err@340@01 != Null]
(assert (not (= _err@340@01 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
      1)
    (and
      (=
        r@343@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
            2)))
      (= _err@340@01 $Ref.null)))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
      1)
    (=
      r@343@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
          2)))
    (= _err@340@01 $Ref.null))))
; Joined path conditions
(assert (=>
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
        1)
      (and
        (=
          r@343@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
              2)))
        (= _err@340@01 $Ref.null))))
  (and
    (not
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
          1)
        (and
          (=
            r@343@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                2)))
          (= _err@340@01 $Ref.null))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
          0))))))
(assert (or
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
        1)
      (and
        (=
          r@343@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
              2)))
        (= _err@340@01 $Ref.null))))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
      1)
    (and
      (=
        r@343@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
            2)))
      (= _err@340@01 $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
      r@343@01))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
        r@343@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
        1)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
          1)
        (or
          (=
            r@343@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                2)))
          (not
            (=
              r@343@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                  2)))))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
        1)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
          1)))
    (=>
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
          1)
        (and
          (=
            r@343@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                2)))
          (= _err@340@01 $Ref.null)))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
          1)
        (=
          r@343@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
              2)))
        (= _err@340@01 $Ref.null)))
    (=>
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
            1)
          (and
            (=
              r@343@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                  2)))
            (= _err@340@01 $Ref.null))))
      (and
        (not
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
              1)
            (and
              (=
                r@343@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                    2)))
              (= _err@340@01 $Ref.null))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
              0)))))
    (or
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
            1)
          (and
            (=
              r@343@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                  2)))
            (= _err@340@01 $Ref.null))))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
          1)
        (and
          (=
            r@343@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                2)))
          (= _err@340@01 $Ref.null)))))))
(assert (or
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
      r@343@01))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
    r@343@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@343@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
          r@343@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
            r@343@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
              1)
            (or
              (=
                r@343@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                    2)))
              (not
                (=
                  r@343@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
              1)
            (and
              (=
                r@343@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                    2)))
              (= _err@340@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
              1)
            (=
              r@343@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                  2)))
            (= _err@340@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                1)
              (and
                (=
                  r@343@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                      2)))
                (= _err@340@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                  1)
                (and
                  (=
                    r@343@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                        2)))
                  (= _err@340@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                1)
              (and
                (=
                  r@343@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                      2)))
                (= _err@340@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
              1)
            (and
              (=
                r@343@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                    2)))
              (= _err@340@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
          r@343@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
        r@343@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))
    r@343@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))
    r@343@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@902@12@902@289-aux|)))
(assert (forall ((r@343@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
          r@343@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
            r@343@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
              1)
            (or
              (=
                r@343@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                    2)))
              (not
                (=
                  r@343@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
              1)
            (and
              (=
                r@343@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                    2)))
              (= _err@340@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
              1)
            (=
              r@343@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                  2)))
            (= _err@340@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                1)
              (and
                (=
                  r@343@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                      2)))
                (= _err@340@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                  1)
                (and
                  (=
                    r@343@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                        2)))
                  (= _err@340@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                1)
              (and
                (=
                  r@343@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                      2)))
                (= _err@340@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
              1)
            (and
              (=
                r@343@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                    2)))
              (= _err@340@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
          r@343@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
        r@343@01)))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))
    r@343@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@902@12@902@289-aux|)))
(assert (forall ((r@343@01 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))
      r@343@01)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@341@01)))))))
        r@343@01)
      (or
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
            1)
          (and
            (=
              r@343@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                  2)))
            (= _err@340@01 $Ref.null)))
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
            0)
          (and
            (not (= _err@340@01 $Ref.null))
            (=
              r@343@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
                  1))))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))
    r@343@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))
    r@343@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplescav_example.py.vpr@902@12@902@289|)))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_149: Perm
(declare-const _cwl_149@344@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Iterator___del__ ----------
(declare-const _cthread_150@345@01 $Ref)
(declare-const _caller_measures_150@346@01 Seq<Measure$>)
(declare-const _residue_150@347@01 $Perm)
(declare-const self@348@01 $Ref)
(declare-const _current_wait_level_150@349@01 $Perm)
(declare-const _cthread_150@350@01 $Ref)
(declare-const _caller_measures_150@351@01 Seq<Measure$>)
(declare-const _residue_150@352@01 $Perm)
(declare-const self@353@01 $Ref)
(declare-const _current_wait_level_150@354@01 $Perm)
(push) ; 1
(declare-const $t@355@01 $Snap)
(assert (= $t@355@01 ($Snap.combine ($Snap.first $t@355@01) ($Snap.second $t@355@01))))
(assert (= ($Snap.first $t@355@01) $Snap.unit))
; [eval] _cthread_150 != null
(assert (not (= _cthread_150@350@01 $Ref.null)))
(assert (=
  ($Snap.second $t@355@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@355@01))
    ($Snap.second ($Snap.second $t@355@01)))))
(assert (= ($Snap.first ($Snap.second $t@355@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_150@351@01 _cthread_150@350@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_150@351@01 _cthread_150@350@01 1))
(assert (Measure$check $Snap.unit _caller_measures_150@351@01 _cthread_150@350@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@355@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@355@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@355@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@355@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_150), Thread_0())
; [eval] typeof(_cthread_150)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_150@350@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@355@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@355@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@355@01)))))))
(assert (not (= self@353@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@355@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@355@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@355@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@355@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@356@01 $Snap)
(assert (= $t@356@01 ($Snap.combine ($Snap.first $t@356@01) ($Snap.second $t@356@01))))
(assert (= ($Snap.first $t@356@01) $Snap.unit))
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_150)
(assert (=
  ($Snap.second $t@356@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@356@01))
    ($Snap.second ($Snap.second $t@356@01)))))
(assert (= ($Snap.first ($Snap.second $t@356@01)) $Snap.unit))
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_150)
(assert (=
  ($Snap.second ($Snap.second $t@356@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@356@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@356@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@356@01))) $Snap.unit))
; [eval] _residue_150 <= _current_wait_level_150
(assert (<= _residue_150@352@01 _current_wait_level_150@354@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@356@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@356@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@356@01))))))))
; [eval] issubtype(typeof(self.__container), list(list_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] list(list_arg(typeof(self.__container), 0))
; [eval] list_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 0))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 0)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 339 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 0))) | live]
; [else-branch: 339 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 339 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 0))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@356@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))))))
; [eval] issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1)))
; [eval] typeof(self.__container)
; [eval] dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))
; [eval] dict_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
; [eval] dict_arg(typeof(self.__container), 1)
; [eval] typeof(self.__container)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 1))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 340 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 1))) | dead]
; [else-branch: 340 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 1)))) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 340 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 1))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@356@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 0))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 341 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 0))) | dead]
; [else-branch: 341 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 341 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@356@01))))))
  $Snap.unit))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 339 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 0)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@356@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))))))
; [eval] issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1)))
; [eval] typeof(self.__container)
; [eval] dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))
; [eval] dict_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
; [eval] dict_arg(typeof(self.__container), 1)
; [eval] typeof(self.__container)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 342 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 1))) | live]
; [else-branch: 342 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 1)))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 342 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 1)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 1))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@356@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@356@01))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))
    $Ref.null)))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 0))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 343 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 0))) | dead]
; [else-branch: 343 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 343 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@356@01))))))
  $Snap.unit))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 342 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 1))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@356@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 0))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 0)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 344 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 0))) | live]
; [else-branch: 344 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 344 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 0))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))
    $Ref.null)))
(pop) ; 5
(push) ; 5
; [else-branch: 344 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@356@01))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@01)))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@356@01))))))
  $Snap.unit))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_150: Perm
(declare-const _cwl_150@357@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- list___init__ ----------
(declare-const _cthread_8@358@01 $Ref)
(declare-const _caller_measures_8@359@01 Seq<Measure$>)
(declare-const _residue_8@360@01 $Perm)
(declare-const _current_wait_level_8@361@01 $Perm)
(declare-const res@362@01 $Ref)
(declare-const _cthread_8@363@01 $Ref)
(declare-const _caller_measures_8@364@01 Seq<Measure$>)
(declare-const _residue_8@365@01 $Perm)
(declare-const _current_wait_level_8@366@01 $Perm)
(declare-const res@367@01 $Ref)
(push) ; 1
(declare-const $t@368@01 $Snap)
(assert (= $t@368@01 ($Snap.combine ($Snap.first $t@368@01) ($Snap.second $t@368@01))))
(assert (= ($Snap.first $t@368@01) $Snap.unit))
; [eval] _cthread_8 != null
(assert (not (= _cthread_8@363@01 $Ref.null)))
(assert (=
  ($Snap.second $t@368@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@368@01))
    ($Snap.second ($Snap.second $t@368@01)))))
(assert (= ($Snap.first ($Snap.second $t@368@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_8@364@01 _cthread_8@363@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_8@364@01 _cthread_8@363@01 1))
(assert (Measure$check $Snap.unit _caller_measures_8@364@01 _cthread_8@363@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@368@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@368@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@368@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@368@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_8), Thread_0())
; [eval] typeof(_cthread_8)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_8@363@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@368@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@369@01 $Snap)
(assert (= $t@369@01 ($Snap.combine ($Snap.first $t@369@01) ($Snap.second $t@369@01))))
(assert (= ($Snap.first $t@369@01) $Snap.unit))
; [eval] (forperm _r_19: Ref [_r_19.MustReleaseBounded] :: Level(_r_19) <= _current_wait_level_8)
(assert (=
  ($Snap.second $t@369@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@369@01))
    ($Snap.second ($Snap.second $t@369@01)))))
(assert (= ($Snap.first ($Snap.second $t@369@01)) $Snap.unit))
; [eval] (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: Level(_r_19) <= _current_wait_level_8)
(assert (=
  ($Snap.second ($Snap.second $t@369@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@369@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@369@01))) $Snap.unit))
; [eval] _residue_8 <= _current_wait_level_8
(assert (<= _residue_8@365@01 _current_wait_level_8@366@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@369@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
(assert (not (= res@367@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
  $Snap.unit))
; [eval] res.list_acc == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
  $Snap.unit))
; [eval] typeof(res) == list(list_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] list(list_arg(typeof(res), 0))
; [eval] list_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@367@01)
  (list<PyType> (list_arg<PyType> (typeof<PyType> res@367@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
  $Snap.unit))
; [eval] (Low(res): Bool)
(assert (Low<Bool> res@367@01))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_8: Perm
(declare-const _cwl_8@370@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- list_append ----------
(declare-const _cthread_9@371@01 $Ref)
(declare-const _caller_measures_9@372@01 Seq<Measure$>)
(declare-const _residue_9@373@01 $Perm)
(declare-const self@374@01 $Ref)
(declare-const item@375@01 $Ref)
(declare-const _current_wait_level_9@376@01 $Perm)
(declare-const _cthread_9@377@01 $Ref)
(declare-const _caller_measures_9@378@01 Seq<Measure$>)
(declare-const _residue_9@379@01 $Perm)
(declare-const self@380@01 $Ref)
(declare-const item@381@01 $Ref)
(declare-const _current_wait_level_9@382@01 $Perm)
(push) ; 1
(declare-const $t@383@01 $Snap)
(assert (= $t@383@01 ($Snap.combine ($Snap.first $t@383@01) ($Snap.second $t@383@01))))
(assert (= ($Snap.first $t@383@01) $Snap.unit))
; [eval] _cthread_9 != null
(assert (not (= _cthread_9@377@01 $Ref.null)))
(assert (=
  ($Snap.second $t@383@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@383@01))
    ($Snap.second ($Snap.second $t@383@01)))))
(assert (= ($Snap.first ($Snap.second $t@383@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_9@378@01 _cthread_9@377@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_9@378@01 _cthread_9@377@01 1))
(assert (Measure$check $Snap.unit _caller_measures_9@378@01 _cthread_9@377@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@383@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@383@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@383@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_9), Thread_0())
; [eval] typeof(_cthread_9)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_9@377@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@383@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01))))
  $Snap.unit))
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> self@380@01) (list<PyType> (list_arg<PyType> (typeof<PyType> self@380@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))))
(assert (not (= self@380@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(item), list_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> item@381@01) (list_arg<PyType> (typeof<PyType> self@380@01) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@384@01 $Snap)
(assert (= $t@384@01 ($Snap.combine ($Snap.first $t@384@01) ($Snap.second $t@384@01))))
(assert (= ($Snap.first $t@384@01) $Snap.unit))
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: Level(_r_21) <= _current_wait_level_9)
(assert (=
  ($Snap.second $t@384@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@384@01))
    ($Snap.second ($Snap.second $t@384@01)))))
(assert (= ($Snap.first ($Snap.second $t@384@01)) $Snap.unit))
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: Level(_r_21) <= _current_wait_level_9)
(assert (=
  ($Snap.second ($Snap.second $t@384@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@384@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@384@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@384@01))) $Snap.unit))
; [eval] _residue_9 <= _current_wait_level_9
(assert (<= _residue_9@379@01 _current_wait_level_9@382@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@384@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@384@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@384@01))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc)
; [eval] Seq(item)
(assert (= (Seq_length (Seq_singleton item@381@01)) 1))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@384@01)))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))
    (Seq_singleton item@381@01))))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_9: Perm
(declare-const _cwl_9@385@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- list___iter__ ----------
(declare-const _cthread_13@386@01 $Ref)
(declare-const _caller_measures_13@387@01 Seq<Measure$>)
(declare-const _residue_13@388@01 $Perm)
(declare-const self@389@01 $Ref)
(declare-const _current_wait_level_13@390@01 $Perm)
(declare-const _res@391@01 $Ref)
(declare-const _cthread_13@392@01 $Ref)
(declare-const _caller_measures_13@393@01 Seq<Measure$>)
(declare-const _residue_13@394@01 $Perm)
(declare-const self@395@01 $Ref)
(declare-const _current_wait_level_13@396@01 $Perm)
(declare-const _res@397@01 $Ref)
(push) ; 1
(declare-const $t@398@01 $Snap)
(assert (= $t@398@01 ($Snap.combine ($Snap.first $t@398@01) ($Snap.second $t@398@01))))
(assert (= ($Snap.first $t@398@01) $Snap.unit))
; [eval] _cthread_13 != null
(assert (not (= _cthread_13@392@01 $Ref.null)))
(assert (=
  ($Snap.second $t@398@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@398@01))
    ($Snap.second ($Snap.second $t@398@01)))))
(assert (= ($Snap.first ($Snap.second $t@398@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_13, _cthread_13, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_13@393@01 _cthread_13@392@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_13@393@01 _cthread_13@392@01 1))
(assert (Measure$check $Snap.unit _caller_measures_13@393@01 _cthread_13@392@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@398@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@398@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@398@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@398@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_13), Thread_0())
; [eval] typeof(_cthread_13)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_13@392@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@398@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@398@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@398@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@398@01))))
  $Snap.unit))
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> self@395@01) (list<PyType> (list_arg<PyType> (typeof<PyType> self@395@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@398@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@398@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@398@01))))))))
(assert (not (= self@395@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@398@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@399@01 $Snap)
(assert (= $t@399@01 ($Snap.combine ($Snap.first $t@399@01) ($Snap.second $t@399@01))))
(assert (= ($Snap.first $t@399@01) $Snap.unit))
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_13)
(assert (=
  ($Snap.second $t@399@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@399@01))
    ($Snap.second ($Snap.second $t@399@01)))))
(assert (= ($Snap.first ($Snap.second $t@399@01)) $Snap.unit))
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_13)
(assert (=
  ($Snap.second ($Snap.second $t@399@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@399@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@399@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@399@01))) $Snap.unit))
; [eval] _residue_13 <= _current_wait_level_13
(assert (<= _residue_13@394@01 _current_wait_level_13@396@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@399@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@399@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@399@01))))
  $Snap.unit))
; [eval] _res != self
(assert (not (= _res@397@01 self@395@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01))))))))
(assert (not (= _res@397@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= _res@397@01 self@395@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))
  $Snap.unit))
; [eval] _res.list_acc == self.list_acc
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))))
  $Snap.unit))
; [eval] _res.__container == self
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))))
  self@395@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))))))
  $Snap.unit))
; [eval] _res.__iter_index == 0
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))))))))
  $Snap.unit))
; [eval] _res.__previous == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))))))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), Iterator(list_arg(typeof(self), 0)))
; [eval] typeof(_res)
; [eval] Iterator(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> _res@397@01) (Iterator<PyType> (list_arg<PyType> (typeof<PyType> self@395@01) 0))))
(pop) ; 2
(set-option :timeout 0)
(push) ; 2
; [exec]
; var _cwl_13: Perm
(declare-const _cwl_13@400@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
