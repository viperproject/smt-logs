(get-info :version)
; (:version "4.12.1")
; Started: 2025-01-13 17:34:59
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<PyType> 0)
(declare-sort Seq<Measure$> 0)
(declare-sort Seq<$Ref> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<_Name> 0)
(declare-sort PyType 0)
(declare-sort _list_ce_helper 0)
(declare-sort _Name 0)
(declare-sort Measure$ 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<PyType>To$Snap (Seq<PyType>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<PyType> ($Snap) Seq<PyType>)
(assert (forall ((x Seq<PyType>)) (!
    (= x ($SortWrappers.$SnapToSeq<PyType>($SortWrappers.Seq<PyType>To$Snap x)))
    :pattern (($SortWrappers.Seq<PyType>To$Snap x))
    :qid |$Snap.$SnapToSeq<PyType>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<PyType>To$Snap($SortWrappers.$SnapToSeq<PyType> x)))
    :pattern (($SortWrappers.$SnapToSeq<PyType> x))
    :qid |$Snap.Seq<PyType>To$SnapToSeq<PyType>|
    )))
(declare-fun $SortWrappers.Seq<Measure$>To$Snap (Seq<Measure$>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Measure$> ($Snap) Seq<Measure$>)
(assert (forall ((x Seq<Measure$>)) (!
    (= x ($SortWrappers.$SnapToSeq<Measure$>($SortWrappers.Seq<Measure$>To$Snap x)))
    :pattern (($SortWrappers.Seq<Measure$>To$Snap x))
    :qid |$Snap.$SnapToSeq<Measure$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Measure$>To$Snap($SortWrappers.$SnapToSeq<Measure$> x)))
    :pattern (($SortWrappers.$SnapToSeq<Measure$> x))
    :qid |$Snap.Seq<Measure$>To$SnapToSeq<Measure$>|
    )))
(declare-fun $SortWrappers.Seq<$Ref>To$Snap (Seq<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<$Ref> ($Snap) Seq<$Ref>)
(assert (forall ((x Seq<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSeq<$Ref>($SortWrappers.Seq<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Seq<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSeq<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<$Ref>To$Snap($SortWrappers.$SnapToSeq<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSeq<$Ref> x))
    :qid |$Snap.Seq<$Ref>To$SnapToSeq<$Ref>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<_Name>To$Snap (Set<_Name>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<_Name> ($Snap) Set<_Name>)
(assert (forall ((x Set<_Name>)) (!
    (= x ($SortWrappers.$SnapToSet<_Name>($SortWrappers.Set<_Name>To$Snap x)))
    :pattern (($SortWrappers.Set<_Name>To$Snap x))
    :qid |$Snap.$SnapToSet<_Name>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<_Name>To$Snap($SortWrappers.$SnapToSet<_Name> x)))
    :pattern (($SortWrappers.$SnapToSet<_Name> x))
    :qid |$Snap.Set<_Name>To$SnapToSet<_Name>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.PyTypeTo$Snap (PyType) $Snap)
(declare-fun $SortWrappers.$SnapToPyType ($Snap) PyType)
(assert (forall ((x PyType)) (!
    (= x ($SortWrappers.$SnapToPyType($SortWrappers.PyTypeTo$Snap x)))
    :pattern (($SortWrappers.PyTypeTo$Snap x))
    :qid |$Snap.$SnapToPyTypeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.PyTypeTo$Snap($SortWrappers.$SnapToPyType x)))
    :pattern (($SortWrappers.$SnapToPyType x))
    :qid |$Snap.PyTypeTo$SnapToPyType|
    )))
(declare-fun $SortWrappers._list_ce_helperTo$Snap (_list_ce_helper) $Snap)
(declare-fun $SortWrappers.$SnapTo_list_ce_helper ($Snap) _list_ce_helper)
(assert (forall ((x _list_ce_helper)) (!
    (= x ($SortWrappers.$SnapTo_list_ce_helper($SortWrappers._list_ce_helperTo$Snap x)))
    :pattern (($SortWrappers._list_ce_helperTo$Snap x))
    :qid |$Snap.$SnapTo_list_ce_helperTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._list_ce_helperTo$Snap($SortWrappers.$SnapTo_list_ce_helper x)))
    :pattern (($SortWrappers.$SnapTo_list_ce_helper x))
    :qid |$Snap._list_ce_helperTo$SnapTo_list_ce_helper|
    )))
(declare-fun $SortWrappers._NameTo$Snap (_Name) $Snap)
(declare-fun $SortWrappers.$SnapTo_Name ($Snap) _Name)
(assert (forall ((x _Name)) (!
    (= x ($SortWrappers.$SnapTo_Name($SortWrappers._NameTo$Snap x)))
    :pattern (($SortWrappers._NameTo$Snap x))
    :qid |$Snap.$SnapTo_NameTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._NameTo$Snap($SortWrappers.$SnapTo_Name x)))
    :pattern (($SortWrappers.$SnapTo_Name x))
    :qid |$Snap._NameTo$SnapTo_Name|
    )))
(declare-fun $SortWrappers.Measure$To$Snap (Measure$) $Snap)
(declare-fun $SortWrappers.$SnapToMeasure$ ($Snap) Measure$)
(assert (forall ((x Measure$)) (!
    (= x ($SortWrappers.$SnapToMeasure$($SortWrappers.Measure$To$Snap x)))
    :pattern (($SortWrappers.Measure$To$Snap x))
    :qid |$Snap.$SnapToMeasure$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Measure$To$Snap($SortWrappers.$SnapToMeasure$ x)))
    :pattern (($SortWrappers.$SnapToMeasure$ x))
    :qid |$Snap.Measure$To$SnapToMeasure$|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<_Name>) Int)
(declare-const Set_empty Set<_Name>)
(declare-fun Set_in (_Name Set<_Name>) Bool)
(declare-fun Set_singleton (_Name) Set<_Name>)
(declare-fun Set_unionone (Set<_Name> _Name) Set<_Name>)
(declare-fun Set_union (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_intersection (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_difference (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_subset (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_equal (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_skolem_diff (Set<_Name> Set<_Name>) _Name)
(declare-fun Seq_length (Seq<PyType>) Int)
(declare-const Seq_empty Seq<PyType>)
(declare-fun Seq_singleton (PyType) Seq<PyType>)
(declare-fun Seq_append (Seq<PyType> Seq<PyType>) Seq<PyType>)
(declare-fun Seq_index (Seq<PyType> Int) PyType)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<PyType> Int PyType) Seq<PyType>)
(declare-fun Seq_take (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_drop (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_contains (Seq<PyType> PyType) Bool)
(declare-fun Seq_contains_trigger (Seq<PyType> PyType) Bool)
(declare-fun Seq_skolem (Seq<PyType> PyType) Int)
(declare-fun Seq_equal (Seq<PyType> Seq<PyType>) Bool)
(declare-fun Seq_skolem_diff (Seq<PyType> Seq<PyType>) Int)
(declare-fun Seq_length (Seq<Measure$>) Int)
(declare-const Seq_empty Seq<Measure$>)
(declare-fun Seq_singleton (Measure$) Seq<Measure$>)
(declare-fun Seq_append (Seq<Measure$> Seq<Measure$>) Seq<Measure$>)
(declare-fun Seq_index (Seq<Measure$> Int) Measure$)
(declare-fun Seq_update (Seq<Measure$> Int Measure$) Seq<Measure$>)
(declare-fun Seq_take (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_drop (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_contains (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_contains_trigger (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_skolem (Seq<Measure$> Measure$) Int)
(declare-fun Seq_equal (Seq<Measure$> Seq<Measure$>) Bool)
(declare-fun Seq_skolem_diff (Seq<Measure$> Seq<Measure$>) Int)
(declare-fun Seq_length (Seq<$Ref>) Int)
(declare-const Seq_empty Seq<$Ref>)
(declare-fun Seq_singleton ($Ref) Seq<$Ref>)
(declare-fun Seq_append (Seq<$Ref> Seq<$Ref>) Seq<$Ref>)
(declare-fun Seq_index (Seq<$Ref> Int) $Ref)
(declare-fun Seq_update (Seq<$Ref> Int $Ref) Seq<$Ref>)
(declare-fun Seq_take (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_drop (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_contains (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_contains_trigger (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_skolem (Seq<$Ref> $Ref) Int)
(declare-fun Seq_equal (Seq<$Ref> Seq<$Ref>) Bool)
(declare-fun Seq_skolem_diff (Seq<$Ref> Seq<$Ref>) Int)
(declare-fun extends_<Bool> (PyType PyType) Bool)
(declare-fun issubtype<Bool> (PyType PyType) Bool)
(declare-fun isnotsubtype<Bool> (PyType PyType) Bool)
(declare-fun tuple_args<Seq<PyType>> (PyType) Seq<PyType>)
(declare-fun typeof<PyType> ($Ref) PyType)
(declare-fun get_basic<PyType> (PyType) PyType)
(declare-fun union_type_1<PyType> (PyType) PyType)
(declare-fun union_type_2<PyType> (PyType PyType) PyType)
(declare-fun union_type_3<PyType> (PyType PyType PyType) PyType)
(declare-fun union_type_4<PyType> (PyType PyType PyType PyType) PyType)
(declare-const object<PyType> PyType)
(declare-const list_basic<PyType> PyType)
(declare-fun list<PyType> (PyType) PyType)
(declare-fun list_arg<PyType> (PyType Int) PyType)
(declare-const set_basic<PyType> PyType)
(declare-fun set<PyType> (PyType) PyType)
(declare-fun set_arg<PyType> (PyType Int) PyType)
(declare-const dict_basic<PyType> PyType)
(declare-fun dict<PyType> (PyType PyType) PyType)
(declare-fun dict_arg<PyType> (PyType Int) PyType)
(declare-const int<PyType> PyType)
(declare-const float<PyType> PyType)
(declare-const bool<PyType> PyType)
(declare-const NoneType<PyType> PyType)
(declare-const Exception<PyType> PyType)
(declare-const ConnectionRefusedError<PyType> PyType)
(declare-const traceback<PyType> PyType)
(declare-const str<PyType> PyType)
(declare-const bytes<PyType> PyType)
(declare-const tuple_basic<PyType> PyType)
(declare-fun tuple<PyType> (Seq<PyType>) PyType)
(declare-fun tuple_arg<PyType> (PyType Int) PyType)
(declare-const PSeq_basic<PyType> PyType)
(declare-fun PSeq<PyType> (PyType) PyType)
(declare-fun PSeq_arg<PyType> (PyType Int) PyType)
(declare-const PSet_basic<PyType> PyType)
(declare-fun PSet<PyType> (PyType) PyType)
(declare-fun PSet_arg<PyType> (PyType Int) PyType)
(declare-const PMultiset_basic<PyType> PyType)
(declare-fun PMultiset<PyType> (PyType) PyType)
(declare-fun PMultiset_arg<PyType> (PyType Int) PyType)
(declare-const slice<PyType> PyType)
(declare-const py_range<PyType> PyType)
(declare-const Iterator_basic<PyType> PyType)
(declare-fun Iterator<PyType> (PyType) PyType)
(declare-fun Iterator_arg<PyType> (PyType Int) PyType)
(declare-const Thread_0<PyType> PyType)
(declare-const LevelType<PyType> PyType)
(declare-const type<PyType> PyType)
(declare-const Place<PyType> PyType)
(declare-const __prim__Seq_type<PyType> PyType)
(declare-const ObjectLock<PyType> PyType)
(declare-const A<PyType> PyType)
(declare-const Lock_basic<PyType> PyType)
(declare-fun Lock<PyType> (PyType) PyType)
(declare-fun Lock_arg<PyType> (PyType Int) PyType)
(declare-const BaseLock<PyType> PyType)
(declare-fun Measure$create<Measure$> (Bool $Ref Int) Measure$)
(declare-fun Measure$guard<Bool> (Measure$) Bool)
(declare-fun Measure$key<Ref> (Measure$) $Ref)
(declare-fun Measure$value<Int> (Measure$) Int)
(declare-fun seq_ref_length<Int> (Seq<$Ref>) Int)
(declare-fun seq_ref_index<Ref> (Seq<$Ref> Int) $Ref)
(declare-fun _combine<_Name> (_Name _Name) _Name)
(declare-fun _single<_Name> (Int) _Name)
(declare-fun _get_combined_prefix<_Name> (_Name) _Name)
(declare-fun _get_combined_name<_Name> (_Name) _Name)
(declare-fun _get_value<Int> (_Name) Int)
(declare-fun _name_type<Bool> (_Name) Bool)
(declare-fun _is_single<Bool> (_Name) Bool)
(declare-fun _is_combined<Bool> (_Name) Bool)
; Declaring symbols related to program functions (from program analysis)
(declare-fun str___val__ ($Snap $Ref) Int)
(declare-fun str___val__%limited ($Snap $Ref) Int)
(declare-fun str___val__%stateless ($Ref) Bool)
(declare-fun str___val__%precondition ($Snap $Ref) Bool)
(declare-fun str___len__ ($Snap $Ref) Int)
(declare-fun str___len__%limited ($Snap $Ref) Int)
(declare-fun str___len__%stateless ($Ref) Bool)
(declare-fun str___len__%precondition ($Snap $Ref) Bool)
(declare-fun _isDefined ($Snap Int) Bool)
(declare-fun _isDefined%limited ($Snap Int) Bool)
(declare-fun _isDefined%stateless (Int) Bool)
(declare-fun _isDefined%precondition ($Snap Int) Bool)
(declare-fun __prim__bool___box__ ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%limited ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%stateless (Bool) Bool)
(declare-fun __prim__bool___box__%precondition ($Snap Bool) Bool)
(declare-fun bool___unbox__ ($Snap $Ref) Bool)
(declare-fun bool___unbox__%limited ($Snap $Ref) Bool)
(declare-fun bool___unbox__%stateless ($Ref) Bool)
(declare-fun bool___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun int___unbox__ ($Snap $Ref) Int)
(declare-fun int___unbox__%limited ($Snap $Ref) Int)
(declare-fun int___unbox__%stateless ($Ref) Bool)
(declare-fun int___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__int___box__ ($Snap Int) $Ref)
(declare-fun __prim__int___box__%limited ($Snap Int) $Ref)
(declare-fun __prim__int___box__%stateless (Int) Bool)
(declare-fun __prim__int___box__%precondition ($Snap Int) Bool)
(declare-fun Level ($Snap $Ref) $Perm)
(declare-fun Level%limited ($Snap $Ref) $Perm)
(declare-fun Level%stateless ($Ref) Bool)
(declare-fun Level%precondition ($Snap $Ref) Bool)
(declare-fun str___create__ ($Snap Int Int) $Ref)
(declare-fun str___create__%limited ($Snap Int Int) $Ref)
(declare-fun str___create__%stateless (Int Int) Bool)
(declare-fun str___create__%precondition ($Snap Int Int) Bool)
(declare-fun Measure$check ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%limited ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%stateless (Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%precondition ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun __name___0 ($Snap) $Ref)
(declare-fun __name___0%limited ($Snap) $Ref)
(declare-const __name___0%stateless Bool)
(declare-fun __name___0%precondition ($Snap) Bool)
(declare-fun Lock_get_locked ($Snap $Ref) $Ref)
(declare-fun Lock_get_locked%limited ($Snap $Ref) $Ref)
(declare-fun Lock_get_locked%stateless ($Ref) Bool)
(declare-fun Lock_get_locked%precondition ($Snap $Ref) Bool)
(declare-fun str___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%stateless ($Ref $Ref) Bool)
(declare-fun str___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun int___ge__ ($Snap Int Int) Bool)
(declare-fun int___ge__%limited ($Snap Int Int) Bool)
(declare-fun int___ge__%stateless (Int Int) Bool)
(declare-fun int___ge__%precondition ($Snap Int Int) Bool)
(declare-fun int___lt__ ($Snap Int Int) Bool)
(declare-fun int___lt__%limited ($Snap Int Int) Bool)
(declare-fun int___lt__%stateless (Int Int) Bool)
(declare-fun int___lt__%precondition ($Snap Int Int) Bool)
(declare-fun int___add__ ($Snap Int Int) Int)
(declare-fun int___add__%limited ($Snap Int Int) Int)
(declare-fun int___add__%stateless (Int Int) Bool)
(declare-fun int___add__%precondition ($Snap Int Int) Bool)
(declare-fun int___sub__ ($Snap Int Int) Int)
(declare-fun int___sub__%limited ($Snap Int Int) Int)
(declare-fun int___sub__%stateless (Int Int) Bool)
(declare-fun int___sub__%precondition ($Snap Int Int) Bool)
(declare-fun __file___0 ($Snap) $Ref)
(declare-fun __file___0%limited ($Snap) $Ref)
(declare-const __file___0%stateless Bool)
(declare-fun __file___0%precondition ($Snap) Bool)
(declare-fun __file__ ($Snap) $Ref)
(declare-fun __file__%limited ($Snap) $Ref)
(declare-const __file__%stateless Bool)
(declare-fun __file__%precondition ($Snap) Bool)
(declare-fun _checkDefined ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%limited ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%stateless ($Ref Int) Bool)
(declare-fun _checkDefined%precondition ($Snap $Ref Int) Bool)
(declare-fun int___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%stateless ($Ref $Ref) Bool)
(declare-fun int___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun __name__ ($Snap) $Ref)
(declare-fun __name__%limited ($Snap) $Ref)
(declare-const __name__%stateless Bool)
(declare-fun __name__%precondition ($Snap) Bool)
(declare-fun int___le__ ($Snap Int Int) Bool)
(declare-fun int___le__%limited ($Snap Int Int) Bool)
(declare-fun int___le__%stateless (Int Int) Bool)
(declare-fun int___le__%precondition ($Snap Int Int) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun MustTerminate%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeBounded%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeUnbounded%trigger ($Snap $Ref) Bool)
(declare-fun _MaySet%trigger ($Snap $Ref Int) Bool)
(declare-fun Lock_invariant%trigger ($Snap $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct bool<PyType> float<PyType> ObjectLock<PyType> bytes<PyType> slice<PyType> list_basic<PyType> set_basic<PyType> ConnectionRefusedError<PyType> PMultiset_basic<PyType> BaseLock<PyType> PSet_basic<PyType> Iterator_basic<PyType> Lock_basic<PyType> object<PyType> traceback<PyType> dict_basic<PyType> type<PyType> py_range<PyType> int<PyType> Exception<PyType> __prim__Seq_type<PyType> tuple_basic<PyType> str<PyType> PSeq_basic<PyType> A<PyType> Thread_0<PyType> Place<PyType> LevelType<PyType> NoneType<PyType>))
; ////////// Axioms
(assert (forall ((s Seq<PyType>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<PyType>)) 0))
(assert (forall ((s Seq<PyType>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (not (= s1 (as Seq_empty  Seq<PyType>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (x PyType)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<PyType>) (x PyType) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<PyType>) (b Seq<PyType>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x PyType) (y PyType)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Measure$>)) 0))
(assert (forall ((s Seq<Measure$>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (not (= s1 (as Seq_empty  Seq<Measure$>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Measure$>) (b Seq<Measure$>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Measure$) (y Measure$)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<$Ref>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<$Ref>)) 0))
(assert (forall ((s Seq<$Ref>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (not (= s1 (as Seq_empty  Seq<$Ref>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<$Ref>) (b Seq<$Ref>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x $Ref) (y $Ref)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<_Name>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o _Name)) (!
  (not (Set_in o (as Set_empty  Set<_Name>)))
  :pattern ((Set_in o (as Set_empty  Set<_Name>)))
  )))
(assert (forall ((s Set<_Name>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<_Name>)))
    (=> (not (= (Set_card s) 0)) (exists ((x _Name))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r _Name)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r _Name) (o _Name)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r _Name)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (o _Name)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (Set_subset a b)
    (forall ((o _Name)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (issubtype<Bool> middle super))
    (issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> sub middle) (issubtype<Bool> middle super))
  :qid |prog.issubtype_transitivity|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ type_)
  :pattern ((issubtype<Bool> type_ type_))
  :qid |prog.issubtype_reflexivity|)))
(assert (forall ((sub PyType) (sub2 PyType)) (!
  (=> (extends_<Bool> sub sub2) (issubtype<Bool> sub sub2))
  :pattern ((extends_<Bool> sub sub2))
  :qid |prog.extends_implies_subtype|)))
(assert (forall ((r $Ref)) (!
  (=
    (issubtype<Bool> (typeof<PyType> r) (as NoneType<PyType>  PyType))
    (= r $Ref.null))
  :pattern ((typeof<PyType> r))
  :qid |prog.null_nonetype|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ (as object<PyType>  PyType))
  :pattern ((issubtype<Bool> type_ (as object<PyType>  PyType)))
  :qid |prog.issubtype_object|)))
(assert (forall ((sub PyType) (sub2 PyType) (super PyType)) (!
  (=>
    (and
      (extends_<Bool> sub super)
      (and (extends_<Bool> sub2 super) (not (= sub sub2))))
    (and (isnotsubtype<Bool> sub sub2) (isnotsubtype<Bool> sub2 sub)))
  :pattern ((extends_<Bool> sub super) (extends_<Bool> sub2 super))
  :qid |prog.issubtype_exclusion|)))
(assert (forall ((sub PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub super) (not (= sub super)))
    (not (issubtype<Bool> super sub)))
  :pattern ((issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> super sub))
  :qid |prog.issubtype_exclusion_2|)))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
    (not (issubtype<Bool> sub super)))
  :pattern ((issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
  :qid |prog.issubtype_exclusion_propagation|)))
(assert (forall ((seq Seq<PyType>) (i Int) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (issubtype<Bool> (tuple_arg<PyType> Z i) (Seq_index seq i)))
  :pattern ((tuple<PyType> seq) (tuple_arg<PyType> Z i))
  :qid |prog.tuple_arg_def|)))
(assert (forall ((seq Seq<PyType>) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (= (Seq_length (tuple_args<Seq<PyType>> Z)) (Seq_length seq)))
  :pattern ((issubtype<Bool> Z (tuple<PyType> seq)))
  :qid |prog.tuple_args_def|)))
(assert (forall ((seq1 Seq<PyType>) (seq2 Seq<PyType>)) (!
  (=>
    (and
      (not (Seq_equal seq1 seq2))
      (and
        (= (Seq_length seq1) (Seq_length seq2))
        (forall ((i Int)) (!
          (=>
            (and (>= i 0) (< i (Seq_length seq1)))
            (issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          :pattern ((issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          ))))
    (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq1) (Seq_length seq2))
  :pattern ((Seq_length seq1) (tuple<PyType> seq2))
  :pattern ((Seq_length seq1) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq2) (Seq_length seq1))
  :pattern ((Seq_length seq2) (tuple<PyType> seq1))
  :pattern ((Seq_length seq2) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :qid |prog.tuple_self_subtype|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> X (union_type_1<PyType> arg_1)) (issubtype<Bool> X arg_1))
  :pattern ((issubtype<Bool> X (union_type_1<PyType> arg_1)))
  :qid |prog.union_subtype_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2))
    (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2)))
  :pattern ((issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2)))
  :qid |prog.union_subtype_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3))
    (or
      (issubtype<Bool> X arg_1)
      (or (issubtype<Bool> X arg_2) (issubtype<Bool> X arg_3))))
  :pattern ((issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3)))
  :qid |prog.union_subtype_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4))
    (or
      (issubtype<Bool> X arg_1)
      (or
        (issubtype<Bool> X arg_2)
        (or (issubtype<Bool> X arg_3) (issubtype<Bool> X arg_4)))))
  :pattern ((issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4)))
  :qid |prog.union_subtype_4|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> (union_type_1<PyType> arg_1) X) (issubtype<Bool> arg_1 X))
  :pattern ((issubtype<Bool> (union_type_1<PyType> arg_1) X))
  :qid |prog.subtype_union_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X)
    (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X)))
  :pattern ((issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X))
  :qid |prog.subtype_union_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and (issubtype<Bool> arg_2 X) (issubtype<Bool> arg_3 X))))
  :pattern ((issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X))
  :qid |prog.subtype_union_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and
        (issubtype<Bool> arg_2 X)
        (and (issubtype<Bool> arg_3 X) (issubtype<Bool> arg_4 X)))))
  :pattern ((issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X))
  :qid |prog.subtype_union_4|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (list<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (list<PyType> var0)) (as list_basic<PyType>  PyType)))
  :pattern ((list<PyType> var0))
  :qid |prog.subtype_list|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (list<PyType> arg0)) (= (list_arg<PyType> Z 0) arg0))
  :pattern ((list<PyType> arg0) (list_arg<PyType> Z 0))
  :qid |prog.list_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (set<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (set<PyType> var0)) (as set_basic<PyType>  PyType)))
  :pattern ((set<PyType> var0))
  :qid |prog.subtype_set|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (set<PyType> arg0)) (= (set_arg<PyType> Z 0) arg0))
  :pattern ((set<PyType> arg0) (set_arg<PyType> Z 0))
  :qid |prog.set_args0|)))
(assert (forall ((var0 PyType) (var1 PyType)) (!
  (and
    (extends_<Bool> (dict<PyType> var0 var1) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (dict<PyType> var0 var1))
      (as dict_basic<PyType>  PyType)))
  :pattern ((dict<PyType> var0 var1))
  :qid |prog.subtype_dict|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 0) arg0))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 0))
  :qid |prog.dict_args0|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 1) arg1))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 1))
  :qid |prog.dict_args1|)))
(assert (and
  (extends_<Bool> (as int<PyType>  PyType) (as float<PyType>  PyType))
  (= (get_basic<PyType> (as int<PyType>  PyType)) (as int<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as float<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as float<PyType>  PyType)) (as float<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bool<PyType>  PyType) (as int<PyType>  PyType))
  (= (get_basic<PyType> (as bool<PyType>  PyType)) (as bool<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as NoneType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as NoneType<PyType>  PyType))
    (as NoneType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Exception<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Exception<PyType>  PyType))
    (as Exception<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as ConnectionRefusedError<PyType>  PyType) (as Exception<PyType>  PyType))
  (=
    (get_basic<PyType> (as ConnectionRefusedError<PyType>  PyType))
    (as ConnectionRefusedError<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as traceback<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as traceback<PyType>  PyType))
    (as traceback<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as str<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as str<PyType>  PyType)) (as str<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bytes<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as bytes<PyType>  PyType)) (as bytes<PyType>  PyType))))
(assert (forall ((args Seq<PyType>)) (!
  (and
    (=>
      (forall ((e PyType)) (!
        (=> (Seq_contains args e) (= e (as object<PyType>  PyType)))
        :pattern ((Seq_contains args e))
        :pattern ((Seq_contains_trigger args e))
        ))
      (extends_<Bool> (tuple<PyType> args) (as object<PyType>  PyType)))
    (= (get_basic<PyType> (tuple<PyType> args)) (as tuple_basic<PyType>  PyType)))
  :pattern ((tuple<PyType> args))
  :qid |prog.subtype_tuple|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSeq<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSeq<PyType> var0)) (as PSeq_basic<PyType>  PyType)))
  :pattern ((PSeq<PyType> var0))
  :qid |prog.subtype_PSeq|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSeq<PyType> arg0)) (= (PSeq_arg<PyType> Z 0) arg0))
  :pattern ((PSeq<PyType> arg0) (PSeq_arg<PyType> Z 0))
  :qid |prog.PSeq_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSet<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSet<PyType> var0)) (as PSet_basic<PyType>  PyType)))
  :pattern ((PSet<PyType> var0))
  :qid |prog.subtype_PSet|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSet<PyType> arg0)) (= (PSet_arg<PyType> Z 0) arg0))
  :pattern ((PSet<PyType> arg0) (PSet_arg<PyType> Z 0))
  :qid |prog.PSet_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PMultiset<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (PMultiset<PyType> var0))
      (as PMultiset_basic<PyType>  PyType)))
  :pattern ((PMultiset<PyType> var0))
  :qid |prog.subtype_PMultiset|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (PMultiset<PyType> arg0))
    (= (PMultiset_arg<PyType> Z 0) arg0))
  :pattern ((PMultiset<PyType> arg0) (PMultiset_arg<PyType> Z 0))
  :qid |prog.PMultiset_args0|)))
(assert (and
  (extends_<Bool> (as slice<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as slice<PyType>  PyType)) (as slice<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as py_range<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as py_range<PyType>  PyType))
    (as py_range<PyType>  PyType))))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (Iterator<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (Iterator<PyType> var0))
      (as Iterator_basic<PyType>  PyType)))
  :pattern ((Iterator<PyType> var0))
  :qid |prog.subtype_Iterator|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (Iterator<PyType> arg0))
    (= (Iterator_arg<PyType> Z 0) arg0))
  :pattern ((Iterator<PyType> arg0) (Iterator_arg<PyType> Z 0))
  :qid |prog.Iterator_args0|)))
(assert (and
  (extends_<Bool> (as Thread_0<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Thread_0<PyType>  PyType))
    (as Thread_0<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as LevelType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as LevelType<PyType>  PyType))
    (as LevelType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as type<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as type<PyType>  PyType)) (as type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Place<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as Place<PyType>  PyType)) (as Place<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as __prim__Seq_type<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as __prim__Seq_type<PyType>  PyType))
    (as __prim__Seq_type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as ObjectLock<PyType>  PyType) (Lock<PyType> (as A<PyType>  PyType)))
  (=
    (get_basic<PyType> (as ObjectLock<PyType>  PyType))
    (as ObjectLock<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as A<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as A<PyType>  PyType)) (as A<PyType>  PyType))))
(assert (forall ((T PyType)) (!
  (and
    (extends_<Bool> (Lock<PyType> T) (as BaseLock<PyType>  PyType))
    (= (get_basic<PyType> (Lock<PyType> T)) (as Lock_basic<PyType>  PyType)))
  :pattern ((Lock<PyType> T))
  :qid |prog.subtype_Lock|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (Lock<PyType> arg0)) (= (Lock_arg<PyType> Z 0) arg0))
  :pattern ((Lock<PyType> arg0) (Lock_arg<PyType> Z 0))
  :qid |prog.Lock_args0|)))
(assert (and
  (extends_<Bool> (as BaseLock<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as BaseLock<PyType>  PyType))
    (as BaseLock<PyType>  PyType))))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$guard<Bool> (Measure$create<Measure$> g k v)) g)
  :pattern ((Measure$guard<Bool> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A0|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$key<Ref> (Measure$create<Measure$> g k v)) k)
  :pattern ((Measure$key<Ref> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A1|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$value<Int> (Measure$create<Measure$> g k v)) v)
  :pattern ((Measure$value<Int> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A2|)))
(assert (forall ((___s Seq<$Ref>)) (!
  (= (Seq_length ___s) (seq_ref_length<Int> ___s))
  :pattern ((Seq_length ___s))
  :qid |prog.relate_length|)))
(assert (forall ((___s Seq<$Ref>) (___i Int)) (!
  (= (Seq_index ___s ___i) (seq_ref_index<Ref> ___s ___i))
  :pattern ((Seq_index ___s ___i))
  :qid |prog.relate_index|)))
(assert (forall ((i Int)) (!
  (= (_get_value<Int> (_single<_Name> i)) i)
  :pattern ((_single<_Name> i))
  :qid |prog.decompose_single|)))
(assert (forall ((n _Name)) (!
  (=> (_is_single<Bool> n) (= n (_single<_Name> (_get_value<Int> n))))
  :pattern ((_get_value<Int> n))
  :qid |prog.compose_single|)))
(assert (forall ((i Int)) (!
  (_name_type<Bool> (_single<_Name> i))
  :pattern ((_single<_Name> i))
  :qid |prog.type_of_single|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (and
    (= (_get_combined_prefix<_Name> (_combine<_Name> n1 n2)) n1)
    (= (_get_combined_name<_Name> (_combine<_Name> n1 n2)) n2))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.decompose_combined|)))
(assert (forall ((n _Name)) (!
  (=>
    (_is_combined<Bool> n)
    (=
      n
      (_combine<_Name> (_get_combined_prefix<_Name> n) (_get_combined_name<_Name> n))))
  :pattern ((_get_combined_prefix<_Name> n))
  :pattern ((_get_combined_name<_Name> n))
  :qid |prog.compose_combined|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (not (_name_type<Bool> (_combine<_Name> n1 n2)))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.type_of_composed|)))
(assert (forall ((n _Name)) (!
  (= (_name_type<Bool> n) (_is_single<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_single|)))
(assert (forall ((n _Name)) (!
  (= (not (_name_type<Bool> n)) (_is_combined<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_combined|)))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (= (str___val__%limited s@$ self@0@00) (str___val__ s@$ self@0@00))
  :pattern ((str___val__ s@$ self@0@00))
  :qid |quant-u-4518|)))
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (str___val__%stateless self@0@00)
  :pattern ((str___val__%limited s@$ self@0@00))
  :qid |quant-u-4519|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (= (str___len__%limited s@$ self@2@00) (str___len__ s@$ self@2@00))
  :pattern ((str___len__ s@$ self@2@00))
  :qid |quant-u-4520|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (str___len__%stateless self@2@00)
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-4521|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (str___len__%limited s@$ self@2@00))) (=>
    (str___len__%precondition s@$ self@2@00)
    (>= result@3@00 0)))
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-4564|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (str___len__%limited s@$ self@2@00))) true)
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-4565|)))
(assert (forall ((s@$ $Snap) (id@4@00 Int)) (!
  (= (_isDefined%limited s@$ id@4@00) (_isDefined s@$ id@4@00))
  :pattern ((_isDefined s@$ id@4@00))
  :qid |quant-u-4522|)))
(assert (forall ((s@$ $Snap) (id@4@00 Int)) (!
  (_isDefined%stateless id@4@00)
  :pattern ((_isDefined%limited s@$ id@4@00))
  :qid |quant-u-4523|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (=
    (__prim__bool___box__%limited s@$ prim@6@00)
    (__prim__bool___box__ s@$ prim@6@00))
  :pattern ((__prim__bool___box__ s@$ prim@6@00))
  :qid |quant-u-4524|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (__prim__bool___box__%stateless prim@6@00)
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-4525|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (let ((result@7@00 (__prim__bool___box__%limited s@$ prim@6@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@6@00)
    (and
      (= (typeof<PyType> result@7@00) (as bool<PyType>  PyType))
      (= (bool___unbox__%limited $Snap.unit result@7@00) prim@6@00)
      (= (int___unbox__%limited $Snap.unit result@7@00) (ite prim@6@00 1 0)))))
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-4566|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (let ((result@7@00 (__prim__bool___box__%limited s@$ prim@6@00))) true)
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-4567|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (let ((result@7@00 (__prim__bool___box__%limited s@$ prim@6@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@6@00)
    (bool___unbox__%precondition $Snap.unit result@7@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-4568|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (let ((result@7@00 (__prim__bool___box__%limited s@$ prim@6@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@6@00)
    (int___unbox__%precondition $Snap.unit result@7@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-4569|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (= (bool___unbox__%limited s@$ box@8@00) (bool___unbox__ s@$ box@8@00))
  :pattern ((bool___unbox__ s@$ box@8@00))
  :qid |quant-u-4526|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (bool___unbox__%stateless box@8@00)
  :pattern ((bool___unbox__%limited s@$ box@8@00))
  :qid |quant-u-4527|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (let ((result@9@00 (bool___unbox__%limited s@$ box@8@00))) (=>
    (bool___unbox__%precondition s@$ box@8@00)
    (= (__prim__bool___box__%limited $Snap.unit result@9@00) box@8@00)))
  :pattern ((bool___unbox__%limited s@$ box@8@00))
  :qid |quant-u-4570|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (let ((result@9@00 (bool___unbox__%limited s@$ box@8@00))) (=>
    (bool___unbox__%precondition s@$ box@8@00)
    (__prim__bool___box__%precondition $Snap.unit result@9@00)))
  :pattern ((bool___unbox__%limited s@$ box@8@00))
  :qid |quant-u-4571|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (= (int___unbox__%limited s@$ box@10@00) (int___unbox__ s@$ box@10@00))
  :pattern ((int___unbox__ s@$ box@10@00))
  :qid |quant-u-4528|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (int___unbox__%stateless box@10@00)
  :pattern ((int___unbox__%limited s@$ box@10@00))
  :qid |quant-u-4529|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (let ((result@11@00 (int___unbox__%limited s@$ box@10@00))) (=>
    (int___unbox__%precondition s@$ box@10@00)
    (and
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> box@10@00) (as bool<PyType>  PyType)))
        (= (__prim__int___box__%limited $Snap.unit result@11@00) box@10@00))
      (=>
        (issubtype<Bool> (typeof<PyType> box@10@00) (as bool<PyType>  PyType))
        (=
          (__prim__bool___box__%limited $Snap.unit (not (= result@11@00 0)))
          box@10@00)))))
  :pattern ((int___unbox__%limited s@$ box@10@00))
  :qid |quant-u-4572|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (let ((result@11@00 (int___unbox__%limited s@$ box@10@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@10@00)
      (not
        (issubtype<Bool> (typeof<PyType> box@10@00) (as bool<PyType>  PyType))))
    (__prim__int___box__%precondition $Snap.unit result@11@00)))
  :pattern ((int___unbox__%limited s@$ box@10@00))
  :qid |quant-u-4573|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (let ((result@11@00 (int___unbox__%limited s@$ box@10@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@10@00)
      (issubtype<Bool> (typeof<PyType> box@10@00) (as bool<PyType>  PyType)))
    (__prim__bool___box__%precondition $Snap.unit (not (= result@11@00 0)))))
  :pattern ((int___unbox__%limited s@$ box@10@00))
  :qid |quant-u-4574|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (=
    (__prim__int___box__%limited s@$ prim@12@00)
    (__prim__int___box__ s@$ prim@12@00))
  :pattern ((__prim__int___box__ s@$ prim@12@00))
  :qid |quant-u-4530|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (__prim__int___box__%stateless prim@12@00)
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  :qid |quant-u-4531|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (let ((result@13@00 (__prim__int___box__%limited s@$ prim@12@00))) (=>
    (__prim__int___box__%precondition s@$ prim@12@00)
    (and
      (= (typeof<PyType> result@13@00) (as int<PyType>  PyType))
      (= (int___unbox__%limited $Snap.unit result@13@00) prim@12@00))))
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  :qid |quant-u-4575|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (let ((result@13@00 (__prim__int___box__%limited s@$ prim@12@00))) true)
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  :qid |quant-u-4576|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (let ((result@13@00 (__prim__int___box__%limited s@$ prim@12@00))) (=>
    (__prim__int___box__%precondition s@$ prim@12@00)
    (int___unbox__%precondition $Snap.unit result@13@00)))
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  :qid |quant-u-4577|)))
(assert (forall ((s@$ $Snap) (r@14@00 $Ref)) (!
  (= (Level%limited s@$ r@14@00) (Level s@$ r@14@00))
  :pattern ((Level s@$ r@14@00))
  :qid |quant-u-4532|)))
(assert (forall ((s@$ $Snap) (r@14@00 $Ref)) (!
  (Level%stateless r@14@00)
  :pattern ((Level%limited s@$ r@14@00))
  :qid |quant-u-4533|)))
(assert (forall ((s@$ $Snap) (len@16@00 Int) (value@17@00 Int)) (!
  (=
    (str___create__%limited s@$ len@16@00 value@17@00)
    (str___create__ s@$ len@16@00 value@17@00))
  :pattern ((str___create__ s@$ len@16@00 value@17@00))
  :qid |quant-u-4534|)))
(assert (forall ((s@$ $Snap) (len@16@00 Int) (value@17@00 Int)) (!
  (str___create__%stateless len@16@00 value@17@00)
  :pattern ((str___create__%limited s@$ len@16@00 value@17@00))
  :qid |quant-u-4535|)))
(assert (forall ((s@$ $Snap) (len@16@00 Int) (value@17@00 Int)) (!
  (let ((result@18@00 (str___create__%limited s@$ len@16@00 value@17@00))) (=>
    (str___create__%precondition s@$ len@16@00 value@17@00)
    (and
      (= (str___len__ $Snap.unit result@18@00) len@16@00)
      (= (str___val__ $Snap.unit result@18@00) value@17@00)
      (= (typeof<PyType> result@18@00) (as str<PyType>  PyType)))))
  :pattern ((str___create__%limited s@$ len@16@00 value@17@00))
  :qid |quant-u-4578|)))
(assert (forall ((s@$ $Snap) (len@16@00 Int) (value@17@00 Int)) (!
  (let ((result@18@00 (str___create__%limited s@$ len@16@00 value@17@00))) (=>
    (str___create__%precondition s@$ len@16@00 value@17@00)
    (str___len__%precondition $Snap.unit result@18@00)))
  :pattern ((str___create__%limited s@$ len@16@00 value@17@00))
  :qid |quant-u-4579|)))
(assert (forall ((s@$ $Snap) (len@16@00 Int) (value@17@00 Int)) (!
  (let ((result@18@00 (str___create__%limited s@$ len@16@00 value@17@00))) (=>
    (str___create__%precondition s@$ len@16@00 value@17@00)
    (str___val__%precondition $Snap.unit result@18@00)))
  :pattern ((str___create__%limited s@$ len@16@00 value@17@00))
  :qid |quant-u-4580|)))
(assert (forall ((s@$ $Snap) (len@16@00 Int) (value@17@00 Int)) (!
  (let ((result@18@00 (str___create__%limited s@$ len@16@00 value@17@00))) true)
  :pattern ((str___create__%limited s@$ len@16@00 value@17@00))
  :qid |quant-u-4581|)))
(assert (forall ((s@$ $Snap) (map@19@00 Seq<Measure$>) (key@20@00 $Ref) (value@21@00 Int)) (!
  (=
    (Measure$check%limited s@$ map@19@00 key@20@00 value@21@00)
    (Measure$check s@$ map@19@00 key@20@00 value@21@00))
  :pattern ((Measure$check s@$ map@19@00 key@20@00 value@21@00))
  :qid |quant-u-4536|)))
(assert (forall ((s@$ $Snap) (map@19@00 Seq<Measure$>) (key@20@00 $Ref) (value@21@00 Int)) (!
  (Measure$check%stateless map@19@00 key@20@00 value@21@00)
  :pattern ((Measure$check%limited s@$ map@19@00 key@20@00 value@21@00))
  :qid |quant-u-4537|)))
(assert (forall ((s@$ $Snap) (map@19@00 Seq<Measure$>) (key@20@00 $Ref) (value@21@00 Int)) (!
  (=>
    (Measure$check%precondition s@$ map@19@00 key@20@00 value@21@00)
    (=
      (Measure$check s@$ map@19@00 key@20@00 value@21@00)
      (forall ((m Measure$)) (!
        (=>
          (and
            (Seq_contains map@19@00 m)
            (and (Measure$guard<Bool> m) (= (Measure$key<Ref> m) key@20@00)))
          (> (Measure$value<Int> m) value@21@00))
        :pattern ((Seq_contains map@19@00 m))
        :pattern ((Seq_contains_trigger map@19@00 m))
        :pattern ((Seq_contains_trigger map@19@00 m))
        ))))
  :pattern ((Measure$check s@$ map@19@00 key@20@00 value@21@00))
  :qid |quant-u-4582|)))
(assert (forall ((s@$ $Snap) (map@19@00 Seq<Measure$>) (key@20@00 $Ref) (value@21@00 Int)) (!
  true
  :pattern ((Measure$check s@$ map@19@00 key@20@00 value@21@00))
  :qid |quant-u-4583|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__name___0%limited s@$) (__name___0 s@$))
  :pattern ((__name___0 s@$))
  :qid |quant-u-4538|)))
(assert (forall ((s@$ $Snap)) (!
  (as __name___0%stateless  Bool)
  :pattern ((__name___0%limited s@$))
  :qid |quant-u-4539|)))
(assert (forall ((s@$ $Snap) (self_13@24@00 $Ref)) (!
  (=
    (Lock_get_locked%limited s@$ self_13@24@00)
    (Lock_get_locked s@$ self_13@24@00))
  :pattern ((Lock_get_locked s@$ self_13@24@00))
  :qid |quant-u-4540|)))
(assert (forall ((s@$ $Snap) (self_13@24@00 $Ref)) (!
  (Lock_get_locked%stateless self_13@24@00)
  :pattern ((Lock_get_locked%limited s@$ self_13@24@00))
  :qid |quant-u-4541|)))
(assert (forall ((s@$ $Snap) (self_13@24@00 $Ref)) (!
  (let ((result@25@00 (Lock_get_locked%limited s@$ self_13@24@00))) (=>
    (Lock_get_locked%precondition s@$ self_13@24@00)
    (issubtype<Bool> (typeof<PyType> result@25@00) (Lock_arg<PyType> (typeof<PyType> self_13@24@00) 0))))
  :pattern ((Lock_get_locked%limited s@$ self_13@24@00))
  :qid |quant-u-4584|)))
(assert (forall ((s@$ $Snap) (self_13@24@00 $Ref)) (!
  (let ((result@25@00 (Lock_get_locked%limited s@$ self_13@24@00))) true)
  :pattern ((Lock_get_locked%limited s@$ self_13@24@00))
  :qid |quant-u-4585|)))
(assert (forall ((s@$ $Snap) (self@26@00 $Ref) (other@27@00 $Ref)) (!
  (=
    (str___eq__%limited s@$ self@26@00 other@27@00)
    (str___eq__ s@$ self@26@00 other@27@00))
  :pattern ((str___eq__ s@$ self@26@00 other@27@00))
  :qid |quant-u-4542|)))
(assert (forall ((s@$ $Snap) (self@26@00 $Ref) (other@27@00 $Ref)) (!
  (str___eq__%stateless self@26@00 other@27@00)
  :pattern ((str___eq__%limited s@$ self@26@00 other@27@00))
  :qid |quant-u-4543|)))
(assert (forall ((s@$ $Snap) (self@26@00 $Ref) (other@27@00 $Ref)) (!
  (let ((result@28@00 (str___eq__%limited s@$ self@26@00 other@27@00))) (=>
    (str___eq__%precondition s@$ self@26@00 other@27@00)
    (and
      (=
        (=
          (str___val__ $Snap.unit self@26@00)
          (str___val__ $Snap.unit other@27@00))
        result@28@00)
      (=>
        result@28@00
        (=
          (str___len__ $Snap.unit self@26@00)
          (str___len__ $Snap.unit other@27@00))))))
  :pattern ((str___eq__%limited s@$ self@26@00 other@27@00))
  :qid |quant-u-4586|)))
(assert (forall ((s@$ $Snap) (self@26@00 $Ref) (other@27@00 $Ref)) (!
  (let ((result@28@00 (str___eq__%limited s@$ self@26@00 other@27@00))) (=>
    (str___eq__%precondition s@$ self@26@00 other@27@00)
    (and
      (str___val__%precondition $Snap.unit self@26@00)
      (str___val__%precondition $Snap.unit other@27@00))))
  :pattern ((str___eq__%limited s@$ self@26@00 other@27@00))
  :qid |quant-u-4587|)))
(assert (forall ((s@$ $Snap) (self@26@00 $Ref) (other@27@00 $Ref)) (!
  (let ((result@28@00 (str___eq__%limited s@$ self@26@00 other@27@00))) (=>
    (and (str___eq__%precondition s@$ self@26@00 other@27@00) result@28@00)
    (and
      (str___len__%precondition $Snap.unit self@26@00)
      (str___len__%precondition $Snap.unit other@27@00))))
  :pattern ((str___eq__%limited s@$ self@26@00 other@27@00))
  :qid |quant-u-4588|)))
(assert (forall ((s@$ $Snap) (self@29@00 Int) (other@30@00 Int)) (!
  (=
    (int___ge__%limited s@$ self@29@00 other@30@00)
    (int___ge__ s@$ self@29@00 other@30@00))
  :pattern ((int___ge__ s@$ self@29@00 other@30@00))
  :qid |quant-u-4544|)))
(assert (forall ((s@$ $Snap) (self@29@00 Int) (other@30@00 Int)) (!
  (int___ge__%stateless self@29@00 other@30@00)
  :pattern ((int___ge__%limited s@$ self@29@00 other@30@00))
  :qid |quant-u-4545|)))
(assert (forall ((s@$ $Snap) (self@29@00 Int) (other@30@00 Int)) (!
  (=>
    (int___ge__%precondition s@$ self@29@00 other@30@00)
    (= (int___ge__ s@$ self@29@00 other@30@00) (>= self@29@00 other@30@00)))
  :pattern ((int___ge__ s@$ self@29@00 other@30@00))
  :qid |quant-u-4589|)))
(assert (forall ((s@$ $Snap) (self@29@00 Int) (other@30@00 Int)) (!
  true
  :pattern ((int___ge__ s@$ self@29@00 other@30@00))
  :qid |quant-u-4590|)))
(assert (forall ((s@$ $Snap) (self@32@00 Int) (other@33@00 Int)) (!
  (=
    (int___lt__%limited s@$ self@32@00 other@33@00)
    (int___lt__ s@$ self@32@00 other@33@00))
  :pattern ((int___lt__ s@$ self@32@00 other@33@00))
  :qid |quant-u-4546|)))
(assert (forall ((s@$ $Snap) (self@32@00 Int) (other@33@00 Int)) (!
  (int___lt__%stateless self@32@00 other@33@00)
  :pattern ((int___lt__%limited s@$ self@32@00 other@33@00))
  :qid |quant-u-4547|)))
(assert (forall ((s@$ $Snap) (self@32@00 Int) (other@33@00 Int)) (!
  (=>
    (int___lt__%precondition s@$ self@32@00 other@33@00)
    (= (int___lt__ s@$ self@32@00 other@33@00) (< self@32@00 other@33@00)))
  :pattern ((int___lt__ s@$ self@32@00 other@33@00))
  :qid |quant-u-4591|)))
(assert (forall ((s@$ $Snap) (self@32@00 Int) (other@33@00 Int)) (!
  true
  :pattern ((int___lt__ s@$ self@32@00 other@33@00))
  :qid |quant-u-4592|)))
(assert (forall ((s@$ $Snap) (self@35@00 Int) (other@36@00 Int)) (!
  (=
    (int___add__%limited s@$ self@35@00 other@36@00)
    (int___add__ s@$ self@35@00 other@36@00))
  :pattern ((int___add__ s@$ self@35@00 other@36@00))
  :qid |quant-u-4548|)))
(assert (forall ((s@$ $Snap) (self@35@00 Int) (other@36@00 Int)) (!
  (int___add__%stateless self@35@00 other@36@00)
  :pattern ((int___add__%limited s@$ self@35@00 other@36@00))
  :qid |quant-u-4549|)))
(assert (forall ((s@$ $Snap) (self@35@00 Int) (other@36@00 Int)) (!
  (=>
    (int___add__%precondition s@$ self@35@00 other@36@00)
    (= (int___add__ s@$ self@35@00 other@36@00) (+ self@35@00 other@36@00)))
  :pattern ((int___add__ s@$ self@35@00 other@36@00))
  :qid |quant-u-4593|)))
(assert (forall ((s@$ $Snap) (self@35@00 Int) (other@36@00 Int)) (!
  true
  :pattern ((int___add__ s@$ self@35@00 other@36@00))
  :qid |quant-u-4594|)))
(assert (forall ((s@$ $Snap) (self@38@00 Int) (other@39@00 Int)) (!
  (=
    (int___sub__%limited s@$ self@38@00 other@39@00)
    (int___sub__ s@$ self@38@00 other@39@00))
  :pattern ((int___sub__ s@$ self@38@00 other@39@00))
  :qid |quant-u-4550|)))
(assert (forall ((s@$ $Snap) (self@38@00 Int) (other@39@00 Int)) (!
  (int___sub__%stateless self@38@00 other@39@00)
  :pattern ((int___sub__%limited s@$ self@38@00 other@39@00))
  :qid |quant-u-4551|)))
(assert (forall ((s@$ $Snap) (self@38@00 Int) (other@39@00 Int)) (!
  (=>
    (int___sub__%precondition s@$ self@38@00 other@39@00)
    (= (int___sub__ s@$ self@38@00 other@39@00) (- self@38@00 other@39@00)))
  :pattern ((int___sub__ s@$ self@38@00 other@39@00))
  :qid |quant-u-4595|)))
(assert (forall ((s@$ $Snap) (self@38@00 Int) (other@39@00 Int)) (!
  true
  :pattern ((int___sub__ s@$ self@38@00 other@39@00))
  :qid |quant-u-4596|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__file___0%limited s@$) (__file___0 s@$))
  :pattern ((__file___0 s@$))
  :qid |quant-u-4552|)))
(assert (forall ((s@$ $Snap)) (!
  (as __file___0%stateless  Bool)
  :pattern ((__file___0%limited s@$))
  :qid |quant-u-4553|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__file__%limited s@$) (__file__ s@$))
  :pattern ((__file__ s@$))
  :qid |quant-u-4554|)))
(assert (forall ((s@$ $Snap)) (!
  (as __file__%stateless  Bool)
  :pattern ((__file__%limited s@$))
  :qid |quant-u-4555|)))
(assert (forall ((s@$ $Snap) (val@43@00 $Ref) (id@44@00 Int)) (!
  (=
    (_checkDefined%limited s@$ val@43@00 id@44@00)
    (_checkDefined s@$ val@43@00 id@44@00))
  :pattern ((_checkDefined s@$ val@43@00 id@44@00))
  :qid |quant-u-4556|)))
(assert (forall ((s@$ $Snap) (val@43@00 $Ref) (id@44@00 Int)) (!
  (_checkDefined%stateless val@43@00 id@44@00)
  :pattern ((_checkDefined%limited s@$ val@43@00 id@44@00))
  :qid |quant-u-4557|)))
(assert (forall ((s@$ $Snap) (val@43@00 $Ref) (id@44@00 Int)) (!
  (=>
    (_checkDefined%precondition s@$ val@43@00 id@44@00)
    (= (_checkDefined s@$ val@43@00 id@44@00) val@43@00))
  :pattern ((_checkDefined s@$ val@43@00 id@44@00))
  :qid |quant-u-4597|)))
(assert (forall ((s@$ $Snap) (val@43@00 $Ref) (id@44@00 Int)) (!
  true
  :pattern ((_checkDefined s@$ val@43@00 id@44@00))
  :qid |quant-u-4598|)))
(assert (forall ((s@$ $Snap) (self@46@00 $Ref) (other@47@00 $Ref)) (!
  (=
    (int___eq__%limited s@$ self@46@00 other@47@00)
    (int___eq__ s@$ self@46@00 other@47@00))
  :pattern ((int___eq__ s@$ self@46@00 other@47@00))
  :qid |quant-u-4558|)))
(assert (forall ((s@$ $Snap) (self@46@00 $Ref) (other@47@00 $Ref)) (!
  (int___eq__%stateless self@46@00 other@47@00)
  :pattern ((int___eq__%limited s@$ self@46@00 other@47@00))
  :qid |quant-u-4559|)))
(assert (forall ((s@$ $Snap) (self@46@00 $Ref) (other@47@00 $Ref)) (!
  (=>
    (int___eq__%precondition s@$ self@46@00 other@47@00)
    (=
      (int___eq__ s@$ self@46@00 other@47@00)
      (=
        (int___unbox__ $Snap.unit self@46@00)
        (int___unbox__ $Snap.unit other@47@00))))
  :pattern ((int___eq__ s@$ self@46@00 other@47@00))
  :qid |quant-u-4599|)))
(assert (forall ((s@$ $Snap) (self@46@00 $Ref) (other@47@00 $Ref)) (!
  (=>
    (int___eq__%precondition s@$ self@46@00 other@47@00)
    (and
      (int___unbox__%precondition $Snap.unit self@46@00)
      (int___unbox__%precondition $Snap.unit other@47@00)))
  :pattern ((int___eq__ s@$ self@46@00 other@47@00))
  :qid |quant-u-4600|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__name__%limited s@$) (__name__ s@$))
  :pattern ((__name__ s@$))
  :qid |quant-u-4560|)))
(assert (forall ((s@$ $Snap)) (!
  (as __name__%stateless  Bool)
  :pattern ((__name__%limited s@$))
  :qid |quant-u-4561|)))
(assert (forall ((s@$ $Snap) (self@50@00 Int) (other@51@00 Int)) (!
  (=
    (int___le__%limited s@$ self@50@00 other@51@00)
    (int___le__ s@$ self@50@00 other@51@00))
  :pattern ((int___le__ s@$ self@50@00 other@51@00))
  :qid |quant-u-4562|)))
(assert (forall ((s@$ $Snap) (self@50@00 Int) (other@51@00 Int)) (!
  (int___le__%stateless self@50@00 other@51@00)
  :pattern ((int___le__%limited s@$ self@50@00 other@51@00))
  :qid |quant-u-4563|)))
(assert (forall ((s@$ $Snap) (self@50@00 Int) (other@51@00 Int)) (!
  (=>
    (int___le__%precondition s@$ self@50@00 other@51@00)
    (= (int___le__ s@$ self@50@00 other@51@00) (<= self@50@00 other@51@00)))
  :pattern ((int___le__ s@$ self@50@00 other@51@00))
  :qid |quant-u-4601|)))
(assert (forall ((s@$ $Snap) (self@50@00 Int) (other@51@00 Int)) (!
  true
  :pattern ((int___le__ s@$ self@50@00 other@51@00))
  :qid |quant-u-4602|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- A___init__ ----------
(declare-const _cthread_157@0@01 $Ref)
(declare-const _caller_measures_157@1@01 Seq<Measure$>)
(declare-const _residue_157@2@01 $Perm)
(declare-const self_0@3@01 $Ref)
(declare-const _current_wait_level_157@4@01 $Perm)
(declare-const _cthread_157@5@01 $Ref)
(declare-const _caller_measures_157@6@01 Seq<Measure$>)
(declare-const _residue_157@7@01 $Perm)
(declare-const self_0@8@01 $Ref)
(declare-const _current_wait_level_157@9@01 $Perm)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@10@01 $Snap)
(assert (= $t@10@01 ($Snap.combine ($Snap.first $t@10@01) ($Snap.second $t@10@01))))
(assert (= ($Snap.first $t@10@01) $Snap.unit))
; [eval] _cthread_157 != null
(assert (not (= _cthread_157@5@01 $Ref.null)))
(assert (=
  ($Snap.second $t@10@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@10@01))
    ($Snap.second ($Snap.second $t@10@01)))))
(assert (= ($Snap.first ($Snap.second $t@10@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_157@5@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@10@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@10@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@10@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@10@01))) $Snap.unit))
; [eval] self_0 != null
(assert (not (= self_0@8@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@10@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@10@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01))))))))
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0), A())
; [eval] typeof(self_0)
; [eval] A()
(assert (issubtype<Bool> (typeof<PyType> self_0@8@01) (as A<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01)))))))
  $Snap.unit))
; [eval] self_0 != null
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@11@01 $Snap)
(assert (= $t@11@01 ($Snap.combine ($Snap.first $t@11@01) ($Snap.second $t@11@01))))
(assert (= ($Snap.first $t@11@01) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_157)
(assert (=
  ($Snap.second $t@11@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@11@01))
    ($Snap.second ($Snap.second $t@11@01)))))
(assert (= ($Snap.first ($Snap.second $t@11@01)) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_157)
(assert (=
  ($Snap.second ($Snap.second $t@11@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@11@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@11@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@11@01))) $Snap.unit))
; [eval] _residue_157 <= _current_wait_level_157
(assert (<= _residue_157@7@01 _current_wait_level_157@9@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@11@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@12@01 $Ref)
; [exec]
; var self_18: Ref
(declare-const self_18@13@01 $Ref)
; [exec]
; var _cwl_157: Perm
(declare-const _cwl_157@14@01 $Perm)
; [exec]
; var _method_measures_157: Seq[Measure$]
(declare-const _method_measures_157@15@01 Seq<Measure$>)
; [exec]
; _method_measures_157 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_0) == A()
(declare-const $t@16@01 $Snap)
(assert (= $t@16@01 $Snap.unit))
; [eval] typeof(self_0) == A()
; [eval] typeof(self_0)
; [eval] A()
(assert (= (typeof<PyType> self_0@8@01) (as A<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_18 := self_0
; [eval] perm(_MaySet(self_18, 7888705)) > none
; [eval] perm(_MaySet(self_18, 7888705))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 0 | True | live]
; [else-branch: 0 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 0 | True]
; [exec]
; exhale acc(_MaySet(self_18, 7888705), write)
; [exec]
; inhale acc(self_18.A_x, write)
(declare-const $t@17@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self_18.A_x := null
; [eval] perm(_MaySet(self_18, 7954241)) > none
; [eval] perm(_MaySet(self_18, 7954241))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1 | True | live]
; [else-branch: 1 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1 | True]
; [exec]
; exhale acc(_MaySet(self_18, 7954241), write)
; [exec]
; inhale acc(self_18.A_y, write)
(declare-const $t@18@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self_18.A_y := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(set-option :timeout 0)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const A_y@19@01 $Ref)
(assert (= A_y@19@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; label __end
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 4
; [eval] !(perm(_MaySet(self_18, 7954241)) > none)
; [eval] perm(_MaySet(self_18, 7954241)) > none
; [eval] perm(_MaySet(self_18, 7954241))
; [then-branch: 2 | False | dead]
; [else-branch: 2 | True | live]
(push) ; 4
; [else-branch: 2 | True]
(pop) ; 4
(pop) ; 3
; [eval] !(perm(_MaySet(self_18, 7888705)) > none)
; [eval] perm(_MaySet(self_18, 7888705)) > none
; [eval] perm(_MaySet(self_18, 7888705))
; [then-branch: 3 | False | dead]
; [else-branch: 3 | True | live]
(push) ; 3
; [else-branch: 3 | True]
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- A_m1_hide ----------
(declare-const _cthread_158@20@01 $Ref)
(declare-const _caller_measures_158@21@01 Seq<Measure$>)
(declare-const _residue_158@22@01 $Perm)
(declare-const self_1@23@01 $Ref)
(declare-const _current_wait_level_158@24@01 $Perm)
(declare-const _cthread_158@25@01 $Ref)
(declare-const _caller_measures_158@26@01 Seq<Measure$>)
(declare-const _residue_158@27@01 $Perm)
(declare-const self_1@28@01 $Ref)
(declare-const _current_wait_level_158@29@01 $Perm)
(push) ; 1
(declare-const $t@30@01 $Snap)
(assert (= $t@30@01 ($Snap.combine ($Snap.first $t@30@01) ($Snap.second $t@30@01))))
(assert (= ($Snap.first $t@30@01) $Snap.unit))
; [eval] _cthread_158 != null
(assert (not (= _cthread_158@25@01 $Ref.null)))
(assert (=
  ($Snap.second $t@30@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@30@01))
    ($Snap.second ($Snap.second $t@30@01)))))
(assert (= ($Snap.first ($Snap.second $t@30@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_158), Thread_0())
; [eval] typeof(_cthread_158)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_158@25@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@30@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@30@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@30@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@30@01))) $Snap.unit))
; [eval] issubtype(typeof(self_1), A())
; [eval] typeof(self_1)
; [eval] A()
(assert (issubtype<Bool> (typeof<PyType> self_1@28@01) (as A<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@30@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@30@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@30@01))))
  $Snap.unit))
; [eval] self_1 != null
(assert (not (= self_1@28@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01))))))
  $Snap.unit))
; [eval] self_1.A_x == null || issubtype(typeof(self_1.A_x), ObjectLock())
; [eval] self_1.A_x == null
(push) ; 2
; [then-branch: 4 | First:(Second:(Second:(Second:(Second:($t@30@01))))) == Null | live]
; [else-branch: 4 | First:(Second:(Second:(Second:(Second:($t@30@01))))) != Null | live]
(push) ; 3
; [then-branch: 4 | First:(Second:(Second:(Second:(Second:($t@30@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01))))))
  $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 4 | First:(Second:(Second:(Second:(Second:($t@30@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_1.A_x), ObjectLock())
; [eval] typeof(self_1.A_x)
; [eval] ObjectLock()
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@31@01 $Snap)
(assert (= $t@31@01 ($Snap.combine ($Snap.first $t@31@01) ($Snap.second $t@31@01))))
(assert (= ($Snap.first $t@31@01) $Snap.unit))
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _current_wait_level_158)
(assert (=
  ($Snap.second $t@31@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@31@01))
    ($Snap.second ($Snap.second $t@31@01)))))
(assert (= ($Snap.first ($Snap.second $t@31@01)) $Snap.unit))
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _current_wait_level_158)
(assert (=
  ($Snap.second ($Snap.second $t@31@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@31@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@31@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@31@01))) $Snap.unit))
; [eval] _residue_158 <= _current_wait_level_158
(assert (<= _residue_158@27@01 _current_wait_level_158@29@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@31@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@32@01 $Ref)
; [exec]
; var x_0: Ref
(declare-const x_0@33@01 $Ref)
; [exec]
; var self_19: Ref
(declare-const self_19@34@01 $Ref)
; [exec]
; var _loop_measures: Seq[Measure$]
(declare-const _loop_measures@35@01 Seq<Measure$>)
; [exec]
; var _loop_check_before: Bool
(declare-const _loop_check_before@36@01 Bool)
; [exec]
; var _loop_termination_flag: Bool
(declare-const _loop_termination_flag@37@01 Bool)
; [exec]
; var _loop_original_must_terminate: Perm
(declare-const _loop_original_must_terminate@38@01 $Perm)
; [exec]
; var _residue_175: Perm
(declare-const _residue_175@39@01 $Perm)
; [exec]
; var _cwl_158: Perm
(declare-const _cwl_158@40@01 $Perm)
; [exec]
; var _method_measures_158: Seq[Measure$]
(declare-const _method_measures_158@41@01 Seq<Measure$>)
; [exec]
; _method_measures_158 := Seq(Measure$create(true, self_1.A_x, 2))
; [eval] Seq(Measure$create(true, self_1.A_x, 2))
; [eval] Measure$create(true, self_1.A_x, 2)
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01)))))) 2)))
  1))
(declare-const _method_measures_158@42@01 Seq<Measure$>)
(assert (=
  _method_measures_158@42@01
  (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01)))))) 2))))
; [exec]
; inhale typeof(self_1) == A()
(declare-const $t@43@01 $Snap)
(assert (= $t@43@01 $Snap.unit))
; [eval] typeof(self_1) == A()
; [eval] typeof(self_1)
; [eval] A()
(assert (= (typeof<PyType> self_1@28@01) (as A<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_19 := self_1
; [exec]
; x_0 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const x_0@44@01 $Ref)
(assert (= x_0@44@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(3170168)
(declare-const $t@45@01 $Snap)
(assert (= $t@45@01 $Snap.unit))
; [eval] _isDefined(3170168)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3170168))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3170168))
(assert (_isDefined $Snap.unit 3170168))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate := perm(MustTerminate(_cthread_158))
; [eval] perm(MustTerminate(_cthread_158))
(declare-const _loop_original_must_terminate@46@01 $Perm)
(assert (= _loop_original_must_terminate@46@01 $Perm.No))
; [exec]
; _loop_termination_flag := false
; [exec]
; _loop_check_before := true
(declare-const _loop_measures@47@01 Seq<Measure$>)
(declare-const x_0@48@01 $Ref)
(declare-const _loop_check_before@49@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@50@01 $Snap)
(assert (= $t@50@01 ($Snap.combine ($Snap.first $t@50@01) ($Snap.second $t@50@01))))
(assert (= ($Snap.first $t@50@01) $Snap.unit))
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _residue_175)
(assert (=
  ($Snap.second $t@50@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@50@01))
    ($Snap.second ($Snap.second $t@50@01)))))
(assert (= ($Snap.first ($Snap.second $t@50@01)) $Snap.unit))
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _residue_175)
(assert (=
  ($Snap.second ($Snap.second $t@50@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@50@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@50@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@50@01))) $Snap.unit))
; [eval] _residue_158 <= _residue_175
(assert (<= _residue_158@27@01 _residue_175@39@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@50@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(x_0), int())
; [eval] typeof(x_0)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> x_0@48@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(x_0), int())
; [eval] typeof(x_0)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> x_0@44@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_0@44@01) (as int<PyType>  PyType)))
; [eval] _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(x_0, 3170168)), 5) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5 | True | live]
; [else-branch: 5 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 5 | True]
; [eval] _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(x_0, 3170168)), 5) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))))
(push) ; 6
; [then-branch: 6 | False | live]
; [else-branch: 6 | True | live]
(push) ; 7
; [then-branch: 6 | False]
(assert false)
(pop) ; 7
(push) ; 7
; [else-branch: 6 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(x_0, 3170168)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_0, 3170168)), 5)
; [eval] int___unbox__(_checkDefined(x_0, 3170168))
; [eval] _checkDefined(x_0, 3170168)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@44@01 3170168))
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_0@44@01 3170168))
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@44@01 3170168)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@44@01 3170168)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@44@01 3170168)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168))))
(push) ; 8
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5))
(pop) ; 8
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5))
(push) ; 8
; [then-branch: 7 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_0@44@01, 3170168)), 5)) | live]
; [else-branch: 7 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_0@44@01, 3170168)), 5) | live]
(push) ; 9
; [then-branch: 7 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_0@44@01, 3170168)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5)))
(pop) ; 9
(push) ; 9
; [else-branch: 7 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_0@44@01, 3170168)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5))
; [eval] perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_158)) == none
; [eval] perm(MustTerminate(_cthread_158))
(push) ; 10
; [then-branch: 8 | False | live]
; [else-branch: 8 | True | live]
(push) ; 11
; [then-branch: 8 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 8 | True]
; [eval] (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false)
(push) ; 12
; [then-branch: 9 | False | live]
; [else-branch: 9 | True | live]
(push) ; 13
; [then-branch: 9 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 9 | True]
; [eval] (forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false)
(push) ; 14
; [then-branch: 10 | False | live]
; [else-branch: 10 | True | live]
(push) ; 15
; [then-branch: 10 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 10 | True]
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 11 | True | live]
; [else-branch: 11 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 11 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit x_0@44@01 3170168)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@44@01 3170168)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5)
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit x_0@44@01 3170168)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_0@44@01 3170168)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5)
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5)))))
(push) ; 4
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(x_0, 3170168)), 5) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 12 | True | live]
; [else-branch: 12 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 12 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(x_0, 3170168)), 5) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 13 | False | live]
; [else-branch: 13 | True | live]
(push) ; 7
; [then-branch: 13 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 13 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(x_0, 3170168)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_0, 3170168)), 5)
; [eval] int___unbox__(_checkDefined(x_0, 3170168))
; [eval] _checkDefined(x_0, 3170168)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 14 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_0@44@01, 3170168)), 5)) | live]
; [else-branch: 14 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_0@44@01, 3170168)), 5) | live]
(push) ; 9
; [then-branch: 14 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_0@44@01, 3170168)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 14 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_0@44@01, 3170168)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_158)) == none
; [eval] perm(MustTerminate(_cthread_158))
(set-option :timeout 0)
(push) ; 10
; [then-branch: 15 | False | live]
; [else-branch: 15 | True | live]
(push) ; 11
; [then-branch: 15 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 15 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 16 | False | live]
; [else-branch: 16 | True | live]
(push) ; 13
; [then-branch: 16 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 13
(set-option :timeout 0)
(push) ; 13
; [else-branch: 16 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false)
(set-option :timeout 0)
(push) ; 14
; [then-branch: 17 | False | live]
; [else-branch: 17 | True | live]
(push) ; 15
; [then-branch: 17 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 15
(set-option :timeout 0)
(push) ; 15
; [else-branch: 17 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false)
(set-option :timeout 0)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 18 | True | live]
; [else-branch: 18 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 18 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(x_0, 3170168)), 5) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 19 | True | live]
; [else-branch: 19 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 19 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(x_0, 3170168)), 5) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 20 | False | live]
; [else-branch: 20 | True | live]
(push) ; 7
; [then-branch: 20 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 20 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(x_0, 3170168)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_0, 3170168)), 5)
; [eval] int___unbox__(_checkDefined(x_0, 3170168))
; [eval] _checkDefined(x_0, 3170168)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 21 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_0@44@01, 3170168)), 5)) | live]
; [else-branch: 21 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_0@44@01, 3170168)), 5) | live]
(push) ; 9
; [then-branch: 21 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_0@44@01, 3170168)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 21 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_0@44@01, 3170168)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_158)) == none
; [eval] perm(MustTerminate(_cthread_158))
(set-option :timeout 0)
(push) ; 10
; [then-branch: 22 | False | live]
; [else-branch: 22 | True | live]
(push) ; 11
; [then-branch: 22 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 22 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 23 | False | live]
; [else-branch: 23 | True | live]
(push) ; 13
; [then-branch: 23 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 13
(set-option :timeout 0)
(push) ; 13
; [else-branch: 23 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false)
(set-option :timeout 0)
(push) ; 14
; [then-branch: 24 | False | live]
; [else-branch: 24 | True | live]
(push) ; 15
; [then-branch: 24 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 15
(set-option :timeout 0)
(push) ; 15
; [else-branch: 24 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false)
(set-option :timeout 0)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 25 | True | live]
; [else-branch: 25 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 25 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(x_0, 3170168)), 5) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 26 | True | live]
; [else-branch: 26 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 26 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(x_0, 3170168)), 5) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 27 | False | live]
; [else-branch: 27 | True | live]
(push) ; 7
; [then-branch: 27 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 27 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(x_0, 3170168)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_0, 3170168)), 5)
; [eval] int___unbox__(_checkDefined(x_0, 3170168))
; [eval] _checkDefined(x_0, 3170168)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 28 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_0@44@01, 3170168)), 5)) | live]
; [else-branch: 28 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_0@44@01, 3170168)), 5) | live]
(push) ; 9
; [then-branch: 28 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_0@44@01, 3170168)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 28 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_0@44@01, 3170168)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_158)) == none
; [eval] perm(MustTerminate(_cthread_158))
(set-option :timeout 0)
(push) ; 10
; [then-branch: 29 | False | live]
; [else-branch: 29 | True | live]
(push) ; 11
; [then-branch: 29 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 29 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 30 | False | live]
; [else-branch: 30 | True | live]
(push) ; 13
; [then-branch: 30 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 13
(set-option :timeout 0)
(push) ; 13
; [else-branch: 30 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false)
(set-option :timeout 0)
(push) ; 14
; [then-branch: 31 | False | live]
; [else-branch: 31 | True | live]
(push) ; 15
; [then-branch: 31 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 15
(set-option :timeout 0)
(push) ; 15
; [else-branch: 31 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false)
(set-option :timeout 0)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 32 | True | live]
; [else-branch: 32 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 32 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_0@44@01 3170168)) 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- A_m2_hide ----------
(declare-const _cthread_159@51@01 $Ref)
(declare-const _caller_measures_159@52@01 Seq<Measure$>)
(declare-const _residue_159@53@01 $Perm)
(declare-const self_2@54@01 $Ref)
(declare-const _current_wait_level_159@55@01 $Perm)
(declare-const _cthread_159@56@01 $Ref)
(declare-const _caller_measures_159@57@01 Seq<Measure$>)
(declare-const _residue_159@58@01 $Perm)
(declare-const self_2@59@01 $Ref)
(declare-const _current_wait_level_159@60@01 $Perm)
(push) ; 1
(declare-const $t@61@01 $Snap)
(assert (= $t@61@01 ($Snap.combine ($Snap.first $t@61@01) ($Snap.second $t@61@01))))
(assert (= ($Snap.first $t@61@01) $Snap.unit))
; [eval] _cthread_159 != null
(assert (not (= _cthread_159@56@01 $Ref.null)))
(assert (=
  ($Snap.second $t@61@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@61@01))
    ($Snap.second ($Snap.second $t@61@01)))))
(assert (= ($Snap.first ($Snap.second $t@61@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_159), Thread_0())
; [eval] typeof(_cthread_159)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_159@56@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@61@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@61@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@61@01))) $Snap.unit))
; [eval] issubtype(typeof(self_2), A())
; [eval] typeof(self_2)
; [eval] A()
(assert (issubtype<Bool> (typeof<PyType> self_2@59@01) (as A<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@61@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@61@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@61@01))))
  $Snap.unit))
; [eval] self_2 != null
(assert (not (= self_2@59@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))
  $Snap.unit))
; [eval] self_2.A_x == null || issubtype(typeof(self_2.A_x), ObjectLock())
; [eval] self_2.A_x == null
(push) ; 2
; [then-branch: 33 | First:(Second:(Second:(Second:(Second:($t@61@01))))) == Null | live]
; [else-branch: 33 | First:(Second:(Second:(Second:(Second:($t@61@01))))) != Null | live]
(push) ; 3
; [then-branch: 33 | First:(Second:(Second:(Second:(Second:($t@61@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))
  $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 33 | First:(Second:(Second:(Second:(Second:($t@61@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_2.A_x), ObjectLock())
; [eval] typeof(self_2.A_x)
; [eval] ObjectLock()
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@62@01 $Snap)
(assert (= $t@62@01 ($Snap.combine ($Snap.first $t@62@01) ($Snap.second $t@62@01))))
(assert (= ($Snap.first $t@62@01) $Snap.unit))
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) <= _current_wait_level_159)
(assert (=
  ($Snap.second $t@62@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@62@01))
    ($Snap.second ($Snap.second $t@62@01)))))
(assert (= ($Snap.first ($Snap.second $t@62@01)) $Snap.unit))
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) <= _current_wait_level_159)
(assert (=
  ($Snap.second ($Snap.second $t@62@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@62@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@62@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@62@01))) $Snap.unit))
; [eval] _residue_159 <= _current_wait_level_159
(assert (<= _residue_159@58@01 _current_wait_level_159@60@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@62@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@63@01 $Ref)
; [exec]
; var x_1: Ref
(declare-const x_1@64@01 $Ref)
; [exec]
; var self_20: Ref
(declare-const self_20@65@01 $Ref)
; [exec]
; var _loop_measures_0: Seq[Measure$]
(declare-const _loop_measures_0@66@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_0: Bool
(declare-const _loop_check_before_0@67@01 Bool)
; [exec]
; var _loop_termination_flag_0: Bool
(declare-const _loop_termination_flag_0@68@01 Bool)
; [exec]
; var _loop_original_must_terminate_0: Perm
(declare-const _loop_original_must_terminate_0@69@01 $Perm)
; [exec]
; var _residue_176: Perm
(declare-const _residue_176@70@01 $Perm)
; [exec]
; var _cwl_159: Perm
(declare-const _cwl_159@71@01 $Perm)
; [exec]
; var _method_measures_159: Seq[Measure$]
(declare-const _method_measures_159@72@01 Seq<Measure$>)
; [exec]
; _method_measures_159 := Seq(Measure$create(true, self_2.A_x, 2))
; [eval] Seq(Measure$create(true, self_2.A_x, 2))
; [eval] Measure$create(true, self_2.A_x, 2)
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01)))))) 2)))
  1))
(declare-const _method_measures_159@73@01 Seq<Measure$>)
(assert (=
  _method_measures_159@73@01
  (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01)))))) 2))))
; [exec]
; inhale typeof(self_2) == A()
(declare-const $t@74@01 $Snap)
(assert (= $t@74@01 $Snap.unit))
; [eval] typeof(self_2) == A()
; [eval] typeof(self_2)
; [eval] A()
(assert (= (typeof<PyType> self_2@59@01) (as A<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_20 := self_2
; [exec]
; x_1 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const x_1@75@01 $Ref)
(assert (= x_1@75@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(3235704)
(declare-const $t@76@01 $Snap)
(assert (= $t@76@01 $Snap.unit))
; [eval] _isDefined(3235704)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3235704))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3235704))
(assert (_isDefined $Snap.unit 3235704))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_0 := perm(MustTerminate(_cthread_159))
; [eval] perm(MustTerminate(_cthread_159))
(declare-const _loop_original_must_terminate_0@77@01 $Perm)
(assert (= _loop_original_must_terminate_0@77@01 $Perm.No))
; [exec]
; _loop_termination_flag_0 := true
; [exec]
; _loop_check_before_0 := true
(declare-const _loop_measures_0@78@01 Seq<Measure$>)
(declare-const x_1@79@01 $Ref)
(declare-const _loop_check_before_0@80@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@81@01 $Snap)
(assert (= $t@81@01 ($Snap.combine ($Snap.first $t@81@01) ($Snap.second $t@81@01))))
(assert (= ($Snap.first $t@81@01) $Snap.unit))
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: Level(_r_7) <= _residue_176)
(assert (=
  ($Snap.second $t@81@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@81@01))
    ($Snap.second ($Snap.second $t@81@01)))))
(assert (= ($Snap.first ($Snap.second $t@81@01)) $Snap.unit))
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: Level(_r_7) <= _residue_176)
(assert (=
  ($Snap.second ($Snap.second $t@81@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@81@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@81@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@81@01))) $Snap.unit))
; [eval] _residue_159 <= _residue_176
(assert (<= _residue_159@58@01 _residue_176@70@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@81@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@81@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@81@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(x_1), int())
; [eval] typeof(x_1)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> x_1@79@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_1, 3235704))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5)
; [eval] int___unbox__(_checkDefined(x_1, 3235704))
; [eval] _checkDefined(x_1, 3235704)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_1@79@01 3235704))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_1@79@01 3235704))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_1@79@01 3235704)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_1@79@01 3235704)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_1@79@01 3235704)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 34 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@79@01, 3235704)), 5) | live]
; [else-branch: 34 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@79@01, 3235704)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 34 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@79@01, 3235704)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_1, 3235704))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_1, 3235704)))
; [eval] int___unbox__(_checkDefined(x_1, 3235704))
; [eval] _checkDefined(x_1, 3235704)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704))))
(pop) ; 5
(push) ; 5
; [else-branch: 34 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@79@01, 3235704)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01))))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(x_1), int())
; [eval] typeof(x_1)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> x_1@75@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_1@75@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_1, 3235704))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5)
; [eval] int___unbox__(_checkDefined(x_1, 3235704))
; [eval] _checkDefined(x_1, 3235704)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_1@75@01 3235704))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_1@75@01 3235704))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_1@75@01 3235704)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_1@75@01 3235704)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_1@75@01 3235704)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_1@75@01 3235704)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_1@75@01 3235704))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@75@01 3235704)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@75@01 3235704)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@75@01 3235704)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@75@01 3235704)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 35 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@75@01, 3235704)), 5) | live]
; [else-branch: 35 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@75@01, 3235704)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 35 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@75@01, 3235704)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@75@01 3235704)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_1, 3235704))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_1, 3235704)))
; [eval] int___unbox__(_checkDefined(x_1, 3235704))
; [eval] _checkDefined(x_1, 3235704)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@75@01 3235704))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@75@01 3235704))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@75@01 3235704)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@75@01 3235704)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@75@01 3235704))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@75@01 3235704)) 5))
(push) ; 4
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@75@01 3235704)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@75@01 3235704)))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@75@01 3235704)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@75@01 3235704)))
    0)))
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5) || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 36 | True | live]
; [else-branch: 36 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 36 | True]
; [eval] _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5) || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !_loop_check_before_0 ==> (forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 4
; [then-branch: 37 | False | dead]
; [else-branch: 37 | True | live]
(push) ; 5
; [else-branch: 37 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (= $t@81@01 ($Snap.combine ($Snap.first $t@81@01) ($Snap.second $t@81@01))))
(assert (= ($Snap.first $t@81@01) $Snap.unit))
(assert (=
  ($Snap.second $t@81@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@81@01))
    ($Snap.second ($Snap.second $t@81@01)))))
(assert (= ($Snap.first ($Snap.second $t@81@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@81@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@81@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@81@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@81@01))) $Snap.unit))
(assert (<= _residue_159@58@01 _residue_176@70@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@81@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@81@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@81@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> x_1@79@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit x_1@79@01 3235704))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_1@79@01 3235704)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@81@01))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5)
; [eval] int___unbox__(_checkDefined(x_1, 3235704))
; [eval] _checkDefined(x_1, 3235704)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5)
; [eval] int___unbox__(_checkDefined(x_1, 3235704))
; [eval] _checkDefined(x_1, 3235704)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5)
; [eval] int___unbox__(_checkDefined(x_1, 3235704))
; [eval] _checkDefined(x_1, 3235704)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 38 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@79@01, 3235704)), 5) | live]
; [else-branch: 38 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@79@01, 3235704)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 38 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@79@01, 3235704)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5))
; [exec]
; _loop_measures_0 := Seq(Measure$create(true, _cthread_159, int___sub__(10, int___unbox__(_checkDefined(x_1,
;   3235704)))))
; [eval] Seq(Measure$create(true, _cthread_159, int___sub__(10, int___unbox__(_checkDefined(x_1, 3235704)))))
; [eval] Measure$create(true, _cthread_159, int___sub__(10, int___unbox__(_checkDefined(x_1, 3235704))))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_1, 3235704)))
; [eval] int___unbox__(_checkDefined(x_1, 3235704))
; [eval] _checkDefined(x_1, 3235704)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_159@56@01 (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704))))))
  1))
(declare-const _loop_measures_0@82@01 Seq<Measure$>)
(assert (=
  _loop_measures_0@82@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_159@56@01 (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)))))))
; [exec]
; x_1 := __prim__int___box__(int___add__(int___unbox__(x_1), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(x_1), 1))
; [eval] int___add__(int___unbox__(x_1), 1)
; [eval] int___unbox__(x_1)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit x_1@79@01))
(pop) ; 6
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit x_1@79@01))
(push) ; 6
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_1@79@01) 1))
(pop) ; 6
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_1@79@01) 1))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_1@79@01) 1)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_1@79@01) 1)))
(declare-const x_1@83@01 $Ref)
(assert (=
  x_1@83@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_1@79@01) 1))))
; [exec]
; inhale _isDefined(3235704)
(declare-const $t@84@01 $Snap)
(assert (= $t@84@01 $Snap.unit))
; [eval] _isDefined(3235704)
(push) ; 6
(pop) ; 6
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop_end_0
; [exec]
; _loop_check_before_0 := false
; [exec]
; assert _loop_termination_flag_0 ==>
;   !int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5) ||
;   Measure$check(_loop_measures_0, _cthread_159, int___sub__(10, int___unbox__(_checkDefined(x_1,
;   3235704))))
; [eval] _loop_termination_flag_0 ==> !int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5) || Measure$check(_loop_measures_0, _cthread_159, int___sub__(10, int___unbox__(_checkDefined(x_1, 3235704))))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 39 | True | live]
; [else-branch: 39 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 39 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5) || Measure$check(_loop_measures_0, _cthread_159, int___sub__(10, int___unbox__(_checkDefined(x_1, 3235704))))
; [eval] !int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5)
; [eval] int___unbox__(_checkDefined(x_1, 3235704))
; [eval] _checkDefined(x_1, 3235704)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_1@83@01 3235704))
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_1@83@01 3235704))
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_1@83@01 3235704)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_1@83@01 3235704)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_1@83@01 3235704)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704))))
(push) ; 8
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5))
(pop) ; 8
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5))
(push) ; 8
; [then-branch: 40 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@83@01, 3235704)), 5)) | live]
; [else-branch: 40 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@83@01, 3235704)), 5) | live]
(push) ; 9
; [then-branch: 40 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@83@01, 3235704)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5)))
(pop) ; 9
(push) ; 9
; [else-branch: 40 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@83@01, 3235704)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5))
; [eval] Measure$check(_loop_measures_0, _cthread_159, int___sub__(10, int___unbox__(_checkDefined(x_1, 3235704))))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_1, 3235704)))
; [eval] int___unbox__(_checkDefined(x_1, 3235704))
; [eval] _checkDefined(x_1, 3235704)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704))))
(pop) ; 10
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704))))
(push) ; 10
(assert (Measure$check%precondition $Snap.unit _loop_measures_0@82@01 _cthread_159@56@01 (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)))))
(pop) ; 10
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_0@82@01 _cthread_159@56@01 (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)))
    (Measure$check%precondition $Snap.unit _loop_measures_0@82@01 _cthread_159@56@01 (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)))))))
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit x_1@83@01 3235704)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_1@83@01 3235704)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5)
  (=>
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5)
    (and
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5)
      (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)))
      (Measure$check%precondition $Snap.unit _loop_measures_0@82@01 _cthread_159@56@01 (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704))))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5)))))
(push) ; 6
(assert (not (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5))
  (Measure$check $Snap.unit _loop_measures_0@82@01 _cthread_159@56@01 (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5))
  (Measure$check $Snap.unit _loop_measures_0@82@01 _cthread_159@56@01 (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704))))))
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(x_1), int())
; [eval] typeof(x_1)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> x_1@83@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_1@83@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_1, 3235704))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5)
; [eval] int___unbox__(_checkDefined(x_1, 3235704))
; [eval] _checkDefined(x_1, 3235704)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 41 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@83@01, 3235704)), 5) | live]
; [else-branch: 41 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@83@01, 3235704)), 5)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 41 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@83@01, 3235704)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_1, 3235704))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_1, 3235704)))
; [eval] int___unbox__(_checkDefined(x_1, 3235704))
; [eval] _checkDefined(x_1, 3235704)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704))))
(pop) ; 8
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704))))
(pop) ; 7
(push) ; 7
; [else-branch: 41 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@83@01, 3235704)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5)))
(push) ; 6
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@83@01 3235704)))
    0)))
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5) || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false)))))
(push) ; 6
; [then-branch: 42 | False | dead]
; [else-branch: 42 | True | live]
(push) ; 7
; [else-branch: 42 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] !_loop_check_before_0 ==> (forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 43 | True | live]
; [else-branch: 43 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 43 | True]
; [eval] (forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false)
(push) ; 8
; [then-branch: 44 | False | live]
; [else-branch: 44 | True | live]
(push) ; 9
; [then-branch: 44 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 44 | True]
; [eval] (forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false)
(push) ; 10
; [then-branch: 45 | False | live]
; [else-branch: 45 | True | live]
(push) ; 11
; [then-branch: 45 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 45 | True]
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false)
(push) ; 12
; [then-branch: 46 | False | live]
; [else-branch: 46 | True | live]
(push) ; 13
; [then-branch: 46 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 46 | True]
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 38 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@79@01, 3235704)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5)))
(pop) ; 5
; [eval] !int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5)
; [eval] int___unbox__(_checkDefined(x_1, 3235704))
; [eval] _checkDefined(x_1, 3235704)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 47 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@79@01, 3235704)), 5)) | live]
; [else-branch: 47 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@79@01, 3235704)), 5) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 47 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@79@01, 3235704)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5)))
; [exec]
; exhale perm(MustTerminate(_cthread_159)) > none ==>
;   acc(MustTerminate(_cthread_159), perm(MustTerminate(_cthread_159)) -
;   _loop_original_must_terminate_0)
; [eval] perm(MustTerminate(_cthread_159)) > none
; [eval] perm(MustTerminate(_cthread_159))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 48 | True | live]
; [else-branch: 48 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 48 | True]
; [eval] perm(MustTerminate(_cthread_159)) - _loop_original_must_terminate_0
; [eval] perm(MustTerminate(_cthread_159))
(push) ; 7
(assert (not (or
  (= (- $Perm.Write _loop_original_must_terminate_0@77@01) $Perm.No)
  (< $Perm.No (- $Perm.Write _loop_original_must_terminate_0@77@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (-
    $Perm.Write
    ($Perm.min $Perm.Write (- $Perm.Write _loop_original_must_terminate_0@77@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (=
    (-
      (- $Perm.Write _loop_original_must_terminate_0@77@01)
      ($Perm.min
        $Perm.Write
        (- $Perm.Write _loop_original_must_terminate_0@77@01)))
    $Perm.No)
  (<
    (-
      (- $Perm.Write _loop_original_must_terminate_0@77@01)
      ($Perm.min
        $Perm.Write
        (- $Perm.Write _loop_original_must_terminate_0@77@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; label post_loop_0
; [exec]
; fold acc(Lock_invariant(self_20.A_x), write)
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0)))
; [eval] typeof(self_17)
; [eval] Lock(Lock_arg(typeof(self_17), 0))
; [eval] Lock_arg(typeof(self_17), 0)
; [eval] typeof(self_17)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))) 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))) 0))))
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0))) ==> true
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0)))
; [eval] typeof(self_17)
; [eval] Lock(Lock_arg(typeof(self_17), 0))
; [eval] Lock_arg(typeof(self_17), 0)
; [eval] typeof(self_17)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))) 0))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 49 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@61@01)))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@61@01)))))), 0))) | live]
; [else-branch: 49 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@61@01)))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@61@01)))))), 0)))) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 49 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@61@01)))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@61@01)))))), 0)))]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] issubtype(typeof(self_17), ObjectLock()) ==> true
; [eval] issubtype(typeof(self_17), ObjectLock())
; [eval] typeof(self_17)
; [eval] ObjectLock()
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))) (as ObjectLock<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))) (as ObjectLock<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 50 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@61@01)))))), ObjectLock[PyType]) | live]
; [else-branch: 50 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@61@01)))))), ObjectLock[PyType])) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 50 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@61@01)))))), ObjectLock[PyType])]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))) (as ObjectLock<PyType>  PyType)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))) (as ObjectLock<PyType>  PyType)))
(assert (Lock_invariant%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))))
; [exec]
; _cwl_159 := Lock_release(_cthread_159, _method_measures_159, _residue_159, self_20.A_x)
; [eval] _cthread_173 != null
; [eval] issubtype(typeof(_cthread_173), Thread_0())
; [eval] typeof(_cthread_173)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_16), Lock(Lock_arg(typeof(self_16), 0)))
; [eval] typeof(self_16)
; [eval] Lock(Lock_arg(typeof(self_16), 0))
; [eval] Lock_arg(typeof(self_16), 0)
; [eval] typeof(self_16)
; [eval] issubtype(Lock_arg(typeof(self_16), 0), object())
; [eval] Lock_arg(typeof(self_16), 0)
; [eval] typeof(self_16)
; [eval] object()
(push) ; 7
(assert (not (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))) 0) (as object<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01))))))) 0) (as object<PyType>  PyType)))
; [eval] self_16 != null
; [eval] perm(self_16.MustReleaseBounded) > none && Measure$check(_caller_measures_173, self_16, 1)
; [eval] perm(self_16.MustReleaseBounded) > none
; [eval] perm(self_16.MustReleaseBounded)
(push) ; 7
; [then-branch: 51 | False | live]
; [else-branch: 51 | True | live]
(push) ; 8
; [then-branch: 51 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 51 | True]
; [eval] Measure$check(_caller_measures_173, self_16, 1)
(push) ; 9
(assert (Measure$check%precondition $Snap.unit _method_measures_159@73@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01)))))) 1))
(pop) ; 9
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _method_measures_159@73@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01)))))) 1))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _method_measures_159@73@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01)))))) 1))
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (Measure$check $Snap.unit _method_measures_159@73@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01)))))) 1))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (Measure$check $Snap.unit _method_measures_159@73@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01)))))) 1)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 52 | Measure$check(_, _method_measures_159@73@01, First:(Second:(Second:(Second:(Second:($t@61@01))))), 1) | live]
; [else-branch: 52 | !(Measure$check(_, _method_measures_159@73@01, First:(Second:(Second:(Second:(Second:($t@61@01))))), 1)) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 52 | Measure$check(_, _method_measures_159@73@01, First:(Second:(Second:(Second:(Second:($t@61@01))))), 1)]
(assert (Measure$check $Snap.unit _method_measures_159@73@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@61@01)))))) 1))
; [eval] Measure$check(_caller_measures_173, _cthread_173, 1) || perm(MustTerminate(_cthread_173)) == none && ((forperm _r_90: Ref [MustInvokeBounded(_r_90)] :: false) && ((forperm _r_90: Ref [MustInvokeUnbounded(_r_90)] :: false) && ((forperm _r_90: Ref [_r_90.MustReleaseBounded] :: false) && (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: false))))
; [eval] Measure$check(_caller_measures_173, _cthread_173, 1)
(push) ; 8
(assert (Measure$check%precondition $Snap.unit _method_measures_159@73@01 _cthread_159@56@01 1))
(pop) ; 8
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _method_measures_159@73@01 _cthread_159@56@01 1))
(push) ; 8
; [then-branch: 53 | Measure$check(_, _method_measures_159@73@01, _cthread_159@56@01, 1) | live]
; [else-branch: 53 | !(Measure$check(_, _method_measures_159@73@01, _cthread_159@56@01, 1)) | live]
(push) ; 9
; [then-branch: 53 | Measure$check(_, _method_measures_159@73@01, _cthread_159@56@01, 1)]
(assert (Measure$check $Snap.unit _method_measures_159@73@01 _cthread_159@56@01 1))
(pop) ; 9
(push) ; 9
; [else-branch: 53 | !(Measure$check(_, _method_measures_159@73@01, _cthread_159@56@01, 1))]
(assert (not (Measure$check $Snap.unit _method_measures_159@73@01 _cthread_159@56@01 1)))
; [eval] perm(MustTerminate(_cthread_173)) == none && ((forperm _r_90: Ref [MustInvokeBounded(_r_90)] :: false) && ((forperm _r_90: Ref [MustInvokeUnbounded(_r_90)] :: false) && ((forperm _r_90: Ref [_r_90.MustReleaseBounded] :: false) && (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_173)) == none
; [eval] perm(MustTerminate(_cthread_173))
(push) ; 10
; [then-branch: 54 | False | live]
; [else-branch: 54 | True | live]
(push) ; 11
; [then-branch: 54 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 54 | True]
; [eval] (forperm _r_90: Ref [MustInvokeBounded(_r_90)] :: false)
(push) ; 12
; [then-branch: 55 | False | live]
; [else-branch: 55 | True | live]
(push) ; 13
; [then-branch: 55 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 55 | True]
; [eval] (forperm _r_90: Ref [MustInvokeUnbounded(_r_90)] :: false)
(push) ; 14
; [then-branch: 56 | False | live]
; [else-branch: 56 | True | live]
(push) ; 15
; [then-branch: 56 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 56 | True]
; [eval] (forperm _r_90: Ref [_r_90.MustReleaseBounded] :: false)
(push) ; 16
; [then-branch: 57 | False | live]
; [else-branch: 57 | True | live]
(push) ; 17
; [then-branch: 57 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 57 | True]
; [eval] (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: false)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Measure$check $Snap.unit _method_measures_159@73@01 _cthread_159@56@01 1))
  (Measure$check $Snap.unit _method_measures_159@73@01 _cthread_159@56@01 1)))
(declare-const _current_wait_level_173@85@01 $Perm)
(declare-const $t@86@01 $Snap)
(assert (= $t@86@01 ($Snap.combine ($Snap.first $t@86@01) ($Snap.second $t@86@01))))
(assert (= ($Snap.first $t@86@01) $Snap.unit))
; [eval] (forperm _r_89: Ref [_r_89.MustReleaseBounded] :: Level(_r_89) <= _current_wait_level_173)
(assert (=
  ($Snap.second $t@86@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@86@01))
    ($Snap.second ($Snap.second $t@86@01)))))
(assert (= ($Snap.first ($Snap.second $t@86@01)) $Snap.unit))
; [eval] (forperm _r_89: Ref [_r_89.MustReleaseUnbounded] :: Level(_r_89) <= _current_wait_level_173)
(assert (= ($Snap.second ($Snap.second $t@86@01)) $Snap.unit))
; [eval] _residue_173 <= _current_wait_level_173
(assert (<= _residue_159@58@01 _current_wait_level_173@85@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label __end
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 7
(pop) ; 6
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 47 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_1@79@01, 3235704)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_1@79@01 3235704)) 5))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- A_m2_transfer_rel ----------
(declare-const _cthread_160@87@01 $Ref)
(declare-const _caller_measures_160@88@01 Seq<Measure$>)
(declare-const _residue_160@89@01 $Perm)
(declare-const self_3@90@01 $Ref)
(declare-const _current_wait_level_160@91@01 $Perm)
(declare-const _cthread_160@92@01 $Ref)
(declare-const _caller_measures_160@93@01 Seq<Measure$>)
(declare-const _residue_160@94@01 $Perm)
(declare-const self_3@95@01 $Ref)
(declare-const _current_wait_level_160@96@01 $Perm)
(push) ; 1
(declare-const $t@97@01 $Snap)
(assert (= $t@97@01 ($Snap.combine ($Snap.first $t@97@01) ($Snap.second $t@97@01))))
(assert (= ($Snap.first $t@97@01) $Snap.unit))
; [eval] _cthread_160 != null
(assert (not (= _cthread_160@92@01 $Ref.null)))
(assert (=
  ($Snap.second $t@97@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@97@01))
    ($Snap.second ($Snap.second $t@97@01)))))
(assert (= ($Snap.first ($Snap.second $t@97@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_160), Thread_0())
; [eval] typeof(_cthread_160)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_160@92@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@97@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@97@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@97@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@97@01))) $Snap.unit))
; [eval] issubtype(typeof(self_3), A())
; [eval] typeof(self_3)
; [eval] A()
(assert (issubtype<Bool> (typeof<PyType> self_3@95@01) (as A<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@97@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@97@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@97@01))))
  $Snap.unit))
; [eval] self_3 != null
(assert (not (= self_3@95@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01))))))
  $Snap.unit))
; [eval] self_3.A_x == null || issubtype(typeof(self_3.A_x), ObjectLock())
; [eval] self_3.A_x == null
(push) ; 2
; [then-branch: 58 | First:(Second:(Second:(Second:(Second:($t@97@01))))) == Null | live]
; [else-branch: 58 | First:(Second:(Second:(Second:(Second:($t@97@01))))) != Null | live]
(push) ; 3
; [then-branch: 58 | First:(Second:(Second:(Second:(Second:($t@97@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01))))))
  $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 58 | First:(Second:(Second:(Second:(Second:($t@97@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_3.A_x), ObjectLock())
; [eval] typeof(self_3.A_x)
; [eval] ObjectLock()
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@98@01 $Snap)
(assert (= $t@98@01 ($Snap.combine ($Snap.first $t@98@01) ($Snap.second $t@98@01))))
(assert (= ($Snap.first $t@98@01) $Snap.unit))
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_160)
(assert (=
  ($Snap.second $t@98@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@98@01))
    ($Snap.second ($Snap.second $t@98@01)))))
(assert (= ($Snap.first ($Snap.second $t@98@01)) $Snap.unit))
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_160)
(assert (=
  ($Snap.second ($Snap.second $t@98@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@98@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@98@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@98@01))) $Snap.unit))
; [eval] _residue_160 <= _current_wait_level_160
(assert (<= _residue_160@94@01 _current_wait_level_160@96@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@98@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@99@01 $Ref)
; [exec]
; var x_2: Ref
(declare-const x_2@100@01 $Ref)
; [exec]
; var self_21: Ref
(declare-const self_21@101@01 $Ref)
; [exec]
; var _loop_measures_1: Seq[Measure$]
(declare-const _loop_measures_1@102@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_1: Bool
(declare-const _loop_check_before_1@103@01 Bool)
; [exec]
; var _loop_termination_flag_1: Bool
(declare-const _loop_termination_flag_1@104@01 Bool)
; [exec]
; var _loop_original_must_terminate_1: Perm
(declare-const _loop_original_must_terminate_1@105@01 $Perm)
; [exec]
; var _residue_177: Perm
(declare-const _residue_177@106@01 $Perm)
; [exec]
; var _cwl_160: Perm
(declare-const _cwl_160@107@01 $Perm)
; [exec]
; var _method_measures_160: Seq[Measure$]
(declare-const _method_measures_160@108@01 Seq<Measure$>)
; [exec]
; _method_measures_160 := Seq(Measure$create(true, self_3.A_x, 2))
; [eval] Seq(Measure$create(true, self_3.A_x, 2))
; [eval] Measure$create(true, self_3.A_x, 2)
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01)))))) 2)))
  1))
(declare-const _method_measures_160@109@01 Seq<Measure$>)
(assert (=
  _method_measures_160@109@01
  (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01)))))) 2))))
; [exec]
; inhale typeof(self_3) == A()
(declare-const $t@110@01 $Snap)
(assert (= $t@110@01 $Snap.unit))
; [eval] typeof(self_3) == A()
; [eval] typeof(self_3)
; [eval] A()
(assert (= (typeof<PyType> self_3@95@01) (as A<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_21 := self_3
; [exec]
; x_2 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const x_2@111@01 $Ref)
(assert (= x_2@111@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(3301240)
(declare-const $t@112@01 $Snap)
(assert (= $t@112@01 $Snap.unit))
; [eval] _isDefined(3301240)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3301240))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3301240))
(assert (_isDefined $Snap.unit 3301240))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_1 := perm(MustTerminate(_cthread_160))
; [eval] perm(MustTerminate(_cthread_160))
(declare-const _loop_original_must_terminate_1@113@01 $Perm)
(assert (= _loop_original_must_terminate_1@113@01 $Perm.No))
; [exec]
; _loop_termination_flag_1 := false
; [exec]
; _loop_check_before_1 := true
(declare-const _loop_measures_1@114@01 Seq<Measure$>)
(declare-const x_2@115@01 $Ref)
(declare-const _cwl_160@116@01 $Perm)
(declare-const _loop_check_before_1@117@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@118@01 $Snap)
(assert (= $t@118@01 ($Snap.combine ($Snap.first $t@118@01) ($Snap.second $t@118@01))))
(assert (= ($Snap.first $t@118@01) $Snap.unit))
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: Level(_r_12) <= _residue_177)
(assert (=
  ($Snap.second $t@118@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@118@01))
    ($Snap.second ($Snap.second $t@118@01)))))
(assert (= ($Snap.first ($Snap.second $t@118@01)) $Snap.unit))
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: Level(_r_12) <= _residue_177)
(assert (=
  ($Snap.second ($Snap.second $t@118@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@118@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@118@01))) $Snap.unit))
; [eval] _residue_160 <= _residue_177
(assert (<= _residue_160@94@01 _residue_177@106@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@118@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@118@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@118@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(x_2), int())
; [eval] typeof(x_2)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> x_2@115@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  $Snap.unit))
; [eval] self_21.A_x == null || issubtype(typeof(self_21.A_x), ObjectLock())
; [eval] self_21.A_x == null
(push) ; 4
; [then-branch: 59 | First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) == Null | live]
; [else-branch: 59 | First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) != Null | live]
(push) ; 5
; [then-branch: 59 | First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 59 | First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_21.A_x), ObjectLock())
; [eval] typeof(self_21.A_x)
; [eval] ObjectLock()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))
; [eval] int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@115@01 3301240))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@115@01 3301240))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@115@01 3301240)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@115@01 3301240)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@115@01 3301240)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)) 5))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)) 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)) 5)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 60 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@115@01, 3301240)), 5) | live]
; [else-branch: 60 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@115@01, 3301240)), 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 60 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@115@01, 3301240)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)) 5))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_2, 3301240))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)) 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 61 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@115@01, 3301240)), 5) | live]
; [else-branch: 61 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@115@01, 3301240)), 5)) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 61 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@115@01, 3301240)), 5)]
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_2, 3301240))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_2, 3301240)))
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240))))
(pop) ; 7
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)) 5)
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)))))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)))
    0)))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
  $Snap.unit))
(pop) ; 4
(push) ; 4
; [else-branch: 60 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@115@01, 3301240)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)) 5)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
  $Snap.unit))
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(x_2), int())
; [eval] typeof(x_2)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> x_2@111@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_2@111@01) (as int<PyType>  PyType)))
; [eval] self_21.A_x == null || issubtype(typeof(self_21.A_x), ObjectLock())
; [eval] self_21.A_x == null
(push) ; 4
; [then-branch: 62 | First:(Second:(Second:(Second:(Second:($t@97@01))))) == Null | live]
; [else-branch: 62 | First:(Second:(Second:(Second:(Second:($t@97@01))))) != Null | live]
(push) ; 5
; [then-branch: 62 | First:(Second:(Second:(Second:(Second:($t@97@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@97@01))))))
  $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 62 | First:(Second:(Second:(Second:(Second:($t@97@01))))) != Null]
; [eval] issubtype(typeof(self_21.A_x), ObjectLock())
; [eval] typeof(self_21.A_x)
; [eval] ObjectLock()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@111@01 3301240))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@111@01 3301240))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@111@01 3301240)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@111@01 3301240)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@111@01 3301240)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240)) 5))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240)) 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240)) 5)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 63 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@111@01, 3301240)), 5) | live]
; [else-branch: 63 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@111@01, 3301240)), 5)) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 63 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@111@01, 3301240)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240)) 5))
; [eval] int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_2, 3301240))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240)) 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 64 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@111@01, 3301240)), 5) | live]
; [else-branch: 64 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@111@01, 3301240)), 5)) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 64 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@111@01, 3301240)), 5)]
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_2, 3301240))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_2, 3301240)))
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240))))
(pop) ; 7
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240)) 5)
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240)))))
(push) ; 5
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240)))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240)))
    0)))
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 65 | True | live]
; [else-branch: 65 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 65 | True]
; [eval] perm(self_21.A_x.MustReleaseBounded) > none
; [eval] perm(self_21.A_x.MustReleaseBounded)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 66 | True | live]
; [else-branch: 66 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 66 | True]
; [eval] _loop_check_before_1 ==> _loop_termination_flag_1 || (!int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5) || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)))))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 67 | True | live]
; [else-branch: 67 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 67 | True]
; [eval] _loop_termination_flag_1 || (!int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5) || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)))))
(push) ; 9
; [then-branch: 68 | False | live]
; [else-branch: 68 | True | live]
(push) ; 10
; [then-branch: 68 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 68 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 69 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@111@01, 3301240)), 5)) | live]
; [else-branch: 69 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@111@01, 3301240)), 5) | live]
(push) ; 12
; [then-branch: 69 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@111@01, 3301240)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240)) 5)))
(pop) ; 12
(push) ; 12
; [else-branch: 69 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@111@01, 3301240)), 5)]
; [eval] perm(MustTerminate(_cthread_160)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_160)) == none
; [eval] perm(MustTerminate(_cthread_160))
(push) ; 13
; [then-branch: 70 | False | live]
; [else-branch: 70 | True | live]
(push) ; 14
; [then-branch: 70 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 70 | True]
; [eval] (forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false)
(push) ; 15
; [then-branch: 71 | False | live]
; [else-branch: 71 | True | live]
(push) ; 16
; [then-branch: 71 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 71 | True]
; [eval] (forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false)
(push) ; 17
; [then-branch: 72 | False | live]
; [else-branch: 72 | True | live]
(push) ; 18
; [then-branch: 72 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 72 | True]
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false)
(push) ; 19
; [then-branch: 73 | False | live]
; [else-branch: 73 | True | live]
(push) ; 20
; [then-branch: 73 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 73 | True]
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240)) 5))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240)) 5))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@111@01 3301240)) 5))))
; [eval] !_loop_check_before_1 ==> (forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_1
(push) ; 7
; [then-branch: 74 | False | dead]
; [else-branch: 74 | True | live]
(push) ; 8
; [else-branch: 74 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)) 5))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
  $Snap.unit))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)) 5)
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)))))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)))
    0)))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
  $Snap.unit))
(assert (= $t@118@01 ($Snap.combine ($Snap.first $t@118@01) ($Snap.second $t@118@01))))
(assert (= ($Snap.first $t@118@01) $Snap.unit))
(assert (=
  ($Snap.second $t@118@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@118@01))
    ($Snap.second ($Snap.second $t@118@01)))))
(assert (= ($Snap.first ($Snap.second $t@118@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@118@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@118@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@118@01))) $Snap.unit))
(assert (<= _residue_160@94@01 _residue_177@106@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@118@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@118@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@118@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> x_2@115@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  $Snap.unit))
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))
(assert (_checkDefined%precondition $Snap.unit x_2@115@01 3301240))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@115@01 3301240)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)) 5))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 8
; [eval] int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [eval] !int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)) 5))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 75 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@115@01, 3301240)), 5) | live]
; [else-branch: 75 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@115@01, 3301240)), 5)) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 75 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@115@01, 3301240)), 5)]
; [exec]
; _loop_measures_1 := Seq(Measure$create(int___lt__(int___unbox__(_checkDefined(x_2,
;   3301240)), 5), self_21.A_x, int___sub__(10, int___unbox__(_checkDefined(x_2,
;   3301240)))))
; [eval] Seq(Measure$create(int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5), self_21.A_x, int___sub__(10, int___unbox__(_checkDefined(x_2, 3301240)))))
; [eval] Measure$create(int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5), self_21.A_x, int___sub__(10, int___unbox__(_checkDefined(x_2, 3301240))))
; [eval] int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_2, 3301240)))
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240))))
(pop) ; 9
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)) 5) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240))))))
  1))
(declare-const _loop_measures_1@119@01 Seq<Measure$>)
(assert (=
  _loop_measures_1@119@01
  (Seq_singleton (Measure$create<Measure$> (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)) 5) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)))))))
; [exec]
; x_2 := __prim__int___box__(int___add__(int___unbox__(x_2), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(x_2), 1))
; [eval] int___add__(int___unbox__(x_2), 1)
; [eval] int___unbox__(x_2)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit x_2@115@01))
(pop) ; 9
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit x_2@115@01))
(push) ; 9
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_2@115@01) 1))
(pop) ; 9
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_2@115@01) 1))
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_2@115@01) 1)))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_2@115@01) 1)))
(declare-const x_2@120@01 $Ref)
(assert (=
  x_2@120@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_2@115@01) 1))))
; [exec]
; inhale _isDefined(3301240)
(declare-const $t@121@01 $Snap)
(assert (= $t@121@01 $Snap.unit))
; [eval] _isDefined(3301240)
(push) ; 9
(pop) ; 9
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] int___ge__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(set-option :timeout 0)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@120@01 3301240))
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_2@120@01 3301240))
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@120@01 3301240)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@120@01 3301240)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@120@01 3301240)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240))))
(push) ; 9
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5))
(pop) ; 9
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5))
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 76 | int___ge__(_, int___unbox__(_, _checkDefined(_, x_2@120@01, 3301240)), 5) | live]
; [else-branch: 76 | !(int___ge__(_, int___unbox__(_, _checkDefined(_, x_2@120@01, 3301240)), 5)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 76 | int___ge__(_, int___unbox__(_, _checkDefined(_, x_2@120@01, 3301240)), 5)]
(assert (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5))
; [exec]
; fold acc(Lock_invariant(self_21.A_x), write)
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0)))
; [eval] typeof(self_17)
; [eval] Lock(Lock_arg(typeof(self_17), 0))
; [eval] Lock_arg(typeof(self_17), 0)
; [eval] typeof(self_17)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))) 0)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))) 0))))
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0))) ==> true
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0)))
; [eval] typeof(self_17)
; [eval] Lock(Lock_arg(typeof(self_17), 0))
; [eval] Lock_arg(typeof(self_17), 0)
; [eval] typeof(self_17)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))) 0))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 77 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@118@01))))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@118@01))))))), 0))) | live]
; [else-branch: 77 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@118@01))))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@118@01))))))), 0)))) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 77 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@118@01))))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@118@01))))))), 0)))]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] issubtype(typeof(self_17), ObjectLock()) ==> true
; [eval] issubtype(typeof(self_17), ObjectLock())
; [eval] typeof(self_17)
; [eval] ObjectLock()
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))) (as ObjectLock<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))) (as ObjectLock<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 78 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@118@01))))))), ObjectLock[PyType]) | live]
; [else-branch: 78 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@118@01))))))), ObjectLock[PyType])) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 78 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@118@01))))))), ObjectLock[PyType])]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))) (as ObjectLock<PyType>  PyType)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))) (as ObjectLock<PyType>  PyType)))
(assert (Lock_invariant%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
; [exec]
; _cwl_160 := Lock_release(_cthread_160, _method_measures_160, _residue_177, self_21.A_x)
; [eval] _cthread_173 != null
; [eval] issubtype(typeof(_cthread_173), Thread_0())
; [eval] typeof(_cthread_173)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_16), Lock(Lock_arg(typeof(self_16), 0)))
; [eval] typeof(self_16)
; [eval] Lock(Lock_arg(typeof(self_16), 0))
; [eval] Lock_arg(typeof(self_16), 0)
; [eval] typeof(self_16)
; [eval] issubtype(Lock_arg(typeof(self_16), 0), object())
; [eval] Lock_arg(typeof(self_16), 0)
; [eval] typeof(self_16)
; [eval] object()
(push) ; 10
(assert (not (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))) 0) (as object<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))) 0) (as object<PyType>  PyType)))
; [eval] self_16 != null
; [eval] perm(self_16.MustReleaseBounded) > none && Measure$check(_caller_measures_173, self_16, 1)
; [eval] perm(self_16.MustReleaseBounded) > none
; [eval] perm(self_16.MustReleaseBounded)
(push) ; 10
; [then-branch: 79 | False | live]
; [else-branch: 79 | True | live]
(push) ; 11
; [then-branch: 79 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 79 | True]
; [eval] Measure$check(_caller_measures_173, self_16, 1)
(push) ; 12
(assert (Measure$check%precondition $Snap.unit _method_measures_160@109@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))) 1))
(pop) ; 12
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _method_measures_160@109@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))) 1))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _method_measures_160@109@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))) 1))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (Measure$check $Snap.unit _method_measures_160@109@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))) 1))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (Measure$check $Snap.unit _method_measures_160@109@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))) 1)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 80 | Measure$check(_, _method_measures_160@109@01, First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))), 1) | live]
; [else-branch: 80 | !(Measure$check(_, _method_measures_160@109@01, First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))), 1)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 80 | Measure$check(_, _method_measures_160@109@01, First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))), 1)]
(assert (Measure$check $Snap.unit _method_measures_160@109@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))) 1))
; [eval] Measure$check(_caller_measures_173, _cthread_173, 1) || perm(MustTerminate(_cthread_173)) == none && ((forperm _r_90: Ref [MustInvokeBounded(_r_90)] :: false) && ((forperm _r_90: Ref [MustInvokeUnbounded(_r_90)] :: false) && ((forperm _r_90: Ref [_r_90.MustReleaseBounded] :: false) && (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: false))))
; [eval] Measure$check(_caller_measures_173, _cthread_173, 1)
(push) ; 11
(assert (Measure$check%precondition $Snap.unit _method_measures_160@109@01 _cthread_160@92@01 1))
(pop) ; 11
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _method_measures_160@109@01 _cthread_160@92@01 1))
(push) ; 11
; [then-branch: 81 | Measure$check(_, _method_measures_160@109@01, _cthread_160@92@01, 1) | live]
; [else-branch: 81 | !(Measure$check(_, _method_measures_160@109@01, _cthread_160@92@01, 1)) | live]
(push) ; 12
; [then-branch: 81 | Measure$check(_, _method_measures_160@109@01, _cthread_160@92@01, 1)]
(assert (Measure$check $Snap.unit _method_measures_160@109@01 _cthread_160@92@01 1))
(pop) ; 12
(push) ; 12
; [else-branch: 81 | !(Measure$check(_, _method_measures_160@109@01, _cthread_160@92@01, 1))]
(assert (not (Measure$check $Snap.unit _method_measures_160@109@01 _cthread_160@92@01 1)))
; [eval] perm(MustTerminate(_cthread_173)) == none && ((forperm _r_90: Ref [MustInvokeBounded(_r_90)] :: false) && ((forperm _r_90: Ref [MustInvokeUnbounded(_r_90)] :: false) && ((forperm _r_90: Ref [_r_90.MustReleaseBounded] :: false) && (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_173)) == none
; [eval] perm(MustTerminate(_cthread_173))
(push) ; 13
; [then-branch: 82 | False | live]
; [else-branch: 82 | True | live]
(push) ; 14
; [then-branch: 82 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 82 | True]
; [eval] (forperm _r_90: Ref [MustInvokeBounded(_r_90)] :: false)
(push) ; 15
; [then-branch: 83 | False | live]
; [else-branch: 83 | True | live]
(push) ; 16
; [then-branch: 83 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 83 | True]
; [eval] (forperm _r_90: Ref [MustInvokeUnbounded(_r_90)] :: false)
(push) ; 17
; [then-branch: 84 | False | live]
; [else-branch: 84 | True | live]
(push) ; 18
; [then-branch: 84 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 84 | True]
; [eval] (forperm _r_90: Ref [_r_90.MustReleaseBounded] :: false)
(push) ; 19
; [then-branch: 85 | False | live]
; [else-branch: 85 | True | live]
(push) ; 20
; [then-branch: 85 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 85 | True]
; [eval] (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: false)
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Measure$check $Snap.unit _method_measures_160@109@01 _cthread_160@92@01 1))
  (Measure$check $Snap.unit _method_measures_160@109@01 _cthread_160@92@01 1)))
(declare-const _current_wait_level_173@122@01 $Perm)
(declare-const $t@123@01 $Snap)
(assert (= $t@123@01 ($Snap.combine ($Snap.first $t@123@01) ($Snap.second $t@123@01))))
(assert (= ($Snap.first $t@123@01) $Snap.unit))
; [eval] (forperm _r_89: Ref [_r_89.MustReleaseBounded] :: Level(_r_89) <= _current_wait_level_173)
(assert (=
  ($Snap.second $t@123@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@123@01))
    ($Snap.second ($Snap.second $t@123@01)))))
(assert (= ($Snap.first ($Snap.second $t@123@01)) $Snap.unit))
; [eval] (forperm _r_89: Ref [_r_89.MustReleaseUnbounded] :: Level(_r_89) <= _current_wait_level_173)
(assert (= ($Snap.second ($Snap.second $t@123@01)) $Snap.unit))
; [eval] _residue_173 <= _current_wait_level_173
(assert (<= _residue_177@106@01 _current_wait_level_173@122@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label loop_end_1
; [exec]
; _loop_check_before_1 := false
; [exec]
; assert _loop_termination_flag_1 ==>
;   !int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] _loop_termination_flag_1 ==> !int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 86 | False | dead]
; [else-branch: 86 | True | live]
(push) ; 12
; [else-branch: 86 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(x_2), int())
; [eval] typeof(x_2)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> x_2@120@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_2@120@01) (as int<PyType>  PyType)))
; [eval] self_21.A_x == null || issubtype(typeof(self_21.A_x), ObjectLock())
; [eval] self_21.A_x == null
(push) ; 11
; [then-branch: 87 | First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) == Null | live]
; [else-branch: 87 | First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) != Null | live]
(push) ; 12
; [then-branch: 87 | First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 87 | First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) != Null]
; [eval] issubtype(typeof(self_21.A_x), ObjectLock())
; [eval] typeof(self_21.A_x)
; [eval] ObjectLock()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5))
(pop) ; 11
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5))
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 88 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@120@01, 3301240)), 5) | dead]
; [else-branch: 88 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@120@01, 3301240)), 5)) | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 88 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@120@01, 3301240)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5)))
; [eval] _loop_check_before_1 ==> _loop_termination_flag_1 || (!int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5) || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)))))
(push) ; 12
; [then-branch: 89 | False | dead]
; [else-branch: 89 | True | live]
(push) ; 13
; [else-branch: 89 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] !_loop_check_before_1 ==> (forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_1
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 90 | True | live]
; [else-branch: 90 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 90 | True]
; [eval] (forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false)
(push) ; 14
; [then-branch: 91 | False | live]
; [else-branch: 91 | True | live]
(push) ; 15
; [then-branch: 91 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 91 | True]
; [eval] (forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false)
(push) ; 16
; [then-branch: 92 | False | live]
; [else-branch: 92 | True | live]
(push) ; 17
; [then-branch: 92 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 92 | True]
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false)
(push) ; 18
; [then-branch: 93 | False | live]
; [else-branch: 93 | True | live]
(push) ; 19
; [then-branch: 93 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 93 | True]
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 76 | !(int___ge__(_, int___unbox__(_, _checkDefined(_, x_2@120@01, 3301240)), 5))]
(assert (not
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5)))
(pop) ; 9
; [eval] !int___ge__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___ge__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 94 | !(int___ge__(_, int___unbox__(_, _checkDefined(_, x_2@120@01, 3301240)), 5)) | live]
; [else-branch: 94 | int___ge__(_, int___unbox__(_, _checkDefined(_, x_2@120@01, 3301240)), 5) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 94 | !(int___ge__(_, int___unbox__(_, _checkDefined(_, x_2@120@01, 3301240)), 5))]
(assert (not
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5)))
; [exec]
; label loop_end_1
; [exec]
; _loop_check_before_1 := false
; [exec]
; assert _loop_termination_flag_1 ==>
;   !int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] _loop_termination_flag_1 ==> !int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
(push) ; 10
; [then-branch: 95 | False | dead]
; [else-branch: 95 | True | live]
(push) ; 11
; [else-branch: 95 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(x_2), int())
; [eval] typeof(x_2)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> x_2@120@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_2@120@01) (as int<PyType>  PyType)))
; [eval] self_21.A_x == null || issubtype(typeof(self_21.A_x), ObjectLock())
; [eval] self_21.A_x == null
(push) ; 10
; [then-branch: 96 | First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) == Null | live]
; [else-branch: 96 | First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) != Null | live]
(push) ; 11
; [then-branch: 96 | First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 96 | First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) != Null]
; [eval] issubtype(typeof(self_21.A_x), ObjectLock())
; [eval] typeof(self_21.A_x)
; [eval] ObjectLock()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5))
(pop) ; 10
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 97 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@120@01, 3301240)), 5) | live]
; [else-branch: 97 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@120@01, 3301240)), 5)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 97 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@120@01, 3301240)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5))
; [eval] int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_2, 3301240))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 98 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@120@01, 3301240)), 5) | live]
; [else-branch: 98 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@120@01, 3301240)), 5)) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 98 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@120@01, 3301240)), 5)]
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_2, 3301240))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_2, 3301240)))
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240))))
(pop) ; 13
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5)
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)))))
(push) ; 11
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)))
    0)))
; [then-branch: 99 | False | dead]
; [else-branch: 99 | True | live]
(push) ; 11
; [else-branch: 99 | True]
; [eval] perm(self_21.A_x.MustReleaseBounded) > none && Measure$check(_loop_measures_1, self_21.A_x, int___sub__(10, int___unbox__(_checkDefined(x_2, 3301240))))
; [eval] perm(self_21.A_x.MustReleaseBounded) > none
; [eval] perm(self_21.A_x.MustReleaseBounded)
(push) ; 12
; [then-branch: 100 | False | live]
; [else-branch: 100 | True | live]
(push) ; 13
; [then-branch: 100 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 100 | True]
; [eval] Measure$check(_loop_measures_1, self_21.A_x, int___sub__(10, int___unbox__(_checkDefined(x_2, 3301240))))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_2, 3301240)))
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240))))
(pop) ; 14
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240))))
(push) ; 14
(assert (Measure$check%precondition $Snap.unit _loop_measures_1@119@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)))))
(pop) ; 14
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_1@119@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (and
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)))
  (Measure$check%precondition $Snap.unit _loop_measures_1@119@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240))))))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (Measure$check $Snap.unit _loop_measures_1@119@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (Measure$check $Snap.unit _loop_measures_1@119@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 101 | Measure$check(_, _loop_measures_1@119@01, First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, x_2@120@01, 3301240)))) | live]
; [else-branch: 101 | !(Measure$check(_, _loop_measures_1@119@01, First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, x_2@120@01, 3301240))))) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 101 | Measure$check(_, _loop_measures_1@119@01, First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, x_2@120@01, 3301240))))]
(assert (Measure$check $Snap.unit _loop_measures_1@119@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)))))
; [eval] _loop_check_before_1 ==> _loop_termination_flag_1 || (!int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5) || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)))))
(push) ; 13
; [then-branch: 102 | False | dead]
; [else-branch: 102 | True | live]
(push) ; 14
; [else-branch: 102 | True]
(pop) ; 14
(pop) ; 13
; Joined path conditions
; [eval] !_loop_check_before_1 ==> (forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_1
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 103 | True | live]
; [else-branch: 103 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 103 | True]
; [eval] (forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false)
(push) ; 15
; [then-branch: 104 | False | live]
; [else-branch: 104 | True | live]
(push) ; 16
; [then-branch: 104 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 104 | True]
; [eval] (forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false)
(push) ; 17
; [then-branch: 105 | False | live]
; [else-branch: 105 | True | live]
(push) ; 18
; [then-branch: 105 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 105 | True]
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false)
(push) ; 19
; [then-branch: 106 | False | live]
; [else-branch: 106 | True | live]
(push) ; 20
; [then-branch: 106 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 106 | True]
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 94 | int___ge__(_, int___unbox__(_, _checkDefined(_, x_2@120@01, 3301240)), 5)]
(assert (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@120@01 3301240)) 5))
(pop) ; 9
(pop) ; 8
; [eval] !int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 107 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@115@01, 3301240)), 5)) | dead]
; [else-branch: 107 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@115@01, 3301240)), 5) | live]
(push) ; 8
; [else-branch: 107 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@115@01, 3301240)), 5)]
(pop) ; 8
(pop) ; 7
(push) ; 7
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)) 5)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
  $Snap.unit))
(assert (= $t@118@01 ($Snap.combine ($Snap.first $t@118@01) ($Snap.second $t@118@01))))
(assert (= ($Snap.first $t@118@01) $Snap.unit))
(assert (=
  ($Snap.second $t@118@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@118@01))
    ($Snap.second ($Snap.second $t@118@01)))))
(assert (= ($Snap.first ($Snap.second $t@118@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@118@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@118@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@118@01))) $Snap.unit))
(assert (<= _residue_160@94@01 _residue_177@106@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@118@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@118@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@118@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> x_2@115@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  $Snap.unit))
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))
(assert (_checkDefined%precondition $Snap.unit x_2@115@01 3301240))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_2@115@01 3301240)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)) 5))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 8
; [eval] int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [eval] !int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 108 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@115@01, 3301240)), 5) | dead]
; [else-branch: 108 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@115@01, 3301240)), 5)) | live]
(push) ; 8
; [else-branch: 108 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@115@01, 3301240)), 5))]
(pop) ; 8
; [eval] !int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5)
; [eval] int___unbox__(_checkDefined(x_2, 3301240))
; [eval] _checkDefined(x_2, 3301240)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_2@115@01 3301240)) 5)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 109 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@115@01, 3301240)), 5)) | live]
; [else-branch: 109 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@115@01, 3301240)), 5) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 109 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_2@115@01, 3301240)), 5))]
; [exec]
; exhale perm(MustTerminate(_cthread_160)) > none ==>
;   acc(MustTerminate(_cthread_160), perm(MustTerminate(_cthread_160)) -
;   _loop_original_must_terminate_1)
; [eval] perm(MustTerminate(_cthread_160)) > none
; [eval] perm(MustTerminate(_cthread_160))
; [then-branch: 110 | False | dead]
; [else-branch: 110 | True | live]
(push) ; 9
; [else-branch: 110 | True]
; [exec]
; label post_loop_1
; [exec]
; label __end
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- A_m2_borrow_rel ----------
(declare-const _cthread_161@124@01 $Ref)
(declare-const _caller_measures_161@125@01 Seq<Measure$>)
(declare-const _residue_161@126@01 $Perm)
(declare-const self_4@127@01 $Ref)
(declare-const _current_wait_level_161@128@01 $Perm)
(declare-const _cthread_161@129@01 $Ref)
(declare-const _caller_measures_161@130@01 Seq<Measure$>)
(declare-const _residue_161@131@01 $Perm)
(declare-const self_4@132@01 $Ref)
(declare-const _current_wait_level_161@133@01 $Perm)
(push) ; 1
(declare-const $t@134@01 $Snap)
(assert (= $t@134@01 ($Snap.combine ($Snap.first $t@134@01) ($Snap.second $t@134@01))))
(assert (= ($Snap.first $t@134@01) $Snap.unit))
; [eval] _cthread_161 != null
(assert (not (= _cthread_161@129@01 $Ref.null)))
(assert (=
  ($Snap.second $t@134@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@134@01))
    ($Snap.second ($Snap.second $t@134@01)))))
(assert (= ($Snap.first ($Snap.second $t@134@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_161), Thread_0())
; [eval] typeof(_cthread_161)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_161@129@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@134@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@134@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@134@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@134@01))) $Snap.unit))
; [eval] issubtype(typeof(self_4), A())
; [eval] typeof(self_4)
; [eval] A()
(assert (issubtype<Bool> (typeof<PyType> self_4@132@01) (as A<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@134@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@134@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@134@01))))
  $Snap.unit))
; [eval] self_4 != null
(assert (not (= self_4@132@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01))))))
  $Snap.unit))
; [eval] self_4.A_x == null || issubtype(typeof(self_4.A_x), ObjectLock())
; [eval] self_4.A_x == null
(push) ; 2
; [then-branch: 111 | First:(Second:(Second:(Second:(Second:($t@134@01))))) == Null | live]
; [else-branch: 111 | First:(Second:(Second:(Second:(Second:($t@134@01))))) != Null | live]
(push) ; 3
; [then-branch: 111 | First:(Second:(Second:(Second:(Second:($t@134@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01))))))
  $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 111 | First:(Second:(Second:(Second:(Second:($t@134@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_4.A_x), ObjectLock())
; [eval] typeof(self_4.A_x)
; [eval] ObjectLock()
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@135@01 $Snap)
(assert (= $t@135@01 ($Snap.combine ($Snap.first $t@135@01) ($Snap.second $t@135@01))))
(assert (= ($Snap.first $t@135@01) $Snap.unit))
; [eval] (forperm _r_19: Ref [_r_19.MustReleaseBounded] :: Level(_r_19) <= _current_wait_level_161)
(assert (=
  ($Snap.second $t@135@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@135@01))
    ($Snap.second ($Snap.second $t@135@01)))))
(assert (= ($Snap.first ($Snap.second $t@135@01)) $Snap.unit))
; [eval] (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: Level(_r_19) <= _current_wait_level_161)
(assert (=
  ($Snap.second ($Snap.second $t@135@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@135@01))) $Snap.unit))
; [eval] _residue_161 <= _current_wait_level_161
(assert (<= _residue_161@131@01 _current_wait_level_161@133@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@135@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@136@01 $Ref)
; [exec]
; var x_3: Ref
(declare-const x_3@137@01 $Ref)
; [exec]
; var self_22: Ref
(declare-const self_22@138@01 $Ref)
; [exec]
; var _loop_measures_2: Seq[Measure$]
(declare-const _loop_measures_2@139@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_2: Bool
(declare-const _loop_check_before_2@140@01 Bool)
; [exec]
; var _loop_termination_flag_2: Bool
(declare-const _loop_termination_flag_2@141@01 Bool)
; [exec]
; var _loop_original_must_terminate_2: Perm
(declare-const _loop_original_must_terminate_2@142@01 $Perm)
; [exec]
; var _residue_178: Perm
(declare-const _residue_178@143@01 $Perm)
; [exec]
; var _cwl_161: Perm
(declare-const _cwl_161@144@01 $Perm)
; [exec]
; var _method_measures_161: Seq[Measure$]
(declare-const _method_measures_161@145@01 Seq<Measure$>)
; [exec]
; _method_measures_161 := Seq(Measure$create(true, self_4.A_x, 2))
; [eval] Seq(Measure$create(true, self_4.A_x, 2))
; [eval] Measure$create(true, self_4.A_x, 2)
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01)))))) 2)))
  1))
(declare-const _method_measures_161@146@01 Seq<Measure$>)
(assert (=
  _method_measures_161@146@01
  (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01)))))) 2))))
; [exec]
; inhale typeof(self_4) == A()
(declare-const $t@147@01 $Snap)
(assert (= $t@147@01 $Snap.unit))
; [eval] typeof(self_4) == A()
; [eval] typeof(self_4)
; [eval] A()
(assert (= (typeof<PyType> self_4@132@01) (as A<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_22 := self_4
; [exec]
; x_3 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const x_3@148@01 $Ref)
(assert (= x_3@148@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(3366776)
(declare-const $t@149@01 $Snap)
(assert (= $t@149@01 $Snap.unit))
; [eval] _isDefined(3366776)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3366776))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3366776))
(assert (_isDefined $Snap.unit 3366776))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_2 := perm(MustTerminate(_cthread_161))
; [eval] perm(MustTerminate(_cthread_161))
(declare-const _loop_original_must_terminate_2@150@01 $Perm)
(assert (= _loop_original_must_terminate_2@150@01 $Perm.No))
; [exec]
; _loop_termination_flag_2 := false
; [exec]
; _loop_check_before_2 := true
(declare-const _loop_measures_2@151@01 Seq<Measure$>)
(declare-const x_3@152@01 $Ref)
(declare-const _loop_check_before_2@153@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@154@01 $Snap)
(assert (= $t@154@01 ($Snap.combine ($Snap.first $t@154@01) ($Snap.second $t@154@01))))
(assert (= ($Snap.first $t@154@01) $Snap.unit))
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _residue_178)
(assert (=
  ($Snap.second $t@154@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@154@01))
    ($Snap.second ($Snap.second $t@154@01)))))
(assert (= ($Snap.first ($Snap.second $t@154@01)) $Snap.unit))
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _residue_178)
(assert (=
  ($Snap.second ($Snap.second $t@154@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@154@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@154@01))) $Snap.unit))
; [eval] _residue_161 <= _residue_178
(assert (<= _residue_161@131@01 _residue_178@143@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@154@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@154@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@154@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(x_3), int())
; [eval] typeof(x_3)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> x_3@152@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))
  $Snap.unit))
; [eval] self_22.A_x == null || issubtype(typeof(self_22.A_x), ObjectLock())
; [eval] self_22.A_x == null
(push) ; 4
; [then-branch: 112 | First:(Second:(Second:(Second:(Second:(Second:($t@154@01)))))) == Null | live]
; [else-branch: 112 | First:(Second:(Second:(Second:(Second:(Second:($t@154@01)))))) != Null | live]
(push) ; 5
; [then-branch: 112 | First:(Second:(Second:(Second:(Second:(Second:($t@154@01)))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))
  $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 112 | First:(Second:(Second:(Second:(Second:(Second:($t@154@01)))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_22.A_x), ObjectLock())
; [eval] typeof(self_22.A_x)
; [eval] ObjectLock()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_3, 3366776))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5)
; [eval] int___unbox__(_checkDefined(x_3, 3366776))
; [eval] _checkDefined(x_3, 3366776)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_3@152@01 3366776))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_3@152@01 3366776))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_3@152@01 3366776)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_3@152@01 3366776)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_3@152@01 3366776)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 113 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@152@01, 3366776)), 5) | live]
; [else-branch: 113 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@152@01, 3366776)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 113 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@152@01, 3366776)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_3, 3366776))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_3, 3366776)))
; [eval] int___unbox__(_checkDefined(x_3, 3366776))
; [eval] _checkDefined(x_3, 3366776)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776))))
(pop) ; 5
(push) ; 5
; [else-branch: 113 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@152@01, 3366776)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(x_3), int())
; [eval] typeof(x_3)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> x_3@148@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_3@148@01) (as int<PyType>  PyType)))
; [eval] self_22.A_x == null || issubtype(typeof(self_22.A_x), ObjectLock())
; [eval] self_22.A_x == null
(push) ; 4
; [then-branch: 114 | First:(Second:(Second:(Second:(Second:($t@134@01))))) == Null | live]
; [else-branch: 114 | First:(Second:(Second:(Second:(Second:($t@134@01))))) != Null | live]
(push) ; 5
; [then-branch: 114 | First:(Second:(Second:(Second:(Second:($t@134@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@134@01))))))
  $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 114 | First:(Second:(Second:(Second:(Second:($t@134@01))))) != Null]
; [eval] issubtype(typeof(self_22.A_x), ObjectLock())
; [eval] typeof(self_22.A_x)
; [eval] ObjectLock()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_3, 3366776))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5)
; [eval] int___unbox__(_checkDefined(x_3, 3366776))
; [eval] _checkDefined(x_3, 3366776)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_3@148@01 3366776))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_3@148@01 3366776))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_3@148@01 3366776)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_3@148@01 3366776)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_3@148@01 3366776)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 115 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@148@01, 3366776)), 5) | live]
; [else-branch: 115 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@148@01, 3366776)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 115 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@148@01, 3366776)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_3, 3366776))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_3, 3366776)))
; [eval] int___unbox__(_checkDefined(x_3, 3366776))
; [eval] _checkDefined(x_3, 3366776)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776)) 5))
(push) ; 4
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776)))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776)))
    0)))
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 116 | True | live]
; [else-branch: 116 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 116 | True]
; [eval] perm(self_22.A_x.MustReleaseBounded) > none
; [eval] perm(self_22.A_x.MustReleaseBounded)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 117 | True | live]
; [else-branch: 117 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 117 | True]
; [eval] _loop_check_before_2 ==> _loop_termination_flag_2 || (!int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5) || perm(MustTerminate(_cthread_161)) == none && ((forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 118 | True | live]
; [else-branch: 118 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 118 | True]
; [eval] _loop_termination_flag_2 || (!int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5) || perm(MustTerminate(_cthread_161)) == none && ((forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))))
(push) ; 8
; [then-branch: 119 | False | live]
; [else-branch: 119 | True | live]
(push) ; 9
; [then-branch: 119 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 119 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5)
; [eval] int___unbox__(_checkDefined(x_3, 3366776))
; [eval] _checkDefined(x_3, 3366776)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 120 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@148@01, 3366776)), 5)) | live]
; [else-branch: 120 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@148@01, 3366776)), 5) | live]
(push) ; 11
; [then-branch: 120 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@148@01, 3366776)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776)) 5)))
(pop) ; 11
(push) ; 11
; [else-branch: 120 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@148@01, 3366776)), 5)]
; [eval] perm(MustTerminate(_cthread_161)) == none && ((forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_161)) == none
; [eval] perm(MustTerminate(_cthread_161))
(push) ; 12
; [then-branch: 121 | False | live]
; [else-branch: 121 | True | live]
(push) ; 13
; [then-branch: 121 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 121 | True]
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false)
(push) ; 14
; [then-branch: 122 | False | live]
; [else-branch: 122 | True | live]
(push) ; 15
; [then-branch: 122 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 122 | True]
; [eval] (forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false)
(push) ; 16
; [then-branch: 123 | False | live]
; [else-branch: 123 | True | live]
(push) ; 17
; [then-branch: 123 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 123 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false)
(push) ; 18
; [then-branch: 124 | False | live]
; [else-branch: 124 | True | live]
(push) ; 19
; [then-branch: 124 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 124 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776)) 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776)) 5))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@148@01 3366776)) 5))))
; [eval] !_loop_check_before_2 ==> (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_2
(push) ; 6
; [then-branch: 125 | False | dead]
; [else-branch: 125 | True | live]
(push) ; 7
; [else-branch: 125 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 6
(assert (= $t@154@01 ($Snap.combine ($Snap.first $t@154@01) ($Snap.second $t@154@01))))
(assert (= ($Snap.first $t@154@01) $Snap.unit))
(assert (=
  ($Snap.second $t@154@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@154@01))
    ($Snap.second ($Snap.second $t@154@01)))))
(assert (= ($Snap.first ($Snap.second $t@154@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@154@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@154@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@154@01))) $Snap.unit))
(assert (<= _residue_161@131@01 _residue_178@143@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@154@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@154@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@154@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> x_3@152@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))
  $Snap.unit))
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit x_3@152@01 3366776))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_3@152@01 3366776)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 7
; [eval] int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5)
; [eval] int___unbox__(_checkDefined(x_3, 3366776))
; [eval] _checkDefined(x_3, 3366776)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [eval] !int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5)
; [eval] int___unbox__(_checkDefined(x_3, 3366776))
; [eval] _checkDefined(x_3, 3366776)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5)
; [eval] int___unbox__(_checkDefined(x_3, 3366776))
; [eval] _checkDefined(x_3, 3366776)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 126 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@152@01, 3366776)), 5) | live]
; [else-branch: 126 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@152@01, 3366776)), 5)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 126 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@152@01, 3366776)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5))
; [exec]
; _loop_measures_2 := Seq(Measure$create(true, self_22.A_x, int___sub__(10, int___unbox__(_checkDefined(x_3,
;   3366776)))))
; [eval] Seq(Measure$create(true, self_22.A_x, int___sub__(10, int___unbox__(_checkDefined(x_3, 3366776)))))
; [eval] Measure$create(true, self_22.A_x, int___sub__(10, int___unbox__(_checkDefined(x_3, 3366776))))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_3, 3366776)))
; [eval] int___unbox__(_checkDefined(x_3, 3366776))
; [eval] _checkDefined(x_3, 3366776)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776))))
(pop) ; 8
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776))))))
  1))
(declare-const _loop_measures_2@155@01 Seq<Measure$>)
(assert (=
  _loop_measures_2@155@01
  (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)))))))
; [exec]
; x_3 := __prim__int___box__(int___add__(int___unbox__(x_3), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(x_3), 1))
; [eval] int___add__(int___unbox__(x_3), 1)
; [eval] int___unbox__(x_3)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit x_3@152@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit x_3@152@01))
(push) ; 8
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_3@152@01) 1))
(pop) ; 8
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_3@152@01) 1))
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_3@152@01) 1)))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_3@152@01) 1)))
(declare-const x_3@156@01 $Ref)
(assert (=
  x_3@156@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_3@152@01) 1))))
; [exec]
; inhale _isDefined(3366776)
(declare-const $t@157@01 $Snap)
(assert (= $t@157@01 $Snap.unit))
; [eval] _isDefined(3366776)
(push) ; 8
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop_end_2
; [exec]
; _loop_check_before_2 := false
; [exec]
; assert _loop_termination_flag_2 ==>
;   !int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5)
; [eval] _loop_termination_flag_2 ==> !int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 127 | False | dead]
; [else-branch: 127 | True | live]
(push) ; 9
; [else-branch: 127 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(x_3), int())
; [eval] typeof(x_3)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> x_3@156@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_3@156@01) (as int<PyType>  PyType)))
; [eval] self_22.A_x == null || issubtype(typeof(self_22.A_x), ObjectLock())
; [eval] self_22.A_x == null
(push) ; 8
; [then-branch: 128 | First:(Second:(Second:(Second:(Second:(Second:($t@154@01)))))) == Null | live]
; [else-branch: 128 | First:(Second:(Second:(Second:(Second:(Second:($t@154@01)))))) != Null | live]
(push) ; 9
; [then-branch: 128 | First:(Second:(Second:(Second:(Second:(Second:($t@154@01)))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 128 | First:(Second:(Second:(Second:(Second:(Second:($t@154@01)))))) != Null]
; [eval] issubtype(typeof(self_22.A_x), ObjectLock())
; [eval] typeof(self_22.A_x)
; [eval] ObjectLock()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_3, 3366776))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5)
; [eval] int___unbox__(_checkDefined(x_3, 3366776))
; [eval] _checkDefined(x_3, 3366776)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_3@156@01 3366776))
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_3@156@01 3366776))
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_3@156@01 3366776)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_3@156@01 3366776)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_3@156@01 3366776)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776))))
(push) ; 8
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776)) 5))
(pop) ; 8
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776)) 5))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776)) 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776)) 5)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 129 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@156@01, 3366776)), 5) | live]
; [else-branch: 129 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@156@01, 3366776)), 5)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 129 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@156@01, 3366776)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_3, 3366776))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_3, 3366776)))
; [eval] int___unbox__(_checkDefined(x_3, 3366776))
; [eval] _checkDefined(x_3, 3366776)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776))))
(pop) ; 10
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776))))
(pop) ; 9
(push) ; 9
; [else-branch: 129 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@156@01, 3366776)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776)) 5)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776)) 5)))
(push) ; 8
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776)))
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776)))
    0)))
; [then-branch: 130 | False | dead]
; [else-branch: 130 | True | live]
(push) ; 8
; [else-branch: 130 | True]
; [eval] perm(self_22.A_x.MustReleaseBounded) > none && Measure$check(_loop_measures_2, self_22.A_x, int___sub__(10, int___unbox__(_checkDefined(x_3, 3366776))))
; [eval] perm(self_22.A_x.MustReleaseBounded) > none
; [eval] perm(self_22.A_x.MustReleaseBounded)
(push) ; 9
; [then-branch: 131 | False | live]
; [else-branch: 131 | True | live]
(push) ; 10
; [then-branch: 131 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 131 | True]
; [eval] Measure$check(_loop_measures_2, self_22.A_x, int___sub__(10, int___unbox__(_checkDefined(x_3, 3366776))))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_3, 3366776)))
; [eval] int___unbox__(_checkDefined(x_3, 3366776))
; [eval] _checkDefined(x_3, 3366776)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776))))
(pop) ; 11
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776))))
(push) ; 11
(assert (Measure$check%precondition $Snap.unit _loop_measures_2@155@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776)))))
(pop) ; 11
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_2@155@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776)))
  (Measure$check%precondition $Snap.unit _loop_measures_2@155@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (Measure$check $Snap.unit _loop_measures_2@155@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776)))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (Measure$check $Snap.unit _loop_measures_2@155@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 132 | Measure$check(_, _loop_measures_2@155@01, First:(Second:(Second:(Second:(Second:(Second:($t@154@01)))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, x_3@156@01, 3366776)))) | live]
; [else-branch: 132 | !(Measure$check(_, _loop_measures_2@155@01, First:(Second:(Second:(Second:(Second:(Second:($t@154@01)))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, x_3@156@01, 3366776))))) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 132 | Measure$check(_, _loop_measures_2@155@01, First:(Second:(Second:(Second:(Second:(Second:($t@154@01)))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, x_3@156@01, 3366776))))]
(assert (Measure$check $Snap.unit _loop_measures_2@155@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@156@01 3366776)))))
; [eval] _loop_check_before_2 ==> _loop_termination_flag_2 || (!int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5) || perm(MustTerminate(_cthread_161)) == none && ((forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))))
(push) ; 10
; [then-branch: 133 | False | dead]
; [else-branch: 133 | True | live]
(push) ; 11
; [else-branch: 133 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] !_loop_check_before_2 ==> (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_2
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 134 | True | live]
; [else-branch: 134 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 134 | True]
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false)
(push) ; 12
; [then-branch: 135 | False | live]
; [else-branch: 135 | True | live]
(push) ; 13
; [then-branch: 135 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 135 | True]
; [eval] (forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false)
(push) ; 14
; [then-branch: 136 | False | live]
; [else-branch: 136 | True | live]
(push) ; 15
; [then-branch: 136 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 136 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false)
(push) ; 16
; [then-branch: 137 | False | live]
; [else-branch: 137 | True | live]
(push) ; 17
; [then-branch: 137 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 137 | True]
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 126 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@152@01, 3366776)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5)))
(pop) ; 7
; [eval] !int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5)
; [eval] int___unbox__(_checkDefined(x_3, 3366776))
; [eval] _checkDefined(x_3, 3366776)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 138 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@152@01, 3366776)), 5)) | live]
; [else-branch: 138 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@152@01, 3366776)), 5) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 138 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@152@01, 3366776)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5)))
; [exec]
; exhale perm(MustTerminate(_cthread_161)) > none ==>
;   acc(MustTerminate(_cthread_161), perm(MustTerminate(_cthread_161)) -
;   _loop_original_must_terminate_2)
; [eval] perm(MustTerminate(_cthread_161)) > none
; [eval] perm(MustTerminate(_cthread_161))
; [then-branch: 139 | False | dead]
; [else-branch: 139 | True | live]
(push) ; 8
; [else-branch: 139 | True]
; [exec]
; label post_loop_2
; [exec]
; fold acc(Lock_invariant(self_22.A_x), write)
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0)))
; [eval] typeof(self_17)
; [eval] Lock(Lock_arg(typeof(self_17), 0))
; [eval] Lock_arg(typeof(self_17), 0)
; [eval] typeof(self_17)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))) 0))))
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0))) ==> true
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0)))
; [eval] typeof(self_17)
; [eval] Lock(Lock_arg(typeof(self_17), 0))
; [eval] Lock_arg(typeof(self_17), 0)
; [eval] typeof(self_17)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))) 0))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 140 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@154@01))))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@154@01))))))), 0))) | live]
; [else-branch: 140 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@154@01))))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@154@01))))))), 0)))) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 140 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@154@01))))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@154@01))))))), 0)))]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] issubtype(typeof(self_17), ObjectLock()) ==> true
; [eval] issubtype(typeof(self_17), ObjectLock())
; [eval] typeof(self_17)
; [eval] ObjectLock()
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))) (as ObjectLock<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))) (as ObjectLock<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 141 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@154@01))))))), ObjectLock[PyType]) | live]
; [else-branch: 141 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@154@01))))))), ObjectLock[PyType])) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 141 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@154@01))))))), ObjectLock[PyType])]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))) (as ObjectLock<PyType>  PyType)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))) (as ObjectLock<PyType>  PyType)))
(assert (Lock_invariant%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))))
; [exec]
; _cwl_161 := Lock_release(_cthread_161, _method_measures_161, _residue_161, self_22.A_x)
; [eval] _cthread_173 != null
; [eval] issubtype(typeof(_cthread_173), Thread_0())
; [eval] typeof(_cthread_173)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_16), Lock(Lock_arg(typeof(self_16), 0)))
; [eval] typeof(self_16)
; [eval] Lock(Lock_arg(typeof(self_16), 0))
; [eval] Lock_arg(typeof(self_16), 0)
; [eval] typeof(self_16)
; [eval] issubtype(Lock_arg(typeof(self_16), 0), object())
; [eval] Lock_arg(typeof(self_16), 0)
; [eval] typeof(self_16)
; [eval] object()
(push) ; 9
(assert (not (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))) 0) (as object<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01)))))))) 0) (as object<PyType>  PyType)))
; [eval] self_16 != null
; [eval] perm(self_16.MustReleaseBounded) > none && Measure$check(_caller_measures_173, self_16, 1)
; [eval] perm(self_16.MustReleaseBounded) > none
; [eval] perm(self_16.MustReleaseBounded)
(push) ; 9
; [then-branch: 142 | False | live]
; [else-branch: 142 | True | live]
(push) ; 10
; [then-branch: 142 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 142 | True]
; [eval] Measure$check(_caller_measures_173, self_16, 1)
(push) ; 11
(assert (Measure$check%precondition $Snap.unit _method_measures_161@146@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))) 1))
(pop) ; 11
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _method_measures_161@146@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))) 1))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _method_measures_161@146@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))) 1))
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (Measure$check $Snap.unit _method_measures_161@146@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))) 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (Measure$check $Snap.unit _method_measures_161@146@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))) 1)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 143 | Measure$check(_, _method_measures_161@146@01, First:(Second:(Second:(Second:(Second:(Second:($t@154@01)))))), 1) | live]
; [else-branch: 143 | !(Measure$check(_, _method_measures_161@146@01, First:(Second:(Second:(Second:(Second:(Second:($t@154@01)))))), 1)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 143 | Measure$check(_, _method_measures_161@146@01, First:(Second:(Second:(Second:(Second:(Second:($t@154@01)))))), 1)]
(assert (Measure$check $Snap.unit _method_measures_161@146@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@154@01))))))) 1))
; [eval] Measure$check(_caller_measures_173, _cthread_173, 1) || perm(MustTerminate(_cthread_173)) == none && ((forperm _r_90: Ref [MustInvokeBounded(_r_90)] :: false) && ((forperm _r_90: Ref [MustInvokeUnbounded(_r_90)] :: false) && ((forperm _r_90: Ref [_r_90.MustReleaseBounded] :: false) && (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: false))))
; [eval] Measure$check(_caller_measures_173, _cthread_173, 1)
(push) ; 10
(assert (Measure$check%precondition $Snap.unit _method_measures_161@146@01 _cthread_161@129@01 1))
(pop) ; 10
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _method_measures_161@146@01 _cthread_161@129@01 1))
(push) ; 10
; [then-branch: 144 | Measure$check(_, _method_measures_161@146@01, _cthread_161@129@01, 1) | live]
; [else-branch: 144 | !(Measure$check(_, _method_measures_161@146@01, _cthread_161@129@01, 1)) | live]
(push) ; 11
; [then-branch: 144 | Measure$check(_, _method_measures_161@146@01, _cthread_161@129@01, 1)]
(assert (Measure$check $Snap.unit _method_measures_161@146@01 _cthread_161@129@01 1))
(pop) ; 11
(push) ; 11
; [else-branch: 144 | !(Measure$check(_, _method_measures_161@146@01, _cthread_161@129@01, 1))]
(assert (not
  (Measure$check $Snap.unit _method_measures_161@146@01 _cthread_161@129@01 1)))
; [eval] perm(MustTerminate(_cthread_173)) == none && ((forperm _r_90: Ref [MustInvokeBounded(_r_90)] :: false) && ((forperm _r_90: Ref [MustInvokeUnbounded(_r_90)] :: false) && ((forperm _r_90: Ref [_r_90.MustReleaseBounded] :: false) && (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_173)) == none
; [eval] perm(MustTerminate(_cthread_173))
(push) ; 12
; [then-branch: 145 | False | live]
; [else-branch: 145 | True | live]
(push) ; 13
; [then-branch: 145 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 145 | True]
; [eval] (forperm _r_90: Ref [MustInvokeBounded(_r_90)] :: false)
(push) ; 14
; [then-branch: 146 | False | live]
; [else-branch: 146 | True | live]
(push) ; 15
; [then-branch: 146 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 146 | True]
; [eval] (forperm _r_90: Ref [MustInvokeUnbounded(_r_90)] :: false)
(push) ; 16
; [then-branch: 147 | False | live]
; [else-branch: 147 | True | live]
(push) ; 17
; [then-branch: 147 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 147 | True]
; [eval] (forperm _r_90: Ref [_r_90.MustReleaseBounded] :: false)
(push) ; 18
; [then-branch: 148 | False | live]
; [else-branch: 148 | True | live]
(push) ; 19
; [then-branch: 148 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 148 | True]
; [eval] (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: false)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Measure$check $Snap.unit _method_measures_161@146@01 _cthread_161@129@01 1))
  (Measure$check $Snap.unit _method_measures_161@146@01 _cthread_161@129@01 1)))
(declare-const _current_wait_level_173@158@01 $Perm)
(declare-const $t@159@01 $Snap)
(assert (= $t@159@01 ($Snap.combine ($Snap.first $t@159@01) ($Snap.second $t@159@01))))
(assert (= ($Snap.first $t@159@01) $Snap.unit))
; [eval] (forperm _r_89: Ref [_r_89.MustReleaseBounded] :: Level(_r_89) <= _current_wait_level_173)
(assert (=
  ($Snap.second $t@159@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@159@01))
    ($Snap.second ($Snap.second $t@159@01)))))
(assert (= ($Snap.first ($Snap.second $t@159@01)) $Snap.unit))
; [eval] (forperm _r_89: Ref [_r_89.MustReleaseUnbounded] :: Level(_r_89) <= _current_wait_level_173)
(assert (= ($Snap.second ($Snap.second $t@159@01)) $Snap.unit))
; [eval] _residue_173 <= _current_wait_level_173
(assert (<= _residue_161@131@01 _current_wait_level_173@158@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label __end
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 138 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_3@152@01, 3366776)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_3@152@01 3366776)) 5))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- A_nested1 ----------
(declare-const _cthread_162@160@01 $Ref)
(declare-const _caller_measures_162@161@01 Seq<Measure$>)
(declare-const _residue_162@162@01 $Perm)
(declare-const self_5@163@01 $Ref)
(declare-const _current_wait_level_162@164@01 $Perm)
(declare-const _cthread_162@165@01 $Ref)
(declare-const _caller_measures_162@166@01 Seq<Measure$>)
(declare-const _residue_162@167@01 $Perm)
(declare-const self_5@168@01 $Ref)
(declare-const _current_wait_level_162@169@01 $Perm)
(push) ; 1
(declare-const $t@170@01 $Snap)
(assert (= $t@170@01 ($Snap.combine ($Snap.first $t@170@01) ($Snap.second $t@170@01))))
(assert (= ($Snap.first $t@170@01) $Snap.unit))
; [eval] _cthread_162 != null
(assert (not (= _cthread_162@165@01 $Ref.null)))
(assert (=
  ($Snap.second $t@170@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@170@01))
    ($Snap.second ($Snap.second $t@170@01)))))
(assert (= ($Snap.first ($Snap.second $t@170@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_162), Thread_0())
; [eval] typeof(_cthread_162)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_162@165@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@170@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@170@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@170@01))) $Snap.unit))
; [eval] issubtype(typeof(self_5), A())
; [eval] typeof(self_5)
; [eval] A()
(assert (issubtype<Bool> (typeof<PyType> self_5@168@01) (as A<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@170@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@170@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@170@01))))
  $Snap.unit))
; [eval] self_5 != null
(assert (not (= self_5@168@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
  $Snap.unit))
; [eval] self_5.A_x == null || issubtype(typeof(self_5.A_x), ObjectLock())
; [eval] self_5.A_x == null
(push) ; 2
; [then-branch: 149 | First:(Second:(Second:(Second:(Second:($t@170@01))))) == Null | live]
; [else-branch: 149 | First:(Second:(Second:(Second:(Second:($t@170@01))))) != Null | live]
(push) ; 3
; [then-branch: 149 | First:(Second:(Second:(Second:(Second:($t@170@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
  $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 149 | First:(Second:(Second:(Second:(Second:($t@170@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_5.A_x), ObjectLock())
; [eval] typeof(self_5.A_x)
; [eval] ObjectLock()
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@171@01 $Snap)
(assert (= $t@171@01 ($Snap.combine ($Snap.first $t@171@01) ($Snap.second $t@171@01))))
(assert (= ($Snap.first $t@171@01) $Snap.unit))
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_162)
(assert (=
  ($Snap.second $t@171@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@171@01))
    ($Snap.second ($Snap.second $t@171@01)))))
(assert (= ($Snap.first ($Snap.second $t@171@01)) $Snap.unit))
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_162)
(assert (=
  ($Snap.second ($Snap.second $t@171@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@171@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@171@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@171@01))) $Snap.unit))
; [eval] _residue_162 <= _current_wait_level_162
(assert (<= _residue_162@167@01 _current_wait_level_162@169@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@171@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@172@01 $Ref)
; [exec]
; var x_4: Ref
(declare-const x_4@173@01 $Ref)
; [exec]
; var y: Ref
(declare-const y@174@01 $Ref)
; [exec]
; var self_23: Ref
(declare-const self_23@175@01 $Ref)
; [exec]
; var _loop_measures_3: Seq[Measure$]
(declare-const _loop_measures_3@176@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_3: Bool
(declare-const _loop_check_before_3@177@01 Bool)
; [exec]
; var _loop_termination_flag_3: Bool
(declare-const _loop_termination_flag_3@178@01 Bool)
; [exec]
; var _loop_original_must_terminate_3: Perm
(declare-const _loop_original_must_terminate_3@179@01 $Perm)
; [exec]
; var _residue_179: Perm
(declare-const _residue_179@180@01 $Perm)
; [exec]
; var _loop_measures_4: Seq[Measure$]
(declare-const _loop_measures_4@181@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_4: Bool
(declare-const _loop_check_before_4@182@01 Bool)
; [exec]
; var _loop_termination_flag_4: Bool
(declare-const _loop_termination_flag_4@183@01 Bool)
; [exec]
; var _loop_original_must_terminate_4: Perm
(declare-const _loop_original_must_terminate_4@184@01 $Perm)
; [exec]
; var _residue_180: Perm
(declare-const _residue_180@185@01 $Perm)
; [exec]
; var _cwl_162: Perm
(declare-const _cwl_162@186@01 $Perm)
; [exec]
; var _method_measures_162: Seq[Measure$]
(declare-const _method_measures_162@187@01 Seq<Measure$>)
; [exec]
; _method_measures_162 := Seq(Measure$create(true, self_5.A_x, 2))
; [eval] Seq(Measure$create(true, self_5.A_x, 2))
; [eval] Measure$create(true, self_5.A_x, 2)
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))) 2)))
  1))
(declare-const _method_measures_162@188@01 Seq<Measure$>)
(assert (=
  _method_measures_162@188@01
  (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))) 2))))
; [exec]
; inhale typeof(self_5) == A()
(declare-const $t@189@01 $Snap)
(assert (= $t@189@01 $Snap.unit))
; [eval] typeof(self_5) == A()
; [eval] typeof(self_5)
; [eval] A()
(assert (= (typeof<PyType> self_5@168@01) (as A<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_23 := self_5
; [exec]
; x_4 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const x_4@190@01 $Ref)
(assert (= x_4@190@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(3432312)
(declare-const $t@191@01 $Snap)
(assert (= $t@191@01 $Snap.unit))
; [eval] _isDefined(3432312)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3432312))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3432312))
(assert (_isDefined $Snap.unit 3432312))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; y := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const y@192@01 $Ref)
(assert (= y@192@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(121)
(declare-const $t@193@01 $Snap)
(assert (= $t@193@01 $Snap.unit))
; [eval] _isDefined(121)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 121))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 121))
(assert (_isDefined $Snap.unit 121))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_3 := perm(MustTerminate(_cthread_162))
; [eval] perm(MustTerminate(_cthread_162))
(declare-const _loop_original_must_terminate_3@194@01 $Perm)
(assert (= _loop_original_must_terminate_3@194@01 $Perm.No))
; [exec]
; _loop_termination_flag_3 := false
; [exec]
; _loop_check_before_3 := true
(declare-const _loop_measures_3@195@01 Seq<Measure$>)
(declare-const x_4@196@01 $Ref)
(declare-const _loop_original_must_terminate_4@197@01 $Perm)
(declare-const _loop_termination_flag_4@198@01 Bool)
(declare-const _loop_check_before_4@199@01 Bool)
(declare-const _loop_measures_4@200@01 Seq<Measure$>)
(declare-const y@201@01 $Ref)
(declare-const _loop_check_before_3@202@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@203@01 $Snap)
(assert (= $t@203@01 ($Snap.combine ($Snap.first $t@203@01) ($Snap.second $t@203@01))))
(assert (= ($Snap.first $t@203@01) $Snap.unit))
; [eval] (forperm _r_24: Ref [_r_24.MustReleaseBounded] :: Level(_r_24) <= _residue_179)
(assert (=
  ($Snap.second $t@203@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@203@01))
    ($Snap.second ($Snap.second $t@203@01)))))
(assert (= ($Snap.first ($Snap.second $t@203@01)) $Snap.unit))
; [eval] (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: Level(_r_24) <= _residue_179)
(assert (=
  ($Snap.second ($Snap.second $t@203@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@203@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@203@01))) $Snap.unit))
; [eval] _residue_162 <= _residue_179
(assert (<= _residue_162@167@01 _residue_179@180@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@203@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(x_4), int())
; [eval] typeof(x_4)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> x_4@196@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(y), int())
; [eval] typeof(y)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> y@201@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))
  $Snap.unit))
; [eval] self_23.A_x == null || issubtype(typeof(self_23.A_x), ObjectLock())
; [eval] self_23.A_x == null
(push) ; 4
; [then-branch: 150 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@203@01))))))) == Null | live]
; [else-branch: 150 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@203@01))))))) != Null | live]
(push) ; 5
; [then-branch: 150 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@203@01))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))
  $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 150 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@203@01))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_23.A_x), ObjectLock())
; [eval] typeof(self_23.A_x)
; [eval] ObjectLock()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(x_4, 3432312)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_4, 3432312))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_4, 3432312)), 5)
; [eval] int___unbox__(_checkDefined(x_4, 3432312))
; [eval] _checkDefined(x_4, 3432312)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_4@196@01 3432312))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_4@196@01 3432312))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_4@196@01 3432312)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_4@196@01 3432312)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_4@196@01 3432312)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 151 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_4@196@01, 3432312)), 5) | live]
; [else-branch: 151 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_4@196@01, 3432312)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 151 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_4@196@01, 3432312)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_4, 3432312))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_4, 3432312)))
; [eval] int___unbox__(_checkDefined(x_4, 3432312))
; [eval] _checkDefined(x_4, 3432312)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312))))
(pop) ; 5
(push) ; 5
; [else-branch: 151 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_4@196@01, 3432312)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)) 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(x_4), int())
; [eval] typeof(x_4)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> x_4@190@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_4@190@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(y), int())
; [eval] typeof(y)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> y@192@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> y@192@01) (as int<PyType>  PyType)))
; [eval] self_23.A_x == null || issubtype(typeof(self_23.A_x), ObjectLock())
; [eval] self_23.A_x == null
(push) ; 4
; [then-branch: 152 | First:(Second:(Second:(Second:(Second:($t@170@01))))) == Null | live]
; [else-branch: 152 | First:(Second:(Second:(Second:(Second:($t@170@01))))) != Null | live]
(push) ; 5
; [then-branch: 152 | First:(Second:(Second:(Second:(Second:($t@170@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
  $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 152 | First:(Second:(Second:(Second:(Second:($t@170@01))))) != Null]
; [eval] issubtype(typeof(self_23.A_x), ObjectLock())
; [eval] typeof(self_23.A_x)
; [eval] ObjectLock()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(x_4, 3432312)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_4, 3432312))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_4, 3432312)), 5)
; [eval] int___unbox__(_checkDefined(x_4, 3432312))
; [eval] _checkDefined(x_4, 3432312)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_4@190@01 3432312))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_4@190@01 3432312))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_4@190@01 3432312)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_4@190@01 3432312)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_4@190@01 3432312)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 153 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_4@190@01, 3432312)), 5) | live]
; [else-branch: 153 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_4@190@01, 3432312)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 153 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_4@190@01, 3432312)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_4, 3432312))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_4, 3432312)))
; [eval] int___unbox__(_checkDefined(x_4, 3432312))
; [eval] _checkDefined(x_4, 3432312)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312)) 5))
(push) ; 4
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312)))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312)))
    0)))
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 154 | True | live]
; [else-branch: 154 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 154 | True]
; [eval] perm(self_23.A_x.MustReleaseBounded) > none
; [eval] perm(self_23.A_x.MustReleaseBounded)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 155 | True | live]
; [else-branch: 155 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 155 | True]
; [eval] _loop_check_before_3 ==> _loop_termination_flag_3 || (!int___lt__(int___unbox__(_checkDefined(x_4, 3432312)), 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false)))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 156 | True | live]
; [else-branch: 156 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 156 | True]
; [eval] _loop_termination_flag_3 || (!int___lt__(int___unbox__(_checkDefined(x_4, 3432312)), 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false)))))
(push) ; 8
; [then-branch: 157 | False | live]
; [else-branch: 157 | True | live]
(push) ; 9
; [then-branch: 157 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 157 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(x_4, 3432312)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_4, 3432312)), 5)
; [eval] int___unbox__(_checkDefined(x_4, 3432312))
; [eval] _checkDefined(x_4, 3432312)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 158 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_4@190@01, 3432312)), 5)) | live]
; [else-branch: 158 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_4@190@01, 3432312)), 5) | live]
(push) ; 11
; [then-branch: 158 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_4@190@01, 3432312)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312)) 5)))
(pop) ; 11
(push) ; 11
; [else-branch: 158 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_4@190@01, 3432312)), 5)]
; [eval] perm(MustTerminate(_cthread_162)) == none && ((forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_162)) == none
; [eval] perm(MustTerminate(_cthread_162))
(push) ; 12
; [then-branch: 159 | False | live]
; [else-branch: 159 | True | live]
(push) ; 13
; [then-branch: 159 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 159 | True]
; [eval] (forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false)
(push) ; 14
; [then-branch: 160 | False | live]
; [else-branch: 160 | True | live]
(push) ; 15
; [then-branch: 160 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 160 | True]
; [eval] (forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false)
(push) ; 16
; [then-branch: 161 | False | live]
; [else-branch: 161 | True | live]
(push) ; 17
; [then-branch: 161 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 161 | True]
; [eval] (forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false)
(push) ; 18
; [then-branch: 162 | False | live]
; [else-branch: 162 | True | live]
(push) ; 19
; [then-branch: 162 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 162 | True]
; [eval] (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312)) 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312)) 5))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@190@01 3432312)) 5))))
; [eval] !_loop_check_before_3 ==> (forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_3
(push) ; 6
; [then-branch: 163 | False | dead]
; [else-branch: 163 | True | live]
(push) ; 7
; [else-branch: 163 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 6
(assert (= $t@203@01 ($Snap.combine ($Snap.first $t@203@01) ($Snap.second $t@203@01))))
(assert (= ($Snap.first $t@203@01) $Snap.unit))
(assert (=
  ($Snap.second $t@203@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@203@01))
    ($Snap.second ($Snap.second $t@203@01)))))
(assert (= ($Snap.first ($Snap.second $t@203@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@203@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@203@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@203@01))) $Snap.unit))
(assert (<= _residue_162@167@01 _residue_179@180@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@203@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> x_4@196@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> y@201@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))
  $Snap.unit))
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit x_4@196@01 3432312))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_4@196@01 3432312)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 7
; [eval] int___lt__(int___unbox__(_checkDefined(x_4, 3432312)), 5)
; [eval] int___unbox__(_checkDefined(x_4, 3432312))
; [eval] _checkDefined(x_4, 3432312)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [eval] !int___lt__(int___unbox__(_checkDefined(x_4, 3432312)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_4, 3432312)), 5)
; [eval] int___unbox__(_checkDefined(x_4, 3432312))
; [eval] _checkDefined(x_4, 3432312)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(x_4, 3432312)), 5)
; [eval] int___unbox__(_checkDefined(x_4, 3432312))
; [eval] _checkDefined(x_4, 3432312)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)) 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)) 5)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 164 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_4@196@01, 3432312)), 5) | live]
; [else-branch: 164 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_4@196@01, 3432312)), 5)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 164 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_4@196@01, 3432312)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)) 5))
; [exec]
; _loop_measures_3 := Seq(Measure$create(true, self_23.A_x, int___sub__(10, int___unbox__(_checkDefined(x_4,
;   3432312)))))
; [eval] Seq(Measure$create(true, self_23.A_x, int___sub__(10, int___unbox__(_checkDefined(x_4, 3432312)))))
; [eval] Measure$create(true, self_23.A_x, int___sub__(10, int___unbox__(_checkDefined(x_4, 3432312))))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_4, 3432312)))
; [eval] int___unbox__(_checkDefined(x_4, 3432312))
; [eval] _checkDefined(x_4, 3432312)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312))))
(pop) ; 8
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312))))))
  1))
(declare-const _loop_measures_3@204@01 Seq<Measure$>)
(assert (=
  _loop_measures_3@204@01
  (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_4@196@01 3432312)))))))
; [exec]
; x_4 := __prim__int___box__(int___add__(int___unbox__(x_4), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(x_4), 1))
; [eval] int___add__(int___unbox__(x_4), 1)
; [eval] int___unbox__(x_4)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit x_4@196@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit x_4@196@01))
(push) ; 8
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_4@196@01) 1))
(pop) ; 8
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_4@196@01) 1))
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_4@196@01) 1)))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_4@196@01) 1)))
(declare-const x_4@205@01 $Ref)
(assert (=
  x_4@205@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_4@196@01) 1))))
; [exec]
; inhale _isDefined(3432312)
(declare-const $t@206@01 $Snap)
(assert (= $t@206@01 $Snap.unit))
; [eval] _isDefined(3432312)
(push) ; 8
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_4 := perm(MustTerminate(_cthread_162))
; [eval] perm(MustTerminate(_cthread_162))
(declare-const _loop_original_must_terminate_4@207@01 $Perm)
(assert (= _loop_original_must_terminate_4@207@01 $Perm.No))
; [exec]
; _loop_termination_flag_4 := false
; [exec]
; _loop_check_before_4 := true
(declare-const _loop_measures_4@208@01 Seq<Measure$>)
(declare-const y@209@01 $Ref)
(declare-const _loop_check_before_4@210@01 Bool)
(set-option :timeout 0)
(push) ; 8
; Loop head block: Check well-definedness of invariant
(declare-const $t@211@01 $Snap)
(assert (= $t@211@01 ($Snap.combine ($Snap.first $t@211@01) ($Snap.second $t@211@01))))
(assert (= ($Snap.first $t@211@01) $Snap.unit))
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseBounded] :: Level(_r_22) <= _residue_180)
(assert (=
  ($Snap.second $t@211@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@211@01))
    ($Snap.second ($Snap.second $t@211@01)))))
(assert (= ($Snap.first ($Snap.second $t@211@01)) $Snap.unit))
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: Level(_r_22) <= _residue_180)
(assert (=
  ($Snap.second ($Snap.second $t@211@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@211@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@211@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@211@01))) $Snap.unit))
; [eval] _residue_179 <= _residue_180
(assert (<= _residue_179@180@01 _residue_180@185@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@211@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@211@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@211@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(y), int())
; [eval] typeof(y)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> y@209@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01))))))
  $Snap.unit))
(pop) ; 8
(push) ; 8
; Loop head block: Establish invariant
; [eval] issubtype(typeof(y), int())
; [eval] typeof(y)
; [eval] int()
; [eval] _loop_check_before_4 ==> _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(y, 121)), 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 165 | True | live]
; [else-branch: 165 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 165 | True]
; [eval] _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(y, 121)), 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))))
(push) ; 11
; [then-branch: 166 | False | live]
; [else-branch: 166 | True | live]
(push) ; 12
; [then-branch: 166 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 166 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(y, 121)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y, 121)), 5)
; [eval] int___unbox__(_checkDefined(y, 121))
; [eval] _checkDefined(y, 121)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y@201@01 121))
(pop) ; 13
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y@201@01 121))
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y@201@01 121)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y@201@01 121)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y@201@01 121)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y@201@01 121)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y@201@01 121))))
(push) ; 13
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5))
(pop) ; 13
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5))
(push) ; 13
; [then-branch: 167 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y@201@01, 121)), 5)) | live]
; [else-branch: 167 | int___lt__(_, int___unbox__(_, _checkDefined(_, y@201@01, 121)), 5) | live]
(push) ; 14
; [then-branch: 167 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y@201@01, 121)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5)))
(pop) ; 14
(push) ; 14
; [else-branch: 167 | int___lt__(_, int___unbox__(_, _checkDefined(_, y@201@01, 121)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5))
; [eval] perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_162)) == none
; [eval] perm(MustTerminate(_cthread_162))
(push) ; 15
; [then-branch: 168 | False | live]
; [else-branch: 168 | True | live]
(push) ; 16
; [then-branch: 168 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 168 | True]
; [eval] (forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false)
(push) ; 17
; [then-branch: 169 | False | live]
; [else-branch: 169 | True | live]
(push) ; 18
; [then-branch: 169 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 169 | True]
; [eval] (forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false)
(push) ; 19
; [then-branch: 170 | False | live]
; [else-branch: 170 | True | live]
(push) ; 20
; [then-branch: 170 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 170 | True]
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false)
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 171 | True | live]
; [else-branch: 171 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 171 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit y@201@01 121)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y@201@01 121)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y@201@01 121))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5)
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit y@201@01 121)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y@201@01 121)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y@201@01 121))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5)
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5)))))
(push) ; 9
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_check_before_4 ==> _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(y, 121)), 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 172 | True | live]
; [else-branch: 172 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 172 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(y, 121)), 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 11
; [then-branch: 173 | False | live]
; [else-branch: 173 | True | live]
(push) ; 12
; [then-branch: 173 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 173 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(y, 121)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y, 121)), 5)
; [eval] int___unbox__(_checkDefined(y, 121))
; [eval] _checkDefined(y, 121)
(set-option :timeout 0)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
; [then-branch: 174 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y@201@01, 121)), 5)) | live]
; [else-branch: 174 | int___lt__(_, int___unbox__(_, _checkDefined(_, y@201@01, 121)), 5) | live]
(push) ; 14
; [then-branch: 174 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y@201@01, 121)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 174 | int___lt__(_, int___unbox__(_, _checkDefined(_, y@201@01, 121)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_162)) == none
; [eval] perm(MustTerminate(_cthread_162))
(set-option :timeout 0)
(push) ; 15
; [then-branch: 175 | False | live]
; [else-branch: 175 | True | live]
(push) ; 16
; [then-branch: 175 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 16
(set-option :timeout 0)
(push) ; 16
; [else-branch: 175 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false)
(set-option :timeout 0)
(push) ; 17
; [then-branch: 176 | False | live]
; [else-branch: 176 | True | live]
(push) ; 18
; [then-branch: 176 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 18
(set-option :timeout 0)
(push) ; 18
; [else-branch: 176 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false)
(set-option :timeout 0)
(push) ; 19
; [then-branch: 177 | False | live]
; [else-branch: 177 | True | live]
(push) ; 20
; [then-branch: 177 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 20
(set-option :timeout 0)
(push) ; 20
; [else-branch: 177 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false)
(set-option :timeout 0)
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 178 | True | live]
; [else-branch: 178 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 178 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 22
(pop) ; 21
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_check_before_4 ==> _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(y, 121)), 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 179 | True | live]
; [else-branch: 179 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 179 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(y, 121)), 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 11
; [then-branch: 180 | False | live]
; [else-branch: 180 | True | live]
(push) ; 12
; [then-branch: 180 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 180 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(y, 121)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y, 121)), 5)
; [eval] int___unbox__(_checkDefined(y, 121))
; [eval] _checkDefined(y, 121)
(set-option :timeout 0)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
; [then-branch: 181 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y@201@01, 121)), 5)) | live]
; [else-branch: 181 | int___lt__(_, int___unbox__(_, _checkDefined(_, y@201@01, 121)), 5) | live]
(push) ; 14
; [then-branch: 181 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y@201@01, 121)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 181 | int___lt__(_, int___unbox__(_, _checkDefined(_, y@201@01, 121)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_162)) == none
; [eval] perm(MustTerminate(_cthread_162))
(set-option :timeout 0)
(push) ; 15
; [then-branch: 182 | False | live]
; [else-branch: 182 | True | live]
(push) ; 16
; [then-branch: 182 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 16
(set-option :timeout 0)
(push) ; 16
; [else-branch: 182 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false)
(set-option :timeout 0)
(push) ; 17
; [then-branch: 183 | False | live]
; [else-branch: 183 | True | live]
(push) ; 18
; [then-branch: 183 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 18
(set-option :timeout 0)
(push) ; 18
; [else-branch: 183 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false)
(set-option :timeout 0)
(push) ; 19
; [then-branch: 184 | False | live]
; [else-branch: 184 | True | live]
(push) ; 20
; [then-branch: 184 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 20
(set-option :timeout 0)
(push) ; 20
; [else-branch: 184 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false)
(set-option :timeout 0)
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 185 | True | live]
; [else-branch: 185 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 185 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 22
(pop) ; 21
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_check_before_4 ==> _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(y, 121)), 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 186 | True | live]
; [else-branch: 186 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 186 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(y, 121)), 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 11
; [then-branch: 187 | False | live]
; [else-branch: 187 | True | live]
(push) ; 12
; [then-branch: 187 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 187 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(y, 121)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y, 121)), 5)
; [eval] int___unbox__(_checkDefined(y, 121))
; [eval] _checkDefined(y, 121)
(set-option :timeout 0)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
; [then-branch: 188 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y@201@01, 121)), 5)) | live]
; [else-branch: 188 | int___lt__(_, int___unbox__(_, _checkDefined(_, y@201@01, 121)), 5) | live]
(push) ; 14
; [then-branch: 188 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y@201@01, 121)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 188 | int___lt__(_, int___unbox__(_, _checkDefined(_, y@201@01, 121)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_162)) == none
; [eval] perm(MustTerminate(_cthread_162))
(set-option :timeout 0)
(push) ; 15
; [then-branch: 189 | False | live]
; [else-branch: 189 | True | live]
(push) ; 16
; [then-branch: 189 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 16
(set-option :timeout 0)
(push) ; 16
; [else-branch: 189 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false)
(set-option :timeout 0)
(push) ; 17
; [then-branch: 190 | False | live]
; [else-branch: 190 | True | live]
(push) ; 18
; [then-branch: 190 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 18
(set-option :timeout 0)
(push) ; 18
; [else-branch: 190 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false)
(set-option :timeout 0)
(push) ; 19
; [then-branch: 191 | False | live]
; [else-branch: 191 | True | live]
(push) ; 20
; [then-branch: 191 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 20
(set-option :timeout 0)
(push) ; 20
; [else-branch: 191 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false)
(set-option :timeout 0)
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 192 | True | live]
; [else-branch: 192 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 192 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 22
(pop) ; 21
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y@201@01 121)) 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- A_nested1_after_inner ----------
(declare-const _cthread_163@212@01 $Ref)
(declare-const _caller_measures_163@213@01 Seq<Measure$>)
(declare-const _residue_163@214@01 $Perm)
(declare-const self_6@215@01 $Ref)
(declare-const _current_wait_level_163@216@01 $Perm)
(declare-const _cthread_163@217@01 $Ref)
(declare-const _caller_measures_163@218@01 Seq<Measure$>)
(declare-const _residue_163@219@01 $Perm)
(declare-const self_6@220@01 $Ref)
(declare-const _current_wait_level_163@221@01 $Perm)
(push) ; 1
(declare-const $t@222@01 $Snap)
(assert (= $t@222@01 ($Snap.combine ($Snap.first $t@222@01) ($Snap.second $t@222@01))))
(assert (= ($Snap.first $t@222@01) $Snap.unit))
; [eval] _cthread_163 != null
(assert (not (= _cthread_163@217@01 $Ref.null)))
(assert (=
  ($Snap.second $t@222@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@222@01))
    ($Snap.second ($Snap.second $t@222@01)))))
(assert (= ($Snap.first ($Snap.second $t@222@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_163), Thread_0())
; [eval] typeof(_cthread_163)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_163@217@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@222@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@222@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@222@01))) $Snap.unit))
; [eval] issubtype(typeof(self_6), A())
; [eval] typeof(self_6)
; [eval] A()
(assert (issubtype<Bool> (typeof<PyType> self_6@220@01) (as A<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@222@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@222@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@222@01))))
  $Snap.unit))
; [eval] self_6 != null
(assert (not (= self_6@220@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))
  $Snap.unit))
; [eval] self_6.A_x == null || issubtype(typeof(self_6.A_x), ObjectLock())
; [eval] self_6.A_x == null
(push) ; 2
; [then-branch: 193 | First:(Second:(Second:(Second:(Second:($t@222@01))))) == Null | live]
; [else-branch: 193 | First:(Second:(Second:(Second:(Second:($t@222@01))))) != Null | live]
(push) ; 3
; [then-branch: 193 | First:(Second:(Second:(Second:(Second:($t@222@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))
  $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 193 | First:(Second:(Second:(Second:(Second:($t@222@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_6.A_x), ObjectLock())
; [eval] typeof(self_6.A_x)
; [eval] ObjectLock()
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@223@01 $Snap)
(assert (= $t@223@01 ($Snap.combine ($Snap.first $t@223@01) ($Snap.second $t@223@01))))
(assert (= ($Snap.first $t@223@01) $Snap.unit))
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseBounded] :: Level(_r_33) <= _current_wait_level_163)
(assert (=
  ($Snap.second $t@223@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@223@01))
    ($Snap.second ($Snap.second $t@223@01)))))
(assert (= ($Snap.first ($Snap.second $t@223@01)) $Snap.unit))
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: Level(_r_33) <= _current_wait_level_163)
(assert (=
  ($Snap.second ($Snap.second $t@223@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@223@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@223@01))) $Snap.unit))
; [eval] _residue_163 <= _current_wait_level_163
(assert (<= _residue_163@219@01 _current_wait_level_163@221@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@223@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@224@01 $Ref)
; [exec]
; var x_5: Ref
(declare-const x_5@225@01 $Ref)
; [exec]
; var y_0: Ref
(declare-const y_0@226@01 $Ref)
; [exec]
; var self_24: Ref
(declare-const self_24@227@01 $Ref)
; [exec]
; var _loop_measures_5: Seq[Measure$]
(declare-const _loop_measures_5@228@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_5: Bool
(declare-const _loop_check_before_5@229@01 Bool)
; [exec]
; var _loop_termination_flag_5: Bool
(declare-const _loop_termination_flag_5@230@01 Bool)
; [exec]
; var _loop_original_must_terminate_5: Perm
(declare-const _loop_original_must_terminate_5@231@01 $Perm)
; [exec]
; var _residue_181: Perm
(declare-const _residue_181@232@01 $Perm)
; [exec]
; var _loop_measures_6: Seq[Measure$]
(declare-const _loop_measures_6@233@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_6: Bool
(declare-const _loop_check_before_6@234@01 Bool)
; [exec]
; var _loop_termination_flag_6: Bool
(declare-const _loop_termination_flag_6@235@01 Bool)
; [exec]
; var _loop_original_must_terminate_6: Perm
(declare-const _loop_original_must_terminate_6@236@01 $Perm)
; [exec]
; var _residue_182: Perm
(declare-const _residue_182@237@01 $Perm)
; [exec]
; var _cwl_163: Perm
(declare-const _cwl_163@238@01 $Perm)
; [exec]
; var _method_measures_163: Seq[Measure$]
(declare-const _method_measures_163@239@01 Seq<Measure$>)
; [exec]
; _method_measures_163 := Seq(Measure$create(true, self_6.A_x, 2))
; [eval] Seq(Measure$create(true, self_6.A_x, 2))
; [eval] Measure$create(true, self_6.A_x, 2)
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))) 2)))
  1))
(declare-const _method_measures_163@240@01 Seq<Measure$>)
(assert (=
  _method_measures_163@240@01
  (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))) 2))))
; [exec]
; inhale typeof(self_6) == A()
(declare-const $t@241@01 $Snap)
(assert (= $t@241@01 $Snap.unit))
; [eval] typeof(self_6) == A()
; [eval] typeof(self_6)
; [eval] A()
(assert (= (typeof<PyType> self_6@220@01) (as A<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_24 := self_6
; [exec]
; x_5 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const x_5@242@01 $Ref)
(assert (= x_5@242@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(3497848)
(declare-const $t@243@01 $Snap)
(assert (= $t@243@01 $Snap.unit))
; [eval] _isDefined(3497848)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3497848))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3497848))
(assert (_isDefined $Snap.unit 3497848))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; y_0 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const y_0@244@01 $Ref)
(assert (= y_0@244@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(3170169)
(declare-const $t@245@01 $Snap)
(assert (= $t@245@01 $Snap.unit))
; [eval] _isDefined(3170169)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3170169))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3170169))
(assert (_isDefined $Snap.unit 3170169))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_5 := perm(MustTerminate(_cthread_163))
; [eval] perm(MustTerminate(_cthread_163))
(declare-const _loop_original_must_terminate_5@246@01 $Perm)
(assert (= _loop_original_must_terminate_5@246@01 $Perm.No))
; [exec]
; _loop_termination_flag_5 := false
; [exec]
; _loop_check_before_5 := true
(declare-const _loop_measures_5@247@01 Seq<Measure$>)
(declare-const x_5@248@01 $Ref)
(declare-const _loop_original_must_terminate_6@249@01 $Perm)
(declare-const _loop_termination_flag_6@250@01 Bool)
(declare-const _loop_check_before_6@251@01 Bool)
(declare-const _loop_measures_6@252@01 Seq<Measure$>)
(declare-const y_0@253@01 $Ref)
(declare-const _cwl_163@254@01 $Perm)
(declare-const _loop_check_before_5@255@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@256@01 $Snap)
(assert (= $t@256@01 ($Snap.combine ($Snap.first $t@256@01) ($Snap.second $t@256@01))))
(assert (= ($Snap.first $t@256@01) $Snap.unit))
; [eval] (forperm _r_31: Ref [_r_31.MustReleaseBounded] :: Level(_r_31) <= _residue_181)
(assert (=
  ($Snap.second $t@256@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@256@01))
    ($Snap.second ($Snap.second $t@256@01)))))
(assert (= ($Snap.first ($Snap.second $t@256@01)) $Snap.unit))
; [eval] (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: Level(_r_31) <= _residue_181)
(assert (=
  ($Snap.second ($Snap.second $t@256@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@256@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@256@01))) $Snap.unit))
; [eval] _residue_163 <= _residue_181
(assert (<= _residue_163@219@01 _residue_181@232@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@256@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@256@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@256@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(x_5), int())
; [eval] typeof(x_5)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> x_5@248@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(y_0), int())
; [eval] typeof(y_0)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> y_0@253@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))
  $Snap.unit))
; [eval] self_24.A_x == null || issubtype(typeof(self_24.A_x), ObjectLock())
; [eval] self_24.A_x == null
(push) ; 4
; [then-branch: 194 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@256@01))))))) == Null | live]
; [else-branch: 194 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@256@01))))))) != Null | live]
(push) ; 5
; [then-branch: 194 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@256@01))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))
  $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 194 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@256@01))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_24.A_x), ObjectLock())
; [eval] typeof(self_24.A_x)
; [eval] ObjectLock()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))))))
; [eval] int___lt__(int___unbox__(_checkDefined(x_5, 3497848)), 5)
; [eval] int___unbox__(_checkDefined(x_5, 3497848))
; [eval] _checkDefined(x_5, 3497848)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_5@248@01 3497848))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_5@248@01 3497848))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_5@248@01 3497848)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_5@248@01 3497848)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_5@248@01 3497848)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)) 5))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)) 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)) 5)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 195 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_5@248@01, 3497848)), 5) | live]
; [else-branch: 195 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_5@248@01, 3497848)), 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 195 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_5@248@01, 3497848)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)) 5))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(x_5, 3497848)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_5, 3497848))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_5, 3497848)), 5)
; [eval] int___unbox__(_checkDefined(x_5, 3497848))
; [eval] _checkDefined(x_5, 3497848)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)) 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 196 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_5@248@01, 3497848)), 5) | live]
; [else-branch: 196 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_5@248@01, 3497848)), 5)) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 196 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_5@248@01, 3497848)), 5)]
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_5, 3497848))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_5, 3497848)))
; [eval] int___unbox__(_checkDefined(x_5, 3497848))
; [eval] _checkDefined(x_5, 3497848)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848))))
(pop) ; 7
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)) 5)
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)))))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)))
    0)))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))))
  $Snap.unit))
(pop) ; 4
(push) ; 4
; [else-branch: 195 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_5@248@01, 3497848)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)) 5)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))))
  $Snap.unit))
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(x_5), int())
; [eval] typeof(x_5)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> x_5@242@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_5@242@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(y_0), int())
; [eval] typeof(y_0)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> y_0@244@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> y_0@244@01) (as int<PyType>  PyType)))
; [eval] self_24.A_x == null || issubtype(typeof(self_24.A_x), ObjectLock())
; [eval] self_24.A_x == null
(push) ; 4
; [then-branch: 197 | First:(Second:(Second:(Second:(Second:($t@222@01))))) == Null | live]
; [else-branch: 197 | First:(Second:(Second:(Second:(Second:($t@222@01))))) != Null | live]
(push) ; 5
; [then-branch: 197 | First:(Second:(Second:(Second:(Second:($t@222@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))
  $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 197 | First:(Second:(Second:(Second:(Second:($t@222@01))))) != Null]
; [eval] issubtype(typeof(self_24.A_x), ObjectLock())
; [eval] typeof(self_24.A_x)
; [eval] ObjectLock()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(x_5, 3497848)), 5)
; [eval] int___unbox__(_checkDefined(x_5, 3497848))
; [eval] _checkDefined(x_5, 3497848)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_5@242@01 3497848))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_5@242@01 3497848))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_5@242@01 3497848)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_5@242@01 3497848)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_5@242@01 3497848)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848)) 5))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848)) 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848)) 5)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 198 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_5@242@01, 3497848)), 5) | live]
; [else-branch: 198 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_5@242@01, 3497848)), 5)) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 198 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_5@242@01, 3497848)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848)) 5))
; [eval] int___lt__(int___unbox__(_checkDefined(x_5, 3497848)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_5, 3497848))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_5, 3497848)), 5)
; [eval] int___unbox__(_checkDefined(x_5, 3497848))
; [eval] _checkDefined(x_5, 3497848)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848)) 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 199 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_5@242@01, 3497848)), 5) | live]
; [else-branch: 199 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_5@242@01, 3497848)), 5)) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 199 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_5@242@01, 3497848)), 5)]
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_5, 3497848))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_5, 3497848)))
; [eval] int___unbox__(_checkDefined(x_5, 3497848))
; [eval] _checkDefined(x_5, 3497848)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848))))
(pop) ; 7
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848)) 5)
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848)))))
(push) ; 5
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848)))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848)))
    0)))
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 200 | True | live]
; [else-branch: 200 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 200 | True]
; [eval] perm(self_24.A_x.MustReleaseBounded) > none
; [eval] perm(self_24.A_x.MustReleaseBounded)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 201 | True | live]
; [else-branch: 201 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 201 | True]
; [eval] _loop_check_before_5 ==> _loop_termination_flag_5 || (!int___lt__(int___unbox__(_checkDefined(x_5, 3497848)), 5) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_32: Ref [MustInvokeBounded(_r_32)] :: false) && ((forperm _r_32: Ref [MustInvokeUnbounded(_r_32)] :: false) && ((forperm _r_32: Ref [_r_32.MustReleaseBounded] :: false) && (forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: false)))))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 202 | True | live]
; [else-branch: 202 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 202 | True]
; [eval] _loop_termination_flag_5 || (!int___lt__(int___unbox__(_checkDefined(x_5, 3497848)), 5) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_32: Ref [MustInvokeBounded(_r_32)] :: false) && ((forperm _r_32: Ref [MustInvokeUnbounded(_r_32)] :: false) && ((forperm _r_32: Ref [_r_32.MustReleaseBounded] :: false) && (forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: false)))))
(push) ; 9
; [then-branch: 203 | False | live]
; [else-branch: 203 | True | live]
(push) ; 10
; [then-branch: 203 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 203 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(x_5, 3497848)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_5, 3497848)), 5)
; [eval] int___unbox__(_checkDefined(x_5, 3497848))
; [eval] _checkDefined(x_5, 3497848)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 204 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_5@242@01, 3497848)), 5)) | live]
; [else-branch: 204 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_5@242@01, 3497848)), 5) | live]
(push) ; 12
; [then-branch: 204 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_5@242@01, 3497848)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848)) 5)))
(pop) ; 12
(push) ; 12
; [else-branch: 204 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_5@242@01, 3497848)), 5)]
; [eval] perm(MustTerminate(_cthread_163)) == none && ((forperm _r_32: Ref [MustInvokeBounded(_r_32)] :: false) && ((forperm _r_32: Ref [MustInvokeUnbounded(_r_32)] :: false) && ((forperm _r_32: Ref [_r_32.MustReleaseBounded] :: false) && (forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_163)) == none
; [eval] perm(MustTerminate(_cthread_163))
(push) ; 13
; [then-branch: 205 | False | live]
; [else-branch: 205 | True | live]
(push) ; 14
; [then-branch: 205 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 205 | True]
; [eval] (forperm _r_32: Ref [MustInvokeBounded(_r_32)] :: false)
(push) ; 15
; [then-branch: 206 | False | live]
; [else-branch: 206 | True | live]
(push) ; 16
; [then-branch: 206 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 206 | True]
; [eval] (forperm _r_32: Ref [MustInvokeUnbounded(_r_32)] :: false)
(push) ; 17
; [then-branch: 207 | False | live]
; [else-branch: 207 | True | live]
(push) ; 18
; [then-branch: 207 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 207 | True]
; [eval] (forperm _r_32: Ref [_r_32.MustReleaseBounded] :: false)
(push) ; 19
; [then-branch: 208 | False | live]
; [else-branch: 208 | True | live]
(push) ; 20
; [then-branch: 208 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 208 | True]
; [eval] (forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: false)
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848)) 5))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848)) 5))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@242@01 3497848)) 5))))
; [eval] !_loop_check_before_5 ==> (forperm _r_32: Ref [MustInvokeBounded(_r_32)] :: false) && ((forperm _r_32: Ref [MustInvokeUnbounded(_r_32)] :: false) && ((forperm _r_32: Ref [_r_32.MustReleaseBounded] :: false) && (forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_5
(push) ; 7
; [then-branch: 209 | False | dead]
; [else-branch: 209 | True | live]
(push) ; 8
; [else-branch: 209 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)) 5))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))))
  $Snap.unit))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)) 5)
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)))))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)))
    0)))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))))
  $Snap.unit))
(assert (= $t@256@01 ($Snap.combine ($Snap.first $t@256@01) ($Snap.second $t@256@01))))
(assert (= ($Snap.first $t@256@01) $Snap.unit))
(assert (=
  ($Snap.second $t@256@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@256@01))
    ($Snap.second ($Snap.second $t@256@01)))))
(assert (= ($Snap.first ($Snap.second $t@256@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@256@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@256@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@256@01))) $Snap.unit))
(assert (<= _residue_163@219@01 _residue_181@232@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@256@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@256@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@256@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> x_5@248@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> y_0@253@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))
  $Snap.unit))
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01))))))))))))
(assert (_checkDefined%precondition $Snap.unit x_5@248@01 3497848))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_5@248@01 3497848)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)) 5))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 8
; [eval] int___lt__(int___unbox__(_checkDefined(x_5, 3497848)), 5)
; [eval] int___unbox__(_checkDefined(x_5, 3497848))
; [eval] _checkDefined(x_5, 3497848)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [eval] !int___lt__(int___unbox__(_checkDefined(x_5, 3497848)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_5, 3497848)), 5)
; [eval] int___unbox__(_checkDefined(x_5, 3497848))
; [eval] _checkDefined(x_5, 3497848)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(x_5, 3497848)), 5)
; [eval] int___unbox__(_checkDefined(x_5, 3497848))
; [eval] _checkDefined(x_5, 3497848)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)) 5))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 210 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_5@248@01, 3497848)), 5) | live]
; [else-branch: 210 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_5@248@01, 3497848)), 5)) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 210 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_5@248@01, 3497848)), 5)]
; [exec]
; _loop_measures_5 := Seq(Measure$create(int___lt__(int___unbox__(_checkDefined(x_5,
;   3497848)), 5), self_24.A_x, int___sub__(10, int___unbox__(_checkDefined(x_5,
;   3497848)))))
; [eval] Seq(Measure$create(int___lt__(int___unbox__(_checkDefined(x_5, 3497848)), 5), self_24.A_x, int___sub__(10, int___unbox__(_checkDefined(x_5, 3497848)))))
; [eval] Measure$create(int___lt__(int___unbox__(_checkDefined(x_5, 3497848)), 5), self_24.A_x, int___sub__(10, int___unbox__(_checkDefined(x_5, 3497848))))
; [eval] int___lt__(int___unbox__(_checkDefined(x_5, 3497848)), 5)
; [eval] int___unbox__(_checkDefined(x_5, 3497848))
; [eval] _checkDefined(x_5, 3497848)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_5, 3497848)))
; [eval] int___unbox__(_checkDefined(x_5, 3497848))
; [eval] _checkDefined(x_5, 3497848)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848))))
(pop) ; 9
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)) 5) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848))))))
  1))
(declare-const _loop_measures_5@257@01 Seq<Measure$>)
(assert (=
  _loop_measures_5@257@01
  (Seq_singleton (Measure$create<Measure$> (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)) 5) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@256@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_5@248@01 3497848)))))))
; [exec]
; x_5 := __prim__int___box__(int___add__(int___unbox__(x_5), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(x_5), 1))
; [eval] int___add__(int___unbox__(x_5), 1)
; [eval] int___unbox__(x_5)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit x_5@248@01))
(pop) ; 9
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit x_5@248@01))
(push) ; 9
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_5@248@01) 1))
(pop) ; 9
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_5@248@01) 1))
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_5@248@01) 1)))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_5@248@01) 1)))
(declare-const x_5@258@01 $Ref)
(assert (=
  x_5@258@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_5@248@01) 1))))
; [exec]
; inhale _isDefined(3497848)
(declare-const $t@259@01 $Snap)
(assert (= $t@259@01 $Snap.unit))
; [eval] _isDefined(3497848)
(push) ; 9
(pop) ; 9
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_6 := perm(MustTerminate(_cthread_163))
; [eval] perm(MustTerminate(_cthread_163))
(declare-const _loop_original_must_terminate_6@260@01 $Perm)
(assert (= _loop_original_must_terminate_6@260@01 $Perm.No))
; [exec]
; _loop_termination_flag_6 := false
; [exec]
; _loop_check_before_6 := true
(declare-const _loop_measures_6@261@01 Seq<Measure$>)
(declare-const y_0@262@01 $Ref)
(declare-const _loop_check_before_6@263@01 Bool)
(set-option :timeout 0)
(push) ; 9
; Loop head block: Check well-definedness of invariant
(declare-const $t@264@01 $Snap)
(assert (= $t@264@01 ($Snap.combine ($Snap.first $t@264@01) ($Snap.second $t@264@01))))
(assert (= ($Snap.first $t@264@01) $Snap.unit))
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _residue_182)
(assert (=
  ($Snap.second $t@264@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@264@01))
    ($Snap.second ($Snap.second $t@264@01)))))
(assert (= ($Snap.first ($Snap.second $t@264@01)) $Snap.unit))
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _residue_182)
(assert (=
  ($Snap.second ($Snap.second $t@264@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@264@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@264@01))) $Snap.unit))
; [eval] _residue_181 <= _residue_182
(assert (<= _residue_181@232@01 _residue_182@237@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@264@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@264@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@264@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(y_0), int())
; [eval] typeof(y_0)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> y_0@262@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))
  $Snap.unit))
(pop) ; 9
(push) ; 9
; Loop head block: Establish invariant
; [eval] issubtype(typeof(y_0), int())
; [eval] typeof(y_0)
; [eval] int()
; [eval] _loop_check_before_6 ==> _loop_termination_flag_6 || (!int___lt__(int___unbox__(_checkDefined(y_0, 3170169)), 5) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))))
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 211 | True | live]
; [else-branch: 211 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 211 | True]
; [eval] _loop_termination_flag_6 || (!int___lt__(int___unbox__(_checkDefined(y_0, 3170169)), 5) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))))
(push) ; 12
; [then-branch: 212 | False | live]
; [else-branch: 212 | True | live]
(push) ; 13
; [then-branch: 212 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 212 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(y_0, 3170169)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_0, 3170169)), 5)
; [eval] int___unbox__(_checkDefined(y_0, 3170169))
; [eval] _checkDefined(y_0, 3170169)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_0@253@01 3170169))
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_0@253@01 3170169))
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_0@253@01 3170169)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_0@253@01 3170169)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)))
(pop) ; 14
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_0@253@01 3170169)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169))))
(push) ; 14
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5))
(pop) ; 14
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5))
(push) ; 14
; [then-branch: 213 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_0@253@01, 3170169)), 5)) | live]
; [else-branch: 213 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_0@253@01, 3170169)), 5) | live]
(push) ; 15
; [then-branch: 213 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_0@253@01, 3170169)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5)))
(pop) ; 15
(push) ; 15
; [else-branch: 213 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_0@253@01, 3170169)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5))
; [eval] perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_163)) == none
; [eval] perm(MustTerminate(_cthread_163))
(push) ; 16
; [then-branch: 214 | False | live]
; [else-branch: 214 | True | live]
(push) ; 17
; [then-branch: 214 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 214 | True]
; [eval] (forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false)
(push) ; 18
; [then-branch: 215 | False | live]
; [else-branch: 215 | True | live]
(push) ; 19
; [then-branch: 215 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 215 | True]
; [eval] (forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false)
(push) ; 20
; [then-branch: 216 | False | live]
; [else-branch: 216 | True | live]
(push) ; 21
; [then-branch: 216 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 216 | True]
; [eval] (forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false)
(push) ; 22
(push) ; 23
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 217 | True | live]
; [else-branch: 217 | False | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 217 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit y_0@253@01 3170169)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_0@253@01 3170169)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5)
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit y_0@253@01 3170169)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_0@253@01 3170169)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5)
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5)))))
(push) ; 10
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_check_before_6 ==> _loop_termination_flag_6 || (!int___lt__(int___unbox__(_checkDefined(y_0, 3170169)), 5) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 218 | True | live]
; [else-branch: 218 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 218 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_6 || (!int___lt__(int___unbox__(_checkDefined(y_0, 3170169)), 5) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 12
; [then-branch: 219 | False | live]
; [else-branch: 219 | True | live]
(push) ; 13
; [then-branch: 219 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 13
(set-option :timeout 0)
(push) ; 13
; [else-branch: 219 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(y_0, 3170169)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_0, 3170169)), 5)
; [eval] int___unbox__(_checkDefined(y_0, 3170169))
; [eval] _checkDefined(y_0, 3170169)
(set-option :timeout 0)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
; [then-branch: 220 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_0@253@01, 3170169)), 5)) | live]
; [else-branch: 220 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_0@253@01, 3170169)), 5) | live]
(push) ; 15
; [then-branch: 220 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_0@253@01, 3170169)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 15
(set-option :timeout 0)
(push) ; 15
; [else-branch: 220 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_0@253@01, 3170169)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_163)) == none
; [eval] perm(MustTerminate(_cthread_163))
(set-option :timeout 0)
(push) ; 16
; [then-branch: 221 | False | live]
; [else-branch: 221 | True | live]
(push) ; 17
; [then-branch: 221 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 17
(set-option :timeout 0)
(push) ; 17
; [else-branch: 221 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false)
(set-option :timeout 0)
(push) ; 18
; [then-branch: 222 | False | live]
; [else-branch: 222 | True | live]
(push) ; 19
; [then-branch: 222 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 19
(set-option :timeout 0)
(push) ; 19
; [else-branch: 222 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false)
(set-option :timeout 0)
(push) ; 20
; [then-branch: 223 | False | live]
; [else-branch: 223 | True | live]
(push) ; 21
; [then-branch: 223 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 21
(set-option :timeout 0)
(push) ; 21
; [else-branch: 223 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false)
(set-option :timeout 0)
(push) ; 22
(push) ; 23
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 224 | True | live]
; [else-branch: 224 | False | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 224 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 23
(pop) ; 22
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_check_before_6 ==> _loop_termination_flag_6 || (!int___lt__(int___unbox__(_checkDefined(y_0, 3170169)), 5) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 225 | True | live]
; [else-branch: 225 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 225 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_6 || (!int___lt__(int___unbox__(_checkDefined(y_0, 3170169)), 5) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 12
; [then-branch: 226 | False | live]
; [else-branch: 226 | True | live]
(push) ; 13
; [then-branch: 226 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 13
(set-option :timeout 0)
(push) ; 13
; [else-branch: 226 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(y_0, 3170169)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_0, 3170169)), 5)
; [eval] int___unbox__(_checkDefined(y_0, 3170169))
; [eval] _checkDefined(y_0, 3170169)
(set-option :timeout 0)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
; [then-branch: 227 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_0@253@01, 3170169)), 5)) | live]
; [else-branch: 227 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_0@253@01, 3170169)), 5) | live]
(push) ; 15
; [then-branch: 227 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_0@253@01, 3170169)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 15
(set-option :timeout 0)
(push) ; 15
; [else-branch: 227 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_0@253@01, 3170169)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_163)) == none
; [eval] perm(MustTerminate(_cthread_163))
(set-option :timeout 0)
(push) ; 16
; [then-branch: 228 | False | live]
; [else-branch: 228 | True | live]
(push) ; 17
; [then-branch: 228 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 17
(set-option :timeout 0)
(push) ; 17
; [else-branch: 228 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false)
(set-option :timeout 0)
(push) ; 18
; [then-branch: 229 | False | live]
; [else-branch: 229 | True | live]
(push) ; 19
; [then-branch: 229 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 19
(set-option :timeout 0)
(push) ; 19
; [else-branch: 229 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false)
(set-option :timeout 0)
(push) ; 20
; [then-branch: 230 | False | live]
; [else-branch: 230 | True | live]
(push) ; 21
; [then-branch: 230 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 21
(set-option :timeout 0)
(push) ; 21
; [else-branch: 230 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false)
(set-option :timeout 0)
(push) ; 22
(push) ; 23
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 231 | True | live]
; [else-branch: 231 | False | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 231 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 23
(pop) ; 22
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_check_before_6 ==> _loop_termination_flag_6 || (!int___lt__(int___unbox__(_checkDefined(y_0, 3170169)), 5) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 232 | True | live]
; [else-branch: 232 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 232 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_6 || (!int___lt__(int___unbox__(_checkDefined(y_0, 3170169)), 5) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 12
; [then-branch: 233 | False | live]
; [else-branch: 233 | True | live]
(push) ; 13
; [then-branch: 233 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 13
(set-option :timeout 0)
(push) ; 13
; [else-branch: 233 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(y_0, 3170169)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_0, 3170169)), 5)
; [eval] int___unbox__(_checkDefined(y_0, 3170169))
; [eval] _checkDefined(y_0, 3170169)
(set-option :timeout 0)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
; [then-branch: 234 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_0@253@01, 3170169)), 5)) | live]
; [else-branch: 234 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_0@253@01, 3170169)), 5) | live]
(push) ; 15
; [then-branch: 234 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_0@253@01, 3170169)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 15
(set-option :timeout 0)
(push) ; 15
; [else-branch: 234 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_0@253@01, 3170169)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_163)) == none
; [eval] perm(MustTerminate(_cthread_163))
(set-option :timeout 0)
(push) ; 16
; [then-branch: 235 | False | live]
; [else-branch: 235 | True | live]
(push) ; 17
; [then-branch: 235 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 17
(set-option :timeout 0)
(push) ; 17
; [else-branch: 235 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false)
(set-option :timeout 0)
(push) ; 18
; [then-branch: 236 | False | live]
; [else-branch: 236 | True | live]
(push) ; 19
; [then-branch: 236 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 19
(set-option :timeout 0)
(push) ; 19
; [else-branch: 236 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false)
(set-option :timeout 0)
(push) ; 20
; [then-branch: 237 | False | live]
; [else-branch: 237 | True | live]
(push) ; 21
; [then-branch: 237 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 21
(set-option :timeout 0)
(push) ; 21
; [else-branch: 237 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false)
(set-option :timeout 0)
(push) ; 22
(push) ; 23
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 238 | True | live]
; [else-branch: 238 | False | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 238 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 23
(pop) ; 22
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_0@253@01 3170169)) 5))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- A_nested2 ----------
(declare-const _cthread_164@265@01 $Ref)
(declare-const _caller_measures_164@266@01 Seq<Measure$>)
(declare-const _residue_164@267@01 $Perm)
(declare-const self_7@268@01 $Ref)
(declare-const _current_wait_level_164@269@01 $Perm)
(declare-const _cthread_164@270@01 $Ref)
(declare-const _caller_measures_164@271@01 Seq<Measure$>)
(declare-const _residue_164@272@01 $Perm)
(declare-const self_7@273@01 $Ref)
(declare-const _current_wait_level_164@274@01 $Perm)
(push) ; 1
(declare-const $t@275@01 $Snap)
(assert (= $t@275@01 ($Snap.combine ($Snap.first $t@275@01) ($Snap.second $t@275@01))))
(assert (= ($Snap.first $t@275@01) $Snap.unit))
; [eval] _cthread_164 != null
(assert (not (= _cthread_164@270@01 $Ref.null)))
(assert (=
  ($Snap.second $t@275@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@275@01))
    ($Snap.second ($Snap.second $t@275@01)))))
(assert (= ($Snap.first ($Snap.second $t@275@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_164), Thread_0())
; [eval] typeof(_cthread_164)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_164@270@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@275@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@275@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@275@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@275@01))) $Snap.unit))
; [eval] issubtype(typeof(self_7), A())
; [eval] typeof(self_7)
; [eval] A()
(assert (issubtype<Bool> (typeof<PyType> self_7@273@01) (as A<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@275@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))
  $Snap.unit))
; [eval] self_7 != null
(assert (not (= self_7@273@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01))))))
  $Snap.unit))
; [eval] self_7.A_x == null || issubtype(typeof(self_7.A_x), ObjectLock())
; [eval] self_7.A_x == null
(push) ; 2
; [then-branch: 239 | First:(Second:(Second:(Second:(Second:($t@275@01))))) == Null | live]
; [else-branch: 239 | First:(Second:(Second:(Second:(Second:($t@275@01))))) != Null | live]
(push) ; 3
; [then-branch: 239 | First:(Second:(Second:(Second:(Second:($t@275@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01))))))
  $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 239 | First:(Second:(Second:(Second:(Second:($t@275@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_7.A_x), ObjectLock())
; [eval] typeof(self_7.A_x)
; [eval] ObjectLock()
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@276@01 $Snap)
(assert (= $t@276@01 ($Snap.combine ($Snap.first $t@276@01) ($Snap.second $t@276@01))))
(assert (= ($Snap.first $t@276@01) $Snap.unit))
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseBounded] :: Level(_r_40) <= _current_wait_level_164)
(assert (=
  ($Snap.second $t@276@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@276@01))
    ($Snap.second ($Snap.second $t@276@01)))))
(assert (= ($Snap.first ($Snap.second $t@276@01)) $Snap.unit))
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: Level(_r_40) <= _current_wait_level_164)
(assert (=
  ($Snap.second ($Snap.second $t@276@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@276@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@276@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@276@01))) $Snap.unit))
; [eval] _residue_164 <= _current_wait_level_164
(assert (<= _residue_164@272@01 _current_wait_level_164@274@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@276@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@277@01 $Ref)
; [exec]
; var x_6: Ref
(declare-const x_6@278@01 $Ref)
; [exec]
; var y_1: Ref
(declare-const y_1@279@01 $Ref)
; [exec]
; var self_25: Ref
(declare-const self_25@280@01 $Ref)
; [exec]
; var _loop_measures_7: Seq[Measure$]
(declare-const _loop_measures_7@281@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_7: Bool
(declare-const _loop_check_before_7@282@01 Bool)
; [exec]
; var _loop_termination_flag_7: Bool
(declare-const _loop_termination_flag_7@283@01 Bool)
; [exec]
; var _loop_original_must_terminate_7: Perm
(declare-const _loop_original_must_terminate_7@284@01 $Perm)
; [exec]
; var _residue_183: Perm
(declare-const _residue_183@285@01 $Perm)
; [exec]
; var _loop_measures_8: Seq[Measure$]
(declare-const _loop_measures_8@286@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_8: Bool
(declare-const _loop_check_before_8@287@01 Bool)
; [exec]
; var _loop_termination_flag_8: Bool
(declare-const _loop_termination_flag_8@288@01 Bool)
; [exec]
; var _loop_original_must_terminate_8: Perm
(declare-const _loop_original_must_terminate_8@289@01 $Perm)
; [exec]
; var _residue_184: Perm
(declare-const _residue_184@290@01 $Perm)
; [exec]
; var _cwl_164: Perm
(declare-const _cwl_164@291@01 $Perm)
; [exec]
; var _method_measures_164: Seq[Measure$]
(declare-const _method_measures_164@292@01 Seq<Measure$>)
; [exec]
; _method_measures_164 := Seq(Measure$create(true, self_7.A_x, 2))
; [eval] Seq(Measure$create(true, self_7.A_x, 2))
; [eval] Measure$create(true, self_7.A_x, 2)
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01)))))) 2)))
  1))
(declare-const _method_measures_164@293@01 Seq<Measure$>)
(assert (=
  _method_measures_164@293@01
  (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01)))))) 2))))
; [exec]
; inhale typeof(self_7) == A()
(declare-const $t@294@01 $Snap)
(assert (= $t@294@01 $Snap.unit))
; [eval] typeof(self_7) == A()
; [eval] typeof(self_7)
; [eval] A()
(assert (= (typeof<PyType> self_7@273@01) (as A<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_25 := self_7
; [exec]
; x_6 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const x_6@295@01 $Ref)
(assert (= x_6@295@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(3563384)
(declare-const $t@296@01 $Snap)
(assert (= $t@296@01 $Snap.unit))
; [eval] _isDefined(3563384)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3563384))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3563384))
(assert (_isDefined $Snap.unit 3563384))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; y_1 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const y_1@297@01 $Ref)
(assert (= y_1@297@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(3235705)
(declare-const $t@298@01 $Snap)
(assert (= $t@298@01 $Snap.unit))
; [eval] _isDefined(3235705)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3235705))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3235705))
(assert (_isDefined $Snap.unit 3235705))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_7 := perm(MustTerminate(_cthread_164))
; [eval] perm(MustTerminate(_cthread_164))
(declare-const _loop_original_must_terminate_7@299@01 $Perm)
(assert (= _loop_original_must_terminate_7@299@01 $Perm.No))
; [exec]
; _loop_termination_flag_7 := false
; [exec]
; _loop_check_before_7 := true
(declare-const _loop_measures_7@300@01 Seq<Measure$>)
(declare-const x_6@301@01 $Ref)
(declare-const _loop_original_must_terminate_8@302@01 $Perm)
(declare-const _loop_termination_flag_8@303@01 Bool)
(declare-const _loop_check_before_8@304@01 Bool)
(declare-const _loop_measures_8@305@01 Seq<Measure$>)
(declare-const y_1@306@01 $Ref)
(declare-const _loop_check_before_7@307@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@308@01 $Snap)
(assert (= $t@308@01 ($Snap.combine ($Snap.first $t@308@01) ($Snap.second $t@308@01))))
(assert (= ($Snap.first $t@308@01) $Snap.unit))
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _residue_183)
(assert (=
  ($Snap.second $t@308@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@308@01))
    ($Snap.second ($Snap.second $t@308@01)))))
(assert (= ($Snap.first ($Snap.second $t@308@01)) $Snap.unit))
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _residue_183)
(assert (=
  ($Snap.second ($Snap.second $t@308@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@308@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@308@01))) $Snap.unit))
; [eval] _residue_164 <= _residue_183
(assert (<= _residue_164@272@01 _residue_183@285@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@308@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(x_6), int())
; [eval] typeof(x_6)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> x_6@301@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(y_1), int())
; [eval] typeof(y_1)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> y_1@306@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))
  $Snap.unit))
; [eval] self_25.A_x == null || issubtype(typeof(self_25.A_x), ObjectLock())
; [eval] self_25.A_x == null
(push) ; 4
; [then-branch: 240 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01))))))) == Null | live]
; [else-branch: 240 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01))))))) != Null | live]
(push) ; 5
; [then-branch: 240 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))
  $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 240 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_25.A_x), ObjectLock())
; [eval] typeof(self_25.A_x)
; [eval] ObjectLock()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_6, 3563384))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5)
; [eval] int___unbox__(_checkDefined(x_6, 3563384))
; [eval] _checkDefined(x_6, 3563384)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_6@301@01 3563384))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_6@301@01 3563384))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_6@301@01 3563384)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_6@301@01 3563384)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_6@301@01 3563384)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 241 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@301@01, 3563384)), 5) | live]
; [else-branch: 241 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@301@01, 3563384)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 241 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@301@01, 3563384)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_6, 3563384))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_6, 3563384)))
; [eval] int___unbox__(_checkDefined(x_6, 3563384))
; [eval] _checkDefined(x_6, 3563384)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384))))
(pop) ; 5
(push) ; 5
; [else-branch: 241 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@301@01, 3563384)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(x_6), int())
; [eval] typeof(x_6)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> x_6@295@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_6@295@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(y_1), int())
; [eval] typeof(y_1)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> y_1@297@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> y_1@297@01) (as int<PyType>  PyType)))
; [eval] self_25.A_x == null || issubtype(typeof(self_25.A_x), ObjectLock())
; [eval] self_25.A_x == null
(push) ; 4
; [then-branch: 242 | First:(Second:(Second:(Second:(Second:($t@275@01))))) == Null | live]
; [else-branch: 242 | First:(Second:(Second:(Second:(Second:($t@275@01))))) != Null | live]
(push) ; 5
; [then-branch: 242 | First:(Second:(Second:(Second:(Second:($t@275@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01))))))
  $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 242 | First:(Second:(Second:(Second:(Second:($t@275@01))))) != Null]
; [eval] issubtype(typeof(self_25.A_x), ObjectLock())
; [eval] typeof(self_25.A_x)
; [eval] ObjectLock()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_6, 3563384))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5)
; [eval] int___unbox__(_checkDefined(x_6, 3563384))
; [eval] _checkDefined(x_6, 3563384)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_6@295@01 3563384))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_6@295@01 3563384))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_6@295@01 3563384)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_6@295@01 3563384)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_6@295@01 3563384)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 243 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@295@01, 3563384)), 5) | live]
; [else-branch: 243 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@295@01, 3563384)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 243 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@295@01, 3563384)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_6, 3563384))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_6, 3563384)))
; [eval] int___unbox__(_checkDefined(x_6, 3563384))
; [eval] _checkDefined(x_6, 3563384)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384)) 5))
(push) ; 4
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384)))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384)))
    0)))
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 244 | True | live]
; [else-branch: 244 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 244 | True]
; [eval] perm(self_25.A_x.MustReleaseBounded) > none
; [eval] perm(self_25.A_x.MustReleaseBounded)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 245 | True | live]
; [else-branch: 245 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 245 | True]
; [eval] _loop_check_before_7 ==> _loop_termination_flag_7 || (!int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false)))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 246 | True | live]
; [else-branch: 246 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 246 | True]
; [eval] _loop_termination_flag_7 || (!int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false)))))
(push) ; 8
; [then-branch: 247 | False | live]
; [else-branch: 247 | True | live]
(push) ; 9
; [then-branch: 247 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 247 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5)
; [eval] int___unbox__(_checkDefined(x_6, 3563384))
; [eval] _checkDefined(x_6, 3563384)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 248 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@295@01, 3563384)), 5)) | live]
; [else-branch: 248 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@295@01, 3563384)), 5) | live]
(push) ; 11
; [then-branch: 248 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@295@01, 3563384)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384)) 5)))
(pop) ; 11
(push) ; 11
; [else-branch: 248 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@295@01, 3563384)), 5)]
; [eval] perm(MustTerminate(_cthread_164)) == none && ((forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_164)) == none
; [eval] perm(MustTerminate(_cthread_164))
(push) ; 12
; [then-branch: 249 | False | live]
; [else-branch: 249 | True | live]
(push) ; 13
; [then-branch: 249 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 249 | True]
; [eval] (forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false)
(push) ; 14
; [then-branch: 250 | False | live]
; [else-branch: 250 | True | live]
(push) ; 15
; [then-branch: 250 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 250 | True]
; [eval] (forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false)
(push) ; 16
; [then-branch: 251 | False | live]
; [else-branch: 251 | True | live]
(push) ; 17
; [then-branch: 251 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 251 | True]
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false)
(push) ; 18
; [then-branch: 252 | False | live]
; [else-branch: 252 | True | live]
(push) ; 19
; [then-branch: 252 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 252 | True]
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384)) 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384)) 5))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@295@01 3563384)) 5))))
; [eval] !_loop_check_before_7 ==> (forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_7
(push) ; 6
; [then-branch: 253 | False | dead]
; [else-branch: 253 | True | live]
(push) ; 7
; [else-branch: 253 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 6
(assert (= $t@308@01 ($Snap.combine ($Snap.first $t@308@01) ($Snap.second $t@308@01))))
(assert (= ($Snap.first $t@308@01) $Snap.unit))
(assert (=
  ($Snap.second $t@308@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@308@01))
    ($Snap.second ($Snap.second $t@308@01)))))
(assert (= ($Snap.first ($Snap.second $t@308@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@308@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@308@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@308@01))) $Snap.unit))
(assert (<= _residue_164@272@01 _residue_183@285@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@308@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> x_6@301@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> y_1@306@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))
  $Snap.unit))
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit x_6@301@01 3563384))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_6@301@01 3563384)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 7
; [eval] int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5)
; [eval] int___unbox__(_checkDefined(x_6, 3563384))
; [eval] _checkDefined(x_6, 3563384)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [eval] !int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5)
; [eval] int___unbox__(_checkDefined(x_6, 3563384))
; [eval] _checkDefined(x_6, 3563384)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5)
; [eval] int___unbox__(_checkDefined(x_6, 3563384))
; [eval] _checkDefined(x_6, 3563384)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 254 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@301@01, 3563384)), 5) | live]
; [else-branch: 254 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@301@01, 3563384)), 5)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 254 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@301@01, 3563384)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5))
; [exec]
; _loop_measures_7 := Seq(Measure$create(true, self_25.A_x, int___sub__(10, int___unbox__(_checkDefined(x_6,
;   3563384)))))
; [eval] Seq(Measure$create(true, self_25.A_x, int___sub__(10, int___unbox__(_checkDefined(x_6, 3563384)))))
; [eval] Measure$create(true, self_25.A_x, int___sub__(10, int___unbox__(_checkDefined(x_6, 3563384))))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_6, 3563384)))
; [eval] int___unbox__(_checkDefined(x_6, 3563384))
; [eval] _checkDefined(x_6, 3563384)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384))))
(pop) ; 8
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384))))))
  1))
(declare-const _loop_measures_7@309@01 Seq<Measure$>)
(assert (=
  _loop_measures_7@309@01
  (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)))))))
; [exec]
; x_6 := __prim__int___box__(int___add__(int___unbox__(x_6), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(x_6), 1))
; [eval] int___add__(int___unbox__(x_6), 1)
; [eval] int___unbox__(x_6)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit x_6@301@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit x_6@301@01))
(push) ; 8
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_6@301@01) 1))
(pop) ; 8
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_6@301@01) 1))
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_6@301@01) 1)))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_6@301@01) 1)))
(declare-const x_6@310@01 $Ref)
(assert (=
  x_6@310@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_6@301@01) 1))))
; [exec]
; inhale _isDefined(3563384)
(declare-const $t@311@01 $Snap)
(assert (= $t@311@01 $Snap.unit))
; [eval] _isDefined(3563384)
(push) ; 8
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_8 := perm(MustTerminate(_cthread_164))
; [eval] perm(MustTerminate(_cthread_164))
(declare-const _loop_original_must_terminate_8@312@01 $Perm)
(assert (= _loop_original_must_terminate_8@312@01 $Perm.No))
; [exec]
; _loop_termination_flag_8 := true
; [exec]
; _loop_check_before_8 := true
(declare-const _loop_measures_8@313@01 Seq<Measure$>)
(declare-const y_1@314@01 $Ref)
(declare-const _loop_check_before_8@315@01 Bool)
(set-option :timeout 0)
(push) ; 8
; Loop head block: Check well-definedness of invariant
(declare-const $t@316@01 $Snap)
(assert (= $t@316@01 ($Snap.combine ($Snap.first $t@316@01) ($Snap.second $t@316@01))))
(assert (= ($Snap.first $t@316@01) $Snap.unit))
; [eval] (forperm _r_36: Ref [_r_36.MustReleaseBounded] :: Level(_r_36) <= _residue_184)
(assert (=
  ($Snap.second $t@316@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@316@01))
    ($Snap.second ($Snap.second $t@316@01)))))
(assert (= ($Snap.first ($Snap.second $t@316@01)) $Snap.unit))
; [eval] (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: Level(_r_36) <= _residue_184)
(assert (=
  ($Snap.second ($Snap.second $t@316@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@316@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@316@01))) $Snap.unit))
; [eval] _residue_183 <= _residue_184
(assert (<= _residue_183@285@01 _residue_184@290@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@316@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(y_1), int())
; [eval] typeof(y_1)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> y_1@314@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5) ==> int___sub__(20, int___unbox__(_checkDefined(y_1, 3235705))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5)
; [eval] int___unbox__(_checkDefined(y_1, 3235705))
; [eval] _checkDefined(y_1, 3235705)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_1@314@01 3235705))
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_1@314@01 3235705))
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_1@314@01 3235705)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_1@314@01 3235705)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_1@314@01 3235705)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705))))
(push) ; 9
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5))
(pop) ; 9
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 255 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@314@01, 3235705)), 5) | live]
; [else-branch: 255 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@314@01, 3235705)), 5)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 255 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@314@01, 3235705)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5))
; [eval] int___sub__(20, int___unbox__(_checkDefined(y_1, 3235705))) > 0
; [eval] int___sub__(20, int___unbox__(_checkDefined(y_1, 3235705)))
; [eval] int___unbox__(_checkDefined(y_1, 3235705))
; [eval] _checkDefined(y_1, 3235705)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705))))
(pop) ; 11
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705))))
(pop) ; 10
(push) ; 10
; [else-branch: 255 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@314@01, 3235705)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5)
    (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5)
  (>
    (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))
  $Snap.unit))
(pop) ; 8
(push) ; 8
; Loop head block: Establish invariant
; [eval] issubtype(typeof(y_1), int())
; [eval] typeof(y_1)
; [eval] int()
; [eval] int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5) ==> int___sub__(20, int___unbox__(_checkDefined(y_1, 3235705))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5)
; [eval] int___unbox__(_checkDefined(y_1, 3235705))
; [eval] _checkDefined(y_1, 3235705)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_1@306@01 3235705))
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_1@306@01 3235705))
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_1@306@01 3235705)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_1@306@01 3235705)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_1@306@01 3235705)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_1@306@01 3235705)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_1@306@01 3235705))))
(push) ; 9
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@306@01 3235705)) 5))
(pop) ; 9
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@306@01 3235705)) 5))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@306@01 3235705)) 5))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@306@01 3235705)) 5)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 256 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@306@01, 3235705)), 5) | live]
; [else-branch: 256 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@306@01, 3235705)), 5)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 256 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@306@01, 3235705)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@306@01 3235705)) 5))
; [eval] int___sub__(20, int___unbox__(_checkDefined(y_1, 3235705))) > 0
; [eval] int___sub__(20, int___unbox__(_checkDefined(y_1, 3235705)))
; [eval] int___unbox__(_checkDefined(y_1, 3235705))
; [eval] _checkDefined(y_1, 3235705)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@306@01 3235705))))
(pop) ; 11
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@306@01 3235705))))
(pop) ; 10
(push) ; 10
; [else-branch: 256 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@306@01, 3235705)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@306@01 3235705)) 5)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@306@01 3235705)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@306@01 3235705)) 5)
    (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@306@01 3235705))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@306@01 3235705)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@306@01 3235705)) 5)))
(push) ; 9
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@306@01 3235705)) 5)
  (>
    (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@306@01 3235705)))
    0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@306@01 3235705)) 5)
  (>
    (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@306@01 3235705)))
    0)))
; [eval] _loop_check_before_8 ==> _loop_termination_flag_8 || (!int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 257 | True | live]
; [else-branch: 257 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 257 | True]
; [eval] _loop_termination_flag_8 || (!int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] !_loop_check_before_8 ==> (forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_8
(push) ; 9
; [then-branch: 258 | False | dead]
; [else-branch: 258 | True | live]
(push) ; 10
; [else-branch: 258 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 9
(assert (= $t@316@01 ($Snap.combine ($Snap.first $t@316@01) ($Snap.second $t@316@01))))
(assert (= ($Snap.first $t@316@01) $Snap.unit))
(assert (=
  ($Snap.second $t@316@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@316@01))
    ($Snap.second ($Snap.second $t@316@01)))))
(assert (= ($Snap.first ($Snap.second $t@316@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@316@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@316@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@316@01))) $Snap.unit))
(assert (<= _residue_183@285@01 _residue_184@290@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@316@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> y_1@314@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit y_1@314@01 3235705))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_1@314@01 3235705)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5)
    (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5)
  (>
    (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 10
; [eval] int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5)
; [eval] int___unbox__(_checkDefined(y_1, 3235705))
; [eval] _checkDefined(y_1, 3235705)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
(push) ; 10
; [eval] !int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5)
; [eval] int___unbox__(_checkDefined(y_1, 3235705))
; [eval] _checkDefined(y_1, 3235705)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5)
; [eval] int___unbox__(_checkDefined(y_1, 3235705))
; [eval] _checkDefined(y_1, 3235705)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 259 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@314@01, 3235705)), 5) | live]
; [else-branch: 259 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@314@01, 3235705)), 5)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 259 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@314@01, 3235705)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5))
; [exec]
; _loop_measures_8 := Seq(Measure$create(true, _cthread_164, int___sub__(20, int___unbox__(_checkDefined(y_1,
;   3235705)))))
; [eval] Seq(Measure$create(true, _cthread_164, int___sub__(20, int___unbox__(_checkDefined(y_1, 3235705)))))
; [eval] Measure$create(true, _cthread_164, int___sub__(20, int___unbox__(_checkDefined(y_1, 3235705))))
; [eval] int___sub__(20, int___unbox__(_checkDefined(y_1, 3235705)))
; [eval] int___unbox__(_checkDefined(y_1, 3235705))
; [eval] _checkDefined(y_1, 3235705)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705))))
(pop) ; 11
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_164@270@01 (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705))))))
  1))
(declare-const _loop_measures_8@317@01 Seq<Measure$>)
(assert (=
  _loop_measures_8@317@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_164@270@01 (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)))))))
; [exec]
; y_1 := __prim__int___box__(int___add__(int___unbox__(y_1), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(y_1), 1))
; [eval] int___add__(int___unbox__(y_1), 1)
; [eval] int___unbox__(y_1)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit y_1@314@01))
(pop) ; 11
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit y_1@314@01))
(push) ; 11
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit y_1@314@01) 1))
(pop) ; 11
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit y_1@314@01) 1))
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit y_1@314@01) 1)))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit y_1@314@01) 1)))
(declare-const y_1@318@01 $Ref)
(assert (=
  y_1@318@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit y_1@314@01) 1))))
; [exec]
; inhale _isDefined(3235705)
(declare-const $t@319@01 $Snap)
(assert (= $t@319@01 $Snap.unit))
; [eval] _isDefined(3235705)
(push) ; 11
(pop) ; 11
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop_end_8
; [exec]
; _loop_check_before_8 := false
; [exec]
; assert _loop_termination_flag_8 ==>
;   !int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5) ||
;   Measure$check(_loop_measures_8, _cthread_164, int___sub__(20, int___unbox__(_checkDefined(y_1,
;   3235705))))
; [eval] _loop_termination_flag_8 ==> !int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5) || Measure$check(_loop_measures_8, _cthread_164, int___sub__(20, int___unbox__(_checkDefined(y_1, 3235705))))
(set-option :timeout 0)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 260 | True | live]
; [else-branch: 260 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 260 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5) || Measure$check(_loop_measures_8, _cthread_164, int___sub__(20, int___unbox__(_checkDefined(y_1, 3235705))))
; [eval] !int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5)
; [eval] int___unbox__(_checkDefined(y_1, 3235705))
; [eval] _checkDefined(y_1, 3235705)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_1@318@01 3235705))
(pop) ; 13
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_1@318@01 3235705))
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_1@318@01 3235705)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_1@318@01 3235705)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_1@318@01 3235705)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705))))
(push) ; 13
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5))
(pop) ; 13
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5))
(push) ; 13
; [then-branch: 261 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@318@01, 3235705)), 5)) | live]
; [else-branch: 261 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@318@01, 3235705)), 5) | live]
(push) ; 14
; [then-branch: 261 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@318@01, 3235705)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5)))
(pop) ; 14
(push) ; 14
; [else-branch: 261 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@318@01, 3235705)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5))
; [eval] Measure$check(_loop_measures_8, _cthread_164, int___sub__(20, int___unbox__(_checkDefined(y_1, 3235705))))
; [eval] int___sub__(20, int___unbox__(_checkDefined(y_1, 3235705)))
; [eval] int___unbox__(_checkDefined(y_1, 3235705))
; [eval] _checkDefined(y_1, 3235705)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 15
; Joined path conditions
(push) ; 15
(assert (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705))))
(pop) ; 15
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705))))
(push) ; 15
(assert (Measure$check%precondition $Snap.unit _loop_measures_8@317@01 _cthread_164@270@01 (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)))))
(pop) ; 15
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_8@317@01 _cthread_164@270@01 (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5)
    (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)))
    (Measure$check%precondition $Snap.unit _loop_measures_8@317@01 _cthread_164@270@01 (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)))))))
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit y_1@318@01 3235705)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_1@318@01 3235705)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5)
  (=>
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5)
    (and
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5)
      (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)))
      (Measure$check%precondition $Snap.unit _loop_measures_8@317@01 _cthread_164@270@01 (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705))))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5)))))
(push) ; 11
(assert (not (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5))
  (Measure$check $Snap.unit _loop_measures_8@317@01 _cthread_164@270@01 (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5))
  (Measure$check $Snap.unit _loop_measures_8@317@01 _cthread_164@270@01 (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705))))))
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(y_1), int())
; [eval] typeof(y_1)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> y_1@318@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> y_1@318@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5) ==> int___sub__(20, int___unbox__(_checkDefined(y_1, 3235705))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5)
; [eval] int___unbox__(_checkDefined(y_1, 3235705))
; [eval] _checkDefined(y_1, 3235705)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 262 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@318@01, 3235705)), 5) | live]
; [else-branch: 262 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@318@01, 3235705)), 5)) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 262 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@318@01, 3235705)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5))
; [eval] int___sub__(20, int___unbox__(_checkDefined(y_1, 3235705))) > 0
; [eval] int___sub__(20, int___unbox__(_checkDefined(y_1, 3235705)))
; [eval] int___unbox__(_checkDefined(y_1, 3235705))
; [eval] _checkDefined(y_1, 3235705)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705))))
(pop) ; 13
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705))))
(pop) ; 12
(push) ; 12
; [else-branch: 262 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@318@01, 3235705)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5)
    (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5)))
(push) ; 11
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5)
  (>
    (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)) 5)
  (>
    (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@318@01 3235705)))
    0)))
; [eval] _loop_check_before_8 ==> _loop_termination_flag_8 || (!int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)))))
(push) ; 11
; [then-branch: 263 | False | dead]
; [else-branch: 263 | True | live]
(push) ; 12
; [else-branch: 263 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] !_loop_check_before_8 ==> (forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_8
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 264 | True | live]
; [else-branch: 264 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 264 | True]
; [eval] (forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false)
(push) ; 13
; [then-branch: 265 | False | live]
; [else-branch: 265 | True | live]
(push) ; 14
; [then-branch: 265 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 265 | True]
; [eval] (forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false)
(push) ; 15
; [then-branch: 266 | False | live]
; [else-branch: 266 | True | live]
(push) ; 16
; [then-branch: 266 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 266 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false)
(push) ; 17
; [then-branch: 267 | False | live]
; [else-branch: 267 | True | live]
(push) ; 18
; [then-branch: 267 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 267 | True]
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 259 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@314@01, 3235705)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5)))
(pop) ; 10
; [eval] !int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5)
; [eval] int___unbox__(_checkDefined(y_1, 3235705))
; [eval] _checkDefined(y_1, 3235705)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 268 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@314@01, 3235705)), 5)) | live]
; [else-branch: 268 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@314@01, 3235705)), 5) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 268 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@314@01, 3235705)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5)))
; [exec]
; exhale perm(MustTerminate(_cthread_164)) > none ==>
;   acc(MustTerminate(_cthread_164), perm(MustTerminate(_cthread_164)) -
;   _loop_original_must_terminate_8)
; [eval] perm(MustTerminate(_cthread_164)) > none
; [eval] perm(MustTerminate(_cthread_164))
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 269 | True | live]
; [else-branch: 269 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 269 | True]
; [eval] perm(MustTerminate(_cthread_164)) - _loop_original_must_terminate_8
; [eval] perm(MustTerminate(_cthread_164))
(push) ; 12
(assert (not (or
  (= (- $Perm.Write _loop_original_must_terminate_8@312@01) $Perm.No)
  (< $Perm.No (- $Perm.Write _loop_original_must_terminate_8@312@01)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (-
    $Perm.Write
    ($Perm.min
      $Perm.Write
      (- $Perm.Write _loop_original_must_terminate_8@312@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (or
  (=
    (-
      (- $Perm.Write _loop_original_must_terminate_8@312@01)
      ($Perm.min
        $Perm.Write
        (- $Perm.Write _loop_original_must_terminate_8@312@01)))
    $Perm.No)
  (<
    (-
      (- $Perm.Write _loop_original_must_terminate_8@312@01)
      ($Perm.min
        $Perm.Write
        (- $Perm.Write _loop_original_must_terminate_8@312@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [exec]
; label post_loop_8
; [exec]
; label loop_end_7
; [exec]
; _loop_check_before_7 := false
; [exec]
; assert _loop_termination_flag_7 ==>
;   !int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5)
; [eval] _loop_termination_flag_7 ==> !int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5)
(push) ; 12
; [then-branch: 270 | False | dead]
; [else-branch: 270 | True | live]
(push) ; 13
; [else-branch: 270 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(x_6), int())
; [eval] typeof(x_6)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> x_6@310@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_6@310@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(y_1), int())
; [eval] typeof(y_1)
; [eval] int()
; [eval] self_25.A_x == null || issubtype(typeof(self_25.A_x), ObjectLock())
; [eval] self_25.A_x == null
(push) ; 12
; [then-branch: 271 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01))))))) == Null | live]
; [else-branch: 271 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01))))))) != Null | live]
(push) ; 13
; [then-branch: 271 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))
  $Ref.null))
(pop) ; 13
(push) ; 13
; [else-branch: 271 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01))))))) != Null]
; [eval] issubtype(typeof(self_25.A_x), ObjectLock())
; [eval] typeof(self_25.A_x)
; [eval] ObjectLock()
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_6, 3563384))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5)
; [eval] int___unbox__(_checkDefined(x_6, 3563384))
; [eval] _checkDefined(x_6, 3563384)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_6@310@01 3563384))
(pop) ; 12
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_6@310@01 3563384))
(push) ; 12
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_6@310@01 3563384)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_6@310@01 3563384)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384)))
(pop) ; 12
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_6@310@01 3563384)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384))))
(push) ; 12
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384)) 5))
(pop) ; 12
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384)) 5))
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384)) 5))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384)) 5)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 272 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@310@01, 3563384)), 5) | live]
; [else-branch: 272 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@310@01, 3563384)), 5)) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 272 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@310@01, 3563384)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_6, 3563384))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_6, 3563384)))
; [eval] int___unbox__(_checkDefined(x_6, 3563384))
; [eval] _checkDefined(x_6, 3563384)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384))))
(pop) ; 14
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384))))
(pop) ; 13
(push) ; 13
; [else-branch: 272 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@310@01, 3563384)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384)) 5)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384)) 5)))
(push) ; 12
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384)))
    0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384)))
    0)))
; [then-branch: 273 | False | dead]
; [else-branch: 273 | True | live]
(push) ; 12
; [else-branch: 273 | True]
; [eval] perm(self_25.A_x.MustReleaseBounded) > none && Measure$check(_loop_measures_7, self_25.A_x, int___sub__(10, int___unbox__(_checkDefined(x_6, 3563384))))
; [eval] perm(self_25.A_x.MustReleaseBounded) > none
; [eval] perm(self_25.A_x.MustReleaseBounded)
(push) ; 13
; [then-branch: 274 | False | live]
; [else-branch: 274 | True | live]
(push) ; 14
; [then-branch: 274 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 274 | True]
; [eval] Measure$check(_loop_measures_7, self_25.A_x, int___sub__(10, int___unbox__(_checkDefined(x_6, 3563384))))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_6, 3563384)))
; [eval] int___unbox__(_checkDefined(x_6, 3563384))
; [eval] _checkDefined(x_6, 3563384)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 15
; Joined path conditions
(push) ; 15
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384))))
(pop) ; 15
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384))))
(push) ; 15
(assert (Measure$check%precondition $Snap.unit _loop_measures_7@309@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384)))))
(pop) ; 15
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_7@309@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384)))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (and
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384)))
  (Measure$check%precondition $Snap.unit _loop_measures_7@309@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384))))))
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (Measure$check $Snap.unit _loop_measures_7@309@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (Measure$check $Snap.unit _loop_measures_7@309@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 275 | Measure$check(_, _loop_measures_7@309@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01))))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, x_6@310@01, 3563384)))) | live]
; [else-branch: 275 | !(Measure$check(_, _loop_measures_7@309@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01))))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, x_6@310@01, 3563384))))) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 275 | Measure$check(_, _loop_measures_7@309@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01))))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, x_6@310@01, 3563384))))]
(assert (Measure$check $Snap.unit _loop_measures_7@309@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@310@01 3563384)))))
; [eval] _loop_check_before_7 ==> _loop_termination_flag_7 || (!int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false)))))
(push) ; 14
; [then-branch: 276 | False | dead]
; [else-branch: 276 | True | live]
(push) ; 15
; [else-branch: 276 | True]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] !_loop_check_before_7 ==> (forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_7
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 277 | True | live]
; [else-branch: 277 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 277 | True]
; [eval] (forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false)
(push) ; 16
; [then-branch: 278 | False | live]
; [else-branch: 278 | True | live]
(push) ; 17
; [then-branch: 278 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 278 | True]
; [eval] (forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false)
(push) ; 18
; [then-branch: 279 | False | live]
; [else-branch: 279 | True | live]
(push) ; 19
; [then-branch: 279 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 279 | True]
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false)
(push) ; 20
; [then-branch: 280 | False | live]
; [else-branch: 280 | True | live]
(push) ; 21
; [then-branch: 280 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 280 | True]
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false)
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 268 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_1@314@01, 3235705)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_1@314@01 3235705)) 5))
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 254 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@301@01, 3563384)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5)))
(pop) ; 7
; [eval] !int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5)
; [eval] int___unbox__(_checkDefined(x_6, 3563384))
; [eval] _checkDefined(x_6, 3563384)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 281 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@301@01, 3563384)), 5)) | live]
; [else-branch: 281 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@301@01, 3563384)), 5) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 281 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@301@01, 3563384)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5)))
; [exec]
; exhale perm(MustTerminate(_cthread_164)) > none ==>
;   acc(MustTerminate(_cthread_164), perm(MustTerminate(_cthread_164)) -
;   _loop_original_must_terminate_7)
; [eval] perm(MustTerminate(_cthread_164)) > none
; [eval] perm(MustTerminate(_cthread_164))
; [then-branch: 282 | False | dead]
; [else-branch: 282 | True | live]
(push) ; 8
; [else-branch: 282 | True]
; [exec]
; label post_loop_7
; [exec]
; fold acc(Lock_invariant(self_25.A_x), write)
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0)))
; [eval] typeof(self_17)
; [eval] Lock(Lock_arg(typeof(self_17), 0))
; [eval] Lock_arg(typeof(self_17), 0)
; [eval] typeof(self_17)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))) 0))))
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0))) ==> true
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0)))
; [eval] typeof(self_17)
; [eval] Lock(Lock_arg(typeof(self_17), 0))
; [eval] Lock_arg(typeof(self_17), 0)
; [eval] typeof(self_17)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))) 0))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 283 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01)))))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01)))))))), 0))) | live]
; [else-branch: 283 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01)))))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01)))))))), 0)))) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 283 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01)))))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01)))))))), 0)))]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] issubtype(typeof(self_17), ObjectLock()) ==> true
; [eval] issubtype(typeof(self_17), ObjectLock())
; [eval] typeof(self_17)
; [eval] ObjectLock()
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))) (as ObjectLock<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))) (as ObjectLock<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 284 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01)))))))), ObjectLock[PyType]) | live]
; [else-branch: 284 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01)))))))), ObjectLock[PyType])) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 284 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01)))))))), ObjectLock[PyType])]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))) (as ObjectLock<PyType>  PyType)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))) (as ObjectLock<PyType>  PyType)))
(assert (Lock_invariant%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))))
; [exec]
; _cwl_164 := Lock_release(_cthread_164, _method_measures_164, _residue_164, self_25.A_x)
; [eval] _cthread_173 != null
; [eval] issubtype(typeof(_cthread_173), Thread_0())
; [eval] typeof(_cthread_173)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_16), Lock(Lock_arg(typeof(self_16), 0)))
; [eval] typeof(self_16)
; [eval] Lock(Lock_arg(typeof(self_16), 0))
; [eval] Lock_arg(typeof(self_16), 0)
; [eval] typeof(self_16)
; [eval] issubtype(Lock_arg(typeof(self_16), 0), object())
; [eval] Lock_arg(typeof(self_16), 0)
; [eval] typeof(self_16)
; [eval] object()
(push) ; 9
(assert (not (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))) 0) (as object<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01))))))))) 0) (as object<PyType>  PyType)))
; [eval] self_16 != null
; [eval] perm(self_16.MustReleaseBounded) > none && Measure$check(_caller_measures_173, self_16, 1)
; [eval] perm(self_16.MustReleaseBounded) > none
; [eval] perm(self_16.MustReleaseBounded)
(push) ; 9
; [then-branch: 285 | False | live]
; [else-branch: 285 | True | live]
(push) ; 10
; [then-branch: 285 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 285 | True]
; [eval] Measure$check(_caller_measures_173, self_16, 1)
(push) ; 11
(assert (Measure$check%precondition $Snap.unit _method_measures_164@293@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))) 1))
(pop) ; 11
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _method_measures_164@293@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))) 1))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _method_measures_164@293@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))) 1))
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (Measure$check $Snap.unit _method_measures_164@293@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))) 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (Measure$check $Snap.unit _method_measures_164@293@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))) 1)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 286 | Measure$check(_, _method_measures_164@293@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01))))))), 1) | live]
; [else-branch: 286 | !(Measure$check(_, _method_measures_164@293@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01))))))), 1)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 286 | Measure$check(_, _method_measures_164@293@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@01))))))), 1)]
(assert (Measure$check $Snap.unit _method_measures_164@293@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@01)))))))) 1))
; [eval] Measure$check(_caller_measures_173, _cthread_173, 1) || perm(MustTerminate(_cthread_173)) == none && ((forperm _r_90: Ref [MustInvokeBounded(_r_90)] :: false) && ((forperm _r_90: Ref [MustInvokeUnbounded(_r_90)] :: false) && ((forperm _r_90: Ref [_r_90.MustReleaseBounded] :: false) && (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: false))))
; [eval] Measure$check(_caller_measures_173, _cthread_173, 1)
(push) ; 10
(assert (Measure$check%precondition $Snap.unit _method_measures_164@293@01 _cthread_164@270@01 1))
(pop) ; 10
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _method_measures_164@293@01 _cthread_164@270@01 1))
(push) ; 10
; [then-branch: 287 | Measure$check(_, _method_measures_164@293@01, _cthread_164@270@01, 1) | live]
; [else-branch: 287 | !(Measure$check(_, _method_measures_164@293@01, _cthread_164@270@01, 1)) | live]
(push) ; 11
; [then-branch: 287 | Measure$check(_, _method_measures_164@293@01, _cthread_164@270@01, 1)]
(assert (Measure$check $Snap.unit _method_measures_164@293@01 _cthread_164@270@01 1))
(pop) ; 11
(push) ; 11
; [else-branch: 287 | !(Measure$check(_, _method_measures_164@293@01, _cthread_164@270@01, 1))]
(assert (not
  (Measure$check $Snap.unit _method_measures_164@293@01 _cthread_164@270@01 1)))
; [eval] perm(MustTerminate(_cthread_173)) == none && ((forperm _r_90: Ref [MustInvokeBounded(_r_90)] :: false) && ((forperm _r_90: Ref [MustInvokeUnbounded(_r_90)] :: false) && ((forperm _r_90: Ref [_r_90.MustReleaseBounded] :: false) && (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_173)) == none
; [eval] perm(MustTerminate(_cthread_173))
(push) ; 12
; [then-branch: 288 | False | live]
; [else-branch: 288 | True | live]
(push) ; 13
; [then-branch: 288 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 288 | True]
; [eval] (forperm _r_90: Ref [MustInvokeBounded(_r_90)] :: false)
(push) ; 14
; [then-branch: 289 | False | live]
; [else-branch: 289 | True | live]
(push) ; 15
; [then-branch: 289 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 289 | True]
; [eval] (forperm _r_90: Ref [MustInvokeUnbounded(_r_90)] :: false)
(push) ; 16
; [then-branch: 290 | False | live]
; [else-branch: 290 | True | live]
(push) ; 17
; [then-branch: 290 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 290 | True]
; [eval] (forperm _r_90: Ref [_r_90.MustReleaseBounded] :: false)
(push) ; 18
; [then-branch: 291 | False | live]
; [else-branch: 291 | True | live]
(push) ; 19
; [then-branch: 291 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 291 | True]
; [eval] (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: false)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Measure$check $Snap.unit _method_measures_164@293@01 _cthread_164@270@01 1))
  (Measure$check $Snap.unit _method_measures_164@293@01 _cthread_164@270@01 1)))
(declare-const _current_wait_level_173@320@01 $Perm)
(declare-const $t@321@01 $Snap)
(assert (= $t@321@01 ($Snap.combine ($Snap.first $t@321@01) ($Snap.second $t@321@01))))
(assert (= ($Snap.first $t@321@01) $Snap.unit))
; [eval] (forperm _r_89: Ref [_r_89.MustReleaseBounded] :: Level(_r_89) <= _current_wait_level_173)
(assert (=
  ($Snap.second $t@321@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@321@01))
    ($Snap.second ($Snap.second $t@321@01)))))
(assert (= ($Snap.first ($Snap.second $t@321@01)) $Snap.unit))
; [eval] (forperm _r_89: Ref [_r_89.MustReleaseUnbounded] :: Level(_r_89) <= _current_wait_level_173)
(assert (= ($Snap.second ($Snap.second $t@321@01)) $Snap.unit))
; [eval] _residue_173 <= _current_wait_level_173
(assert (<= _residue_164@272@01 _current_wait_level_173@320@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label __end
; [eval] (forperm _r_41: Ref [MustInvokeBounded(_r_41)] :: false)
; [eval] (forperm _r_41: Ref [MustInvokeUnbounded(_r_41)] :: false)
; [eval] (forperm _r_41: Ref [_r_41.MustReleaseBounded] :: false)
; [eval] (forperm _r_41: Ref [_r_41.MustReleaseUnbounded] :: false)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 281 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_6@301@01, 3563384)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_6@301@01 3563384)) 5))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- A_nested2_after_inner ----------
(declare-const _cthread_165@322@01 $Ref)
(declare-const _caller_measures_165@323@01 Seq<Measure$>)
(declare-const _residue_165@324@01 $Perm)
(declare-const self_8@325@01 $Ref)
(declare-const _current_wait_level_165@326@01 $Perm)
(declare-const _cthread_165@327@01 $Ref)
(declare-const _caller_measures_165@328@01 Seq<Measure$>)
(declare-const _residue_165@329@01 $Perm)
(declare-const self_8@330@01 $Ref)
(declare-const _current_wait_level_165@331@01 $Perm)
(push) ; 1
(declare-const $t@332@01 $Snap)
(assert (= $t@332@01 ($Snap.combine ($Snap.first $t@332@01) ($Snap.second $t@332@01))))
(assert (= ($Snap.first $t@332@01) $Snap.unit))
; [eval] _cthread_165 != null
(assert (not (= _cthread_165@327@01 $Ref.null)))
(assert (=
  ($Snap.second $t@332@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@332@01))
    ($Snap.second ($Snap.second $t@332@01)))))
(assert (= ($Snap.first ($Snap.second $t@332@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_165), Thread_0())
; [eval] typeof(_cthread_165)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_165@327@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@332@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@332@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@332@01))) $Snap.unit))
; [eval] issubtype(typeof(self_8), A())
; [eval] typeof(self_8)
; [eval] A()
(assert (issubtype<Bool> (typeof<PyType> self_8@330@01) (as A<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@332@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01))))
  $Snap.unit))
; [eval] self_8 != null
(assert (not (= self_8@330@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
  $Snap.unit))
; [eval] self_8.A_x == null || issubtype(typeof(self_8.A_x), ObjectLock())
; [eval] self_8.A_x == null
(push) ; 2
; [then-branch: 292 | First:(Second:(Second:(Second:(Second:($t@332@01))))) == Null | live]
; [else-branch: 292 | First:(Second:(Second:(Second:(Second:($t@332@01))))) != Null | live]
(push) ; 3
; [then-branch: 292 | First:(Second:(Second:(Second:(Second:($t@332@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
  $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 292 | First:(Second:(Second:(Second:(Second:($t@332@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_8.A_x), ObjectLock())
; [eval] typeof(self_8.A_x)
; [eval] ObjectLock()
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@333@01 $Snap)
(assert (= $t@333@01 ($Snap.combine ($Snap.first $t@333@01) ($Snap.second $t@333@01))))
(assert (= ($Snap.first $t@333@01) $Snap.unit))
; [eval] (forperm _r_47: Ref [_r_47.MustReleaseBounded] :: Level(_r_47) <= _current_wait_level_165)
(assert (=
  ($Snap.second $t@333@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@333@01))
    ($Snap.second ($Snap.second $t@333@01)))))
(assert (= ($Snap.first ($Snap.second $t@333@01)) $Snap.unit))
; [eval] (forperm _r_47: Ref [_r_47.MustReleaseUnbounded] :: Level(_r_47) <= _current_wait_level_165)
(assert (=
  ($Snap.second ($Snap.second $t@333@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@333@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@333@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@333@01))) $Snap.unit))
; [eval] _residue_165 <= _current_wait_level_165
(assert (<= _residue_165@329@01 _current_wait_level_165@331@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@333@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@334@01 $Ref)
; [exec]
; var x_7: Ref
(declare-const x_7@335@01 $Ref)
; [exec]
; var y_2: Ref
(declare-const y_2@336@01 $Ref)
; [exec]
; var self_26: Ref
(declare-const self_26@337@01 $Ref)
; [exec]
; var _loop_measures_9: Seq[Measure$]
(declare-const _loop_measures_9@338@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_9: Bool
(declare-const _loop_check_before_9@339@01 Bool)
; [exec]
; var _loop_termination_flag_9: Bool
(declare-const _loop_termination_flag_9@340@01 Bool)
; [exec]
; var _loop_original_must_terminate_9: Perm
(declare-const _loop_original_must_terminate_9@341@01 $Perm)
; [exec]
; var _residue_185: Perm
(declare-const _residue_185@342@01 $Perm)
; [exec]
; var _loop_measures_10: Seq[Measure$]
(declare-const _loop_measures_10@343@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_10: Bool
(declare-const _loop_check_before_10@344@01 Bool)
; [exec]
; var _loop_termination_flag_10: Bool
(declare-const _loop_termination_flag_10@345@01 Bool)
; [exec]
; var _loop_original_must_terminate_10: Perm
(declare-const _loop_original_must_terminate_10@346@01 $Perm)
; [exec]
; var _residue_186: Perm
(declare-const _residue_186@347@01 $Perm)
; [exec]
; var _cwl_165: Perm
(declare-const _cwl_165@348@01 $Perm)
; [exec]
; var _method_measures_165: Seq[Measure$]
(declare-const _method_measures_165@349@01 Seq<Measure$>)
; [exec]
; _method_measures_165 := Seq(Measure$create(true, self_8.A_x, 2))
; [eval] Seq(Measure$create(true, self_8.A_x, 2))
; [eval] Measure$create(true, self_8.A_x, 2)
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))) 2)))
  1))
(declare-const _method_measures_165@350@01 Seq<Measure$>)
(assert (=
  _method_measures_165@350@01
  (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))) 2))))
; [exec]
; inhale typeof(self_8) == A()
(declare-const $t@351@01 $Snap)
(assert (= $t@351@01 $Snap.unit))
; [eval] typeof(self_8) == A()
; [eval] typeof(self_8)
; [eval] A()
(assert (= (typeof<PyType> self_8@330@01) (as A<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_26 := self_8
; [exec]
; x_7 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const x_7@352@01 $Ref)
(assert (= x_7@352@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(3628920)
(declare-const $t@353@01 $Snap)
(assert (= $t@353@01 $Snap.unit))
; [eval] _isDefined(3628920)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3628920))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3628920))
(assert (_isDefined $Snap.unit 3628920))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; y_2 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const y_2@354@01 $Ref)
(assert (= y_2@354@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(3301241)
(declare-const $t@355@01 $Snap)
(assert (= $t@355@01 $Snap.unit))
; [eval] _isDefined(3301241)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3301241))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3301241))
(assert (_isDefined $Snap.unit 3301241))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_9 := perm(MustTerminate(_cthread_165))
; [eval] perm(MustTerminate(_cthread_165))
(declare-const _loop_original_must_terminate_9@356@01 $Perm)
(assert (= _loop_original_must_terminate_9@356@01 $Perm.No))
; [exec]
; _loop_termination_flag_9 := false
; [exec]
; _loop_check_before_9 := true
(declare-const _loop_measures_9@357@01 Seq<Measure$>)
(declare-const x_7@358@01 $Ref)
(declare-const _loop_original_must_terminate_10@359@01 $Perm)
(declare-const _loop_termination_flag_10@360@01 Bool)
(declare-const _loop_check_before_10@361@01 Bool)
(declare-const _loop_measures_10@362@01 Seq<Measure$>)
(declare-const y_2@363@01 $Ref)
(declare-const _cwl_165@364@01 $Perm)
(declare-const _loop_check_before_9@365@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@366@01 $Snap)
(assert (= $t@366@01 ($Snap.combine ($Snap.first $t@366@01) ($Snap.second $t@366@01))))
(assert (= ($Snap.first $t@366@01) $Snap.unit))
; [eval] (forperm _r_45: Ref [_r_45.MustReleaseBounded] :: Level(_r_45) <= _residue_185)
(assert (=
  ($Snap.second $t@366@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@366@01))
    ($Snap.second ($Snap.second $t@366@01)))))
(assert (= ($Snap.first ($Snap.second $t@366@01)) $Snap.unit))
; [eval] (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: Level(_r_45) <= _residue_185)
(assert (=
  ($Snap.second ($Snap.second $t@366@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@366@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@366@01))) $Snap.unit))
; [eval] _residue_165 <= _residue_185
(assert (<= _residue_165@329@01 _residue_185@342@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@366@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@366@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@366@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(x_7), int())
; [eval] typeof(x_7)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> x_7@358@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(y_2), int())
; [eval] typeof(y_2)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> y_2@363@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
  $Snap.unit))
; [eval] self_26.A_x == null || issubtype(typeof(self_26.A_x), ObjectLock())
; [eval] self_26.A_x == null
(push) ; 4
; [then-branch: 293 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01))))))) == Null | live]
; [else-branch: 293 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01))))))) != Null | live]
(push) ; 5
; [then-branch: 293 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
  $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 293 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_26.A_x), ObjectLock())
; [eval] typeof(self_26.A_x)
; [eval] ObjectLock()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))))
; [eval] int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_7@358@01 3628920))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_7@358@01 3628920))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_7@358@01 3628920)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_7@358@01 3628920)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_7@358@01 3628920)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)) 5))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)) 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)) 5)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 294 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@358@01, 3628920)), 5) | live]
; [else-branch: 294 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@358@01, 3628920)), 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 294 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@358@01, 3628920)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)) 5))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_7, 3628920))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)) 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 295 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@358@01, 3628920)), 5) | live]
; [else-branch: 295 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@358@01, 3628920)), 5)) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 295 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@358@01, 3628920)), 5)]
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_7, 3628920))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_7, 3628920)))
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920))))
(pop) ; 7
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)) 5)
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)))))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)))
    0)))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))
  $Snap.unit))
(pop) ; 4
(push) ; 4
; [else-branch: 294 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@358@01, 3628920)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)) 5)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))
  $Snap.unit))
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(x_7), int())
; [eval] typeof(x_7)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> x_7@352@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_7@352@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(y_2), int())
; [eval] typeof(y_2)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> y_2@354@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> y_2@354@01) (as int<PyType>  PyType)))
; [eval] self_26.A_x == null || issubtype(typeof(self_26.A_x), ObjectLock())
; [eval] self_26.A_x == null
(push) ; 4
; [then-branch: 296 | First:(Second:(Second:(Second:(Second:($t@332@01))))) == Null | live]
; [else-branch: 296 | First:(Second:(Second:(Second:(Second:($t@332@01))))) != Null | live]
(push) ; 5
; [then-branch: 296 | First:(Second:(Second:(Second:(Second:($t@332@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
  $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 296 | First:(Second:(Second:(Second:(Second:($t@332@01))))) != Null]
; [eval] issubtype(typeof(self_26.A_x), ObjectLock())
; [eval] typeof(self_26.A_x)
; [eval] ObjectLock()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_7@352@01 3628920))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_7@352@01 3628920))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_7@352@01 3628920)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_7@352@01 3628920)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_7@352@01 3628920)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920)) 5))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920)) 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920)) 5)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 297 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@352@01, 3628920)), 5) | live]
; [else-branch: 297 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@352@01, 3628920)), 5)) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 297 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@352@01, 3628920)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920)) 5))
; [eval] int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_7, 3628920))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920)) 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 298 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@352@01, 3628920)), 5) | live]
; [else-branch: 298 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@352@01, 3628920)), 5)) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 298 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@352@01, 3628920)), 5)]
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_7, 3628920))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_7, 3628920)))
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920))))
(pop) ; 7
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920)) 5)
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920)))))
(push) ; 5
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920)))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920)))
    0)))
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 299 | True | live]
; [else-branch: 299 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 299 | True]
; [eval] perm(self_26.A_x.MustReleaseBounded) > none
; [eval] perm(self_26.A_x.MustReleaseBounded)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 300 | True | live]
; [else-branch: 300 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 300 | True]
; [eval] _loop_check_before_9 ==> _loop_termination_flag_9 || (!int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5) || perm(MustTerminate(_cthread_165)) == none && ((forperm _r_46: Ref [MustInvokeBounded(_r_46)] :: false) && ((forperm _r_46: Ref [MustInvokeUnbounded(_r_46)] :: false) && ((forperm _r_46: Ref [_r_46.MustReleaseBounded] :: false) && (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: false)))))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 301 | True | live]
; [else-branch: 301 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 301 | True]
; [eval] _loop_termination_flag_9 || (!int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5) || perm(MustTerminate(_cthread_165)) == none && ((forperm _r_46: Ref [MustInvokeBounded(_r_46)] :: false) && ((forperm _r_46: Ref [MustInvokeUnbounded(_r_46)] :: false) && ((forperm _r_46: Ref [_r_46.MustReleaseBounded] :: false) && (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: false)))))
(push) ; 9
; [then-branch: 302 | False | live]
; [else-branch: 302 | True | live]
(push) ; 10
; [then-branch: 302 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 302 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 303 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@352@01, 3628920)), 5)) | live]
; [else-branch: 303 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@352@01, 3628920)), 5) | live]
(push) ; 12
; [then-branch: 303 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@352@01, 3628920)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920)) 5)))
(pop) ; 12
(push) ; 12
; [else-branch: 303 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@352@01, 3628920)), 5)]
; [eval] perm(MustTerminate(_cthread_165)) == none && ((forperm _r_46: Ref [MustInvokeBounded(_r_46)] :: false) && ((forperm _r_46: Ref [MustInvokeUnbounded(_r_46)] :: false) && ((forperm _r_46: Ref [_r_46.MustReleaseBounded] :: false) && (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_165)) == none
; [eval] perm(MustTerminate(_cthread_165))
(push) ; 13
; [then-branch: 304 | False | live]
; [else-branch: 304 | True | live]
(push) ; 14
; [then-branch: 304 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 304 | True]
; [eval] (forperm _r_46: Ref [MustInvokeBounded(_r_46)] :: false)
(push) ; 15
; [then-branch: 305 | False | live]
; [else-branch: 305 | True | live]
(push) ; 16
; [then-branch: 305 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 305 | True]
; [eval] (forperm _r_46: Ref [MustInvokeUnbounded(_r_46)] :: false)
(push) ; 17
; [then-branch: 306 | False | live]
; [else-branch: 306 | True | live]
(push) ; 18
; [then-branch: 306 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 306 | True]
; [eval] (forperm _r_46: Ref [_r_46.MustReleaseBounded] :: false)
(push) ; 19
; [then-branch: 307 | False | live]
; [else-branch: 307 | True | live]
(push) ; 20
; [then-branch: 307 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 307 | True]
; [eval] (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: false)
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920)) 5))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920)) 5))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@352@01 3628920)) 5))))
; [eval] !_loop_check_before_9 ==> (forperm _r_46: Ref [MustInvokeBounded(_r_46)] :: false) && ((forperm _r_46: Ref [MustInvokeUnbounded(_r_46)] :: false) && ((forperm _r_46: Ref [_r_46.MustReleaseBounded] :: false) && (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_9
(push) ; 7
; [then-branch: 308 | False | dead]
; [else-branch: 308 | True | live]
(push) ; 8
; [else-branch: 308 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)) 5))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))
  $Snap.unit))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)) 5)
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)))))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)))
    0)))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))
  $Snap.unit))
(assert (= $t@366@01 ($Snap.combine ($Snap.first $t@366@01) ($Snap.second $t@366@01))))
(assert (= ($Snap.first $t@366@01) $Snap.unit))
(assert (=
  ($Snap.second $t@366@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@366@01))
    ($Snap.second ($Snap.second $t@366@01)))))
(assert (= ($Snap.first ($Snap.second $t@366@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@366@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@366@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@366@01))) $Snap.unit))
(assert (<= _residue_165@329@01 _residue_185@342@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@366@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@366@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@366@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> x_7@358@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> y_2@363@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
  $Snap.unit))
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))))
(assert (_checkDefined%precondition $Snap.unit x_7@358@01 3628920))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_7@358@01 3628920)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)) 5))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 8
; [eval] int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [eval] !int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)) 5))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 309 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@358@01, 3628920)), 5) | live]
; [else-branch: 309 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@358@01, 3628920)), 5)) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 309 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@358@01, 3628920)), 5)]
; [exec]
; _loop_measures_9 := Seq(Measure$create(int___lt__(int___unbox__(_checkDefined(x_7,
;   3628920)), 5), self_26.A_x, int___sub__(10, int___unbox__(_checkDefined(x_7,
;   3628920)))))
; [eval] Seq(Measure$create(int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5), self_26.A_x, int___sub__(10, int___unbox__(_checkDefined(x_7, 3628920)))))
; [eval] Measure$create(int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5), self_26.A_x, int___sub__(10, int___unbox__(_checkDefined(x_7, 3628920))))
; [eval] int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_7, 3628920)))
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920))))
(pop) ; 9
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)) 5) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920))))))
  1))
(declare-const _loop_measures_9@367@01 Seq<Measure$>)
(assert (=
  _loop_measures_9@367@01
  (Seq_singleton (Measure$create<Measure$> (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)) 5) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)))))))
; [exec]
; x_7 := __prim__int___box__(int___add__(int___unbox__(x_7), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(x_7), 1))
; [eval] int___add__(int___unbox__(x_7), 1)
; [eval] int___unbox__(x_7)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit x_7@358@01))
(pop) ; 9
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit x_7@358@01))
(push) ; 9
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_7@358@01) 1))
(pop) ; 9
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_7@358@01) 1))
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_7@358@01) 1)))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_7@358@01) 1)))
(declare-const x_7@368@01 $Ref)
(assert (=
  x_7@368@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_7@358@01) 1))))
; [exec]
; inhale _isDefined(3628920)
(declare-const $t@369@01 $Snap)
(assert (= $t@369@01 $Snap.unit))
; [eval] _isDefined(3628920)
(push) ; 9
(pop) ; 9
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_10 := perm(MustTerminate(_cthread_165))
; [eval] perm(MustTerminate(_cthread_165))
(declare-const _loop_original_must_terminate_10@370@01 $Perm)
(assert (= _loop_original_must_terminate_10@370@01 $Perm.No))
; [exec]
; _loop_termination_flag_10 := true
; [exec]
; _loop_check_before_10 := true
(declare-const _loop_measures_10@371@01 Seq<Measure$>)
(declare-const y_2@372@01 $Ref)
(declare-const _loop_check_before_10@373@01 Bool)
(set-option :timeout 0)
(push) ; 9
; Loop head block: Check well-definedness of invariant
(declare-const $t@374@01 $Snap)
(assert (= $t@374@01 ($Snap.combine ($Snap.first $t@374@01) ($Snap.second $t@374@01))))
(assert (= ($Snap.first $t@374@01) $Snap.unit))
; [eval] (forperm _r_43: Ref [_r_43.MustReleaseBounded] :: Level(_r_43) <= _residue_186)
(assert (=
  ($Snap.second $t@374@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@374@01))
    ($Snap.second ($Snap.second $t@374@01)))))
(assert (= ($Snap.first ($Snap.second $t@374@01)) $Snap.unit))
; [eval] (forperm _r_43: Ref [_r_43.MustReleaseUnbounded] :: Level(_r_43) <= _residue_186)
(assert (=
  ($Snap.second ($Snap.second $t@374@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@374@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@374@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@374@01))) $Snap.unit))
; [eval] _residue_185 <= _residue_186
(assert (<= _residue_185@342@01 _residue_186@347@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@374@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@374@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@374@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(y_2), int())
; [eval] typeof(y_2)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> y_2@372@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5) ==> int___sub__(20, int___unbox__(_checkDefined(y_2, 3301241))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5)
; [eval] int___unbox__(_checkDefined(y_2, 3301241))
; [eval] _checkDefined(y_2, 3301241)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_2@372@01 3301241))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_2@372@01 3301241))
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_2@372@01 3301241)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_2@372@01 3301241)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_2@372@01 3301241)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241))))
(push) ; 10
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5))
(pop) ; 10
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5))
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 310 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@372@01, 3301241)), 5) | live]
; [else-branch: 310 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@372@01, 3301241)), 5)) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 310 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@372@01, 3301241)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5))
; [eval] int___sub__(20, int___unbox__(_checkDefined(y_2, 3301241))) > 0
; [eval] int___sub__(20, int___unbox__(_checkDefined(y_2, 3301241)))
; [eval] int___unbox__(_checkDefined(y_2, 3301241))
; [eval] _checkDefined(y_2, 3301241)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241))))
(pop) ; 12
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241))))
(pop) ; 11
(push) ; 11
; [else-branch: 310 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@372@01, 3301241)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5)
    (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5)
  (>
    (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01))))))))
  $Snap.unit))
(pop) ; 9
(push) ; 9
; Loop head block: Establish invariant
; [eval] issubtype(typeof(y_2), int())
; [eval] typeof(y_2)
; [eval] int()
; [eval] int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5) ==> int___sub__(20, int___unbox__(_checkDefined(y_2, 3301241))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5)
; [eval] int___unbox__(_checkDefined(y_2, 3301241))
; [eval] _checkDefined(y_2, 3301241)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_2@363@01 3301241))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_2@363@01 3301241))
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_2@363@01 3301241)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_2@363@01 3301241)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_2@363@01 3301241)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_2@363@01 3301241)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_2@363@01 3301241))))
(push) ; 10
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@363@01 3301241)) 5))
(pop) ; 10
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@363@01 3301241)) 5))
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@363@01 3301241)) 5))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@363@01 3301241)) 5)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 311 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@363@01, 3301241)), 5) | live]
; [else-branch: 311 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@363@01, 3301241)), 5)) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 311 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@363@01, 3301241)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@363@01 3301241)) 5))
; [eval] int___sub__(20, int___unbox__(_checkDefined(y_2, 3301241))) > 0
; [eval] int___sub__(20, int___unbox__(_checkDefined(y_2, 3301241)))
; [eval] int___unbox__(_checkDefined(y_2, 3301241))
; [eval] _checkDefined(y_2, 3301241)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@363@01 3301241))))
(pop) ; 12
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@363@01 3301241))))
(pop) ; 11
(push) ; 11
; [else-branch: 311 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@363@01, 3301241)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@363@01 3301241)) 5)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@363@01 3301241)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@363@01 3301241)) 5)
    (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@363@01 3301241))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@363@01 3301241)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@363@01 3301241)) 5)))
(push) ; 10
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@363@01 3301241)) 5)
  (>
    (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@363@01 3301241)))
    0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@363@01 3301241)) 5)
  (>
    (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@363@01 3301241)))
    0)))
; [eval] _loop_check_before_10 ==> _loop_termination_flag_10 || (!int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5) || perm(MustTerminate(_cthread_165)) == none && ((forperm _r_44: Ref [MustInvokeBounded(_r_44)] :: false) && ((forperm _r_44: Ref [MustInvokeUnbounded(_r_44)] :: false) && ((forperm _r_44: Ref [_r_44.MustReleaseBounded] :: false) && (forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: false)))))
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 312 | True | live]
; [else-branch: 312 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 312 | True]
; [eval] _loop_termination_flag_10 || (!int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5) || perm(MustTerminate(_cthread_165)) == none && ((forperm _r_44: Ref [MustInvokeBounded(_r_44)] :: false) && ((forperm _r_44: Ref [MustInvokeUnbounded(_r_44)] :: false) && ((forperm _r_44: Ref [_r_44.MustReleaseBounded] :: false) && (forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: false)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] !_loop_check_before_10 ==> (forperm _r_44: Ref [MustInvokeBounded(_r_44)] :: false) && ((forperm _r_44: Ref [MustInvokeUnbounded(_r_44)] :: false) && ((forperm _r_44: Ref [_r_44.MustReleaseBounded] :: false) && (forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_10
(push) ; 10
; [then-branch: 313 | False | dead]
; [else-branch: 313 | True | live]
(push) ; 11
; [else-branch: 313 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 10
(assert (= $t@374@01 ($Snap.combine ($Snap.first $t@374@01) ($Snap.second $t@374@01))))
(assert (= ($Snap.first $t@374@01) $Snap.unit))
(assert (=
  ($Snap.second $t@374@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@374@01))
    ($Snap.second ($Snap.second $t@374@01)))))
(assert (= ($Snap.first ($Snap.second $t@374@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@374@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@374@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@374@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@374@01))) $Snap.unit))
(assert (<= _residue_185@342@01 _residue_186@347@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@374@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@374@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@374@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> y_2@372@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit y_2@372@01 3301241))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_2@372@01 3301241)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5)
    (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5)
  (>
    (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 11
; [eval] int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5)
; [eval] int___unbox__(_checkDefined(y_2, 3301241))
; [eval] _checkDefined(y_2, 3301241)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 12
; Joined path conditions
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
(push) ; 11
; [eval] !int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5)
; [eval] int___unbox__(_checkDefined(y_2, 3301241))
; [eval] _checkDefined(y_2, 3301241)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 12
; Joined path conditions
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5)
; [eval] int___unbox__(_checkDefined(y_2, 3301241))
; [eval] _checkDefined(y_2, 3301241)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 314 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@372@01, 3301241)), 5) | live]
; [else-branch: 314 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@372@01, 3301241)), 5)) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 314 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@372@01, 3301241)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5))
; [exec]
; _loop_measures_10 := Seq(Measure$create(true, _cthread_165, int___sub__(20,
;   int___unbox__(_checkDefined(y_2, 3301241)))))
; [eval] Seq(Measure$create(true, _cthread_165, int___sub__(20, int___unbox__(_checkDefined(y_2, 3301241)))))
; [eval] Measure$create(true, _cthread_165, int___sub__(20, int___unbox__(_checkDefined(y_2, 3301241))))
; [eval] int___sub__(20, int___unbox__(_checkDefined(y_2, 3301241)))
; [eval] int___unbox__(_checkDefined(y_2, 3301241))
; [eval] _checkDefined(y_2, 3301241)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241))))
(pop) ; 12
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_165@327@01 (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241))))))
  1))
(declare-const _loop_measures_10@375@01 Seq<Measure$>)
(assert (=
  _loop_measures_10@375@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_165@327@01 (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)))))))
; [exec]
; y_2 := __prim__int___box__(int___add__(int___unbox__(y_2), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(y_2), 1))
; [eval] int___add__(int___unbox__(y_2), 1)
; [eval] int___unbox__(y_2)
(push) ; 12
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit y_2@372@01))
(pop) ; 12
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit y_2@372@01))
(push) ; 12
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit y_2@372@01) 1))
(pop) ; 12
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit y_2@372@01) 1))
(push) ; 12
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit y_2@372@01) 1)))
(pop) ; 12
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit y_2@372@01) 1)))
(declare-const y_2@376@01 $Ref)
(assert (=
  y_2@376@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit y_2@372@01) 1))))
; [exec]
; inhale _isDefined(3301241)
(declare-const $t@377@01 $Snap)
(assert (= $t@377@01 $Snap.unit))
; [eval] _isDefined(3301241)
(push) ; 12
(pop) ; 12
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop_end_10
; [exec]
; _loop_check_before_10 := false
; [exec]
; assert _loop_termination_flag_10 ==>
;   !int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5) ||
;   Measure$check(_loop_measures_10, _cthread_165, int___sub__(20, int___unbox__(_checkDefined(y_2,
;   3301241))))
; [eval] _loop_termination_flag_10 ==> !int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5) || Measure$check(_loop_measures_10, _cthread_165, int___sub__(20, int___unbox__(_checkDefined(y_2, 3301241))))
(set-option :timeout 0)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 315 | True | live]
; [else-branch: 315 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 315 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5) || Measure$check(_loop_measures_10, _cthread_165, int___sub__(20, int___unbox__(_checkDefined(y_2, 3301241))))
; [eval] !int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5)
; [eval] int___unbox__(_checkDefined(y_2, 3301241))
; [eval] _checkDefined(y_2, 3301241)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_2@376@01 3301241))
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_2@376@01 3301241))
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_2@376@01 3301241)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_2@376@01 3301241)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)))
(pop) ; 14
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_2@376@01 3301241)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241))))
(push) ; 14
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5))
(pop) ; 14
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5))
(push) ; 14
; [then-branch: 316 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@376@01, 3301241)), 5)) | live]
; [else-branch: 316 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@376@01, 3301241)), 5) | live]
(push) ; 15
; [then-branch: 316 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@376@01, 3301241)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5)))
(pop) ; 15
(push) ; 15
; [else-branch: 316 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@376@01, 3301241)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5))
; [eval] Measure$check(_loop_measures_10, _cthread_165, int___sub__(20, int___unbox__(_checkDefined(y_2, 3301241))))
; [eval] int___sub__(20, int___unbox__(_checkDefined(y_2, 3301241)))
; [eval] int___unbox__(_checkDefined(y_2, 3301241))
; [eval] _checkDefined(y_2, 3301241)
(push) ; 16
; [eval] _isDefined(id)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
; Joined path conditions
(push) ; 16
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241))))
(pop) ; 16
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241))))
(push) ; 16
(assert (Measure$check%precondition $Snap.unit _loop_measures_10@375@01 _cthread_165@327@01 (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)))))
(pop) ; 16
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_10@375@01 _cthread_165@327@01 (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5)
    (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)))
    (Measure$check%precondition $Snap.unit _loop_measures_10@375@01 _cthread_165@327@01 (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)))))))
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit y_2@376@01 3301241)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_2@376@01 3301241)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5)
  (=>
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5)
    (and
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5)
      (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)))
      (Measure$check%precondition $Snap.unit _loop_measures_10@375@01 _cthread_165@327@01 (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241))))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5)))))
(push) ; 12
(assert (not (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5))
  (Measure$check $Snap.unit _loop_measures_10@375@01 _cthread_165@327@01 (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5))
  (Measure$check $Snap.unit _loop_measures_10@375@01 _cthread_165@327@01 (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241))))))
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(y_2), int())
; [eval] typeof(y_2)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> y_2@376@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> y_2@376@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5) ==> int___sub__(20, int___unbox__(_checkDefined(y_2, 3301241))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5)
; [eval] int___unbox__(_checkDefined(y_2, 3301241))
; [eval] _checkDefined(y_2, 3301241)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 12
; Joined path conditions
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 317 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@376@01, 3301241)), 5) | live]
; [else-branch: 317 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@376@01, 3301241)), 5)) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 317 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@376@01, 3301241)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5))
; [eval] int___sub__(20, int___unbox__(_checkDefined(y_2, 3301241))) > 0
; [eval] int___sub__(20, int___unbox__(_checkDefined(y_2, 3301241)))
; [eval] int___unbox__(_checkDefined(y_2, 3301241))
; [eval] _checkDefined(y_2, 3301241)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241))))
(pop) ; 14
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241))))
(pop) ; 13
(push) ; 13
; [else-branch: 317 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@376@01, 3301241)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5)
    (int___sub__%precondition $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5)))
(push) ; 12
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5)
  (>
    (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)))
    0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)) 5)
  (>
    (int___sub__ $Snap.unit 20 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@376@01 3301241)))
    0)))
; [eval] _loop_check_before_10 ==> _loop_termination_flag_10 || (!int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5) || perm(MustTerminate(_cthread_165)) == none && ((forperm _r_44: Ref [MustInvokeBounded(_r_44)] :: false) && ((forperm _r_44: Ref [MustInvokeUnbounded(_r_44)] :: false) && ((forperm _r_44: Ref [_r_44.MustReleaseBounded] :: false) && (forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: false)))))
(push) ; 12
; [then-branch: 318 | False | dead]
; [else-branch: 318 | True | live]
(push) ; 13
; [else-branch: 318 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] !_loop_check_before_10 ==> (forperm _r_44: Ref [MustInvokeBounded(_r_44)] :: false) && ((forperm _r_44: Ref [MustInvokeUnbounded(_r_44)] :: false) && ((forperm _r_44: Ref [_r_44.MustReleaseBounded] :: false) && (forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_10
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 319 | True | live]
; [else-branch: 319 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 319 | True]
; [eval] (forperm _r_44: Ref [MustInvokeBounded(_r_44)] :: false) && ((forperm _r_44: Ref [MustInvokeUnbounded(_r_44)] :: false) && ((forperm _r_44: Ref [_r_44.MustReleaseBounded] :: false) && (forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_44: Ref [MustInvokeBounded(_r_44)] :: false)
(push) ; 14
; [then-branch: 320 | False | live]
; [else-branch: 320 | True | live]
(push) ; 15
; [then-branch: 320 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 320 | True]
; [eval] (forperm _r_44: Ref [MustInvokeUnbounded(_r_44)] :: false)
(push) ; 16
; [then-branch: 321 | False | live]
; [else-branch: 321 | True | live]
(push) ; 17
; [then-branch: 321 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 321 | True]
; [eval] (forperm _r_44: Ref [_r_44.MustReleaseBounded] :: false)
(push) ; 18
; [then-branch: 322 | False | live]
; [else-branch: 322 | True | live]
(push) ; 19
; [then-branch: 322 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 322 | True]
; [eval] (forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: false)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 314 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@372@01, 3301241)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5)))
(pop) ; 11
; [eval] !int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5)
; [eval] int___unbox__(_checkDefined(y_2, 3301241))
; [eval] _checkDefined(y_2, 3301241)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 323 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@372@01, 3301241)), 5)) | live]
; [else-branch: 323 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@372@01, 3301241)), 5) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 323 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@372@01, 3301241)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5)))
; [exec]
; exhale perm(MustTerminate(_cthread_165)) > none ==>
;   acc(MustTerminate(_cthread_165), perm(MustTerminate(_cthread_165)) -
;   _loop_original_must_terminate_10)
; [eval] perm(MustTerminate(_cthread_165)) > none
; [eval] perm(MustTerminate(_cthread_165))
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 324 | True | live]
; [else-branch: 324 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 324 | True]
; [eval] perm(MustTerminate(_cthread_165)) - _loop_original_must_terminate_10
; [eval] perm(MustTerminate(_cthread_165))
(push) ; 13
(assert (not (or
  (= (- $Perm.Write _loop_original_must_terminate_10@370@01) $Perm.No)
  (< $Perm.No (- $Perm.Write _loop_original_must_terminate_10@370@01)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (-
    $Perm.Write
    ($Perm.min
      $Perm.Write
      (- $Perm.Write _loop_original_must_terminate_10@370@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(assert (not (or
  (=
    (-
      (- $Perm.Write _loop_original_must_terminate_10@370@01)
      ($Perm.min
        $Perm.Write
        (- $Perm.Write _loop_original_must_terminate_10@370@01)))
    $Perm.No)
  (<
    (-
      (- $Perm.Write _loop_original_must_terminate_10@370@01)
      ($Perm.min
        $Perm.Write
        (- $Perm.Write _loop_original_must_terminate_10@370@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [exec]
; label post_loop_10
; [eval] int___eq__(_checkDefined(x_7, 3628920), __prim__int___box__(5))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_7@368@01 3628920))
(pop) ; 13
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_7@368@01 3628920))
; [eval] __prim__int___box__(5)
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_7@368@01 3628920)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_7@368@01 3628920)) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_7@368@01 3628920) (__prim__int___box__ $Snap.unit 5)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_7@368@01 3628920)) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_7@368@01 3628920) (__prim__int___box__ $Snap.unit 5))))
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_7@368@01 3628920) (__prim__int___box__ $Snap.unit 5)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_7@368@01 3628920) (__prim__int___box__ $Snap.unit 5))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 325 | int___eq__((_, _), _checkDefined(_, x_7@368@01, 3628920), __prim__int___box__(_, 5)) | live]
; [else-branch: 325 | !(int___eq__((_, _), _checkDefined(_, x_7@368@01, 3628920), __prim__int___box__(_, 5))) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 325 | int___eq__((_, _), _checkDefined(_, x_7@368@01, 3628920), __prim__int___box__(_, 5))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_7@368@01 3628920) (__prim__int___box__ $Snap.unit 5)))
; [exec]
; fold acc(Lock_invariant(self_26.A_x), write)
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0)))
; [eval] typeof(self_17)
; [eval] Lock(Lock_arg(typeof(self_17), 0))
; [eval] Lock_arg(typeof(self_17), 0)
; [eval] typeof(self_17)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))) 0)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))) 0))))
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0))) ==> true
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0)))
; [eval] typeof(self_17)
; [eval] Lock(Lock_arg(typeof(self_17), 0))
; [eval] Lock_arg(typeof(self_17), 0)
; [eval] typeof(self_17)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))) 0))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 326 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01)))))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01)))))))), 0))) | live]
; [else-branch: 326 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01)))))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01)))))))), 0)))) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 326 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01)))))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01)))))))), 0)))]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] issubtype(typeof(self_17), ObjectLock()) ==> true
; [eval] issubtype(typeof(self_17), ObjectLock())
; [eval] typeof(self_17)
; [eval] ObjectLock()
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))) (as ObjectLock<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))) (as ObjectLock<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 327 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01)))))))), ObjectLock[PyType]) | live]
; [else-branch: 327 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01)))))))), ObjectLock[PyType])) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 327 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01)))))))), ObjectLock[PyType])]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))) (as ObjectLock<PyType>  PyType)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))) (as ObjectLock<PyType>  PyType)))
(assert (Lock_invariant%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))
; [exec]
; _cwl_165 := Lock_release(_cthread_165, _method_measures_165, _residue_185, self_26.A_x)
; [eval] _cthread_173 != null
; [eval] issubtype(typeof(_cthread_173), Thread_0())
; [eval] typeof(_cthread_173)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_16), Lock(Lock_arg(typeof(self_16), 0)))
; [eval] typeof(self_16)
; [eval] Lock(Lock_arg(typeof(self_16), 0))
; [eval] Lock_arg(typeof(self_16), 0)
; [eval] typeof(self_16)
; [eval] issubtype(Lock_arg(typeof(self_16), 0), object())
; [eval] Lock_arg(typeof(self_16), 0)
; [eval] typeof(self_16)
; [eval] object()
(push) ; 14
(assert (not (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))) 0) (as object<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))) 0) (as object<PyType>  PyType)))
; [eval] self_16 != null
; [eval] perm(self_16.MustReleaseBounded) > none && Measure$check(_caller_measures_173, self_16, 1)
; [eval] perm(self_16.MustReleaseBounded) > none
; [eval] perm(self_16.MustReleaseBounded)
(push) ; 14
; [then-branch: 328 | False | live]
; [else-branch: 328 | True | live]
(push) ; 15
; [then-branch: 328 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 328 | True]
; [eval] Measure$check(_caller_measures_173, self_16, 1)
(push) ; 16
(assert (Measure$check%precondition $Snap.unit _method_measures_165@350@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))) 1))
(pop) ; 16
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _method_measures_165@350@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))) 1))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _method_measures_165@350@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))) 1))
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (Measure$check $Snap.unit _method_measures_165@350@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))) 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (Measure$check $Snap.unit _method_measures_165@350@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))) 1)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 329 | Measure$check(_, _method_measures_165@350@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01))))))), 1) | live]
; [else-branch: 329 | !(Measure$check(_, _method_measures_165@350@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01))))))), 1)) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 329 | Measure$check(_, _method_measures_165@350@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01))))))), 1)]
(assert (Measure$check $Snap.unit _method_measures_165@350@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))) 1))
; [eval] Measure$check(_caller_measures_173, _cthread_173, 1) || perm(MustTerminate(_cthread_173)) == none && ((forperm _r_90: Ref [MustInvokeBounded(_r_90)] :: false) && ((forperm _r_90: Ref [MustInvokeUnbounded(_r_90)] :: false) && ((forperm _r_90: Ref [_r_90.MustReleaseBounded] :: false) && (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: false))))
; [eval] Measure$check(_caller_measures_173, _cthread_173, 1)
(push) ; 15
(assert (Measure$check%precondition $Snap.unit _method_measures_165@350@01 _cthread_165@327@01 1))
(pop) ; 15
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _method_measures_165@350@01 _cthread_165@327@01 1))
(push) ; 15
; [then-branch: 330 | Measure$check(_, _method_measures_165@350@01, _cthread_165@327@01, 1) | live]
; [else-branch: 330 | !(Measure$check(_, _method_measures_165@350@01, _cthread_165@327@01, 1)) | live]
(push) ; 16
; [then-branch: 330 | Measure$check(_, _method_measures_165@350@01, _cthread_165@327@01, 1)]
(assert (Measure$check $Snap.unit _method_measures_165@350@01 _cthread_165@327@01 1))
(pop) ; 16
(push) ; 16
; [else-branch: 330 | !(Measure$check(_, _method_measures_165@350@01, _cthread_165@327@01, 1))]
(assert (not
  (Measure$check $Snap.unit _method_measures_165@350@01 _cthread_165@327@01 1)))
; [eval] perm(MustTerminate(_cthread_173)) == none && ((forperm _r_90: Ref [MustInvokeBounded(_r_90)] :: false) && ((forperm _r_90: Ref [MustInvokeUnbounded(_r_90)] :: false) && ((forperm _r_90: Ref [_r_90.MustReleaseBounded] :: false) && (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_173)) == none
; [eval] perm(MustTerminate(_cthread_173))
(push) ; 17
; [then-branch: 331 | False | live]
; [else-branch: 331 | True | live]
(push) ; 18
; [then-branch: 331 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 331 | True]
; [eval] (forperm _r_90: Ref [MustInvokeBounded(_r_90)] :: false)
(push) ; 19
; [then-branch: 332 | False | live]
; [else-branch: 332 | True | live]
(push) ; 20
; [then-branch: 332 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 332 | True]
; [eval] (forperm _r_90: Ref [MustInvokeUnbounded(_r_90)] :: false)
(push) ; 21
; [then-branch: 333 | False | live]
; [else-branch: 333 | True | live]
(push) ; 22
; [then-branch: 333 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 333 | True]
; [eval] (forperm _r_90: Ref [_r_90.MustReleaseBounded] :: false)
(push) ; 23
; [then-branch: 334 | False | live]
; [else-branch: 334 | True | live]
(push) ; 24
; [then-branch: 334 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 334 | True]
; [eval] (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: false)
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Measure$check $Snap.unit _method_measures_165@350@01 _cthread_165@327@01 1))
  (Measure$check $Snap.unit _method_measures_165@350@01 _cthread_165@327@01 1)))
(declare-const _current_wait_level_173@378@01 $Perm)
(declare-const $t@379@01 $Snap)
(assert (= $t@379@01 ($Snap.combine ($Snap.first $t@379@01) ($Snap.second $t@379@01))))
(assert (= ($Snap.first $t@379@01) $Snap.unit))
; [eval] (forperm _r_89: Ref [_r_89.MustReleaseBounded] :: Level(_r_89) <= _current_wait_level_173)
(assert (=
  ($Snap.second $t@379@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@379@01))
    ($Snap.second ($Snap.second $t@379@01)))))
(assert (= ($Snap.first ($Snap.second $t@379@01)) $Snap.unit))
; [eval] (forperm _r_89: Ref [_r_89.MustReleaseUnbounded] :: Level(_r_89) <= _current_wait_level_173)
(assert (= ($Snap.second ($Snap.second $t@379@01)) $Snap.unit))
; [eval] _residue_173 <= _current_wait_level_173
(assert (<= _residue_185@342@01 _current_wait_level_173@378@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label loop_end_9
; [exec]
; _loop_check_before_9 := false
; [exec]
; assert _loop_termination_flag_9 ==>
;   !int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] _loop_termination_flag_9 ==> !int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
(set-option :timeout 0)
(push) ; 15
; [then-branch: 335 | False | dead]
; [else-branch: 335 | True | live]
(push) ; 16
; [else-branch: 335 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(x_7), int())
; [eval] typeof(x_7)
; [eval] int()
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> x_7@368@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_7@368@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(y_2), int())
; [eval] typeof(y_2)
; [eval] int()
; [eval] self_26.A_x == null || issubtype(typeof(self_26.A_x), ObjectLock())
; [eval] self_26.A_x == null
(push) ; 15
; [then-branch: 336 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01))))))) == Null | live]
; [else-branch: 336 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01))))))) != Null | live]
(push) ; 16
; [then-branch: 336 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
  $Ref.null))
(pop) ; 16
(push) ; 16
; [else-branch: 336 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01))))))) != Null]
; [eval] issubtype(typeof(self_26.A_x), ObjectLock())
; [eval] typeof(self_26.A_x)
; [eval] ObjectLock()
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)))
(pop) ; 15
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)))
(push) ; 15
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)) 5))
(pop) ; 15
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)) 5))
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)) 5))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 337 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@368@01, 3628920)), 5) | dead]
; [else-branch: 337 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@368@01, 3628920)), 5)) | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 337 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@368@01, 3628920)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)) 5)))
; [eval] _loop_check_before_9 ==> _loop_termination_flag_9 || (!int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5) || perm(MustTerminate(_cthread_165)) == none && ((forperm _r_46: Ref [MustInvokeBounded(_r_46)] :: false) && ((forperm _r_46: Ref [MustInvokeUnbounded(_r_46)] :: false) && ((forperm _r_46: Ref [_r_46.MustReleaseBounded] :: false) && (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: false)))))
(push) ; 16
; [then-branch: 338 | False | dead]
; [else-branch: 338 | True | live]
(push) ; 17
; [else-branch: 338 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] !_loop_check_before_9 ==> (forperm _r_46: Ref [MustInvokeBounded(_r_46)] :: false) && ((forperm _r_46: Ref [MustInvokeUnbounded(_r_46)] :: false) && ((forperm _r_46: Ref [_r_46.MustReleaseBounded] :: false) && (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_9
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 339 | True | live]
; [else-branch: 339 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 339 | True]
; [eval] (forperm _r_46: Ref [MustInvokeBounded(_r_46)] :: false) && ((forperm _r_46: Ref [MustInvokeUnbounded(_r_46)] :: false) && ((forperm _r_46: Ref [_r_46.MustReleaseBounded] :: false) && (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_46: Ref [MustInvokeBounded(_r_46)] :: false)
(push) ; 18
; [then-branch: 340 | False | live]
; [else-branch: 340 | True | live]
(push) ; 19
; [then-branch: 340 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 340 | True]
; [eval] (forperm _r_46: Ref [MustInvokeUnbounded(_r_46)] :: false)
(push) ; 20
; [then-branch: 341 | False | live]
; [else-branch: 341 | True | live]
(push) ; 21
; [then-branch: 341 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 341 | True]
; [eval] (forperm _r_46: Ref [_r_46.MustReleaseBounded] :: false)
(push) ; 22
; [then-branch: 342 | False | live]
; [else-branch: 342 | True | live]
(push) ; 23
; [then-branch: 342 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 342 | True]
; [eval] (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: false)
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 325 | !(int___eq__((_, _), _checkDefined(_, x_7@368@01, 3628920), __prim__int___box__(_, 5)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_7@368@01 3628920) (__prim__int___box__ $Snap.unit 5))))
(pop) ; 13
; [eval] !int___eq__(_checkDefined(x_7, 3628920), __prim__int___box__(5))
; [eval] int___eq__(_checkDefined(x_7, 3628920), __prim__int___box__(5))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
; [eval] __prim__int___box__(5)
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_7@368@01 3628920) (__prim__int___box__ $Snap.unit 5))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_7@368@01 3628920) (__prim__int___box__ $Snap.unit 5)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 343 | !(int___eq__((_, _), _checkDefined(_, x_7@368@01, 3628920), __prim__int___box__(_, 5))) | live]
; [else-branch: 343 | int___eq__((_, _), _checkDefined(_, x_7@368@01, 3628920), __prim__int___box__(_, 5)) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 343 | !(int___eq__((_, _), _checkDefined(_, x_7@368@01, 3628920), __prim__int___box__(_, 5)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_7@368@01 3628920) (__prim__int___box__ $Snap.unit 5))))
; [exec]
; label loop_end_9
; [exec]
; _loop_check_before_9 := false
; [exec]
; assert _loop_termination_flag_9 ==>
;   !int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] _loop_termination_flag_9 ==> !int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
(push) ; 14
; [then-branch: 344 | False | dead]
; [else-branch: 344 | True | live]
(push) ; 15
; [else-branch: 344 | True]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(x_7), int())
; [eval] typeof(x_7)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> x_7@368@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_7@368@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(y_2), int())
; [eval] typeof(y_2)
; [eval] int()
; [eval] self_26.A_x == null || issubtype(typeof(self_26.A_x), ObjectLock())
; [eval] self_26.A_x == null
(push) ; 14
; [then-branch: 345 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01))))))) == Null | live]
; [else-branch: 345 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01))))))) != Null | live]
(push) ; 15
; [then-branch: 345 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
  $Ref.null))
(pop) ; 15
(push) ; 15
; [else-branch: 345 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01))))))) != Null]
; [eval] issubtype(typeof(self_26.A_x), ObjectLock())
; [eval] typeof(self_26.A_x)
; [eval] ObjectLock()
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)))
(pop) ; 14
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)))
(push) ; 14
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)) 5))
(pop) ; 14
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)) 5))
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)) 5))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)) 5)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 346 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@368@01, 3628920)), 5) | live]
; [else-branch: 346 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@368@01, 3628920)), 5)) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 346 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@368@01, 3628920)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)) 5))
; [eval] int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_7, 3628920))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 15
; Joined path conditions
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)) 5))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 347 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@368@01, 3628920)), 5) | live]
; [else-branch: 347 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@368@01, 3628920)), 5)) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 347 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@368@01, 3628920)), 5)]
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_7, 3628920))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_7, 3628920)))
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920))))
(pop) ; 17
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)) 5)
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)))))
(push) ; 15
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)))
    0))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)))
    0)))
; [then-branch: 348 | False | dead]
; [else-branch: 348 | True | live]
(push) ; 15
; [else-branch: 348 | True]
; [eval] perm(self_26.A_x.MustReleaseBounded) > none && Measure$check(_loop_measures_9, self_26.A_x, int___sub__(10, int___unbox__(_checkDefined(x_7, 3628920))))
; [eval] perm(self_26.A_x.MustReleaseBounded) > none
; [eval] perm(self_26.A_x.MustReleaseBounded)
(push) ; 16
; [then-branch: 349 | False | live]
; [else-branch: 349 | True | live]
(push) ; 17
; [then-branch: 349 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 349 | True]
; [eval] Measure$check(_loop_measures_9, self_26.A_x, int___sub__(10, int___unbox__(_checkDefined(x_7, 3628920))))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_7, 3628920)))
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 18
; Joined path conditions
(push) ; 18
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920))))
(pop) ; 18
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920))))
(push) ; 18
(assert (Measure$check%precondition $Snap.unit _loop_measures_9@367@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)))))
(pop) ; 18
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_9@367@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (and
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)))
  (Measure$check%precondition $Snap.unit _loop_measures_9@367@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920))))))
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (Measure$check $Snap.unit _loop_measures_9@367@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (Measure$check $Snap.unit _loop_measures_9@367@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 350 | Measure$check(_, _loop_measures_9@367@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01))))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, x_7@368@01, 3628920)))) | live]
; [else-branch: 350 | !(Measure$check(_, _loop_measures_9@367@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01))))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, x_7@368@01, 3628920))))) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 350 | Measure$check(_, _loop_measures_9@367@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@366@01))))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, x_7@368@01, 3628920))))]
(assert (Measure$check $Snap.unit _loop_measures_9@367@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@368@01 3628920)))))
; [eval] _loop_check_before_9 ==> _loop_termination_flag_9 || (!int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5) || perm(MustTerminate(_cthread_165)) == none && ((forperm _r_46: Ref [MustInvokeBounded(_r_46)] :: false) && ((forperm _r_46: Ref [MustInvokeUnbounded(_r_46)] :: false) && ((forperm _r_46: Ref [_r_46.MustReleaseBounded] :: false) && (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: false)))))
(push) ; 17
; [then-branch: 351 | False | dead]
; [else-branch: 351 | True | live]
(push) ; 18
; [else-branch: 351 | True]
(pop) ; 18
(pop) ; 17
; Joined path conditions
; [eval] !_loop_check_before_9 ==> (forperm _r_46: Ref [MustInvokeBounded(_r_46)] :: false) && ((forperm _r_46: Ref [MustInvokeUnbounded(_r_46)] :: false) && ((forperm _r_46: Ref [_r_46.MustReleaseBounded] :: false) && (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_9
(push) ; 17
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 352 | True | live]
; [else-branch: 352 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 352 | True]
; [eval] (forperm _r_46: Ref [MustInvokeBounded(_r_46)] :: false) && ((forperm _r_46: Ref [MustInvokeUnbounded(_r_46)] :: false) && ((forperm _r_46: Ref [_r_46.MustReleaseBounded] :: false) && (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_46: Ref [MustInvokeBounded(_r_46)] :: false)
(push) ; 19
; [then-branch: 353 | False | live]
; [else-branch: 353 | True | live]
(push) ; 20
; [then-branch: 353 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 353 | True]
; [eval] (forperm _r_46: Ref [MustInvokeUnbounded(_r_46)] :: false)
(push) ; 21
; [then-branch: 354 | False | live]
; [else-branch: 354 | True | live]
(push) ; 22
; [then-branch: 354 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 354 | True]
; [eval] (forperm _r_46: Ref [_r_46.MustReleaseBounded] :: false)
(push) ; 23
; [then-branch: 355 | False | live]
; [else-branch: 355 | True | live]
(push) ; 24
; [then-branch: 355 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 355 | True]
; [eval] (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: false)
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 343 | int___eq__((_, _), _checkDefined(_, x_7@368@01, 3628920), __prim__int___box__(_, 5))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_7@368@01 3628920) (__prim__int___box__ $Snap.unit 5)))
(pop) ; 13
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 323 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_2@372@01, 3301241)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_2@372@01 3301241)) 5))
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
; [eval] !int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 356 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@358@01, 3628920)), 5)) | dead]
; [else-branch: 356 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@358@01, 3628920)), 5) | live]
(push) ; 8
; [else-branch: 356 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@358@01, 3628920)), 5)]
(pop) ; 8
(pop) ; 7
(push) ; 7
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)) 5)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))
  $Snap.unit))
(assert (= $t@366@01 ($Snap.combine ($Snap.first $t@366@01) ($Snap.second $t@366@01))))
(assert (= ($Snap.first $t@366@01) $Snap.unit))
(assert (=
  ($Snap.second $t@366@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@366@01))
    ($Snap.second ($Snap.second $t@366@01)))))
(assert (= ($Snap.first ($Snap.second $t@366@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@366@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@366@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@366@01))) $Snap.unit))
(assert (<= _residue_165@329@01 _residue_185@342@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@366@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@366@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@366@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> x_7@358@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> y_2@363@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
  $Snap.unit))
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))))))
(assert (_checkDefined%precondition $Snap.unit x_7@358@01 3628920))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_7@358@01 3628920)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)) 5))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 8
; [eval] int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [eval] !int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 357 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@358@01, 3628920)), 5) | dead]
; [else-branch: 357 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@358@01, 3628920)), 5)) | live]
(push) ; 8
; [else-branch: 357 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@358@01, 3628920)), 5))]
(pop) ; 8
; [eval] !int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
; [eval] int___unbox__(_checkDefined(x_7, 3628920))
; [eval] _checkDefined(x_7, 3628920)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_7@358@01 3628920)) 5)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 358 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@358@01, 3628920)), 5)) | live]
; [else-branch: 358 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@358@01, 3628920)), 5) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 358 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_7@358@01, 3628920)), 5))]
; [exec]
; exhale perm(MustTerminate(_cthread_165)) > none ==>
;   acc(MustTerminate(_cthread_165), perm(MustTerminate(_cthread_165)) -
;   _loop_original_must_terminate_9)
; [eval] perm(MustTerminate(_cthread_165)) > none
; [eval] perm(MustTerminate(_cthread_165))
; [then-branch: 359 | False | dead]
; [else-branch: 359 | True | live]
(push) ; 9
; [else-branch: 359 | True]
; [exec]
; label post_loop_9
; [exec]
; label __end
; [eval] (forperm _r_48: Ref [MustInvokeBounded(_r_48)] :: false)
; [eval] (forperm _r_48: Ref [MustInvokeUnbounded(_r_48)] :: false)
; [eval] (forperm _r_48: Ref [_r_48.MustReleaseBounded] :: false)
; [eval] (forperm _r_48: Ref [_r_48.MustReleaseUnbounded] :: false)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- A_nested3 ----------
(declare-const _cthread_166@380@01 $Ref)
(declare-const _caller_measures_166@381@01 Seq<Measure$>)
(declare-const _residue_166@382@01 $Perm)
(declare-const self_9@383@01 $Ref)
(declare-const _current_wait_level_166@384@01 $Perm)
(declare-const _cthread_166@385@01 $Ref)
(declare-const _caller_measures_166@386@01 Seq<Measure$>)
(declare-const _residue_166@387@01 $Perm)
(declare-const self_9@388@01 $Ref)
(declare-const _current_wait_level_166@389@01 $Perm)
(push) ; 1
(declare-const $t@390@01 $Snap)
(assert (= $t@390@01 ($Snap.combine ($Snap.first $t@390@01) ($Snap.second $t@390@01))))
(assert (= ($Snap.first $t@390@01) $Snap.unit))
; [eval] _cthread_166 != null
(assert (not (= _cthread_166@385@01 $Ref.null)))
(assert (=
  ($Snap.second $t@390@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@390@01))
    ($Snap.second ($Snap.second $t@390@01)))))
(assert (= ($Snap.first ($Snap.second $t@390@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_166), Thread_0())
; [eval] typeof(_cthread_166)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_166@385@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@390@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@390@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@390@01))) $Snap.unit))
; [eval] issubtype(typeof(self_9), A())
; [eval] typeof(self_9)
; [eval] A()
(assert (issubtype<Bool> (typeof<PyType> self_9@388@01) (as A<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@390@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@390@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@390@01))))
  $Snap.unit))
; [eval] self_9 != null
(assert (not (= self_9@388@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))
  $Snap.unit))
; [eval] self_9.A_x == null || issubtype(typeof(self_9.A_x), ObjectLock())
; [eval] self_9.A_x == null
(push) ; 2
; [then-branch: 360 | First:(Second:(Second:(Second:(Second:($t@390@01))))) == Null | live]
; [else-branch: 360 | First:(Second:(Second:(Second:(Second:($t@390@01))))) != Null | live]
(push) ; 3
; [then-branch: 360 | First:(Second:(Second:(Second:(Second:($t@390@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))
  $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 360 | First:(Second:(Second:(Second:(Second:($t@390@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_9.A_x), ObjectLock())
; [eval] typeof(self_9.A_x)
; [eval] ObjectLock()
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01)))))))
  $Snap.unit))
; [eval] self_9.A_x != null
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))))
  $Snap.unit))
; [eval] _residue_166 < Level(self_9.A_x)
; [eval] Level(self_9.A_x)
(push) ; 2
(assert (Level%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))))
(pop) ; 2
; Joined path conditions
(assert (Level%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))))
(assert (<
  _residue_166@387@01
  (Level $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01)))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@391@01 $Snap)
(assert (= $t@391@01 ($Snap.combine ($Snap.first $t@391@01) ($Snap.second $t@391@01))))
(assert (= ($Snap.first $t@391@01) $Snap.unit))
; [eval] (forperm _r_55: Ref [_r_55.MustReleaseBounded] :: Level(_r_55) <= _current_wait_level_166)
(assert (=
  ($Snap.second $t@391@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@391@01))
    ($Snap.second ($Snap.second $t@391@01)))))
(assert (= ($Snap.first ($Snap.second $t@391@01)) $Snap.unit))
; [eval] (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: Level(_r_55) <= _current_wait_level_166)
(assert (=
  ($Snap.second ($Snap.second $t@391@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@391@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@391@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@391@01))) $Snap.unit))
; [eval] _residue_166 <= _current_wait_level_166
(assert (<= _residue_166@387@01 _current_wait_level_166@389@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@391@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@392@01 $Ref)
; [exec]
; var x_8: Ref
(declare-const x_8@393@01 $Ref)
; [exec]
; var y_3: Ref
(declare-const y_3@394@01 $Ref)
; [exec]
; var self_27: Ref
(declare-const self_27@395@01 $Ref)
; [exec]
; var _loop_measures_11: Seq[Measure$]
(declare-const _loop_measures_11@396@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_11: Bool
(declare-const _loop_check_before_11@397@01 Bool)
; [exec]
; var _loop_termination_flag_11: Bool
(declare-const _loop_termination_flag_11@398@01 Bool)
; [exec]
; var _loop_original_must_terminate_11: Perm
(declare-const _loop_original_must_terminate_11@399@01 $Perm)
; [exec]
; var _residue_187: Perm
(declare-const _residue_187@400@01 $Perm)
; [exec]
; var _loop_measures_12: Seq[Measure$]
(declare-const _loop_measures_12@401@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_12: Bool
(declare-const _loop_check_before_12@402@01 Bool)
; [exec]
; var _loop_termination_flag_12: Bool
(declare-const _loop_termination_flag_12@403@01 Bool)
; [exec]
; var _loop_original_must_terminate_12: Perm
(declare-const _loop_original_must_terminate_12@404@01 $Perm)
; [exec]
; var _residue_188: Perm
(declare-const _residue_188@405@01 $Perm)
; [exec]
; var _cwl_166: Perm
(declare-const _cwl_166@406@01 $Perm)
; [exec]
; var _method_measures_166: Seq[Measure$]
(declare-const _method_measures_166@407@01 Seq<Measure$>)
; [exec]
; _method_measures_166 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_9) == A()
(declare-const $t@408@01 $Snap)
(assert (= $t@408@01 $Snap.unit))
; [eval] typeof(self_9) == A()
; [eval] typeof(self_9)
; [eval] A()
(assert (= (typeof<PyType> self_9@388@01) (as A<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_27 := self_9
; [exec]
; x_8 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const x_8@409@01 $Ref)
(assert (= x_8@409@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(3694456)
(declare-const $t@410@01 $Snap)
(assert (= $t@410@01 $Snap.unit))
; [eval] _isDefined(3694456)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3694456))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3694456))
(assert (_isDefined $Snap.unit 3694456))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; y_3 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const y_3@411@01 $Ref)
(assert (= y_3@411@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(3366777)
(declare-const $t@412@01 $Snap)
(assert (= $t@412@01 $Snap.unit))
; [eval] _isDefined(3366777)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3366777))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3366777))
(assert (_isDefined $Snap.unit 3366777))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_166 := Lock_acquire(_cthread_166, _method_measures_166, _residue_166, self_27.A_x)
; [eval] _cthread_172 != null
; [eval] issubtype(typeof(_cthread_172), Thread_0())
; [eval] typeof(_cthread_172)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_15), Lock(Lock_arg(typeof(self_15), 0)))
; [eval] typeof(self_15)
; [eval] Lock(Lock_arg(typeof(self_15), 0))
; [eval] Lock_arg(typeof(self_15), 0)
; [eval] typeof(self_15)
(set-option :timeout 0)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))) 0)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))) 0))))
; [eval] issubtype(Lock_arg(typeof(self_15), 0), object())
; [eval] Lock_arg(typeof(self_15), 0)
; [eval] typeof(self_15)
; [eval] object()
(push) ; 3
(assert (not (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))) 0) (as object<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))) 0) (as object<PyType>  PyType)))
; [eval] self_15 != null
; [eval] (forperm _r_86: Ref [_r_86.MustReleaseBounded] :: Level(_r_86) < Level(self_15))
; [eval] (forperm _r_86: Ref [_r_86.MustReleaseUnbounded] :: Level(_r_86) < Level(self_15))
; [eval] _residue_172 < Level(self_15)
; [eval] Level(self_15)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] Measure$check(_caller_measures_172, _cthread_172, 1) || perm(MustTerminate(_cthread_172)) == none && ((forperm _r_88: Ref [MustInvokeBounded(_r_88)] :: false) && ((forperm _r_88: Ref [MustInvokeUnbounded(_r_88)] :: false) && ((forperm _r_88: Ref [_r_88.MustReleaseBounded] :: false) && (forperm _r_88: Ref [_r_88.MustReleaseUnbounded] :: false))))
; [eval] Measure$check(_caller_measures_172, _cthread_172, 1)
(push) ; 3
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_166@385@01 1))
(pop) ; 3
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_166@385@01 1))
(push) ; 3
; [then-branch: 361 | Measure$check(_, Nil, _cthread_166@385@01, 1) | live]
; [else-branch: 361 | !(Measure$check(_, Nil, _cthread_166@385@01, 1)) | live]
(push) ; 4
; [then-branch: 361 | Measure$check(_, Nil, _cthread_166@385@01, 1)]
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_166@385@01 1))
(pop) ; 4
(push) ; 4
; [else-branch: 361 | !(Measure$check(_, Nil, _cthread_166@385@01, 1))]
(assert (not
  (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_166@385@01 1)))
; [eval] perm(MustTerminate(_cthread_172)) == none && ((forperm _r_88: Ref [MustInvokeBounded(_r_88)] :: false) && ((forperm _r_88: Ref [MustInvokeUnbounded(_r_88)] :: false) && ((forperm _r_88: Ref [_r_88.MustReleaseBounded] :: false) && (forperm _r_88: Ref [_r_88.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_172)) == none
; [eval] perm(MustTerminate(_cthread_172))
(push) ; 5
; [then-branch: 362 | False | live]
; [else-branch: 362 | True | live]
(push) ; 6
; [then-branch: 362 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 362 | True]
; [eval] (forperm _r_88: Ref [MustInvokeBounded(_r_88)] :: false)
(push) ; 7
; [then-branch: 363 | False | live]
; [else-branch: 363 | True | live]
(push) ; 8
; [then-branch: 363 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 363 | True]
; [eval] (forperm _r_88: Ref [MustInvokeUnbounded(_r_88)] :: false)
(push) ; 9
; [then-branch: 364 | False | live]
; [else-branch: 364 | True | live]
(push) ; 10
; [then-branch: 364 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 364 | True]
; [eval] (forperm _r_88: Ref [_r_88.MustReleaseBounded] :: false)
(push) ; 11
; [then-branch: 365 | False | live]
; [else-branch: 365 | True | live]
(push) ; 12
; [then-branch: 365 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 365 | True]
; [eval] (forperm _r_88: Ref [_r_88.MustReleaseUnbounded] :: false)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_166@385@01 1))
  (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_166@385@01 1)))
(declare-const _current_wait_level_172@413@01 $Perm)
(declare-const $t@414@01 $Snap)
(assert (= $t@414@01 ($Snap.combine ($Snap.first $t@414@01) ($Snap.second $t@414@01))))
(assert (= ($Snap.first $t@414@01) $Snap.unit))
; [eval] (forperm _r_87: Ref [_r_87.MustReleaseBounded] :: Level(_r_87) <= _current_wait_level_172)
(assert (=
  ($Snap.second $t@414@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@414@01))
    ($Snap.second ($Snap.second $t@414@01)))))
(assert (= ($Snap.first ($Snap.second $t@414@01)) $Snap.unit))
; [eval] (forperm _r_87: Ref [_r_87.MustReleaseUnbounded] :: Level(_r_87) <= _current_wait_level_172)
(assert (=
  ($Snap.second ($Snap.second $t@414@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@414@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@414@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@414@01))) $Snap.unit))
; [eval] _residue_172 <= _current_wait_level_172
(assert (<= _residue_166@387@01 _current_wait_level_172@413@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@414@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@414@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@414@01)))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(Lock_invariant(self_27.A_x), write)
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@414@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@414@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@414@01))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@414@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@414@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@414@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@414@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@414@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0)))
; [eval] typeof(self_17)
; [eval] Lock(Lock_arg(typeof(self_17), 0))
; [eval] Lock_arg(typeof(self_17), 0)
; [eval] typeof(self_17)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@414@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@414@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@414@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@414@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0))) ==> true
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0)))
; [eval] typeof(self_17)
; [eval] Lock(Lock_arg(typeof(self_17), 0))
; [eval] Lock_arg(typeof(self_17), 0)
; [eval] typeof(self_17)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))) 0))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 366 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@390@01)))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@390@01)))))), 0))) | live]
; [else-branch: 366 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@390@01)))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@390@01)))))), 0)))) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 366 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@390@01)))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@390@01)))))), 0)))]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@414@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_17), ObjectLock()) ==> true
; [eval] issubtype(typeof(self_17), ObjectLock())
; [eval] typeof(self_17)
; [eval] ObjectLock()
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))) (as ObjectLock<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))) (as ObjectLock<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 367 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@390@01)))))), ObjectLock[PyType]) | live]
; [else-branch: 367 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@390@01)))))), ObjectLock[PyType])) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 367 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@390@01)))))), ObjectLock[PyType])]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))) (as ObjectLock<PyType>  PyType)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))) (as ObjectLock<PyType>  PyType)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Lock_invariant%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@414@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))))
; [exec]
; _loop_original_must_terminate_11 := perm(MustTerminate(_cthread_166))
; [eval] perm(MustTerminate(_cthread_166))
(declare-const _loop_original_must_terminate_11@415@01 $Perm)
(assert (= _loop_original_must_terminate_11@415@01 $Perm.No))
; [exec]
; _loop_termination_flag_11 := false
; [exec]
; _loop_check_before_11 := true
(declare-const _loop_measures_11@416@01 Seq<Measure$>)
(declare-const x_8@417@01 $Ref)
(declare-const _loop_original_must_terminate_12@418@01 $Perm)
(declare-const _loop_termination_flag_12@419@01 Bool)
(declare-const _loop_check_before_12@420@01 Bool)
(declare-const _loop_measures_12@421@01 Seq<Measure$>)
(declare-const y_3@422@01 $Ref)
(declare-const _loop_check_before_11@423@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@424@01 $Snap)
(assert (= $t@424@01 ($Snap.combine ($Snap.first $t@424@01) ($Snap.second $t@424@01))))
(assert (= ($Snap.first $t@424@01) $Snap.unit))
; [eval] (forperm _r_53: Ref [_r_53.MustReleaseBounded] :: Level(_r_53) <= _residue_187)
(assert (=
  ($Snap.second $t@424@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@424@01))
    ($Snap.second ($Snap.second $t@424@01)))))
(assert (= ($Snap.first ($Snap.second $t@424@01)) $Snap.unit))
; [eval] (forperm _r_53: Ref [_r_53.MustReleaseUnbounded] :: Level(_r_53) <= _residue_187)
(assert (=
  ($Snap.second ($Snap.second $t@424@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@424@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@424@01))) $Snap.unit))
; [eval] _residue_166 <= _residue_187
(assert (<= _residue_166@387@01 _residue_187@400@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@424@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@424@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@424@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(x_8), int())
; [eval] typeof(x_8)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> x_8@417@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(y_3), int())
; [eval] typeof(y_3)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> y_3@422@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))
  $Snap.unit))
; [eval] self_27.A_x == null || issubtype(typeof(self_27.A_x), ObjectLock())
; [eval] self_27.A_x == null
(push) ; 4
; [then-branch: 368 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@424@01))))))) == Null | live]
; [else-branch: 368 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@424@01))))))) != Null | live]
(push) ; 5
; [then-branch: 368 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@424@01))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))
  $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 368 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@424@01))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_27.A_x), ObjectLock())
; [eval] typeof(self_27.A_x)
; [eval] ObjectLock()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(x_8, 3694456)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_8, 3694456))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_8, 3694456)), 5)
; [eval] int___unbox__(_checkDefined(x_8, 3694456))
; [eval] _checkDefined(x_8, 3694456)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_8@417@01 3694456))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_8@417@01 3694456))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_8@417@01 3694456)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_8@417@01 3694456)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_8@417@01 3694456)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 369 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_8@417@01, 3694456)), 5) | live]
; [else-branch: 369 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_8@417@01, 3694456)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 369 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_8@417@01, 3694456)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_8, 3694456))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_8, 3694456)))
; [eval] int___unbox__(_checkDefined(x_8, 3694456))
; [eval] _checkDefined(x_8, 3694456)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456))))
(pop) ; 5
(push) ; 5
; [else-branch: 369 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_8@417@01, 3694456)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)) 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(x_8), int())
; [eval] typeof(x_8)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> x_8@409@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_8@409@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(y_3), int())
; [eval] typeof(y_3)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> y_3@411@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> y_3@411@01) (as int<PyType>  PyType)))
; [eval] self_27.A_x == null || issubtype(typeof(self_27.A_x), ObjectLock())
; [eval] self_27.A_x == null
(push) ; 4
; [then-branch: 370 | First:(Second:(Second:(Second:(Second:($t@390@01))))) == Null | live]
; [else-branch: 370 | First:(Second:(Second:(Second:(Second:($t@390@01))))) != Null | live]
(push) ; 5
; [then-branch: 370 | First:(Second:(Second:(Second:(Second:($t@390@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@390@01))))))
  $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 370 | First:(Second:(Second:(Second:(Second:($t@390@01))))) != Null]
; [eval] issubtype(typeof(self_27.A_x), ObjectLock())
; [eval] typeof(self_27.A_x)
; [eval] ObjectLock()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(x_8, 3694456)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_8, 3694456))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_8, 3694456)), 5)
; [eval] int___unbox__(_checkDefined(x_8, 3694456))
; [eval] _checkDefined(x_8, 3694456)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_8@409@01 3694456))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_8@409@01 3694456))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_8@409@01 3694456)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_8@409@01 3694456)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_8@409@01 3694456)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 371 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_8@409@01, 3694456)), 5) | live]
; [else-branch: 371 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_8@409@01, 3694456)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 371 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_8@409@01, 3694456)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_8, 3694456))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_8, 3694456)))
; [eval] int___unbox__(_checkDefined(x_8, 3694456))
; [eval] _checkDefined(x_8, 3694456)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456)) 5))
(push) ; 4
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456)))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456)))
    0)))
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 372 | True | live]
; [else-branch: 372 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 372 | True]
; [eval] perm(self_27.A_x.MustReleaseBounded) > none
; [eval] perm(self_27.A_x.MustReleaseBounded)
; [then-branch: 373 | False | dead]
; [else-branch: 373 | True | live]
(push) ; 5
; [else-branch: 373 | True]
; [eval] _loop_check_before_11 ==> _loop_termination_flag_11 || (!int___lt__(int___unbox__(_checkDefined(x_8, 3694456)), 5) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_54: Ref [MustInvokeBounded(_r_54)] :: false) && ((forperm _r_54: Ref [MustInvokeUnbounded(_r_54)] :: false) && ((forperm _r_54: Ref [_r_54.MustReleaseBounded] :: false) && (forperm _r_54: Ref [_r_54.MustReleaseUnbounded] :: false)))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 374 | True | live]
; [else-branch: 374 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 374 | True]
; [eval] _loop_termination_flag_11 || (!int___lt__(int___unbox__(_checkDefined(x_8, 3694456)), 5) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_54: Ref [MustInvokeBounded(_r_54)] :: false) && ((forperm _r_54: Ref [MustInvokeUnbounded(_r_54)] :: false) && ((forperm _r_54: Ref [_r_54.MustReleaseBounded] :: false) && (forperm _r_54: Ref [_r_54.MustReleaseUnbounded] :: false)))))
(push) ; 8
; [then-branch: 375 | False | live]
; [else-branch: 375 | True | live]
(push) ; 9
; [then-branch: 375 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 375 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(x_8, 3694456)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_8, 3694456)), 5)
; [eval] int___unbox__(_checkDefined(x_8, 3694456))
; [eval] _checkDefined(x_8, 3694456)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 376 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_8@409@01, 3694456)), 5)) | live]
; [else-branch: 376 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_8@409@01, 3694456)), 5) | live]
(push) ; 11
; [then-branch: 376 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_8@409@01, 3694456)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456)) 5)))
(pop) ; 11
(push) ; 11
; [else-branch: 376 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_8@409@01, 3694456)), 5)]
; [eval] perm(MustTerminate(_cthread_166)) == none && ((forperm _r_54: Ref [MustInvokeBounded(_r_54)] :: false) && ((forperm _r_54: Ref [MustInvokeUnbounded(_r_54)] :: false) && ((forperm _r_54: Ref [_r_54.MustReleaseBounded] :: false) && (forperm _r_54: Ref [_r_54.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_166)) == none
; [eval] perm(MustTerminate(_cthread_166))
(push) ; 12
; [then-branch: 377 | False | live]
; [else-branch: 377 | True | live]
(push) ; 13
; [then-branch: 377 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 377 | True]
; [eval] (forperm _r_54: Ref [MustInvokeBounded(_r_54)] :: false)
(push) ; 14
; [then-branch: 378 | False | live]
; [else-branch: 378 | True | live]
(push) ; 15
; [then-branch: 378 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 378 | True]
; [eval] (forperm _r_54: Ref [MustInvokeUnbounded(_r_54)] :: false)
(push) ; 16
; [then-branch: 379 | False | live]
; [else-branch: 379 | True | live]
(push) ; 17
; [then-branch: 379 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 379 | True]
; [eval] (forperm _r_54: Ref [_r_54.MustReleaseBounded] :: false)
(push) ; 18
; [then-branch: 380 | False | live]
; [else-branch: 380 | True | live]
(push) ; 19
; [then-branch: 380 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 380 | True]
; [eval] (forperm _r_54: Ref [_r_54.MustReleaseUnbounded] :: false)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456)) 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456)) 5))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@409@01 3694456)) 5))))
; [eval] !_loop_check_before_11 ==> (forperm _r_54: Ref [MustInvokeBounded(_r_54)] :: false) && ((forperm _r_54: Ref [MustInvokeUnbounded(_r_54)] :: false) && ((forperm _r_54: Ref [_r_54.MustReleaseBounded] :: false) && (forperm _r_54: Ref [_r_54.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_11
(push) ; 6
; [then-branch: 381 | False | dead]
; [else-branch: 381 | True | live]
(push) ; 7
; [else-branch: 381 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 6
(assert (= $t@424@01 ($Snap.combine ($Snap.first $t@424@01) ($Snap.second $t@424@01))))
(assert (= ($Snap.first $t@424@01) $Snap.unit))
(assert (=
  ($Snap.second $t@424@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@424@01))
    ($Snap.second ($Snap.second $t@424@01)))))
(assert (= ($Snap.first ($Snap.second $t@424@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@424@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@424@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@424@01))) $Snap.unit))
(assert (<= _residue_166@387@01 _residue_187@400@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@424@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@424@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@424@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> x_8@417@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> y_3@422@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))
  $Snap.unit))
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit x_8@417@01 3694456))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_8@417@01 3694456)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 7
; [eval] int___lt__(int___unbox__(_checkDefined(x_8, 3694456)), 5)
; [eval] int___unbox__(_checkDefined(x_8, 3694456))
; [eval] _checkDefined(x_8, 3694456)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [eval] !int___lt__(int___unbox__(_checkDefined(x_8, 3694456)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_8, 3694456)), 5)
; [eval] int___unbox__(_checkDefined(x_8, 3694456))
; [eval] _checkDefined(x_8, 3694456)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(x_8, 3694456)), 5)
; [eval] int___unbox__(_checkDefined(x_8, 3694456))
; [eval] _checkDefined(x_8, 3694456)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)) 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)) 5)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 382 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_8@417@01, 3694456)), 5) | live]
; [else-branch: 382 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_8@417@01, 3694456)), 5)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 382 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_8@417@01, 3694456)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)) 5))
; [exec]
; _loop_measures_11 := Seq(Measure$create(true, self_27.A_x, int___sub__(10, int___unbox__(_checkDefined(x_8,
;   3694456)))))
; [eval] Seq(Measure$create(true, self_27.A_x, int___sub__(10, int___unbox__(_checkDefined(x_8, 3694456)))))
; [eval] Measure$create(true, self_27.A_x, int___sub__(10, int___unbox__(_checkDefined(x_8, 3694456))))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_8, 3694456)))
; [eval] int___unbox__(_checkDefined(x_8, 3694456))
; [eval] _checkDefined(x_8, 3694456)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456))))
(pop) ; 8
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456))))))
  1))
(declare-const _loop_measures_11@425@01 Seq<Measure$>)
(assert (=
  _loop_measures_11@425@01
  (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_8@417@01 3694456)))))))
; [exec]
; x_8 := __prim__int___box__(int___add__(int___unbox__(x_8), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(x_8), 1))
; [eval] int___add__(int___unbox__(x_8), 1)
; [eval] int___unbox__(x_8)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit x_8@417@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit x_8@417@01))
(push) ; 8
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_8@417@01) 1))
(pop) ; 8
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_8@417@01) 1))
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_8@417@01) 1)))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_8@417@01) 1)))
(declare-const x_8@426@01 $Ref)
(assert (=
  x_8@426@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_8@417@01) 1))))
; [exec]
; inhale _isDefined(3694456)
(declare-const $t@427@01 $Snap)
(assert (= $t@427@01 $Snap.unit))
; [eval] _isDefined(3694456)
(push) ; 8
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_12 := perm(MustTerminate(_cthread_166))
; [eval] perm(MustTerminate(_cthread_166))
(declare-const _loop_original_must_terminate_12@428@01 $Perm)
(assert (= _loop_original_must_terminate_12@428@01 $Perm.No))
; [exec]
; _loop_termination_flag_12 := false
; [exec]
; _loop_check_before_12 := true
(declare-const _loop_measures_12@429@01 Seq<Measure$>)
(declare-const y_3@430@01 $Ref)
(declare-const _loop_check_before_12@431@01 Bool)
(set-option :timeout 0)
(push) ; 8
; Loop head block: Check well-definedness of invariant
(declare-const $t@432@01 $Snap)
(assert (= $t@432@01 ($Snap.combine ($Snap.first $t@432@01) ($Snap.second $t@432@01))))
(assert (= ($Snap.first $t@432@01) $Snap.unit))
; [eval] (forperm _r_51: Ref [_r_51.MustReleaseBounded] :: Level(_r_51) <= _residue_188)
(assert (=
  ($Snap.second $t@432@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@432@01))
    ($Snap.second ($Snap.second $t@432@01)))))
(assert (= ($Snap.first ($Snap.second $t@432@01)) $Snap.unit))
; [eval] (forperm _r_51: Ref [_r_51.MustReleaseUnbounded] :: Level(_r_51) <= _residue_188)
(assert (=
  ($Snap.second ($Snap.second $t@432@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@432@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@432@01))) $Snap.unit))
; [eval] _residue_187 <= _residue_188
(assert (<= _residue_187@400@01 _residue_188@405@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@432@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@432@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(y_3), int())
; [eval] typeof(y_3)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> y_3@430@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@432@01))))))
  $Snap.unit))
(pop) ; 8
(push) ; 8
; Loop head block: Establish invariant
; [eval] issubtype(typeof(y_3), int())
; [eval] typeof(y_3)
; [eval] int()
; [eval] _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(y_3, 3366777)), 5) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false)))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 383 | True | live]
; [else-branch: 383 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 383 | True]
; [eval] _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(y_3, 3366777)), 5) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false)))))
(push) ; 11
; [then-branch: 384 | False | live]
; [else-branch: 384 | True | live]
(push) ; 12
; [then-branch: 384 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 384 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(y_3, 3366777)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_3, 3366777)), 5)
; [eval] int___unbox__(_checkDefined(y_3, 3366777))
; [eval] _checkDefined(y_3, 3366777)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_3@422@01 3366777))
(pop) ; 13
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_3@422@01 3366777))
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_3@422@01 3366777)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_3@422@01 3366777)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_3@422@01 3366777)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777))))
(push) ; 13
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5))
(pop) ; 13
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5))
(push) ; 13
; [then-branch: 385 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_3@422@01, 3366777)), 5)) | live]
; [else-branch: 385 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_3@422@01, 3366777)), 5) | live]
(push) ; 14
; [then-branch: 385 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_3@422@01, 3366777)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5)))
(pop) ; 14
(push) ; 14
; [else-branch: 385 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_3@422@01, 3366777)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5))
; [eval] perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_166)) == none
; [eval] perm(MustTerminate(_cthread_166))
(push) ; 15
; [then-branch: 386 | False | live]
; [else-branch: 386 | True | live]
(push) ; 16
; [then-branch: 386 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 386 | True]
; [eval] (forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false)
(push) ; 17
; [then-branch: 387 | False | live]
; [else-branch: 387 | True | live]
(push) ; 18
; [then-branch: 387 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 387 | True]
; [eval] (forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false)
(push) ; 19
; [then-branch: 388 | False | live]
; [else-branch: 388 | True | live]
(push) ; 20
; [then-branch: 388 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 388 | True]
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false)
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 389 | True | live]
; [else-branch: 389 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 389 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit y_3@422@01 3366777)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_3@422@01 3366777)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5)
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit y_3@422@01 3366777)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_3@422@01 3366777)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5)
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5)))))
(push) ; 9
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(y_3, 3366777)), 5) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 390 | True | live]
; [else-branch: 390 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 390 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(y_3, 3366777)), 5) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 11
; [then-branch: 391 | False | live]
; [else-branch: 391 | True | live]
(push) ; 12
; [then-branch: 391 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 391 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(y_3, 3366777)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_3, 3366777)), 5)
; [eval] int___unbox__(_checkDefined(y_3, 3366777))
; [eval] _checkDefined(y_3, 3366777)
(set-option :timeout 0)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
; [then-branch: 392 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_3@422@01, 3366777)), 5)) | live]
; [else-branch: 392 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_3@422@01, 3366777)), 5) | live]
(push) ; 14
; [then-branch: 392 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_3@422@01, 3366777)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 392 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_3@422@01, 3366777)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_166)) == none
; [eval] perm(MustTerminate(_cthread_166))
(set-option :timeout 0)
(push) ; 15
; [then-branch: 393 | False | live]
; [else-branch: 393 | True | live]
(push) ; 16
; [then-branch: 393 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 16
(set-option :timeout 0)
(push) ; 16
; [else-branch: 393 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false)
(set-option :timeout 0)
(push) ; 17
; [then-branch: 394 | False | live]
; [else-branch: 394 | True | live]
(push) ; 18
; [then-branch: 394 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 18
(set-option :timeout 0)
(push) ; 18
; [else-branch: 394 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false)
(set-option :timeout 0)
(push) ; 19
; [then-branch: 395 | False | live]
; [else-branch: 395 | True | live]
(push) ; 20
; [then-branch: 395 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 20
(set-option :timeout 0)
(push) ; 20
; [else-branch: 395 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false)
(set-option :timeout 0)
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 396 | True | live]
; [else-branch: 396 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 396 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 22
(pop) ; 21
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(y_3, 3366777)), 5) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 397 | True | live]
; [else-branch: 397 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 397 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(y_3, 3366777)), 5) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 11
; [then-branch: 398 | False | live]
; [else-branch: 398 | True | live]
(push) ; 12
; [then-branch: 398 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 398 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(y_3, 3366777)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_3, 3366777)), 5)
; [eval] int___unbox__(_checkDefined(y_3, 3366777))
; [eval] _checkDefined(y_3, 3366777)
(set-option :timeout 0)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
; [then-branch: 399 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_3@422@01, 3366777)), 5)) | live]
; [else-branch: 399 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_3@422@01, 3366777)), 5) | live]
(push) ; 14
; [then-branch: 399 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_3@422@01, 3366777)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 399 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_3@422@01, 3366777)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_166)) == none
; [eval] perm(MustTerminate(_cthread_166))
(set-option :timeout 0)
(push) ; 15
; [then-branch: 400 | False | live]
; [else-branch: 400 | True | live]
(push) ; 16
; [then-branch: 400 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 16
(set-option :timeout 0)
(push) ; 16
; [else-branch: 400 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false)
(set-option :timeout 0)
(push) ; 17
; [then-branch: 401 | False | live]
; [else-branch: 401 | True | live]
(push) ; 18
; [then-branch: 401 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 18
(set-option :timeout 0)
(push) ; 18
; [else-branch: 401 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false)
(set-option :timeout 0)
(push) ; 19
; [then-branch: 402 | False | live]
; [else-branch: 402 | True | live]
(push) ; 20
; [then-branch: 402 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 20
(set-option :timeout 0)
(push) ; 20
; [else-branch: 402 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false)
(set-option :timeout 0)
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 403 | True | live]
; [else-branch: 403 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 403 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 22
(pop) ; 21
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(y_3, 3366777)), 5) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 404 | True | live]
; [else-branch: 404 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 404 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(y_3, 3366777)), 5) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 11
; [then-branch: 405 | False | live]
; [else-branch: 405 | True | live]
(push) ; 12
; [then-branch: 405 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 405 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(y_3, 3366777)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_3, 3366777)), 5)
; [eval] int___unbox__(_checkDefined(y_3, 3366777))
; [eval] _checkDefined(y_3, 3366777)
(set-option :timeout 0)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
; [then-branch: 406 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_3@422@01, 3366777)), 5)) | live]
; [else-branch: 406 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_3@422@01, 3366777)), 5) | live]
(push) ; 14
; [then-branch: 406 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_3@422@01, 3366777)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 406 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_3@422@01, 3366777)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_166)) == none
; [eval] perm(MustTerminate(_cthread_166))
(set-option :timeout 0)
(push) ; 15
; [then-branch: 407 | False | live]
; [else-branch: 407 | True | live]
(push) ; 16
; [then-branch: 407 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 16
(set-option :timeout 0)
(push) ; 16
; [else-branch: 407 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false)
(set-option :timeout 0)
(push) ; 17
; [then-branch: 408 | False | live]
; [else-branch: 408 | True | live]
(push) ; 18
; [then-branch: 408 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 18
(set-option :timeout 0)
(push) ; 18
; [else-branch: 408 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false)
(set-option :timeout 0)
(push) ; 19
; [then-branch: 409 | False | live]
; [else-branch: 409 | True | live]
(push) ; 20
; [then-branch: 409 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 20
(set-option :timeout 0)
(push) ; 20
; [else-branch: 409 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false)
(set-option :timeout 0)
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 410 | True | live]
; [else-branch: 410 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 410 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 22
(pop) ; 21
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_3@422@01 3366777)) 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- A_nested4 ----------
(declare-const _cthread_167@433@01 $Ref)
(declare-const _caller_measures_167@434@01 Seq<Measure$>)
(declare-const _residue_167@435@01 $Perm)
(declare-const self_10@436@01 $Ref)
(declare-const _current_wait_level_167@437@01 $Perm)
(declare-const _cthread_167@438@01 $Ref)
(declare-const _caller_measures_167@439@01 Seq<Measure$>)
(declare-const _residue_167@440@01 $Perm)
(declare-const self_10@441@01 $Ref)
(declare-const _current_wait_level_167@442@01 $Perm)
(push) ; 1
(declare-const $t@443@01 $Snap)
(assert (= $t@443@01 ($Snap.combine ($Snap.first $t@443@01) ($Snap.second $t@443@01))))
(assert (= ($Snap.first $t@443@01) $Snap.unit))
; [eval] _cthread_167 != null
(assert (not (= _cthread_167@438@01 $Ref.null)))
(assert (=
  ($Snap.second $t@443@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@443@01))
    ($Snap.second ($Snap.second $t@443@01)))))
(assert (= ($Snap.first ($Snap.second $t@443@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_167), Thread_0())
; [eval] typeof(_cthread_167)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_167@438@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@443@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@443@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@443@01))) $Snap.unit))
; [eval] issubtype(typeof(self_10), A())
; [eval] typeof(self_10)
; [eval] A()
(assert (issubtype<Bool> (typeof<PyType> self_10@441@01) (as A<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@443@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@443@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@443@01))))
  $Snap.unit))
; [eval] self_10 != null
(assert (not (= self_10@441@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))
  $Snap.unit))
; [eval] self_10.A_x == null || issubtype(typeof(self_10.A_x), ObjectLock())
; [eval] self_10.A_x == null
(push) ; 2
; [then-branch: 411 | First:(Second:(Second:(Second:(Second:($t@443@01))))) == Null | live]
; [else-branch: 411 | First:(Second:(Second:(Second:(Second:($t@443@01))))) != Null | live]
(push) ; 3
; [then-branch: 411 | First:(Second:(Second:(Second:(Second:($t@443@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))
  $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 411 | First:(Second:(Second:(Second:(Second:($t@443@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_10.A_x), ObjectLock())
; [eval] typeof(self_10.A_x)
; [eval] ObjectLock()
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01)))))))
  $Snap.unit))
; [eval] self_10.A_x != null
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))))
  $Snap.unit))
; [eval] _residue_167 < Level(self_10.A_x)
; [eval] Level(self_10.A_x)
(push) ; 2
(assert (Level%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))))
(pop) ; 2
; Joined path conditions
(assert (Level%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))))
(assert (<
  _residue_167@440@01
  (Level $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01)))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@444@01 $Snap)
(assert (= $t@444@01 ($Snap.combine ($Snap.first $t@444@01) ($Snap.second $t@444@01))))
(assert (= ($Snap.first $t@444@01) $Snap.unit))
; [eval] (forperm _r_63: Ref [_r_63.MustReleaseBounded] :: Level(_r_63) <= _current_wait_level_167)
(assert (=
  ($Snap.second $t@444@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@444@01))
    ($Snap.second ($Snap.second $t@444@01)))))
(assert (= ($Snap.first ($Snap.second $t@444@01)) $Snap.unit))
; [eval] (forperm _r_63: Ref [_r_63.MustReleaseUnbounded] :: Level(_r_63) <= _current_wait_level_167)
(assert (=
  ($Snap.second ($Snap.second $t@444@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@444@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@444@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@444@01))) $Snap.unit))
; [eval] _residue_167 <= _current_wait_level_167
(assert (<= _residue_167@440@01 _current_wait_level_167@442@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@444@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@445@01 $Ref)
; [exec]
; var x_9: Ref
(declare-const x_9@446@01 $Ref)
; [exec]
; var y_4: Ref
(declare-const y_4@447@01 $Ref)
; [exec]
; var self_28: Ref
(declare-const self_28@448@01 $Ref)
; [exec]
; var _loop_measures_13: Seq[Measure$]
(declare-const _loop_measures_13@449@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_13: Bool
(declare-const _loop_check_before_13@450@01 Bool)
; [exec]
; var _loop_termination_flag_13: Bool
(declare-const _loop_termination_flag_13@451@01 Bool)
; [exec]
; var _loop_original_must_terminate_13: Perm
(declare-const _loop_original_must_terminate_13@452@01 $Perm)
; [exec]
; var _residue_189: Perm
(declare-const _residue_189@453@01 $Perm)
; [exec]
; var _loop_measures_14: Seq[Measure$]
(declare-const _loop_measures_14@454@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_14: Bool
(declare-const _loop_check_before_14@455@01 Bool)
; [exec]
; var _loop_termination_flag_14: Bool
(declare-const _loop_termination_flag_14@456@01 Bool)
; [exec]
; var _loop_original_must_terminate_14: Perm
(declare-const _loop_original_must_terminate_14@457@01 $Perm)
; [exec]
; var _residue_190: Perm
(declare-const _residue_190@458@01 $Perm)
; [exec]
; var _cwl_167: Perm
(declare-const _cwl_167@459@01 $Perm)
; [exec]
; var _method_measures_167: Seq[Measure$]
(declare-const _method_measures_167@460@01 Seq<Measure$>)
; [exec]
; _method_measures_167 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_10) == A()
(declare-const $t@461@01 $Snap)
(assert (= $t@461@01 $Snap.unit))
; [eval] typeof(self_10) == A()
; [eval] typeof(self_10)
; [eval] A()
(assert (= (typeof<PyType> self_10@441@01) (as A<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_28 := self_10
; [exec]
; x_9 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const x_9@462@01 $Ref)
(assert (= x_9@462@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(3759992)
(declare-const $t@463@01 $Snap)
(assert (= $t@463@01 $Snap.unit))
; [eval] _isDefined(3759992)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3759992))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3759992))
(assert (_isDefined $Snap.unit 3759992))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_167 := Lock_acquire(_cthread_167, _method_measures_167, _residue_167, self_28.A_x)
; [eval] _cthread_172 != null
; [eval] issubtype(typeof(_cthread_172), Thread_0())
; [eval] typeof(_cthread_172)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_15), Lock(Lock_arg(typeof(self_15), 0)))
; [eval] typeof(self_15)
; [eval] Lock(Lock_arg(typeof(self_15), 0))
; [eval] Lock_arg(typeof(self_15), 0)
; [eval] typeof(self_15)
(set-option :timeout 0)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))) 0)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))) 0))))
; [eval] issubtype(Lock_arg(typeof(self_15), 0), object())
; [eval] Lock_arg(typeof(self_15), 0)
; [eval] typeof(self_15)
; [eval] object()
(push) ; 3
(assert (not (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))) 0) (as object<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))) 0) (as object<PyType>  PyType)))
; [eval] self_15 != null
; [eval] (forperm _r_86: Ref [_r_86.MustReleaseBounded] :: Level(_r_86) < Level(self_15))
; [eval] (forperm _r_86: Ref [_r_86.MustReleaseUnbounded] :: Level(_r_86) < Level(self_15))
; [eval] _residue_172 < Level(self_15)
; [eval] Level(self_15)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] Measure$check(_caller_measures_172, _cthread_172, 1) || perm(MustTerminate(_cthread_172)) == none && ((forperm _r_88: Ref [MustInvokeBounded(_r_88)] :: false) && ((forperm _r_88: Ref [MustInvokeUnbounded(_r_88)] :: false) && ((forperm _r_88: Ref [_r_88.MustReleaseBounded] :: false) && (forperm _r_88: Ref [_r_88.MustReleaseUnbounded] :: false))))
; [eval] Measure$check(_caller_measures_172, _cthread_172, 1)
(push) ; 3
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_167@438@01 1))
(pop) ; 3
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_167@438@01 1))
(push) ; 3
; [then-branch: 412 | Measure$check(_, Nil, _cthread_167@438@01, 1) | live]
; [else-branch: 412 | !(Measure$check(_, Nil, _cthread_167@438@01, 1)) | live]
(push) ; 4
; [then-branch: 412 | Measure$check(_, Nil, _cthread_167@438@01, 1)]
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_167@438@01 1))
(pop) ; 4
(push) ; 4
; [else-branch: 412 | !(Measure$check(_, Nil, _cthread_167@438@01, 1))]
(assert (not
  (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_167@438@01 1)))
; [eval] perm(MustTerminate(_cthread_172)) == none && ((forperm _r_88: Ref [MustInvokeBounded(_r_88)] :: false) && ((forperm _r_88: Ref [MustInvokeUnbounded(_r_88)] :: false) && ((forperm _r_88: Ref [_r_88.MustReleaseBounded] :: false) && (forperm _r_88: Ref [_r_88.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_172)) == none
; [eval] perm(MustTerminate(_cthread_172))
(push) ; 5
; [then-branch: 413 | False | live]
; [else-branch: 413 | True | live]
(push) ; 6
; [then-branch: 413 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 413 | True]
; [eval] (forperm _r_88: Ref [MustInvokeBounded(_r_88)] :: false)
(push) ; 7
; [then-branch: 414 | False | live]
; [else-branch: 414 | True | live]
(push) ; 8
; [then-branch: 414 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 414 | True]
; [eval] (forperm _r_88: Ref [MustInvokeUnbounded(_r_88)] :: false)
(push) ; 9
; [then-branch: 415 | False | live]
; [else-branch: 415 | True | live]
(push) ; 10
; [then-branch: 415 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 415 | True]
; [eval] (forperm _r_88: Ref [_r_88.MustReleaseBounded] :: false)
(push) ; 11
; [then-branch: 416 | False | live]
; [else-branch: 416 | True | live]
(push) ; 12
; [then-branch: 416 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 416 | True]
; [eval] (forperm _r_88: Ref [_r_88.MustReleaseUnbounded] :: false)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_167@438@01 1))
  (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_167@438@01 1)))
(declare-const _current_wait_level_172@464@01 $Perm)
(declare-const $t@465@01 $Snap)
(assert (= $t@465@01 ($Snap.combine ($Snap.first $t@465@01) ($Snap.second $t@465@01))))
(assert (= ($Snap.first $t@465@01) $Snap.unit))
; [eval] (forperm _r_87: Ref [_r_87.MustReleaseBounded] :: Level(_r_87) <= _current_wait_level_172)
(assert (=
  ($Snap.second $t@465@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@465@01))
    ($Snap.second ($Snap.second $t@465@01)))))
(assert (= ($Snap.first ($Snap.second $t@465@01)) $Snap.unit))
; [eval] (forperm _r_87: Ref [_r_87.MustReleaseUnbounded] :: Level(_r_87) <= _current_wait_level_172)
(assert (=
  ($Snap.second ($Snap.second $t@465@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@465@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@465@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@465@01))) $Snap.unit))
; [eval] _residue_172 <= _current_wait_level_172
(assert (<= _residue_167@440@01 _current_wait_level_172@464@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@465@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@465@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@465@01)))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(Lock_invariant(self_28.A_x), write)
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@465@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@465@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@465@01))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@465@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@465@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@465@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@465@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@465@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0)))
; [eval] typeof(self_17)
; [eval] Lock(Lock_arg(typeof(self_17), 0))
; [eval] Lock_arg(typeof(self_17), 0)
; [eval] typeof(self_17)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@465@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@465@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@465@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@465@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0))) ==> true
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0)))
; [eval] typeof(self_17)
; [eval] Lock(Lock_arg(typeof(self_17), 0))
; [eval] Lock_arg(typeof(self_17), 0)
; [eval] typeof(self_17)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))) 0))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 417 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@443@01)))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@443@01)))))), 0))) | live]
; [else-branch: 417 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@443@01)))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@443@01)))))), 0)))) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 417 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@443@01)))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@443@01)))))), 0)))]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@465@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_17), ObjectLock()) ==> true
; [eval] issubtype(typeof(self_17), ObjectLock())
; [eval] typeof(self_17)
; [eval] ObjectLock()
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))) (as ObjectLock<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))) (as ObjectLock<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 418 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@443@01)))))), ObjectLock[PyType]) | live]
; [else-branch: 418 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@443@01)))))), ObjectLock[PyType])) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 418 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@443@01)))))), ObjectLock[PyType])]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))) (as ObjectLock<PyType>  PyType)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))) (as ObjectLock<PyType>  PyType)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Lock_invariant%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@465@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))))
; [exec]
; _loop_original_must_terminate_13 := perm(MustTerminate(_cthread_167))
; [eval] perm(MustTerminate(_cthread_167))
(declare-const _loop_original_must_terminate_13@466@01 $Perm)
(assert (= _loop_original_must_terminate_13@466@01 $Perm.No))
; [exec]
; _loop_termination_flag_13 := false
; [exec]
; _loop_check_before_13 := true
(declare-const _loop_measures_13@467@01 Seq<Measure$>)
(declare-const x_9@468@01 $Ref)
(declare-const y_4@469@01 $Ref)
(declare-const _loop_original_must_terminate_14@470@01 $Perm)
(declare-const _loop_termination_flag_14@471@01 Bool)
(declare-const _loop_check_before_14@472@01 Bool)
(declare-const _loop_measures_14@473@01 Seq<Measure$>)
(declare-const _cwl_167@474@01 $Perm)
(declare-const _loop_check_before_13@475@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@476@01 $Snap)
(assert (= $t@476@01 ($Snap.combine ($Snap.first $t@476@01) ($Snap.second $t@476@01))))
(assert (= ($Snap.first $t@476@01) $Snap.unit))
; [eval] (forperm _r_61: Ref [_r_61.MustReleaseBounded] :: Level(_r_61) <= _residue_189)
(assert (=
  ($Snap.second $t@476@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@476@01))
    ($Snap.second ($Snap.second $t@476@01)))))
(assert (= ($Snap.first ($Snap.second $t@476@01)) $Snap.unit))
; [eval] (forperm _r_61: Ref [_r_61.MustReleaseUnbounded] :: Level(_r_61) <= _residue_189)
(assert (=
  ($Snap.second ($Snap.second $t@476@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@476@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@476@01))) $Snap.unit))
; [eval] _residue_167 <= _residue_189
(assert (<= _residue_167@440@01 _residue_189@453@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@476@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@476@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@476@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(x_9), int())
; [eval] typeof(x_9)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> x_9@468@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
  $Snap.unit))
; [eval] self_28.A_x == null || issubtype(typeof(self_28.A_x), ObjectLock())
; [eval] self_28.A_x == null
(push) ; 4
; [then-branch: 419 | First:(Second:(Second:(Second:(Second:(Second:($t@476@01)))))) == Null | live]
; [else-branch: 419 | First:(Second:(Second:(Second:(Second:(Second:($t@476@01)))))) != Null | live]
(push) ; 5
; [then-branch: 419 | First:(Second:(Second:(Second:(Second:(Second:($t@476@01)))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
  $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 419 | First:(Second:(Second:(Second:(Second:(Second:($t@476@01)))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_28.A_x), ObjectLock())
; [eval] typeof(self_28.A_x)
; [eval] ObjectLock()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))))
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@468@01 3759992))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@468@01 3759992))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@468@01 3759992)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@468@01 3759992)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@468@01 3759992)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)) 5))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)) 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)) 5)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 420 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@468@01, 3759992)), 5) | live]
; [else-branch: 420 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@468@01, 3759992)), 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 420 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@468@01, 3759992)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)) 5))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_9, 3759992))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)) 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 421 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@468@01, 3759992)), 5) | live]
; [else-branch: 421 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@468@01, 3759992)), 5)) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 421 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@468@01, 3759992)), 5)]
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_9, 3759992))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_9, 3759992)))
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992))))
(pop) ; 7
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)) 5)
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)))))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)))
    0)))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))
  $Snap.unit))
(pop) ; 4
(push) ; 4
; [else-branch: 420 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@468@01, 3759992)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)) 5)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))
  $Snap.unit))
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(x_9), int())
; [eval] typeof(x_9)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> x_9@462@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_9@462@01) (as int<PyType>  PyType)))
; [eval] self_28.A_x == null || issubtype(typeof(self_28.A_x), ObjectLock())
; [eval] self_28.A_x == null
(push) ; 4
; [then-branch: 422 | First:(Second:(Second:(Second:(Second:($t@443@01))))) == Null | live]
; [else-branch: 422 | First:(Second:(Second:(Second:(Second:($t@443@01))))) != Null | live]
(push) ; 5
; [then-branch: 422 | First:(Second:(Second:(Second:(Second:($t@443@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@443@01))))))
  $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 422 | First:(Second:(Second:(Second:(Second:($t@443@01))))) != Null]
; [eval] issubtype(typeof(self_28.A_x), ObjectLock())
; [eval] typeof(self_28.A_x)
; [eval] ObjectLock()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@462@01 3759992))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@462@01 3759992))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@462@01 3759992)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@462@01 3759992)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@462@01 3759992)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992)) 5))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992)) 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992)) 5)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 423 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@462@01, 3759992)), 5) | live]
; [else-branch: 423 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@462@01, 3759992)), 5)) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 423 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@462@01, 3759992)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992)) 5))
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_9, 3759992))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992)) 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 424 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@462@01, 3759992)), 5) | live]
; [else-branch: 424 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@462@01, 3759992)), 5)) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 424 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@462@01, 3759992)), 5)]
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_9, 3759992))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_9, 3759992)))
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992))))
(pop) ; 7
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992)) 5)
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992)))))
(push) ; 5
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992)))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992)))
    0)))
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 425 | True | live]
; [else-branch: 425 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 425 | True]
; [eval] perm(self_28.A_x.MustReleaseBounded) > none
; [eval] perm(self_28.A_x.MustReleaseBounded)
; [then-branch: 426 | False | dead]
; [else-branch: 426 | True | live]
(push) ; 6
; [else-branch: 426 | True]
; [eval] _loop_check_before_13 ==> _loop_termination_flag_13 || (!int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5) || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_62: Ref [MustInvokeBounded(_r_62)] :: false) && ((forperm _r_62: Ref [MustInvokeUnbounded(_r_62)] :: false) && ((forperm _r_62: Ref [_r_62.MustReleaseBounded] :: false) && (forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: false)))))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 427 | True | live]
; [else-branch: 427 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 427 | True]
; [eval] _loop_termination_flag_13 || (!int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5) || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_62: Ref [MustInvokeBounded(_r_62)] :: false) && ((forperm _r_62: Ref [MustInvokeUnbounded(_r_62)] :: false) && ((forperm _r_62: Ref [_r_62.MustReleaseBounded] :: false) && (forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: false)))))
(push) ; 9
; [then-branch: 428 | False | live]
; [else-branch: 428 | True | live]
(push) ; 10
; [then-branch: 428 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 428 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 429 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@462@01, 3759992)), 5)) | live]
; [else-branch: 429 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@462@01, 3759992)), 5) | live]
(push) ; 12
; [then-branch: 429 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@462@01, 3759992)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992)) 5)))
(pop) ; 12
(push) ; 12
; [else-branch: 429 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@462@01, 3759992)), 5)]
; [eval] perm(MustTerminate(_cthread_167)) == none && ((forperm _r_62: Ref [MustInvokeBounded(_r_62)] :: false) && ((forperm _r_62: Ref [MustInvokeUnbounded(_r_62)] :: false) && ((forperm _r_62: Ref [_r_62.MustReleaseBounded] :: false) && (forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_167)) == none
; [eval] perm(MustTerminate(_cthread_167))
(push) ; 13
; [then-branch: 430 | False | live]
; [else-branch: 430 | True | live]
(push) ; 14
; [then-branch: 430 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 430 | True]
; [eval] (forperm _r_62: Ref [MustInvokeBounded(_r_62)] :: false)
(push) ; 15
; [then-branch: 431 | False | live]
; [else-branch: 431 | True | live]
(push) ; 16
; [then-branch: 431 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 431 | True]
; [eval] (forperm _r_62: Ref [MustInvokeUnbounded(_r_62)] :: false)
(push) ; 17
; [then-branch: 432 | False | live]
; [else-branch: 432 | True | live]
(push) ; 18
; [then-branch: 432 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 432 | True]
; [eval] (forperm _r_62: Ref [_r_62.MustReleaseBounded] :: false)
(push) ; 19
; [then-branch: 433 | False | live]
; [else-branch: 433 | True | live]
(push) ; 20
; [then-branch: 433 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 433 | True]
; [eval] (forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: false)
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992)) 5))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992)) 5))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@462@01 3759992)) 5))))
; [eval] !_loop_check_before_13 ==> (forperm _r_62: Ref [MustInvokeBounded(_r_62)] :: false) && ((forperm _r_62: Ref [MustInvokeUnbounded(_r_62)] :: false) && ((forperm _r_62: Ref [_r_62.MustReleaseBounded] :: false) && (forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_13
(push) ; 7
; [then-branch: 434 | False | dead]
; [else-branch: 434 | True | live]
(push) ; 8
; [else-branch: 434 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)) 5))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))
  $Snap.unit))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)) 5)
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)))))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)))
    0)))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))
  $Snap.unit))
(assert (= $t@476@01 ($Snap.combine ($Snap.first $t@476@01) ($Snap.second $t@476@01))))
(assert (= ($Snap.first $t@476@01) $Snap.unit))
(assert (=
  ($Snap.second $t@476@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@476@01))
    ($Snap.second ($Snap.second $t@476@01)))))
(assert (= ($Snap.first ($Snap.second $t@476@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@476@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@476@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@476@01))) $Snap.unit))
(assert (<= _residue_167@440@01 _residue_189@453@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@476@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@476@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@476@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> x_9@468@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
  $Snap.unit))
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))))
(assert (_checkDefined%precondition $Snap.unit x_9@468@01 3759992))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@468@01 3759992)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)) 5))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 8
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [eval] !int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)) 5))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 435 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@468@01, 3759992)), 5) | live]
; [else-branch: 435 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@468@01, 3759992)), 5)) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 435 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@468@01, 3759992)), 5)]
; [exec]
; _loop_measures_13 := Seq(Measure$create(int___lt__(int___unbox__(_checkDefined(x_9,
;   3759992)), 5), self_28.A_x, int___sub__(10, int___unbox__(_checkDefined(x_9,
;   3759992)))))
; [eval] Seq(Measure$create(int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5), self_28.A_x, int___sub__(10, int___unbox__(_checkDefined(x_9, 3759992)))))
; [eval] Measure$create(int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5), self_28.A_x, int___sub__(10, int___unbox__(_checkDefined(x_9, 3759992))))
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_9, 3759992)))
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992))))
(pop) ; 9
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)) 5) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992))))))
  1))
(declare-const _loop_measures_13@477@01 Seq<Measure$>)
(assert (=
  _loop_measures_13@477@01
  (Seq_singleton (Measure$create<Measure$> (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)) 5) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)))))))
; [exec]
; x_9 := __prim__int___box__(int___add__(int___unbox__(x_9), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(x_9), 1))
; [eval] int___add__(int___unbox__(x_9), 1)
; [eval] int___unbox__(x_9)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit x_9@468@01))
(pop) ; 9
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit x_9@468@01))
(push) ; 9
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_9@468@01) 1))
(pop) ; 9
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_9@468@01) 1))
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_9@468@01) 1)))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_9@468@01) 1)))
(declare-const x_9@478@01 $Ref)
(assert (=
  x_9@478@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_9@468@01) 1))))
; [exec]
; inhale _isDefined(3759992)
(declare-const $t@479@01 $Snap)
(assert (= $t@479@01 $Snap.unit))
; [eval] _isDefined(3759992)
(push) ; 9
(pop) ; 9
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; y_4 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const y_4@480@01 $Ref)
(assert (= y_4@480@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(3432313)
(declare-const $t@481@01 $Snap)
(assert (= $t@481@01 $Snap.unit))
; [eval] _isDefined(3432313)
(push) ; 9
(assert (_isDefined%precondition $Snap.unit 3432313))
(pop) ; 9
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3432313))
(assert (_isDefined $Snap.unit 3432313))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_14 := perm(MustTerminate(_cthread_167))
; [eval] perm(MustTerminate(_cthread_167))
(declare-const _loop_original_must_terminate_14@482@01 $Perm)
(assert (= _loop_original_must_terminate_14@482@01 $Perm.No))
; [exec]
; _loop_termination_flag_14 := false
; [exec]
; _loop_check_before_14 := true
(declare-const _loop_measures_14@483@01 Seq<Measure$>)
(declare-const y_4@484@01 $Ref)
(declare-const _cwl_167@485@01 $Perm)
(declare-const _loop_check_before_14@486@01 Bool)
(set-option :timeout 0)
(push) ; 9
; Loop head block: Check well-definedness of invariant
(declare-const $t@487@01 $Snap)
(assert (= $t@487@01 ($Snap.combine ($Snap.first $t@487@01) ($Snap.second $t@487@01))))
(assert (= ($Snap.first $t@487@01) $Snap.unit))
; [eval] (forperm _r_59: Ref [_r_59.MustReleaseBounded] :: Level(_r_59) <= _residue_190)
(assert (=
  ($Snap.second $t@487@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@487@01))
    ($Snap.second ($Snap.second $t@487@01)))))
(assert (= ($Snap.first ($Snap.second $t@487@01)) $Snap.unit))
; [eval] (forperm _r_59: Ref [_r_59.MustReleaseUnbounded] :: Level(_r_59) <= _residue_190)
(assert (=
  ($Snap.second ($Snap.second $t@487@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@487@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@487@01))) $Snap.unit))
; [eval] _residue_189 <= _residue_190
(assert (<= _residue_189@453@01 _residue_190@458@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@487@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@487@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@487@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(y_4), int())
; [eval] typeof(y_4)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> y_4@484@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
  $Snap.unit))
; [eval] self_28.A_x == null || issubtype(typeof(self_28.A_x), ObjectLock())
; [eval] self_28.A_x == null
(push) ; 10
; [then-branch: 436 | First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))) == Null | live]
; [else-branch: 436 | First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))) != Null | live]
(push) ; 11
; [then-branch: 436 | First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
  $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 436 | First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_28.A_x), ObjectLock())
; [eval] typeof(self_28.A_x)
; [eval] ObjectLock()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))))
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5) || int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_4@484@01 3432313))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_4@484@01 3432313))
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_4@484@01 3432313)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_4@484@01 3432313)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_4@484@01 3432313)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313))))
(push) ; 10
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))
(pop) ; 10
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))
(push) ; 10
; [then-branch: 437 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5) | live]
; [else-branch: 437 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5)) | live]
(push) ; 11
; [then-branch: 437 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))
(pop) ; 11
(push) ; 11
; [else-branch: 437 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)))
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@478@01 3759992))
(pop) ; 12
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@478@01 3759992))
(push) ; 12
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)))
(pop) ; 12
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992))))
(push) ; 12
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))
(pop) ; 12
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))
  (and
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))
    (_checkDefined%precondition $Snap.unit x_9@478@01 3759992)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 438 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5) || int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5) | live]
; [else-branch: 438 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5) || int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 438 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5) || int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5)]
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(y_4, 3432313))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 439 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5) | live]
; [else-branch: 439 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5)) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 439 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_4, 3432313))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_4, 3432313)))
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313))))
(pop) ; 13
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313))))
(pop) ; 12
(push) ; 12
; [else-branch: 439 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313))))))
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)))
    0)))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))
  $Snap.unit))
(pop) ; 10
(push) ; 10
; [else-branch: 438 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5) || int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5))]
(assert (not
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))
  $Snap.unit))
(pop) ; 10
(pop) ; 9
(push) ; 9
; Loop head block: Establish invariant
; [eval] issubtype(typeof(y_4), int())
; [eval] typeof(y_4)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> y_4@480@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> y_4@480@01) (as int<PyType>  PyType)))
; [eval] self_28.A_x == null || issubtype(typeof(self_28.A_x), ObjectLock())
; [eval] self_28.A_x == null
(push) ; 10
; [then-branch: 440 | First:(Second:(Second:(Second:(Second:(Second:($t@476@01)))))) == Null | live]
; [else-branch: 440 | First:(Second:(Second:(Second:(Second:(Second:($t@476@01)))))) != Null | live]
(push) ; 11
; [then-branch: 440 | First:(Second:(Second:(Second:(Second:(Second:($t@476@01)))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
  $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 440 | First:(Second:(Second:(Second:(Second:(Second:($t@476@01)))))) != Null]
; [eval] issubtype(typeof(self_28.A_x), ObjectLock())
; [eval] typeof(self_28.A_x)
; [eval] ObjectLock()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5) || int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_4@480@01 3432313))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_4@480@01 3432313))
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_4@480@01 3432313)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_4@480@01 3432313)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_4@480@01 3432313)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313))))
(push) ; 10
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5))
(pop) ; 10
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5))
(push) ; 10
; [then-branch: 441 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@480@01, 3432313)), 5) | live]
; [else-branch: 441 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@480@01, 3432313)), 5)) | live]
(push) ; 11
; [then-branch: 441 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@480@01, 3432313)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5))
(pop) ; 11
(push) ; 11
; [else-branch: 441 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@480@01, 3432313)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5)))
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@478@01 3759992))
(pop) ; 12
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@478@01 3759992))
(push) ; 12
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)))
(pop) ; 12
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992))))
(push) ; 12
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))
(pop) ; 12
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5))
  (and
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5))
    (_checkDefined%precondition $Snap.unit x_9@478@01 3759992)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5)))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5)
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 442 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@480@01, 3432313)), 5) || int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5) | live]
; [else-branch: 442 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@480@01, 3432313)), 5) || int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 442 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@480@01, 3432313)), 5) || int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5)]
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5)
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5)))
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(y_4, 3432313))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 443 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@480@01, 3432313)), 5) | live]
; [else-branch: 443 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@480@01, 3432313)), 5)) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 443 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@480@01, 3432313)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_4, 3432313))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_4, 3432313)))
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313))))
(pop) ; 13
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5))
(push) ; 11
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)))
    0)))
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 444 | True | live]
; [else-branch: 444 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 444 | True]
; [eval] perm(self_28.A_x.MustReleaseBounded) > none
; [eval] perm(self_28.A_x.MustReleaseBounded)
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 445 | True | live]
; [else-branch: 445 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 445 | True]
; [eval] _loop_check_before_14 ==> _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5) || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false) && ((forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false) && ((forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false) && (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)))))
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 446 | True | live]
; [else-branch: 446 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 446 | True]
; [eval] _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5) || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false) && ((forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false) && ((forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false) && (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)))))
(push) ; 15
; [then-branch: 447 | False | live]
; [else-branch: 447 | True | live]
(push) ; 16
; [then-branch: 447 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 447 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 17
; Joined path conditions
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
; [then-branch: 448 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@480@01, 3432313)), 5)) | live]
; [else-branch: 448 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@480@01, 3432313)), 5) | live]
(push) ; 18
; [then-branch: 448 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@480@01, 3432313)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5)))
(pop) ; 18
(push) ; 18
; [else-branch: 448 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@480@01, 3432313)), 5)]
; [eval] perm(MustTerminate(_cthread_167)) == none && ((forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false) && ((forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false) && ((forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false) && (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_167)) == none
; [eval] perm(MustTerminate(_cthread_167))
(push) ; 19
; [then-branch: 449 | False | live]
; [else-branch: 449 | True | live]
(push) ; 20
; [then-branch: 449 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 449 | True]
; [eval] (forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false)
(push) ; 21
; [then-branch: 450 | False | live]
; [else-branch: 450 | True | live]
(push) ; 22
; [then-branch: 450 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 450 | True]
; [eval] (forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false)
(push) ; 23
; [then-branch: 451 | False | live]
; [else-branch: 451 | True | live]
(push) ; 24
; [then-branch: 451 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 451 | True]
; [eval] (forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false)
(push) ; 25
; [then-branch: 452 | False | live]
; [else-branch: 452 | True | live]
(push) ; 26
; [then-branch: 452 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 452 | True]
; [eval] (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@480@01 3432313)) 5))))
; [eval] !_loop_check_before_14 ==> (forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false) && ((forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false) && ((forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false) && (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_14
(push) ; 13
; [then-branch: 453 | False | dead]
; [else-branch: 453 | True | live]
(push) ; 14
; [else-branch: 453 | True]
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 13
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))
  $Snap.unit))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313))))))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)))
    0)))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))
  $Snap.unit))
(assert (= $t@487@01 ($Snap.combine ($Snap.first $t@487@01) ($Snap.second $t@487@01))))
(assert (= ($Snap.first $t@487@01) $Snap.unit))
(assert (=
  ($Snap.second $t@487@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@487@01))
    ($Snap.second ($Snap.second $t@487@01)))))
(assert (= ($Snap.first ($Snap.second $t@487@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@487@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@487@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@487@01))) $Snap.unit))
(assert (<= _residue_189@453@01 _residue_190@458@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@487@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@487@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@487@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> y_4@484@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
  $Snap.unit))
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))))
(assert (_checkDefined%precondition $Snap.unit y_4@484@01 3432313))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_4@484@01 3432313)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))
(assert (=>
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))
  (and
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))
    (_checkDefined%precondition $Snap.unit x_9@478@01 3759992)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 14
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 15
; Joined path conditions
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
(push) ; 14
; [eval] !int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 15
; Joined path conditions
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 454 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5) | live]
; [else-branch: 454 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5)) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 454 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))
; [exec]
; _loop_measures_14 := Seq(Measure$create(int___lt__(int___unbox__(_checkDefined(y_4,
;   3432313)), 5) ||
;   int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5), self_28.A_x, int___sub__(10,
;   int___unbox__(_checkDefined(y_4, 3432313)))))
; [eval] Seq(Measure$create(int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5) || int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5), self_28.A_x, int___sub__(10, int___unbox__(_checkDefined(y_4, 3432313)))))
; [eval] Measure$create(int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5) || int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5), self_28.A_x, int___sub__(10, int___unbox__(_checkDefined(y_4, 3432313))))
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5) || int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 15
; Joined path conditions
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
; [then-branch: 455 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5) | live]
; [else-branch: 455 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5)) | live]
(push) ; 16
; [then-branch: 455 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5)]
(pop) ; 16
(push) ; 16
; [else-branch: 455 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)))
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@478@01 3759992))
(pop) ; 17
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@478@01 3759992))
(push) ; 17
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992))))
(push) ; 17
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))
(pop) ; 17
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_4, 3432313)))
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 15
; Joined path conditions
(push) ; 15
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313))))
(pop) ; 15
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> (or
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5)) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313))))))
  1))
(declare-const _loop_measures_14@488@01 Seq<Measure$>)
(assert (=
  _loop_measures_14@488@01
  (Seq_singleton (Measure$create<Measure$> (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5)) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)))))))
; [exec]
; y_4 := __prim__int___box__(int___add__(int___unbox__(y_4), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(y_4), 1))
; [eval] int___add__(int___unbox__(y_4), 1)
; [eval] int___unbox__(y_4)
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit y_4@484@01))
(pop) ; 15
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit y_4@484@01))
(push) ; 15
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit y_4@484@01) 1))
(pop) ; 15
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit y_4@484@01) 1))
(push) ; 15
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit y_4@484@01) 1)))
(pop) ; 15
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit y_4@484@01) 1)))
(declare-const y_4@489@01 $Ref)
(assert (=
  y_4@489@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit y_4@484@01) 1))))
; [exec]
; inhale _isDefined(3432313)
(declare-const $t@490@01 $Snap)
(assert (= $t@490@01 $Snap.unit))
; [eval] _isDefined(3432313)
(push) ; 15
(pop) ; 15
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] int___eq__(_checkDefined(y_4, 3432313), __prim__int___box__(5)) && int___eq__(_checkDefined(x_9, 3759992), __prim__int___box__(5))
; [eval] int___eq__(_checkDefined(y_4, 3432313), __prim__int___box__(5))
; [eval] _checkDefined(y_4, 3432313)
(set-option :timeout 0)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_4@489@01 3432313))
(pop) ; 15
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_4@489@01 3432313))
; [eval] __prim__int___box__(5)
(push) ; 15
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 15
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
(push) ; 15
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_4@489@01 3432313)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_4@489@01 3432313)) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit y_4@489@01 3432313) (__prim__int___box__ $Snap.unit 5)))
(pop) ; 15
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_4@489@01 3432313)) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit y_4@489@01 3432313) (__prim__int___box__ $Snap.unit 5))))
(push) ; 15
; [then-branch: 456 | !(int___eq__((_, _), _checkDefined(_, y_4@489@01, 3432313), __prim__int___box__(_, 5))) | live]
; [else-branch: 456 | int___eq__((_, _), _checkDefined(_, y_4@489@01, 3432313), __prim__int___box__(_, 5)) | live]
(push) ; 16
; [then-branch: 456 | !(int___eq__((_, _), _checkDefined(_, y_4@489@01, 3432313), __prim__int___box__(_, 5)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit y_4@489@01 3432313) (__prim__int___box__ $Snap.unit 5))))
(pop) ; 16
(push) ; 16
; [else-branch: 456 | int___eq__((_, _), _checkDefined(_, y_4@489@01, 3432313), __prim__int___box__(_, 5))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit y_4@489@01 3432313) (__prim__int___box__ $Snap.unit 5)))
; [eval] int___eq__(_checkDefined(x_9, 3759992), __prim__int___box__(5))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@478@01 3759992))
(pop) ; 17
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@478@01 3759992))
; [eval] __prim__int___box__(5)
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_9@478@01 3759992) (__prim__int___box__ $Snap.unit 5)))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_9@478@01 3759992) (__prim__int___box__ $Snap.unit 5))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit y_4@489@01 3432313) (__prim__int___box__ $Snap.unit 5))
  (and
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit y_4@489@01 3432313) (__prim__int___box__ $Snap.unit 5))
    (_checkDefined%precondition $Snap.unit x_9@478@01 3759992)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_9@478@01 3759992) (__prim__int___box__ $Snap.unit 5)))))
(assert (or
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit y_4@489@01 3432313) (__prim__int___box__ $Snap.unit 5))
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit y_4@489@01 3432313) (__prim__int___box__ $Snap.unit 5)))))
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (and
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit y_4@489@01 3432313) (__prim__int___box__ $Snap.unit 5))
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_9@478@01 3759992) (__prim__int___box__ $Snap.unit 5))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (and
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit y_4@489@01 3432313) (__prim__int___box__ $Snap.unit 5))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_9@478@01 3759992) (__prim__int___box__ $Snap.unit 5)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 457 | int___eq__((_, _), _checkDefined(_, y_4@489@01, 3432313), __prim__int___box__(_, 5)) && int___eq__((_, _), _checkDefined(_, x_9@478@01, 3759992), __prim__int___box__(_, 5)) | live]
; [else-branch: 457 | !(int___eq__((_, _), _checkDefined(_, y_4@489@01, 3432313), __prim__int___box__(_, 5)) && int___eq__((_, _), _checkDefined(_, x_9@478@01, 3759992), __prim__int___box__(_, 5))) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 457 | int___eq__((_, _), _checkDefined(_, y_4@489@01, 3432313), __prim__int___box__(_, 5)) && int___eq__((_, _), _checkDefined(_, x_9@478@01, 3759992), __prim__int___box__(_, 5))]
(assert (and
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit y_4@489@01 3432313) (__prim__int___box__ $Snap.unit 5))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_9@478@01 3759992) (__prim__int___box__ $Snap.unit 5))))
; [exec]
; fold acc(Lock_invariant(self_28.A_x), write)
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0)))
; [eval] typeof(self_17)
; [eval] Lock(Lock_arg(typeof(self_17), 0))
; [eval] Lock_arg(typeof(self_17), 0)
; [eval] typeof(self_17)
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))) 0)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))) 0))))
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0))) ==> true
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0)))
; [eval] typeof(self_17)
; [eval] Lock(Lock_arg(typeof(self_17), 0))
; [eval] Lock_arg(typeof(self_17), 0)
; [eval] typeof(self_17)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))) 0))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 458 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@487@01))))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@487@01))))))), 0))) | live]
; [else-branch: 458 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@487@01))))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@487@01))))))), 0)))) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 458 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@487@01))))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@487@01))))))), 0)))]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] issubtype(typeof(self_17), ObjectLock()) ==> true
; [eval] issubtype(typeof(self_17), ObjectLock())
; [eval] typeof(self_17)
; [eval] ObjectLock()
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))) (as ObjectLock<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))) (as ObjectLock<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 459 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@487@01))))))), ObjectLock[PyType]) | live]
; [else-branch: 459 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@487@01))))))), ObjectLock[PyType])) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 459 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:($t@487@01))))))), ObjectLock[PyType])]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))) (as ObjectLock<PyType>  PyType)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))) (as ObjectLock<PyType>  PyType)))
(assert (Lock_invariant%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))
; [exec]
; _cwl_167 := Lock_release(_cthread_167, _method_measures_167, _residue_190, self_28.A_x)
; [eval] _cthread_173 != null
; [eval] issubtype(typeof(_cthread_173), Thread_0())
; [eval] typeof(_cthread_173)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_16), Lock(Lock_arg(typeof(self_16), 0)))
; [eval] typeof(self_16)
; [eval] Lock(Lock_arg(typeof(self_16), 0))
; [eval] Lock_arg(typeof(self_16), 0)
; [eval] typeof(self_16)
; [eval] issubtype(Lock_arg(typeof(self_16), 0), object())
; [eval] Lock_arg(typeof(self_16), 0)
; [eval] typeof(self_16)
; [eval] object()
(push) ; 16
(assert (not (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))) 0) (as object<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))) 0) (as object<PyType>  PyType)))
; [eval] self_16 != null
; [eval] perm(self_16.MustReleaseBounded) > none && Measure$check(_caller_measures_173, self_16, 1)
; [eval] perm(self_16.MustReleaseBounded) > none
; [eval] perm(self_16.MustReleaseBounded)
(push) ; 16
; [then-branch: 460 | False | live]
; [else-branch: 460 | True | live]
(push) ; 17
; [then-branch: 460 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 460 | True]
; [eval] Measure$check(_caller_measures_173, self_16, 1)
(push) ; 18
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))) 1))
(pop) ; 18
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))) 1))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))) 1))
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))) 1))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))) 1)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 461 | Measure$check(_, Nil, First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))), 1) | live]
; [else-branch: 461 | !(Measure$check(_, Nil, First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))), 1)) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 461 | Measure$check(_, Nil, First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))), 1)]
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))) 1))
; [eval] Measure$check(_caller_measures_173, _cthread_173, 1) || perm(MustTerminate(_cthread_173)) == none && ((forperm _r_90: Ref [MustInvokeBounded(_r_90)] :: false) && ((forperm _r_90: Ref [MustInvokeUnbounded(_r_90)] :: false) && ((forperm _r_90: Ref [_r_90.MustReleaseBounded] :: false) && (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: false))))
; [eval] Measure$check(_caller_measures_173, _cthread_173, 1)
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
; [then-branch: 462 | Measure$check(_, Nil, _cthread_167@438@01, 1) | live]
; [else-branch: 462 | !(Measure$check(_, Nil, _cthread_167@438@01, 1)) | live]
(push) ; 18
; [then-branch: 462 | Measure$check(_, Nil, _cthread_167@438@01, 1)]
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_167@438@01 1))
(pop) ; 18
(push) ; 18
; [else-branch: 462 | !(Measure$check(_, Nil, _cthread_167@438@01, 1))]
(assert (not
  (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_167@438@01 1)))
; [eval] perm(MustTerminate(_cthread_173)) == none && ((forperm _r_90: Ref [MustInvokeBounded(_r_90)] :: false) && ((forperm _r_90: Ref [MustInvokeUnbounded(_r_90)] :: false) && ((forperm _r_90: Ref [_r_90.MustReleaseBounded] :: false) && (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_173)) == none
; [eval] perm(MustTerminate(_cthread_173))
(push) ; 19
; [then-branch: 463 | False | live]
; [else-branch: 463 | True | live]
(push) ; 20
; [then-branch: 463 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 463 | True]
; [eval] (forperm _r_90: Ref [MustInvokeBounded(_r_90)] :: false)
(push) ; 21
; [then-branch: 464 | False | live]
; [else-branch: 464 | True | live]
(push) ; 22
; [then-branch: 464 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 464 | True]
; [eval] (forperm _r_90: Ref [MustInvokeUnbounded(_r_90)] :: false)
(push) ; 23
; [then-branch: 465 | False | live]
; [else-branch: 465 | True | live]
(push) ; 24
; [then-branch: 465 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 465 | True]
; [eval] (forperm _r_90: Ref [_r_90.MustReleaseBounded] :: false)
(push) ; 25
; [then-branch: 466 | False | live]
; [else-branch: 466 | True | live]
(push) ; 26
; [then-branch: 466 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 466 | True]
; [eval] (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: false)
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(declare-const _current_wait_level_173@491@01 $Perm)
(declare-const $t@492@01 $Snap)
(assert (= $t@492@01 ($Snap.combine ($Snap.first $t@492@01) ($Snap.second $t@492@01))))
(assert (= ($Snap.first $t@492@01) $Snap.unit))
; [eval] (forperm _r_89: Ref [_r_89.MustReleaseBounded] :: Level(_r_89) <= _current_wait_level_173)
(assert (=
  ($Snap.second $t@492@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@492@01))
    ($Snap.second ($Snap.second $t@492@01)))))
(assert (= ($Snap.first ($Snap.second $t@492@01)) $Snap.unit))
; [eval] (forperm _r_89: Ref [_r_89.MustReleaseUnbounded] :: Level(_r_89) <= _current_wait_level_173)
(assert (= ($Snap.second ($Snap.second $t@492@01)) $Snap.unit))
; [eval] _residue_173 <= _current_wait_level_173
(assert (<= _residue_190@458@01 _current_wait_level_173@491@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label loop_end_14
; [exec]
; _loop_check_before_14 := false
; [exec]
; assert _loop_termination_flag_14 ==>
;   !int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] _loop_termination_flag_14 ==> !int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
(set-option :timeout 0)
(push) ; 17
; [then-branch: 467 | False | dead]
; [else-branch: 467 | True | live]
(push) ; 18
; [else-branch: 467 | True]
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(y_4), int())
; [eval] typeof(y_4)
; [eval] int()
(push) ; 17
(assert (not (issubtype<Bool> (typeof<PyType> y_4@489@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> y_4@489@01) (as int<PyType>  PyType)))
; [eval] self_28.A_x == null || issubtype(typeof(self_28.A_x), ObjectLock())
; [eval] self_28.A_x == null
(push) ; 17
; [then-branch: 468 | First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))) == Null | live]
; [else-branch: 468 | First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))) != Null | live]
(push) ; 18
; [then-branch: 468 | First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
  $Ref.null))
(pop) ; 18
(push) ; 18
; [else-branch: 468 | First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))) != Null]
; [eval] issubtype(typeof(self_28.A_x), ObjectLock())
; [eval] typeof(self_28.A_x)
; [eval] ObjectLock()
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5) || int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)))
(pop) ; 17
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)))
(push) ; 17
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5))
(pop) ; 17
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5))
(push) ; 17
; [then-branch: 469 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@489@01, 3432313)), 5) | live]
; [else-branch: 469 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@489@01, 3432313)), 5)) | live]
(push) ; 18
; [then-branch: 469 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@489@01, 3432313)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5))
(pop) ; 18
(push) ; 18
; [else-branch: 469 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@489@01, 3432313)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5)))
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 19
; [eval] _isDefined(id)
(push) ; 20
(pop) ; 20
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@478@01 3759992))
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@478@01 3759992))
(push) ; 19
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 20
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)))
(pop) ; 19
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992))))
(push) ; 19
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))
(pop) ; 19
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5))
  (and
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5))
    (_checkDefined%precondition $Snap.unit x_9@478@01 3759992)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5)))
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 470 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@489@01, 3432313)), 5) || int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5) | dead]
; [else-branch: 470 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@489@01, 3432313)), 5) || int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5)) | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 470 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@489@01, 3432313)), 5) || int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5))]
(assert (not
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))))
; [eval] _loop_check_before_14 ==> _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5) || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false) && ((forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false) && ((forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false) && (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)))))
(push) ; 18
; [then-branch: 471 | False | dead]
; [else-branch: 471 | True | live]
(push) ; 19
; [else-branch: 471 | True]
(pop) ; 19
(pop) ; 18
; Joined path conditions
; [eval] !_loop_check_before_14 ==> (forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false) && ((forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false) && ((forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false) && (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_14
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 472 | True | live]
; [else-branch: 472 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 472 | True]
; [eval] (forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false) && ((forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false) && ((forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false) && (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false)
(push) ; 20
; [then-branch: 473 | False | live]
; [else-branch: 473 | True | live]
(push) ; 21
; [then-branch: 473 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 473 | True]
; [eval] (forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false)
(push) ; 22
; [then-branch: 474 | False | live]
; [else-branch: 474 | True | live]
(push) ; 23
; [then-branch: 474 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 474 | True]
; [eval] (forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false)
(push) ; 24
; [then-branch: 475 | False | live]
; [else-branch: 475 | True | live]
(push) ; 25
; [then-branch: 475 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 475 | True]
; [eval] (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
(pop) ; 17
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 457 | !(int___eq__((_, _), _checkDefined(_, y_4@489@01, 3432313), __prim__int___box__(_, 5)) && int___eq__((_, _), _checkDefined(_, x_9@478@01, 3759992), __prim__int___box__(_, 5)))]
(assert (not
  (and
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit y_4@489@01 3432313) (__prim__int___box__ $Snap.unit 5))
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_9@478@01 3759992) (__prim__int___box__ $Snap.unit 5)))))
(pop) ; 15
; [eval] !(int___eq__(_checkDefined(y_4, 3432313), __prim__int___box__(5)) && int___eq__(_checkDefined(x_9, 3759992), __prim__int___box__(5)))
; [eval] int___eq__(_checkDefined(y_4, 3432313), __prim__int___box__(5)) && int___eq__(_checkDefined(x_9, 3759992), __prim__int___box__(5))
; [eval] int___eq__(_checkDefined(y_4, 3432313), __prim__int___box__(5))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
; [eval] __prim__int___box__(5)
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 15
; Joined path conditions
(push) ; 15
; [then-branch: 476 | !(int___eq__((_, _), _checkDefined(_, y_4@489@01, 3432313), __prim__int___box__(_, 5))) | live]
; [else-branch: 476 | int___eq__((_, _), _checkDefined(_, y_4@489@01, 3432313), __prim__int___box__(_, 5)) | live]
(push) ; 16
; [then-branch: 476 | !(int___eq__((_, _), _checkDefined(_, y_4@489@01, 3432313), __prim__int___box__(_, 5)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit y_4@489@01 3432313) (__prim__int___box__ $Snap.unit 5))))
(pop) ; 16
(push) ; 16
; [else-branch: 476 | int___eq__((_, _), _checkDefined(_, y_4@489@01, 3432313), __prim__int___box__(_, 5))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit y_4@489@01 3432313) (__prim__int___box__ $Snap.unit 5)))
; [eval] int___eq__(_checkDefined(x_9, 3759992), __prim__int___box__(5))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@478@01 3759992))
(pop) ; 17
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@478@01 3759992))
; [eval] __prim__int___box__(5)
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_9@478@01 3759992) (__prim__int___box__ $Snap.unit 5)))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_9@478@01 3759992) (__prim__int___box__ $Snap.unit 5))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (and
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit y_4@489@01 3432313) (__prim__int___box__ $Snap.unit 5))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_9@478@01 3759992) (__prim__int___box__ $Snap.unit 5)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (and
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit y_4@489@01 3432313) (__prim__int___box__ $Snap.unit 5))
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_9@478@01 3759992) (__prim__int___box__ $Snap.unit 5))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 477 | !(int___eq__((_, _), _checkDefined(_, y_4@489@01, 3432313), __prim__int___box__(_, 5)) && int___eq__((_, _), _checkDefined(_, x_9@478@01, 3759992), __prim__int___box__(_, 5))) | live]
; [else-branch: 477 | int___eq__((_, _), _checkDefined(_, y_4@489@01, 3432313), __prim__int___box__(_, 5)) && int___eq__((_, _), _checkDefined(_, x_9@478@01, 3759992), __prim__int___box__(_, 5)) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 477 | !(int___eq__((_, _), _checkDefined(_, y_4@489@01, 3432313), __prim__int___box__(_, 5)) && int___eq__((_, _), _checkDefined(_, x_9@478@01, 3759992), __prim__int___box__(_, 5)))]
(assert (not
  (and
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit y_4@489@01 3432313) (__prim__int___box__ $Snap.unit 5))
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_9@478@01 3759992) (__prim__int___box__ $Snap.unit 5)))))
; [exec]
; label loop_end_14
; [exec]
; _loop_check_before_14 := false
; [exec]
; assert _loop_termination_flag_14 ==>
;   !int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] _loop_termination_flag_14 ==> !int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
(push) ; 16
; [then-branch: 478 | False | dead]
; [else-branch: 478 | True | live]
(push) ; 17
; [else-branch: 478 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(y_4), int())
; [eval] typeof(y_4)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> y_4@489@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> y_4@489@01) (as int<PyType>  PyType)))
; [eval] self_28.A_x == null || issubtype(typeof(self_28.A_x), ObjectLock())
; [eval] self_28.A_x == null
(push) ; 16
; [then-branch: 479 | First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))) == Null | live]
; [else-branch: 479 | First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))) != Null | live]
(push) ; 17
; [then-branch: 479 | First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
  $Ref.null))
(pop) ; 17
(push) ; 17
; [else-branch: 479 | First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))) != Null]
; [eval] issubtype(typeof(self_28.A_x), ObjectLock())
; [eval] typeof(self_28.A_x)
; [eval] ObjectLock()
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5) || int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 16
; [eval] _isDefined(id)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
; Joined path conditions
(push) ; 16
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)))
(pop) ; 16
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)))
(push) ; 16
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5))
(pop) ; 16
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5))
(push) ; 16
; [then-branch: 480 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@489@01, 3432313)), 5) | live]
; [else-branch: 480 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@489@01, 3432313)), 5)) | live]
(push) ; 17
; [then-branch: 480 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@489@01, 3432313)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5))
(pop) ; 17
(push) ; 17
; [else-branch: 480 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@489@01, 3432313)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5)))
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@478@01 3759992))
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@478@01 3759992))
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992))))
(push) ; 18
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))
(pop) ; 18
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5))
  (and
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5))
    (_checkDefined%precondition $Snap.unit x_9@478@01 3759992)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5)))
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5)
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 481 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@489@01, 3432313)), 5) || int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5) | live]
; [else-branch: 481 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@489@01, 3432313)), 5) || int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5)) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 481 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@489@01, 3432313)), 5) || int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5)]
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5)
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5)))
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(y_4, 3432313))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 17
; Joined path conditions
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 482 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@489@01, 3432313)), 5) | live]
; [else-branch: 482 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@489@01, 3432313)), 5)) | live]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 482 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@489@01, 3432313)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_4, 3432313))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_4, 3432313)))
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 19
; [eval] _isDefined(id)
(push) ; 20
(pop) ; 20
; Joined path conditions
(pop) ; 19
; Joined path conditions
(push) ; 19
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 19
; Joined path conditions
(push) ; 19
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313))))
(pop) ; 19
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313))))
(pop) ; 18
(push) ; 18
; [else-branch: 482 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@489@01, 3432313)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313))))))
; Joined path conditions
(push) ; 17
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)))
    0))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)))
    0)))
; [then-branch: 483 | False | dead]
; [else-branch: 483 | True | live]
(push) ; 17
; [else-branch: 483 | True]
; [eval] perm(self_28.A_x.MustReleaseBounded) > none && Measure$check(_loop_measures_14, self_28.A_x, int___sub__(10, int___unbox__(_checkDefined(y_4, 3432313))))
; [eval] perm(self_28.A_x.MustReleaseBounded) > none
; [eval] perm(self_28.A_x.MustReleaseBounded)
(push) ; 18
; [then-branch: 484 | False | live]
; [else-branch: 484 | True | live]
(push) ; 19
; [then-branch: 484 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 484 | True]
; [eval] Measure$check(_loop_measures_14, self_28.A_x, int___sub__(10, int___unbox__(_checkDefined(y_4, 3432313))))
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_4, 3432313)))
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
; Joined path conditions
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 20
; Joined path conditions
(push) ; 20
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313))))
(pop) ; 20
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313))))
(push) ; 20
(assert (Measure$check%precondition $Snap.unit _loop_measures_14@488@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)))))
(pop) ; 20
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_14@488@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (and
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)))
  (Measure$check%precondition $Snap.unit _loop_measures_14@488@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313))))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (Measure$check $Snap.unit _loop_measures_14@488@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (Measure$check $Snap.unit _loop_measures_14@488@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 485 | Measure$check(_, _loop_measures_14@488@01, First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, y_4@489@01, 3432313)))) | live]
; [else-branch: 485 | !(Measure$check(_, _loop_measures_14@488@01, First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, y_4@489@01, 3432313))))) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 485 | Measure$check(_, _loop_measures_14@488@01, First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, y_4@489@01, 3432313))))]
(assert (Measure$check $Snap.unit _loop_measures_14@488@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@489@01 3432313)))))
; [eval] _loop_check_before_14 ==> _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5) || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false) && ((forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false) && ((forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false) && (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)))))
(push) ; 19
; [then-branch: 486 | False | dead]
; [else-branch: 486 | True | live]
(push) ; 20
; [else-branch: 486 | True]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; [eval] !_loop_check_before_14 ==> (forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false) && ((forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false) && ((forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false) && (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_14
(push) ; 19
(push) ; 20
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 487 | True | live]
; [else-branch: 487 | False | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 487 | True]
; [eval] (forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false) && ((forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false) && ((forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false) && (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false)
(push) ; 21
; [then-branch: 488 | False | live]
; [else-branch: 488 | True | live]
(push) ; 22
; [then-branch: 488 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 488 | True]
; [eval] (forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false)
(push) ; 23
; [then-branch: 489 | False | live]
; [else-branch: 489 | True | live]
(push) ; 24
; [then-branch: 489 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 489 | True]
; [eval] (forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false)
(push) ; 25
; [then-branch: 490 | False | live]
; [else-branch: 490 | True | live]
(push) ; 26
; [then-branch: 490 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 490 | True]
; [eval] (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 477 | int___eq__((_, _), _checkDefined(_, y_4@489@01, 3432313), __prim__int___box__(_, 5)) && int___eq__((_, _), _checkDefined(_, x_9@478@01, 3759992), __prim__int___box__(_, 5))]
(assert (and
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit y_4@489@01 3432313) (__prim__int___box__ $Snap.unit 5))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit x_9@478@01 3759992) (__prim__int___box__ $Snap.unit 5))))
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 454 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)))
(pop) ; 14
; [eval] !int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 491 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5)) | live]
; [else-branch: 491 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 491 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)))
; [exec]
; exhale perm(MustTerminate(_cthread_167)) > none ==>
;   acc(MustTerminate(_cthread_167), perm(MustTerminate(_cthread_167)) -
;   _loop_original_must_terminate_14)
; [eval] perm(MustTerminate(_cthread_167)) > none
; [eval] perm(MustTerminate(_cthread_167))
; [then-branch: 492 | False | dead]
; [else-branch: 492 | True | live]
(push) ; 15
; [else-branch: 492 | True]
; [exec]
; label post_loop_14
; [exec]
; label loop_end_13
; [exec]
; _loop_check_before_13 := false
; [exec]
; assert _loop_termination_flag_13 ==>
;   !int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] _loop_termination_flag_13 ==> !int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
(push) ; 16
; [then-branch: 493 | False | dead]
; [else-branch: 493 | True | live]
(push) ; 17
; [else-branch: 493 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(x_9), int())
; [eval] typeof(x_9)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> x_9@478@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_9@478@01) (as int<PyType>  PyType)))
; [eval] self_28.A_x == null || issubtype(typeof(self_28.A_x), ObjectLock())
; [eval] self_28.A_x == null
(push) ; 16
; [then-branch: 494 | First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))) == Null | live]
; [else-branch: 494 | First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))) != Null | live]
(push) ; 17
; [then-branch: 494 | First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
  $Ref.null))
(pop) ; 17
(push) ; 17
; [else-branch: 494 | First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))) != Null]
; [eval] issubtype(typeof(self_28.A_x), ObjectLock())
; [eval] typeof(self_28.A_x)
; [eval] ObjectLock()
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 16
; [eval] _isDefined(id)
(push) ; 17
(pop) ; 17
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@478@01 3759992))
(pop) ; 16
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@478@01 3759992))
(push) ; 16
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 17
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)))
(pop) ; 16
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992))))
(push) ; 16
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))
(pop) ; 16
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 495 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5) | live]
; [else-branch: 495 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5)) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 495 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_9, 3759992))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 17
; Joined path conditions
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 496 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5) | live]
; [else-branch: 496 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5)) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 496 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5)]
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_9, 3759992))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_9, 3759992)))
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 19
; [eval] _isDefined(id)
(push) ; 20
(pop) ; 20
; Joined path conditions
(pop) ; 19
; Joined path conditions
(push) ; 19
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 19
; Joined path conditions
(push) ; 19
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992))))
(pop) ; 19
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5)
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)))))
(push) ; 17
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)))
    0))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)))
    0)))
; [then-branch: 497 | False | dead]
; [else-branch: 497 | True | live]
(push) ; 17
; [else-branch: 497 | True]
; [eval] perm(self_28.A_x.MustReleaseBounded) > none && Measure$check(_loop_measures_13, self_28.A_x, int___sub__(10, int___unbox__(_checkDefined(x_9, 3759992))))
; [eval] perm(self_28.A_x.MustReleaseBounded) > none
; [eval] perm(self_28.A_x.MustReleaseBounded)
(push) ; 18
; [then-branch: 498 | False | live]
; [else-branch: 498 | True | live]
(push) ; 19
; [then-branch: 498 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 498 | True]
; [eval] Measure$check(_loop_measures_13, self_28.A_x, int___sub__(10, int___unbox__(_checkDefined(x_9, 3759992))))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_9, 3759992)))
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
; Joined path conditions
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 20
; Joined path conditions
(push) ; 20
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992))))
(pop) ; 20
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992))))
(push) ; 20
(assert (Measure$check%precondition $Snap.unit _loop_measures_13@477@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)))))
(pop) ; 20
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_13@477@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (and
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)))
  (Measure$check%precondition $Snap.unit _loop_measures_13@477@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992))))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (Measure$check $Snap.unit _loop_measures_13@477@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (Measure$check $Snap.unit _loop_measures_13@477@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 499 | Measure$check(_, _loop_measures_13@477@01, First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)))) | live]
; [else-branch: 499 | !(Measure$check(_, _loop_measures_13@477@01, First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992))))) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 499 | Measure$check(_, _loop_measures_13@477@01, First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992))))]
(assert (Measure$check $Snap.unit _loop_measures_13@477@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)))))
; [eval] _loop_check_before_13 ==> _loop_termination_flag_13 || (!int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5) || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_62: Ref [MustInvokeBounded(_r_62)] :: false) && ((forperm _r_62: Ref [MustInvokeUnbounded(_r_62)] :: false) && ((forperm _r_62: Ref [_r_62.MustReleaseBounded] :: false) && (forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: false)))))
(push) ; 19
; [then-branch: 500 | False | dead]
; [else-branch: 500 | True | live]
(push) ; 20
; [else-branch: 500 | True]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; [eval] !_loop_check_before_13 ==> (forperm _r_62: Ref [MustInvokeBounded(_r_62)] :: false) && ((forperm _r_62: Ref [MustInvokeUnbounded(_r_62)] :: false) && ((forperm _r_62: Ref [_r_62.MustReleaseBounded] :: false) && (forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_13
(push) ; 19
(push) ; 20
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 501 | True | live]
; [else-branch: 501 | False | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 501 | True]
; [eval] (forperm _r_62: Ref [MustInvokeBounded(_r_62)] :: false) && ((forperm _r_62: Ref [MustInvokeUnbounded(_r_62)] :: false) && ((forperm _r_62: Ref [_r_62.MustReleaseBounded] :: false) && (forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_62: Ref [MustInvokeBounded(_r_62)] :: false)
(push) ; 21
; [then-branch: 502 | False | live]
; [else-branch: 502 | True | live]
(push) ; 22
; [then-branch: 502 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 502 | True]
; [eval] (forperm _r_62: Ref [MustInvokeUnbounded(_r_62)] :: false)
(push) ; 23
; [then-branch: 503 | False | live]
; [else-branch: 503 | True | live]
(push) ; 24
; [then-branch: 503 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 503 | True]
; [eval] (forperm _r_62: Ref [_r_62.MustReleaseBounded] :: false)
(push) ; 25
; [then-branch: 504 | False | live]
; [else-branch: 504 | True | live]
(push) ; 26
; [then-branch: 504 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 504 | True]
; [eval] (forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: false)
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 491 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))
(pop) ; 14
(pop) ; 13
(push) ; 13
(assert (not
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))
  $Snap.unit))
(assert (= $t@487@01 ($Snap.combine ($Snap.first $t@487@01) ($Snap.second $t@487@01))))
(assert (= ($Snap.first $t@487@01) $Snap.unit))
(assert (=
  ($Snap.second $t@487@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@487@01))
    ($Snap.second ($Snap.second $t@487@01)))))
(assert (= ($Snap.first ($Snap.second $t@487@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@487@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@487@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@487@01))) $Snap.unit))
(assert (<= _residue_189@453@01 _residue_190@458@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@487@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@487@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@487@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> y_4@484@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
  $Snap.unit))
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))))))
(assert (_checkDefined%precondition $Snap.unit y_4@484@01 3432313))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_4@484@01 3432313)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))
(assert (=>
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))
  (and
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))
    (_checkDefined%precondition $Snap.unit x_9@478@01 3759992)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 14
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 15
; Joined path conditions
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
(push) ; 14
; [eval] !int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 15
; Joined path conditions
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 505 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5) | dead]
; [else-branch: 505 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5)) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 505 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)))
(pop) ; 14
; [eval] !int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5)
; [eval] int___unbox__(_checkDefined(y_4, 3432313))
; [eval] _checkDefined(y_4, 3432313)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 506 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5)) | live]
; [else-branch: 506 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 506 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_4@484@01, 3432313)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_4@484@01 3432313)) 5)))
; [exec]
; exhale perm(MustTerminate(_cthread_167)) > none ==>
;   acc(MustTerminate(_cthread_167), perm(MustTerminate(_cthread_167)) -
;   _loop_original_must_terminate_14)
; [eval] perm(MustTerminate(_cthread_167)) > none
; [eval] perm(MustTerminate(_cthread_167))
; [then-branch: 507 | False | dead]
; [else-branch: 507 | True | live]
(push) ; 15
; [else-branch: 507 | True]
; [exec]
; label post_loop_14
; [exec]
; label loop_end_13
; [exec]
; _loop_check_before_13 := false
; [exec]
; assert _loop_termination_flag_13 ==>
;   !int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] _loop_termination_flag_13 ==> !int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
(push) ; 16
; [then-branch: 508 | False | dead]
; [else-branch: 508 | True | live]
(push) ; 17
; [else-branch: 508 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(x_9), int())
; [eval] typeof(x_9)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> x_9@478@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_9@478@01) (as int<PyType>  PyType)))
; [eval] self_28.A_x == null || issubtype(typeof(self_28.A_x), ObjectLock())
; [eval] self_28.A_x == null
(push) ; 16
; [then-branch: 509 | First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))) == Null | live]
; [else-branch: 509 | First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))) != Null | live]
(push) ; 17
; [then-branch: 509 | First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
  $Ref.null))
(pop) ; 17
(push) ; 17
; [else-branch: 509 | First:(Second:(Second:(Second:(Second:(Second:($t@487@01)))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_28.A_x), ObjectLock())
; [eval] typeof(self_28.A_x)
; [eval] ObjectLock()
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 16
; [eval] _isDefined(id)
(push) ; 17
(pop) ; 17
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@478@01 3759992))
(pop) ; 16
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_9@478@01 3759992))
(push) ; 16
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 17
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)))
(pop) ; 16
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@478@01 3759992)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992))))
(push) ; 16
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))
(pop) ; 16
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 510 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5) | dead]
; [else-branch: 510 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5)) | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 510 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@478@01, 3759992)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@478@01 3759992)) 5)))
; [eval] _loop_check_before_13 ==> _loop_termination_flag_13 || (!int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5) || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_62: Ref [MustInvokeBounded(_r_62)] :: false) && ((forperm _r_62: Ref [MustInvokeUnbounded(_r_62)] :: false) && ((forperm _r_62: Ref [_r_62.MustReleaseBounded] :: false) && (forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: false)))))
(push) ; 17
; [then-branch: 511 | False | dead]
; [else-branch: 511 | True | live]
(push) ; 18
; [else-branch: 511 | True]
(pop) ; 18
(pop) ; 17
; Joined path conditions
; [eval] !_loop_check_before_13 ==> (forperm _r_62: Ref [MustInvokeBounded(_r_62)] :: false) && ((forperm _r_62: Ref [MustInvokeUnbounded(_r_62)] :: false) && ((forperm _r_62: Ref [_r_62.MustReleaseBounded] :: false) && (forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_13
(push) ; 17
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 512 | True | live]
; [else-branch: 512 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 512 | True]
; [eval] (forperm _r_62: Ref [MustInvokeBounded(_r_62)] :: false) && ((forperm _r_62: Ref [MustInvokeUnbounded(_r_62)] :: false) && ((forperm _r_62: Ref [_r_62.MustReleaseBounded] :: false) && (forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_62: Ref [MustInvokeBounded(_r_62)] :: false)
(push) ; 19
; [then-branch: 513 | False | live]
; [else-branch: 513 | True | live]
(push) ; 20
; [then-branch: 513 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 513 | True]
; [eval] (forperm _r_62: Ref [MustInvokeUnbounded(_r_62)] :: false)
(push) ; 21
; [then-branch: 514 | False | live]
; [else-branch: 514 | True | live]
(push) ; 22
; [then-branch: 514 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 514 | True]
; [eval] (forperm _r_62: Ref [_r_62.MustReleaseBounded] :: false)
(push) ; 23
; [then-branch: 515 | False | live]
; [else-branch: 515 | True | live]
(push) ; 24
; [then-branch: 515 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 515 | True]
; [eval] (forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: false)
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
; [eval] !int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 516 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@468@01, 3759992)), 5)) | dead]
; [else-branch: 516 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@468@01, 3759992)), 5) | live]
(push) ; 8
; [else-branch: 516 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@468@01, 3759992)), 5)]
(pop) ; 8
(pop) ; 7
(push) ; 7
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)) 5)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))
  $Snap.unit))
(assert (= $t@476@01 ($Snap.combine ($Snap.first $t@476@01) ($Snap.second $t@476@01))))
(assert (= ($Snap.first $t@476@01) $Snap.unit))
(assert (=
  ($Snap.second $t@476@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@476@01))
    ($Snap.second ($Snap.second $t@476@01)))))
(assert (= ($Snap.first ($Snap.second $t@476@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@476@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@476@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@476@01))) $Snap.unit))
(assert (<= _residue_167@440@01 _residue_189@453@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@476@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@476@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@476@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> x_9@468@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
  $Snap.unit))
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))))))
(assert (_checkDefined%precondition $Snap.unit x_9@468@01 3759992))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_9@468@01 3759992)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)) 5))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 8
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [eval] !int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 517 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@468@01, 3759992)), 5) | dead]
; [else-branch: 517 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@468@01, 3759992)), 5)) | live]
(push) ; 8
; [else-branch: 517 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@468@01, 3759992)), 5))]
(pop) ; 8
; [eval] !int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_9, 3759992)), 5)
; [eval] int___unbox__(_checkDefined(x_9, 3759992))
; [eval] _checkDefined(x_9, 3759992)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_9@468@01 3759992)) 5)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 518 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@468@01, 3759992)), 5)) | live]
; [else-branch: 518 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@468@01, 3759992)), 5) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 518 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_9@468@01, 3759992)), 5))]
; [exec]
; exhale perm(MustTerminate(_cthread_167)) > none ==>
;   acc(MustTerminate(_cthread_167), perm(MustTerminate(_cthread_167)) -
;   _loop_original_must_terminate_13)
; [eval] perm(MustTerminate(_cthread_167)) > none
; [eval] perm(MustTerminate(_cthread_167))
; [then-branch: 519 | False | dead]
; [else-branch: 519 | True | live]
(push) ; 9
; [else-branch: 519 | True]
; [exec]
; label post_loop_13
; [exec]
; label __end
; [eval] (forperm _r_64: Ref [MustInvokeBounded(_r_64)] :: false)
; [eval] (forperm _r_64: Ref [MustInvokeUnbounded(_r_64)] :: false)
; [eval] (forperm _r_64: Ref [_r_64.MustReleaseBounded] :: false)
; [eval] (forperm _r_64: Ref [_r_64.MustReleaseUnbounded] :: false)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- A_nested4_convert_reject ----------
(declare-const _cthread_168@493@01 $Ref)
(declare-const _caller_measures_168@494@01 Seq<Measure$>)
(declare-const _residue_168@495@01 $Perm)
(declare-const self_11@496@01 $Ref)
(declare-const _current_wait_level_168@497@01 $Perm)
(declare-const _cthread_168@498@01 $Ref)
(declare-const _caller_measures_168@499@01 Seq<Measure$>)
(declare-const _residue_168@500@01 $Perm)
(declare-const self_11@501@01 $Ref)
(declare-const _current_wait_level_168@502@01 $Perm)
(push) ; 1
(declare-const $t@503@01 $Snap)
(assert (= $t@503@01 ($Snap.combine ($Snap.first $t@503@01) ($Snap.second $t@503@01))))
(assert (= ($Snap.first $t@503@01) $Snap.unit))
; [eval] _cthread_168 != null
(assert (not (= _cthread_168@498@01 $Ref.null)))
(assert (=
  ($Snap.second $t@503@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@503@01))
    ($Snap.second ($Snap.second $t@503@01)))))
(assert (= ($Snap.first ($Snap.second $t@503@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_168), Thread_0())
; [eval] typeof(_cthread_168)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_168@498@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@503@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@503@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@503@01))) $Snap.unit))
; [eval] issubtype(typeof(self_11), A())
; [eval] typeof(self_11)
; [eval] A()
(assert (issubtype<Bool> (typeof<PyType> self_11@501@01) (as A<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@503@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@503@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@503@01))))
  $Snap.unit))
; [eval] self_11 != null
(assert (not (= self_11@501@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))
  $Snap.unit))
; [eval] self_11.A_x == null || issubtype(typeof(self_11.A_x), ObjectLock())
; [eval] self_11.A_x == null
(push) ; 2
; [then-branch: 520 | First:(Second:(Second:(Second:(Second:($t@503@01))))) == Null | live]
; [else-branch: 520 | First:(Second:(Second:(Second:(Second:($t@503@01))))) != Null | live]
(push) ; 3
; [then-branch: 520 | First:(Second:(Second:(Second:(Second:($t@503@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))
  $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 520 | First:(Second:(Second:(Second:(Second:($t@503@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_11.A_x), ObjectLock())
; [eval] typeof(self_11.A_x)
; [eval] ObjectLock()
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01)))))))
  $Snap.unit))
; [eval] self_11.A_x != null
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))))
  $Snap.unit))
; [eval] _residue_168 < Level(self_11.A_x)
; [eval] Level(self_11.A_x)
(push) ; 2
(assert (Level%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))))
(pop) ; 2
; Joined path conditions
(assert (Level%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))))
(assert (<
  _residue_168@500@01
  (Level $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01)))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@504@01 $Snap)
(assert (= $t@504@01 ($Snap.combine ($Snap.first $t@504@01) ($Snap.second $t@504@01))))
(assert (= ($Snap.first $t@504@01) $Snap.unit))
; [eval] (forperm _r_71: Ref [_r_71.MustReleaseBounded] :: Level(_r_71) <= _current_wait_level_168)
(assert (=
  ($Snap.second $t@504@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@504@01))
    ($Snap.second ($Snap.second $t@504@01)))))
(assert (= ($Snap.first ($Snap.second $t@504@01)) $Snap.unit))
; [eval] (forperm _r_71: Ref [_r_71.MustReleaseUnbounded] :: Level(_r_71) <= _current_wait_level_168)
(assert (=
  ($Snap.second ($Snap.second $t@504@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@504@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@504@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@504@01))) $Snap.unit))
; [eval] _residue_168 <= _current_wait_level_168
(assert (<= _residue_168@500@01 _current_wait_level_168@502@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@504@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@504@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@504@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@504@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@504@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@504@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@504@01)))))
  $Snap.unit))
; [eval] self_11.A_x == null || issubtype(typeof(self_11.A_x), ObjectLock())
; [eval] self_11.A_x == null
(push) ; 3
; [then-branch: 521 | First:(Second:(Second:(Second:($t@504@01)))) == Null | live]
; [else-branch: 521 | First:(Second:(Second:(Second:($t@504@01)))) != Null | live]
(push) ; 4
; [then-branch: 521 | First:(Second:(Second:(Second:($t@504@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@504@01)))))
  $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 521 | First:(Second:(Second:(Second:($t@504@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@504@01)))))
    $Ref.null)))
; [eval] issubtype(typeof(self_11.A_x), ObjectLock())
; [eval] typeof(self_11.A_x)
; [eval] ObjectLock()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@504@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@504@01)))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@504@01)))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@504@01)))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@504@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@504@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@504@01)))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@504@01)))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@504@01))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@505@01 $Ref)
; [exec]
; var x_10: Ref
(declare-const x_10@506@01 $Ref)
; [exec]
; var y_5: Ref
(declare-const y_5@507@01 $Ref)
; [exec]
; var self_29: Ref
(declare-const self_29@508@01 $Ref)
; [exec]
; var _loop_measures_15: Seq[Measure$]
(declare-const _loop_measures_15@509@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_15: Bool
(declare-const _loop_check_before_15@510@01 Bool)
; [exec]
; var _loop_termination_flag_15: Bool
(declare-const _loop_termination_flag_15@511@01 Bool)
; [exec]
; var _loop_original_must_terminate_15: Perm
(declare-const _loop_original_must_terminate_15@512@01 $Perm)
; [exec]
; var _residue_191: Perm
(declare-const _residue_191@513@01 $Perm)
; [exec]
; var _loop_measures_16: Seq[Measure$]
(declare-const _loop_measures_16@514@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_16: Bool
(declare-const _loop_check_before_16@515@01 Bool)
; [exec]
; var _loop_termination_flag_16: Bool
(declare-const _loop_termination_flag_16@516@01 Bool)
; [exec]
; var _loop_original_must_terminate_16: Perm
(declare-const _loop_original_must_terminate_16@517@01 $Perm)
; [exec]
; var _residue_192: Perm
(declare-const _residue_192@518@01 $Perm)
; [exec]
; var _cwl_168: Perm
(declare-const _cwl_168@519@01 $Perm)
; [exec]
; var _method_measures_168: Seq[Measure$]
(declare-const _method_measures_168@520@01 Seq<Measure$>)
; [exec]
; _method_measures_168 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_11) == A()
(declare-const $t@521@01 $Snap)
(assert (= $t@521@01 $Snap.unit))
; [eval] typeof(self_11) == A()
; [eval] typeof(self_11)
; [eval] A()
(assert (= (typeof<PyType> self_11@501@01) (as A<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_29 := self_11
; [exec]
; x_10 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const x_10@522@01 $Ref)
(assert (= x_10@522@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(808542072)
(declare-const $t@523@01 $Snap)
(assert (= $t@523@01 $Snap.unit))
; [eval] _isDefined(808542072)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 808542072))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 808542072))
(assert (_isDefined $Snap.unit 808542072))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; y_5 := __prim__int___box__(2)
; [eval] __prim__int___box__(2)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 2))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 2))
(declare-const y_5@524@01 $Ref)
(assert (= y_5@524@01 (__prim__int___box__ $Snap.unit 2)))
; [exec]
; inhale _isDefined(3497849)
(declare-const $t@525@01 $Snap)
(assert (= $t@525@01 $Snap.unit))
; [eval] _isDefined(3497849)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3497849))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3497849))
(assert (_isDefined $Snap.unit 3497849))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_168 := Lock_acquire(_cthread_168, _method_measures_168, _residue_168, self_29.A_x)
; [eval] _cthread_172 != null
; [eval] issubtype(typeof(_cthread_172), Thread_0())
; [eval] typeof(_cthread_172)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_15), Lock(Lock_arg(typeof(self_15), 0)))
; [eval] typeof(self_15)
; [eval] Lock(Lock_arg(typeof(self_15), 0))
; [eval] Lock_arg(typeof(self_15), 0)
; [eval] typeof(self_15)
(set-option :timeout 0)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))) 0)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))) 0))))
; [eval] issubtype(Lock_arg(typeof(self_15), 0), object())
; [eval] Lock_arg(typeof(self_15), 0)
; [eval] typeof(self_15)
; [eval] object()
(push) ; 3
(assert (not (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))) 0) (as object<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))) 0) (as object<PyType>  PyType)))
; [eval] self_15 != null
; [eval] (forperm _r_86: Ref [_r_86.MustReleaseBounded] :: Level(_r_86) < Level(self_15))
; [eval] (forperm _r_86: Ref [_r_86.MustReleaseUnbounded] :: Level(_r_86) < Level(self_15))
; [eval] _residue_172 < Level(self_15)
; [eval] Level(self_15)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] Measure$check(_caller_measures_172, _cthread_172, 1) || perm(MustTerminate(_cthread_172)) == none && ((forperm _r_88: Ref [MustInvokeBounded(_r_88)] :: false) && ((forperm _r_88: Ref [MustInvokeUnbounded(_r_88)] :: false) && ((forperm _r_88: Ref [_r_88.MustReleaseBounded] :: false) && (forperm _r_88: Ref [_r_88.MustReleaseUnbounded] :: false))))
; [eval] Measure$check(_caller_measures_172, _cthread_172, 1)
(push) ; 3
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_168@498@01 1))
(pop) ; 3
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_168@498@01 1))
(push) ; 3
; [then-branch: 522 | Measure$check(_, Nil, _cthread_168@498@01, 1) | live]
; [else-branch: 522 | !(Measure$check(_, Nil, _cthread_168@498@01, 1)) | live]
(push) ; 4
; [then-branch: 522 | Measure$check(_, Nil, _cthread_168@498@01, 1)]
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_168@498@01 1))
(pop) ; 4
(push) ; 4
; [else-branch: 522 | !(Measure$check(_, Nil, _cthread_168@498@01, 1))]
(assert (not
  (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_168@498@01 1)))
; [eval] perm(MustTerminate(_cthread_172)) == none && ((forperm _r_88: Ref [MustInvokeBounded(_r_88)] :: false) && ((forperm _r_88: Ref [MustInvokeUnbounded(_r_88)] :: false) && ((forperm _r_88: Ref [_r_88.MustReleaseBounded] :: false) && (forperm _r_88: Ref [_r_88.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_172)) == none
; [eval] perm(MustTerminate(_cthread_172))
(push) ; 5
; [then-branch: 523 | False | live]
; [else-branch: 523 | True | live]
(push) ; 6
; [then-branch: 523 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 523 | True]
; [eval] (forperm _r_88: Ref [MustInvokeBounded(_r_88)] :: false)
(push) ; 7
; [then-branch: 524 | False | live]
; [else-branch: 524 | True | live]
(push) ; 8
; [then-branch: 524 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 524 | True]
; [eval] (forperm _r_88: Ref [MustInvokeUnbounded(_r_88)] :: false)
(push) ; 9
; [then-branch: 525 | False | live]
; [else-branch: 525 | True | live]
(push) ; 10
; [then-branch: 525 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 525 | True]
; [eval] (forperm _r_88: Ref [_r_88.MustReleaseBounded] :: false)
(push) ; 11
; [then-branch: 526 | False | live]
; [else-branch: 526 | True | live]
(push) ; 12
; [then-branch: 526 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 526 | True]
; [eval] (forperm _r_88: Ref [_r_88.MustReleaseUnbounded] :: false)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_168@498@01 1))
  (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_168@498@01 1)))
(declare-const _current_wait_level_172@526@01 $Perm)
(declare-const $t@527@01 $Snap)
(assert (= $t@527@01 ($Snap.combine ($Snap.first $t@527@01) ($Snap.second $t@527@01))))
(assert (= ($Snap.first $t@527@01) $Snap.unit))
; [eval] (forperm _r_87: Ref [_r_87.MustReleaseBounded] :: Level(_r_87) <= _current_wait_level_172)
(assert (=
  ($Snap.second $t@527@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@527@01))
    ($Snap.second ($Snap.second $t@527@01)))))
(assert (= ($Snap.first ($Snap.second $t@527@01)) $Snap.unit))
; [eval] (forperm _r_87: Ref [_r_87.MustReleaseUnbounded] :: Level(_r_87) <= _current_wait_level_172)
(assert (=
  ($Snap.second ($Snap.second $t@527@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@527@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@527@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@527@01))) $Snap.unit))
; [eval] _residue_172 <= _current_wait_level_172
(assert (<= _residue_168@500@01 _current_wait_level_172@526@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@527@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@527@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@527@01)))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(Lock_invariant(self_29.A_x), write)
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@527@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@527@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@527@01))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@527@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@527@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@527@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@527@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@527@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0)))
; [eval] typeof(self_17)
; [eval] Lock(Lock_arg(typeof(self_17), 0))
; [eval] Lock_arg(typeof(self_17), 0)
; [eval] typeof(self_17)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@527@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@527@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@527@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@527@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0))) ==> true
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0)))
; [eval] typeof(self_17)
; [eval] Lock(Lock_arg(typeof(self_17), 0))
; [eval] Lock_arg(typeof(self_17), 0)
; [eval] typeof(self_17)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))) 0))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 527 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@503@01)))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@503@01)))))), 0))) | live]
; [else-branch: 527 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@503@01)))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@503@01)))))), 0)))) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 527 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@503@01)))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@503@01)))))), 0)))]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@527@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_17), ObjectLock()) ==> true
; [eval] issubtype(typeof(self_17), ObjectLock())
; [eval] typeof(self_17)
; [eval] ObjectLock()
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))) (as ObjectLock<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))) (as ObjectLock<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 528 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@503@01)))))), ObjectLock[PyType]) | live]
; [else-branch: 528 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@503@01)))))), ObjectLock[PyType])) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 528 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@503@01)))))), ObjectLock[PyType])]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))) (as ObjectLock<PyType>  PyType)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))) (as ObjectLock<PyType>  PyType)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Lock_invariant%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@527@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))))
; [exec]
; _loop_original_must_terminate_15 := perm(MustTerminate(_cthread_168))
; [eval] perm(MustTerminate(_cthread_168))
(declare-const _loop_original_must_terminate_15@528@01 $Perm)
(assert (= _loop_original_must_terminate_15@528@01 $Perm.No))
; [exec]
; _loop_termination_flag_15 := false
; [exec]
; _loop_check_before_15 := true
(declare-const _loop_measures_15@529@01 Seq<Measure$>)
(declare-const x_10@530@01 $Ref)
(declare-const _loop_original_must_terminate_16@531@01 $Perm)
(declare-const _loop_termination_flag_16@532@01 Bool)
(declare-const _loop_check_before_16@533@01 Bool)
(declare-const _loop_measures_16@534@01 Seq<Measure$>)
(declare-const y_5@535@01 $Ref)
(declare-const _loop_check_before_15@536@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@537@01 $Snap)
(assert (= $t@537@01 ($Snap.combine ($Snap.first $t@537@01) ($Snap.second $t@537@01))))
(assert (= ($Snap.first $t@537@01) $Snap.unit))
; [eval] (forperm _r_69: Ref [_r_69.MustReleaseBounded] :: Level(_r_69) <= _residue_191)
(assert (=
  ($Snap.second $t@537@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@537@01))
    ($Snap.second ($Snap.second $t@537@01)))))
(assert (= ($Snap.first ($Snap.second $t@537@01)) $Snap.unit))
; [eval] (forperm _r_69: Ref [_r_69.MustReleaseUnbounded] :: Level(_r_69) <= _residue_191)
(assert (=
  ($Snap.second ($Snap.second $t@537@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@537@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@537@01))) $Snap.unit))
; [eval] _residue_168 <= _residue_191
(assert (<= _residue_168@500@01 _residue_191@513@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@537@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(x_10), int())
; [eval] typeof(x_10)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> x_10@530@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(y_5), int())
; [eval] typeof(y_5)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> y_5@535@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))
  $Snap.unit))
; [eval] int___le__(int___unbox__(_checkDefined(y_5, 3497849)), 5)
; [eval] int___unbox__(_checkDefined(y_5, 3497849))
; [eval] _checkDefined(y_5, 3497849)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_5@535@01 3497849))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_5@535@01 3497849))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_5@535@01 3497849)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_5@535@01 3497849)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_5@535@01 3497849)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849))))
(push) ; 4
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5))
(assert (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))
  $Snap.unit))
; [eval] self_29.A_x == null || issubtype(typeof(self_29.A_x), ObjectLock())
; [eval] self_29.A_x == null
(push) ; 4
; [then-branch: 529 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@537@01)))))))) == Null | live]
; [else-branch: 529 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@537@01)))))))) != Null | live]
(push) ; 5
; [then-branch: 529 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@537@01)))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))
  $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 529 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@537@01)))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_29.A_x), ObjectLock())
; [eval] typeof(self_29.A_x)
; [eval] ObjectLock()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(x_10, 808542072)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_10, 808542072))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_10, 808542072)), 5)
; [eval] int___unbox__(_checkDefined(x_10, 808542072))
; [eval] _checkDefined(x_10, 808542072)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_10@530@01 808542072))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_10@530@01 808542072))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_10@530@01 808542072)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_10@530@01 808542072)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_10@530@01 808542072)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 530 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@530@01, 808542072)), 5) | live]
; [else-branch: 530 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@530@01, 808542072)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 530 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@530@01, 808542072)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_10, 808542072))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_10, 808542072)))
; [eval] int___unbox__(_checkDefined(x_10, 808542072))
; [eval] _checkDefined(x_10, 808542072)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072))))
(pop) ; 5
(push) ; 5
; [else-branch: 530 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@530@01, 808542072)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(x_10), int())
; [eval] typeof(x_10)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> x_10@522@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_10@522@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(y_5), int())
; [eval] typeof(y_5)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> y_5@524@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> y_5@524@01) (as int<PyType>  PyType)))
; [eval] int___le__(int___unbox__(_checkDefined(y_5, 3497849)), 5)
; [eval] int___unbox__(_checkDefined(y_5, 3497849))
; [eval] _checkDefined(y_5, 3497849)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_5@524@01 3497849))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_5@524@01 3497849))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_5@524@01 3497849)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_5@524@01 3497849)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_5@524@01 3497849)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_5@524@01 3497849)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_5@524@01 3497849))))
(push) ; 4
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@524@01 3497849)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@524@01 3497849)) 5))
(push) ; 4
(assert (not (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@524@01 3497849)) 5)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@524@01 3497849)) 5))
; [eval] self_29.A_x == null || issubtype(typeof(self_29.A_x), ObjectLock())
; [eval] self_29.A_x == null
(push) ; 4
; [then-branch: 531 | First:(Second:(Second:(Second:(Second:($t@503@01))))) == Null | live]
; [else-branch: 531 | First:(Second:(Second:(Second:(Second:($t@503@01))))) != Null | live]
(push) ; 5
; [then-branch: 531 | First:(Second:(Second:(Second:(Second:($t@503@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))
  $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 531 | First:(Second:(Second:(Second:(Second:($t@503@01))))) != Null]
; [eval] issubtype(typeof(self_29.A_x), ObjectLock())
; [eval] typeof(self_29.A_x)
; [eval] ObjectLock()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(x_10, 808542072)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_10, 808542072))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_10, 808542072)), 5)
; [eval] int___unbox__(_checkDefined(x_10, 808542072))
; [eval] _checkDefined(x_10, 808542072)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_10@522@01 808542072))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_10@522@01 808542072))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_10@522@01 808542072)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_10@522@01 808542072)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_10@522@01 808542072)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 532 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@522@01, 808542072)), 5) | live]
; [else-branch: 532 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@522@01, 808542072)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 532 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@522@01, 808542072)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_10, 808542072))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_10, 808542072)))
; [eval] int___unbox__(_checkDefined(x_10, 808542072))
; [eval] _checkDefined(x_10, 808542072)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072)) 5))
(push) ; 4
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072)))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072)))
    0)))
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 533 | True | live]
; [else-branch: 533 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 533 | True]
; [eval] perm(self_29.A_x.MustReleaseBounded) > none
; [eval] perm(self_29.A_x.MustReleaseBounded)
; [then-branch: 534 | False | dead]
; [else-branch: 534 | True | live]
(push) ; 5
; [else-branch: 534 | True]
; [eval] _loop_check_before_15 ==> _loop_termination_flag_15 || (!int___lt__(int___unbox__(_checkDefined(x_10, 808542072)), 5) || perm(MustTerminate(_cthread_168)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 535 | True | live]
; [else-branch: 535 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 535 | True]
; [eval] _loop_termination_flag_15 || (!int___lt__(int___unbox__(_checkDefined(x_10, 808542072)), 5) || perm(MustTerminate(_cthread_168)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)))))
(push) ; 8
; [then-branch: 536 | False | live]
; [else-branch: 536 | True | live]
(push) ; 9
; [then-branch: 536 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 536 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(x_10, 808542072)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_10, 808542072)), 5)
; [eval] int___unbox__(_checkDefined(x_10, 808542072))
; [eval] _checkDefined(x_10, 808542072)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 537 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@522@01, 808542072)), 5)) | live]
; [else-branch: 537 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@522@01, 808542072)), 5) | live]
(push) ; 11
; [then-branch: 537 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@522@01, 808542072)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072)) 5)))
(pop) ; 11
(push) ; 11
; [else-branch: 537 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@522@01, 808542072)), 5)]
; [eval] perm(MustTerminate(_cthread_168)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_168)) == none
; [eval] perm(MustTerminate(_cthread_168))
(push) ; 12
; [then-branch: 538 | False | live]
; [else-branch: 538 | True | live]
(push) ; 13
; [then-branch: 538 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 538 | True]
; [eval] (forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false)
(push) ; 14
; [then-branch: 539 | False | live]
; [else-branch: 539 | True | live]
(push) ; 15
; [then-branch: 539 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 539 | True]
; [eval] (forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false)
(push) ; 16
; [then-branch: 540 | False | live]
; [else-branch: 540 | True | live]
(push) ; 17
; [then-branch: 540 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 540 | True]
; [eval] (forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false)
(push) ; 18
; [then-branch: 541 | False | live]
; [else-branch: 541 | True | live]
(push) ; 19
; [then-branch: 541 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 541 | True]
; [eval] (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072)) 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072)) 5))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@522@01 808542072)) 5))))
; [eval] !_loop_check_before_15 ==> (forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_15
(push) ; 6
; [then-branch: 542 | False | dead]
; [else-branch: 542 | True | live]
(push) ; 7
; [else-branch: 542 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 6
(assert (= $t@537@01 ($Snap.combine ($Snap.first $t@537@01) ($Snap.second $t@537@01))))
(assert (= ($Snap.first $t@537@01) $Snap.unit))
(assert (=
  ($Snap.second $t@537@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@537@01))
    ($Snap.second ($Snap.second $t@537@01)))))
(assert (= ($Snap.first ($Snap.second $t@537@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@537@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@537@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@537@01))) $Snap.unit))
(assert (<= _residue_168@500@01 _residue_191@513@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@537@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> x_10@530@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> y_5@535@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit y_5@535@01 3497849))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_5@535@01 3497849)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)))
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5))
(assert (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))
  $Snap.unit))
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit x_10@530@01 808542072))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_10@530@01 808542072)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 7
; [eval] int___lt__(int___unbox__(_checkDefined(x_10, 808542072)), 5)
; [eval] int___unbox__(_checkDefined(x_10, 808542072))
; [eval] _checkDefined(x_10, 808542072)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [eval] !int___lt__(int___unbox__(_checkDefined(x_10, 808542072)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_10, 808542072)), 5)
; [eval] int___unbox__(_checkDefined(x_10, 808542072))
; [eval] _checkDefined(x_10, 808542072)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(x_10, 808542072)), 5)
; [eval] int___unbox__(_checkDefined(x_10, 808542072))
; [eval] _checkDefined(x_10, 808542072)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 543 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@530@01, 808542072)), 5) | live]
; [else-branch: 543 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@530@01, 808542072)), 5)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 543 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@530@01, 808542072)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5))
; [exec]
; _loop_measures_15 := Seq(Measure$create(true, self_29.A_x, int___sub__(10, int___unbox__(_checkDefined(x_10,
;   808542072)))))
; [eval] Seq(Measure$create(true, self_29.A_x, int___sub__(10, int___unbox__(_checkDefined(x_10, 808542072)))))
; [eval] Measure$create(true, self_29.A_x, int___sub__(10, int___unbox__(_checkDefined(x_10, 808542072))))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_10, 808542072)))
; [eval] int___unbox__(_checkDefined(x_10, 808542072))
; [eval] _checkDefined(x_10, 808542072)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072))))
(pop) ; 8
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072))))))
  1))
(declare-const _loop_measures_15@538@01 Seq<Measure$>)
(assert (=
  _loop_measures_15@538@01
  (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)))))))
; [exec]
; x_10 := __prim__int___box__(int___add__(int___unbox__(x_10), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(x_10), 1))
; [eval] int___add__(int___unbox__(x_10), 1)
; [eval] int___unbox__(x_10)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit x_10@530@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit x_10@530@01))
(push) ; 8
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_10@530@01) 1))
(pop) ; 8
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_10@530@01) 1))
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_10@530@01) 1)))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_10@530@01) 1)))
(declare-const x_10@539@01 $Ref)
(assert (=
  x_10@539@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_10@530@01) 1))))
; [exec]
; inhale _isDefined(808542072)
(declare-const $t@540@01 $Snap)
(assert (= $t@540@01 $Snap.unit))
; [eval] _isDefined(808542072)
(push) ; 8
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_16 := perm(MustTerminate(_cthread_168))
; [eval] perm(MustTerminate(_cthread_168))
(declare-const _loop_original_must_terminate_16@541@01 $Perm)
(assert (= _loop_original_must_terminate_16@541@01 $Perm.No))
; [exec]
; _loop_termination_flag_16 := false
; [exec]
; _loop_check_before_16 := true
(declare-const _loop_measures_16@542@01 Seq<Measure$>)
(declare-const y_5@543@01 $Ref)
(declare-const _loop_check_before_16@544@01 Bool)
(set-option :timeout 0)
(push) ; 8
; Loop head block: Check well-definedness of invariant
(declare-const $t@545@01 $Snap)
(assert (= $t@545@01 ($Snap.combine ($Snap.first $t@545@01) ($Snap.second $t@545@01))))
(assert (= ($Snap.first $t@545@01) $Snap.unit))
; [eval] (forperm _r_67: Ref [_r_67.MustReleaseBounded] :: Level(_r_67) <= _residue_192)
(assert (=
  ($Snap.second $t@545@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@545@01))
    ($Snap.second ($Snap.second $t@545@01)))))
(assert (= ($Snap.first ($Snap.second $t@545@01)) $Snap.unit))
; [eval] (forperm _r_67: Ref [_r_67.MustReleaseUnbounded] :: Level(_r_67) <= _residue_192)
(assert (=
  ($Snap.second ($Snap.second $t@545@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@545@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@545@01))) $Snap.unit))
; [eval] _residue_191 <= _residue_192
(assert (<= _residue_191@513@01 _residue_192@518@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@545@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@545@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@545@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(y_5), int())
; [eval] typeof(y_5)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> y_5@543@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))
  $Snap.unit))
; [eval] int___le__(int___unbox__(_checkDefined(y_5, 3497849)), 5)
; [eval] int___unbox__(_checkDefined(y_5, 3497849))
; [eval] _checkDefined(y_5, 3497849)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_5@543@01 3497849))
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_5@543@01 3497849))
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_5@543@01 3497849)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_5@543@01 3497849)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_5@543@01 3497849)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849))))
(push) ; 9
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5))
(pop) ; 9
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5))
(assert (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
  $Snap.unit))
; [eval] self_29.A_x == null || issubtype(typeof(self_29.A_x), ObjectLock())
; [eval] self_29.A_x == null
(push) ; 9
; [then-branch: 544 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@545@01))))))) == Null | live]
; [else-branch: 544 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@545@01))))))) != Null | live]
(push) ; 10
; [then-branch: 544 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@545@01))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
  $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 544 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@545@01))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_29.A_x), ObjectLock())
; [eval] typeof(self_29.A_x)
; [eval] ObjectLock()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(y_5, 3497849)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(y_5, 3497849))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(y_5, 3497849)), 5)
; [eval] int___unbox__(_checkDefined(y_5, 3497849))
; [eval] _checkDefined(y_5, 3497849)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5))
(pop) ; 9
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 545 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@543@01, 3497849)), 5) | live]
; [else-branch: 545 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@543@01, 3497849)), 5)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 545 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@543@01, 3497849)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_5, 3497849))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_5, 3497849)))
; [eval] int___unbox__(_checkDefined(y_5, 3497849))
; [eval] _checkDefined(y_5, 3497849)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849))))
(pop) ; 11
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849))))
(pop) ; 10
(push) ; 10
; [else-branch: 545 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@543@01, 3497849)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))))
  $Snap.unit))
(pop) ; 8
(push) ; 8
; Loop head block: Establish invariant
; [eval] issubtype(typeof(y_5), int())
; [eval] typeof(y_5)
; [eval] int()
; [eval] int___le__(int___unbox__(_checkDefined(y_5, 3497849)), 5)
; [eval] int___unbox__(_checkDefined(y_5, 3497849))
; [eval] _checkDefined(y_5, 3497849)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
; [eval] self_29.A_x == null || issubtype(typeof(self_29.A_x), ObjectLock())
; [eval] self_29.A_x == null
(push) ; 9
; [then-branch: 546 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@537@01)))))))) == Null | live]
; [else-branch: 546 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@537@01)))))))) != Null | live]
(push) ; 10
; [then-branch: 546 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@537@01)))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))
  $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 546 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@537@01)))))))) != Null]
; [eval] issubtype(typeof(self_29.A_x), ObjectLock())
; [eval] typeof(self_29.A_x)
; [eval] ObjectLock()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(y_5, 3497849)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(y_5, 3497849))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(y_5, 3497849)), 5)
; [eval] int___unbox__(_checkDefined(y_5, 3497849))
; [eval] _checkDefined(y_5, 3497849)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5))
(pop) ; 9
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 547 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@535@01, 3497849)), 5) | live]
; [else-branch: 547 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@535@01, 3497849)), 5)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 547 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@535@01, 3497849)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_5, 3497849))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_5, 3497849)))
; [eval] int___unbox__(_checkDefined(y_5, 3497849))
; [eval] _checkDefined(y_5, 3497849)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849))))
(pop) ; 11
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849))))
(pop) ; 10
(push) ; 10
; [else-branch: 547 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@535@01, 3497849)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5)))
(push) ; 9
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)))
    0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)))
    0)))
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 548 | True | live]
; [else-branch: 548 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 548 | True]
; [eval] perm(self_29.A_x.MustReleaseBounded) > none
; [eval] perm(self_29.A_x.MustReleaseBounded)
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 549 | True | live]
; [else-branch: 549 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 549 | True]
; [eval] _loop_check_before_16 ==> _loop_termination_flag_16 || (!int___lt__(int___unbox__(_checkDefined(y_5, 3497849)), 5) || perm(MustTerminate(_cthread_168)) == none && ((forperm _r_68: Ref [MustInvokeBounded(_r_68)] :: false) && ((forperm _r_68: Ref [MustInvokeUnbounded(_r_68)] :: false) && ((forperm _r_68: Ref [_r_68.MustReleaseBounded] :: false) && (forperm _r_68: Ref [_r_68.MustReleaseUnbounded] :: false)))))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 550 | True | live]
; [else-branch: 550 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 550 | True]
; [eval] _loop_termination_flag_16 || (!int___lt__(int___unbox__(_checkDefined(y_5, 3497849)), 5) || perm(MustTerminate(_cthread_168)) == none && ((forperm _r_68: Ref [MustInvokeBounded(_r_68)] :: false) && ((forperm _r_68: Ref [MustInvokeUnbounded(_r_68)] :: false) && ((forperm _r_68: Ref [_r_68.MustReleaseBounded] :: false) && (forperm _r_68: Ref [_r_68.MustReleaseUnbounded] :: false)))))
(push) ; 13
; [then-branch: 551 | False | live]
; [else-branch: 551 | True | live]
(push) ; 14
; [then-branch: 551 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 551 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(y_5, 3497849)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_5, 3497849)), 5)
; [eval] int___unbox__(_checkDefined(y_5, 3497849))
; [eval] _checkDefined(y_5, 3497849)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 15
; Joined path conditions
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
; [then-branch: 552 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@535@01, 3497849)), 5)) | live]
; [else-branch: 552 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@535@01, 3497849)), 5) | live]
(push) ; 16
; [then-branch: 552 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@535@01, 3497849)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5)))
(pop) ; 16
(push) ; 16
; [else-branch: 552 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@535@01, 3497849)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5))
; [eval] perm(MustTerminate(_cthread_168)) == none && ((forperm _r_68: Ref [MustInvokeBounded(_r_68)] :: false) && ((forperm _r_68: Ref [MustInvokeUnbounded(_r_68)] :: false) && ((forperm _r_68: Ref [_r_68.MustReleaseBounded] :: false) && (forperm _r_68: Ref [_r_68.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_168)) == none
; [eval] perm(MustTerminate(_cthread_168))
(push) ; 17
; [then-branch: 553 | False | live]
; [else-branch: 553 | True | live]
(push) ; 18
; [then-branch: 553 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 553 | True]
; [eval] (forperm _r_68: Ref [MustInvokeBounded(_r_68)] :: false)
(push) ; 19
; [then-branch: 554 | False | live]
; [else-branch: 554 | True | live]
(push) ; 20
; [then-branch: 554 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 554 | True]
; [eval] (forperm _r_68: Ref [MustInvokeUnbounded(_r_68)] :: false)
(push) ; 21
; [then-branch: 555 | False | live]
; [else-branch: 555 | True | live]
(push) ; 22
; [then-branch: 555 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 555 | True]
; [eval] (forperm _r_68: Ref [_r_68.MustReleaseBounded] :: false)
(push) ; 23
; [then-branch: 556 | False | live]
; [else-branch: 556 | True | live]
(push) ; 24
; [then-branch: 556 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 556 | True]
; [eval] (forperm _r_68: Ref [_r_68.MustReleaseUnbounded] :: false)
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@535@01 3497849)) 5))))
; [eval] !_loop_check_before_16 ==> (forperm _r_68: Ref [MustInvokeBounded(_r_68)] :: false) && ((forperm _r_68: Ref [MustInvokeUnbounded(_r_68)] :: false) && ((forperm _r_68: Ref [_r_68.MustReleaseBounded] :: false) && (forperm _r_68: Ref [_r_68.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_16
(push) ; 11
; [then-branch: 557 | False | dead]
; [else-branch: 557 | True | live]
(push) ; 12
; [else-branch: 557 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 11
(assert (= $t@545@01 ($Snap.combine ($Snap.first $t@545@01) ($Snap.second $t@545@01))))
(assert (= ($Snap.first $t@545@01) $Snap.unit))
(assert (=
  ($Snap.second $t@545@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@545@01))
    ($Snap.second ($Snap.second $t@545@01)))))
(assert (= ($Snap.first ($Snap.second $t@545@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@545@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@545@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@545@01))) $Snap.unit))
(assert (<= _residue_191@513@01 _residue_192@518@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@545@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@545@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@545@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> y_5@543@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit y_5@543@01 3497849))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_5@543@01 3497849)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)))
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5))
(assert (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
  $Snap.unit))
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))
  $Snap.unit))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 12
; [eval] int___lt__(int___unbox__(_checkDefined(y_5, 3497849)), 5)
; [eval] int___unbox__(_checkDefined(y_5, 3497849))
; [eval] _checkDefined(y_5, 3497849)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [eval] !int___lt__(int___unbox__(_checkDefined(y_5, 3497849)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_5, 3497849)), 5)
; [eval] int___unbox__(_checkDefined(y_5, 3497849))
; [eval] _checkDefined(y_5, 3497849)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(y_5, 3497849)), 5)
; [eval] int___unbox__(_checkDefined(y_5, 3497849))
; [eval] _checkDefined(y_5, 3497849)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 12
; Joined path conditions
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 558 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@543@01, 3497849)), 5) | live]
; [else-branch: 558 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@543@01, 3497849)), 5)) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 558 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@543@01, 3497849)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5))
; [exec]
; _loop_measures_16 := Seq(Measure$create(true, self_29.A_x, int___sub__(10, int___unbox__(_checkDefined(y_5,
;   3497849)))))
; [eval] Seq(Measure$create(true, self_29.A_x, int___sub__(10, int___unbox__(_checkDefined(y_5, 3497849)))))
; [eval] Measure$create(true, self_29.A_x, int___sub__(10, int___unbox__(_checkDefined(y_5, 3497849))))
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_5, 3497849)))
; [eval] int___unbox__(_checkDefined(y_5, 3497849))
; [eval] _checkDefined(y_5, 3497849)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849))))
(pop) ; 13
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849))))))
  1))
(declare-const _loop_measures_16@546@01 Seq<Measure$>)
(assert (=
  _loop_measures_16@546@01
  (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)))))))
; [exec]
; y_5 := __prim__int___box__(int___add__(int___unbox__(y_5), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(y_5), 1))
; [eval] int___add__(int___unbox__(y_5), 1)
; [eval] int___unbox__(y_5)
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit y_5@543@01))
(pop) ; 13
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit y_5@543@01))
(push) ; 13
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit y_5@543@01) 1))
(pop) ; 13
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit y_5@543@01) 1))
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit y_5@543@01) 1)))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit y_5@543@01) 1)))
(declare-const y_5@547@01 $Ref)
(assert (=
  y_5@547@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit y_5@543@01) 1))))
; [exec]
; inhale _isDefined(3497849)
(declare-const $t@548@01 $Snap)
(assert (= $t@548@01 $Snap.unit))
; [eval] _isDefined(3497849)
(push) ; 13
(pop) ; 13
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop_end_16
; [exec]
; _loop_check_before_16 := false
; [exec]
; assert _loop_termination_flag_16 ==>
;   !int___lt__(int___unbox__(_checkDefined(y_5, 3497849)), 5)
; [eval] _loop_termination_flag_16 ==> !int___lt__(int___unbox__(_checkDefined(y_5, 3497849)), 5)
(set-option :timeout 0)
(push) ; 13
; [then-branch: 559 | False | dead]
; [else-branch: 559 | True | live]
(push) ; 14
; [else-branch: 559 | True]
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(y_5), int())
; [eval] typeof(y_5)
; [eval] int()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> y_5@547@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> y_5@547@01) (as int<PyType>  PyType)))
; [eval] int___le__(int___unbox__(_checkDefined(y_5, 3497849)), 5)
; [eval] int___unbox__(_checkDefined(y_5, 3497849))
; [eval] _checkDefined(y_5, 3497849)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_5@547@01 3497849))
(pop) ; 13
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_5@547@01 3497849))
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_5@547@01 3497849)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_5@547@01 3497849)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_5@547@01 3497849)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849))))
(push) ; 13
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)) 5))
(pop) ; 13
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)) 5))
(push) ; 13
(assert (not (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)) 5)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)) 5))
; [eval] self_29.A_x == null || issubtype(typeof(self_29.A_x), ObjectLock())
; [eval] self_29.A_x == null
(push) ; 13
; [then-branch: 560 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@545@01))))))) == Null | live]
; [else-branch: 560 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@545@01))))))) != Null | live]
(push) ; 14
; [then-branch: 560 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@545@01))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
  $Ref.null))
(pop) ; 14
(push) ; 14
; [else-branch: 560 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@545@01))))))) != Null]
; [eval] issubtype(typeof(self_29.A_x), ObjectLock())
; [eval] typeof(self_29.A_x)
; [eval] ObjectLock()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(y_5, 3497849)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(y_5, 3497849))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(y_5, 3497849)), 5)
; [eval] int___unbox__(_checkDefined(y_5, 3497849))
; [eval] _checkDefined(y_5, 3497849)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)) 5))
(pop) ; 13
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)) 5))
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)) 5))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)) 5)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 561 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@547@01, 3497849)), 5) | live]
; [else-branch: 561 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@547@01, 3497849)), 5)) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 561 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@547@01, 3497849)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_5, 3497849))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_5, 3497849)))
; [eval] int___unbox__(_checkDefined(y_5, 3497849))
; [eval] _checkDefined(y_5, 3497849)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 15
; Joined path conditions
(push) ; 15
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849))))
(pop) ; 15
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849))))
(pop) ; 14
(push) ; 14
; [else-branch: 561 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@547@01, 3497849)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)) 5)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)) 5)))
(push) ; 13
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)))
    0))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)))
    0)))
; [then-branch: 562 | False | dead]
; [else-branch: 562 | True | live]
(push) ; 13
; [else-branch: 562 | True]
; [eval] perm(self_29.A_x.MustReleaseBounded) > none && Measure$check(_loop_measures_16, self_29.A_x, int___sub__(10, int___unbox__(_checkDefined(y_5, 3497849))))
; [eval] perm(self_29.A_x.MustReleaseBounded) > none
; [eval] perm(self_29.A_x.MustReleaseBounded)
(push) ; 14
; [then-branch: 563 | False | live]
; [else-branch: 563 | True | live]
(push) ; 15
; [then-branch: 563 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 563 | True]
; [eval] Measure$check(_loop_measures_16, self_29.A_x, int___sub__(10, int___unbox__(_checkDefined(y_5, 3497849))))
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_5, 3497849)))
; [eval] int___unbox__(_checkDefined(y_5, 3497849))
; [eval] _checkDefined(y_5, 3497849)
(push) ; 16
; [eval] _isDefined(id)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
; Joined path conditions
(push) ; 16
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849))))
(pop) ; 16
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849))))
(push) ; 16
(assert (Measure$check%precondition $Snap.unit _loop_measures_16@546@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)))))
(pop) ; 16
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_16@546@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (and
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)))
  (Measure$check%precondition $Snap.unit _loop_measures_16@546@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849))))))
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (Measure$check $Snap.unit _loop_measures_16@546@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (Measure$check $Snap.unit _loop_measures_16@546@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 564 | Measure$check(_, _loop_measures_16@546@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@545@01))))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, y_5@547@01, 3497849)))) | live]
; [else-branch: 564 | !(Measure$check(_, _loop_measures_16@546@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@545@01))))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, y_5@547@01, 3497849))))) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 564 | Measure$check(_, _loop_measures_16@546@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@545@01))))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, y_5@547@01, 3497849))))]
(assert (Measure$check $Snap.unit _loop_measures_16@546@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@547@01 3497849)))))
; [eval] _loop_check_before_16 ==> _loop_termination_flag_16 || (!int___lt__(int___unbox__(_checkDefined(y_5, 3497849)), 5) || perm(MustTerminate(_cthread_168)) == none && ((forperm _r_68: Ref [MustInvokeBounded(_r_68)] :: false) && ((forperm _r_68: Ref [MustInvokeUnbounded(_r_68)] :: false) && ((forperm _r_68: Ref [_r_68.MustReleaseBounded] :: false) && (forperm _r_68: Ref [_r_68.MustReleaseUnbounded] :: false)))))
(push) ; 15
; [then-branch: 565 | False | dead]
; [else-branch: 565 | True | live]
(push) ; 16
; [else-branch: 565 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
; [eval] !_loop_check_before_16 ==> (forperm _r_68: Ref [MustInvokeBounded(_r_68)] :: false) && ((forperm _r_68: Ref [MustInvokeUnbounded(_r_68)] :: false) && ((forperm _r_68: Ref [_r_68.MustReleaseBounded] :: false) && (forperm _r_68: Ref [_r_68.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_16
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 566 | True | live]
; [else-branch: 566 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 566 | True]
; [eval] (forperm _r_68: Ref [MustInvokeBounded(_r_68)] :: false) && ((forperm _r_68: Ref [MustInvokeUnbounded(_r_68)] :: false) && ((forperm _r_68: Ref [_r_68.MustReleaseBounded] :: false) && (forperm _r_68: Ref [_r_68.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_68: Ref [MustInvokeBounded(_r_68)] :: false)
(push) ; 17
; [then-branch: 567 | False | live]
; [else-branch: 567 | True | live]
(push) ; 18
; [then-branch: 567 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 567 | True]
; [eval] (forperm _r_68: Ref [MustInvokeUnbounded(_r_68)] :: false)
(push) ; 19
; [then-branch: 568 | False | live]
; [else-branch: 568 | True | live]
(push) ; 20
; [then-branch: 568 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 568 | True]
; [eval] (forperm _r_68: Ref [_r_68.MustReleaseBounded] :: false)
(push) ; 21
; [then-branch: 569 | False | live]
; [else-branch: 569 | True | live]
(push) ; 22
; [then-branch: 569 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 569 | True]
; [eval] (forperm _r_68: Ref [_r_68.MustReleaseUnbounded] :: false)
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 558 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@543@01, 3497849)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5)))
(pop) ; 12
; [eval] !int___lt__(int___unbox__(_checkDefined(y_5, 3497849)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_5, 3497849)), 5)
; [eval] int___unbox__(_checkDefined(y_5, 3497849))
; [eval] _checkDefined(y_5, 3497849)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 12
; Joined path conditions
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 570 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@543@01, 3497849)), 5)) | live]
; [else-branch: 570 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@543@01, 3497849)), 5) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 570 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@543@01, 3497849)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5)))
; [exec]
; exhale perm(MustTerminate(_cthread_168)) > none ==>
;   acc(MustTerminate(_cthread_168), perm(MustTerminate(_cthread_168)) -
;   _loop_original_must_terminate_16)
; [eval] perm(MustTerminate(_cthread_168)) > none
; [eval] perm(MustTerminate(_cthread_168))
; [then-branch: 571 | False | dead]
; [else-branch: 571 | True | live]
(push) ; 13
; [else-branch: 571 | True]
; [exec]
; label post_loop_16
; [exec]
; label loop_end_15
; [exec]
; _loop_check_before_15 := false
; [exec]
; assert _loop_termination_flag_15 ==>
;   !int___lt__(int___unbox__(_checkDefined(x_10, 808542072)), 5)
; [eval] _loop_termination_flag_15 ==> !int___lt__(int___unbox__(_checkDefined(x_10, 808542072)), 5)
(push) ; 14
; [then-branch: 572 | False | dead]
; [else-branch: 572 | True | live]
(push) ; 15
; [else-branch: 572 | True]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(x_10), int())
; [eval] typeof(x_10)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> x_10@539@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_10@539@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(y_5), int())
; [eval] typeof(y_5)
; [eval] int()
; [eval] int___le__(int___unbox__(_checkDefined(y_5, 3497849)), 5)
; [eval] int___unbox__(_checkDefined(y_5, 3497849))
; [eval] _checkDefined(y_5, 3497849)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(pop) ; 14
; Joined path conditions
; [eval] self_29.A_x == null || issubtype(typeof(self_29.A_x), ObjectLock())
; [eval] self_29.A_x == null
(push) ; 14
; [then-branch: 573 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@545@01))))))) == Null | live]
; [else-branch: 573 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@545@01))))))) != Null | live]
(push) ; 15
; [then-branch: 573 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@545@01))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
  $Ref.null))
(pop) ; 15
(push) ; 15
; [else-branch: 573 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@545@01))))))) != Null]
; [eval] issubtype(typeof(self_29.A_x), ObjectLock())
; [eval] typeof(self_29.A_x)
; [eval] ObjectLock()
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(x_10, 808542072)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_10, 808542072))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_10, 808542072)), 5)
; [eval] int___unbox__(_checkDefined(x_10, 808542072))
; [eval] _checkDefined(x_10, 808542072)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_10@539@01 808542072))
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_10@539@01 808542072))
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_10@539@01 808542072)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_10@539@01 808542072)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072)))
(pop) ; 14
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_10@539@01 808542072)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072))))
(push) ; 14
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072)) 5))
(pop) ; 14
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072)) 5))
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072)) 5))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072)) 5)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 574 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@539@01, 808542072)), 5) | live]
; [else-branch: 574 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@539@01, 808542072)), 5)) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 574 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@539@01, 808542072)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_10, 808542072))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_10, 808542072)))
; [eval] int___unbox__(_checkDefined(x_10, 808542072))
; [eval] _checkDefined(x_10, 808542072)
(push) ; 16
; [eval] _isDefined(id)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
; Joined path conditions
(push) ; 16
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072))))
(pop) ; 16
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072))))
(pop) ; 15
(push) ; 15
; [else-branch: 574 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@539@01, 808542072)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072)) 5)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072)) 5)))
(push) ; 14
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072)))
    0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072)))
    0)))
; [then-branch: 575 | False | dead]
; [else-branch: 575 | True | live]
(push) ; 14
; [else-branch: 575 | True]
; [eval] perm(self_29.A_x.MustReleaseBounded) > none && Measure$check(_loop_measures_15, self_29.A_x, int___sub__(10, int___unbox__(_checkDefined(x_10, 808542072))))
; [eval] perm(self_29.A_x.MustReleaseBounded) > none
; [eval] perm(self_29.A_x.MustReleaseBounded)
(push) ; 15
; [then-branch: 576 | False | live]
; [else-branch: 576 | True | live]
(push) ; 16
; [then-branch: 576 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 576 | True]
; [eval] Measure$check(_loop_measures_15, self_29.A_x, int___sub__(10, int___unbox__(_checkDefined(x_10, 808542072))))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_10, 808542072)))
; [eval] int___unbox__(_checkDefined(x_10, 808542072))
; [eval] _checkDefined(x_10, 808542072)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072))))
(pop) ; 17
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072))))
(push) ; 17
(assert (Measure$check%precondition $Snap.unit _loop_measures_15@538@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072)))))
(pop) ; 17
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_15@538@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072)))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (and
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072)))
  (Measure$check%precondition $Snap.unit _loop_measures_15@538@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072))))))
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (Measure$check $Snap.unit _loop_measures_15@538@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (Measure$check $Snap.unit _loop_measures_15@538@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 577 | Measure$check(_, _loop_measures_15@538@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@545@01))))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, x_10@539@01, 808542072)))) | live]
; [else-branch: 577 | !(Measure$check(_, _loop_measures_15@538@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@545@01))))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, x_10@539@01, 808542072))))) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 577 | Measure$check(_, _loop_measures_15@538@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@545@01))))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, x_10@539@01, 808542072))))]
(assert (Measure$check $Snap.unit _loop_measures_15@538@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@539@01 808542072)))))
; [eval] _loop_check_before_15 ==> _loop_termination_flag_15 || (!int___lt__(int___unbox__(_checkDefined(x_10, 808542072)), 5) || perm(MustTerminate(_cthread_168)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)))))
(push) ; 16
; [then-branch: 578 | False | dead]
; [else-branch: 578 | True | live]
(push) ; 17
; [else-branch: 578 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] !_loop_check_before_15 ==> (forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_15
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 579 | True | live]
; [else-branch: 579 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 579 | True]
; [eval] (forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false)
(push) ; 18
; [then-branch: 580 | False | live]
; [else-branch: 580 | True | live]
(push) ; 19
; [then-branch: 580 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 580 | True]
; [eval] (forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false)
(push) ; 20
; [then-branch: 581 | False | live]
; [else-branch: 581 | True | live]
(push) ; 21
; [then-branch: 581 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 581 | True]
; [eval] (forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false)
(push) ; 22
; [then-branch: 582 | False | live]
; [else-branch: 582 | True | live]
(push) ; 23
; [then-branch: 582 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 582 | True]
; [eval] (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 570 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_5@543@01, 3497849)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_5@543@01 3497849)) 5))
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 543 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@530@01, 808542072)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5)))
(pop) ; 7
; [eval] !int___lt__(int___unbox__(_checkDefined(x_10, 808542072)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_10, 808542072)), 5)
; [eval] int___unbox__(_checkDefined(x_10, 808542072))
; [eval] _checkDefined(x_10, 808542072)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 583 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@530@01, 808542072)), 5)) | live]
; [else-branch: 583 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@530@01, 808542072)), 5) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 583 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_10@530@01, 808542072)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_10@530@01 808542072)) 5)))
; [exec]
; exhale perm(MustTerminate(_cthread_168)) > none ==>
;   acc(MustTerminate(_cthread_168), perm(MustTerminate(_cthread_168)) -
;   _loop_original_must_terminate_15)
; [eval] perm(MustTerminate(_cthread_168)) > none
; [eval] perm(MustTerminate(_cthread_168))
; [then-branch: 584 | False | dead]
; [else-branch: 584 | True | live]
(push) ; 8
; [else-branch: 584 | True]
; [exec]
; label post_loop_15
; [exec]
; label __end
; [eval] self_11.A_x == null || issubtype(typeof(self_11.A_x), ObjectLock())
; [eval] self_11.A_x == null
(push) ; 9
; [then-branch: 585 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@537@01)))))))) == Null | live]
; [else-branch: 585 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@537@01)))))))) != Null | live]
(push) ; 10
; [then-branch: 585 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@537@01)))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))))
  $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 585 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@537@01)))))))) != Null]
; [eval] issubtype(typeof(self_11.A_x), ObjectLock())
; [eval] typeof(self_11.A_x)
; [eval] ObjectLock()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(check-sat)
; unknown
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- A_nested4_convert_accept ----------
(declare-const _cthread_169@549@01 $Ref)
(declare-const _caller_measures_169@550@01 Seq<Measure$>)
(declare-const _residue_169@551@01 $Perm)
(declare-const self_12@552@01 $Ref)
(declare-const _current_wait_level_169@553@01 $Perm)
(declare-const _cthread_169@554@01 $Ref)
(declare-const _caller_measures_169@555@01 Seq<Measure$>)
(declare-const _residue_169@556@01 $Perm)
(declare-const self_12@557@01 $Ref)
(declare-const _current_wait_level_169@558@01 $Perm)
(push) ; 1
(declare-const $t@559@01 $Snap)
(assert (= $t@559@01 ($Snap.combine ($Snap.first $t@559@01) ($Snap.second $t@559@01))))
(assert (= ($Snap.first $t@559@01) $Snap.unit))
; [eval] _cthread_169 != null
(assert (not (= _cthread_169@554@01 $Ref.null)))
(assert (=
  ($Snap.second $t@559@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@559@01))
    ($Snap.second ($Snap.second $t@559@01)))))
(assert (= ($Snap.first ($Snap.second $t@559@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_169), Thread_0())
; [eval] typeof(_cthread_169)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_169@554@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@559@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@559@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@559@01))) $Snap.unit))
; [eval] issubtype(typeof(self_12), A())
; [eval] typeof(self_12)
; [eval] A()
(assert (issubtype<Bool> (typeof<PyType> self_12@557@01) (as A<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@559@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@559@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@559@01))))
  $Snap.unit))
; [eval] self_12 != null
(assert (not (= self_12@557@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))
  $Snap.unit))
; [eval] self_12.A_x == null || issubtype(typeof(self_12.A_x), ObjectLock())
; [eval] self_12.A_x == null
(push) ; 2
; [then-branch: 586 | First:(Second:(Second:(Second:(Second:($t@559@01))))) == Null | live]
; [else-branch: 586 | First:(Second:(Second:(Second:(Second:($t@559@01))))) != Null | live]
(push) ; 3
; [then-branch: 586 | First:(Second:(Second:(Second:(Second:($t@559@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))
  $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 586 | First:(Second:(Second:(Second:(Second:($t@559@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_12.A_x), ObjectLock())
; [eval] typeof(self_12.A_x)
; [eval] ObjectLock()
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01)))))))
  $Snap.unit))
; [eval] self_12.A_x != null
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))))
  $Snap.unit))
; [eval] _residue_169 < Level(self_12.A_x)
; [eval] Level(self_12.A_x)
(push) ; 2
(assert (Level%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))))
(pop) ; 2
; Joined path conditions
(assert (Level%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))))
(assert (<
  _residue_169@556@01
  (Level $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01)))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@560@01 $Snap)
(assert (= $t@560@01 ($Snap.combine ($Snap.first $t@560@01) ($Snap.second $t@560@01))))
(assert (= ($Snap.first $t@560@01) $Snap.unit))
; [eval] (forperm _r_79: Ref [_r_79.MustReleaseBounded] :: Level(_r_79) <= _current_wait_level_169)
(assert (=
  ($Snap.second $t@560@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@560@01))
    ($Snap.second ($Snap.second $t@560@01)))))
(assert (= ($Snap.first ($Snap.second $t@560@01)) $Snap.unit))
; [eval] (forperm _r_79: Ref [_r_79.MustReleaseUnbounded] :: Level(_r_79) <= _current_wait_level_169)
(assert (=
  ($Snap.second ($Snap.second $t@560@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@560@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@560@01))) $Snap.unit))
; [eval] _residue_169 <= _current_wait_level_169
(assert (<= _residue_169@556@01 _current_wait_level_169@558@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@560@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
  $Snap.unit))
; [eval] self_12.A_x == null || issubtype(typeof(self_12.A_x), ObjectLock())
; [eval] self_12.A_x == null
(push) ; 3
; [then-branch: 587 | First:(Second:(Second:(Second:($t@560@01)))) == Null | live]
; [else-branch: 587 | First:(Second:(Second:(Second:($t@560@01)))) != Null | live]
(push) ; 4
; [then-branch: 587 | First:(Second:(Second:(Second:($t@560@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
  $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 587 | First:(Second:(Second:(Second:($t@560@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    $Ref.null)))
; [eval] issubtype(typeof(self_12.A_x), ObjectLock())
; [eval] typeof(self_12.A_x)
; [eval] ObjectLock()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@561@01 $Ref)
; [exec]
; var x_11: Ref
(declare-const x_11@562@01 $Ref)
; [exec]
; var y_6: Ref
(declare-const y_6@563@01 $Ref)
; [exec]
; var self_30: Ref
(declare-const self_30@564@01 $Ref)
; [exec]
; var _loop_measures_17: Seq[Measure$]
(declare-const _loop_measures_17@565@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_17: Bool
(declare-const _loop_check_before_17@566@01 Bool)
; [exec]
; var _loop_termination_flag_17: Bool
(declare-const _loop_termination_flag_17@567@01 Bool)
; [exec]
; var _loop_original_must_terminate_17: Perm
(declare-const _loop_original_must_terminate_17@568@01 $Perm)
; [exec]
; var _residue_193: Perm
(declare-const _residue_193@569@01 $Perm)
; [exec]
; var _loop_measures_18: Seq[Measure$]
(declare-const _loop_measures_18@570@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_18: Bool
(declare-const _loop_check_before_18@571@01 Bool)
; [exec]
; var _loop_termination_flag_18: Bool
(declare-const _loop_termination_flag_18@572@01 Bool)
; [exec]
; var _loop_original_must_terminate_18: Perm
(declare-const _loop_original_must_terminate_18@573@01 $Perm)
; [exec]
; var _residue_194: Perm
(declare-const _residue_194@574@01 $Perm)
; [exec]
; var _cwl_169: Perm
(declare-const _cwl_169@575@01 $Perm)
; [exec]
; var _method_measures_169: Seq[Measure$]
(declare-const _method_measures_169@576@01 Seq<Measure$>)
; [exec]
; _method_measures_169 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_12) == A()
(declare-const $t@577@01 $Snap)
(assert (= $t@577@01 $Snap.unit))
; [eval] typeof(self_12) == A()
; [eval] typeof(self_12)
; [eval] A()
(assert (= (typeof<PyType> self_12@557@01) (as A<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_30 := self_12
; [exec]
; x_11 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const x_11@578@01 $Ref)
(assert (= x_11@578@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(825319288)
(declare-const $t@579@01 $Snap)
(assert (= $t@579@01 $Snap.unit))
; [eval] _isDefined(825319288)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 825319288))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 825319288))
(assert (_isDefined $Snap.unit 825319288))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; y_6 := __prim__int___box__(2)
; [eval] __prim__int___box__(2)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 2))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 2))
(declare-const y_6@580@01 $Ref)
(assert (= y_6@580@01 (__prim__int___box__ $Snap.unit 2)))
; [exec]
; inhale _isDefined(3563385)
(declare-const $t@581@01 $Snap)
(assert (= $t@581@01 $Snap.unit))
; [eval] _isDefined(3563385)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3563385))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3563385))
(assert (_isDefined $Snap.unit 3563385))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_169 := Lock_acquire(_cthread_169, _method_measures_169, _residue_169, self_30.A_x)
; [eval] _cthread_172 != null
; [eval] issubtype(typeof(_cthread_172), Thread_0())
; [eval] typeof(_cthread_172)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_15), Lock(Lock_arg(typeof(self_15), 0)))
; [eval] typeof(self_15)
; [eval] Lock(Lock_arg(typeof(self_15), 0))
; [eval] Lock_arg(typeof(self_15), 0)
; [eval] typeof(self_15)
(set-option :timeout 0)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))) 0)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))) 0))))
; [eval] issubtype(Lock_arg(typeof(self_15), 0), object())
; [eval] Lock_arg(typeof(self_15), 0)
; [eval] typeof(self_15)
; [eval] object()
(push) ; 3
(assert (not (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))) 0) (as object<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))) 0) (as object<PyType>  PyType)))
; [eval] self_15 != null
; [eval] (forperm _r_86: Ref [_r_86.MustReleaseBounded] :: Level(_r_86) < Level(self_15))
; [eval] (forperm _r_86: Ref [_r_86.MustReleaseUnbounded] :: Level(_r_86) < Level(self_15))
; [eval] _residue_172 < Level(self_15)
; [eval] Level(self_15)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] Measure$check(_caller_measures_172, _cthread_172, 1) || perm(MustTerminate(_cthread_172)) == none && ((forperm _r_88: Ref [MustInvokeBounded(_r_88)] :: false) && ((forperm _r_88: Ref [MustInvokeUnbounded(_r_88)] :: false) && ((forperm _r_88: Ref [_r_88.MustReleaseBounded] :: false) && (forperm _r_88: Ref [_r_88.MustReleaseUnbounded] :: false))))
; [eval] Measure$check(_caller_measures_172, _cthread_172, 1)
(push) ; 3
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_169@554@01 1))
(pop) ; 3
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_169@554@01 1))
(push) ; 3
; [then-branch: 588 | Measure$check(_, Nil, _cthread_169@554@01, 1) | live]
; [else-branch: 588 | !(Measure$check(_, Nil, _cthread_169@554@01, 1)) | live]
(push) ; 4
; [then-branch: 588 | Measure$check(_, Nil, _cthread_169@554@01, 1)]
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_169@554@01 1))
(pop) ; 4
(push) ; 4
; [else-branch: 588 | !(Measure$check(_, Nil, _cthread_169@554@01, 1))]
(assert (not
  (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_169@554@01 1)))
; [eval] perm(MustTerminate(_cthread_172)) == none && ((forperm _r_88: Ref [MustInvokeBounded(_r_88)] :: false) && ((forperm _r_88: Ref [MustInvokeUnbounded(_r_88)] :: false) && ((forperm _r_88: Ref [_r_88.MustReleaseBounded] :: false) && (forperm _r_88: Ref [_r_88.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_172)) == none
; [eval] perm(MustTerminate(_cthread_172))
(push) ; 5
; [then-branch: 589 | False | live]
; [else-branch: 589 | True | live]
(push) ; 6
; [then-branch: 589 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 589 | True]
; [eval] (forperm _r_88: Ref [MustInvokeBounded(_r_88)] :: false)
(push) ; 7
; [then-branch: 590 | False | live]
; [else-branch: 590 | True | live]
(push) ; 8
; [then-branch: 590 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 590 | True]
; [eval] (forperm _r_88: Ref [MustInvokeUnbounded(_r_88)] :: false)
(push) ; 9
; [then-branch: 591 | False | live]
; [else-branch: 591 | True | live]
(push) ; 10
; [then-branch: 591 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 591 | True]
; [eval] (forperm _r_88: Ref [_r_88.MustReleaseBounded] :: false)
(push) ; 11
; [then-branch: 592 | False | live]
; [else-branch: 592 | True | live]
(push) ; 12
; [then-branch: 592 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 592 | True]
; [eval] (forperm _r_88: Ref [_r_88.MustReleaseUnbounded] :: false)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_169@554@01 1))
  (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_169@554@01 1)))
(declare-const _current_wait_level_172@582@01 $Perm)
(declare-const $t@583@01 $Snap)
(assert (= $t@583@01 ($Snap.combine ($Snap.first $t@583@01) ($Snap.second $t@583@01))))
(assert (= ($Snap.first $t@583@01) $Snap.unit))
; [eval] (forperm _r_87: Ref [_r_87.MustReleaseBounded] :: Level(_r_87) <= _current_wait_level_172)
(assert (=
  ($Snap.second $t@583@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@583@01))
    ($Snap.second ($Snap.second $t@583@01)))))
(assert (= ($Snap.first ($Snap.second $t@583@01)) $Snap.unit))
; [eval] (forperm _r_87: Ref [_r_87.MustReleaseUnbounded] :: Level(_r_87) <= _current_wait_level_172)
(assert (=
  ($Snap.second ($Snap.second $t@583@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@583@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@583@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@583@01))) $Snap.unit))
; [eval] _residue_172 <= _current_wait_level_172
(assert (<= _residue_169@556@01 _current_wait_level_172@582@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@583@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@583@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@583@01)))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(Lock_invariant(self_30.A_x), write)
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@583@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@583@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@583@01))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@583@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@583@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@583@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@583@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@583@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0)))
; [eval] typeof(self_17)
; [eval] Lock(Lock_arg(typeof(self_17), 0))
; [eval] Lock_arg(typeof(self_17), 0)
; [eval] typeof(self_17)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@583@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@583@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@583@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@583@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0))) ==> true
; [eval] issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0)))
; [eval] typeof(self_17)
; [eval] Lock(Lock_arg(typeof(self_17), 0))
; [eval] Lock_arg(typeof(self_17), 0)
; [eval] typeof(self_17)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))) 0))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 593 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@559@01)))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@559@01)))))), 0))) | live]
; [else-branch: 593 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@559@01)))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@559@01)))))), 0)))) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 593 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@559@01)))))), Lock[PyType](Lock_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@559@01)))))), 0)))]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@583@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_17), ObjectLock()) ==> true
; [eval] issubtype(typeof(self_17), ObjectLock())
; [eval] typeof(self_17)
; [eval] ObjectLock()
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))) (as ObjectLock<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))) (as ObjectLock<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 594 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@559@01)))))), ObjectLock[PyType]) | live]
; [else-branch: 594 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@559@01)))))), ObjectLock[PyType])) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 594 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:($t@559@01)))))), ObjectLock[PyType])]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))) (as ObjectLock<PyType>  PyType)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))) (as ObjectLock<PyType>  PyType)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Lock_invariant%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@583@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))))
; [exec]
; _loop_original_must_terminate_17 := perm(MustTerminate(_cthread_169))
; [eval] perm(MustTerminate(_cthread_169))
(declare-const _loop_original_must_terminate_17@584@01 $Perm)
(assert (= _loop_original_must_terminate_17@584@01 $Perm.No))
; [exec]
; _loop_termination_flag_17 := false
; [exec]
; _loop_check_before_17 := true
(declare-const _loop_measures_17@585@01 Seq<Measure$>)
(declare-const x_11@586@01 $Ref)
(declare-const _loop_original_must_terminate_18@587@01 $Perm)
(declare-const _loop_termination_flag_18@588@01 Bool)
(declare-const _loop_check_before_18@589@01 Bool)
(declare-const _loop_measures_18@590@01 Seq<Measure$>)
(declare-const y_6@591@01 $Ref)
(declare-const _loop_check_before_17@592@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@593@01 $Snap)
(assert (= $t@593@01 ($Snap.combine ($Snap.first $t@593@01) ($Snap.second $t@593@01))))
(assert (= ($Snap.first $t@593@01) $Snap.unit))
; [eval] (forperm _r_77: Ref [_r_77.MustReleaseBounded] :: Level(_r_77) <= _residue_193)
(assert (=
  ($Snap.second $t@593@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@593@01))
    ($Snap.second ($Snap.second $t@593@01)))))
(assert (= ($Snap.first ($Snap.second $t@593@01)) $Snap.unit))
; [eval] (forperm _r_77: Ref [_r_77.MustReleaseUnbounded] :: Level(_r_77) <= _residue_193)
(assert (=
  ($Snap.second ($Snap.second $t@593@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@593@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@593@01))) $Snap.unit))
; [eval] _residue_169 <= _residue_193
(assert (<= _residue_169@556@01 _residue_193@569@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@593@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@593@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@593@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(x_11), int())
; [eval] typeof(x_11)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> x_11@586@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(y_6), int())
; [eval] typeof(y_6)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> y_6@591@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))
  $Snap.unit))
; [eval] int___le__(int___unbox__(_checkDefined(y_6, 3563385)), 5)
; [eval] int___unbox__(_checkDefined(y_6, 3563385))
; [eval] _checkDefined(y_6, 3563385)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_6@591@01 3563385))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_6@591@01 3563385))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_6@591@01 3563385)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_6@591@01 3563385)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_6@591@01 3563385)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385))))
(push) ; 4
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5))
(assert (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))
  $Snap.unit))
; [eval] self_30.A_x == null || issubtype(typeof(self_30.A_x), ObjectLock())
; [eval] self_30.A_x == null
(push) ; 4
; [then-branch: 595 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@593@01)))))))) == Null | live]
; [else-branch: 595 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@593@01)))))))) != Null | live]
(push) ; 5
; [then-branch: 595 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@593@01)))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))
  $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 595 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@593@01)))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_30.A_x), ObjectLock())
; [eval] typeof(self_30.A_x)
; [eval] ObjectLock()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(x_11, 825319288)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_11, 825319288))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_11, 825319288)), 5)
; [eval] int___unbox__(_checkDefined(x_11, 825319288))
; [eval] _checkDefined(x_11, 825319288)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_11@586@01 825319288))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_11@586@01 825319288))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_11@586@01 825319288)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_11@586@01 825319288)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_11@586@01 825319288)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 596 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@586@01, 825319288)), 5) | live]
; [else-branch: 596 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@586@01, 825319288)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 596 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@586@01, 825319288)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_11, 825319288))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_11, 825319288)))
; [eval] int___unbox__(_checkDefined(x_11, 825319288))
; [eval] _checkDefined(x_11, 825319288)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288))))
(pop) ; 5
(push) ; 5
; [else-branch: 596 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@586@01, 825319288)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(x_11), int())
; [eval] typeof(x_11)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> x_11@578@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_11@578@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(y_6), int())
; [eval] typeof(y_6)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> y_6@580@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> y_6@580@01) (as int<PyType>  PyType)))
; [eval] int___le__(int___unbox__(_checkDefined(y_6, 3563385)), 5)
; [eval] int___unbox__(_checkDefined(y_6, 3563385))
; [eval] _checkDefined(y_6, 3563385)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_6@580@01 3563385))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_6@580@01 3563385))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_6@580@01 3563385)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_6@580@01 3563385)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_6@580@01 3563385)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_6@580@01 3563385)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_6@580@01 3563385))))
(push) ; 4
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@580@01 3563385)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@580@01 3563385)) 5))
(push) ; 4
(assert (not (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@580@01 3563385)) 5)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@580@01 3563385)) 5))
; [eval] self_30.A_x == null || issubtype(typeof(self_30.A_x), ObjectLock())
; [eval] self_30.A_x == null
(push) ; 4
; [then-branch: 597 | First:(Second:(Second:(Second:(Second:($t@559@01))))) == Null | live]
; [else-branch: 597 | First:(Second:(Second:(Second:(Second:($t@559@01))))) != Null | live]
(push) ; 5
; [then-branch: 597 | First:(Second:(Second:(Second:(Second:($t@559@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@559@01))))))
  $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 597 | First:(Second:(Second:(Second:(Second:($t@559@01))))) != Null]
; [eval] issubtype(typeof(self_30.A_x), ObjectLock())
; [eval] typeof(self_30.A_x)
; [eval] ObjectLock()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(x_11, 825319288)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_11, 825319288))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_11, 825319288)), 5)
; [eval] int___unbox__(_checkDefined(x_11, 825319288))
; [eval] _checkDefined(x_11, 825319288)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_11@578@01 825319288))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_11@578@01 825319288))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_11@578@01 825319288)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_11@578@01 825319288)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_11@578@01 825319288)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 598 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@578@01, 825319288)), 5) | live]
; [else-branch: 598 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@578@01, 825319288)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 598 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@578@01, 825319288)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_11, 825319288))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_11, 825319288)))
; [eval] int___unbox__(_checkDefined(x_11, 825319288))
; [eval] _checkDefined(x_11, 825319288)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288)) 5))
(push) ; 4
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288)))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288)))
    0)))
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 599 | True | live]
; [else-branch: 599 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 599 | True]
; [eval] perm(self_30.A_x.MustReleaseBounded) > none
; [eval] perm(self_30.A_x.MustReleaseBounded)
; [then-branch: 600 | False | dead]
; [else-branch: 600 | True | live]
(push) ; 5
; [else-branch: 600 | True]
; [eval] _loop_check_before_17 ==> _loop_termination_flag_17 || (!int___lt__(int___unbox__(_checkDefined(x_11, 825319288)), 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_78: Ref [MustInvokeBounded(_r_78)] :: false) && ((forperm _r_78: Ref [MustInvokeUnbounded(_r_78)] :: false) && ((forperm _r_78: Ref [_r_78.MustReleaseBounded] :: false) && (forperm _r_78: Ref [_r_78.MustReleaseUnbounded] :: false)))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 601 | True | live]
; [else-branch: 601 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 601 | True]
; [eval] _loop_termination_flag_17 || (!int___lt__(int___unbox__(_checkDefined(x_11, 825319288)), 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_78: Ref [MustInvokeBounded(_r_78)] :: false) && ((forperm _r_78: Ref [MustInvokeUnbounded(_r_78)] :: false) && ((forperm _r_78: Ref [_r_78.MustReleaseBounded] :: false) && (forperm _r_78: Ref [_r_78.MustReleaseUnbounded] :: false)))))
(push) ; 8
; [then-branch: 602 | False | live]
; [else-branch: 602 | True | live]
(push) ; 9
; [then-branch: 602 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 602 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(x_11, 825319288)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_11, 825319288)), 5)
; [eval] int___unbox__(_checkDefined(x_11, 825319288))
; [eval] _checkDefined(x_11, 825319288)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 603 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@578@01, 825319288)), 5)) | live]
; [else-branch: 603 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@578@01, 825319288)), 5) | live]
(push) ; 11
; [then-branch: 603 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@578@01, 825319288)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288)) 5)))
(pop) ; 11
(push) ; 11
; [else-branch: 603 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@578@01, 825319288)), 5)]
; [eval] perm(MustTerminate(_cthread_169)) == none && ((forperm _r_78: Ref [MustInvokeBounded(_r_78)] :: false) && ((forperm _r_78: Ref [MustInvokeUnbounded(_r_78)] :: false) && ((forperm _r_78: Ref [_r_78.MustReleaseBounded] :: false) && (forperm _r_78: Ref [_r_78.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_169)) == none
; [eval] perm(MustTerminate(_cthread_169))
(push) ; 12
; [then-branch: 604 | False | live]
; [else-branch: 604 | True | live]
(push) ; 13
; [then-branch: 604 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 604 | True]
; [eval] (forperm _r_78: Ref [MustInvokeBounded(_r_78)] :: false)
(push) ; 14
; [then-branch: 605 | False | live]
; [else-branch: 605 | True | live]
(push) ; 15
; [then-branch: 605 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 605 | True]
; [eval] (forperm _r_78: Ref [MustInvokeUnbounded(_r_78)] :: false)
(push) ; 16
; [then-branch: 606 | False | live]
; [else-branch: 606 | True | live]
(push) ; 17
; [then-branch: 606 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 606 | True]
; [eval] (forperm _r_78: Ref [_r_78.MustReleaseBounded] :: false)
(push) ; 18
; [then-branch: 607 | False | live]
; [else-branch: 607 | True | live]
(push) ; 19
; [then-branch: 607 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 607 | True]
; [eval] (forperm _r_78: Ref [_r_78.MustReleaseUnbounded] :: false)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288)) 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288)) 5))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@578@01 825319288)) 5))))
; [eval] !_loop_check_before_17 ==> (forperm _r_78: Ref [MustInvokeBounded(_r_78)] :: false) && ((forperm _r_78: Ref [MustInvokeUnbounded(_r_78)] :: false) && ((forperm _r_78: Ref [_r_78.MustReleaseBounded] :: false) && (forperm _r_78: Ref [_r_78.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_17
(push) ; 6
; [then-branch: 608 | False | dead]
; [else-branch: 608 | True | live]
(push) ; 7
; [else-branch: 608 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 6
(assert (= $t@593@01 ($Snap.combine ($Snap.first $t@593@01) ($Snap.second $t@593@01))))
(assert (= ($Snap.first $t@593@01) $Snap.unit))
(assert (=
  ($Snap.second $t@593@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@593@01))
    ($Snap.second ($Snap.second $t@593@01)))))
(assert (= ($Snap.first ($Snap.second $t@593@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@593@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@593@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@593@01))) $Snap.unit))
(assert (<= _residue_169@556@01 _residue_193@569@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@593@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@593@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@593@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> x_11@586@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> y_6@591@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit y_6@591@01 3563385))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_6@591@01 3563385)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)))
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5))
(assert (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))
  $Snap.unit))
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit x_11@586@01 825319288))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_11@586@01 825319288)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 7
; [eval] int___lt__(int___unbox__(_checkDefined(x_11, 825319288)), 5)
; [eval] int___unbox__(_checkDefined(x_11, 825319288))
; [eval] _checkDefined(x_11, 825319288)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [eval] !int___lt__(int___unbox__(_checkDefined(x_11, 825319288)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_11, 825319288)), 5)
; [eval] int___unbox__(_checkDefined(x_11, 825319288))
; [eval] _checkDefined(x_11, 825319288)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(x_11, 825319288)), 5)
; [eval] int___unbox__(_checkDefined(x_11, 825319288))
; [eval] _checkDefined(x_11, 825319288)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 609 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@586@01, 825319288)), 5) | live]
; [else-branch: 609 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@586@01, 825319288)), 5)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 609 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@586@01, 825319288)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5))
; [exec]
; _loop_measures_17 := Seq(Measure$create(true, self_30.A_x, int___sub__(10, int___unbox__(_checkDefined(x_11,
;   825319288)))))
; [eval] Seq(Measure$create(true, self_30.A_x, int___sub__(10, int___unbox__(_checkDefined(x_11, 825319288)))))
; [eval] Measure$create(true, self_30.A_x, int___sub__(10, int___unbox__(_checkDefined(x_11, 825319288))))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_11, 825319288)))
; [eval] int___unbox__(_checkDefined(x_11, 825319288))
; [eval] _checkDefined(x_11, 825319288)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288))))
(pop) ; 8
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288))))))
  1))
(declare-const _loop_measures_17@594@01 Seq<Measure$>)
(assert (=
  _loop_measures_17@594@01
  (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01))))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)))))))
; [exec]
; x_11 := __prim__int___box__(int___add__(int___unbox__(x_11), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(x_11), 1))
; [eval] int___add__(int___unbox__(x_11), 1)
; [eval] int___unbox__(x_11)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit x_11@586@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit x_11@586@01))
(push) ; 8
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_11@586@01) 1))
(pop) ; 8
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit x_11@586@01) 1))
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_11@586@01) 1)))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_11@586@01) 1)))
(declare-const x_11@595@01 $Ref)
(assert (=
  x_11@595@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit x_11@586@01) 1))))
; [exec]
; inhale _isDefined(825319288)
(declare-const $t@596@01 $Snap)
(assert (= $t@596@01 $Snap.unit))
; [eval] _isDefined(825319288)
(push) ; 8
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_18 := perm(MustTerminate(_cthread_169))
; [eval] perm(MustTerminate(_cthread_169))
(declare-const _loop_original_must_terminate_18@597@01 $Perm)
(assert (= _loop_original_must_terminate_18@597@01 $Perm.No))
; [exec]
; _loop_termination_flag_18 := false
; [exec]
; _loop_check_before_18 := true
(declare-const _loop_measures_18@598@01 Seq<Measure$>)
(declare-const y_6@599@01 $Ref)
(declare-const _loop_check_before_18@600@01 Bool)
(set-option :timeout 0)
(push) ; 8
; Loop head block: Check well-definedness of invariant
(declare-const $t@601@01 $Snap)
(assert (= $t@601@01 ($Snap.combine ($Snap.first $t@601@01) ($Snap.second $t@601@01))))
(assert (= ($Snap.first $t@601@01) $Snap.unit))
; [eval] (forperm _r_75: Ref [_r_75.MustReleaseBounded] :: Level(_r_75) <= _residue_194)
(assert (=
  ($Snap.second $t@601@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@601@01))
    ($Snap.second ($Snap.second $t@601@01)))))
(assert (= ($Snap.first ($Snap.second $t@601@01)) $Snap.unit))
; [eval] (forperm _r_75: Ref [_r_75.MustReleaseUnbounded] :: Level(_r_75) <= _residue_194)
(assert (=
  ($Snap.second ($Snap.second $t@601@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@601@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@601@01))) $Snap.unit))
; [eval] _residue_193 <= _residue_194
(assert (<= _residue_193@569@01 _residue_194@574@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@601@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@601@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@601@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(y_6), int())
; [eval] typeof(y_6)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> y_6@599@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))
  $Snap.unit))
; [eval] int___le__(int___unbox__(_checkDefined(y_6, 3563385)), 5)
; [eval] int___unbox__(_checkDefined(y_6, 3563385))
; [eval] _checkDefined(y_6, 3563385)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_6@599@01 3563385))
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_6@599@01 3563385))
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_6@599@01 3563385)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_6@599@01 3563385)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_6@599@01 3563385)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385))))
(push) ; 9
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5))
(pop) ; 9
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5))
(assert (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))
  $Snap.unit))
; [eval] self_30.A_x == null || issubtype(typeof(self_30.A_x), ObjectLock())
; [eval] self_30.A_x == null
(push) ; 9
; [then-branch: 610 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@601@01))))))) == Null | live]
; [else-branch: 610 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@601@01))))))) != Null | live]
(push) ; 10
; [then-branch: 610 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@601@01))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))
  $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 610 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@601@01))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_30.A_x), ObjectLock())
; [eval] typeof(self_30.A_x)
; [eval] ObjectLock()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(y_6, 3563385)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(y_6, 3563385))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(y_6, 3563385)), 5)
; [eval] int___unbox__(_checkDefined(y_6, 3563385))
; [eval] _checkDefined(y_6, 3563385)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5))
(pop) ; 9
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 611 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@599@01, 3563385)), 5) | live]
; [else-branch: 611 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@599@01, 3563385)), 5)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 611 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@599@01, 3563385)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_6, 3563385))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_6, 3563385)))
; [eval] int___unbox__(_checkDefined(y_6, 3563385))
; [eval] _checkDefined(y_6, 3563385)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385))))
(pop) ; 11
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385))))
(pop) ; 10
(push) ; 10
; [else-branch: 611 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@599@01, 3563385)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))))))
  $Snap.unit))
(pop) ; 8
(push) ; 8
; Loop head block: Establish invariant
; [eval] issubtype(typeof(y_6), int())
; [eval] typeof(y_6)
; [eval] int()
; [eval] int___le__(int___unbox__(_checkDefined(y_6, 3563385)), 5)
; [eval] int___unbox__(_checkDefined(y_6, 3563385))
; [eval] _checkDefined(y_6, 3563385)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
; [eval] self_30.A_x == null || issubtype(typeof(self_30.A_x), ObjectLock())
; [eval] self_30.A_x == null
(push) ; 9
; [then-branch: 612 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@593@01)))))))) == Null | live]
; [else-branch: 612 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@593@01)))))))) != Null | live]
(push) ; 10
; [then-branch: 612 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@593@01)))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))
  $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 612 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@593@01)))))))) != Null]
; [eval] issubtype(typeof(self_30.A_x), ObjectLock())
; [eval] typeof(self_30.A_x)
; [eval] ObjectLock()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(y_6, 3563385)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(y_6, 3563385))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(y_6, 3563385)), 5)
; [eval] int___unbox__(_checkDefined(y_6, 3563385))
; [eval] _checkDefined(y_6, 3563385)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5))
(pop) ; 9
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 613 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@591@01, 3563385)), 5) | live]
; [else-branch: 613 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@591@01, 3563385)), 5)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 613 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@591@01, 3563385)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_6, 3563385))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_6, 3563385)))
; [eval] int___unbox__(_checkDefined(y_6, 3563385))
; [eval] _checkDefined(y_6, 3563385)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385))))
(pop) ; 11
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385))))
(pop) ; 10
(push) ; 10
; [else-branch: 613 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@591@01, 3563385)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5)))
(push) ; 9
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)))
    0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)))
    0)))
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 614 | True | live]
; [else-branch: 614 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 614 | True]
; [eval] perm(self_30.A_x.MustReleaseBounded) > none
; [eval] perm(self_30.A_x.MustReleaseBounded)
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 615 | True | live]
; [else-branch: 615 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 615 | True]
; [eval] _loop_check_before_18 ==> _loop_termination_flag_18 || (!int___lt__(int___unbox__(_checkDefined(y_6, 3563385)), 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_76: Ref [MustInvokeBounded(_r_76)] :: false) && ((forperm _r_76: Ref [MustInvokeUnbounded(_r_76)] :: false) && ((forperm _r_76: Ref [_r_76.MustReleaseBounded] :: false) && (forperm _r_76: Ref [_r_76.MustReleaseUnbounded] :: false)))))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 616 | True | live]
; [else-branch: 616 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 616 | True]
; [eval] _loop_termination_flag_18 || (!int___lt__(int___unbox__(_checkDefined(y_6, 3563385)), 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_76: Ref [MustInvokeBounded(_r_76)] :: false) && ((forperm _r_76: Ref [MustInvokeUnbounded(_r_76)] :: false) && ((forperm _r_76: Ref [_r_76.MustReleaseBounded] :: false) && (forperm _r_76: Ref [_r_76.MustReleaseUnbounded] :: false)))))
(push) ; 13
; [then-branch: 617 | False | live]
; [else-branch: 617 | True | live]
(push) ; 14
; [then-branch: 617 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 617 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(y_6, 3563385)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_6, 3563385)), 5)
; [eval] int___unbox__(_checkDefined(y_6, 3563385))
; [eval] _checkDefined(y_6, 3563385)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 15
; Joined path conditions
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
; [then-branch: 618 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@591@01, 3563385)), 5)) | live]
; [else-branch: 618 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@591@01, 3563385)), 5) | live]
(push) ; 16
; [then-branch: 618 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@591@01, 3563385)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5)))
(pop) ; 16
(push) ; 16
; [else-branch: 618 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@591@01, 3563385)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5))
; [eval] perm(MustTerminate(_cthread_169)) == none && ((forperm _r_76: Ref [MustInvokeBounded(_r_76)] :: false) && ((forperm _r_76: Ref [MustInvokeUnbounded(_r_76)] :: false) && ((forperm _r_76: Ref [_r_76.MustReleaseBounded] :: false) && (forperm _r_76: Ref [_r_76.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_169)) == none
; [eval] perm(MustTerminate(_cthread_169))
(push) ; 17
; [then-branch: 619 | False | live]
; [else-branch: 619 | True | live]
(push) ; 18
; [then-branch: 619 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 619 | True]
; [eval] (forperm _r_76: Ref [MustInvokeBounded(_r_76)] :: false)
(push) ; 19
; [then-branch: 620 | False | live]
; [else-branch: 620 | True | live]
(push) ; 20
; [then-branch: 620 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 620 | True]
; [eval] (forperm _r_76: Ref [MustInvokeUnbounded(_r_76)] :: false)
(push) ; 21
; [then-branch: 621 | False | live]
; [else-branch: 621 | True | live]
(push) ; 22
; [then-branch: 621 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 621 | True]
; [eval] (forperm _r_76: Ref [_r_76.MustReleaseBounded] :: false)
(push) ; 23
; [then-branch: 622 | False | live]
; [else-branch: 622 | True | live]
(push) ; 24
; [then-branch: 622 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 622 | True]
; [eval] (forperm _r_76: Ref [_r_76.MustReleaseUnbounded] :: false)
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@591@01 3563385)) 5))))
; [eval] !_loop_check_before_18 ==> (forperm _r_76: Ref [MustInvokeBounded(_r_76)] :: false) && ((forperm _r_76: Ref [MustInvokeUnbounded(_r_76)] :: false) && ((forperm _r_76: Ref [_r_76.MustReleaseBounded] :: false) && (forperm _r_76: Ref [_r_76.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_18
(push) ; 11
; [then-branch: 623 | False | dead]
; [else-branch: 623 | True | live]
(push) ; 12
; [else-branch: 623 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 11
(assert (= $t@601@01 ($Snap.combine ($Snap.first $t@601@01) ($Snap.second $t@601@01))))
(assert (= ($Snap.first $t@601@01) $Snap.unit))
(assert (=
  ($Snap.second $t@601@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@601@01))
    ($Snap.second ($Snap.second $t@601@01)))))
(assert (= ($Snap.first ($Snap.second $t@601@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@601@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@601@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@601@01))) $Snap.unit))
(assert (<= _residue_193@569@01 _residue_194@574@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@601@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@601@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@601@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> y_6@599@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit y_6@599@01 3563385))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_6@599@01 3563385)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)))
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5))
(assert (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))
  $Snap.unit))
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))) (as ObjectLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))))
  $Snap.unit))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 12
; [eval] int___lt__(int___unbox__(_checkDefined(y_6, 3563385)), 5)
; [eval] int___unbox__(_checkDefined(y_6, 3563385))
; [eval] _checkDefined(y_6, 3563385)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [eval] !int___lt__(int___unbox__(_checkDefined(y_6, 3563385)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_6, 3563385)), 5)
; [eval] int___unbox__(_checkDefined(y_6, 3563385))
; [eval] _checkDefined(y_6, 3563385)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(y_6, 3563385)), 5)
; [eval] int___unbox__(_checkDefined(y_6, 3563385))
; [eval] _checkDefined(y_6, 3563385)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 12
; Joined path conditions
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 624 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@599@01, 3563385)), 5) | live]
; [else-branch: 624 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@599@01, 3563385)), 5)) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 624 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@599@01, 3563385)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5))
; [exec]
; _loop_measures_18 := Seq(Measure$create(true, self_30.A_x, int___sub__(10, int___unbox__(_checkDefined(y_6,
;   3563385)))))
; [eval] Seq(Measure$create(true, self_30.A_x, int___sub__(10, int___unbox__(_checkDefined(y_6, 3563385)))))
; [eval] Measure$create(true, self_30.A_x, int___sub__(10, int___unbox__(_checkDefined(y_6, 3563385))))
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_6, 3563385)))
; [eval] int___unbox__(_checkDefined(y_6, 3563385))
; [eval] _checkDefined(y_6, 3563385)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385))))
(pop) ; 13
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385))))))
  1))
(declare-const _loop_measures_18@602@01 Seq<Measure$>)
(assert (=
  _loop_measures_18@602@01
  (Seq_singleton (Measure$create<Measure$> true ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)))))))
; [exec]
; y_6 := __prim__int___box__(int___add__(int___unbox__(y_6), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(y_6), 1))
; [eval] int___add__(int___unbox__(y_6), 1)
; [eval] int___unbox__(y_6)
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit y_6@599@01))
(pop) ; 13
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit y_6@599@01))
(push) ; 13
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit y_6@599@01) 1))
(pop) ; 13
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit y_6@599@01) 1))
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit y_6@599@01) 1)))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit y_6@599@01) 1)))
(declare-const y_6@603@01 $Ref)
(assert (=
  y_6@603@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit y_6@599@01) 1))))
; [exec]
; inhale _isDefined(3563385)
(declare-const $t@604@01 $Snap)
(assert (= $t@604@01 $Snap.unit))
; [eval] _isDefined(3563385)
(push) ; 13
(pop) ; 13
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop_end_18
; [exec]
; _loop_check_before_18 := false
; [exec]
; assert _loop_termination_flag_18 ==>
;   !int___lt__(int___unbox__(_checkDefined(y_6, 3563385)), 5)
; [eval] _loop_termination_flag_18 ==> !int___lt__(int___unbox__(_checkDefined(y_6, 3563385)), 5)
(set-option :timeout 0)
(push) ; 13
; [then-branch: 625 | False | dead]
; [else-branch: 625 | True | live]
(push) ; 14
; [else-branch: 625 | True]
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(y_6), int())
; [eval] typeof(y_6)
; [eval] int()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> y_6@603@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> y_6@603@01) (as int<PyType>  PyType)))
; [eval] int___le__(int___unbox__(_checkDefined(y_6, 3563385)), 5)
; [eval] int___unbox__(_checkDefined(y_6, 3563385))
; [eval] _checkDefined(y_6, 3563385)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_6@603@01 3563385))
(pop) ; 13
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit y_6@603@01 3563385))
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_6@603@01 3563385)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_6@603@01 3563385)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit y_6@603@01 3563385)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385))))
(push) ; 13
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)) 5))
(pop) ; 13
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)) 5))
(push) ; 13
(assert (not (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)) 5)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)) 5))
; [eval] self_30.A_x == null || issubtype(typeof(self_30.A_x), ObjectLock())
; [eval] self_30.A_x == null
(push) ; 13
; [then-branch: 626 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@601@01))))))) == Null | live]
; [else-branch: 626 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@601@01))))))) != Null | live]
(push) ; 14
; [then-branch: 626 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@601@01))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))
  $Ref.null))
(pop) ; 14
(push) ; 14
; [else-branch: 626 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@601@01))))))) != Null]
; [eval] issubtype(typeof(self_30.A_x), ObjectLock())
; [eval] typeof(self_30.A_x)
; [eval] ObjectLock()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(y_6, 3563385)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(y_6, 3563385))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(y_6, 3563385)), 5)
; [eval] int___unbox__(_checkDefined(y_6, 3563385))
; [eval] _checkDefined(y_6, 3563385)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)) 5))
(pop) ; 13
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)) 5))
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)) 5))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)) 5)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 627 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@603@01, 3563385)), 5) | live]
; [else-branch: 627 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@603@01, 3563385)), 5)) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 627 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@603@01, 3563385)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_6, 3563385))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_6, 3563385)))
; [eval] int___unbox__(_checkDefined(y_6, 3563385))
; [eval] _checkDefined(y_6, 3563385)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 15
; Joined path conditions
(push) ; 15
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385))))
(pop) ; 15
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385))))
(pop) ; 14
(push) ; 14
; [else-branch: 627 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@603@01, 3563385)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)) 5)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)) 5)))
(push) ; 13
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)))
    0))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)))
    0)))
; [then-branch: 628 | False | dead]
; [else-branch: 628 | True | live]
(push) ; 13
; [else-branch: 628 | True]
; [eval] perm(self_30.A_x.MustReleaseBounded) > none && Measure$check(_loop_measures_18, self_30.A_x, int___sub__(10, int___unbox__(_checkDefined(y_6, 3563385))))
; [eval] perm(self_30.A_x.MustReleaseBounded) > none
; [eval] perm(self_30.A_x.MustReleaseBounded)
(push) ; 14
; [then-branch: 629 | False | live]
; [else-branch: 629 | True | live]
(push) ; 15
; [then-branch: 629 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 629 | True]
; [eval] Measure$check(_loop_measures_18, self_30.A_x, int___sub__(10, int___unbox__(_checkDefined(y_6, 3563385))))
; [eval] int___sub__(10, int___unbox__(_checkDefined(y_6, 3563385)))
; [eval] int___unbox__(_checkDefined(y_6, 3563385))
; [eval] _checkDefined(y_6, 3563385)
(push) ; 16
; [eval] _isDefined(id)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
; Joined path conditions
(push) ; 16
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385))))
(pop) ; 16
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385))))
(push) ; 16
(assert (Measure$check%precondition $Snap.unit _loop_measures_18@602@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)))))
(pop) ; 16
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_18@602@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (and
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)))
  (Measure$check%precondition $Snap.unit _loop_measures_18@602@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385))))))
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (Measure$check $Snap.unit _loop_measures_18@602@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (Measure$check $Snap.unit _loop_measures_18@602@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 630 | Measure$check(_, _loop_measures_18@602@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@601@01))))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, y_6@603@01, 3563385)))) | live]
; [else-branch: 630 | !(Measure$check(_, _loop_measures_18@602@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@601@01))))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, y_6@603@01, 3563385))))) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 630 | Measure$check(_, _loop_measures_18@602@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@601@01))))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, y_6@603@01, 3563385))))]
(assert (Measure$check $Snap.unit _loop_measures_18@602@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@603@01 3563385)))))
; [eval] _loop_check_before_18 ==> _loop_termination_flag_18 || (!int___lt__(int___unbox__(_checkDefined(y_6, 3563385)), 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_76: Ref [MustInvokeBounded(_r_76)] :: false) && ((forperm _r_76: Ref [MustInvokeUnbounded(_r_76)] :: false) && ((forperm _r_76: Ref [_r_76.MustReleaseBounded] :: false) && (forperm _r_76: Ref [_r_76.MustReleaseUnbounded] :: false)))))
(push) ; 15
; [then-branch: 631 | False | dead]
; [else-branch: 631 | True | live]
(push) ; 16
; [else-branch: 631 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
; [eval] !_loop_check_before_18 ==> (forperm _r_76: Ref [MustInvokeBounded(_r_76)] :: false) && ((forperm _r_76: Ref [MustInvokeUnbounded(_r_76)] :: false) && ((forperm _r_76: Ref [_r_76.MustReleaseBounded] :: false) && (forperm _r_76: Ref [_r_76.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_18
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 632 | True | live]
; [else-branch: 632 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 632 | True]
; [eval] (forperm _r_76: Ref [MustInvokeBounded(_r_76)] :: false) && ((forperm _r_76: Ref [MustInvokeUnbounded(_r_76)] :: false) && ((forperm _r_76: Ref [_r_76.MustReleaseBounded] :: false) && (forperm _r_76: Ref [_r_76.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_76: Ref [MustInvokeBounded(_r_76)] :: false)
(push) ; 17
; [then-branch: 633 | False | live]
; [else-branch: 633 | True | live]
(push) ; 18
; [then-branch: 633 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 633 | True]
; [eval] (forperm _r_76: Ref [MustInvokeUnbounded(_r_76)] :: false)
(push) ; 19
; [then-branch: 634 | False | live]
; [else-branch: 634 | True | live]
(push) ; 20
; [then-branch: 634 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 634 | True]
; [eval] (forperm _r_76: Ref [_r_76.MustReleaseBounded] :: false)
(push) ; 21
; [then-branch: 635 | False | live]
; [else-branch: 635 | True | live]
(push) ; 22
; [then-branch: 635 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 635 | True]
; [eval] (forperm _r_76: Ref [_r_76.MustReleaseUnbounded] :: false)
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 624 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@599@01, 3563385)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5)))
(pop) ; 12
; [eval] !int___lt__(int___unbox__(_checkDefined(y_6, 3563385)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(y_6, 3563385)), 5)
; [eval] int___unbox__(_checkDefined(y_6, 3563385))
; [eval] _checkDefined(y_6, 3563385)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 12
; Joined path conditions
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 636 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@599@01, 3563385)), 5)) | live]
; [else-branch: 636 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@599@01, 3563385)), 5) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 636 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@599@01, 3563385)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5)))
; [exec]
; exhale perm(MustTerminate(_cthread_169)) > none ==>
;   acc(MustTerminate(_cthread_169), perm(MustTerminate(_cthread_169)) -
;   _loop_original_must_terminate_18)
; [eval] perm(MustTerminate(_cthread_169)) > none
; [eval] perm(MustTerminate(_cthread_169))
; [then-branch: 637 | False | dead]
; [else-branch: 637 | True | live]
(push) ; 13
; [else-branch: 637 | True]
; [exec]
; label post_loop_18
; [exec]
; label loop_end_17
; [exec]
; _loop_check_before_17 := false
; [exec]
; assert _loop_termination_flag_17 ==>
;   !int___lt__(int___unbox__(_checkDefined(x_11, 825319288)), 5)
; [eval] _loop_termination_flag_17 ==> !int___lt__(int___unbox__(_checkDefined(x_11, 825319288)), 5)
(push) ; 14
; [then-branch: 638 | False | dead]
; [else-branch: 638 | True | live]
(push) ; 15
; [else-branch: 638 | True]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(x_11), int())
; [eval] typeof(x_11)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> x_11@595@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> x_11@595@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(y_6), int())
; [eval] typeof(y_6)
; [eval] int()
; [eval] int___le__(int___unbox__(_checkDefined(y_6, 3563385)), 5)
; [eval] int___unbox__(_checkDefined(y_6, 3563385))
; [eval] _checkDefined(y_6, 3563385)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(pop) ; 14
; Joined path conditions
; [eval] self_30.A_x == null || issubtype(typeof(self_30.A_x), ObjectLock())
; [eval] self_30.A_x == null
(push) ; 14
; [then-branch: 639 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@601@01))))))) == Null | live]
; [else-branch: 639 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@601@01))))))) != Null | live]
(push) ; 15
; [then-branch: 639 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@601@01))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01))))))))
  $Ref.null))
(pop) ; 15
(push) ; 15
; [else-branch: 639 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@601@01))))))) != Null]
; [eval] issubtype(typeof(self_30.A_x), ObjectLock())
; [eval] typeof(self_30.A_x)
; [eval] ObjectLock()
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [eval] int___lt__(int___unbox__(_checkDefined(x_11, 825319288)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_11, 825319288))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(x_11, 825319288)), 5)
; [eval] int___unbox__(_checkDefined(x_11, 825319288))
; [eval] _checkDefined(x_11, 825319288)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_11@595@01 825319288))
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit x_11@595@01 825319288))
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_11@595@01 825319288)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_11@595@01 825319288)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288)))
(pop) ; 14
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit x_11@595@01 825319288)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288))))
(push) ; 14
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288)) 5))
(pop) ; 14
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288)) 5))
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288)) 5))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288)) 5)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 640 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@595@01, 825319288)), 5) | live]
; [else-branch: 640 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@595@01, 825319288)), 5)) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 640 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@595@01, 825319288)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288)) 5))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_11, 825319288))) > 0
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_11, 825319288)))
; [eval] int___unbox__(_checkDefined(x_11, 825319288))
; [eval] _checkDefined(x_11, 825319288)
(push) ; 16
; [eval] _isDefined(id)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
; Joined path conditions
(push) ; 16
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288))))
(pop) ; 16
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288))))
(pop) ; 15
(push) ; 15
; [else-branch: 640 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@595@01, 825319288)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288)) 5)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288)) 5)
    (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288)) 5)))
(push) ; 14
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288)))
    0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288)) 5)
  (>
    (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288)))
    0)))
; [then-branch: 641 | False | dead]
; [else-branch: 641 | True | live]
(push) ; 14
; [else-branch: 641 | True]
; [eval] perm(self_30.A_x.MustReleaseBounded) > none && Measure$check(_loop_measures_17, self_30.A_x, int___sub__(10, int___unbox__(_checkDefined(x_11, 825319288))))
; [eval] perm(self_30.A_x.MustReleaseBounded) > none
; [eval] perm(self_30.A_x.MustReleaseBounded)
(push) ; 15
; [then-branch: 642 | False | live]
; [else-branch: 642 | True | live]
(push) ; 16
; [then-branch: 642 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 642 | True]
; [eval] Measure$check(_loop_measures_17, self_30.A_x, int___sub__(10, int___unbox__(_checkDefined(x_11, 825319288))))
; [eval] int___sub__(10, int___unbox__(_checkDefined(x_11, 825319288)))
; [eval] int___unbox__(_checkDefined(x_11, 825319288))
; [eval] _checkDefined(x_11, 825319288)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288))))
(pop) ; 17
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288))))
(push) ; 17
(assert (Measure$check%precondition $Snap.unit _loop_measures_17@594@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288)))))
(pop) ; 17
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_17@594@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288)))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (and
  (int___sub__%precondition $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288)))
  (Measure$check%precondition $Snap.unit _loop_measures_17@594@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288))))))
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (Measure$check $Snap.unit _loop_measures_17@594@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (Measure$check $Snap.unit _loop_measures_17@594@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 643 | Measure$check(_, _loop_measures_17@594@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@601@01))))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, x_11@595@01, 825319288)))) | live]
; [else-branch: 643 | !(Measure$check(_, _loop_measures_17@594@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@601@01))))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, x_11@595@01, 825319288))))) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 643 | Measure$check(_, _loop_measures_17@594@01, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@601@01))))))), int___sub__(_, 10, int___unbox__(_, _checkDefined(_, x_11@595@01, 825319288))))]
(assert (Measure$check $Snap.unit _loop_measures_17@594@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@601@01)))))))) (int___sub__ $Snap.unit 10 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@595@01 825319288)))))
; [eval] _loop_check_before_17 ==> _loop_termination_flag_17 || (!int___lt__(int___unbox__(_checkDefined(x_11, 825319288)), 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_78: Ref [MustInvokeBounded(_r_78)] :: false) && ((forperm _r_78: Ref [MustInvokeUnbounded(_r_78)] :: false) && ((forperm _r_78: Ref [_r_78.MustReleaseBounded] :: false) && (forperm _r_78: Ref [_r_78.MustReleaseUnbounded] :: false)))))
(push) ; 16
; [then-branch: 644 | False | dead]
; [else-branch: 644 | True | live]
(push) ; 17
; [else-branch: 644 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] !_loop_check_before_17 ==> (forperm _r_78: Ref [MustInvokeBounded(_r_78)] :: false) && ((forperm _r_78: Ref [MustInvokeUnbounded(_r_78)] :: false) && ((forperm _r_78: Ref [_r_78.MustReleaseBounded] :: false) && (forperm _r_78: Ref [_r_78.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_17
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 645 | True | live]
; [else-branch: 645 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 645 | True]
; [eval] (forperm _r_78: Ref [MustInvokeBounded(_r_78)] :: false) && ((forperm _r_78: Ref [MustInvokeUnbounded(_r_78)] :: false) && ((forperm _r_78: Ref [_r_78.MustReleaseBounded] :: false) && (forperm _r_78: Ref [_r_78.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_78: Ref [MustInvokeBounded(_r_78)] :: false)
(push) ; 18
; [then-branch: 646 | False | live]
; [else-branch: 646 | True | live]
(push) ; 19
; [then-branch: 646 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 646 | True]
; [eval] (forperm _r_78: Ref [MustInvokeUnbounded(_r_78)] :: false)
(push) ; 20
; [then-branch: 647 | False | live]
; [else-branch: 647 | True | live]
(push) ; 21
; [then-branch: 647 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 647 | True]
; [eval] (forperm _r_78: Ref [_r_78.MustReleaseBounded] :: false)
(push) ; 22
; [then-branch: 648 | False | live]
; [else-branch: 648 | True | live]
(push) ; 23
; [then-branch: 648 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 648 | True]
; [eval] (forperm _r_78: Ref [_r_78.MustReleaseUnbounded] :: false)
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 636 | int___lt__(_, int___unbox__(_, _checkDefined(_, y_6@599@01, 3563385)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit y_6@599@01 3563385)) 5))
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 609 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@586@01, 825319288)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5)))
(pop) ; 7
; [eval] !int___lt__(int___unbox__(_checkDefined(x_11, 825319288)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(x_11, 825319288)), 5)
; [eval] int___unbox__(_checkDefined(x_11, 825319288))
; [eval] _checkDefined(x_11, 825319288)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 649 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@586@01, 825319288)), 5)) | live]
; [else-branch: 649 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@586@01, 825319288)), 5) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 649 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@586@01, 825319288)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5)))
; [exec]
; exhale perm(MustTerminate(_cthread_169)) > none ==>
;   acc(MustTerminate(_cthread_169), perm(MustTerminate(_cthread_169)) -
;   _loop_original_must_terminate_17)
; [eval] perm(MustTerminate(_cthread_169)) > none
; [eval] perm(MustTerminate(_cthread_169))
; [then-branch: 650 | False | dead]
; [else-branch: 650 | True | live]
(push) ; 8
; [else-branch: 650 | True]
; [exec]
; label post_loop_17
; [exec]
; label __end
; [eval] self_12.A_x == null || issubtype(typeof(self_12.A_x), ObjectLock())
; [eval] self_12.A_x == null
(push) ; 9
; [then-branch: 651 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@593@01)))))))) == Null | live]
; [else-branch: 651 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@593@01)))))))) != Null | live]
(push) ; 10
; [then-branch: 651 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@593@01)))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@593@01)))))))))
  $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 651 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@593@01)))))))) != Null]
; [eval] issubtype(typeof(self_12.A_x), ObjectLock())
; [eval] typeof(self_12.A_x)
; [eval] ObjectLock()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] perm(self_12.A_x.MustReleaseBounded) > none
; [eval] perm(self_12.A_x.MustReleaseBounded)
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 652 | True | live]
; [else-branch: 652 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 652 | True]
; [eval] (forperm _r_80: Ref [MustInvokeBounded(_r_80)] :: false)
; [eval] (forperm _r_80: Ref [MustInvokeUnbounded(_r_80)] :: false)
; [eval] (forperm _r_80: Ref [_r_80.MustReleaseBounded] :: false)
; [eval] (forperm _r_80: Ref [_r_80.MustReleaseUnbounded] :: false)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 649 | int___lt__(_, int___unbox__(_, _checkDefined(_, x_11@586@01, 825319288)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit x_11@586@01 825319288)) 5))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- Lock___init__ ----------
(declare-const _cthread_171@605@01 $Ref)
(declare-const _caller_measures_171@606@01 Seq<Measure$>)
(declare-const _residue_171@607@01 $Perm)
(declare-const self_14@608@01 $Ref)
(declare-const locked_object@609@01 $Ref)
(declare-const above@610@01 $Ref)
(declare-const below@611@01 $Ref)
(declare-const _current_wait_level_171@612@01 $Perm)
(declare-const _cthread_171@613@01 $Ref)
(declare-const _caller_measures_171@614@01 Seq<Measure$>)
(declare-const _residue_171@615@01 $Perm)
(declare-const self_14@616@01 $Ref)
(declare-const locked_object@617@01 $Ref)
(declare-const above@618@01 $Ref)
(declare-const below@619@01 $Ref)
(declare-const _current_wait_level_171@620@01 $Perm)
(push) ; 1
(declare-const $t@621@01 $Snap)
(assert (= $t@621@01 ($Snap.combine ($Snap.first $t@621@01) ($Snap.second $t@621@01))))
(assert (= ($Snap.first $t@621@01) $Snap.unit))
; [eval] _cthread_171 != null
(assert (not (= _cthread_171@613@01 $Ref.null)))
(assert (=
  ($Snap.second $t@621@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@621@01))
    ($Snap.second ($Snap.second $t@621@01)))))
(assert (= ($Snap.first ($Snap.second $t@621@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_171), Thread_0())
; [eval] typeof(_cthread_171)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_171@613@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@621@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@621@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@621@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@621@01))) $Snap.unit))
; [eval] self_14 != null
(assert (not (= self_14@616@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@621@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@621@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@621@01))))
  $Snap.unit))
; [eval] issubtype(typeof(self_14), Lock(Lock_arg(typeof(self_14), 0)))
; [eval] typeof(self_14)
; [eval] Lock(Lock_arg(typeof(self_14), 0))
; [eval] Lock_arg(typeof(self_14), 0)
; [eval] typeof(self_14)
(assert (issubtype<Bool> (typeof<PyType> self_14@616@01) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> self_14@616@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(locked_object), Lock_arg(typeof(self_14), 0))
; [eval] typeof(locked_object)
; [eval] Lock_arg(typeof(self_14), 0)
; [eval] typeof(self_14)
(assert (issubtype<Bool> (typeof<PyType> locked_object@617@01) (Lock_arg<PyType> (typeof<PyType> self_14@616@01) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01))))))
  $Snap.unit))
; [eval] above == null || issubtype(typeof(above), BaseLock())
; [eval] above == null
(push) ; 2
; [then-branch: 653 | above@618@01 == Null | live]
; [else-branch: 653 | above@618@01 != Null | live]
(push) ; 3
; [then-branch: 653 | above@618@01 == Null]
(assert (= above@618@01 $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 653 | above@618@01 != Null]
(assert (not (= above@618@01 $Ref.null)))
; [eval] issubtype(typeof(above), BaseLock())
; [eval] typeof(above)
; [eval] BaseLock()
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (= above@618@01 $Ref.null)) (= above@618@01 $Ref.null)))
(assert (or
  (= above@618@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> above@618@01) (as BaseLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01)))))))
  $Snap.unit))
; [eval] below == null || issubtype(typeof(below), BaseLock())
; [eval] below == null
(push) ; 2
; [then-branch: 654 | below@619@01 == Null | live]
; [else-branch: 654 | below@619@01 != Null | live]
(push) ; 3
; [then-branch: 654 | below@619@01 == Null]
(assert (= below@619@01 $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 654 | below@619@01 != Null]
(assert (not (= below@619@01 $Ref.null)))
; [eval] issubtype(typeof(below), BaseLock())
; [eval] typeof(below)
; [eval] BaseLock()
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (= below@619@01 $Ref.null)) (= below@619@01 $Ref.null)))
(assert (or
  (= below@619@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> below@619@01) (as BaseLock<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01))))))))
  $Snap.unit))
; [eval] issubtype(Lock_arg(typeof(self_14), 0), object())
; [eval] Lock_arg(typeof(self_14), 0)
; [eval] typeof(self_14)
; [eval] object()
(assert (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> self_14@616@01) 0) (as object<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01)))))))))
  $Snap.unit))
; [eval] self_14 != null
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01)))))))))))
  $Snap.unit))
; [eval] above == null && below != null ==> _residue_171 < Level(below)
; [eval] above == null && below != null
; [eval] above == null
(push) ; 2
; [then-branch: 655 | above@618@01 != Null | live]
; [else-branch: 655 | above@618@01 == Null | live]
(push) ; 3
; [then-branch: 655 | above@618@01 != Null]
(assert (not (= above@618@01 $Ref.null)))
(pop) ; 3
(push) ; 3
; [else-branch: 655 | above@618@01 == Null]
(assert (= above@618@01 $Ref.null))
; [eval] below != null
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (= above@618@01 $Ref.null) (not (= above@618@01 $Ref.null))))
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (and (= above@618@01 $Ref.null) (not (= below@619@01 $Ref.null))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and (= above@618@01 $Ref.null) (not (= below@619@01 $Ref.null)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 656 | above@618@01 == Null && below@619@01 != Null | live]
; [else-branch: 656 | !(above@618@01 == Null && below@619@01 != Null) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 656 | above@618@01 == Null && below@619@01 != Null]
(assert (and (= above@618@01 $Ref.null) (not (= below@619@01 $Ref.null))))
; [eval] _residue_171 < Level(below)
; [eval] Level(below)
(push) ; 4
(assert (Level%precondition $Snap.unit below@619@01))
(pop) ; 4
; Joined path conditions
(assert (Level%precondition $Snap.unit below@619@01))
(pop) ; 3
(push) ; 3
; [else-branch: 656 | !(above@618@01 == Null && below@619@01 != Null)]
(assert (not (and (= above@618@01 $Ref.null) (not (= below@619@01 $Ref.null)))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert (=>
  (and (= above@618@01 $Ref.null) (not (= below@619@01 $Ref.null)))
  (and
    (= above@618@01 $Ref.null)
    (not (= below@619@01 $Ref.null))
    (Level%precondition $Snap.unit below@619@01))))
; Joined path conditions
(assert (or
  (not (and (= above@618@01 $Ref.null) (not (= below@619@01 $Ref.null))))
  (and (= above@618@01 $Ref.null) (not (= below@619@01 $Ref.null)))))
(assert (=>
  (and (= above@618@01 $Ref.null) (not (= below@619@01 $Ref.null)))
  (< _residue_171@615@01 (Level $Snap.unit below@619@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01))))))))))))
  $Snap.unit))
; [eval] above != null && below != null ==> Level(above) < Level(below)
; [eval] above != null && below != null
; [eval] above != null
(push) ; 2
; [then-branch: 657 | above@618@01 == Null | live]
; [else-branch: 657 | above@618@01 != Null | live]
(push) ; 3
; [then-branch: 657 | above@618@01 == Null]
(assert (= above@618@01 $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 657 | above@618@01 != Null]
(assert (not (= above@618@01 $Ref.null)))
; [eval] below != null
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (and (not (= above@618@01 $Ref.null)) (not (= below@619@01 $Ref.null))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and (not (= above@618@01 $Ref.null)) (not (= below@619@01 $Ref.null)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 658 | above@618@01 != Null && below@619@01 != Null | live]
; [else-branch: 658 | !(above@618@01 != Null && below@619@01 != Null) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 658 | above@618@01 != Null && below@619@01 != Null]
(assert (and (not (= above@618@01 $Ref.null)) (not (= below@619@01 $Ref.null))))
; [eval] Level(above) < Level(below)
; [eval] Level(above)
(push) ; 4
(assert (Level%precondition $Snap.unit above@618@01))
(pop) ; 4
; Joined path conditions
(assert (Level%precondition $Snap.unit above@618@01))
; [eval] Level(below)
(push) ; 4
(assert (Level%precondition $Snap.unit below@619@01))
(pop) ; 4
; Joined path conditions
(assert (Level%precondition $Snap.unit below@619@01))
(pop) ; 3
(push) ; 3
; [else-branch: 658 | !(above@618@01 != Null && below@619@01 != Null)]
(assert (not (and (not (= above@618@01 $Ref.null)) (not (= below@619@01 $Ref.null)))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert (=>
  (and (not (= above@618@01 $Ref.null)) (not (= below@619@01 $Ref.null)))
  (and
    (not (= above@618@01 $Ref.null))
    (not (= below@619@01 $Ref.null))
    (Level%precondition $Snap.unit above@618@01)
    (Level%precondition $Snap.unit below@619@01))))
; Joined path conditions
(assert (or
  (not (and (not (= above@618@01 $Ref.null)) (not (= below@619@01 $Ref.null))))
  (and (not (= above@618@01 $Ref.null)) (not (= below@619@01 $Ref.null)))))
(assert (=>
  (and (not (= above@618@01 $Ref.null)) (not (= below@619@01 $Ref.null)))
  (< (Level $Snap.unit above@618@01) (Level $Snap.unit below@619@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@621@01))))))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@622@01 $Snap)
(assert (= $t@622@01 ($Snap.combine ($Snap.first $t@622@01) ($Snap.second $t@622@01))))
(assert (= ($Snap.first $t@622@01) $Snap.unit))
; [eval] (forperm _r_84: Ref [_r_84.MustReleaseBounded] :: Level(_r_84) <= _current_wait_level_171)
(assert (=
  ($Snap.second $t@622@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@622@01))
    ($Snap.second ($Snap.second $t@622@01)))))
(assert (= ($Snap.first ($Snap.second $t@622@01)) $Snap.unit))
; [eval] (forperm _r_84: Ref [_r_84.MustReleaseUnbounded] :: Level(_r_84) <= _current_wait_level_171)
(assert (=
  ($Snap.second ($Snap.second $t@622@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@622@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@622@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@622@01))) $Snap.unit))
; [eval] _residue_171 <= _current_wait_level_171
(assert (<= _residue_171@615@01 _current_wait_level_171@620@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@622@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@622@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@622@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@622@01))))
  $Snap.unit))
; [eval] above == null ==> _current_wait_level_171 < Level(self_14)
; [eval] above == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= above@618@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= above@618@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 659 | above@618@01 == Null | live]
; [else-branch: 659 | above@618@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 659 | above@618@01 == Null]
(assert (= above@618@01 $Ref.null))
; [eval] _current_wait_level_171 < Level(self_14)
; [eval] Level(self_14)
(push) ; 5
(assert (Level%precondition $Snap.unit self_14@616@01))
(pop) ; 5
; Joined path conditions
(assert (Level%precondition $Snap.unit self_14@616@01))
(pop) ; 4
(push) ; 4
; [else-branch: 659 | above@618@01 != Null]
(assert (not (= above@618@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (= above@618@01 $Ref.null)
  (and (= above@618@01 $Ref.null) (Level%precondition $Snap.unit self_14@616@01))))
; Joined path conditions
(assert (=>
  (= above@618@01 $Ref.null)
  (< _current_wait_level_171@620@01 (Level $Snap.unit self_14@616@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@622@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@622@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@622@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@622@01)))))
  $Snap.unit))
; [eval] above != null ==> Level(above) < Level(self_14)
; [eval] above != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= above@618@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= above@618@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 660 | above@618@01 != Null | live]
; [else-branch: 660 | above@618@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 660 | above@618@01 != Null]
(assert (not (= above@618@01 $Ref.null)))
; [eval] Level(above) < Level(self_14)
; [eval] Level(above)
(push) ; 5
(assert (Level%precondition $Snap.unit above@618@01))
(pop) ; 5
; Joined path conditions
(assert (Level%precondition $Snap.unit above@618@01))
; [eval] Level(self_14)
(push) ; 5
(assert (Level%precondition $Snap.unit self_14@616@01))
(pop) ; 5
; Joined path conditions
(assert (Level%precondition $Snap.unit self_14@616@01))
(pop) ; 4
(push) ; 4
; [else-branch: 660 | above@618@01 == Null]
(assert (= above@618@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (not (= above@618@01 $Ref.null))
  (and
    (not (= above@618@01 $Ref.null))
    (Level%precondition $Snap.unit above@618@01)
    (Level%precondition $Snap.unit self_14@616@01))))
; Joined path conditions
(assert (=>
  (not (= above@618@01 $Ref.null))
  (< (Level $Snap.unit above@618@01) (Level $Snap.unit self_14@616@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@622@01)))))
  $Snap.unit))
; [eval] below != null ==> Level(self_14) < Level(below)
; [eval] below != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= below@619@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= below@619@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 661 | below@619@01 != Null | live]
; [else-branch: 661 | below@619@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 661 | below@619@01 != Null]
(assert (not (= below@619@01 $Ref.null)))
; [eval] Level(self_14) < Level(below)
; [eval] Level(self_14)
(push) ; 5
(assert (Level%precondition $Snap.unit self_14@616@01))
(pop) ; 5
; Joined path conditions
(assert (Level%precondition $Snap.unit self_14@616@01))
; [eval] Level(below)
(push) ; 5
(assert (Level%precondition $Snap.unit below@619@01))
(pop) ; 5
; Joined path conditions
(assert (Level%precondition $Snap.unit below@619@01))
(pop) ; 4
(push) ; 4
; [else-branch: 661 | below@619@01 == Null]
(assert (= below@619@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (not (= below@619@01 $Ref.null))
  (and
    (not (= below@619@01 $Ref.null))
    (Level%precondition $Snap.unit self_14@616@01)
    (Level%precondition $Snap.unit below@619@01))))
; Joined path conditions
(assert (or (= below@619@01 $Ref.null) (not (= below@619@01 $Ref.null))))
(assert (=>
  (not (= below@619@01 $Ref.null))
  (< (Level $Snap.unit self_14@616@01) (Level $Snap.unit below@619@01))))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_171: Perm
(declare-const _cwl_171@623@01 $Perm)
; [exec]
; inhale typeof(self_14) == Lock(Lock_arg(typeof(self_14), 0))
(declare-const $t@624@01 $Snap)
(assert (= $t@624@01 $Snap.unit))
; [eval] typeof(self_14) == Lock(Lock_arg(typeof(self_14), 0))
; [eval] typeof(self_14)
; [eval] Lock(Lock_arg(typeof(self_14), 0))
; [eval] Lock_arg(typeof(self_14), 0)
; [eval] typeof(self_14)
(assert (=
  (typeof<PyType> self_14@616@01)
  (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> self_14@616@01) 0))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Lock_acquire ----------
(declare-const _cthread_172@625@01 $Ref)
(declare-const _caller_measures_172@626@01 Seq<Measure$>)
(declare-const _residue_172@627@01 $Perm)
(declare-const self_15@628@01 $Ref)
(declare-const _current_wait_level_172@629@01 $Perm)
(declare-const _cthread_172@630@01 $Ref)
(declare-const _caller_measures_172@631@01 Seq<Measure$>)
(declare-const _residue_172@632@01 $Perm)
(declare-const self_15@633@01 $Ref)
(declare-const _current_wait_level_172@634@01 $Perm)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@635@01 $Snap)
(assert (= $t@635@01 ($Snap.combine ($Snap.first $t@635@01) ($Snap.second $t@635@01))))
(assert (= ($Snap.first $t@635@01) $Snap.unit))
; [eval] _cthread_172 != null
(assert (not (= _cthread_172@630@01 $Ref.null)))
(assert (=
  ($Snap.second $t@635@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@635@01))
    ($Snap.second ($Snap.second $t@635@01)))))
(assert (= ($Snap.first ($Snap.second $t@635@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_172), Thread_0())
; [eval] typeof(_cthread_172)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_172@630@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@635@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@635@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@635@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@635@01))) $Snap.unit))
; [eval] issubtype(typeof(self_15), Lock(Lock_arg(typeof(self_15), 0)))
; [eval] typeof(self_15)
; [eval] Lock(Lock_arg(typeof(self_15), 0))
; [eval] Lock_arg(typeof(self_15), 0)
; [eval] typeof(self_15)
(assert (issubtype<Bool> (typeof<PyType> self_15@633@01) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> self_15@633@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@635@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@635@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@635@01))))
  $Snap.unit))
; [eval] issubtype(Lock_arg(typeof(self_15), 0), object())
; [eval] Lock_arg(typeof(self_15), 0)
; [eval] typeof(self_15)
; [eval] object()
(assert (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> self_15@633@01) 0) (as object<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01)))))
  $Snap.unit))
; [eval] self_15 != null
(assert (not (= self_15@633@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01)))))))
  $Snap.unit))
; [eval] _residue_172 < Level(self_15)
; [eval] Level(self_15)
(push) ; 2
(assert (Level%precondition $Snap.unit self_15@633@01))
(pop) ; 2
; Joined path conditions
(assert (Level%precondition $Snap.unit self_15@633@01))
(assert (< _residue_172@632@01 (Level $Snap.unit self_15@633@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@636@01 $Snap)
(assert (= $t@636@01 ($Snap.combine ($Snap.first $t@636@01) ($Snap.second $t@636@01))))
(assert (= ($Snap.first $t@636@01) $Snap.unit))
; [eval] (forperm _r_87: Ref [_r_87.MustReleaseBounded] :: Level(_r_87) <= _current_wait_level_172)
(assert (=
  ($Snap.second $t@636@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@636@01))
    ($Snap.second ($Snap.second $t@636@01)))))
(assert (= ($Snap.first ($Snap.second $t@636@01)) $Snap.unit))
; [eval] (forperm _r_87: Ref [_r_87.MustReleaseUnbounded] :: Level(_r_87) <= _current_wait_level_172)
(assert (=
  ($Snap.second ($Snap.second $t@636@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@636@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@636@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@636@01))) $Snap.unit))
; [eval] _residue_172 <= _current_wait_level_172
(assert (<= _residue_172@632@01 _current_wait_level_172@634@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@636@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@636@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@636@01)))))))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_172: Perm
(declare-const _cwl_172@637@01 $Perm)
; [exec]
; inhale typeof(self_15) == Lock(Lock_arg(typeof(self_15), 0))
(declare-const $t@638@01 $Snap)
(assert (= $t@638@01 $Snap.unit))
; [eval] typeof(self_15) == Lock(Lock_arg(typeof(self_15), 0))
; [eval] typeof(self_15)
; [eval] Lock(Lock_arg(typeof(self_15), 0))
; [eval] Lock_arg(typeof(self_15), 0)
; [eval] typeof(self_15)
(assert (=
  (typeof<PyType> self_15@633@01)
  (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> self_15@633@01) 0))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Lock_release ----------
(declare-const _cthread_173@639@01 $Ref)
(declare-const _caller_measures_173@640@01 Seq<Measure$>)
(declare-const _residue_173@641@01 $Perm)
(declare-const self_16@642@01 $Ref)
(declare-const _current_wait_level_173@643@01 $Perm)
(declare-const _cthread_173@644@01 $Ref)
(declare-const _caller_measures_173@645@01 Seq<Measure$>)
(declare-const _residue_173@646@01 $Perm)
(declare-const self_16@647@01 $Ref)
(declare-const _current_wait_level_173@648@01 $Perm)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@649@01 $Snap)
(assert (= $t@649@01 ($Snap.combine ($Snap.first $t@649@01) ($Snap.second $t@649@01))))
(assert (= ($Snap.first $t@649@01) $Snap.unit))
; [eval] _cthread_173 != null
(assert (not (= _cthread_173@644@01 $Ref.null)))
(assert (=
  ($Snap.second $t@649@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@649@01))
    ($Snap.second ($Snap.second $t@649@01)))))
(assert (= ($Snap.first ($Snap.second $t@649@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_173), Thread_0())
; [eval] typeof(_cthread_173)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_173@644@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@649@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@649@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@649@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@649@01))) $Snap.unit))
; [eval] issubtype(typeof(self_16), Lock(Lock_arg(typeof(self_16), 0)))
; [eval] typeof(self_16)
; [eval] Lock(Lock_arg(typeof(self_16), 0))
; [eval] Lock_arg(typeof(self_16), 0)
; [eval] typeof(self_16)
(assert (issubtype<Bool> (typeof<PyType> self_16@647@01) (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> self_16@647@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@649@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@649@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@649@01))))
  $Snap.unit))
; [eval] issubtype(Lock_arg(typeof(self_16), 0), object())
; [eval] Lock_arg(typeof(self_16), 0)
; [eval] typeof(self_16)
; [eval] object()
(assert (issubtype<Bool> (Lock_arg<PyType> (typeof<PyType> self_16@647@01) 0) (as object<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01)))))
  $Snap.unit))
; [eval] self_16 != null
(assert (not (= self_16@647@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@649@01))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@650@01 $Snap)
(assert (= $t@650@01 ($Snap.combine ($Snap.first $t@650@01) ($Snap.second $t@650@01))))
(assert (= ($Snap.first $t@650@01) $Snap.unit))
; [eval] (forperm _r_89: Ref [_r_89.MustReleaseBounded] :: Level(_r_89) <= _current_wait_level_173)
(assert (=
  ($Snap.second $t@650@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@650@01))
    ($Snap.second ($Snap.second $t@650@01)))))
(assert (= ($Snap.first ($Snap.second $t@650@01)) $Snap.unit))
; [eval] (forperm _r_89: Ref [_r_89.MustReleaseUnbounded] :: Level(_r_89) <= _current_wait_level_173)
(assert (= ($Snap.second ($Snap.second $t@650@01)) $Snap.unit))
; [eval] _residue_173 <= _current_wait_level_173
(assert (<= _residue_173@646@01 _current_wait_level_173@648@01))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_173: Perm
(declare-const _cwl_173@651@01 $Perm)
; [exec]
; inhale typeof(self_16) == Lock(Lock_arg(typeof(self_16), 0))
(declare-const $t@652@01 $Snap)
(assert (= $t@652@01 $Snap.unit))
; [eval] typeof(self_16) == Lock(Lock_arg(typeof(self_16), 0))
; [eval] typeof(self_16)
; [eval] Lock(Lock_arg(typeof(self_16), 0))
; [eval] Lock_arg(typeof(self_16), 0)
; [eval] typeof(self_16)
(assert (=
  (typeof<PyType> self_16@647@01)
  (Lock<PyType> (Lock_arg<PyType> (typeof<PyType> self_16@647@01) 0))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- main ----------
(declare-const _cthread_175@653@01 $Ref)
(declare-const _caller_measures_175@654@01 Seq<Measure$>)
(declare-const _residue_195@655@01 $Perm)
(declare-const _current_wait_level_175@656@01 $Perm)
(declare-const _cthread_175@657@01 $Ref)
(declare-const _caller_measures_175@658@01 Seq<Measure$>)
(declare-const _residue_195@659@01 $Perm)
(declare-const _current_wait_level_175@660@01 $Perm)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@661@01 $Snap)
(assert (= $t@661@01 ($Snap.combine ($Snap.first $t@661@01) ($Snap.second $t@661@01))))
(assert (= ($Snap.first $t@661@01) $Snap.unit))
; [eval] _cthread_175 != null
(assert (not (= _cthread_175@657@01 $Ref.null)))
(assert (=
  ($Snap.second $t@661@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@661@01))
    ($Snap.second ($Snap.second $t@661@01)))))
(assert (= ($Snap.first ($Snap.second $t@661@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_175), Thread_0())
; [eval] typeof(_cthread_175)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_175@657@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@661@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@662@01 $Snap)
(assert (= $t@662@01 ($Snap.combine ($Snap.first $t@662@01) ($Snap.second $t@662@01))))
(assert (= ($Snap.first $t@662@01) $Snap.unit))
; [eval] (forperm _r_91: Ref [_r_91.MustReleaseBounded] :: Level(_r_91) <= _current_wait_level_175)
(assert (=
  ($Snap.second $t@662@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@662@01))
    ($Snap.second ($Snap.second $t@662@01)))))
(assert (= ($Snap.first ($Snap.second $t@662@01)) $Snap.unit))
; [eval] (forperm _r_91: Ref [_r_91.MustReleaseUnbounded] :: Level(_r_91) <= _current_wait_level_175)
(assert (=
  ($Snap.second ($Snap.second $t@662@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@662@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@662@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@662@01))) $Snap.unit))
; [eval] _residue_195 <= _current_wait_level_175
(assert (<= _residue_195@659@01 _current_wait_level_175@660@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@662@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var module_defined_0: Bool
(declare-const module_defined_0@663@01 Bool)
; [exec]
; var module_names_0: Set[_Name]
(declare-const module_names_0@664@01 Set<_Name>)
; [exec]
; var module_defined_1: Bool
(declare-const module_defined_1@665@01 Bool)
; [exec]
; var module_names_1: Set[_Name]
(declare-const module_names_1@666@01 Set<_Name>)
; [exec]
; var _cwl_175: Perm
(declare-const _cwl_175@667@01 $Perm)
; [exec]
; var _method_measures_175: Seq[Measure$]
(declare-const _method_measures_175@668@01 Seq<Measure$>)
; [exec]
; _method_measures_175 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; module_defined_0 := true
; [exec]
; module_names_0 := Set[_Name]()
; [eval] Set[_Name]()
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872323072689856351)))
; [eval] (module_names_0 union Set(_single(6872323072689856351)))
; [eval] Set(_single(6872323072689856351))
; [eval] _single(6872323072689856351)
(declare-const module_names_0@669@01 Set<_Name>)
(assert (=
  module_names_0@669@01
  (Set_union (as Set_empty  Set<_Name>) (Set_singleton (_single<_Name> 6872323072689856351)))))
; [exec]
; inhale acc(__file__()._val, 99 / 100) &&
;   (issubtype(typeof(__file__()._val), str()) &&
;   issubtype(typeof(__file__()._val), str()))
(declare-const $t@670@01 $Snap)
(assert (= $t@670@01 ($Snap.combine ($Snap.first $t@670@01) ($Snap.second $t@670@01))))
; [eval] __file__()
(push) ; 3
(assert (__file__%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (__file__%precondition $Snap.unit))
(assert (not (= (__file__ $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@670@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@670@01))
    ($Snap.second ($Snap.second $t@670@01)))))
(assert (= ($Snap.first ($Snap.second $t@670@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._val), str())
; [eval] typeof(__file__()._val)
; [eval] __file__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@670@01))) (as str<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@670@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._val), str())
; [eval] typeof(__file__()._val)
; [eval] __file__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872323076851130207)))
; [eval] (module_names_0 union Set(_single(6872323076851130207)))
; [eval] Set(_single(6872323076851130207))
; [eval] _single(6872323076851130207)
(declare-const module_names_0@671@01 Set<_Name>)
(assert (=
  module_names_0@671@01
  (Set_union module_names_0@669@01 (Set_singleton (_single<_Name> 6872323076851130207)))))
; [exec]
; inhale acc(__name__()._val, 99 / 100) &&
;   (issubtype(typeof(__name__()._val), str()) &&
;   (issubtype(typeof(__name__()._val), str()) &&
;   str___eq__(str___create__(8, 6872332955275845471), __name__()._val)))
(declare-const $t@672@01 $Snap)
(assert (= $t@672@01 ($Snap.combine ($Snap.first $t@672@01) ($Snap.second $t@672@01))))
; [eval] __name__()
(set-option :timeout 0)
(push) ; 3
(assert (__name__%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (__name__%precondition $Snap.unit))
(push) ; 3
(set-option :timeout 10)
(assert (not (= (__file__ $Snap.unit) (__name__ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= (__name__ $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@672@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@672@01))
    ($Snap.second ($Snap.second $t@672@01)))))
(assert (= ($Snap.first ($Snap.second $t@672@01)) $Snap.unit))
; [eval] issubtype(typeof(__name__()._val), str())
; [eval] typeof(__name__()._val)
; [eval] __name__()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@672@01))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@672@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@672@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@672@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@672@01))) $Snap.unit))
; [eval] issubtype(typeof(__name__()._val), str())
; [eval] typeof(__name__()._val)
; [eval] __name__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@672@01))) $Snap.unit))
; [eval] str___eq__(str___create__(8, 6872332955275845471), __name__()._val)
; [eval] str___create__(8, 6872332955275845471)
(push) ; 3
(assert (str___create__%precondition $Snap.unit 8 6872332955275845471))
(pop) ; 3
; Joined path conditions
(assert (str___create__%precondition $Snap.unit 8 6872332955275845471))
; [eval] __name__()
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@672@01))))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@672@01)))))
(assert (str___eq__ $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@672@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_defined_1 := false
; [exec]
; module_names_1 := Set[_Name]()
; [eval] Set[_Name]()
; [exec]
; module_names_1 := (module_names_1 union Set(_single(6872323072689856351)))
; [eval] (module_names_1 union Set(_single(6872323072689856351)))
; [eval] Set(_single(6872323072689856351))
; [eval] _single(6872323072689856351)
(declare-const module_names_1@673@01 Set<_Name>)
(assert (=
  module_names_1@673@01
  (Set_union (as Set_empty  Set<_Name>) (Set_singleton (_single<_Name> 6872323072689856351)))))
; [exec]
; inhale acc(__file___0()._val, 99 / 100) &&
;   (issubtype(typeof(__file___0()._val), str()) &&
;   issubtype(typeof(__file___0()._val), str()))
(declare-const $t@674@01 $Snap)
(assert (= $t@674@01 ($Snap.combine ($Snap.first $t@674@01) ($Snap.second $t@674@01))))
; [eval] __file___0()
(set-option :timeout 0)
(push) ; 3
(assert (__file___0%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (__file___0%precondition $Snap.unit))
(push) ; 3
(set-option :timeout 10)
(assert (not (= (__name__ $Snap.unit) (__file___0 $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (__file__ $Snap.unit) (__file___0 $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= (__file___0 $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@674@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@674@01))
    ($Snap.second ($Snap.second $t@674@01)))))
(assert (= ($Snap.first ($Snap.second $t@674@01)) $Snap.unit))
; [eval] issubtype(typeof(__file___0()._val), str())
; [eval] typeof(__file___0()._val)
; [eval] __file___0()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@674@01))) (as str<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@674@01)) $Snap.unit))
; [eval] issubtype(typeof(__file___0()._val), str())
; [eval] typeof(__file___0()._val)
; [eval] __file___0()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_1 := (module_names_1 union Set(_single(6872323076851130207)))
; [eval] (module_names_1 union Set(_single(6872323076851130207)))
; [eval] Set(_single(6872323076851130207))
; [eval] _single(6872323076851130207)
(declare-const module_names_1@675@01 Set<_Name>)
(assert (=
  module_names_1@675@01
  (Set_union module_names_1@673@01 (Set_singleton (_single<_Name> 6872323076851130207)))))
; [exec]
; inhale acc(__name___0()._val, 99 / 100) &&
;   (issubtype(typeof(__name___0()._val), str()) &&
;   (issubtype(typeof(__name___0()._val), str()) &&
;   !str___eq__(str___create__(8, 6872332955275845471), __name___0()._val)))
(declare-const $t@676@01 $Snap)
(assert (= $t@676@01 ($Snap.combine ($Snap.first $t@676@01) ($Snap.second $t@676@01))))
; [eval] __name___0()
(set-option :timeout 0)
(push) ; 3
(assert (__name___0%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (__name___0%precondition $Snap.unit))
(push) ; 3
(set-option :timeout 10)
(assert (not (= (__file___0 $Snap.unit) (__name___0 $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (__name__ $Snap.unit) (__name___0 $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (__file__ $Snap.unit) (__name___0 $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= (__name___0 $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@676@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@676@01))
    ($Snap.second ($Snap.second $t@676@01)))))
(assert (= ($Snap.first ($Snap.second $t@676@01)) $Snap.unit))
; [eval] issubtype(typeof(__name___0()._val), str())
; [eval] typeof(__name___0()._val)
; [eval] __name___0()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@676@01))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@676@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@676@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@676@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@676@01))) $Snap.unit))
; [eval] issubtype(typeof(__name___0()._val), str())
; [eval] typeof(__name___0()._val)
; [eval] __name___0()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@676@01))) $Snap.unit))
; [eval] !str___eq__(str___create__(8, 6872332955275845471), __name___0()._val)
; [eval] str___eq__(str___create__(8, 6872332955275845471), __name___0()._val)
; [eval] str___create__(8, 6872332955275845471)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __name___0()
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(assert (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@676@01))))
(pop) ; 3
; Joined path conditions
(assert (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@676@01))))
(assert (not
  (str___eq__ $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@676@01)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6513473)))
; [eval] (module_names_0 union Set(_single(6513473)))
; [eval] Set(_single(6513473))
; [eval] _single(6513473)
(declare-const module_names_0@677@01 Set<_Name>)
(assert (=
  module_names_0@677@01
  (Set_union module_names_0@671@01 (Set_singleton (_single<_Name> 6513473)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(128034677158721)))
; [eval] (module_names_0 union Set(_single(128034677158721)))
; [eval] Set(_single(128034677158721))
; [eval] _single(128034677158721)
(declare-const module_names_0@678@01 Set<_Name>)
(assert (=
  module_names_0@678@01
  (Set_union module_names_0@677@01 (Set_singleton (_single<_Name> 128034677158721)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(32481164592901701)))
; [eval] (module_names_0 union Set(_single(32481164592901701)))
; [eval] Set(_single(32481164592901701))
; [eval] _single(32481164592901701)
(declare-const module_names_0@679@01 Set<_Name>)
(assert (=
  module_names_0@679@01
  (Set_union module_names_0@678@01 (Set_singleton (_single<_Name> 32481164592901701)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(32481125787004233)))
; [eval] (module_names_0 union Set(_single(32481125787004233)))
; [eval] Set(_single(32481125787004233))
; [eval] _single(32481125787004233)
(declare-const module_names_0@680@01 Set<_Name>)
(assert (=
  module_names_0@680@01
  (Set_union module_names_0@679@01 (Set_singleton (_single<_Name> 32481125787004233)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(2147776066907203333705)))
; [eval] (module_names_0 union Set(_single(2147776066907203333705)))
; [eval] Set(_single(2147776066907203333705))
; [eval] _single(2147776066907203333705)
(declare-const module_names_0@681@01 Set<_Name>)
(assert (=
  module_names_0@681@01
  (Set_union module_names_0@680@01 (Set_singleton (_single<_Name> 2147776066907203333705)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(1871507244730112373328)))
; [eval] (module_names_0 union Set(_single(1871507244730112373328)))
; [eval] Set(_single(1871507244730112373328))
; [eval] _single(1871507244730112373328)
(declare-const module_names_0@682@01 Set<_Name>)
(assert (=
  module_names_0@682@01
  (Set_union module_names_0@681@01 (Set_singleton (_single<_Name> 1871507244730112373328)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(8315178084276987218)))
; [eval] (module_names_0 union Set(_single(8315178084276987218)))
; [eval] Set(_single(8315178084276987218))
; [eval] _single(8315178084276987218)
(declare-const module_names_0@683@01 Set<_Name>)
(assert (=
  module_names_0@683@01
  (Set_union module_names_0@682@01 (Set_singleton (_single<_Name> 8315178084276987218)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(7738150958662902082)))
; [eval] (module_names_0 union Set(_single(7738150958662902082)))
; [eval] Set(_single(7738150958662902082))
; [eval] _single(7738150958662902082)
(declare-const module_names_0@684@01 Set<_Name>)
(assert (=
  module_names_0@684@01
  (Set_union module_names_0@683@01 (Set_singleton (_single<_Name> 7738150958662902082)))))
; [eval] !module_defined_1
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 662 | True | live]
; [else-branch: 662 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 662 | True]
; [exec]
; module_defined_1 := true
; [exec]
; module_names_1 := (module_names_1 union Set(_single(27981962743276871)))
; [eval] (module_names_1 union Set(_single(27981962743276871)))
; [eval] Set(_single(27981962743276871))
; [eval] _single(27981962743276871)
(declare-const module_names_1@685@01 Set<_Name>)
(assert (=
  module_names_1@685@01
  (Set_union module_names_1@675@01 (Set_singleton (_single<_Name> 27981962743276871)))))
; [exec]
; module_names_1 := (module_names_1 union Set(_single(7809644653626814543)))
; [eval] (module_names_1 union Set(_single(7809644653626814543)))
; [eval] Set(_single(7809644653626814543))
; [eval] _single(7809644653626814543)
(declare-const module_names_1@686@01 Set<_Name>)
(assert (=
  module_names_1@686@01
  (Set_union module_names_1@685@01 (Set_singleton (_single<_Name> 7809644653626814543)))))
; [exec]
; module_names_1 := (module_names_1 union Set(_single(32195171041966420)))
; [eval] (module_names_1 union Set(_single(32195171041966420)))
; [eval] Set(_single(32195171041966420))
; [eval] _single(32195171041966420)
(declare-const module_names_1@687@01 Set<_Name>)
(assert (=
  module_names_1@687@01
  (Set_union module_names_1@686@01 (Set_singleton (_single<_Name> 32195171041966420)))))
; [exec]
; module_names_1 := (module_names_1 union
;   Set(_single(37578771102893684825896415043)))
; [eval] (module_names_1 union Set(_single(37578771102893684825896415043)))
; [eval] Set(_single(37578771102893684825896415043))
; [eval] _single(37578771102893684825896415043)
(declare-const module_names_1@688@01 Set<_Name>)
(assert (=
  module_names_1@688@01
  (Set_union module_names_1@687@01 (Set_singleton (_single<_Name> 37578771102893684825896415043)))))
; [exec]
; module_names_1 := (module_names_1 union Set(_single(32481164592901701)))
; [eval] (module_names_1 union Set(_single(32481164592901701)))
; [eval] Set(_single(32481164592901701))
; [eval] _single(32481164592901701)
(declare-const module_names_1@689@01 Set<_Name>)
(assert (=
  module_names_1@689@01
  (Set_union module_names_1@688@01 (Set_singleton (_single<_Name> 32481164592901701)))))
; [exec]
; module_names_1 := (module_names_1 union Set(_single(32481125787004233)))
; [eval] (module_names_1 union Set(_single(32481125787004233)))
; [eval] Set(_single(32481125787004233))
; [eval] _single(32481125787004233)
(declare-const module_names_1@690@01 Set<_Name>)
(assert (=
  module_names_1@690@01
  (Set_union module_names_1@689@01 (Set_singleton (_single<_Name> 32481125787004233)))))
; [exec]
; module_names_1 := (module_names_1 union Set(_single(7827276)))
; [eval] (module_names_1 union Set(_single(7827276)))
; [eval] Set(_single(7827276))
; [eval] _single(7827276)
(declare-const module_names_1@691@01 Set<_Name>)
(assert (=
  module_names_1@691@01
  (Set_union module_names_1@690@01 (Set_singleton (_single<_Name> 7827276)))))
; [exec]
; module_names_1 := (module_names_1 union Set(_single(8389754714483814220)))
; [eval] (module_names_1 union Set(_single(8389754714483814220)))
; [eval] Set(_single(8389754714483814220))
; [eval] _single(8389754714483814220)
(declare-const module_names_1@692@01 Set<_Name>)
(assert (=
  module_names_1@692@01
  (Set_union module_names_1@691@01 (Set_singleton (_single<_Name> 8389754714483814220)))))
; [exec]
; module_names_1 := (module_names_1 union
;   Set(_single(1871507244730112373328)))
; [eval] (module_names_1 union Set(_single(1871507244730112373328)))
; [eval] Set(_single(1871507244730112373328))
; [eval] _single(1871507244730112373328)
(declare-const module_names_1@693@01 Set<_Name>)
(assert (=
  module_names_1@693@01
  (Set_union module_names_1@692@01 (Set_singleton (_single<_Name> 1871507244730112373328)))))
; [exec]
; module_names_1 := (module_names_1 union Set(_single(1701999952)))
; [eval] (module_names_1 union Set(_single(1701999952)))
; [eval] Set(_single(1701999952))
; [eval] _single(1701999952)
(declare-const module_names_1@694@01 Set<_Name>)
(assert (=
  module_names_1@694@01
  (Set_union module_names_1@693@01 (Set_singleton (_single<_Name> 1701999952)))))
; [exec]
; module_names_1 := (module_names_1 union Set(_single(8315178084276987218)))
; [eval] (module_names_1 union Set(_single(8315178084276987218)))
; [eval] Set(_single(8315178084276987218))
; [eval] _single(8315178084276987218)
(declare-const module_names_1@695@01 Set<_Name>)
(assert (=
  module_names_1@695@01
  (Set_union module_names_1@694@01 (Set_singleton (_single<_Name> 8315178084276987218)))))
; [exec]
; module_names_1 := (module_names_1 union Set(_single(7738150958662902082)))
; [eval] (module_names_1 union Set(_single(7738150958662902082)))
; [eval] Set(_single(7738150958662902082))
; [eval] _single(7738150958662902082)
(declare-const module_names_1@696@01 Set<_Name>)
(assert (=
  module_names_1@696@01
  (Set_union module_names_1@695@01 (Set_singleton (_single<_Name> 7738150958662902082)))))
; [exec]
; module_names_1 := (module_names_1 union Set(_single(465558725964)))
; [eval] (module_names_1 union Set(_single(465558725964)))
; [eval] Set(_single(465558725964))
; [eval] _single(465558725964)
(declare-const module_names_1@697@01 Set<_Name>)
(assert (=
  module_names_1@697@01
  (Set_union module_names_1@696@01 (Set_singleton (_single<_Name> 465558725964)))))
; [exec]
; module_names_1 := (module_names_1 union
;   Set(_single(122646376569110405802325325)))
; [eval] (module_names_1 union Set(_single(122646376569110405802325325)))
; [eval] Set(_single(122646376569110405802325325))
; [eval] _single(122646376569110405802325325)
(declare-const module_names_1@698@01 Set<_Name>)
(assert (=
  module_names_1@698@01
  (Set_union module_names_1@697@01 (Set_singleton (_single<_Name> 122646376569110405802325325)))))
; [exec]
; module_names_1 := (module_names_1 union
;   Set(_single(8038062462289584464661321053517)))
; [eval] (module_names_1 union Set(_single(8038062462289584464661321053517)))
; [eval] Set(_single(8038062462289584464661321053517))
; [eval] _single(8038062462289584464661321053517)
(declare-const module_names_1@699@01 Set<_Name>)
(assert (=
  module_names_1@699@01
  (Set_union module_names_1@698@01 (Set_singleton (_single<_Name> 8038062462289584464661321053517)))))
; [exec]
; module_names_1 := (module_names_1 union
;   Set(_single(1999559502384759136599)))
; [eval] (module_names_1 union Set(_single(1999559502384759136599)))
; [eval] Set(_single(1999559502384759136599))
; [eval] _single(1999559502384759136599)
(declare-const module_names_1@700@01 Set<_Name>)
(assert (=
  module_names_1@700@01
  (Set_union module_names_1@699@01 (Set_singleton (_single<_Name> 1999559502384759136599)))))
; [exec]
; assert true &&
;   ((_single(7738150958662902082) in module_names_1) &&
;   (_single(7738150958662902082) in module_names_1))
; [eval] (_single(7738150958662902082) in module_names_1)
; [eval] _single(7738150958662902082)
(push) ; 4
(assert (not (Set_in (_single<_Name> 7738150958662902082) module_names_1@700@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 7738150958662902082) module_names_1@700@01))
; [eval] (_single(7738150958662902082) in module_names_1)
; [eval] _single(7738150958662902082)
; [exec]
; assert true && (_single(7738150958662902082) in module_names_1)
; [eval] (_single(7738150958662902082) in module_names_1)
; [eval] _single(7738150958662902082)
; [exec]
; module_names_1 := (module_names_1 union Set(_single(6872339552563453791)))
; [eval] (module_names_1 union Set(_single(6872339552563453791)))
; [eval] Set(_single(6872339552563453791))
; [eval] _single(6872339552563453791)
(declare-const module_names_1@701@01 Set<_Name>)
(assert (=
  module_names_1@701@01
  (Set_union module_names_1@700@01 (Set_singleton (_single<_Name> 6872339552563453791)))))
; [exec]
; module_names_1 := (module_names_1 union
;   Set(_single(474107507589505187341671)))
; [eval] (module_names_1 union Set(_single(474107507589505187341671)))
; [eval] Set(_single(474107507589505187341671))
; [eval] _single(474107507589505187341671)
(declare-const module_names_1@702@01 Set<_Name>)
(assert (=
  module_names_1@702@01
  (Set_union module_names_1@701@01 (Set_singleton (_single<_Name> 474107507589505187341671)))))
; [exec]
; module_names_1 := (module_names_1 union Set(_single(28554769915274081)))
; [eval] (module_names_1 union Set(_single(28554769915274081)))
; [eval] Set(_single(28554769915274081))
; [eval] _single(28554769915274081)
(declare-const module_names_1@703@01 Set<_Name>)
(assert (=
  module_names_1@703@01
  (Set_union module_names_1@702@01 (Set_singleton (_single<_Name> 28554769915274081)))))
; [exec]
; module_names_1 := (module_names_1 union Set(_single(28555834798400882)))
; [eval] (module_names_1 union Set(_single(28555834798400882)))
; [eval] Set(_single(28555834798400882))
; [eval] _single(28555834798400882)
(declare-const module_names_1@704@01 Set<_Name>)
(assert (=
  module_names_1@704@01
  (Set_union module_names_1@703@01 (Set_singleton (_single<_Name> 28555834798400882)))))
; [exec]
; module_names_1 := (module_names_1 union Set(_single(1801678668)))
; [eval] (module_names_1 union Set(_single(1801678668)))
; [eval] Set(_single(1801678668))
; [eval] _single(1801678668)
(declare-const module_names_1@705@01 Set<_Name>)
(assert (=
  module_names_1@705@01
  (Set_union module_names_1@704@01 (Set_singleton (_single<_Name> 1801678668)))))
; [exec]
; assert (_single(1801678668) in module_names_1)
; [eval] (_single(1801678668) in module_names_1)
; [eval] _single(1801678668)
(push) ; 4
(assert (not (Set_in (_single<_Name> 1801678668) module_names_1@705@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 1801678668) module_names_1@705@01))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(1801678668)))
; [eval] (module_names_0 union Set(_single(1801678668)))
; [eval] Set(_single(1801678668))
; [eval] _single(1801678668)
(declare-const module_names_0@706@01 Set<_Name>)
(assert (=
  module_names_0@706@01
  (Set_union module_names_0@684@01 (Set_singleton (_single<_Name> 1801678668)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(7809644653626814543)))
; [eval] (module_names_0 union Set(_single(7809644653626814543)))
; [eval] Set(_single(7809644653626814543))
; [eval] _single(7809644653626814543)
(declare-const module_names_0@707@01 Set<_Name>)
(assert (=
  module_names_0@707@01
  (Set_union module_names_0@706@01 (Set_singleton (_single<_Name> 7809644653626814543)))))
; [exec]
; assert true && (_single(1801678668) in module_names_0)
; [eval] (_single(1801678668) in module_names_0)
; [eval] _single(1801678668)
(push) ; 4
(assert (not (Set_in (_single<_Name> 1801678668) module_names_0@707@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 1801678668) module_names_0@707@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(507127461243355975541327)))
; [eval] (module_names_0 union Set(_single(507127461243355975541327)))
; [eval] Set(_single(507127461243355975541327))
; [eval] _single(507127461243355975541327)
(declare-const module_names_0@708@01 Set<_Name>)
(assert (=
  module_names_0@708@01
  (Set_union module_names_0@707@01 (Set_singleton (_single<_Name> 507127461243355975541327)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872339552563453791)))
; [eval] (module_names_0 union Set(_single(6872339552563453791)))
; [eval] Set(_single(6872339552563453791))
; [eval] _single(6872339552563453791)
(declare-const module_names_0@709@01 Set<_Name>)
(assert (=
  module_names_0@709@01
  (Set_union module_names_0@708@01 (Set_singleton (_single<_Name> 6872339552563453791)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(28539376533188973)))
; [eval] (module_names_0 union Set(_single(28539376533188973)))
; [eval] Set(_single(28539376533188973))
; [eval] _single(28539376533188973)
(declare-const module_names_0@710@01 Set<_Name>)
(assert (=
  module_names_0@710@01
  (Set_union module_names_0@709@01 (Set_singleton (_single<_Name> 28539376533188973)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(28539376533189229)))
; [eval] (module_names_0 union Set(_single(28539376533189229)))
; [eval] Set(_single(28539376533189229))
; [eval] _single(28539376533189229)
(declare-const module_names_0@711@01 Set<_Name>)
(assert (=
  module_names_0@711@01
  (Set_union module_names_0@710@01 (Set_singleton (_single<_Name> 28539376533189229)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(562825645641629154092805253263995501)))
; [eval] (module_names_0 union Set(_single(562825645641629154092805253263995501)))
; [eval] Set(_single(562825645641629154092805253263995501))
; [eval] _single(562825645641629154092805253263995501)
(declare-const module_names_0@712@01 Set<_Name>)
(assert (=
  module_names_0@712@01
  (Set_union module_names_0@711@01 (Set_singleton (_single<_Name> 562825645641629154092805253263995501)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(8588037805903949404065870328429)))
; [eval] (module_names_0 union Set(_single(8588037805903949404065870328429)))
; [eval] Set(_single(8588037805903949404065870328429))
; [eval] _single(8588037805903949404065870328429)
(declare-const module_names_0@713@01 Set<_Name>)
(assert (=
  module_names_0@713@01
  (Set_union module_names_0@712@01 (Set_singleton (_single<_Name> 8588037805903949404065870328429)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(13902660767016302)))
; [eval] (module_names_0 union Set(_single(13902660767016302)))
; [eval] Set(_single(13902660767016302))
; [eval] _single(13902660767016302)
(declare-const module_names_0@714@01 Set<_Name>)
(assert (=
  module_names_0@714@01
  (Set_union module_names_0@713@01 (Set_singleton (_single<_Name> 13902660767016302)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(2551120871334166725085843187983676776826234222)))
; [eval] (module_names_0 union Set(_single(2551120871334166725085843187983676776826234222)))
; [eval] Set(_single(2551120871334166725085843187983676776826234222))
; [eval] _single(2551120871334166725085843187983676776826234222)
(declare-const module_names_0@715@01 Set<_Name>)
(assert (=
  module_names_0@715@01
  (Set_union module_names_0@714@01 (Set_singleton (_single<_Name> 2551120871334166725085843187983676776826234222)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(14184135743726958)))
; [eval] (module_names_0 union Set(_single(14184135743726958)))
; [eval] Set(_single(14184135743726958))
; [eval] _single(14184135743726958)
(declare-const module_names_0@716@01 Set<_Name>)
(assert (=
  module_names_0@716@01
  (Set_union module_names_0@715@01 (Set_singleton (_single<_Name> 14184135743726958)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(2551120871334166725085843187983958251802944878)))
; [eval] (module_names_0 union Set(_single(2551120871334166725085843187983958251802944878)))
; [eval] Set(_single(2551120871334166725085843187983958251802944878))
; [eval] _single(2551120871334166725085843187983958251802944878)
(declare-const module_names_0@717@01 Set<_Name>)
(assert (=
  module_names_0@717@01
  (Set_union module_names_0@716@01 (Set_singleton (_single<_Name> 2551120871334166725085843187983958251802944878)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(14465610720437614)))
; [eval] (module_names_0 union Set(_single(14465610720437614)))
; [eval] Set(_single(14465610720437614))
; [eval] _single(14465610720437614)
(declare-const module_names_0@718@01 Set<_Name>)
(assert (=
  module_names_0@718@01
  (Set_union module_names_0@717@01 (Set_singleton (_single<_Name> 14465610720437614)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(14747085697148270)))
; [eval] (module_names_0 union Set(_single(14747085697148270)))
; [eval] Set(_single(14747085697148270))
; [eval] _single(14747085697148270)
(declare-const module_names_0@719@01 Set<_Name>)
(assert (=
  module_names_0@719@01
  (Set_union module_names_0@718@01 (Set_singleton (_single<_Name> 14747085697148270)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(43546020265058356650139830586260462363855850147374446)))
; [eval] (module_names_0 union Set(_single(43546020265058356650139830586260462363855850147374446)))
; [eval] Set(_single(43546020265058356650139830586260462363855850147374446))
; [eval] _single(43546020265058356650139830586260462363855850147374446)
(declare-const module_names_0@720@01 Set<_Name>)
(assert (=
  module_names_0@720@01
  (Set_union module_names_0@719@01 (Set_singleton (_single<_Name> 43546020265058356650139830586260462363855850147374446)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(43565019630058432626260940051163620967241441344709998)))
; [eval] (module_names_0 union Set(_single(43565019630058432626260940051163620967241441344709998)))
; [eval] Set(_single(43565019630058432626260940051163620967241441344709998))
; [eval] _single(43565019630058432626260940051163620967241441344709998)
(declare-const module_names_0@721@01 Set<_Name>)
(assert (=
  module_names_0@721@01
  (Set_union module_names_0@720@01 (Set_singleton (_single<_Name> 43565019630058432626260940051163620967241441344709998)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(65)))
; [eval] (module_names_0 union Set(_single(65)))
; [eval] Set(_single(65))
; [eval] _single(65)
(declare-const module_names_0@722@01 Set<_Name>)
(assert (=
  module_names_0@722@01
  (Set_union module_names_0@721@01 (Set_singleton (_single<_Name> 65)))))
; [exec]
; label __end
; [eval] (forperm _r_92: Ref [MustInvokeBounded(_r_92)] :: false)
; [eval] (forperm _r_92: Ref [MustInvokeUnbounded(_r_92)] :: false)
; [eval] (forperm _r_92: Ref [_r_92.MustReleaseBounded] :: false)
; [eval] (forperm _r_92: Ref [_r_92.MustReleaseUnbounded] :: false)
(pop) ; 3
; [eval] !!module_defined_1
; [eval] !module_defined_1
; [then-branch: 663 | False | dead]
; [else-branch: 663 | True | live]
(push) ; 3
; [else-branch: 663 | True]
(pop) ; 3
(pop) ; 2
(pop) ; 1
